diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl.java
index bf295e7..ec4ce2b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl.java
@@ -145,8 +145,9 @@ public class MultiVersionConcurrencyControl {
    * of the passed in WriteEntry.  Thus, the write is visible to MVCC readers.
    */
   public void completeAndWait(WriteEntry e) {
-    complete(e);
-    waitForRead(e);
+    if (!complete(e)) {
+      waitForRead(e);
+    }
   }
 
   /**
@@ -208,6 +209,7 @@ public class MultiVersionConcurrencyControl {
     boolean interrupted = false;
     int count = 0;
     synchronized (readWaiters) {
+      syncOnReadWaiters++;
       while (readPoint.get() < e.getWriteNumber()) {
         if (count % 100 == 0 && count > 0) {
           LOG.warn("STUCK: " + this);
@@ -278,4 +280,11 @@ public class MultiVersionConcurrencyControl {
       ClassSize.OBJECT +
       2 * Bytes.SIZEOF_LONG +
       2 * ClassSize.REFERENCE);
+
+  private long syncOnReadWaiters = 0L;
+
+  @VisibleForTesting
+  public long getSyncCountOnReadWaiters() {
+    return this.syncOnReadWaiters;
+  }
 }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestAtomicOperation.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestAtomicOperation.java
index 0626dce..85b5800 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestAtomicOperation.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestAtomicOperation.java
@@ -364,6 +364,8 @@ public class TestAtomicOperation {
     assertEquals(result.getValue(fam1, qual1).length, 10000);
     assertEquals(result.getValue(fam1, qual2).length, 10000);
     assertEquals(result.getValue(fam2, qual3).length, 10000);
+    LOG.debug("Synchronize times on readWaiters: "
+        + ((HRegion) region).getMVCC().getSyncCountOnReadWaiters());
   }
   /**
    * Test multi-threaded row mutations.
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
index ed7623c..3080753 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
@@ -3913,6 +3913,8 @@ public class TestHRegion {
         // dealt with so could still be memory hanging out when we get to here -- memory we can't
         // flush because the accounting is 'off' since original DSE.
       }
+      LOG.debug("Synchronize times on readWaiters: "
+          + region.getMVCC().getSyncCountOnReadWaiters());
       this.region = null;
     }
   }
