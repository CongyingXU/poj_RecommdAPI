diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
index d6bdec0..3c65c94 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
@@ -130,8 +130,8 @@ public class CacheConfig {
   private static final String EXTERNAL_BLOCKCACHE_KEY = "hbase.blockcache.use.external";
   private static final boolean EXTERNAL_BLOCKCACHE_DEFAULT = false;
 
-  private static final String EXTERNAL_BLOCKCACHE_CLASS_KEY="hbase.blockcache.external.class";
-  private static final String DROP_BEHIND_CACHE_COMPACTION_KEY="hbase.hfile.drop.behind.compaction";
+  private static final String EXTERNAL_BLOCKCACHE_CLASS_KEY= "hbase.blockcache.external.class";
+  private static final String DROP_BEHIND_CACHE_COMPACTION_KEY= "hbase.hfile.drop.behind.compaction";
   private static final boolean DROP_BEHIND_CACHE_COMPACTION_DEFAULT = true;
 
   /**
@@ -154,6 +154,17 @@ public class CacheConfig {
     }
   }
 
+
+  /**
+   * Configuration key to disable data blocks cache for testing the performance of the file system
+   */
+  public static final String DISABLE_DATA_BLOCKS_CACHE_KEY = "hbase.block.data.cache.disable";
+
+  /**
+   * Default value for the configuration: DISABLE_DATA_BLOCKS_CACHE_KEY
+   */
+  private static final boolean DISABLE_DATA_BLOCKS_CACHE_DEFAULT = false;
+
   // Defaults
   public static final boolean DEFAULT_CACHE_DATA_ON_READ = true;
   public static final boolean DEFAULT_CACHE_DATA_ON_WRITE = false;
@@ -206,6 +217,10 @@ public class CacheConfig {
   private final boolean dropBehindCompaction;
 
   /**
+   * Whether or not to disable the data block cache
+   */
+  private final boolean disableCacheDataBlock;
+  /**
    * Create a cache configuration using the specified configuration object and
    * family descriptor.
    * @param conf hbase configuration
@@ -230,7 +245,8 @@ public class CacheConfig {
             DEFAULT_PREFETCH_ON_OPEN) || family.isPrefetchBlocksOnOpen(),
         conf.getBoolean(HColumnDescriptor.CACHE_DATA_IN_L1,
             HColumnDescriptor.DEFAULT_CACHE_DATA_IN_L1) || family.isCacheDataInL1(),
-        conf.getBoolean(DROP_BEHIND_CACHE_COMPACTION_KEY,DROP_BEHIND_CACHE_COMPACTION_DEFAULT)
+        conf.getBoolean(DROP_BEHIND_CACHE_COMPACTION_KEY, DROP_BEHIND_CACHE_COMPACTION_DEFAULT),
+        conf.getBoolean(DISABLE_DATA_BLOCKS_CACHE_KEY, DISABLE_DATA_BLOCKS_CACHE_DEFAULT)
      );
   }
 
@@ -252,7 +268,8 @@ public class CacheConfig {
         conf.getBoolean(PREFETCH_BLOCKS_ON_OPEN_KEY, DEFAULT_PREFETCH_ON_OPEN),
         conf.getBoolean(HColumnDescriptor.CACHE_DATA_IN_L1,
           HColumnDescriptor.DEFAULT_CACHE_DATA_IN_L1),
-        conf.getBoolean(DROP_BEHIND_CACHE_COMPACTION_KEY,DROP_BEHIND_CACHE_COMPACTION_DEFAULT)
+        conf.getBoolean(DROP_BEHIND_CACHE_COMPACTION_KEY, DROP_BEHIND_CACHE_COMPACTION_DEFAULT),
+        conf.getBoolean(DISABLE_DATA_BLOCKS_CACHE_KEY, DISABLE_DATA_BLOCKS_CACHE_DEFAULT)
      );
   }
 
@@ -270,14 +287,17 @@ public class CacheConfig {
    * @param cacheDataCompressed whether to store blocks as compressed in the cache
    * @param prefetchOnOpen whether to prefetch blocks upon open
    * @param cacheDataInL1 If more than one cache tier deployed, if true, cache this column families
-   * data blocks up in the L1 tier.
+   *        data blocks up in the L1 tier.
+   * @param dropBehindCompaction Whether the cache of HFile in the file system should be dropped after compaction
+   * @param disableCacheDataBlock Whether to disable the data block cache
    */
   CacheConfig(final BlockCache blockCache,
       final boolean cacheDataOnRead, final boolean inMemory,
       final boolean cacheDataOnWrite, final boolean cacheIndexesOnWrite,
       final boolean cacheBloomsOnWrite, final boolean evictOnClose,
       final boolean cacheDataCompressed, final boolean prefetchOnOpen,
-      final boolean cacheDataInL1, final boolean dropBehindCompaction) {
+      final boolean cacheDataInL1, final boolean dropBehindCompaction,
+      final boolean disableCacheDataBlock) {
     this.blockCache = blockCache;
     this.cacheDataOnRead = cacheDataOnRead;
     this.inMemory = inMemory;
@@ -289,6 +309,7 @@ public class CacheConfig {
     this.prefetchOnOpen = prefetchOnOpen;
     this.cacheDataInL1 = cacheDataInL1;
     this.dropBehindCompaction = dropBehindCompaction;
+    this.disableCacheDataBlock = disableCacheDataBlock;
     LOG.info(this);
   }
 
@@ -301,7 +322,8 @@ public class CacheConfig {
         cacheConf.cacheDataOnWrite, cacheConf.cacheIndexesOnWrite,
         cacheConf.cacheBloomsOnWrite, cacheConf.evictOnClose,
         cacheConf.cacheDataCompressed, cacheConf.prefetchOnOpen,
-        cacheConf.cacheDataInL1, cacheConf.dropBehindCompaction);
+        cacheConf.cacheDataInL1, cacheConf.dropBehindCompaction,
+        cacheConf.disableCacheDataBlock);
   }
 
   /**
@@ -325,6 +347,9 @@ public class CacheConfig {
    * @return true if blocks should be cached on read, false if not
    */
   public boolean shouldCacheDataOnRead() {
+    if (disableCacheDataBlock) {
+      return false;
+    }
     return isBlockCacheEnabled() && cacheDataOnRead;
   }
 
@@ -338,6 +363,9 @@ public class CacheConfig {
    * available.
    */
   public boolean shouldCacheBlockOnRead(BlockCategory category) {
+    if (disableCacheDataBlock && category == BlockCategory.DATA) {
+      return false;
+    }
     return isBlockCacheEnabled()
         && (cacheDataOnRead ||
             category == BlockCategory.INDEX ||
@@ -366,6 +394,9 @@ public class CacheConfig {
    *         written, false if not
    */
   public boolean shouldCacheDataOnWrite() {
+    if (disableCacheDataBlock) {
+      return false;
+    }
     return isBlockCacheEnabled() && this.cacheDataOnWrite;
   }
 
@@ -426,6 +457,9 @@ public class CacheConfig {
    * @return true if data blocks should be compressed in the cache, false if not
    */
   public boolean shouldCacheDataCompressed() {
+    if (disableCacheDataBlock) {
+      return false;
+    }
     return isBlockCacheEnabled() && this.cacheDataCompressed;
   }
 
@@ -434,6 +468,9 @@ public class CacheConfig {
    */
   public boolean shouldCacheCompressed(BlockCategory category) {
     if (!isBlockCacheEnabled()) return false;
+    if (disableCacheDataBlock && category == BlockCategory.DATA) {
+      return false;
+    }
     switch (category) {
       case DATA:
         return this.cacheDataCompressed;
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheConfig.java hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheConfig.java
index ad08794..62babdc 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheConfig.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheConfig.java
@@ -19,6 +19,7 @@
 package org.apache.hadoop.hbase.io.hfile;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
@@ -37,6 +38,7 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.testclassification.IOTests;
 import org.apache.hadoop.hbase.testclassification.LargeTests;
+import org.apache.hadoop.hbase.io.hfile.BlockType.BlockCategory;
 import org.apache.hadoop.hbase.io.hfile.Cacheable.MemoryType;
 import org.apache.hadoop.hbase.io.hfile.bucket.BucketCache;
 import org.apache.hadoop.hbase.nio.ByteBuff;
@@ -211,6 +213,52 @@ public class TestCacheConfig {
   }
 
   @Test
+  public void testDisableCacheDataBlock() throws IOException {
+    Configuration conf = HBaseConfiguration.create();
+    CacheConfig cacheConfig = new CacheConfig(conf);
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
+    assertFalse(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
+    assertFalse(cacheConfig.shouldCacheDataCompressed());
+    assertFalse(cacheConfig.shouldCacheDataOnWrite());
+    assertTrue(cacheConfig.shouldCacheDataOnRead());
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
+    assertFalse(cacheConfig.shouldCacheBloomsOnWrite());
+    assertFalse(cacheConfig.shouldCacheIndexesOnWrite());
+
+    conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY, true);
+    conf.setBoolean(CacheConfig.CACHE_DATA_BLOCKS_COMPRESSED_KEY, true);
+    conf.setBoolean(CacheConfig.CACHE_BLOOM_BLOCKS_ON_WRITE_KEY, true);
+    conf.setBoolean(CacheConfig.CACHE_INDEX_BLOCKS_ON_WRITE_KEY, true);
+
+    cacheConfig = new CacheConfig(conf);
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
+    assertTrue(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
+    assertTrue(cacheConfig.shouldCacheDataCompressed());
+    assertTrue(cacheConfig.shouldCacheDataOnWrite());
+    assertTrue(cacheConfig.shouldCacheDataOnRead());
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
+    assertTrue(cacheConfig.shouldCacheBloomsOnWrite());
+    assertTrue(cacheConfig.shouldCacheIndexesOnWrite());
+
+    conf.setBoolean(CacheConfig.DISABLE_DATA_BLOCKS_CACHE_KEY, true);
+    cacheConfig = new CacheConfig(conf);
+    assertFalse(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
+    assertFalse(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
+    assertFalse(cacheConfig.shouldCacheDataCompressed());
+    assertFalse(cacheConfig.shouldCacheDataOnWrite());
+    assertFalse(cacheConfig.shouldCacheDataOnRead());
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
+    assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
+    assertTrue(cacheConfig.shouldCacheBloomsOnWrite());
+    assertTrue(cacheConfig.shouldCacheIndexesOnWrite());
+  }
+
+  @Test
   public void testCacheConfigDefaultLRUBlockCache() {
     CacheConfig cc = new CacheConfig(this.conf);
     assertTrue(cc.isBlockCacheEnabled());
@@ -351,4 +399,4 @@ public class TestCacheConfig {
       blocks.get(BlockType.DATA) == null? 0:
       blocks.get(BlockType.DATA).intValue());
   }
-}
\ No newline at end of file
+}
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java
index 5158e35..1ee64da 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java
@@ -227,7 +227,7 @@ public class TestCacheOnWrite {
         new CacheConfig(blockCache, true, true, cowType.shouldBeCached(BlockType.DATA),
         cowType.shouldBeCached(BlockType.LEAF_INDEX),
         cowType.shouldBeCached(BlockType.BLOOM_CHUNK), false, cacheCompressedData,
-            false, false, false);
+            false, false, false, false);
   }
 
   @After
