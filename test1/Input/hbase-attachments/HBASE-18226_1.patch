diff --git a/hbase-common/src/main/resources/hbase-default.xml b/hbase-common/src/main/resources/hbase-default.xml
index 70c638b913..82955f5f53 100644
--- a/hbase-common/src/main/resources/hbase-default.xml
+++ b/hbase-common/src/main/resources/hbase-default.xml
@@ -988,6 +988,13 @@ possible configurations would overwhelm and obscure the important.
     When set to a non-empty value, this represents the (external facing) hostname for the underlying server.
     See https://issues.apache.org/jira/browse/HBASE-12954 for details.</description>
   </property>
+  <property>
+    <name>hbase.regionserver.hostname.auto</name>
+    <value>false</value>
+    <description>This config is for experts: don't set its value unless you really know what you are doing.
+    When set to true, regionserver will use the current node hostname for the servername and HMaster will skip reverse DNS lookup and use the hostname sent by regionserver. 
+    See https://issues.apache.org/jira/browse/HBASE-18226 for details.</description>
+  </property>
   <!-- The following properties configure authentication information for
        HBase processes when using Kerberos security.  There are no default
        values, included here for documentation purposes -->
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 61e89333d7..4dd888d9ad 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -450,6 +450,11 @@ public class HRegionServer extends HasThread implements
   @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
   protected final static String MASTER_HOSTNAME_KEY = "hbase.master.hostname";
 
+  // HBASE-18226
+  // use the hostname from regionserver node /etc/hosts, hbase.regionserver.hostname will be
+  // overwritten if users specify it in hbase-site.xml.
+  final static String RS_HOSTNAME_AUTO_KEY = "hbase.regionserver.hostname.auto";
+
   /**
    * This servers startcode.
    */
@@ -577,6 +582,9 @@ public class HRegionServer extends HasThread implements
       useThisHostnameInstead = conf.get(MASTER_HOSTNAME_KEY);
     } else {
       useThisHostnameInstead = conf.get(RS_HOSTNAME_KEY);
+      if (conf.getBoolean(RS_HOSTNAME_AUTO_KEY, false)) {
+        useThisHostnameInstead = rpcServices.isa.getHostName();
+      }
     }
     String hostName = shouldUseThisHostnameInstead() ? useThisHostnameInstead :
       rpcServices.isa.getHostName();
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
index e4da8db734..6bf550ec3a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
@@ -1209,7 +1209,9 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
       throws UnknownHostException {
     String hostname = conf.get(isMaster? HRegionServer.MASTER_HOSTNAME_KEY :
       HRegionServer.RS_HOSTNAME_KEY);
-    if (hostname == null || hostname.isEmpty()) {
+    if (hostname == null 
+        || hostname.isEmpty() 
+        || conf.getBoolean(HRegionServer.RS_HOSTNAME_AUTO_KEY, false)) {
       String masterOrRS = isMaster ? "master" : "regionserver";
       return Strings.domainNamePointerToHostName(DNS.getDefaultHost(
         conf.get("hbase." + masterOrRS + ".dns.interface", "default"),
