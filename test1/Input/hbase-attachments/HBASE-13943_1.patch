diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java
index b6ae948..f84bef7 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java
@@ -589,21 +589,6 @@ public final class CellUtil {
     return estimatedSerializedSizeOf(cell);
   }
 
-  /**
-   * This is a hack that should be removed once we don't care about matching
-   * up client- and server-side estimations of cell size. It needed to be
-   * backwards compatible with estimations done by older clients. We need to
-   * pretend that tags never exist and cells aren't serialized with tag
-   * length included. See HBASE-13262 and HBASE-13303
-   */
-  @Deprecated
-  public static long estimatedHeapSizeOfWithoutTags(final Cell cell) {
-    if (cell instanceof KeyValue) {
-      return ((KeyValue)cell).heapSizeWithoutTags();
-    }
-    return getSumOfCellKeyElementLengths(cell) + cell.getValueLength();
-  }
-
   /********************* tags *************************************/
   /**
    * Util method to iterate through the tags
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java
index b9b60f8..2fc7975 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java
@@ -2670,27 +2670,6 @@ public class KeyValue implements Cell, HeapSize, Cloneable, SettableSequenceId,
   }
 
   /**
-   * This is a hack that should be removed once we don't care about matching
-   * up client- and server-side estimations of cell size. It needed to be
-   * backwards compatible with estimations done by older clients. We need to
-   * pretend that tags never exist and KeyValues aren't serialized with tag
-   * length included. See HBASE-13262 and HBASE-13303
-   */
-  @Deprecated
-  public long heapSizeWithoutTags() {
-    int sum = 0;
-    sum += ClassSize.OBJECT;// the KeyValue object itself
-    sum += ClassSize.REFERENCE;// pointer to "bytes"
-    sum += ClassSize.align(ClassSize.ARRAY);// "bytes"
-    sum += KeyValue.KEYVALUE_INFRASTRUCTURE_SIZE;
-    sum += getKeyLength();
-    sum += getValueLength();
-    sum += 2 * Bytes.SIZEOF_INT;// offset, length
-    sum += Bytes.SIZEOF_LONG;// memstoreTS
-    return ClassSize.align(sum);
-  }
-
-  /**
    * A simple form of KeyValue that creates a keyvalue with only the key part of the byte[]
    * Mainly used in places where we need to compare two cells.  Avoids copying of bytes
    * In places like block index keys, we need to compare the key byte[] with a cell.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java
index 8a25dcd..3ed2fc9 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java
@@ -59,9 +59,4 @@ public class SizeCachedKeyValue extends KeyValue {
   public long heapSize() {
     return super.heapSize() + HEAP_SIZE_OVERHEAD;
   }
-
-  @Override
-  public long heapSizeWithoutTags() {
-    return super.heapSizeWithoutTags() + HEAP_SIZE_OVERHEAD;
-  }
 }
\ No newline at end of file
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsKeyValue.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsKeyValue.java
index 23ed0c6..2b21761 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsKeyValue.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsKeyValue.java
@@ -37,9 +37,4 @@ public class SizeCachedNoTagsKeyValue extends SizeCachedKeyValue {
   public int getTagsLength() {
     return 0;
   }
-
-  @Override
-  public long heapSizeWithoutTags() {
-    return super.heapSize();
-  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 7a69e32..c139296 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -5627,7 +5627,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
             scannerContext.setTimeProgress(timeProgress);
             scannerContext.incrementBatchProgress(results.size());
             for (Cell cell : results) {
-              scannerContext.incrementSizeProgress(CellUtil.estimatedHeapSizeOfWithoutTags(cell));
+              scannerContext.incrementSizeProgress(CellUtil.estimatedHeapSizeOf(cell));
             }
           }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
index 254e447..7bcf8e7 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
@@ -2336,7 +2336,7 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
               for (Result r : results) {
                 for (Cell cell : r.rawCells()) {
                   totalCellSize += CellUtil.estimatedSerializedSizeOf(cell);
-                  currentScanResultSize += CellUtil.estimatedHeapSizeOfWithoutTags(cell);
+                  currentScanResultSize += CellUtil.estimatedHeapSizeOf(cell);
                 }
               }
             }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
index d60087b..701cf8a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
@@ -590,7 +590,7 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
             totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);
 
             // Update the progress of the scanner context
-            scannerContext.incrementSizeProgress(CellUtil.estimatedHeapSizeOfWithoutTags(cell));
+            scannerContext.incrementSizeProgress(CellUtil.estimatedHeapSizeOf(cell));
             scannerContext.incrementBatchProgress(1);
 
             if (totalBytesRead > maxRowSize) {
