From 8440e915e4c0bfecefd5b23c1851532a55eedc8a Mon Sep 17 00:00:00 2001
From: Apekshit Sharma <appy@apache.org>
Date: Wed, 2 Nov 2016 15:59:07 -0700
Subject: [PATCH] HBASE-17006 Give name to existing threads. Having thread
 names in logs and thread dumps greatly improve debugability. This patch is
 simply adding the names to the threads, and in most cases, that name is
 <instance>.getClass().getName(). Note that it would give fully qualified name
 of the class, but should be fine.

Change-Id: I6ff22cc3804bb81147dde3a8e9ab671633c6f6ce
---
 .../hbase/chaos/monkies/PolicyBasedChaosMonkey.java  |  2 +-
 .../java/org/apache/hadoop/hbase/fs/HFileSystem.java |  2 +-
 .../hadoop/hbase/io/hfile/PrefetchExecutor.java      |  4 ++--
 .../hadoop/hbase/io/hfile/bucket/BucketCache.java    |  1 +
 .../java/org/apache/hadoop/hbase/master/HMaster.java |  3 ++-
 .../hbase/master/MasterMobCompactionThread.java      |  5 ++---
 .../hbase/regionserver/CompactSplitThread.java       | 20 ++++++++------------
 .../hadoop/hbase/regionserver/HRegionServer.java     |  9 ++-------
 .../org/apache/hadoop/hbase/regionserver/Leases.java |  1 +
 .../apache/hadoop/hbase/regionserver/LogRoller.java  |  2 +-
 .../hbase/regionserver/RegionServicesForStores.java  |  8 +++-----
 .../hadoop/hbase/regionserver/ShutdownHook.java      |  3 ++-
 .../java/org/apache/hadoop/hbase/tool/Canary.java    |  2 +-
 .../apache/hadoop/hbase/util/JvmPauseMonitor.java    |  3 +--
 .../apache/hadoop/hbase/util/ModifyRegionUtils.java  |  3 +--
 .../hadoop/hbase/PerformanceEvaluationCommons.java   |  4 +---
 .../hadoop/hbase/util/MultiThreadedAction.java       |  2 +-
 .../hadoop/hbase/util/MultiThreadedWriterBase.java   |  2 +-
 18 files changed, 32 insertions(+), 44 deletions(-)

diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java
index 9152cb2..57f7c83 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java
@@ -113,7 +113,7 @@ public class PolicyBasedChaosMonkey extends ChaosMonkey {
 
     for (int i=0; i<policies.length; i++) {
       policies[i].init(new Policy.PolicyContext(this.util));
-      Thread monkeyThread = new Thread(policies[i]);
+      Thread monkeyThread = new Thread(policies[i], "ChaosMonkeyThread");
       monkeyThread.start();
       monkeyThreads[i] = monkeyThread;
     }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/fs/HFileSystem.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/fs/HFileSystem.java
index b4f1953..16e8a35 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/fs/HFileSystem.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/fs/HFileSystem.java
@@ -273,7 +273,7 @@ public class HFileSystem extends FilterFileSystem {
       ClientProtocol cp1 = createReorderingProxy(namenode, lrb, conf);
       nf.set(dfsc, cp1);
       LOG.info("Added intercepting call to namenode#getBlockLocations so can do block reordering" +
-        " using class " + lrb.getClass());
+        " using class " + lrb.getClass().getName());
     } catch (NoSuchFieldException e) {
       LOG.warn("Can't modify the DFSClient#namenode field to add the location reorder.", e);
       return false;
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/PrefetchExecutor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/PrefetchExecutor.java
index f1ab4c4..61deef5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/PrefetchExecutor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/PrefetchExecutor.java
@@ -63,8 +63,8 @@ public class PrefetchExecutor {
       new ThreadFactory() {
         @Override
         public Thread newThread(Runnable r) {
-          Thread t = new Thread(r);
-          t.setName("hfile-prefetch-" + System.currentTimeMillis());
+          String name = "hfile-prefetch-" + System.currentTimeMillis();
+          Thread t = new Thread(r, name);
           t.setDaemon(true);
           return t;
         }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
index ec7a71f..a36423e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
@@ -784,6 +784,7 @@ public class BucketCache implements BlockCache, HeapSize {
     private volatile boolean writerEnabled = true;
 
     WriterThread(BlockingQueue<RAMQueueEntry> queue) {
+      super("BucketCacheWriterThread");
       this.inputQueue = queue;
     }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index beec198..8554d22 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -666,7 +666,8 @@ public class HMaster extends HRegionServer implements MasterServices {
       throws IOException, InterruptedException, KeeperException, CoordinatedStateException {
 
     isActiveMaster = true;
-    Thread zombieDetector = new Thread(new InitializationMonitor(this));
+    Thread zombieDetector = new Thread(new InitializationMonitor(this),
+        InitializationMonitor.class.getName());
     zombieDetector.start();
 
     /*
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterMobCompactionThread.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterMobCompactionThread.java
index f8a5c15..47f52f5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterMobCompactionThread.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterMobCompactionThread.java
@@ -57,9 +57,8 @@ public class MasterMobCompactionThread {
       new SynchronousQueue<Runnable>(), new ThreadFactory() {
         @Override
         public Thread newThread(Runnable r) {
-          Thread t = new Thread(r);
-          t.setName(n + "-MasterMobCompaction-" + EnvironmentEdgeManager.currentTime());
-          return t;
+          String name = n + "-MasterMobCompaction-" + EnvironmentEdgeManager.currentTime();
+          return new Thread(r, name);
         }
       });
     ((ThreadPoolExecutor) this.masterMobPool).allowCoreThreadTimeOut(true);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java
index a454f0e..1331b86 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java
@@ -124,9 +124,8 @@ public class CompactSplitThread implements CompactionRequestor, PropagatingConfi
         new ThreadFactory() {
           @Override
           public Thread newThread(Runnable r) {
-            Thread t = new Thread(r);
-            t.setName(n + "-longCompactions-" + System.currentTimeMillis());
-            return t;
+            String name = n + "-longCompactions-" + System.currentTimeMillis();
+            return new Thread(r, name);
           }
       });
     this.longCompactions.setRejectedExecutionHandler(new Rejection());
@@ -136,9 +135,8 @@ public class CompactSplitThread implements CompactionRequestor, PropagatingConfi
         new ThreadFactory() {
           @Override
           public Thread newThread(Runnable r) {
-            Thread t = new Thread(r);
-            t.setName(n + "-shortCompactions-" + System.currentTimeMillis());
-            return t;
+            String name = n + "-shortCompactions-" + System.currentTimeMillis();
+            return new Thread(r, name);
           }
       });
     this.shortCompactions
@@ -148,9 +146,8 @@ public class CompactSplitThread implements CompactionRequestor, PropagatingConfi
             new ThreadFactory() {
           @Override
           public Thread newThread(Runnable r) {
-            Thread t = new Thread(r);
-            t.setName(n + "-splits-" + System.currentTimeMillis());
-            return t;
+            String name = n + "-splits-" + System.currentTimeMillis();
+            return new Thread(r, name);
           }
       });
     int mergeThreads = conf.getInt(MERGE_THREADS, MERGE_THREADS_DEFAULT);
@@ -158,9 +155,8 @@ public class CompactSplitThread implements CompactionRequestor, PropagatingConfi
         mergeThreads, new ThreadFactory() {
           @Override
           public Thread newThread(Runnable r) {
-            Thread t = new Thread(r);
-            t.setName(n + "-merges-" + System.currentTimeMillis());
-            return t;
+            String name = n + "-merges-" + System.currentTimeMillis();
+            return new Thread(r, name);
           }
         });
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 495aace..8eecf49 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -504,9 +504,6 @@ public class HRegionServer extends HasThread implements
 
   /**
    * Starts a HRegionServer at the default location.
-   * @param conf
-   * @throws IOException
-   * @throws InterruptedException
    */
   public HRegionServer(Configuration conf) throws IOException, InterruptedException {
     this(conf, CoordinatedStateManagerFactory.getCoordinatedStateManager(conf));
@@ -514,12 +511,10 @@ public class HRegionServer extends HasThread implements
 
   /**
    * Starts a HRegionServer at the default location
-   * @param conf
    * @param csm implementation of CoordinatedStateManager to be used
-   * @throws IOException
    */
-  public HRegionServer(Configuration conf, CoordinatedStateManager csm)
-      throws IOException {
+  public HRegionServer(Configuration conf, CoordinatedStateManager csm) throws IOException {
+    super("HRegionServer");  // thread name
     this.fsOk = true;
     this.conf = conf;
     HFile.checkHFileVersion(this.conf);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Leases.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Leases.java
index 1373e27..3ed7345 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Leases.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Leases.java
@@ -68,6 +68,7 @@ public class Leases extends HasThread {
    *          (milliseconds)
    */
   public Leases(final int leaseCheckFrequency) {
+    super("HRegionServerLeases");  // thread name
     this.leaseCheckFrequency = leaseCheckFrequency;
     setDaemon(true);
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java
index fa217ee..9a2bb34 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java
@@ -90,7 +90,7 @@ public class LogRoller extends HasThread {
 
   /** @param server */
   public LogRoller(final Server server, final RegionServerServices services) {
-    super();
+    super("LogRoller");
     this.server = server;
     this.services = services;
     this.rollperiod = this.server.getConfiguration().
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServicesForStores.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServicesForStores.java
index c7f2ce6..82e6778 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServicesForStores.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServicesForStores.java
@@ -44,11 +44,9 @@ public class RegionServicesForStores {
           new ThreadFactory() {
             @Override
             public Thread newThread(Runnable r) {
-              Thread t = new Thread(r);
-              t.setName(Thread.currentThread().getName()
-                  + "-inmemoryCompactions-"
-                  + System.currentTimeMillis());
-              return t;
+              String name = Thread.currentThread().getName() + "-inmemoryCompactions-" +
+                  System.currentTimeMillis();
+              return new Thread(r, name);
             }
           });
   private final HRegion region;
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java
index 83e4ea8..a6e4992 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java
@@ -119,7 +119,8 @@ public class ShutdownHook {
             if (refs == 1) {
               LOG.info("Starting fs shutdown hook thread.");
               Thread fsShutdownHookThread = (fsShutdownHook instanceof Thread) ?
-                (Thread)fsShutdownHook : new Thread(fsShutdownHook);
+                (Thread)fsShutdownHook : new Thread(fsShutdownHook,
+                  fsShutdownHook.getClass().getName() + "-shutdown-hook");
               fsShutdownHookThread.start();
               Threads.shutdown(fsShutdownHookThread,
               this.conf.getLong(FS_SHUTDOWN_HOOK_WAIT, 30000));
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
index 10bc139..20c7ea5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
@@ -720,7 +720,7 @@ public final class Canary implements Tool {
         // Do monitor !!
         try {
           monitor = this.newMonitor(connection, index, args);
-          monitorThread = new Thread(monitor);
+          monitorThread = new Thread(monitor, monitor.getClass().getName());
           startTime = System.currentTimeMillis();
           monitorThread.start();
           while (!monitor.isDone()) {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/JvmPauseMonitor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/JvmPauseMonitor.java
index 436f04a..371310c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/JvmPauseMonitor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/JvmPauseMonitor.java
@@ -83,9 +83,8 @@ public class JvmPauseMonitor {
   
   public void start() {
     Preconditions.checkState(monitorThread == null, "Already started");
-    monitorThread = new Thread(new Monitor());
+    monitorThread = new Thread(new Monitor(), JvmPauseMonitor.class.getName());
     monitorThread.setDaemon(true);
-    monitorThread.setName("JvmPauseMonitor");
     monitorThread.start();
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ModifyRegionUtils.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ModifyRegionUtils.java
index a936fc2..f11d38b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ModifyRegionUtils.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ModifyRegionUtils.java
@@ -233,8 +233,7 @@ public abstract class ModifyRegionUtils {
 
           @Override
           public Thread newThread(Runnable r) {
-            Thread t = new Thread(r, threadNamePrefix + "-" + count++);
-            return t;
+            return new Thread(r, threadNamePrefix + "-" + count++);
           }
         });
     return regionOpenAndInitThreadPool;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluationCommons.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluationCommons.java
index 3270c1c..3809a13 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluationCommons.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluationCommons.java
@@ -69,9 +69,7 @@ public class PerformanceEvaluationCommons {
     long now = System.currentTimeMillis();
     List<Thread> threads = new ArrayList<Thread>(count);
     for (int i = 0; i < count; i++) {
-      Thread t = new Thread(r);
-      t.setName("" + i);
-      threads.add(t);
+      threads.add(new Thread(r, "concurrentRead-" + i));
     }
     for (Thread t: threads) {
       t.start();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java
index 7001441..3a608be 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java
@@ -158,7 +158,7 @@ public abstract class MultiThreadedAction {
     this.startKey = startKey;
     this.endKey = endKey;
     this.numThreads = numThreads;
-    (new Thread(new ProgressReporter(actionLetter))).start();
+    (new Thread(new ProgressReporter(actionLetter), ProgressReporter.class.getName())).start();
   }
 
   private static String formatTime(long elapsedTime) {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedWriterBase.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedWriterBase.java
index d4e6d80..27d02ca 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedWriterBase.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedWriterBase.java
@@ -89,7 +89,7 @@ public abstract class MultiThreadedWriterBase extends MultiThreadedAction {
     wroteUpToKey.set(startKey - 1);
 
     if (trackWroteKeys) {
-      new Thread(new WroteKeysTracker()).start();
+      new Thread(new WroteKeysTracker(), WroteKeysTracker.class.getName()).start();
       numThreadsWorking.incrementAndGet();
     }
   }
-- 
2.3.2 (Apple Git-55)
