From 2fed2ac0cd62840fece0ef74f3c8a4de210b77f1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?G=C3=A1bor=20Lipt=C3=A1k?= <gliptak@gmail.com>
Date: Thu, 11 Jun 2015 20:04:28 -0400
Subject: [PATCH] Create hbase.hstore.compaction.min in HConstants

---
 .../java/org/apache/hadoop/hbase/HConstants.java   | 12 +++++++++++
 hbase-common/src/main/resources/hbase-default.xml  |  3 ++-
 .../hbase/regionserver/StripeStoreConfig.java      |  3 ++-
 .../compactions/CompactionConfiguration.java       |  6 +++---
 .../org/apache/hadoop/hbase/TestIOFencing.java     |  3 +--
 .../example/TestZooKeeperTableArchiveClient.java   |  2 +-
 .../hbase/client/TestCloneSnapshotFromClient.java  |  2 +-
 .../hadoop/hbase/client/TestFromClientSide3.java   | 23 ++++++++++------------
 .../client/TestRestoreSnapshotFromClient.java      |  2 +-
 .../client/TestSnapshotCloneIndependence.java      |  3 +--
 .../hbase/client/TestSnapshotFromClient.java       |  3 +--
 .../hadoop/hbase/client/TestSnapshotMetadata.java  |  3 +--
 .../coprocessor/TestCoprocessorInterface.java      |  2 +-
 .../TestRegionObserverScannerOpenHook.java         |  2 +-
 .../hfile/TestScannerSelectionUsingKeyRange.java   |  3 ++-
 .../hbase/mapreduce/TestHFileOutputFormat.java     |  4 ++--
 .../hbase/mapreduce/TestHFileOutputFormat2.java    |  4 ++--
 .../hbase/master/TestDistributedLogSplitting.java  |  2 +-
 .../master/cleaner/TestSnapshotFromMaster.java     |  4 ++--
 .../apache/hadoop/hbase/quotas/TestQuotaAdmin.java |  2 +-
 .../hadoop/hbase/quotas/TestQuotaTableUtil.java    |  2 +-
 .../hadoop/hbase/quotas/TestQuotaThrottle.java     |  2 +-
 .../hadoop/hbase/regionserver/TestBlocksRead.java  |  5 +++--
 .../hadoop/hbase/regionserver/TestCompaction.java  |  3 ++-
 .../regionserver/TestCorruptedRegionStoreFile.java |  3 ++-
 .../regionserver/TestDefaultCompactSelection.java  |  2 +-
 .../hadoop/hbase/regionserver/TestHRegion.java     |  8 ++++----
 .../hbase/regionserver/TestMajorCompaction.java    |  3 ++-
 .../hbase/regionserver/TestMinorCompaction.java    |  3 ++-
 .../hbase/regionserver/TestRegionReplicas.java     |  5 +++--
 .../regionserver/TestScannerRetriableFailure.java  |  3 ++-
 .../hadoop/hbase/regionserver/TestStore.java       |  5 +++--
 .../compactions/PerfTestCompactionPolicies.java    |  3 ++-
 .../TestCompactionWithThroughputController.java    |  8 ++++----
 .../snapshot/TestFlushSnapshotFromClient.java      |  3 +--
 .../apache/hadoop/hbase/util/TestMergeTool.java    |  2 +-
 src/main/asciidoc/_chapters/hbase-default.adoc     |  3 ++-
 37 files changed, 84 insertions(+), 67 deletions(-)

diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
index 674ef6e..18ff15b 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
@@ -264,6 +264,18 @@ public final class HConstants {
   public static final String COMPACTION_KV_MAX = "hbase.hstore.compaction.kv.max";
   public static final int COMPACTION_KV_MAX_DEFAULT = 10;
 
+  /**
+   * The minimum number of StoreFiles which must be eligible for compaction
+   * before compaction can run.
+   */
+  public static final String HSTORE_COMPACTION_MIN=
+          "hbase.hstore.compaction.min";
+
+  /**
+   * Default value for hbase.hstore.compaction.min.
+   */
+  public static final int DEFAULT_HSTORE_COMPACTION_MIN=3;
+
   /** Parameter name for HBase instance root directory */
   public static final String HBASE_DIR = "hbase.rootdir";
 
diff --git a/hbase-common/src/main/resources/hbase-default.xml b/hbase-common/src/main/resources/hbase-default.xml
index 57d2927..3bb0980 100644
--- a/hbase-common/src/main/resources/hbase-default.xml
+++ b/hbase-common/src/main/resources/hbase-default.xml
@@ -686,7 +686,8 @@ possible configurations would overwhelm and obscure the important.
   <property>
     <name>hbase.hstore.compactionThreshold</name>
     <value>3</value>
-    <description> If more than this number of StoreFiles exist in any one Store 
+    <description> (deprecated, see hbase.hstore.compaction.min) If more than
+      this number of StoreFiles exist in any one Store
       (one StoreFile is written per flush of MemStore), a compaction is run to rewrite all 
       StoreFiles into a single StoreFile. Larger values delay compaction, but when compaction does
       occur, it takes longer to complete.</description>
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreConfig.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreConfig.java
index 1725406..85f529a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreConfig.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreConfig.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.hbase.regionserver;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.regionserver.compactions.CompactionConfiguration;
@@ -82,7 +83,7 @@ public class StripeStoreConfig {
     this.level0CompactMinFiles = config.getInt(MIN_FILES_L0_KEY, 4);
     this.flushIntoL0 = config.getBoolean(FLUSH_TO_L0_KEY, false);
     int minMinFiles = flushIntoL0 ? 3 : 4; // make sure not to compact tiny files too often.
-    int minFiles = config.getInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY, -1);
+    int minFiles = config.getInt(HConstants.HSTORE_COMPACTION_MIN, -1);
     this.stripeCompactMinFiles = config.getInt(MIN_FILES_KEY, Math.max(minMinFiles, minFiles));
     this.stripeCompactMaxFiles = config.getInt(MAX_FILES_KEY,
         config.getInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MAX_KEY, 10));
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/CompactionConfiguration.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/CompactionConfiguration.java
index 048d128..0d64552 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/CompactionConfiguration.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/CompactionConfiguration.java
@@ -49,7 +49,6 @@ public class CompactionConfiguration {
   public static final String HBASE_HSTORE_COMPACTION_RATIO_KEY = "hbase.hstore.compaction.ratio";
   public static final String HBASE_HSTORE_COMPACTION_RATIO_OFFPEAK_KEY =
     "hbase.hstore.compaction.ratio.offpeak";
-  public static final String HBASE_HSTORE_COMPACTION_MIN_KEY = "hbase.hstore.compaction.min";
   public static final String HBASE_HSTORE_COMPACTION_MIN_SIZE_KEY =
     "hbase.hstore.compaction.min.size";
   public static final String HBASE_HSTORE_COMPACTION_MAX_KEY = "hbase.hstore.compaction.max";
@@ -82,8 +81,9 @@ public class CompactionConfiguration {
     maxCompactSize = conf.getLong(HBASE_HSTORE_COMPACTION_MAX_SIZE_KEY, Long.MAX_VALUE);
     minCompactSize = conf.getLong(HBASE_HSTORE_COMPACTION_MIN_SIZE_KEY,
         storeConfigInfo.getMemstoreFlushSize());
-    minFilesToCompact = Math.max(2, conf.getInt(HBASE_HSTORE_COMPACTION_MIN_KEY,
-          /*old name*/ conf.getInt("hbase.hstore.compactionThreshold", 3)));
+    minFilesToCompact = Math.max(2, conf.getInt(HConstants.HSTORE_COMPACTION_MIN,
+          /*old name*/ conf.getInt("hbase.hstore.compactionThreshold",
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN)));
     maxFilesToCompact = conf.getInt(HBASE_HSTORE_COMPACTION_MAX_KEY, 10);
     compactionRatio = conf.getFloat(HBASE_HSTORE_COMPACTION_RATIO_KEY, 1.2F);
     offPeakCompactionRatio = conf.getFloat(HBASE_HSTORE_COMPACTION_RATIO_OFFPEAK_KEY, 5.0F);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java
index 7d644bd..1514341 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java
@@ -251,8 +251,7 @@ public class TestIOFencing {
     c.setLong("hbase.hregion.memstore.flush.size", 100000);
     c.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY, ConstantSizeRegionSplitPolicy.class.getName());
     // Only run compaction when we tell it to
-    c.setInt("hbase.hstore.compaction.min",1);
-    c.setInt("hbase.hstore.compactionThreshold", 1000);
+    c.setInt(HConstants.HSTORE_COMPACTION_MIN, 1000);
     c.setLong("hbase.hstore.blockingStoreFiles", 1000);
     // Compact quickly after we tell it to!
     c.setInt("hbase.regionserver.thread.splitcompactcheckfrequency", 1000);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/backup/example/TestZooKeeperTableArchiveClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/backup/example/TestZooKeeperTableArchiveClient.java
index eba3c0b..0a6f8bd 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/backup/example/TestZooKeeperTableArchiveClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/backup/example/TestZooKeeperTableArchiveClient.java
@@ -95,7 +95,7 @@ public class TestZooKeeperTableArchiveClient {
 
   private static void setupConf(Configuration conf) {
     // only compact with 3 files
-    conf.setInt("hbase.hstore.compaction.min", 3);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
   }
 
   @After
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCloneSnapshotFromClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCloneSnapshotFromClient.java
index f0ff764..11ce59f 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCloneSnapshotFromClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCloneSnapshotFromClient.java
@@ -63,7 +63,7 @@ public class TestCloneSnapshotFromClient {
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED, true);
     TEST_UTIL.getConfiguration().setBoolean("hbase.online.schema.update.enable", true);
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold", 10);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     TEST_UTIL.getConfiguration().setInt("hbase.regionserver.msginterval", 100);
     TEST_UTIL.getConfiguration().setInt("hbase.client.pause", 250);
     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 6);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java
index 1e7fbc7..1211fcd 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java
@@ -32,11 +32,7 @@ import java.util.Random;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.HBaseTestingUtility;
-import org.apache.hadoop.hbase.HColumnDescriptor;
-import org.apache.hadoop.hbase.HRegionLocation;
-import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.*;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.generated.AdminProtos;
 import org.apache.hadoop.hbase.testclassification.ClientTests;
@@ -152,7 +148,8 @@ public class TestFromClientSide3 {
      * and modify table. The CF schema should override the Table schema and now
      * cause a minor compaction.
      */
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compaction.min", 3);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN,
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
 
     String tableName = "testAdvancedConfigOverride";
     TableName TABLE = TableName.valueOf(tableName);
@@ -194,9 +191,9 @@ public class TestFromClientSide3 {
       server, regionName, FAMILY).size() <= 1);
 
     // change the compaction.min config option for this table to 5
-    LOG.info("hbase.hstore.compaction.min should now be 5");
+    LOG.info(HConstants.HSTORE_COMPACTION_MIN + " should now be 5");
     HTableDescriptor htd = new HTableDescriptor(hTable.getTableDescriptor());
-    htd.setValue("hbase.hstore.compaction.min", String.valueOf(5));
+    htd.setValue(HConstants.HSTORE_COMPACTION_MIN, String.valueOf(5));
     admin.modifyTable(TABLE, htd);
     Pair<Integer, Integer> st;
     while (null != (st = admin.getAlterStatus(TABLE)) && st.getFirst() > 0) {
@@ -221,9 +218,9 @@ public class TestFromClientSide3 {
     assertTrue(sfCount > 1);
 
     // change an individual CF's config option to 2 & online schema update
-    LOG.info("hbase.hstore.compaction.min should now be 2");
+    LOG.info(HConstants.HSTORE_COMPACTION_MIN + " should now be 2");
     HColumnDescriptor hcd = new HColumnDescriptor(htd.getFamily(FAMILY));
-    hcd.setValue("hbase.hstore.compaction.min", String.valueOf(2));
+    hcd.setValue(HConstants.HSTORE_COMPACTION_MIN, String.valueOf(2));
     htd.modifyFamily(hcd);
     admin.modifyTable(TABLE, htd);
     while (null != (st = admin.getAlterStatus(TABLE)) && st.getFirst() > 0) {
@@ -256,9 +253,9 @@ public class TestFromClientSide3 {
 
     // Finally, ensure that we can remove a custom config value after we made it
     LOG.info("Removing CF config value");
-    LOG.info("hbase.hstore.compaction.min should now be 5");
+    LOG.info(HConstants.HSTORE_COMPACTION_MIN + " should now be 5");
     hcd = new HColumnDescriptor(htd.getFamily(FAMILY));
-    hcd.setValue("hbase.hstore.compaction.min", null);
+    hcd.setValue(HConstants.HSTORE_COMPACTION_MIN, null);
     htd.modifyFamily(hcd);
     admin.modifyTable(TABLE, htd);
     while (null != (st = admin.getAlterStatus(TABLE)) && st.getFirst() > 0) {
@@ -267,7 +264,7 @@ public class TestFromClientSide3 {
     }
     LOG.info("alter status finished");
     assertNull(hTable.getTableDescriptor().getFamily(FAMILY).getValue(
-        "hbase.hstore.compaction.min"));
+            HConstants.HSTORE_COMPACTION_MIN));
   }
 
   @Test
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestRestoreSnapshotFromClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestRestoreSnapshotFromClient.java
index 821d5c2..334747d 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestRestoreSnapshotFromClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestRestoreSnapshotFromClient.java
@@ -73,7 +73,7 @@ public class TestRestoreSnapshotFromClient {
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED, true);
     TEST_UTIL.getConfiguration().setBoolean("hbase.online.schema.update.enable", true);
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold", 10);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     TEST_UTIL.getConfiguration().setInt("hbase.regionserver.msginterval", 100);
     TEST_UTIL.getConfiguration().setInt("hbase.client.pause", 250);
     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 6);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotCloneIndependence.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotCloneIndependence.java
index 095b3c6..a0547ad 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotCloneIndependence.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotCloneIndependence.java
@@ -79,8 +79,7 @@ public class TestSnapshotCloneIndependence {
     conf.setInt("hbase.hregion.memstore.flush.size", 25000);
     // so make sure we get a compaction when doing a load, but keep around
     // some files in the store
-    conf.setInt("hbase.hstore.compaction.min", 10);
-    conf.setInt("hbase.hstore.compactionThreshold", 10);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     // block writes if we get to 12 store files
     conf.setInt("hbase.hstore.blockingStoreFiles", 12);
     conf.setInt("hbase.regionserver.msginterval", 100);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java
index 079a588..eff4e41 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java
@@ -83,8 +83,7 @@ public class TestSnapshotFromClient {
     conf.setInt("hbase.hregion.memstore.flush.size", 25000);
     // so make sure we get a compaction when doing a load, but keep around some
     // files in the store
-    conf.setInt("hbase.hstore.compaction.min", 10);
-    conf.setInt("hbase.hstore.compactionThreshold", 10);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     // block writes if we get to 12 store files
     conf.setInt("hbase.hstore.blockingStoreFiles", 12);
     // Enable snapshot
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java
index 1a774e5..50ef63d 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java
@@ -120,8 +120,7 @@ public class TestSnapshotMetadata {
     conf.setInt("hbase.hregion.memstore.flush.size", 25000);
     // so make sure we get a compaction when doing a load, but keep around
     // some files in the store
-    conf.setInt("hbase.hstore.compaction.min", 10);
-    conf.setInt("hbase.hstore.compactionThreshold", 10);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     // block writes if we get to 12 store files
     conf.setInt("hbase.hstore.blockingStoreFiles", 12);
     conf.setInt("hbase.regionserver.msginterval", 100);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
index 4f5b84d..c2ef8c2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
@@ -470,7 +470,7 @@ public class TestCoprocessorInterface {
 
   Configuration initSplit() {
     // Always compact if there is more than one store file.
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold", 2);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
     // Make lease timeout longer, lease checks less frequent
     TEST_UTIL.getConfiguration().setInt(
         "hbase.master.lease.thread.wakefrequency", 5 * 1000);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
index 00808bd..9911b6c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
@@ -251,7 +251,7 @@ public class TestRegionObserverScannerOpenHook {
     // setup a mini cluster so we can do a real compaction on a region
     Configuration conf = UTIL.getConfiguration();
     conf.setClass(HConstants.REGION_IMPL, CompactionCompletionNotifyingRegion.class, HRegion.class);
-    conf.setInt("hbase.hstore.compaction.min", 2);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
     UTIL.startMiniCluster();
     String tableName = "testRegionObserverCompactionTimeStacking";
     byte[] ROW = Bytes.toBytes("testRow");
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestScannerSelectionUsingKeyRange.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestScannerSelectionUsingKeyRange.java
index 7584cf2..baacbc2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestScannerSelectionUsingKeyRange.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestScannerSelectionUsingKeyRange.java
@@ -33,6 +33,7 @@ import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.regionserver.BloomType;
@@ -93,7 +94,7 @@ public class TestScannerSelectionUsingKeyRange {
   @Test
   public void testScannerSelection() throws IOException {
     Configuration conf = TEST_UTIL.getConfiguration();
-    conf.setInt("hbase.hstore.compactionThreshold", 10000);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10000);
     HColumnDescriptor hcd = new HColumnDescriptor(FAMILY_BYTES).setBlockCacheEnabled(true)
         .setBloomFilterType(bloomType);
     HTableDescriptor htd = new HTableDescriptor(TABLE);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java
index b3c29b7..e149d27 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java
@@ -903,7 +903,7 @@ public class TestHFileOutputFormat  {
   @Ignore ("Flakey: See HBASE-9051") @Test
   public void testExcludeAllFromMinorCompaction() throws Exception {
     Configuration conf = util.getConfiguration();
-    conf.setInt("hbase.hstore.compaction.min", 2);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
     generateRandomStartKeys(5);
 
     try {
@@ -970,7 +970,7 @@ public class TestHFileOutputFormat  {
   @Test
   public void testExcludeMinorCompaction() throws Exception {
     Configuration conf = util.getConfiguration();
-    conf.setInt("hbase.hstore.compaction.min", 2);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
     generateRandomStartKeys(5);
 
     try {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
index 3b066f2..476eed8 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
@@ -906,7 +906,7 @@ public class TestHFileOutputFormat2  {
   @Ignore ("Flakey: See HBASE-9051") @Test
   public void testExcludeAllFromMinorCompaction() throws Exception {
     Configuration conf = util.getConfiguration();
-    conf.setInt("hbase.hstore.compaction.min", 2);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
     generateRandomStartKeys(5);
 
     util.startMiniCluster();
@@ -976,7 +976,7 @@ public class TestHFileOutputFormat2  {
   @Test
   public void testExcludeMinorCompaction() throws Exception {
     Configuration conf = util.getConfiguration();
-    conf.setInt("hbase.hstore.compaction.min", 2);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
     generateRandomStartKeys(5);
 
     util.startMiniCluster();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java
index bc437fc..8b12380 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java
@@ -1298,7 +1298,7 @@ public class TestDistributedLogSplitting {
     conf.setLong("hbase.regionserver.hlog.blocksize", 15 * 1024);
     conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY, true);
     conf.setInt(HConstants.HREGION_MEMSTORE_FLUSH_SIZE, 30 * 1024);
-    conf.setInt("hbase.hstore.compactionThreshold", 3);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
     startCluster(NUM_RS);
     final AtomicLong sequenceId = new AtomicLong(100);
     final int NUM_REGIONS_TO_CREATE = 40;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java
index a2f08ab..1586094 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java
@@ -112,8 +112,8 @@ public class TestSnapshotFromMaster {
     conf.setInt("hbase.hregion.memstore.flush.size", 25000);
     // so make sure we get a compaction when doing a load, but keep around some
     // files in the store
-    conf.setInt("hbase.hstore.compaction.min", 3);
-    conf.setInt("hbase.hstore.compactionThreshold", 5);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN,
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
     // block writes if we get to 12 store files
     conf.setInt("hbase.hstore.blockingStoreFiles", 12);
     // Ensure no extra cleaners on by default (e.g. TimeToLiveHFileCleaner)
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java
index 975787c..37ac794 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java
@@ -61,7 +61,7 @@ public class TestQuotaAdmin {
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().setBoolean(QuotaUtil.QUOTA_CONF_KEY, true);
     TEST_UTIL.getConfiguration().setInt(QuotaCache.REFRESH_CONF_KEY, 2000);
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold", 10);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     TEST_UTIL.getConfiguration().setInt("hbase.regionserver.msginterval", 100);
     TEST_UTIL.getConfiguration().setInt("hbase.client.pause", 250);
     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 6);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaTableUtil.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaTableUtil.java
index 4288319..1b13cff 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaTableUtil.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaTableUtil.java
@@ -56,7 +56,7 @@ public class TestQuotaTableUtil {
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().setBoolean(QuotaUtil.QUOTA_CONF_KEY, true);
     TEST_UTIL.getConfiguration().setInt(QuotaCache.REFRESH_CONF_KEY, 2000);
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold", 10);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     TEST_UTIL.getConfiguration().setInt("hbase.regionserver.msginterval", 100);
     TEST_UTIL.getConfiguration().setInt("hbase.client.pause", 250);
     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 6);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaThrottle.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaThrottle.java
index d19906b..9eded17 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaThrottle.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaThrottle.java
@@ -72,7 +72,7 @@ public class TestQuotaThrottle {
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().setBoolean(QuotaUtil.QUOTA_CONF_KEY, true);
     TEST_UTIL.getConfiguration().setInt(QuotaCache.REFRESH_CONF_KEY, REFRESH_TIME);
-    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold", 10);
+    TEST_UTIL.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     TEST_UTIL.getConfiguration().setInt("hbase.regionserver.msginterval", 100);
     TEST_UTIL.getConfiguration().setInt("hbase.client.pause", 250);
     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 6);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java
index c4b26b9..ebd5ca1 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java
@@ -35,9 +35,10 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.HConstants;
+import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.testclassification.RegionServerTests;
-import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Delete;
 import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.Get;
@@ -65,7 +66,7 @@ public class TestBlocksRead extends HBaseTestCase {
     HBaseConfiguration conf = new HBaseConfiguration();
 
     // disable compactions in this test.
-    conf.setInt("hbase.hstore.compactionThreshold", 10000);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10000);
     return conf;
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
index fcc9fc3..75865bc 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
@@ -107,7 +107,8 @@ public class TestCompaction {
     conf.setInt("hbase.hregion.memstore.block.multiplier", 100);
     conf.set(CompactionThroughputControllerFactory.HBASE_THROUGHPUT_CONTROLLER_KEY,
       NoLimitCompactionThroughputController.class.getName());
-    compactionThreshold = conf.getInt("hbase.hstore.compactionThreshold", 3);
+    compactionThreshold = conf.getInt(HConstants.HSTORE_COMPACTION_MIN,
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
 
     secondRowBytes = START_KEY_BYTES.clone();
     // Increment the least significant character so we get to next row.
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCorruptedRegionStoreFile.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCorruptedRegionStoreFile.java
index 8c9312c..d7b4fc1 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCorruptedRegionStoreFile.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCorruptedRegionStoreFile.java
@@ -27,6 +27,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
+import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Result;
@@ -74,7 +75,7 @@ public class TestCorruptedRegionStoreFile {
   private int rowCount;
 
   private static void setupConf(Configuration conf) {
-    conf.setLong("hbase.hstore.compaction.min", 20);
+    conf.setLong(HConstants.HSTORE_COMPACTION_MIN, 20);
     conf.setLong("hbase.hstore.compaction.max", 39);
     conf.setLong("hbase.hstore.blockingStoreFiles", 40);
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java
index 4969a59..b354efa 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java
@@ -73,7 +73,7 @@ public class TestDefaultCompactSelection extends TestCase {
     // setup config values necessary for store
     this.conf = TEST_UTIL.getConfiguration();
     this.conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD, 0);
-    this.conf.setInt("hbase.hstore.compaction.min", minFiles);
+    this.conf.setInt(HConstants.HSTORE_COMPACTION_MIN, minFiles);
     this.conf.setInt("hbase.hstore.compaction.max", maxFiles);
     this.conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE, minSize);
     this.conf.setLong("hbase.hstore.compaction.max.size", maxSize);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
index 8ee2212..6437985 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
@@ -3888,7 +3888,7 @@ public class TestHRegion {
     // reducing
     // the number of HFiles created.
     Configuration conf = HBaseConfiguration.create(CONF);
-    conf.setInt("hbase.hstore.compaction.min", 1);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 1);
     conf.setInt("hbase.hstore.compaction.max", 1000);
     this.region = initHRegion(tableName, method, conf, families);
     PutThread putThread = null;
@@ -4979,7 +4979,7 @@ public class TestHRegion {
 
   private Configuration initSplit() {
     // Always compact if there is more than one store file.
-    CONF.setInt("hbase.hstore.compactionThreshold", 2);
+    CONF.setInt(HConstants.HSTORE_COMPACTION_MIN, 2);
 
     // Make lease timeout longer, lease checks less frequent
     CONF.setInt("hbase.master.lease.thread.wakefrequency", 5 * 1000);
@@ -5427,7 +5427,7 @@ public class TestHRegion {
     String method = this.getName();
     HBaseConfiguration conf = new HBaseConfiguration();
     // disable compactions in this test.
-    conf.setInt("hbase.hstore.compactionThreshold", 10000);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10000);
     this.region = initHRegion(tableName, method, conf, families);
     try {
       // kv naming style: kv(row number) totalKvCountInThisRow seq no
@@ -5587,7 +5587,7 @@ public class TestHRegion {
     String method = this.getName();
     HBaseConfiguration conf = new HBaseConfiguration();
     // disable compactions in this test.
-    conf.setInt("hbase.hstore.compactionThreshold", 10000);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10000);
     this.region = initHRegion(tableName, method, conf, families);
     try {
       KeyValue kv1 = new KeyValue(row1, cf1, col, ts, KeyValue.Type.Put, null);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMajorCompaction.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMajorCompaction.java
index a466c4d..97c6b72 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMajorCompaction.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMajorCompaction.java
@@ -93,7 +93,8 @@ public class TestMajorCompaction {
     // Set cache flush size to 1MB
     conf.setInt(HConstants.HREGION_MEMSTORE_FLUSH_SIZE, 1024*1024);
     conf.setInt("hbase.hregion.memstore.block.multiplier", 100);
-    compactionThreshold = conf.getInt("hbase.hstore.compactionThreshold", 3);
+    compactionThreshold = conf.getInt(HConstants.HSTORE_COMPACTION_MIN,
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
 
     secondRowBytes = START_KEY_BYTES.clone();
     // Increment the least significant character so we get to next row.
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMinorCompaction.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMinorCompaction.java
index 2504d9c..f744e70 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMinorCompaction.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMinorCompaction.java
@@ -70,7 +70,8 @@ public class TestMinorCompaction {
     // Set cache flush size to 1MB
     conf.setInt(HConstants.HREGION_MEMSTORE_FLUSH_SIZE, 1024*1024);
     conf.setInt("hbase.hregion.memstore.block.multiplier", 100);
-    compactionThreshold = conf.getInt("hbase.hstore.compactionThreshold", 3);
+    compactionThreshold = conf.getInt(HConstants.HSTORE_COMPACTION_MIN,
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
 
     firstRowBytes = START_KEY_BYTES;
     secondRowBytes = START_KEY_BYTES.clone();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionReplicas.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionReplicas.java
index 85a8cd2..4fc37a4 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionReplicas.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionReplicas.java
@@ -227,7 +227,7 @@ public class TestRegionReplicas {
   public void testRefreshStoreFiles() throws Exception {
     // enable store file refreshing
     final int refreshPeriod = 2000; // 2 sec
-    HTU.getConfiguration().setInt("hbase.hstore.compactionThreshold", 100);
+    HTU.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN, 100);
     HTU.getConfiguration().setInt(StorefileRefresherChore.REGIONSERVER_STOREFILE_REFRESH_PERIOD,
       refreshPeriod);
     // restart the region server so that it starts the refresher chore
@@ -304,7 +304,8 @@ public class TestRegionReplicas {
     long runtime = 30 * 1000;
     // enable store file refreshing
     final int refreshPeriod = 100; // 100ms refresh is a lot
-    HTU.getConfiguration().setInt("hbase.hstore.compactionThreshold", 3);
+    HTU.getConfiguration().setInt(HConstants.HSTORE_COMPACTION_MIN,
+            HConstants.DEFAULT_HSTORE_COMPACTION_MIN);
     HTU.getConfiguration().setInt(StorefileRefresherChore.REGIONSERVER_STOREFILE_REFRESH_PERIOD, refreshPeriod);
     // restart the region server so that it starts the refresher chore
     restartRegionServer();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java
index afeaa1d..932df37 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java
@@ -28,6 +28,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
+import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Result;
@@ -86,7 +87,7 @@ public class TestScannerRetriableFailure {
   }
 
   private static void setupConf(Configuration conf) {
-    conf.setLong("hbase.hstore.compaction.min", 20);
+    conf.setLong(HConstants.HSTORE_COMPACTION_MIN, 20);
     conf.setLong("hbase.hstore.compaction.max", 39);
     conf.setLong("hbase.hstore.blockingStoreFiles", 40);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java
index a1a58bc..42339ea 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java
@@ -59,9 +59,10 @@ import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.KeyValue;
 import org.apache.hadoop.hbase.KeyValueUtil;
+import org.apache.hadoop.hbase.HConstants;
+import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.testclassification.RegionServerTests;
-import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Get;
 import org.apache.hadoop.hbase.io.compress.Compression;
 import org.apache.hadoop.hbase.io.encoding.DataBlockEncoding;
@@ -302,7 +303,7 @@ public class TestStore {
     // Enable the expired store file deletion
     conf.setBoolean("hbase.store.delete.expired.storefile", true);
     // Set the compaction threshold higher to avoid normal compactions.
-    conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY, 5);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 5);
 
     HColumnDescriptor hcd = new HColumnDescriptor(family);
     hcd.setMinVersions(minVersions);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/PerfTestCompactionPolicies.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/PerfTestCompactionPolicies.java
index 3fcd3fe..6eff005 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/PerfTestCompactionPolicies.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/PerfTestCompactionPolicies.java
@@ -22,6 +22,7 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.testclassification.RegionServerTests;
 import org.apache.hadoop.hbase.regionserver.HStore;
@@ -136,7 +137,7 @@ public class PerfTestCompactionPolicies extends MockStoreFileGenerator {
 
     // Make sure that this doesn't include every file.
     configuration.setInt("hbase.hstore.compaction.max", max);
-    configuration.setInt("hbase.hstore.compaction.min", min);
+    configuration.setInt(HConstants.HSTORE_COMPACTION_MIN, min);
     configuration.setFloat("hbase.hstore.compaction.ratio", ratio);
 
     store = createMockStore();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestCompactionWithThroughputController.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestCompactionWithThroughputController.java
index b2f2898..88e8d51 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestCompactionWithThroughputController.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestCompactionWithThroughputController.java
@@ -32,6 +32,7 @@ import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.MiniHBaseCluster;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.HBaseAdmin;
@@ -39,7 +40,6 @@ import org.apache.hadoop.hbase.client.HTable;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.regionserver.DefaultStoreEngine;
-import org.apache.hadoop.hbase.regionserver.HRegion;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.regionserver.HStore;
 import org.apache.hadoop.hbase.regionserver.Region;
@@ -104,7 +104,7 @@ public class TestCompactionWithThroughputController {
     long throughputLimit = 1024L * 1024;
     Configuration conf = TEST_UTIL.getConfiguration();
     conf.set(StoreEngine.STORE_ENGINE_CLASS_KEY, DefaultStoreEngine.class.getName());
-    conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY, 100);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 100);
     conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MAX_KEY, 200);
     conf.setInt(HStore.BLOCKING_STOREFILES_KEY, 10000);
     conf.setLong(
@@ -141,7 +141,7 @@ public class TestCompactionWithThroughputController {
   private long testCompactionWithoutThroughputLimit() throws Exception {
     Configuration conf = TEST_UTIL.getConfiguration();
     conf.set(StoreEngine.STORE_ENGINE_CLASS_KEY, DefaultStoreEngine.class.getName());
-    conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY, 100);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 100);
     conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MAX_KEY, 200);
     conf.setInt(HStore.BLOCKING_STOREFILES_KEY, 10000);
     conf.set(CompactionThroughputControllerFactory.HBASE_THROUGHPUT_CONTROLLER_KEY,
@@ -187,7 +187,7 @@ public class TestCompactionWithThroughputController {
       PressureAwareCompactionThroughputController
         .HBASE_HSTORE_COMPACTION_MAX_THROUGHPUT_LOWER_BOUND,
       10L * 1024 * 1024);
-    conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY, 4);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 4);
     conf.setInt(HStore.BLOCKING_STOREFILES_KEY, 6);
     conf.set(CompactionThroughputControllerFactory.HBASE_THROUGHPUT_CONTROLLER_KEY,
       PressureAwareCompactionThroughputController.class.getName());
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestFlushSnapshotFromClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestFlushSnapshotFromClient.java
index b45d676..18f319c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestFlushSnapshotFromClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestFlushSnapshotFromClient.java
@@ -95,8 +95,7 @@ public class TestFlushSnapshotFromClient {
     conf.setInt("hbase.hregion.memstore.flush.size", 25000);
     // so make sure we get a compaction when doing a load, but keep around some
     // files in the store
-    conf.setInt("hbase.hstore.compaction.min", 10);
-    conf.setInt("hbase.hstore.compactionThreshold", 10);
+    conf.setInt(HConstants.HSTORE_COMPACTION_MIN, 10);
     // block writes if we get to 12 store files
     conf.setInt("hbase.hstore.blockingStoreFiles", 12);
     // Enable snapshot
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestMergeTool.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestMergeTool.java
index 8688c61..506f023 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestMergeTool.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestMergeTool.java
@@ -77,7 +77,7 @@ public class TestMergeTool extends HBaseTestCase {
     // Default zk port is 2181.
     this.conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, 10001);
 
-    this.conf.set("hbase.hstore.compactionThreshold", "2");
+    this.conf.set(HConstants.HSTORE_COMPACTION_MIN, "2");
 
     // Create table description
     this.desc = new HTableDescriptor(org.apache.hadoop.hbase.TableName.valueOf("TestMergeTool"));
diff --git a/src/main/asciidoc/_chapters/hbase-default.adoc b/src/main/asciidoc/_chapters/hbase-default.adoc
index 8df9b17..5b33f57 100644
--- a/src/main/asciidoc/_chapters/hbase-default.adoc
+++ b/src/main/asciidoc/_chapters/hbase-default.adoc
@@ -977,7 +977,8 @@ A multiplier applied to hbase.hregion.majorcompaction to cause compaction to occ
 *`hbase.hstore.compactionThreshold`*::
 +
 .Description
- If more than this number of StoreFiles exist in any one Store 
+ (deprecated see hbase.hstore.compaction.min) If more than this number of
+      StoreFiles exist in any one Store
       (one StoreFile is written per flush of MemStore), a compaction is run to rewrite all 
       StoreFiles into a single StoreFile. Larger values delay compaction, but when compaction does
       occur, it takes longer to complete.
-- 
2.1.4

