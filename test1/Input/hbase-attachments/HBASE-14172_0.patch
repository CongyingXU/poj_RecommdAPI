From 2977e369d0fe225d62450a8f2c4994ee94130dec Mon Sep 17 00:00:00 2001
From: Josh Elser <elserj@apache.org>
Date: Fri, 13 Nov 2015 21:01:54 -0500
Subject: [PATCH] HBASE-14172 Upgrade to libthrift-0.9.3.

Minor modifications required to account for
non-source compatibility between earlier versions
of Thrift.
---
 hbase-thrift/pom.xml                               |    4 +-
 .../hadoop/hbase/thrift/ThriftServerRunner.java    |    8 +-
 .../hbase/thrift/generated/AlreadyExists.java      |   24 +-
 .../hbase/thrift/generated/BatchMutation.java      |   64 +-
 .../hbase/thrift/generated/ColumnDescriptor.java   |  110 +-
 .../hadoop/hbase/thrift/generated/Hbase.java       | 7491 +++++++++++++-------
 .../hadoop/hbase/thrift/generated/IOError.java     |   24 +-
 .../hbase/thrift/generated/IllegalArgument.java    |   24 +-
 .../hadoop/hbase/thrift/generated/Mutation.java    |   72 +-
 .../hadoop/hbase/thrift/generated/TAppend.java     |  108 +-
 .../hadoop/hbase/thrift/generated/TCell.java       |   44 +-
 .../hadoop/hbase/thrift/generated/TColumn.java     |   42 +-
 .../hadoop/hbase/thrift/generated/TIncrement.java  |   80 +-
 .../hadoop/hbase/thrift/generated/TRegionInfo.java |  118 +-
 .../hadoop/hbase/thrift/generated/TRowResult.java  |  104 +-
 .../hadoop/hbase/thrift/generated/TScan.java       |  144 +-
 .../apache/hadoop/hbase/thrift2/ThriftServer.java  |    5 +-
 .../hadoop/hbase/thrift2/generated/TAppend.java    |  132 +-
 .../hbase/thrift2/generated/TAuthorization.java    |   47 +-
 .../hbase/thrift2/generated/TCellVisibility.java   |   26 +-
 .../hadoop/hbase/thrift2/generated/TColumn.java    |   60 +-
 .../hbase/thrift2/generated/TColumnIncrement.java  |   62 +-
 .../hbase/thrift2/generated/TColumnValue.java      |   94 +-
 .../hadoop/hbase/thrift2/generated/TDelete.java    |  146 +-
 .../hbase/thrift2/generated/TDeleteType.java       |    2 +-
 .../hbase/thrift2/generated/TDurability.java       |    2 +-
 .../hadoop/hbase/thrift2/generated/TGet.java       |  163 +-
 .../hbase/thrift2/generated/THBaseService.java     | 2508 +++++--
 .../hbase/thrift2/generated/THRegionInfo.java      |  105 +-
 .../hbase/thrift2/generated/THRegionLocation.java  |   32 +-
 .../hadoop/hbase/thrift2/generated/TIOError.java   |   26 +-
 .../hbase/thrift2/generated/TIllegalArgument.java  |   26 +-
 .../hadoop/hbase/thrift2/generated/TIncrement.java |  132 +-
 .../hadoop/hbase/thrift2/generated/TMutation.java  |   20 +-
 .../hadoop/hbase/thrift2/generated/TPut.java       |  142 +-
 .../hadoop/hbase/thrift2/generated/TResult.java    |   63 +-
 .../hbase/thrift2/generated/TRowMutations.java     |   63 +-
 .../hadoop/hbase/thrift2/generated/TScan.java      |  196 +-
 .../hbase/thrift2/generated/TServerName.java       |   46 +-
 .../hadoop/hbase/thrift2/generated/TTimeRange.java |   36 +-
 pom.xml                                            |    2 +-
 41 files changed, 8147 insertions(+), 4450 deletions(-)

diff --git a/hbase-thrift/pom.xml b/hbase-thrift/pom.xml
index f7ab7f1..ff999dc 100644
--- a/hbase-thrift/pom.xml
+++ b/hbase-thrift/pom.xml
@@ -415,12 +415,12 @@
                     <requireProperty>
                       <property>thrift.version</property>
                       <message>"The Thrift version must be specified."</message>
-                      <regex>0\.9\.2</regex>
+                      <regex>0\.9\.3</regex>
                       <regexMessage>
 -
 -
 [FATAL] ==========================================================================================
-[FATAL] HBase Thrift requires the thrift generator version 0.9.2.
+[FATAL] HBase Thrift requires the thrift generator version 0.9.3.
 [FATAL] Setting it to something else needs to be reviewed for wire and behavior compatibility.
 [FATAL] ==========================================================================================
 -
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java
index c5e44d5..4d46a31 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java
@@ -539,7 +539,7 @@ public class ThriftServerRunner implements Runnable {
         CallQueue callQueue =
             new CallQueue(new LinkedBlockingQueue<Call>(), metrics);
         ExecutorService executorService = createExecutor(
-            callQueue, serverArgs.getWorkerThreads());
+            callQueue, serverArgs.getMinWorkerThreads(), serverArgs.getMaxWorkerThreads());
         serverArgs.executorService(executorService)
                   .processor(processor)
                   .transportFactory(transportFactory)
@@ -551,7 +551,7 @@ public class ThriftServerRunner implements Runnable {
         CallQueue callQueue =
             new CallQueue(new LinkedBlockingQueue<Call>(), metrics);
         ExecutorService executorService = createExecutor(
-            callQueue, serverArgs.getWorkerThreads());
+            callQueue, serverArgs.getWorkerThreads(), serverArgs.getWorkerThreads());
         serverArgs.executorService(executorService)
                   .processor(processor)
                   .transportFactory(transportFactory)
@@ -597,11 +597,11 @@ public class ThriftServerRunner implements Runnable {
   }
 
   ExecutorService createExecutor(BlockingQueue<Runnable> callQueue,
-                                 int workerThreads) {
+                                 int minWorkers, int maxWorkers) {
     ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();
     tfb.setDaemon(true);
     tfb.setNameFormat("thrift-worker-%d");
-    return new ThreadPoolExecutor(workerThreads, workerThreads,
+    return new ThreadPoolExecutor(minWorkers, maxWorkers,
             Long.MAX_VALUE, TimeUnit.SECONDS, callQueue, tfb.build());
   }
 
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java
index 091a42b..9f11463 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,14 +29,17 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * An AlreadyExists exceptions signals that a table with the specified
  * name already exists
  */
-public class AlreadyExists extends TException implements org.apache.thrift.TBase<AlreadyExists, AlreadyExists._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class AlreadyExists extends TException implements org.apache.thrift.TBase<AlreadyExists, AlreadyExists._Fields>, java.io.Serializable, Cloneable, Comparable<AlreadyExists> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AlreadyExists");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -230,30 +234,30 @@ public class AlreadyExists extends TException implements org.apache.thrift.TBase
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_message = true && (isSetMessage());
-    builder.append(present_message);
+    list.add(present_message);
     if (present_message)
-      builder.append(message);
+      list.add(message);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(AlreadyExists other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    AlreadyExists typedOther = (AlreadyExists)other;
 
-    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
+    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMessage()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java
index fd038b3..d89944a 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A BatchMutation object is used to apply a number of Mutations to a single row.
  */
-public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, BatchMutation._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, BatchMutation._Fields>, java.io.Serializable, Cloneable, Comparable<BatchMutation> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchMutation");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -131,7 +135,7 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
     List<Mutation> mutations)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     this.mutations = mutations;
   }
 
@@ -143,7 +147,7 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
       this.row = other.row;
     }
     if (other.isSetMutations()) {
-      List<Mutation> __this__mutations = new ArrayList<Mutation>();
+      List<Mutation> __this__mutations = new ArrayList<Mutation>(other.mutations.size());
       for (Mutation other_element : other.mutations) {
         __this__mutations.add(new Mutation(other_element));
       }
@@ -167,16 +171,16 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public BatchMutation setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public BatchMutation setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -318,45 +322,45 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_mutations = true && (isSetMutations());
-    builder.append(present_mutations);
+    list.add(present_mutations);
     if (present_mutations)
-      builder.append(mutations);
+      list.add(mutations);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(BatchMutation other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    BatchMutation typedOther = (BatchMutation)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetMutations()).compareTo(typedOther.isSetMutations());
+    lastComparison = Boolean.valueOf(isSetMutations()).compareTo(other.isSetMutations());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMutations()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, typedOther.mutations);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, other.mutations);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -385,7 +389,7 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
     if (this.row == null) {
       sb.append("null");
     } else {
-      sb.append(this.row);
+      org.apache.thrift.TBaseHelper.toString(this.row, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -452,12 +456,12 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
               {
                 org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                 struct.mutations = new ArrayList<Mutation>(_list0.size);
-                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
+                Mutation _elem1;
+                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                 {
-                  Mutation _elem2; // required
-                  _elem2 = new Mutation();
-                  _elem2.read(iprot);
-                  struct.mutations.add(_elem2);
+                  _elem1 = new Mutation();
+                  _elem1.read(iprot);
+                  struct.mutations.add(_elem1);
                 }
                 iprot.readListEnd();
               }
@@ -549,12 +553,12 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
         {
           org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.mutations = new ArrayList<Mutation>(_list5.size);
-          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
+          Mutation _elem6;
+          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
           {
-            Mutation _elem7; // required
-            _elem7 = new Mutation();
-            _elem7.read(iprot);
-            struct.mutations.add(_elem7);
+            _elem6 = new Mutation();
+            _elem6.read(iprot);
+            struct.mutations.add(_elem6);
           }
         }
         struct.setMutationsIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java
index fe018be..eaedd61 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,15 +29,18 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * An HColumnDescriptor contains information about a column family
  * such as the number of versions, compression settings, etc. It is
  * used as input when creating a table or adding a column.
  */
-public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescriptor, ColumnDescriptor._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescriptor, ColumnDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnDescriptor> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnDescriptor");
 
   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -211,7 +215,7 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
     int timeToLive)
   {
     this();
-    this.name = name;
+    this.name = org.apache.thrift.TBaseHelper.copyBinary(name);
     this.maxVersions = maxVersions;
     setMaxVersionsIsSet(true);
     this.compression = compression;
@@ -281,16 +285,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public ByteBuffer bufferForName() {
-    return name;
+    return org.apache.thrift.TBaseHelper.copyBinary(name);
   }
 
   public ColumnDescriptor setName(byte[] name) {
-    setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
+    this.name = name == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(name, name.length));
     return this;
   }
 
   public ColumnDescriptor setName(ByteBuffer name) {
-    this.name = name;
+    this.name = org.apache.thrift.TBaseHelper.copyBinary(name);
     return this;
   }
 
@@ -578,28 +582,28 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
       return getName();
 
     case MAX_VERSIONS:
-      return Integer.valueOf(getMaxVersions());
+      return getMaxVersions();
 
     case COMPRESSION:
       return getCompression();
 
     case IN_MEMORY:
-      return Boolean.valueOf(isInMemory());
+      return isInMemory();
 
     case BLOOM_FILTER_TYPE:
       return getBloomFilterType();
 
     case BLOOM_FILTER_VECTOR_SIZE:
-      return Integer.valueOf(getBloomFilterVectorSize());
+      return getBloomFilterVectorSize();
 
     case BLOOM_FILTER_NB_HASHES:
-      return Integer.valueOf(getBloomFilterNbHashes());
+      return getBloomFilterNbHashes();
 
     case BLOCK_CACHE_ENABLED:
-      return Boolean.valueOf(isBlockCacheEnabled());
+      return isBlockCacheEnabled();
 
     case TIME_TO_LIVE:
-      return Integer.valueOf(getTimeToLive());
+      return getTimeToLive();
 
     }
     throw new IllegalStateException();
@@ -733,150 +737,150 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_name = true && (isSetName());
-    builder.append(present_name);
+    list.add(present_name);
     if (present_name)
-      builder.append(name);
+      list.add(name);
 
     boolean present_maxVersions = true;
-    builder.append(present_maxVersions);
+    list.add(present_maxVersions);
     if (present_maxVersions)
-      builder.append(maxVersions);
+      list.add(maxVersions);
 
     boolean present_compression = true && (isSetCompression());
-    builder.append(present_compression);
+    list.add(present_compression);
     if (present_compression)
-      builder.append(compression);
+      list.add(compression);
 
     boolean present_inMemory = true;
-    builder.append(present_inMemory);
+    list.add(present_inMemory);
     if (present_inMemory)
-      builder.append(inMemory);
+      list.add(inMemory);
 
     boolean present_bloomFilterType = true && (isSetBloomFilterType());
-    builder.append(present_bloomFilterType);
+    list.add(present_bloomFilterType);
     if (present_bloomFilterType)
-      builder.append(bloomFilterType);
+      list.add(bloomFilterType);
 
     boolean present_bloomFilterVectorSize = true;
-    builder.append(present_bloomFilterVectorSize);
+    list.add(present_bloomFilterVectorSize);
     if (present_bloomFilterVectorSize)
-      builder.append(bloomFilterVectorSize);
+      list.add(bloomFilterVectorSize);
 
     boolean present_bloomFilterNbHashes = true;
-    builder.append(present_bloomFilterNbHashes);
+    list.add(present_bloomFilterNbHashes);
     if (present_bloomFilterNbHashes)
-      builder.append(bloomFilterNbHashes);
+      list.add(bloomFilterNbHashes);
 
     boolean present_blockCacheEnabled = true;
-    builder.append(present_blockCacheEnabled);
+    list.add(present_blockCacheEnabled);
     if (present_blockCacheEnabled)
-      builder.append(blockCacheEnabled);
+      list.add(blockCacheEnabled);
 
     boolean present_timeToLive = true;
-    builder.append(present_timeToLive);
+    list.add(present_timeToLive);
     if (present_timeToLive)
-      builder.append(timeToLive);
+      list.add(timeToLive);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(ColumnDescriptor other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    ColumnDescriptor typedOther = (ColumnDescriptor)other;
 
-    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
+    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetMaxVersions()).compareTo(typedOther.isSetMaxVersions());
+    lastComparison = Boolean.valueOf(isSetMaxVersions()).compareTo(other.isSetMaxVersions());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMaxVersions()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxVersions, typedOther.maxVersions);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxVersions, other.maxVersions);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(typedOther.isSetCompression());
+    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCompression()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, typedOther.compression);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, other.compression);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetInMemory()).compareTo(typedOther.isSetInMemory());
+    lastComparison = Boolean.valueOf(isSetInMemory()).compareTo(other.isSetInMemory());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetInMemory()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inMemory, typedOther.inMemory);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inMemory, other.inMemory);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBloomFilterType()).compareTo(typedOther.isSetBloomFilterType());
+    lastComparison = Boolean.valueOf(isSetBloomFilterType()).compareTo(other.isSetBloomFilterType());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetBloomFilterType()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterType, typedOther.bloomFilterType);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterType, other.bloomFilterType);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBloomFilterVectorSize()).compareTo(typedOther.isSetBloomFilterVectorSize());
+    lastComparison = Boolean.valueOf(isSetBloomFilterVectorSize()).compareTo(other.isSetBloomFilterVectorSize());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetBloomFilterVectorSize()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterVectorSize, typedOther.bloomFilterVectorSize);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterVectorSize, other.bloomFilterVectorSize);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBloomFilterNbHashes()).compareTo(typedOther.isSetBloomFilterNbHashes());
+    lastComparison = Boolean.valueOf(isSetBloomFilterNbHashes()).compareTo(other.isSetBloomFilterNbHashes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetBloomFilterNbHashes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterNbHashes, typedOther.bloomFilterNbHashes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterNbHashes, other.bloomFilterNbHashes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBlockCacheEnabled()).compareTo(typedOther.isSetBlockCacheEnabled());
+    lastComparison = Boolean.valueOf(isSetBlockCacheEnabled()).compareTo(other.isSetBlockCacheEnabled());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetBlockCacheEnabled()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockCacheEnabled, typedOther.blockCacheEnabled);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockCacheEnabled, other.blockCacheEnabled);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimeToLive()).compareTo(typedOther.isSetTimeToLive());
+    lastComparison = Boolean.valueOf(isSetTimeToLive()).compareTo(other.isSetTimeToLive());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimeToLive()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeToLive, typedOther.timeToLive);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeToLive, other.timeToLive);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -905,7 +909,7 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
     if (this.name == null) {
       sb.append("null");
     } else {
-      sb.append(this.name);
+      org.apache.thrift.TBaseHelper.toString(this.name, sb);
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java
index 857f5f7..dfb49cc 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,12 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
 public class Hbase {
 
   public interface Iface {
@@ -642,93 +646,93 @@ public class Hbase {
 
   public interface AsyncIface {
 
-    public void enableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.enableTable_call> resultHandler) throws org.apache.thrift.TException;
+    public void enableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void disableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.disableTable_call> resultHandler) throws org.apache.thrift.TException;
+    public void disableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void isTableEnabled(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isTableEnabled_call> resultHandler) throws org.apache.thrift.TException;
+    public void isTableEnabled(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void compact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.compact_call> resultHandler) throws org.apache.thrift.TException;
+    public void compact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void majorCompact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.majorCompact_call> resultHandler) throws org.apache.thrift.TException;
+    public void majorCompact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getTableNames(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTableNames_call> resultHandler) throws org.apache.thrift.TException;
+    public void getTableNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getColumnDescriptors(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getColumnDescriptors_call> resultHandler) throws org.apache.thrift.TException;
+    public void getColumnDescriptors(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getTableRegions(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTableRegions_call> resultHandler) throws org.apache.thrift.TException;
+    public void getTableRegions(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void createTable(ByteBuffer tableName, List<ColumnDescriptor> columnFamilies, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createTable_call> resultHandler) throws org.apache.thrift.TException;
+    public void createTable(ByteBuffer tableName, List<ColumnDescriptor> columnFamilies, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteTable_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void get(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws org.apache.thrift.TException;
+    public void get(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getVer(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getVer_call> resultHandler) throws org.apache.thrift.TException;
+    public void getVer(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getVerTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getVerTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void getVerTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRow_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRowWithColumns(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowWithColumns_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRowWithColumns(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRowWithColumnsTs(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowWithColumnsTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRowWithColumnsTs(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRows(ByteBuffer tableName, List<ByteBuffer> rows, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRows_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRows(ByteBuffer tableName, List<ByteBuffer> rows, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRowsWithColumns(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowsWithColumns_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRowsWithColumns(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRowsTs(ByteBuffer tableName, List<ByteBuffer> rows, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowsTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRowsTs(ByteBuffer tableName, List<ByteBuffer> rows, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRowsWithColumnsTs(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowsWithColumnsTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRowsWithColumnsTs(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void mutateRow(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutateRow_call> resultHandler) throws org.apache.thrift.TException;
+    public void mutateRow(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void mutateRowTs(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutateRowTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void mutateRowTs(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void mutateRows(ByteBuffer tableName, List<BatchMutation> rowBatches, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutateRows_call> resultHandler) throws org.apache.thrift.TException;
+    public void mutateRows(ByteBuffer tableName, List<BatchMutation> rowBatches, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void mutateRowsTs(ByteBuffer tableName, List<BatchMutation> rowBatches, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutateRowsTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void mutateRowsTs(ByteBuffer tableName, List<BatchMutation> rowBatches, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void atomicIncrement(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.atomicIncrement_call> resultHandler) throws org.apache.thrift.TException;
+    public void atomicIncrement(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteAll(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAll_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteAll(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteAllTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAllTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteAllTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteAllRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAllRow_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteAllRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void increment(TIncrement increment, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.increment_call> resultHandler) throws org.apache.thrift.TException;
+    public void increment(TIncrement increment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void incrementRows(List<TIncrement> increments, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.incrementRows_call> resultHandler) throws org.apache.thrift.TException;
+    public void incrementRows(List<TIncrement> increments, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteAllRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAllRowTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteAllRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerOpenWithScan(ByteBuffer tableName, TScan scan, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerOpenWithScan_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerOpenWithScan(ByteBuffer tableName, TScan scan, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerOpen(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerOpen_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerOpen(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerOpenWithStop(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerOpenWithStop_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerOpenWithStop(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerOpenWithPrefix(ByteBuffer tableName, ByteBuffer startAndPrefix, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerOpenWithPrefix_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerOpenWithPrefix(ByteBuffer tableName, ByteBuffer startAndPrefix, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerOpenTs(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerOpenTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerOpenTs(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerOpenWithStopTs(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerOpenWithStopTs_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerOpenWithStopTs(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerGet(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerGet_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerGet(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerGetList(int id, int nbRows, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerGetList_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerGetList(int id, int nbRows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void scannerClose(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scannerClose_call> resultHandler) throws org.apache.thrift.TException;
+    public void scannerClose(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRegionInfo(ByteBuffer row, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRegionInfo_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRegionInfo(ByteBuffer row, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void append(TAppend append, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.append_call> resultHandler) throws org.apache.thrift.TException;
+    public void append(TAppend append, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void checkAndPut(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, ByteBuffer value, Mutation mput, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkAndPut_call> resultHandler) throws org.apache.thrift.TException;
+    public void checkAndPut(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, ByteBuffer value, Mutation mput, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
   }
 
@@ -1986,7 +1990,7 @@ public class Hbase {
       super(protocolFactory, clientManager, transport);
     }
 
-    public void enableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<enableTable_call> resultHandler) throws org.apache.thrift.TException {
+    public void enableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       enableTable_call method_call = new enableTable_call(tableName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1995,7 +1999,7 @@ public class Hbase {
 
     public static class enableTable_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
-      public enableTable_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<enableTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public enableTable_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
       }
@@ -2018,7 +2022,7 @@ public class Hbase {
       }
     }
 
-    public void disableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<disableTable_call> resultHandler) throws org.apache.thrift.TException {
+    public void disableTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       disableTable_call method_call = new disableTable_call(tableName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2027,7 +2031,7 @@ public class Hbase {
 
     public static class disableTable_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
-      public disableTable_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<disableTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public disableTable_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
       }
@@ -2050,7 +2054,7 @@ public class Hbase {
       }
     }
 
-    public void isTableEnabled(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<isTableEnabled_call> resultHandler) throws org.apache.thrift.TException {
+    public void isTableEnabled(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       isTableEnabled_call method_call = new isTableEnabled_call(tableName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2059,7 +2063,7 @@ public class Hbase {
 
     public static class isTableEnabled_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
-      public isTableEnabled_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<isTableEnabled_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public isTableEnabled_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
       }
@@ -2082,7 +2086,7 @@ public class Hbase {
       }
     }
 
-    public void compact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback<compact_call> resultHandler) throws org.apache.thrift.TException {
+    public void compact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       compact_call method_call = new compact_call(tableNameOrRegionName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2091,7 +2095,7 @@ public class Hbase {
 
     public static class compact_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableNameOrRegionName;
-      public compact_call(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback<compact_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public compact_call(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableNameOrRegionName = tableNameOrRegionName;
       }
@@ -2114,7 +2118,7 @@ public class Hbase {
       }
     }
 
-    public void majorCompact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback<majorCompact_call> resultHandler) throws org.apache.thrift.TException {
+    public void majorCompact(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       majorCompact_call method_call = new majorCompact_call(tableNameOrRegionName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2123,7 +2127,7 @@ public class Hbase {
 
     public static class majorCompact_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableNameOrRegionName;
-      public majorCompact_call(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback<majorCompact_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public majorCompact_call(ByteBuffer tableNameOrRegionName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableNameOrRegionName = tableNameOrRegionName;
       }
@@ -2146,7 +2150,7 @@ public class Hbase {
       }
     }
 
-    public void getTableNames(org.apache.thrift.async.AsyncMethodCallback<getTableNames_call> resultHandler) throws org.apache.thrift.TException {
+    public void getTableNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getTableNames_call method_call = new getTableNames_call(resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2154,7 +2158,7 @@ public class Hbase {
     }
 
     public static class getTableNames_call extends org.apache.thrift.async.TAsyncMethodCall {
-      public getTableNames_call(org.apache.thrift.async.AsyncMethodCallback<getTableNames_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getTableNames_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
       }
 
@@ -2175,7 +2179,7 @@ public class Hbase {
       }
     }
 
-    public void getColumnDescriptors(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<getColumnDescriptors_call> resultHandler) throws org.apache.thrift.TException {
+    public void getColumnDescriptors(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getColumnDescriptors_call method_call = new getColumnDescriptors_call(tableName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2184,7 +2188,7 @@ public class Hbase {
 
     public static class getColumnDescriptors_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
-      public getColumnDescriptors_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<getColumnDescriptors_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getColumnDescriptors_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
       }
@@ -2207,7 +2211,7 @@ public class Hbase {
       }
     }
 
-    public void getTableRegions(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<getTableRegions_call> resultHandler) throws org.apache.thrift.TException {
+    public void getTableRegions(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getTableRegions_call method_call = new getTableRegions_call(tableName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2216,7 +2220,7 @@ public class Hbase {
 
     public static class getTableRegions_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
-      public getTableRegions_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<getTableRegions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getTableRegions_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
       }
@@ -2239,7 +2243,7 @@ public class Hbase {
       }
     }
 
-    public void createTable(ByteBuffer tableName, List<ColumnDescriptor> columnFamilies, org.apache.thrift.async.AsyncMethodCallback<createTable_call> resultHandler) throws org.apache.thrift.TException {
+    public void createTable(ByteBuffer tableName, List<ColumnDescriptor> columnFamilies, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       createTable_call method_call = new createTable_call(tableName, columnFamilies, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2249,7 +2253,7 @@ public class Hbase {
     public static class createTable_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
       private List<ColumnDescriptor> columnFamilies;
-      public createTable_call(ByteBuffer tableName, List<ColumnDescriptor> columnFamilies, org.apache.thrift.async.AsyncMethodCallback<createTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public createTable_call(ByteBuffer tableName, List<ColumnDescriptor> columnFamilies, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.columnFamilies = columnFamilies;
@@ -2274,7 +2278,7 @@ public class Hbase {
       }
     }
 
-    public void deleteTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<deleteTable_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteTable(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteTable_call method_call = new deleteTable_call(tableName, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2283,7 +2287,7 @@ public class Hbase {
 
     public static class deleteTable_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer tableName;
-      public deleteTable_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback<deleteTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteTable_call(ByteBuffer tableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
       }
@@ -2306,7 +2310,7 @@ public class Hbase {
       }
     }
 
-    public void get(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler) throws org.apache.thrift.TException {
+    public void get(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       get_call method_call = new get_call(tableName, row, column, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2318,7 +2322,7 @@ public class Hbase {
       private ByteBuffer row;
       private ByteBuffer column;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public get_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public get_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2347,7 +2351,7 @@ public class Hbase {
       }
     }
 
-    public void getVer(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getVer_call> resultHandler) throws org.apache.thrift.TException {
+    public void getVer(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getVer_call method_call = new getVer_call(tableName, row, column, numVersions, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2360,7 +2364,7 @@ public class Hbase {
       private ByteBuffer column;
       private int numVersions;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getVer_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getVer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getVer_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2391,7 +2395,7 @@ public class Hbase {
       }
     }
 
-    public void getVerTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getVerTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void getVerTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getVerTs_call method_call = new getVerTs_call(tableName, row, column, timestamp, numVersions, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2405,7 +2409,7 @@ public class Hbase {
       private long timestamp;
       private int numVersions;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getVerTs_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getVerTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getVerTs_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, int numVersions, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2438,7 +2442,7 @@ public class Hbase {
       }
     }
 
-    public void getRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRow_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRow_call method_call = new getRow_call(tableName, row, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2449,7 +2453,7 @@ public class Hbase {
       private ByteBuffer tableName;
       private ByteBuffer row;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRow_call(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRow_call(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2476,7 +2480,7 @@ public class Hbase {
       }
     }
 
-    public void getRowWithColumns(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowWithColumns_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRowWithColumns(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRowWithColumns_call method_call = new getRowWithColumns_call(tableName, row, columns, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2488,7 +2492,7 @@ public class Hbase {
       private ByteBuffer row;
       private List<ByteBuffer> columns;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRowWithColumns_call(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowWithColumns_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRowWithColumns_call(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2517,7 +2521,7 @@ public class Hbase {
       }
     }
 
-    public void getRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRowTs_call method_call = new getRowTs_call(tableName, row, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2529,7 +2533,7 @@ public class Hbase {
       private ByteBuffer row;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRowTs_call(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRowTs_call(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2558,7 +2562,7 @@ public class Hbase {
       }
     }
 
-    public void getRowWithColumnsTs(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowWithColumnsTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRowWithColumnsTs(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRowWithColumnsTs_call method_call = new getRowWithColumnsTs_call(tableName, row, columns, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2571,7 +2575,7 @@ public class Hbase {
       private List<ByteBuffer> columns;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRowWithColumnsTs_call(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowWithColumnsTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRowWithColumnsTs_call(ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2602,7 +2606,7 @@ public class Hbase {
       }
     }
 
-    public void getRows(ByteBuffer tableName, List<ByteBuffer> rows, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRows_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRows(ByteBuffer tableName, List<ByteBuffer> rows, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRows_call method_call = new getRows_call(tableName, rows, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2613,7 +2617,7 @@ public class Hbase {
       private ByteBuffer tableName;
       private List<ByteBuffer> rows;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRows_call(ByteBuffer tableName, List<ByteBuffer> rows, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRows_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRows_call(ByteBuffer tableName, List<ByteBuffer> rows, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.rows = rows;
@@ -2640,7 +2644,7 @@ public class Hbase {
       }
     }
 
-    public void getRowsWithColumns(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowsWithColumns_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRowsWithColumns(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRowsWithColumns_call method_call = new getRowsWithColumns_call(tableName, rows, columns, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2652,7 +2656,7 @@ public class Hbase {
       private List<ByteBuffer> rows;
       private List<ByteBuffer> columns;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRowsWithColumns_call(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowsWithColumns_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRowsWithColumns_call(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.rows = rows;
@@ -2681,7 +2685,7 @@ public class Hbase {
       }
     }
 
-    public void getRowsTs(ByteBuffer tableName, List<ByteBuffer> rows, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowsTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRowsTs(ByteBuffer tableName, List<ByteBuffer> rows, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRowsTs_call method_call = new getRowsTs_call(tableName, rows, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2693,7 +2697,7 @@ public class Hbase {
       private List<ByteBuffer> rows;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRowsTs_call(ByteBuffer tableName, List<ByteBuffer> rows, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowsTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRowsTs_call(ByteBuffer tableName, List<ByteBuffer> rows, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.rows = rows;
@@ -2722,7 +2726,7 @@ public class Hbase {
       }
     }
 
-    public void getRowsWithColumnsTs(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowsWithColumnsTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRowsWithColumnsTs(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRowsWithColumnsTs_call method_call = new getRowsWithColumnsTs_call(tableName, rows, columns, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2735,7 +2739,7 @@ public class Hbase {
       private List<ByteBuffer> columns;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public getRowsWithColumnsTs_call(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<getRowsWithColumnsTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRowsWithColumnsTs_call(ByteBuffer tableName, List<ByteBuffer> rows, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.rows = rows;
@@ -2766,7 +2770,7 @@ public class Hbase {
       }
     }
 
-    public void mutateRow(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRow_call> resultHandler) throws org.apache.thrift.TException {
+    public void mutateRow(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       mutateRow_call method_call = new mutateRow_call(tableName, row, mutations, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2778,7 +2782,7 @@ public class Hbase {
       private ByteBuffer row;
       private List<Mutation> mutations;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public mutateRow_call(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public mutateRow_call(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2807,7 +2811,7 @@ public class Hbase {
       }
     }
 
-    public void mutateRowTs(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRowTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void mutateRowTs(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       mutateRowTs_call method_call = new mutateRowTs_call(tableName, row, mutations, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2820,7 +2824,7 @@ public class Hbase {
       private List<Mutation> mutations;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public mutateRowTs_call(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRowTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public mutateRowTs_call(ByteBuffer tableName, ByteBuffer row, List<Mutation> mutations, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2851,7 +2855,7 @@ public class Hbase {
       }
     }
 
-    public void mutateRows(ByteBuffer tableName, List<BatchMutation> rowBatches, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRows_call> resultHandler) throws org.apache.thrift.TException {
+    public void mutateRows(ByteBuffer tableName, List<BatchMutation> rowBatches, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       mutateRows_call method_call = new mutateRows_call(tableName, rowBatches, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2862,7 +2866,7 @@ public class Hbase {
       private ByteBuffer tableName;
       private List<BatchMutation> rowBatches;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public mutateRows_call(ByteBuffer tableName, List<BatchMutation> rowBatches, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRows_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public mutateRows_call(ByteBuffer tableName, List<BatchMutation> rowBatches, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.rowBatches = rowBatches;
@@ -2889,7 +2893,7 @@ public class Hbase {
       }
     }
 
-    public void mutateRowsTs(ByteBuffer tableName, List<BatchMutation> rowBatches, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRowsTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void mutateRowsTs(ByteBuffer tableName, List<BatchMutation> rowBatches, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       mutateRowsTs_call method_call = new mutateRowsTs_call(tableName, rowBatches, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2901,7 +2905,7 @@ public class Hbase {
       private List<BatchMutation> rowBatches;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public mutateRowsTs_call(ByteBuffer tableName, List<BatchMutation> rowBatches, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<mutateRowsTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public mutateRowsTs_call(ByteBuffer tableName, List<BatchMutation> rowBatches, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.rowBatches = rowBatches;
@@ -2930,7 +2934,7 @@ public class Hbase {
       }
     }
 
-    public void atomicIncrement(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long value, org.apache.thrift.async.AsyncMethodCallback<atomicIncrement_call> resultHandler) throws org.apache.thrift.TException {
+    public void atomicIncrement(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       atomicIncrement_call method_call = new atomicIncrement_call(tableName, row, column, value, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2942,7 +2946,7 @@ public class Hbase {
       private ByteBuffer row;
       private ByteBuffer column;
       private long value;
-      public atomicIncrement_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long value, org.apache.thrift.async.AsyncMethodCallback<atomicIncrement_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public atomicIncrement_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -2971,7 +2975,7 @@ public class Hbase {
       }
     }
 
-    public void deleteAll(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAll_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteAll(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteAll_call method_call = new deleteAll_call(tableName, row, column, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -2983,7 +2987,7 @@ public class Hbase {
       private ByteBuffer row;
       private ByteBuffer column;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public deleteAll_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteAll_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -3012,7 +3016,7 @@ public class Hbase {
       }
     }
 
-    public void deleteAllTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAllTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteAllTs(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteAllTs_call method_call = new deleteAllTs_call(tableName, row, column, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3025,7 +3029,7 @@ public class Hbase {
       private ByteBuffer column;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public deleteAllTs_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAllTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteAllTs_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -3056,7 +3060,7 @@ public class Hbase {
       }
     }
 
-    public void deleteAllRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAllRow_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteAllRow(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteAllRow_call method_call = new deleteAllRow_call(tableName, row, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3067,7 +3071,7 @@ public class Hbase {
       private ByteBuffer tableName;
       private ByteBuffer row;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public deleteAllRow_call(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAllRow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteAllRow_call(ByteBuffer tableName, ByteBuffer row, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -3094,7 +3098,7 @@ public class Hbase {
       }
     }
 
-    public void increment(TIncrement increment, org.apache.thrift.async.AsyncMethodCallback<increment_call> resultHandler) throws org.apache.thrift.TException {
+    public void increment(TIncrement increment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       increment_call method_call = new increment_call(increment, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3103,7 +3107,7 @@ public class Hbase {
 
     public static class increment_call extends org.apache.thrift.async.TAsyncMethodCall {
       private TIncrement increment;
-      public increment_call(TIncrement increment, org.apache.thrift.async.AsyncMethodCallback<increment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public increment_call(TIncrement increment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.increment = increment;
       }
@@ -3126,7 +3130,7 @@ public class Hbase {
       }
     }
 
-    public void incrementRows(List<TIncrement> increments, org.apache.thrift.async.AsyncMethodCallback<incrementRows_call> resultHandler) throws org.apache.thrift.TException {
+    public void incrementRows(List<TIncrement> increments, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       incrementRows_call method_call = new incrementRows_call(increments, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3135,7 +3139,7 @@ public class Hbase {
 
     public static class incrementRows_call extends org.apache.thrift.async.TAsyncMethodCall {
       private List<TIncrement> increments;
-      public incrementRows_call(List<TIncrement> increments, org.apache.thrift.async.AsyncMethodCallback<incrementRows_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public incrementRows_call(List<TIncrement> increments, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.increments = increments;
       }
@@ -3158,7 +3162,7 @@ public class Hbase {
       }
     }
 
-    public void deleteAllRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAllRowTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteAllRowTs(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteAllRowTs_call method_call = new deleteAllRowTs_call(tableName, row, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3170,7 +3174,7 @@ public class Hbase {
       private ByteBuffer row;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public deleteAllRowTs_call(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<deleteAllRowTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteAllRowTs_call(ByteBuffer tableName, ByteBuffer row, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -3199,7 +3203,7 @@ public class Hbase {
       }
     }
 
-    public void scannerOpenWithScan(ByteBuffer tableName, TScan scan, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithScan_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerOpenWithScan(ByteBuffer tableName, TScan scan, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerOpenWithScan_call method_call = new scannerOpenWithScan_call(tableName, scan, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3210,7 +3214,7 @@ public class Hbase {
       private ByteBuffer tableName;
       private TScan scan;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public scannerOpenWithScan_call(ByteBuffer tableName, TScan scan, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithScan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerOpenWithScan_call(ByteBuffer tableName, TScan scan, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.scan = scan;
@@ -3237,7 +3241,7 @@ public class Hbase {
       }
     }
 
-    public void scannerOpen(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpen_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerOpen(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerOpen_call method_call = new scannerOpen_call(tableName, startRow, columns, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3249,7 +3253,7 @@ public class Hbase {
       private ByteBuffer startRow;
       private List<ByteBuffer> columns;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public scannerOpen_call(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpen_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerOpen_call(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.startRow = startRow;
@@ -3278,7 +3282,7 @@ public class Hbase {
       }
     }
 
-    public void scannerOpenWithStop(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithStop_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerOpenWithStop(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerOpenWithStop_call method_call = new scannerOpenWithStop_call(tableName, startRow, stopRow, columns, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3291,7 +3295,7 @@ public class Hbase {
       private ByteBuffer stopRow;
       private List<ByteBuffer> columns;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public scannerOpenWithStop_call(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithStop_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerOpenWithStop_call(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.startRow = startRow;
@@ -3322,7 +3326,7 @@ public class Hbase {
       }
     }
 
-    public void scannerOpenWithPrefix(ByteBuffer tableName, ByteBuffer startAndPrefix, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithPrefix_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerOpenWithPrefix(ByteBuffer tableName, ByteBuffer startAndPrefix, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerOpenWithPrefix_call method_call = new scannerOpenWithPrefix_call(tableName, startAndPrefix, columns, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3334,7 +3338,7 @@ public class Hbase {
       private ByteBuffer startAndPrefix;
       private List<ByteBuffer> columns;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public scannerOpenWithPrefix_call(ByteBuffer tableName, ByteBuffer startAndPrefix, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithPrefix_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerOpenWithPrefix_call(ByteBuffer tableName, ByteBuffer startAndPrefix, List<ByteBuffer> columns, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.startAndPrefix = startAndPrefix;
@@ -3363,7 +3367,7 @@ public class Hbase {
       }
     }
 
-    public void scannerOpenTs(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerOpenTs(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerOpenTs_call method_call = new scannerOpenTs_call(tableName, startRow, columns, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3376,7 +3380,7 @@ public class Hbase {
       private List<ByteBuffer> columns;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public scannerOpenTs_call(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerOpenTs_call(ByteBuffer tableName, ByteBuffer startRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.startRow = startRow;
@@ -3407,7 +3411,7 @@ public class Hbase {
       }
     }
 
-    public void scannerOpenWithStopTs(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithStopTs_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerOpenWithStopTs(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerOpenWithStopTs_call method_call = new scannerOpenWithStopTs_call(tableName, startRow, stopRow, columns, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3421,7 +3425,7 @@ public class Hbase {
       private List<ByteBuffer> columns;
       private long timestamp;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public scannerOpenWithStopTs_call(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<scannerOpenWithStopTs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerOpenWithStopTs_call(ByteBuffer tableName, ByteBuffer startRow, ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.startRow = startRow;
@@ -3454,7 +3458,7 @@ public class Hbase {
       }
     }
 
-    public void scannerGet(int id, org.apache.thrift.async.AsyncMethodCallback<scannerGet_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerGet(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerGet_call method_call = new scannerGet_call(id, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3463,7 +3467,7 @@ public class Hbase {
 
     public static class scannerGet_call extends org.apache.thrift.async.TAsyncMethodCall {
       private int id;
-      public scannerGet_call(int id, org.apache.thrift.async.AsyncMethodCallback<scannerGet_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerGet_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.id = id;
       }
@@ -3486,7 +3490,7 @@ public class Hbase {
       }
     }
 
-    public void scannerGetList(int id, int nbRows, org.apache.thrift.async.AsyncMethodCallback<scannerGetList_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerGetList(int id, int nbRows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerGetList_call method_call = new scannerGetList_call(id, nbRows, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3496,7 +3500,7 @@ public class Hbase {
     public static class scannerGetList_call extends org.apache.thrift.async.TAsyncMethodCall {
       private int id;
       private int nbRows;
-      public scannerGetList_call(int id, int nbRows, org.apache.thrift.async.AsyncMethodCallback<scannerGetList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerGetList_call(int id, int nbRows, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.id = id;
         this.nbRows = nbRows;
@@ -3521,7 +3525,7 @@ public class Hbase {
       }
     }
 
-    public void scannerClose(int id, org.apache.thrift.async.AsyncMethodCallback<scannerClose_call> resultHandler) throws org.apache.thrift.TException {
+    public void scannerClose(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       scannerClose_call method_call = new scannerClose_call(id, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3530,7 +3534,7 @@ public class Hbase {
 
     public static class scannerClose_call extends org.apache.thrift.async.TAsyncMethodCall {
       private int id;
-      public scannerClose_call(int id, org.apache.thrift.async.AsyncMethodCallback<scannerClose_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public scannerClose_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.id = id;
       }
@@ -3553,7 +3557,7 @@ public class Hbase {
       }
     }
 
-    public void getRegionInfo(ByteBuffer row, org.apache.thrift.async.AsyncMethodCallback<getRegionInfo_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRegionInfo(ByteBuffer row, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRegionInfo_call method_call = new getRegionInfo_call(row, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3562,7 +3566,7 @@ public class Hbase {
 
     public static class getRegionInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer row;
-      public getRegionInfo_call(ByteBuffer row, org.apache.thrift.async.AsyncMethodCallback<getRegionInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRegionInfo_call(ByteBuffer row, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.row = row;
       }
@@ -3585,7 +3589,7 @@ public class Hbase {
       }
     }
 
-    public void append(TAppend append, org.apache.thrift.async.AsyncMethodCallback<append_call> resultHandler) throws org.apache.thrift.TException {
+    public void append(TAppend append, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       append_call method_call = new append_call(append, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3594,7 +3598,7 @@ public class Hbase {
 
     public static class append_call extends org.apache.thrift.async.TAsyncMethodCall {
       private TAppend append;
-      public append_call(TAppend append, org.apache.thrift.async.AsyncMethodCallback<append_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public append_call(TAppend append, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.append = append;
       }
@@ -3617,7 +3621,7 @@ public class Hbase {
       }
     }
 
-    public void checkAndPut(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, ByteBuffer value, Mutation mput, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<checkAndPut_call> resultHandler) throws org.apache.thrift.TException {
+    public void checkAndPut(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, ByteBuffer value, Mutation mput, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       checkAndPut_call method_call = new checkAndPut_call(tableName, row, column, value, mput, attributes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -3631,7 +3635,7 @@ public class Hbase {
       private ByteBuffer value;
       private Mutation mput;
       private Map<ByteBuffer,ByteBuffer> attributes;
-      public checkAndPut_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, ByteBuffer value, Mutation mput, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<checkAndPut_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public checkAndPut_call(ByteBuffer tableName, ByteBuffer row, ByteBuffer column, ByteBuffer value, Mutation mput, Map<ByteBuffer,ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.tableName = tableName;
         this.row = row;
@@ -4813,7 +4817,2622 @@ public class Hbase {
 
   }
 
-  public static class enableTable_args implements org.apache.thrift.TBase<enableTable_args, enableTable_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
+    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
+    public AsyncProcessor(I iface) {
+      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
+    }
+
+    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
+      super(iface, getProcessMap(processMap));
+    }
+
+    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
+      processMap.put("enableTable", new enableTable());
+      processMap.put("disableTable", new disableTable());
+      processMap.put("isTableEnabled", new isTableEnabled());
+      processMap.put("compact", new compact());
+      processMap.put("majorCompact", new majorCompact());
+      processMap.put("getTableNames", new getTableNames());
+      processMap.put("getColumnDescriptors", new getColumnDescriptors());
+      processMap.put("getTableRegions", new getTableRegions());
+      processMap.put("createTable", new createTable());
+      processMap.put("deleteTable", new deleteTable());
+      processMap.put("get", new get());
+      processMap.put("getVer", new getVer());
+      processMap.put("getVerTs", new getVerTs());
+      processMap.put("getRow", new getRow());
+      processMap.put("getRowWithColumns", new getRowWithColumns());
+      processMap.put("getRowTs", new getRowTs());
+      processMap.put("getRowWithColumnsTs", new getRowWithColumnsTs());
+      processMap.put("getRows", new getRows());
+      processMap.put("getRowsWithColumns", new getRowsWithColumns());
+      processMap.put("getRowsTs", new getRowsTs());
+      processMap.put("getRowsWithColumnsTs", new getRowsWithColumnsTs());
+      processMap.put("mutateRow", new mutateRow());
+      processMap.put("mutateRowTs", new mutateRowTs());
+      processMap.put("mutateRows", new mutateRows());
+      processMap.put("mutateRowsTs", new mutateRowsTs());
+      processMap.put("atomicIncrement", new atomicIncrement());
+      processMap.put("deleteAll", new deleteAll());
+      processMap.put("deleteAllTs", new deleteAllTs());
+      processMap.put("deleteAllRow", new deleteAllRow());
+      processMap.put("increment", new increment());
+      processMap.put("incrementRows", new incrementRows());
+      processMap.put("deleteAllRowTs", new deleteAllRowTs());
+      processMap.put("scannerOpenWithScan", new scannerOpenWithScan());
+      processMap.put("scannerOpen", new scannerOpen());
+      processMap.put("scannerOpenWithStop", new scannerOpenWithStop());
+      processMap.put("scannerOpenWithPrefix", new scannerOpenWithPrefix());
+      processMap.put("scannerOpenTs", new scannerOpenTs());
+      processMap.put("scannerOpenWithStopTs", new scannerOpenWithStopTs());
+      processMap.put("scannerGet", new scannerGet());
+      processMap.put("scannerGetList", new scannerGetList());
+      processMap.put("scannerClose", new scannerClose());
+      processMap.put("getRegionInfo", new getRegionInfo());
+      processMap.put("append", new append());
+      processMap.put("checkAndPut", new checkAndPut());
+      return processMap;
+    }
+
+    public static class enableTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enableTable_args, Void> {
+      public enableTable() {
+        super("enableTable");
+      }
+
+      public enableTable_args getEmptyArgsInstance() {
+        return new enableTable_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            enableTable_result result = new enableTable_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            enableTable_result result = new enableTable_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, enableTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.enableTable(args.tableName,resultHandler);
+      }
+    }
+
+    public static class disableTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disableTable_args, Void> {
+      public disableTable() {
+        super("disableTable");
+      }
+
+      public disableTable_args getEmptyArgsInstance() {
+        return new disableTable_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            disableTable_result result = new disableTable_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            disableTable_result result = new disableTable_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, disableTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.disableTable(args.tableName,resultHandler);
+      }
+    }
+
+    public static class isTableEnabled<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isTableEnabled_args, Boolean> {
+      public isTableEnabled() {
+        super("isTableEnabled");
+      }
+
+      public isTableEnabled_args getEmptyArgsInstance() {
+        return new isTableEnabled_args();
+      }
+
+      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Boolean>() { 
+          public void onComplete(Boolean o) {
+            isTableEnabled_result result = new isTableEnabled_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            isTableEnabled_result result = new isTableEnabled_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, isTableEnabled_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
+        iface.isTableEnabled(args.tableName,resultHandler);
+      }
+    }
+
+    public static class compact<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compact_args, Void> {
+      public compact() {
+        super("compact");
+      }
+
+      public compact_args getEmptyArgsInstance() {
+        return new compact_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            compact_result result = new compact_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            compact_result result = new compact_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, compact_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.compact(args.tableNameOrRegionName,resultHandler);
+      }
+    }
+
+    public static class majorCompact<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, majorCompact_args, Void> {
+      public majorCompact() {
+        super("majorCompact");
+      }
+
+      public majorCompact_args getEmptyArgsInstance() {
+        return new majorCompact_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            majorCompact_result result = new majorCompact_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            majorCompact_result result = new majorCompact_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, majorCompact_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.majorCompact(args.tableNameOrRegionName,resultHandler);
+      }
+    }
+
+    public static class getTableNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTableNames_args, List<ByteBuffer>> {
+      public getTableNames() {
+        super("getTableNames");
+      }
+
+      public getTableNames_args getEmptyArgsInstance() {
+        return new getTableNames_args();
+      }
+
+      public AsyncMethodCallback<List<ByteBuffer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<ByteBuffer>>() { 
+          public void onComplete(List<ByteBuffer> o) {
+            getTableNames_result result = new getTableNames_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getTableNames_result result = new getTableNames_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getTableNames_args args, org.apache.thrift.async.AsyncMethodCallback<List<ByteBuffer>> resultHandler) throws TException {
+        iface.getTableNames(resultHandler);
+      }
+    }
+
+    public static class getColumnDescriptors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getColumnDescriptors_args, Map<ByteBuffer,ColumnDescriptor>> {
+      public getColumnDescriptors() {
+        super("getColumnDescriptors");
+      }
+
+      public getColumnDescriptors_args getEmptyArgsInstance() {
+        return new getColumnDescriptors_args();
+      }
+
+      public AsyncMethodCallback<Map<ByteBuffer,ColumnDescriptor>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Map<ByteBuffer,ColumnDescriptor>>() { 
+          public void onComplete(Map<ByteBuffer,ColumnDescriptor> o) {
+            getColumnDescriptors_result result = new getColumnDescriptors_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getColumnDescriptors_result result = new getColumnDescriptors_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getColumnDescriptors_args args, org.apache.thrift.async.AsyncMethodCallback<Map<ByteBuffer,ColumnDescriptor>> resultHandler) throws TException {
+        iface.getColumnDescriptors(args.tableName,resultHandler);
+      }
+    }
+
+    public static class getTableRegions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTableRegions_args, List<TRegionInfo>> {
+      public getTableRegions() {
+        super("getTableRegions");
+      }
+
+      public getTableRegions_args getEmptyArgsInstance() {
+        return new getTableRegions_args();
+      }
+
+      public AsyncMethodCallback<List<TRegionInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRegionInfo>>() { 
+          public void onComplete(List<TRegionInfo> o) {
+            getTableRegions_result result = new getTableRegions_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getTableRegions_result result = new getTableRegions_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getTableRegions_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRegionInfo>> resultHandler) throws TException {
+        iface.getTableRegions(args.tableName,resultHandler);
+      }
+    }
+
+    public static class createTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createTable_args, Void> {
+      public createTable() {
+        super("createTable");
+      }
+
+      public createTable_args getEmptyArgsInstance() {
+        return new createTable_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            createTable_result result = new createTable_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            createTable_result result = new createTable_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof AlreadyExists) {
+                        result.exist = (AlreadyExists) e;
+                        result.setExistIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, createTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.createTable(args.tableName, args.columnFamilies,resultHandler);
+      }
+    }
+
+    public static class deleteTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTable_args, Void> {
+      public deleteTable() {
+        super("deleteTable");
+      }
+
+      public deleteTable_args getEmptyArgsInstance() {
+        return new deleteTable_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            deleteTable_result result = new deleteTable_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteTable_result result = new deleteTable_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.deleteTable(args.tableName,resultHandler);
+      }
+    }
+
+    public static class get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_args, List<TCell>> {
+      public get() {
+        super("get");
+      }
+
+      public get_args getEmptyArgsInstance() {
+        return new get_args();
+      }
+
+      public AsyncMethodCallback<List<TCell>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TCell>>() { 
+          public void onComplete(List<TCell> o) {
+            get_result result = new get_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            get_result result = new get_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, get_args args, org.apache.thrift.async.AsyncMethodCallback<List<TCell>> resultHandler) throws TException {
+        iface.get(args.tableName, args.row, args.column, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getVer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVer_args, List<TCell>> {
+      public getVer() {
+        super("getVer");
+      }
+
+      public getVer_args getEmptyArgsInstance() {
+        return new getVer_args();
+      }
+
+      public AsyncMethodCallback<List<TCell>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TCell>>() { 
+          public void onComplete(List<TCell> o) {
+            getVer_result result = new getVer_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getVer_result result = new getVer_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getVer_args args, org.apache.thrift.async.AsyncMethodCallback<List<TCell>> resultHandler) throws TException {
+        iface.getVer(args.tableName, args.row, args.column, args.numVersions, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getVerTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVerTs_args, List<TCell>> {
+      public getVerTs() {
+        super("getVerTs");
+      }
+
+      public getVerTs_args getEmptyArgsInstance() {
+        return new getVerTs_args();
+      }
+
+      public AsyncMethodCallback<List<TCell>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TCell>>() { 
+          public void onComplete(List<TCell> o) {
+            getVerTs_result result = new getVerTs_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getVerTs_result result = new getVerTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getVerTs_args args, org.apache.thrift.async.AsyncMethodCallback<List<TCell>> resultHandler) throws TException {
+        iface.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRow_args, List<TRowResult>> {
+      public getRow() {
+        super("getRow");
+      }
+
+      public getRow_args getEmptyArgsInstance() {
+        return new getRow_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRow_result result = new getRow_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRow_result result = new getRow_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRow_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRow(args.tableName, args.row, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRowWithColumns<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRowWithColumns_args, List<TRowResult>> {
+      public getRowWithColumns() {
+        super("getRowWithColumns");
+      }
+
+      public getRowWithColumns_args getEmptyArgsInstance() {
+        return new getRowWithColumns_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRowWithColumns_result result = new getRowWithColumns_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRowWithColumns_result result = new getRowWithColumns_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRowWithColumns_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRowWithColumns(args.tableName, args.row, args.columns, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRowTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRowTs_args, List<TRowResult>> {
+      public getRowTs() {
+        super("getRowTs");
+      }
+
+      public getRowTs_args getEmptyArgsInstance() {
+        return new getRowTs_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRowTs_result result = new getRowTs_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRowTs_result result = new getRowTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRowTs_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRowTs(args.tableName, args.row, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRowWithColumnsTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRowWithColumnsTs_args, List<TRowResult>> {
+      public getRowWithColumnsTs() {
+        super("getRowWithColumnsTs");
+      }
+
+      public getRowWithColumnsTs_args getEmptyArgsInstance() {
+        return new getRowWithColumnsTs_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRowWithColumnsTs_result result = new getRowWithColumnsTs_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRowWithColumnsTs_result result = new getRowWithColumnsTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRowWithColumnsTs_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRows_args, List<TRowResult>> {
+      public getRows() {
+        super("getRows");
+      }
+
+      public getRows_args getEmptyArgsInstance() {
+        return new getRows_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRows_result result = new getRows_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRows_result result = new getRows_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRows_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRows(args.tableName, args.rows, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRowsWithColumns<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRowsWithColumns_args, List<TRowResult>> {
+      public getRowsWithColumns() {
+        super("getRowsWithColumns");
+      }
+
+      public getRowsWithColumns_args getEmptyArgsInstance() {
+        return new getRowsWithColumns_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRowsWithColumns_result result = new getRowsWithColumns_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRowsWithColumns_result result = new getRowsWithColumns_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRowsWithColumns_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRowsWithColumns(args.tableName, args.rows, args.columns, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRowsTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRowsTs_args, List<TRowResult>> {
+      public getRowsTs() {
+        super("getRowsTs");
+      }
+
+      public getRowsTs_args getEmptyArgsInstance() {
+        return new getRowsTs_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRowsTs_result result = new getRowsTs_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRowsTs_result result = new getRowsTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRowsTs_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRowsTs(args.tableName, args.rows, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class getRowsWithColumnsTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRowsWithColumnsTs_args, List<TRowResult>> {
+      public getRowsWithColumnsTs() {
+        super("getRowsWithColumnsTs");
+      }
+
+      public getRowsWithColumnsTs_args getEmptyArgsInstance() {
+        return new getRowsWithColumnsTs_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            getRowsWithColumnsTs_result result = new getRowsWithColumnsTs_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRowsWithColumnsTs_result result = new getRowsWithColumnsTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRowsWithColumnsTs_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.getRowsWithColumnsTs(args.tableName, args.rows, args.columns, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class mutateRow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mutateRow_args, Void> {
+      public mutateRow() {
+        super("mutateRow");
+      }
+
+      public mutateRow_args getEmptyArgsInstance() {
+        return new mutateRow_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            mutateRow_result result = new mutateRow_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            mutateRow_result result = new mutateRow_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, mutateRow_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.mutateRow(args.tableName, args.row, args.mutations, args.attributes,resultHandler);
+      }
+    }
+
+    public static class mutateRowTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mutateRowTs_args, Void> {
+      public mutateRowTs() {
+        super("mutateRowTs");
+      }
+
+      public mutateRowTs_args getEmptyArgsInstance() {
+        return new mutateRowTs_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            mutateRowTs_result result = new mutateRowTs_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            mutateRowTs_result result = new mutateRowTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, mutateRowTs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class mutateRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mutateRows_args, Void> {
+      public mutateRows() {
+        super("mutateRows");
+      }
+
+      public mutateRows_args getEmptyArgsInstance() {
+        return new mutateRows_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            mutateRows_result result = new mutateRows_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            mutateRows_result result = new mutateRows_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, mutateRows_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.mutateRows(args.tableName, args.rowBatches, args.attributes,resultHandler);
+      }
+    }
+
+    public static class mutateRowsTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mutateRowsTs_args, Void> {
+      public mutateRowsTs() {
+        super("mutateRowsTs");
+      }
+
+      public mutateRowsTs_args getEmptyArgsInstance() {
+        return new mutateRowsTs_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            mutateRowsTs_result result = new mutateRowsTs_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            mutateRowsTs_result result = new mutateRowsTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, mutateRowsTs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class atomicIncrement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, atomicIncrement_args, Long> {
+      public atomicIncrement() {
+        super("atomicIncrement");
+      }
+
+      public atomicIncrement_args getEmptyArgsInstance() {
+        return new atomicIncrement_args();
+      }
+
+      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Long>() { 
+          public void onComplete(Long o) {
+            atomicIncrement_result result = new atomicIncrement_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            atomicIncrement_result result = new atomicIncrement_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, atomicIncrement_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
+        iface.atomicIncrement(args.tableName, args.row, args.column, args.value,resultHandler);
+      }
+    }
+
+    public static class deleteAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAll_args, Void> {
+      public deleteAll() {
+        super("deleteAll");
+      }
+
+      public deleteAll_args getEmptyArgsInstance() {
+        return new deleteAll_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            deleteAll_result result = new deleteAll_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteAll_result result = new deleteAll_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.deleteAll(args.tableName, args.row, args.column, args.attributes,resultHandler);
+      }
+    }
+
+    public static class deleteAllTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllTs_args, Void> {
+      public deleteAllTs() {
+        super("deleteAllTs");
+      }
+
+      public deleteAllTs_args getEmptyArgsInstance() {
+        return new deleteAllTs_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            deleteAllTs_result result = new deleteAllTs_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteAllTs_result result = new deleteAllTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteAllTs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class deleteAllRow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllRow_args, Void> {
+      public deleteAllRow() {
+        super("deleteAllRow");
+      }
+
+      public deleteAllRow_args getEmptyArgsInstance() {
+        return new deleteAllRow_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            deleteAllRow_result result = new deleteAllRow_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteAllRow_result result = new deleteAllRow_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteAllRow_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.deleteAllRow(args.tableName, args.row, args.attributes,resultHandler);
+      }
+    }
+
+    public static class increment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, increment_args, Void> {
+      public increment() {
+        super("increment");
+      }
+
+      public increment_args getEmptyArgsInstance() {
+        return new increment_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            increment_result result = new increment_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            increment_result result = new increment_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, increment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.increment(args.increment,resultHandler);
+      }
+    }
+
+    public static class incrementRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, incrementRows_args, Void> {
+      public incrementRows() {
+        super("incrementRows");
+      }
+
+      public incrementRows_args getEmptyArgsInstance() {
+        return new incrementRows_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            incrementRows_result result = new incrementRows_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            incrementRows_result result = new incrementRows_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, incrementRows_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.incrementRows(args.increments,resultHandler);
+      }
+    }
+
+    public static class deleteAllRowTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllRowTs_args, Void> {
+      public deleteAllRowTs() {
+        super("deleteAllRowTs");
+      }
+
+      public deleteAllRowTs_args getEmptyArgsInstance() {
+        return new deleteAllRowTs_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            deleteAllRowTs_result result = new deleteAllRowTs_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteAllRowTs_result result = new deleteAllRowTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteAllRowTs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.deleteAllRowTs(args.tableName, args.row, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerOpenWithScan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerOpenWithScan_args, Integer> {
+      public scannerOpenWithScan() {
+        super("scannerOpenWithScan");
+      }
+
+      public scannerOpenWithScan_args getEmptyArgsInstance() {
+        return new scannerOpenWithScan_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            scannerOpenWithScan_result result = new scannerOpenWithScan_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerOpenWithScan_result result = new scannerOpenWithScan_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerOpenWithScan_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.scannerOpenWithScan(args.tableName, args.scan, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerOpen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerOpen_args, Integer> {
+      public scannerOpen() {
+        super("scannerOpen");
+      }
+
+      public scannerOpen_args getEmptyArgsInstance() {
+        return new scannerOpen_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            scannerOpen_result result = new scannerOpen_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerOpen_result result = new scannerOpen_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerOpen_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.scannerOpen(args.tableName, args.startRow, args.columns, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerOpenWithStop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerOpenWithStop_args, Integer> {
+      public scannerOpenWithStop() {
+        super("scannerOpenWithStop");
+      }
+
+      public scannerOpenWithStop_args getEmptyArgsInstance() {
+        return new scannerOpenWithStop_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            scannerOpenWithStop_result result = new scannerOpenWithStop_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerOpenWithStop_result result = new scannerOpenWithStop_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerOpenWithStop_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerOpenWithPrefix<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerOpenWithPrefix_args, Integer> {
+      public scannerOpenWithPrefix() {
+        super("scannerOpenWithPrefix");
+      }
+
+      public scannerOpenWithPrefix_args getEmptyArgsInstance() {
+        return new scannerOpenWithPrefix_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            scannerOpenWithPrefix_result result = new scannerOpenWithPrefix_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerOpenWithPrefix_result result = new scannerOpenWithPrefix_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerOpenWithPrefix_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerOpenTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerOpenTs_args, Integer> {
+      public scannerOpenTs() {
+        super("scannerOpenTs");
+      }
+
+      public scannerOpenTs_args getEmptyArgsInstance() {
+        return new scannerOpenTs_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            scannerOpenTs_result result = new scannerOpenTs_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerOpenTs_result result = new scannerOpenTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerOpenTs_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerOpenWithStopTs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerOpenWithStopTs_args, Integer> {
+      public scannerOpenWithStopTs() {
+        super("scannerOpenWithStopTs");
+      }
+
+      public scannerOpenWithStopTs_args getEmptyArgsInstance() {
+        return new scannerOpenWithStopTs_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerOpenWithStopTs_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes,resultHandler);
+      }
+    }
+
+    public static class scannerGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerGet_args, List<TRowResult>> {
+      public scannerGet() {
+        super("scannerGet");
+      }
+
+      public scannerGet_args getEmptyArgsInstance() {
+        return new scannerGet_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            scannerGet_result result = new scannerGet_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerGet_result result = new scannerGet_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerGet_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.scannerGet(args.id,resultHandler);
+      }
+    }
+
+    public static class scannerGetList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerGetList_args, List<TRowResult>> {
+      public scannerGetList() {
+        super("scannerGetList");
+      }
+
+      public scannerGetList_args getEmptyArgsInstance() {
+        return new scannerGetList_args();
+      }
+
+      public AsyncMethodCallback<List<TRowResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TRowResult>>() { 
+          public void onComplete(List<TRowResult> o) {
+            scannerGetList_result result = new scannerGetList_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerGetList_result result = new scannerGetList_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerGetList_args args, org.apache.thrift.async.AsyncMethodCallback<List<TRowResult>> resultHandler) throws TException {
+        iface.scannerGetList(args.id, args.nbRows,resultHandler);
+      }
+    }
+
+    public static class scannerClose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scannerClose_args, Void> {
+      public scannerClose() {
+        super("scannerClose");
+      }
+
+      public scannerClose_args getEmptyArgsInstance() {
+        return new scannerClose_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            scannerClose_result result = new scannerClose_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            scannerClose_result result = new scannerClose_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, scannerClose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.scannerClose(args.id,resultHandler);
+      }
+    }
+
+    public static class getRegionInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegionInfo_args, TRegionInfo> {
+      public getRegionInfo() {
+        super("getRegionInfo");
+      }
+
+      public getRegionInfo_args getEmptyArgsInstance() {
+        return new getRegionInfo_args();
+      }
+
+      public AsyncMethodCallback<TRegionInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<TRegionInfo>() { 
+          public void onComplete(TRegionInfo o) {
+            getRegionInfo_result result = new getRegionInfo_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRegionInfo_result result = new getRegionInfo_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRegionInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TRegionInfo> resultHandler) throws TException {
+        iface.getRegionInfo(args.row,resultHandler);
+      }
+    }
+
+    public static class append<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, append_args, List<TCell>> {
+      public append() {
+        super("append");
+      }
+
+      public append_args getEmptyArgsInstance() {
+        return new append_args();
+      }
+
+      public AsyncMethodCallback<List<TCell>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TCell>>() { 
+          public void onComplete(List<TCell> o) {
+            append_result result = new append_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            append_result result = new append_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, append_args args, org.apache.thrift.async.AsyncMethodCallback<List<TCell>> resultHandler) throws TException {
+        iface.append(args.append,resultHandler);
+      }
+    }
+
+    public static class checkAndPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAndPut_args, Boolean> {
+      public checkAndPut() {
+        super("checkAndPut");
+      }
+
+      public checkAndPut_args getEmptyArgsInstance() {
+        return new checkAndPut_args();
+      }
+
+      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Boolean>() { 
+          public void onComplete(Boolean o) {
+            checkAndPut_result result = new checkAndPut_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            checkAndPut_result result = new checkAndPut_result();
+            if (e instanceof IOError) {
+                        result.io = (IOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof IllegalArgument) {
+                        result.ia = (IllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, checkAndPut_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
+        iface.checkAndPut(args.tableName, args.row, args.column, args.value, args.mput, args.attributes,resultHandler);
+      }
+    }
+
+  }
+
+  public static class enableTable_args implements org.apache.thrift.TBase<enableTable_args, enableTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<enableTable_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enableTable_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -4907,7 +7526,7 @@ public class Hbase {
       ByteBuffer tableName)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
@@ -4937,19 +7556,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of the table
      */
     public enableTable_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public enableTable_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -5030,30 +7649,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(enableTable_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      enableTable_args typedOther = (enableTable_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -5082,7 +7701,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       sb.append(")");
@@ -5196,7 +7815,7 @@ public class Hbase {
 
   }
 
-  public static class enableTable_result implements org.apache.thrift.TBase<enableTable_result, enableTable_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class enableTable_result implements org.apache.thrift.TBase<enableTable_result, enableTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<enableTable_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enableTable_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -5391,30 +8010,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(enableTable_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      enableTable_result typedOther = (enableTable_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -5559,7 +8178,7 @@ public class Hbase {
 
   }
 
-  public static class disableTable_args implements org.apache.thrift.TBase<disableTable_args, disableTable_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class disableTable_args implements org.apache.thrift.TBase<disableTable_args, disableTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<disableTable_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableTable_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -5653,7 +8272,7 @@ public class Hbase {
       ByteBuffer tableName)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
@@ -5683,19 +8302,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of the table
      */
     public disableTable_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public disableTable_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -5776,30 +8395,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(disableTable_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      disableTable_args typedOther = (disableTable_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -5828,7 +8447,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       sb.append(")");
@@ -5942,7 +8561,7 @@ public class Hbase {
 
   }
 
-  public static class disableTable_result implements org.apache.thrift.TBase<disableTable_result, disableTable_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class disableTable_result implements org.apache.thrift.TBase<disableTable_result, disableTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<disableTable_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableTable_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -6137,30 +8756,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(disableTable_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      disableTable_result typedOther = (disableTable_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -6305,7 +8924,7 @@ public class Hbase {
 
   }
 
-  public static class isTableEnabled_args implements org.apache.thrift.TBase<isTableEnabled_args, isTableEnabled_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class isTableEnabled_args implements org.apache.thrift.TBase<isTableEnabled_args, isTableEnabled_args._Fields>, java.io.Serializable, Cloneable, Comparable<isTableEnabled_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTableEnabled_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -6399,7 +9018,7 @@ public class Hbase {
       ByteBuffer tableName)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
@@ -6429,19 +9048,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of the table to check
      */
     public isTableEnabled_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public isTableEnabled_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -6522,30 +9141,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(isTableEnabled_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      isTableEnabled_args typedOther = (isTableEnabled_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -6574,7 +9193,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       sb.append(")");
@@ -6688,7 +9307,7 @@ public class Hbase {
 
   }
 
-  public static class isTableEnabled_result implements org.apache.thrift.TBase<isTableEnabled_result, isTableEnabled_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class isTableEnabled_result implements org.apache.thrift.TBase<isTableEnabled_result, isTableEnabled_result._Fields>, java.io.Serializable, Cloneable, Comparable<isTableEnabled_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTableEnabled_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
@@ -6884,7 +9503,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Boolean.valueOf(isSuccess());
+        return isSuccess();
 
       case IO:
         return getIo();
@@ -6944,45 +9563,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(isTableEnabled_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      isTableEnabled_result typedOther = (isTableEnabled_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -7156,7 +9775,7 @@ public class Hbase {
 
   }
 
-  public static class compact_args implements org.apache.thrift.TBase<compact_args, compact_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class compact_args implements org.apache.thrift.TBase<compact_args, compact_args._Fields>, java.io.Serializable, Cloneable, Comparable<compact_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compact_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_OR_REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNameOrRegionName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -7244,7 +9863,7 @@ public class Hbase {
       ByteBuffer tableNameOrRegionName)
     {
       this();
-      this.tableNameOrRegionName = tableNameOrRegionName;
+      this.tableNameOrRegionName = org.apache.thrift.TBaseHelper.copyBinary(tableNameOrRegionName);
     }
 
     /**
@@ -7271,16 +9890,16 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableNameOrRegionName() {
-      return tableNameOrRegionName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableNameOrRegionName);
     }
 
     public compact_args setTableNameOrRegionName(byte[] tableNameOrRegionName) {
-      setTableNameOrRegionName(tableNameOrRegionName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableNameOrRegionName));
+      this.tableNameOrRegionName = tableNameOrRegionName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableNameOrRegionName, tableNameOrRegionName.length));
       return this;
     }
 
     public compact_args setTableNameOrRegionName(ByteBuffer tableNameOrRegionName) {
-      this.tableNameOrRegionName = tableNameOrRegionName;
+      this.tableNameOrRegionName = org.apache.thrift.TBaseHelper.copyBinary(tableNameOrRegionName);
       return this;
     }
 
@@ -7361,30 +9980,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableNameOrRegionName = true && (isSetTableNameOrRegionName());
-      builder.append(present_tableNameOrRegionName);
+      list.add(present_tableNameOrRegionName);
       if (present_tableNameOrRegionName)
-        builder.append(tableNameOrRegionName);
+        list.add(tableNameOrRegionName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(compact_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      compact_args typedOther = (compact_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableNameOrRegionName()).compareTo(typedOther.isSetTableNameOrRegionName());
+      lastComparison = Boolean.valueOf(isSetTableNameOrRegionName()).compareTo(other.isSetTableNameOrRegionName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableNameOrRegionName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNameOrRegionName, typedOther.tableNameOrRegionName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNameOrRegionName, other.tableNameOrRegionName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -7413,7 +10032,7 @@ public class Hbase {
       if (this.tableNameOrRegionName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableNameOrRegionName);
+        org.apache.thrift.TBaseHelper.toString(this.tableNameOrRegionName, sb);
       }
       first = false;
       sb.append(")");
@@ -7527,7 +10146,7 @@ public class Hbase {
 
   }
 
-  public static class compact_result implements org.apache.thrift.TBase<compact_result, compact_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class compact_result implements org.apache.thrift.TBase<compact_result, compact_result._Fields>, java.io.Serializable, Cloneable, Comparable<compact_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compact_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -7722,30 +10341,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(compact_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      compact_result typedOther = (compact_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -7890,7 +10509,7 @@ public class Hbase {
 
   }
 
-  public static class majorCompact_args implements org.apache.thrift.TBase<majorCompact_args, majorCompact_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class majorCompact_args implements org.apache.thrift.TBase<majorCompact_args, majorCompact_args._Fields>, java.io.Serializable, Cloneable, Comparable<majorCompact_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("majorCompact_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_OR_REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNameOrRegionName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -7978,7 +10597,7 @@ public class Hbase {
       ByteBuffer tableNameOrRegionName)
     {
       this();
-      this.tableNameOrRegionName = tableNameOrRegionName;
+      this.tableNameOrRegionName = org.apache.thrift.TBaseHelper.copyBinary(tableNameOrRegionName);
     }
 
     /**
@@ -8005,16 +10624,16 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableNameOrRegionName() {
-      return tableNameOrRegionName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableNameOrRegionName);
     }
 
     public majorCompact_args setTableNameOrRegionName(byte[] tableNameOrRegionName) {
-      setTableNameOrRegionName(tableNameOrRegionName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableNameOrRegionName));
+      this.tableNameOrRegionName = tableNameOrRegionName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableNameOrRegionName, tableNameOrRegionName.length));
       return this;
     }
 
     public majorCompact_args setTableNameOrRegionName(ByteBuffer tableNameOrRegionName) {
-      this.tableNameOrRegionName = tableNameOrRegionName;
+      this.tableNameOrRegionName = org.apache.thrift.TBaseHelper.copyBinary(tableNameOrRegionName);
       return this;
     }
 
@@ -8095,30 +10714,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableNameOrRegionName = true && (isSetTableNameOrRegionName());
-      builder.append(present_tableNameOrRegionName);
+      list.add(present_tableNameOrRegionName);
       if (present_tableNameOrRegionName)
-        builder.append(tableNameOrRegionName);
+        list.add(tableNameOrRegionName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(majorCompact_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      majorCompact_args typedOther = (majorCompact_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableNameOrRegionName()).compareTo(typedOther.isSetTableNameOrRegionName());
+      lastComparison = Boolean.valueOf(isSetTableNameOrRegionName()).compareTo(other.isSetTableNameOrRegionName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableNameOrRegionName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNameOrRegionName, typedOther.tableNameOrRegionName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNameOrRegionName, other.tableNameOrRegionName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -8147,7 +10766,7 @@ public class Hbase {
       if (this.tableNameOrRegionName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableNameOrRegionName);
+        org.apache.thrift.TBaseHelper.toString(this.tableNameOrRegionName, sb);
       }
       first = false;
       sb.append(")");
@@ -8261,7 +10880,7 @@ public class Hbase {
 
   }
 
-  public static class majorCompact_result implements org.apache.thrift.TBase<majorCompact_result, majorCompact_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class majorCompact_result implements org.apache.thrift.TBase<majorCompact_result, majorCompact_result._Fields>, java.io.Serializable, Cloneable, Comparable<majorCompact_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("majorCompact_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -8456,30 +11075,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(majorCompact_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      majorCompact_result typedOther = (majorCompact_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -8624,7 +11243,7 @@ public class Hbase {
 
   }
 
-  public static class getTableNames_args implements org.apache.thrift.TBase<getTableNames_args, getTableNames_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getTableNames_args implements org.apache.thrift.TBase<getTableNames_args, getTableNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTableNames_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTableNames_args");
 
 
@@ -8754,18 +11373,18 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getTableNames_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getTableNames_args typedOther = (getTableNames_args)other;
 
       return 0;
     }
@@ -8872,7 +11491,7 @@ public class Hbase {
 
   }
 
-  public static class getTableNames_result implements org.apache.thrift.TBase<getTableNames_result, getTableNames_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getTableNames_result implements org.apache.thrift.TBase<getTableNames_result, getTableNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTableNames_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTableNames_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -8978,7 +11597,7 @@ public class Hbase {
      */
     public getTableNames_result(getTableNames_result other) {
       if (other.isSetSuccess()) {
-        List<ByteBuffer> __this__success = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__success = new ArrayList<ByteBuffer>(other.success.size());
         for (ByteBuffer other_element : other.success) {
           __this__success.add(other_element);
         }
@@ -9146,45 +11765,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getTableNames_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getTableNames_result typedOther = (getTableNames_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -9213,7 +11832,7 @@ public class Hbase {
       if (this.success == null) {
         sb.append("null");
       } else {
-        sb.append(this.success);
+        org.apache.thrift.TBaseHelper.toString(this.success, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -9272,11 +11891,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                   struct.success = new ArrayList<ByteBuffer>(_list50.size);
-                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
+                  ByteBuffer _elem51;
+                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                   {
-                    ByteBuffer _elem52; // required
-                    _elem52 = iprot.readBinary();
-                    struct.success.add(_elem52);
+                    _elem51 = iprot.readBinary();
+                    struct.success.add(_elem51);
                   }
                   iprot.readListEnd();
                 }
@@ -9373,11 +11992,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.success = new ArrayList<ByteBuffer>(_list55.size);
-            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
+            ByteBuffer _elem56;
+            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
             {
-              ByteBuffer _elem57; // required
-              _elem57 = iprot.readBinary();
-              struct.success.add(_elem57);
+              _elem56 = iprot.readBinary();
+              struct.success.add(_elem56);
             }
           }
           struct.setSuccessIsSet(true);
@@ -9392,7 +12011,7 @@ public class Hbase {
 
   }
 
-  public static class getColumnDescriptors_args implements org.apache.thrift.TBase<getColumnDescriptors_args, getColumnDescriptors_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getColumnDescriptors_args implements org.apache.thrift.TBase<getColumnDescriptors_args, getColumnDescriptors_args._Fields>, java.io.Serializable, Cloneable, Comparable<getColumnDescriptors_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getColumnDescriptors_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -9486,7 +12105,7 @@ public class Hbase {
       ByteBuffer tableName)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
@@ -9516,19 +12135,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * table name
      */
     public getColumnDescriptors_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getColumnDescriptors_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -9609,30 +12228,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getColumnDescriptors_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getColumnDescriptors_args typedOther = (getColumnDescriptors_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -9661,7 +12280,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       sb.append(")");
@@ -9775,7 +12394,7 @@ public class Hbase {
 
   }
 
-  public static class getColumnDescriptors_result implements org.apache.thrift.TBase<getColumnDescriptors_result, getColumnDescriptors_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getColumnDescriptors_result implements org.apache.thrift.TBase<getColumnDescriptors_result, getColumnDescriptors_result._Fields>, java.io.Serializable, Cloneable, Comparable<getColumnDescriptors_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getColumnDescriptors_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
@@ -9882,7 +12501,7 @@ public class Hbase {
      */
     public getColumnDescriptors_result(getColumnDescriptors_result other) {
       if (other.isSetSuccess()) {
-        Map<ByteBuffer,ColumnDescriptor> __this__success = new HashMap<ByteBuffer,ColumnDescriptor>();
+        Map<ByteBuffer,ColumnDescriptor> __this__success = new HashMap<ByteBuffer,ColumnDescriptor>(other.success.size());
         for (Map.Entry<ByteBuffer, ColumnDescriptor> other_element : other.success.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -10054,45 +12673,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getColumnDescriptors_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getColumnDescriptors_result typedOther = (getColumnDescriptors_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -10180,14 +12799,14 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                   struct.success = new HashMap<ByteBuffer,ColumnDescriptor>(2*_map58.size);
-                  for (int _i59 = 0; _i59 < _map58.size; ++_i59)
+                  ByteBuffer _key59;
+                  ColumnDescriptor _val60;
+                  for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                   {
-                    ByteBuffer _key60; // required
-                    ColumnDescriptor _val61; // required
-                    _key60 = iprot.readBinary();
-                    _val61 = new ColumnDescriptor();
-                    _val61.read(iprot);
-                    struct.success.put(_key60, _val61);
+                    _key59 = iprot.readBinary();
+                    _val60 = new ColumnDescriptor();
+                    _val60.read(iprot);
+                    struct.success.put(_key59, _val60);
                   }
                   iprot.readMapEnd();
                 }
@@ -10286,14 +12905,14 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new HashMap<ByteBuffer,ColumnDescriptor>(2*_map64.size);
-            for (int _i65 = 0; _i65 < _map64.size; ++_i65)
+            ByteBuffer _key65;
+            ColumnDescriptor _val66;
+            for (int _i67 = 0; _i67 < _map64.size; ++_i67)
             {
-              ByteBuffer _key66; // required
-              ColumnDescriptor _val67; // required
-              _key66 = iprot.readBinary();
-              _val67 = new ColumnDescriptor();
-              _val67.read(iprot);
-              struct.success.put(_key66, _val67);
+              _key65 = iprot.readBinary();
+              _val66 = new ColumnDescriptor();
+              _val66.read(iprot);
+              struct.success.put(_key65, _val66);
             }
           }
           struct.setSuccessIsSet(true);
@@ -10308,7 +12927,7 @@ public class Hbase {
 
   }
 
-  public static class getTableRegions_args implements org.apache.thrift.TBase<getTableRegions_args, getTableRegions_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getTableRegions_args implements org.apache.thrift.TBase<getTableRegions_args, getTableRegions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTableRegions_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTableRegions_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -10402,7 +13021,7 @@ public class Hbase {
       ByteBuffer tableName)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
@@ -10432,19 +13051,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * table name
      */
     public getTableRegions_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getTableRegions_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -10525,30 +13144,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getTableRegions_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getTableRegions_args typedOther = (getTableRegions_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -10577,7 +13196,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       sb.append(")");
@@ -10691,7 +13310,7 @@ public class Hbase {
 
   }
 
-  public static class getTableRegions_result implements org.apache.thrift.TBase<getTableRegions_result, getTableRegions_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getTableRegions_result implements org.apache.thrift.TBase<getTableRegions_result, getTableRegions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTableRegions_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTableRegions_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -10797,7 +13416,7 @@ public class Hbase {
      */
     public getTableRegions_result(getTableRegions_result other) {
       if (other.isSetSuccess()) {
-        List<TRegionInfo> __this__success = new ArrayList<TRegionInfo>();
+        List<TRegionInfo> __this__success = new ArrayList<TRegionInfo>(other.success.size());
         for (TRegionInfo other_element : other.success) {
           __this__success.add(new TRegionInfo(other_element));
         }
@@ -10965,45 +13584,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getTableRegions_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getTableRegions_result typedOther = (getTableRegions_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -11091,12 +13710,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                   struct.success = new ArrayList<TRegionInfo>(_list68.size);
-                  for (int _i69 = 0; _i69 < _list68.size; ++_i69)
+                  TRegionInfo _elem69;
+                  for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                   {
-                    TRegionInfo _elem70; // required
-                    _elem70 = new TRegionInfo();
-                    _elem70.read(iprot);
-                    struct.success.add(_elem70);
+                    _elem69 = new TRegionInfo();
+                    _elem69.read(iprot);
+                    struct.success.add(_elem69);
                   }
                   iprot.readListEnd();
                 }
@@ -11193,12 +13812,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRegionInfo>(_list73.size);
-            for (int _i74 = 0; _i74 < _list73.size; ++_i74)
+            TRegionInfo _elem74;
+            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
             {
-              TRegionInfo _elem75; // required
-              _elem75 = new TRegionInfo();
-              _elem75.read(iprot);
-              struct.success.add(_elem75);
+              _elem74 = new TRegionInfo();
+              _elem74.read(iprot);
+              struct.success.add(_elem74);
             }
           }
           struct.setSuccessIsSet(true);
@@ -11213,7 +13832,7 @@ public class Hbase {
 
   }
 
-  public static class createTable_args implements org.apache.thrift.TBase<createTable_args, createTable_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class createTable_args implements org.apache.thrift.TBase<createTable_args, createTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTable_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTable_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -11322,7 +13941,7 @@ public class Hbase {
       List<ColumnDescriptor> columnFamilies)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.columnFamilies = columnFamilies;
     }
 
@@ -11334,7 +13953,7 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetColumnFamilies()) {
-        List<ColumnDescriptor> __this__columnFamilies = new ArrayList<ColumnDescriptor>();
+        List<ColumnDescriptor> __this__columnFamilies = new ArrayList<ColumnDescriptor>(other.columnFamilies.size());
         for (ColumnDescriptor other_element : other.columnFamilies) {
           __this__columnFamilies.add(new ColumnDescriptor(other_element));
         }
@@ -11361,19 +13980,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table to create
      */
     public createTable_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public createTable_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -11521,45 +14140,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_columnFamilies = true && (isSetColumnFamilies());
-      builder.append(present_columnFamilies);
+      list.add(present_columnFamilies);
       if (present_columnFamilies)
-        builder.append(columnFamilies);
+        list.add(columnFamilies);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(createTable_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      createTable_args typedOther = (createTable_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumnFamilies()).compareTo(typedOther.isSetColumnFamilies());
+      lastComparison = Boolean.valueOf(isSetColumnFamilies()).compareTo(other.isSetColumnFamilies());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumnFamilies()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFamilies, typedOther.columnFamilies);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFamilies, other.columnFamilies);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -11588,7 +14207,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -11655,12 +14274,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                   struct.columnFamilies = new ArrayList<ColumnDescriptor>(_list76.size);
-                  for (int _i77 = 0; _i77 < _list76.size; ++_i77)
+                  ColumnDescriptor _elem77;
+                  for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                   {
-                    ColumnDescriptor _elem78; // required
-                    _elem78 = new ColumnDescriptor();
-                    _elem78.read(iprot);
-                    struct.columnFamilies.add(_elem78);
+                    _elem77 = new ColumnDescriptor();
+                    _elem77.read(iprot);
+                    struct.columnFamilies.add(_elem77);
                   }
                   iprot.readListEnd();
                 }
@@ -11752,12 +14371,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.columnFamilies = new ArrayList<ColumnDescriptor>(_list81.size);
-            for (int _i82 = 0; _i82 < _list81.size; ++_i82)
+            ColumnDescriptor _elem82;
+            for (int _i83 = 0; _i83 < _list81.size; ++_i83)
             {
-              ColumnDescriptor _elem83; // required
-              _elem83 = new ColumnDescriptor();
-              _elem83.read(iprot);
-              struct.columnFamilies.add(_elem83);
+              _elem82 = new ColumnDescriptor();
+              _elem82.read(iprot);
+              struct.columnFamilies.add(_elem82);
             }
           }
           struct.setColumnFamiliesIsSet(true);
@@ -11767,7 +14386,7 @@ public class Hbase {
 
   }
 
-  public static class createTable_result implements org.apache.thrift.TBase<createTable_result, createTable_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class createTable_result implements org.apache.thrift.TBase<createTable_result, createTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTable_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTable_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -12080,60 +14699,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
       boolean present_exist = true && (isSetExist());
-      builder.append(present_exist);
+      list.add(present_exist);
       if (present_exist)
-        builder.append(exist);
+        list.add(exist);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(createTable_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      createTable_result typedOther = (createTable_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetExist()).compareTo(typedOther.isSetExist());
+      lastComparison = Boolean.valueOf(isSetExist()).compareTo(other.isSetExist());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetExist()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exist, typedOther.exist);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exist, other.exist);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -12344,7 +14963,7 @@ public class Hbase {
 
   }
 
-  public static class deleteTable_args implements org.apache.thrift.TBase<deleteTable_args, deleteTable_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteTable_args implements org.apache.thrift.TBase<deleteTable_args, deleteTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTable_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTable_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -12438,7 +15057,7 @@ public class Hbase {
       ByteBuffer tableName)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
@@ -12468,19 +15087,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table to delete
      */
     public deleteTable_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public deleteTable_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -12561,30 +15180,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteTable_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteTable_args typedOther = (deleteTable_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -12613,7 +15232,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       sb.append(")");
@@ -12727,7 +15346,7 @@ public class Hbase {
 
   }
 
-  public static class deleteTable_result implements org.apache.thrift.TBase<deleteTable_result, deleteTable_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteTable_result implements org.apache.thrift.TBase<deleteTable_result, deleteTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTable_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTable_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -12922,30 +15541,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteTable_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteTable_result typedOther = (deleteTable_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -13090,7 +15709,7 @@ public class Hbase {
 
   }
 
-  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -13228,9 +15847,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       this.attributes = attributes;
     }
 
@@ -13248,7 +15867,7 @@ public class Hbase {
         this.column = other.column;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -13285,19 +15904,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public get_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public get_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -13325,19 +15944,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public get_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public get_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -13365,19 +15984,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * column name
      */
     public get_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public get_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -13565,75 +16184,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(get_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_args typedOther = (get_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -13662,7 +16281,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -13670,7 +16289,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -13678,7 +16297,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -13761,13 +16380,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map84.size);
-                  for (int _i85 = 0; _i85 < _map84.size; ++_i85)
+                  ByteBuffer _key85;
+                  ByteBuffer _val86;
+                  for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                   {
-                    ByteBuffer _key86; // required
-                    ByteBuffer _val87; // required
-                    _key86 = iprot.readBinary();
-                    _val87 = iprot.readBinary();
-                    struct.attributes.put(_key86, _val87);
+                    _key85 = iprot.readBinary();
+                    _val86 = iprot.readBinary();
+                    struct.attributes.put(_key85, _val86);
                   }
                   iprot.readMapEnd();
                 }
@@ -13891,13 +16510,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map90.size);
-            for (int _i91 = 0; _i91 < _map90.size; ++_i91)
+            ByteBuffer _key91;
+            ByteBuffer _val92;
+            for (int _i93 = 0; _i93 < _map90.size; ++_i93)
             {
-              ByteBuffer _key92; // required
-              ByteBuffer _val93; // required
-              _key92 = iprot.readBinary();
-              _val93 = iprot.readBinary();
-              struct.attributes.put(_key92, _val93);
+              _key91 = iprot.readBinary();
+              _val92 = iprot.readBinary();
+              struct.attributes.put(_key91, _val92);
             }
           }
           struct.setAttributesIsSet(true);
@@ -13907,7 +16526,7 @@ public class Hbase {
 
   }
 
-  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -14013,7 +16632,7 @@ public class Hbase {
      */
     public get_result(get_result other) {
       if (other.isSetSuccess()) {
-        List<TCell> __this__success = new ArrayList<TCell>();
+        List<TCell> __this__success = new ArrayList<TCell>(other.success.size());
         for (TCell other_element : other.success) {
           __this__success.add(new TCell(other_element));
         }
@@ -14181,45 +16800,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(get_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_result typedOther = (get_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -14307,12 +16926,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                   struct.success = new ArrayList<TCell>(_list94.size);
-                  for (int _i95 = 0; _i95 < _list94.size; ++_i95)
+                  TCell _elem95;
+                  for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                   {
-                    TCell _elem96; // required
-                    _elem96 = new TCell();
-                    _elem96.read(iprot);
-                    struct.success.add(_elem96);
+                    _elem95 = new TCell();
+                    _elem95.read(iprot);
+                    struct.success.add(_elem95);
                   }
                   iprot.readListEnd();
                 }
@@ -14409,12 +17028,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TCell>(_list99.size);
-            for (int _i100 = 0; _i100 < _list99.size; ++_i100)
+            TCell _elem100;
+            for (int _i101 = 0; _i101 < _list99.size; ++_i101)
             {
-              TCell _elem101; // required
-              _elem101 = new TCell();
-              _elem101.read(iprot);
-              struct.success.add(_elem101);
+              _elem100 = new TCell();
+              _elem100.read(iprot);
+              struct.success.add(_elem100);
             }
           }
           struct.setSuccessIsSet(true);
@@ -14429,7 +17048,7 @@ public class Hbase {
 
   }
 
-  public static class getVer_args implements org.apache.thrift.TBase<getVer_args, getVer_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getVer_args implements org.apache.thrift.TBase<getVer_args, getVer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVer_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVer_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -14583,9 +17202,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       this.numVersions = numVersions;
       setNumVersionsIsSet(true);
       this.attributes = attributes;
@@ -14607,7 +17226,7 @@ public class Hbase {
       }
       this.numVersions = other.numVersions;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -14646,19 +17265,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getVer_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getVer_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -14686,19 +17305,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getVer_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getVer_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -14726,19 +17345,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * column name
      */
     public getVer_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public getVer_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -14884,7 +17503,7 @@ public class Hbase {
         return getColumn();
 
       case NUM_VERSIONS:
-        return Integer.valueOf(getNumVersions());
+        return getNumVersions();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -14977,90 +17596,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_numVersions = true;
-      builder.append(present_numVersions);
+      list.add(present_numVersions);
       if (present_numVersions)
-        builder.append(numVersions);
+        list.add(numVersions);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getVer_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getVer_args typedOther = (getVer_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNumVersions()).compareTo(typedOther.isSetNumVersions());
+      lastComparison = Boolean.valueOf(isSetNumVersions()).compareTo(other.isSetNumVersions());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetNumVersions()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numVersions, typedOther.numVersions);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numVersions, other.numVersions);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -15089,7 +17708,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -15097,7 +17716,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -15105,7 +17724,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -15202,13 +17821,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map102.size);
-                  for (int _i103 = 0; _i103 < _map102.size; ++_i103)
+                  ByteBuffer _key103;
+                  ByteBuffer _val104;
+                  for (int _i105 = 0; _i105 < _map102.size; ++_i105)
                   {
-                    ByteBuffer _key104; // required
-                    ByteBuffer _val105; // required
-                    _key104 = iprot.readBinary();
-                    _val105 = iprot.readBinary();
-                    struct.attributes.put(_key104, _val105);
+                    _key103 = iprot.readBinary();
+                    _val104 = iprot.readBinary();
+                    struct.attributes.put(_key103, _val104);
                   }
                   iprot.readMapEnd();
                 }
@@ -15345,13 +17964,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map108 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map108.size);
-            for (int _i109 = 0; _i109 < _map108.size; ++_i109)
+            ByteBuffer _key109;
+            ByteBuffer _val110;
+            for (int _i111 = 0; _i111 < _map108.size; ++_i111)
             {
-              ByteBuffer _key110; // required
-              ByteBuffer _val111; // required
-              _key110 = iprot.readBinary();
-              _val111 = iprot.readBinary();
-              struct.attributes.put(_key110, _val111);
+              _key109 = iprot.readBinary();
+              _val110 = iprot.readBinary();
+              struct.attributes.put(_key109, _val110);
             }
           }
           struct.setAttributesIsSet(true);
@@ -15361,7 +17980,7 @@ public class Hbase {
 
   }
 
-  public static class getVer_result implements org.apache.thrift.TBase<getVer_result, getVer_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getVer_result implements org.apache.thrift.TBase<getVer_result, getVer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVer_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVer_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -15467,7 +18086,7 @@ public class Hbase {
      */
     public getVer_result(getVer_result other) {
       if (other.isSetSuccess()) {
-        List<TCell> __this__success = new ArrayList<TCell>();
+        List<TCell> __this__success = new ArrayList<TCell>(other.success.size());
         for (TCell other_element : other.success) {
           __this__success.add(new TCell(other_element));
         }
@@ -15635,45 +18254,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getVer_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getVer_result typedOther = (getVer_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -15761,12 +18380,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                   struct.success = new ArrayList<TCell>(_list112.size);
-                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
+                  TCell _elem113;
+                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                   {
-                    TCell _elem114; // required
-                    _elem114 = new TCell();
-                    _elem114.read(iprot);
-                    struct.success.add(_elem114);
+                    _elem113 = new TCell();
+                    _elem113.read(iprot);
+                    struct.success.add(_elem113);
                   }
                   iprot.readListEnd();
                 }
@@ -15863,12 +18482,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TCell>(_list117.size);
-            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
+            TCell _elem118;
+            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
             {
-              TCell _elem119; // required
-              _elem119 = new TCell();
-              _elem119.read(iprot);
-              struct.success.add(_elem119);
+              _elem118 = new TCell();
+              _elem118.read(iprot);
+              struct.success.add(_elem118);
             }
           }
           struct.setSuccessIsSet(true);
@@ -15883,7 +18502,7 @@ public class Hbase {
 
   }
 
-  public static class getVerTs_args implements org.apache.thrift.TBase<getVerTs_args, getVerTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getVerTs_args implements org.apache.thrift.TBase<getVerTs_args, getVerTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVerTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVerTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -16052,9 +18671,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       this.timestamp = timestamp;
       setTimestampIsSet(true);
       this.numVersions = numVersions;
@@ -16079,7 +18698,7 @@ public class Hbase {
       this.timestamp = other.timestamp;
       this.numVersions = other.numVersions;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -16120,19 +18739,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getVerTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getVerTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -16160,19 +18779,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getVerTs_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getVerTs_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -16200,19 +18819,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * column name
      */
     public getVerTs_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public getVerTs_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -16395,10 +19014,10 @@ public class Hbase {
         return getColumn();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case NUM_VERSIONS:
-        return Integer.valueOf(getNumVersions());
+        return getNumVersions();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -16502,105 +19121,105 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_numVersions = true;
-      builder.append(present_numVersions);
+      list.add(present_numVersions);
       if (present_numVersions)
-        builder.append(numVersions);
+        list.add(numVersions);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getVerTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getVerTs_args typedOther = (getVerTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNumVersions()).compareTo(typedOther.isSetNumVersions());
+      lastComparison = Boolean.valueOf(isSetNumVersions()).compareTo(other.isSetNumVersions());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetNumVersions()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numVersions, typedOther.numVersions);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numVersions, other.numVersions);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -16629,7 +19248,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -16637,7 +19256,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -16645,7 +19264,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -16754,13 +19373,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map120.size);
-                  for (int _i121 = 0; _i121 < _map120.size; ++_i121)
+                  ByteBuffer _key121;
+                  ByteBuffer _val122;
+                  for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                   {
-                    ByteBuffer _key122; // required
-                    ByteBuffer _val123; // required
-                    _key122 = iprot.readBinary();
-                    _val123 = iprot.readBinary();
-                    struct.attributes.put(_key122, _val123);
+                    _key121 = iprot.readBinary();
+                    _val122 = iprot.readBinary();
+                    struct.attributes.put(_key121, _val122);
                   }
                   iprot.readMapEnd();
                 }
@@ -16910,13 +19529,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map126.size);
-            for (int _i127 = 0; _i127 < _map126.size; ++_i127)
+            ByteBuffer _key127;
+            ByteBuffer _val128;
+            for (int _i129 = 0; _i129 < _map126.size; ++_i129)
             {
-              ByteBuffer _key128; // required
-              ByteBuffer _val129; // required
-              _key128 = iprot.readBinary();
-              _val129 = iprot.readBinary();
-              struct.attributes.put(_key128, _val129);
+              _key127 = iprot.readBinary();
+              _val128 = iprot.readBinary();
+              struct.attributes.put(_key127, _val128);
             }
           }
           struct.setAttributesIsSet(true);
@@ -16926,7 +19545,7 @@ public class Hbase {
 
   }
 
-  public static class getVerTs_result implements org.apache.thrift.TBase<getVerTs_result, getVerTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getVerTs_result implements org.apache.thrift.TBase<getVerTs_result, getVerTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVerTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVerTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -17032,7 +19651,7 @@ public class Hbase {
      */
     public getVerTs_result(getVerTs_result other) {
       if (other.isSetSuccess()) {
-        List<TCell> __this__success = new ArrayList<TCell>();
+        List<TCell> __this__success = new ArrayList<TCell>(other.success.size());
         for (TCell other_element : other.success) {
           __this__success.add(new TCell(other_element));
         }
@@ -17200,45 +19819,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getVerTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getVerTs_result typedOther = (getVerTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -17326,12 +19945,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                   struct.success = new ArrayList<TCell>(_list130.size);
-                  for (int _i131 = 0; _i131 < _list130.size; ++_i131)
+                  TCell _elem131;
+                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                   {
-                    TCell _elem132; // required
-                    _elem132 = new TCell();
-                    _elem132.read(iprot);
-                    struct.success.add(_elem132);
+                    _elem131 = new TCell();
+                    _elem131.read(iprot);
+                    struct.success.add(_elem131);
                   }
                   iprot.readListEnd();
                 }
@@ -17428,12 +20047,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TCell>(_list135.size);
-            for (int _i136 = 0; _i136 < _list135.size; ++_i136)
+            TCell _elem136;
+            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
             {
-              TCell _elem137; // required
-              _elem137 = new TCell();
-              _elem137.read(iprot);
-              struct.success.add(_elem137);
+              _elem136 = new TCell();
+              _elem136.read(iprot);
+              struct.success.add(_elem136);
             }
           }
           struct.setSuccessIsSet(true);
@@ -17448,7 +20067,7 @@ public class Hbase {
 
   }
 
-  public static class getRow_args implements org.apache.thrift.TBase<getRow_args, getRow_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRow_args implements org.apache.thrift.TBase<getRow_args, getRow_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRow_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRow_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -17572,8 +20191,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.attributes = attributes;
     }
 
@@ -17588,7 +20207,7 @@ public class Hbase {
         this.row = other.row;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -17624,19 +20243,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getRow_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRow_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -17664,19 +20283,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getRow_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getRow_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -17842,60 +20461,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRow_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRow_args typedOther = (getRow_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -17924,7 +20543,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -17932,7 +20551,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -18007,13 +20626,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map138.size);
-                  for (int _i139 = 0; _i139 < _map138.size; ++_i139)
+                  ByteBuffer _key139;
+                  ByteBuffer _val140;
+                  for (int _i141 = 0; _i141 < _map138.size; ++_i141)
                   {
-                    ByteBuffer _key140; // required
-                    ByteBuffer _val141; // required
-                    _key140 = iprot.readBinary();
-                    _val141 = iprot.readBinary();
-                    struct.attributes.put(_key140, _val141);
+                    _key139 = iprot.readBinary();
+                    _val140 = iprot.readBinary();
+                    struct.attributes.put(_key139, _val140);
                   }
                   iprot.readMapEnd();
                 }
@@ -18122,13 +20741,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map144 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map144.size);
-            for (int _i145 = 0; _i145 < _map144.size; ++_i145)
+            ByteBuffer _key145;
+            ByteBuffer _val146;
+            for (int _i147 = 0; _i147 < _map144.size; ++_i147)
             {
-              ByteBuffer _key146; // required
-              ByteBuffer _val147; // required
-              _key146 = iprot.readBinary();
-              _val147 = iprot.readBinary();
-              struct.attributes.put(_key146, _val147);
+              _key145 = iprot.readBinary();
+              _val146 = iprot.readBinary();
+              struct.attributes.put(_key145, _val146);
             }
           }
           struct.setAttributesIsSet(true);
@@ -18138,7 +20757,7 @@ public class Hbase {
 
   }
 
-  public static class getRow_result implements org.apache.thrift.TBase<getRow_result, getRow_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRow_result implements org.apache.thrift.TBase<getRow_result, getRow_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRow_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRow_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -18244,7 +20863,7 @@ public class Hbase {
      */
     public getRow_result(getRow_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -18412,45 +21031,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRow_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRow_result typedOther = (getRow_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -18538,12 +21157,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list148.size);
-                  for (int _i149 = 0; _i149 < _list148.size; ++_i149)
+                  TRowResult _elem149;
+                  for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                   {
-                    TRowResult _elem150; // required
-                    _elem150 = new TRowResult();
-                    _elem150.read(iprot);
-                    struct.success.add(_elem150);
+                    _elem149 = new TRowResult();
+                    _elem149.read(iprot);
+                    struct.success.add(_elem149);
                   }
                   iprot.readListEnd();
                 }
@@ -18640,12 +21259,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list153.size);
-            for (int _i154 = 0; _i154 < _list153.size; ++_i154)
+            TRowResult _elem154;
+            for (int _i155 = 0; _i155 < _list153.size; ++_i155)
             {
-              TRowResult _elem155; // required
-              _elem155 = new TRowResult();
-              _elem155.read(iprot);
-              struct.success.add(_elem155);
+              _elem154 = new TRowResult();
+              _elem154.read(iprot);
+              struct.success.add(_elem154);
             }
           }
           struct.setSuccessIsSet(true);
@@ -18660,7 +21279,7 @@ public class Hbase {
 
   }
 
-  public static class getRowWithColumns_args implements org.apache.thrift.TBase<getRowWithColumns_args, getRowWithColumns_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowWithColumns_args implements org.apache.thrift.TBase<getRowWithColumns_args, getRowWithColumns_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRowWithColumns_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowWithColumns_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -18799,8 +21418,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.columns = columns;
       this.attributes = attributes;
     }
@@ -18816,14 +21435,14 @@ public class Hbase {
         this.row = other.row;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
         this.columns = __this__columns;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -18860,19 +21479,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getRowWithColumns_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRowWithColumns_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -18900,19 +21519,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getRowWithColumns_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getRowWithColumns_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -19145,75 +21764,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowWithColumns_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowWithColumns_args typedOther = (getRowWithColumns_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -19242,7 +21861,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -19250,7 +21869,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -19258,7 +21877,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -19333,11 +21952,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list156.size);
-                  for (int _i157 = 0; _i157 < _list156.size; ++_i157)
+                  ByteBuffer _elem157;
+                  for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                   {
-                    ByteBuffer _elem158; // required
-                    _elem158 = iprot.readBinary();
-                    struct.columns.add(_elem158);
+                    _elem157 = iprot.readBinary();
+                    struct.columns.add(_elem157);
                   }
                   iprot.readListEnd();
                 }
@@ -19351,13 +21970,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map159 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map159.size);
-                  for (int _i160 = 0; _i160 < _map159.size; ++_i160)
+                  ByteBuffer _key160;
+                  ByteBuffer _val161;
+                  for (int _i162 = 0; _i162 < _map159.size; ++_i162)
                   {
-                    ByteBuffer _key161; // required
-                    ByteBuffer _val162; // required
-                    _key161 = iprot.readBinary();
-                    _val162 = iprot.readBinary();
-                    struct.attributes.put(_key161, _val162);
+                    _key160 = iprot.readBinary();
+                    _val161 = iprot.readBinary();
+                    struct.attributes.put(_key160, _val161);
                   }
                   iprot.readMapEnd();
                 }
@@ -19490,11 +22109,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list167.size);
-            for (int _i168 = 0; _i168 < _list167.size; ++_i168)
+            ByteBuffer _elem168;
+            for (int _i169 = 0; _i169 < _list167.size; ++_i169)
             {
-              ByteBuffer _elem169; // required
-              _elem169 = iprot.readBinary();
-              struct.columns.add(_elem169);
+              _elem168 = iprot.readBinary();
+              struct.columns.add(_elem168);
             }
           }
           struct.setColumnsIsSet(true);
@@ -19503,13 +22122,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map170 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map170.size);
-            for (int _i171 = 0; _i171 < _map170.size; ++_i171)
+            ByteBuffer _key171;
+            ByteBuffer _val172;
+            for (int _i173 = 0; _i173 < _map170.size; ++_i173)
             {
-              ByteBuffer _key172; // required
-              ByteBuffer _val173; // required
-              _key172 = iprot.readBinary();
-              _val173 = iprot.readBinary();
-              struct.attributes.put(_key172, _val173);
+              _key171 = iprot.readBinary();
+              _val172 = iprot.readBinary();
+              struct.attributes.put(_key171, _val172);
             }
           }
           struct.setAttributesIsSet(true);
@@ -19519,7 +22138,7 @@ public class Hbase {
 
   }
 
-  public static class getRowWithColumns_result implements org.apache.thrift.TBase<getRowWithColumns_result, getRowWithColumns_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowWithColumns_result implements org.apache.thrift.TBase<getRowWithColumns_result, getRowWithColumns_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRowWithColumns_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowWithColumns_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -19625,7 +22244,7 @@ public class Hbase {
      */
     public getRowWithColumns_result(getRowWithColumns_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -19793,45 +22412,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowWithColumns_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowWithColumns_result typedOther = (getRowWithColumns_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -19919,12 +22538,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list174.size);
-                  for (int _i175 = 0; _i175 < _list174.size; ++_i175)
+                  TRowResult _elem175;
+                  for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                   {
-                    TRowResult _elem176; // required
-                    _elem176 = new TRowResult();
-                    _elem176.read(iprot);
-                    struct.success.add(_elem176);
+                    _elem175 = new TRowResult();
+                    _elem175.read(iprot);
+                    struct.success.add(_elem175);
                   }
                   iprot.readListEnd();
                 }
@@ -20021,12 +22640,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list179.size);
-            for (int _i180 = 0; _i180 < _list179.size; ++_i180)
+            TRowResult _elem180;
+            for (int _i181 = 0; _i181 < _list179.size; ++_i181)
             {
-              TRowResult _elem181; // required
-              _elem181 = new TRowResult();
-              _elem181.read(iprot);
-              struct.success.add(_elem181);
+              _elem180 = new TRowResult();
+              _elem180.read(iprot);
+              struct.success.add(_elem180);
             }
           }
           struct.setSuccessIsSet(true);
@@ -20041,7 +22660,7 @@ public class Hbase {
 
   }
 
-  public static class getRowTs_args implements org.apache.thrift.TBase<getRowTs_args, getRowTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowTs_args implements org.apache.thrift.TBase<getRowTs_args, getRowTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRowTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -20181,8 +22800,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.timestamp = timestamp;
       setTimestampIsSet(true);
       this.attributes = attributes;
@@ -20201,7 +22820,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -20239,19 +22858,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of the table
      */
     public getRowTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRowTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -20279,19 +22898,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getRowTs_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getRowTs_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -20426,7 +23045,7 @@ public class Hbase {
         return getRow();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -20508,75 +23127,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowTs_args typedOther = (getRowTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -20605,7 +23224,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -20613,7 +23232,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -20702,13 +23321,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map182 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map182.size);
-                  for (int _i183 = 0; _i183 < _map182.size; ++_i183)
+                  ByteBuffer _key183;
+                  ByteBuffer _val184;
+                  for (int _i185 = 0; _i185 < _map182.size; ++_i185)
                   {
-                    ByteBuffer _key184; // required
-                    ByteBuffer _val185; // required
-                    _key184 = iprot.readBinary();
-                    _val185 = iprot.readBinary();
-                    struct.attributes.put(_key184, _val185);
+                    _key183 = iprot.readBinary();
+                    _val184 = iprot.readBinary();
+                    struct.attributes.put(_key183, _val184);
                   }
                   iprot.readMapEnd();
                 }
@@ -20830,13 +23449,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map188.size);
-            for (int _i189 = 0; _i189 < _map188.size; ++_i189)
+            ByteBuffer _key189;
+            ByteBuffer _val190;
+            for (int _i191 = 0; _i191 < _map188.size; ++_i191)
             {
-              ByteBuffer _key190; // required
-              ByteBuffer _val191; // required
-              _key190 = iprot.readBinary();
-              _val191 = iprot.readBinary();
-              struct.attributes.put(_key190, _val191);
+              _key189 = iprot.readBinary();
+              _val190 = iprot.readBinary();
+              struct.attributes.put(_key189, _val190);
             }
           }
           struct.setAttributesIsSet(true);
@@ -20846,7 +23465,7 @@ public class Hbase {
 
   }
 
-  public static class getRowTs_result implements org.apache.thrift.TBase<getRowTs_result, getRowTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowTs_result implements org.apache.thrift.TBase<getRowTs_result, getRowTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRowTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -20952,7 +23571,7 @@ public class Hbase {
      */
     public getRowTs_result(getRowTs_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -21120,45 +23739,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowTs_result typedOther = (getRowTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -21246,12 +23865,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list192.size);
-                  for (int _i193 = 0; _i193 < _list192.size; ++_i193)
+                  TRowResult _elem193;
+                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                   {
-                    TRowResult _elem194; // required
-                    _elem194 = new TRowResult();
-                    _elem194.read(iprot);
-                    struct.success.add(_elem194);
+                    _elem193 = new TRowResult();
+                    _elem193.read(iprot);
+                    struct.success.add(_elem193);
                   }
                   iprot.readListEnd();
                 }
@@ -21348,12 +23967,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list197.size);
-            for (int _i198 = 0; _i198 < _list197.size; ++_i198)
+            TRowResult _elem198;
+            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
             {
-              TRowResult _elem199; // required
-              _elem199 = new TRowResult();
-              _elem199.read(iprot);
-              struct.success.add(_elem199);
+              _elem198 = new TRowResult();
+              _elem198.read(iprot);
+              struct.success.add(_elem198);
             }
           }
           struct.setSuccessIsSet(true);
@@ -21368,7 +23987,7 @@ public class Hbase {
 
   }
 
-  public static class getRowWithColumnsTs_args implements org.apache.thrift.TBase<getRowWithColumnsTs_args, getRowWithColumnsTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowWithColumnsTs_args implements org.apache.thrift.TBase<getRowWithColumnsTs_args, getRowWithColumnsTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRowWithColumnsTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowWithColumnsTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -21517,8 +24136,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.columns = columns;
       this.timestamp = timestamp;
       setTimestampIsSet(true);
@@ -21537,7 +24156,7 @@ public class Hbase {
         this.row = other.row;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
@@ -21545,7 +24164,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -21584,19 +24203,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getRowWithColumnsTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRowWithColumnsTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -21624,19 +24243,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getRowWithColumnsTs_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getRowWithColumnsTs_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -21821,7 +24440,7 @@ public class Hbase {
         return getColumns();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -21914,90 +24533,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowWithColumnsTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowWithColumnsTs_args typedOther = (getRowWithColumnsTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -22026,7 +24645,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -22034,7 +24653,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -22042,7 +24661,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -22123,11 +24742,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list200.size);
-                  for (int _i201 = 0; _i201 < _list200.size; ++_i201)
+                  ByteBuffer _elem201;
+                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                   {
-                    ByteBuffer _elem202; // required
-                    _elem202 = iprot.readBinary();
-                    struct.columns.add(_elem202);
+                    _elem201 = iprot.readBinary();
+                    struct.columns.add(_elem201);
                   }
                   iprot.readListEnd();
                 }
@@ -22149,13 +24768,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map203 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map203.size);
-                  for (int _i204 = 0; _i204 < _map203.size; ++_i204)
+                  ByteBuffer _key204;
+                  ByteBuffer _val205;
+                  for (int _i206 = 0; _i206 < _map203.size; ++_i206)
                   {
-                    ByteBuffer _key205; // required
-                    ByteBuffer _val206; // required
-                    _key205 = iprot.readBinary();
-                    _val206 = iprot.readBinary();
-                    struct.attributes.put(_key205, _val206);
+                    _key204 = iprot.readBinary();
+                    _val205 = iprot.readBinary();
+                    struct.attributes.put(_key204, _val205);
                   }
                   iprot.readMapEnd();
                 }
@@ -22297,11 +24916,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list211 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list211.size);
-            for (int _i212 = 0; _i212 < _list211.size; ++_i212)
+            ByteBuffer _elem212;
+            for (int _i213 = 0; _i213 < _list211.size; ++_i213)
             {
-              ByteBuffer _elem213; // required
-              _elem213 = iprot.readBinary();
-              struct.columns.add(_elem213);
+              _elem212 = iprot.readBinary();
+              struct.columns.add(_elem212);
             }
           }
           struct.setColumnsIsSet(true);
@@ -22314,13 +24933,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map214 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map214.size);
-            for (int _i215 = 0; _i215 < _map214.size; ++_i215)
+            ByteBuffer _key215;
+            ByteBuffer _val216;
+            for (int _i217 = 0; _i217 < _map214.size; ++_i217)
             {
-              ByteBuffer _key216; // required
-              ByteBuffer _val217; // required
-              _key216 = iprot.readBinary();
-              _val217 = iprot.readBinary();
-              struct.attributes.put(_key216, _val217);
+              _key215 = iprot.readBinary();
+              _val216 = iprot.readBinary();
+              struct.attributes.put(_key215, _val216);
             }
           }
           struct.setAttributesIsSet(true);
@@ -22330,7 +24949,7 @@ public class Hbase {
 
   }
 
-  public static class getRowWithColumnsTs_result implements org.apache.thrift.TBase<getRowWithColumnsTs_result, getRowWithColumnsTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowWithColumnsTs_result implements org.apache.thrift.TBase<getRowWithColumnsTs_result, getRowWithColumnsTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRowWithColumnsTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowWithColumnsTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -22436,7 +25055,7 @@ public class Hbase {
      */
     public getRowWithColumnsTs_result(getRowWithColumnsTs_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -22604,45 +25223,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowWithColumnsTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowWithColumnsTs_result typedOther = (getRowWithColumnsTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -22730,12 +25349,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list218.size);
-                  for (int _i219 = 0; _i219 < _list218.size; ++_i219)
+                  TRowResult _elem219;
+                  for (int _i220 = 0; _i220 < _list218.size; ++_i220)
                   {
-                    TRowResult _elem220; // required
-                    _elem220 = new TRowResult();
-                    _elem220.read(iprot);
-                    struct.success.add(_elem220);
+                    _elem219 = new TRowResult();
+                    _elem219.read(iprot);
+                    struct.success.add(_elem219);
                   }
                   iprot.readListEnd();
                 }
@@ -22832,12 +25451,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list223 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list223.size);
-            for (int _i224 = 0; _i224 < _list223.size; ++_i224)
+            TRowResult _elem224;
+            for (int _i225 = 0; _i225 < _list223.size; ++_i225)
             {
-              TRowResult _elem225; // required
-              _elem225 = new TRowResult();
-              _elem225.read(iprot);
-              struct.success.add(_elem225);
+              _elem224 = new TRowResult();
+              _elem224.read(iprot);
+              struct.success.add(_elem224);
             }
           }
           struct.setSuccessIsSet(true);
@@ -22852,7 +25471,7 @@ public class Hbase {
 
   }
 
-  public static class getRows_args implements org.apache.thrift.TBase<getRows_args, getRows_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRows_args implements org.apache.thrift.TBase<getRows_args, getRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRows_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRows_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -22977,7 +25596,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.rows = rows;
       this.attributes = attributes;
     }
@@ -22990,14 +25609,14 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetRows()) {
-        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>(other.rows.size());
         for (ByteBuffer other_element : other.rows) {
           __this__rows.add(other_element);
         }
         this.rows = __this__rows;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -23033,19 +25652,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getRows_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRows_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -23256,60 +25875,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_rows = true && (isSetRows());
-      builder.append(present_rows);
+      list.add(present_rows);
       if (present_rows)
-        builder.append(rows);
+        list.add(rows);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRows_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRows_args typedOther = (getRows_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRows()).compareTo(typedOther.isSetRows());
+      lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, typedOther.rows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -23338,7 +25957,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -23346,7 +25965,7 @@ public class Hbase {
       if (this.rows == null) {
         sb.append("null");
       } else {
-        sb.append(this.rows);
+        org.apache.thrift.TBaseHelper.toString(this.rows, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -23413,11 +26032,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                   struct.rows = new ArrayList<ByteBuffer>(_list226.size);
-                  for (int _i227 = 0; _i227 < _list226.size; ++_i227)
+                  ByteBuffer _elem227;
+                  for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                   {
-                    ByteBuffer _elem228; // required
-                    _elem228 = iprot.readBinary();
-                    struct.rows.add(_elem228);
+                    _elem227 = iprot.readBinary();
+                    struct.rows.add(_elem227);
                   }
                   iprot.readListEnd();
                 }
@@ -23431,13 +26050,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map229 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map229.size);
-                  for (int _i230 = 0; _i230 < _map229.size; ++_i230)
+                  ByteBuffer _key230;
+                  ByteBuffer _val231;
+                  for (int _i232 = 0; _i232 < _map229.size; ++_i232)
                   {
-                    ByteBuffer _key231; // required
-                    ByteBuffer _val232; // required
-                    _key231 = iprot.readBinary();
-                    _val232 = iprot.readBinary();
-                    struct.attributes.put(_key231, _val232);
+                    _key230 = iprot.readBinary();
+                    _val231 = iprot.readBinary();
+                    struct.attributes.put(_key230, _val231);
                   }
                   iprot.readMapEnd();
                 }
@@ -23555,11 +26174,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.rows = new ArrayList<ByteBuffer>(_list237.size);
-            for (int _i238 = 0; _i238 < _list237.size; ++_i238)
+            ByteBuffer _elem238;
+            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
             {
-              ByteBuffer _elem239; // required
-              _elem239 = iprot.readBinary();
-              struct.rows.add(_elem239);
+              _elem238 = iprot.readBinary();
+              struct.rows.add(_elem238);
             }
           }
           struct.setRowsIsSet(true);
@@ -23568,13 +26187,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map240 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map240.size);
-            for (int _i241 = 0; _i241 < _map240.size; ++_i241)
+            ByteBuffer _key241;
+            ByteBuffer _val242;
+            for (int _i243 = 0; _i243 < _map240.size; ++_i243)
             {
-              ByteBuffer _key242; // required
-              ByteBuffer _val243; // required
-              _key242 = iprot.readBinary();
-              _val243 = iprot.readBinary();
-              struct.attributes.put(_key242, _val243);
+              _key241 = iprot.readBinary();
+              _val242 = iprot.readBinary();
+              struct.attributes.put(_key241, _val242);
             }
           }
           struct.setAttributesIsSet(true);
@@ -23584,7 +26203,7 @@ public class Hbase {
 
   }
 
-  public static class getRows_result implements org.apache.thrift.TBase<getRows_result, getRows_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRows_result implements org.apache.thrift.TBase<getRows_result, getRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRows_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRows_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -23690,7 +26309,7 @@ public class Hbase {
      */
     public getRows_result(getRows_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -23858,45 +26477,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRows_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRows_result typedOther = (getRows_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -23984,12 +26603,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list244.size);
-                  for (int _i245 = 0; _i245 < _list244.size; ++_i245)
+                  TRowResult _elem245;
+                  for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                   {
-                    TRowResult _elem246; // required
-                    _elem246 = new TRowResult();
-                    _elem246.read(iprot);
-                    struct.success.add(_elem246);
+                    _elem245 = new TRowResult();
+                    _elem245.read(iprot);
+                    struct.success.add(_elem245);
                   }
                   iprot.readListEnd();
                 }
@@ -24086,12 +26705,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list249 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list249.size);
-            for (int _i250 = 0; _i250 < _list249.size; ++_i250)
+            TRowResult _elem250;
+            for (int _i251 = 0; _i251 < _list249.size; ++_i251)
             {
-              TRowResult _elem251; // required
-              _elem251 = new TRowResult();
-              _elem251.read(iprot);
-              struct.success.add(_elem251);
+              _elem250 = new TRowResult();
+              _elem250.read(iprot);
+              struct.success.add(_elem250);
             }
           }
           struct.setSuccessIsSet(true);
@@ -24106,7 +26725,7 @@ public class Hbase {
 
   }
 
-  public static class getRowsWithColumns_args implements org.apache.thrift.TBase<getRowsWithColumns_args, getRowsWithColumns_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowsWithColumns_args implements org.apache.thrift.TBase<getRowsWithColumns_args, getRowsWithColumns_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRowsWithColumns_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowsWithColumns_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -24246,7 +26865,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.rows = rows;
       this.columns = columns;
       this.attributes = attributes;
@@ -24260,21 +26879,21 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetRows()) {
-        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>(other.rows.size());
         for (ByteBuffer other_element : other.rows) {
           __this__rows.add(other_element);
         }
         this.rows = __this__rows;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
         this.columns = __this__columns;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -24311,19 +26930,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getRowsWithColumns_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRowsWithColumns_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -24601,75 +27220,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_rows = true && (isSetRows());
-      builder.append(present_rows);
+      list.add(present_rows);
       if (present_rows)
-        builder.append(rows);
+        list.add(rows);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowsWithColumns_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowsWithColumns_args typedOther = (getRowsWithColumns_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRows()).compareTo(typedOther.isSetRows());
+      lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, typedOther.rows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -24698,7 +27317,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -24706,7 +27325,7 @@ public class Hbase {
       if (this.rows == null) {
         sb.append("null");
       } else {
-        sb.append(this.rows);
+        org.apache.thrift.TBaseHelper.toString(this.rows, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -24714,7 +27333,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -24781,11 +27400,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list252 = iprot.readListBegin();
                   struct.rows = new ArrayList<ByteBuffer>(_list252.size);
-                  for (int _i253 = 0; _i253 < _list252.size; ++_i253)
+                  ByteBuffer _elem253;
+                  for (int _i254 = 0; _i254 < _list252.size; ++_i254)
                   {
-                    ByteBuffer _elem254; // required
-                    _elem254 = iprot.readBinary();
-                    struct.rows.add(_elem254);
+                    _elem253 = iprot.readBinary();
+                    struct.rows.add(_elem253);
                   }
                   iprot.readListEnd();
                 }
@@ -24799,11 +27418,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list255 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list255.size);
-                  for (int _i256 = 0; _i256 < _list255.size; ++_i256)
+                  ByteBuffer _elem256;
+                  for (int _i257 = 0; _i257 < _list255.size; ++_i257)
                   {
-                    ByteBuffer _elem257; // required
-                    _elem257 = iprot.readBinary();
-                    struct.columns.add(_elem257);
+                    _elem256 = iprot.readBinary();
+                    struct.columns.add(_elem256);
                   }
                   iprot.readListEnd();
                 }
@@ -24817,13 +27436,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map258 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map258.size);
-                  for (int _i259 = 0; _i259 < _map258.size; ++_i259)
+                  ByteBuffer _key259;
+                  ByteBuffer _val260;
+                  for (int _i261 = 0; _i261 < _map258.size; ++_i261)
                   {
-                    ByteBuffer _key260; // required
-                    ByteBuffer _val261; // required
-                    _key260 = iprot.readBinary();
-                    _val261 = iprot.readBinary();
-                    struct.attributes.put(_key260, _val261);
+                    _key259 = iprot.readBinary();
+                    _val260 = iprot.readBinary();
+                    struct.attributes.put(_key259, _val260);
                   }
                   iprot.readMapEnd();
                 }
@@ -24965,11 +27584,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list268 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.rows = new ArrayList<ByteBuffer>(_list268.size);
-            for (int _i269 = 0; _i269 < _list268.size; ++_i269)
+            ByteBuffer _elem269;
+            for (int _i270 = 0; _i270 < _list268.size; ++_i270)
             {
-              ByteBuffer _elem270; // required
-              _elem270 = iprot.readBinary();
-              struct.rows.add(_elem270);
+              _elem269 = iprot.readBinary();
+              struct.rows.add(_elem269);
             }
           }
           struct.setRowsIsSet(true);
@@ -24978,11 +27597,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list271.size);
-            for (int _i272 = 0; _i272 < _list271.size; ++_i272)
+            ByteBuffer _elem272;
+            for (int _i273 = 0; _i273 < _list271.size; ++_i273)
             {
-              ByteBuffer _elem273; // required
-              _elem273 = iprot.readBinary();
-              struct.columns.add(_elem273);
+              _elem272 = iprot.readBinary();
+              struct.columns.add(_elem272);
             }
           }
           struct.setColumnsIsSet(true);
@@ -24991,13 +27610,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map274 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map274.size);
-            for (int _i275 = 0; _i275 < _map274.size; ++_i275)
+            ByteBuffer _key275;
+            ByteBuffer _val276;
+            for (int _i277 = 0; _i277 < _map274.size; ++_i277)
             {
-              ByteBuffer _key276; // required
-              ByteBuffer _val277; // required
-              _key276 = iprot.readBinary();
-              _val277 = iprot.readBinary();
-              struct.attributes.put(_key276, _val277);
+              _key275 = iprot.readBinary();
+              _val276 = iprot.readBinary();
+              struct.attributes.put(_key275, _val276);
             }
           }
           struct.setAttributesIsSet(true);
@@ -25007,7 +27626,7 @@ public class Hbase {
 
   }
 
-  public static class getRowsWithColumns_result implements org.apache.thrift.TBase<getRowsWithColumns_result, getRowsWithColumns_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowsWithColumns_result implements org.apache.thrift.TBase<getRowsWithColumns_result, getRowsWithColumns_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRowsWithColumns_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowsWithColumns_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -25113,7 +27732,7 @@ public class Hbase {
      */
     public getRowsWithColumns_result(getRowsWithColumns_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -25281,45 +27900,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowsWithColumns_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowsWithColumns_result typedOther = (getRowsWithColumns_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -25407,12 +28026,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list278 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list278.size);
-                  for (int _i279 = 0; _i279 < _list278.size; ++_i279)
+                  TRowResult _elem279;
+                  for (int _i280 = 0; _i280 < _list278.size; ++_i280)
                   {
-                    TRowResult _elem280; // required
-                    _elem280 = new TRowResult();
-                    _elem280.read(iprot);
-                    struct.success.add(_elem280);
+                    _elem279 = new TRowResult();
+                    _elem279.read(iprot);
+                    struct.success.add(_elem279);
                   }
                   iprot.readListEnd();
                 }
@@ -25509,12 +28128,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list283 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list283.size);
-            for (int _i284 = 0; _i284 < _list283.size; ++_i284)
+            TRowResult _elem284;
+            for (int _i285 = 0; _i285 < _list283.size; ++_i285)
             {
-              TRowResult _elem285; // required
-              _elem285 = new TRowResult();
-              _elem285.read(iprot);
-              struct.success.add(_elem285);
+              _elem284 = new TRowResult();
+              _elem284.read(iprot);
+              struct.success.add(_elem284);
             }
           }
           struct.setSuccessIsSet(true);
@@ -25529,7 +28148,7 @@ public class Hbase {
 
   }
 
-  public static class getRowsTs_args implements org.apache.thrift.TBase<getRowsTs_args, getRowsTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowsTs_args implements org.apache.thrift.TBase<getRowsTs_args, getRowsTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRowsTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowsTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -25670,7 +28289,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.rows = rows;
       this.timestamp = timestamp;
       setTimestampIsSet(true);
@@ -25686,7 +28305,7 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetRows()) {
-        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>(other.rows.size());
         for (ByteBuffer other_element : other.rows) {
           __this__rows.add(other_element);
         }
@@ -25694,7 +28313,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -25732,19 +28351,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of the table
      */
     public getRowsTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRowsTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -25924,7 +28543,7 @@ public class Hbase {
         return getRows();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -26006,75 +28625,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_rows = true && (isSetRows());
-      builder.append(present_rows);
+      list.add(present_rows);
       if (present_rows)
-        builder.append(rows);
+        list.add(rows);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowsTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowsTs_args typedOther = (getRowsTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRows()).compareTo(typedOther.isSetRows());
+      lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, typedOther.rows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -26103,7 +28722,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -26111,7 +28730,7 @@ public class Hbase {
       if (this.rows == null) {
         sb.append("null");
       } else {
-        sb.append(this.rows);
+        org.apache.thrift.TBaseHelper.toString(this.rows, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -26184,11 +28803,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
                   struct.rows = new ArrayList<ByteBuffer>(_list286.size);
-                  for (int _i287 = 0; _i287 < _list286.size; ++_i287)
+                  ByteBuffer _elem287;
+                  for (int _i288 = 0; _i288 < _list286.size; ++_i288)
                   {
-                    ByteBuffer _elem288; // required
-                    _elem288 = iprot.readBinary();
-                    struct.rows.add(_elem288);
+                    _elem287 = iprot.readBinary();
+                    struct.rows.add(_elem287);
                   }
                   iprot.readListEnd();
                 }
@@ -26210,13 +28829,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map289 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map289.size);
-                  for (int _i290 = 0; _i290 < _map289.size; ++_i290)
+                  ByteBuffer _key290;
+                  ByteBuffer _val291;
+                  for (int _i292 = 0; _i292 < _map289.size; ++_i292)
                   {
-                    ByteBuffer _key291; // required
-                    ByteBuffer _val292; // required
-                    _key291 = iprot.readBinary();
-                    _val292 = iprot.readBinary();
-                    struct.attributes.put(_key291, _val292);
+                    _key290 = iprot.readBinary();
+                    _val291 = iprot.readBinary();
+                    struct.attributes.put(_key290, _val291);
                   }
                   iprot.readMapEnd();
                 }
@@ -26343,11 +28962,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list297 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.rows = new ArrayList<ByteBuffer>(_list297.size);
-            for (int _i298 = 0; _i298 < _list297.size; ++_i298)
+            ByteBuffer _elem298;
+            for (int _i299 = 0; _i299 < _list297.size; ++_i299)
             {
-              ByteBuffer _elem299; // required
-              _elem299 = iprot.readBinary();
-              struct.rows.add(_elem299);
+              _elem298 = iprot.readBinary();
+              struct.rows.add(_elem298);
             }
           }
           struct.setRowsIsSet(true);
@@ -26360,13 +28979,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map300 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map300.size);
-            for (int _i301 = 0; _i301 < _map300.size; ++_i301)
+            ByteBuffer _key301;
+            ByteBuffer _val302;
+            for (int _i303 = 0; _i303 < _map300.size; ++_i303)
             {
-              ByteBuffer _key302; // required
-              ByteBuffer _val303; // required
-              _key302 = iprot.readBinary();
-              _val303 = iprot.readBinary();
-              struct.attributes.put(_key302, _val303);
+              _key301 = iprot.readBinary();
+              _val302 = iprot.readBinary();
+              struct.attributes.put(_key301, _val302);
             }
           }
           struct.setAttributesIsSet(true);
@@ -26376,7 +28995,7 @@ public class Hbase {
 
   }
 
-  public static class getRowsTs_result implements org.apache.thrift.TBase<getRowsTs_result, getRowsTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowsTs_result implements org.apache.thrift.TBase<getRowsTs_result, getRowsTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRowsTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowsTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -26482,7 +29101,7 @@ public class Hbase {
      */
     public getRowsTs_result(getRowsTs_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -26650,45 +29269,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowsTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowsTs_result typedOther = (getRowsTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -26776,12 +29395,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list304.size);
-                  for (int _i305 = 0; _i305 < _list304.size; ++_i305)
+                  TRowResult _elem305;
+                  for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                   {
-                    TRowResult _elem306; // required
-                    _elem306 = new TRowResult();
-                    _elem306.read(iprot);
-                    struct.success.add(_elem306);
+                    _elem305 = new TRowResult();
+                    _elem305.read(iprot);
+                    struct.success.add(_elem305);
                   }
                   iprot.readListEnd();
                 }
@@ -26878,12 +29497,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list309.size);
-            for (int _i310 = 0; _i310 < _list309.size; ++_i310)
+            TRowResult _elem310;
+            for (int _i311 = 0; _i311 < _list309.size; ++_i311)
             {
-              TRowResult _elem311; // required
-              _elem311 = new TRowResult();
-              _elem311.read(iprot);
-              struct.success.add(_elem311);
+              _elem310 = new TRowResult();
+              _elem310.read(iprot);
+              struct.success.add(_elem310);
             }
           }
           struct.setSuccessIsSet(true);
@@ -26898,7 +29517,7 @@ public class Hbase {
 
   }
 
-  public static class getRowsWithColumnsTs_args implements org.apache.thrift.TBase<getRowsWithColumnsTs_args, getRowsWithColumnsTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowsWithColumnsTs_args implements org.apache.thrift.TBase<getRowsWithColumnsTs_args, getRowsWithColumnsTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRowsWithColumnsTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowsWithColumnsTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -27048,7 +29667,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.rows = rows;
       this.columns = columns;
       this.timestamp = timestamp;
@@ -27065,14 +29684,14 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetRows()) {
-        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__rows = new ArrayList<ByteBuffer>(other.rows.size());
         for (ByteBuffer other_element : other.rows) {
           __this__rows.add(other_element);
         }
         this.rows = __this__rows;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
@@ -27080,7 +29699,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -27119,19 +29738,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public getRowsWithColumnsTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public getRowsWithColumnsTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -27361,7 +29980,7 @@ public class Hbase {
         return getColumns();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -27454,90 +30073,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_rows = true && (isSetRows());
-      builder.append(present_rows);
+      list.add(present_rows);
       if (present_rows)
-        builder.append(rows);
+        list.add(rows);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowsWithColumnsTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowsWithColumnsTs_args typedOther = (getRowsWithColumnsTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRows()).compareTo(typedOther.isSetRows());
+      lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, typedOther.rows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -27566,7 +30185,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -27574,7 +30193,7 @@ public class Hbase {
       if (this.rows == null) {
         sb.append("null");
       } else {
-        sb.append(this.rows);
+        org.apache.thrift.TBaseHelper.toString(this.rows, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -27582,7 +30201,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -27655,11 +30274,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list312 = iprot.readListBegin();
                   struct.rows = new ArrayList<ByteBuffer>(_list312.size);
-                  for (int _i313 = 0; _i313 < _list312.size; ++_i313)
+                  ByteBuffer _elem313;
+                  for (int _i314 = 0; _i314 < _list312.size; ++_i314)
                   {
-                    ByteBuffer _elem314; // required
-                    _elem314 = iprot.readBinary();
-                    struct.rows.add(_elem314);
+                    _elem313 = iprot.readBinary();
+                    struct.rows.add(_elem313);
                   }
                   iprot.readListEnd();
                 }
@@ -27673,11 +30292,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list315 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list315.size);
-                  for (int _i316 = 0; _i316 < _list315.size; ++_i316)
+                  ByteBuffer _elem316;
+                  for (int _i317 = 0; _i317 < _list315.size; ++_i317)
                   {
-                    ByteBuffer _elem317; // required
-                    _elem317 = iprot.readBinary();
-                    struct.columns.add(_elem317);
+                    _elem316 = iprot.readBinary();
+                    struct.columns.add(_elem316);
                   }
                   iprot.readListEnd();
                 }
@@ -27699,13 +30318,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map318 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map318.size);
-                  for (int _i319 = 0; _i319 < _map318.size; ++_i319)
+                  ByteBuffer _key319;
+                  ByteBuffer _val320;
+                  for (int _i321 = 0; _i321 < _map318.size; ++_i321)
                   {
-                    ByteBuffer _key320; // required
-                    ByteBuffer _val321; // required
-                    _key320 = iprot.readBinary();
-                    _val321 = iprot.readBinary();
-                    struct.attributes.put(_key320, _val321);
+                    _key319 = iprot.readBinary();
+                    _val320 = iprot.readBinary();
+                    struct.attributes.put(_key319, _val320);
                   }
                   iprot.readMapEnd();
                 }
@@ -27856,11 +30475,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list328 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.rows = new ArrayList<ByteBuffer>(_list328.size);
-            for (int _i329 = 0; _i329 < _list328.size; ++_i329)
+            ByteBuffer _elem329;
+            for (int _i330 = 0; _i330 < _list328.size; ++_i330)
             {
-              ByteBuffer _elem330; // required
-              _elem330 = iprot.readBinary();
-              struct.rows.add(_elem330);
+              _elem329 = iprot.readBinary();
+              struct.rows.add(_elem329);
             }
           }
           struct.setRowsIsSet(true);
@@ -27869,11 +30488,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list331 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list331.size);
-            for (int _i332 = 0; _i332 < _list331.size; ++_i332)
+            ByteBuffer _elem332;
+            for (int _i333 = 0; _i333 < _list331.size; ++_i333)
             {
-              ByteBuffer _elem333; // required
-              _elem333 = iprot.readBinary();
-              struct.columns.add(_elem333);
+              _elem332 = iprot.readBinary();
+              struct.columns.add(_elem332);
             }
           }
           struct.setColumnsIsSet(true);
@@ -27886,13 +30505,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map334 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map334.size);
-            for (int _i335 = 0; _i335 < _map334.size; ++_i335)
+            ByteBuffer _key335;
+            ByteBuffer _val336;
+            for (int _i337 = 0; _i337 < _map334.size; ++_i337)
             {
-              ByteBuffer _key336; // required
-              ByteBuffer _val337; // required
-              _key336 = iprot.readBinary();
-              _val337 = iprot.readBinary();
-              struct.attributes.put(_key336, _val337);
+              _key335 = iprot.readBinary();
+              _val336 = iprot.readBinary();
+              struct.attributes.put(_key335, _val336);
             }
           }
           struct.setAttributesIsSet(true);
@@ -27902,7 +30521,7 @@ public class Hbase {
 
   }
 
-  public static class getRowsWithColumnsTs_result implements org.apache.thrift.TBase<getRowsWithColumnsTs_result, getRowsWithColumnsTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRowsWithColumnsTs_result implements org.apache.thrift.TBase<getRowsWithColumnsTs_result, getRowsWithColumnsTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRowsWithColumnsTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRowsWithColumnsTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -28008,7 +30627,7 @@ public class Hbase {
      */
     public getRowsWithColumnsTs_result(getRowsWithColumnsTs_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -28176,45 +30795,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRowsWithColumnsTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRowsWithColumnsTs_result typedOther = (getRowsWithColumnsTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -28302,12 +30921,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list338 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list338.size);
-                  for (int _i339 = 0; _i339 < _list338.size; ++_i339)
+                  TRowResult _elem339;
+                  for (int _i340 = 0; _i340 < _list338.size; ++_i340)
                   {
-                    TRowResult _elem340; // required
-                    _elem340 = new TRowResult();
-                    _elem340.read(iprot);
-                    struct.success.add(_elem340);
+                    _elem339 = new TRowResult();
+                    _elem339.read(iprot);
+                    struct.success.add(_elem339);
                   }
                   iprot.readListEnd();
                 }
@@ -28404,12 +31023,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list343 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list343.size);
-            for (int _i344 = 0; _i344 < _list343.size; ++_i344)
+            TRowResult _elem344;
+            for (int _i345 = 0; _i345 < _list343.size; ++_i345)
             {
-              TRowResult _elem345; // required
-              _elem345 = new TRowResult();
-              _elem345.read(iprot);
-              struct.success.add(_elem345);
+              _elem344 = new TRowResult();
+              _elem344.read(iprot);
+              struct.success.add(_elem344);
             }
           }
           struct.setSuccessIsSet(true);
@@ -28424,7 +31043,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRow_args implements org.apache.thrift.TBase<mutateRow_args, mutateRow_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRow_args implements org.apache.thrift.TBase<mutateRow_args, mutateRow_args._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRow_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRow_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -28563,8 +31182,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.mutations = mutations;
       this.attributes = attributes;
     }
@@ -28580,14 +31199,14 @@ public class Hbase {
         this.row = other.row;
       }
       if (other.isSetMutations()) {
-        List<Mutation> __this__mutations = new ArrayList<Mutation>();
+        List<Mutation> __this__mutations = new ArrayList<Mutation>(other.mutations.size());
         for (Mutation other_element : other.mutations) {
           __this__mutations.add(new Mutation(other_element));
         }
         this.mutations = __this__mutations;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -28624,19 +31243,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public mutateRow_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public mutateRow_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -28664,19 +31283,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public mutateRow_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public mutateRow_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -28909,75 +31528,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_mutations = true && (isSetMutations());
-      builder.append(present_mutations);
+      list.add(present_mutations);
       if (present_mutations)
-        builder.append(mutations);
+        list.add(mutations);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRow_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRow_args typedOther = (mutateRow_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetMutations()).compareTo(typedOther.isSetMutations());
+      lastComparison = Boolean.valueOf(isSetMutations()).compareTo(other.isSetMutations());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetMutations()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, typedOther.mutations);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, other.mutations);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -29006,7 +31625,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -29014,7 +31633,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -29097,12 +31716,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list346 = iprot.readListBegin();
                   struct.mutations = new ArrayList<Mutation>(_list346.size);
-                  for (int _i347 = 0; _i347 < _list346.size; ++_i347)
+                  Mutation _elem347;
+                  for (int _i348 = 0; _i348 < _list346.size; ++_i348)
                   {
-                    Mutation _elem348; // required
-                    _elem348 = new Mutation();
-                    _elem348.read(iprot);
-                    struct.mutations.add(_elem348);
+                    _elem347 = new Mutation();
+                    _elem347.read(iprot);
+                    struct.mutations.add(_elem347);
                   }
                   iprot.readListEnd();
                 }
@@ -29116,13 +31735,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map349 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map349.size);
-                  for (int _i350 = 0; _i350 < _map349.size; ++_i350)
+                  ByteBuffer _key350;
+                  ByteBuffer _val351;
+                  for (int _i352 = 0; _i352 < _map349.size; ++_i352)
                   {
-                    ByteBuffer _key351; // required
-                    ByteBuffer _val352; // required
-                    _key351 = iprot.readBinary();
-                    _val352 = iprot.readBinary();
-                    struct.attributes.put(_key351, _val352);
+                    _key350 = iprot.readBinary();
+                    _val351 = iprot.readBinary();
+                    struct.attributes.put(_key350, _val351);
                   }
                   iprot.readMapEnd();
                 }
@@ -29255,12 +31874,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list357 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.mutations = new ArrayList<Mutation>(_list357.size);
-            for (int _i358 = 0; _i358 < _list357.size; ++_i358)
+            Mutation _elem358;
+            for (int _i359 = 0; _i359 < _list357.size; ++_i359)
             {
-              Mutation _elem359; // required
-              _elem359 = new Mutation();
-              _elem359.read(iprot);
-              struct.mutations.add(_elem359);
+              _elem358 = new Mutation();
+              _elem358.read(iprot);
+              struct.mutations.add(_elem358);
             }
           }
           struct.setMutationsIsSet(true);
@@ -29269,13 +31888,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map360 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map360.size);
-            for (int _i361 = 0; _i361 < _map360.size; ++_i361)
+            ByteBuffer _key361;
+            ByteBuffer _val362;
+            for (int _i363 = 0; _i363 < _map360.size; ++_i363)
             {
-              ByteBuffer _key362; // required
-              ByteBuffer _val363; // required
-              _key362 = iprot.readBinary();
-              _val363 = iprot.readBinary();
-              struct.attributes.put(_key362, _val363);
+              _key361 = iprot.readBinary();
+              _val362 = iprot.readBinary();
+              struct.attributes.put(_key361, _val362);
             }
           }
           struct.setAttributesIsSet(true);
@@ -29285,7 +31904,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRow_result implements org.apache.thrift.TBase<mutateRow_result, mutateRow_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRow_result implements org.apache.thrift.TBase<mutateRow_result, mutateRow_result._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRow_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRow_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -29539,45 +32158,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRow_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRow_result typedOther = (mutateRow_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -29755,7 +32374,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRowTs_args implements org.apache.thrift.TBase<mutateRowTs_args, mutateRowTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRowTs_args implements org.apache.thrift.TBase<mutateRowTs_args, mutateRowTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRowTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRowTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -29910,8 +32529,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.mutations = mutations;
       this.timestamp = timestamp;
       setTimestampIsSet(true);
@@ -29930,7 +32549,7 @@ public class Hbase {
         this.row = other.row;
       }
       if (other.isSetMutations()) {
-        List<Mutation> __this__mutations = new ArrayList<Mutation>();
+        List<Mutation> __this__mutations = new ArrayList<Mutation>(other.mutations.size());
         for (Mutation other_element : other.mutations) {
           __this__mutations.add(new Mutation(other_element));
         }
@@ -29938,7 +32557,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -29977,19 +32596,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public mutateRowTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public mutateRowTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -30017,19 +32636,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public mutateRowTs_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public mutateRowTs_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -30220,7 +32839,7 @@ public class Hbase {
         return getMutations();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -30313,90 +32932,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_mutations = true && (isSetMutations());
-      builder.append(present_mutations);
+      list.add(present_mutations);
       if (present_mutations)
-        builder.append(mutations);
+        list.add(mutations);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRowTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRowTs_args typedOther = (mutateRowTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetMutations()).compareTo(typedOther.isSetMutations());
+      lastComparison = Boolean.valueOf(isSetMutations()).compareTo(other.isSetMutations());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetMutations()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, typedOther.mutations);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, other.mutations);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -30425,7 +33044,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -30433,7 +33052,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -30522,12 +33141,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                   struct.mutations = new ArrayList<Mutation>(_list364.size);
-                  for (int _i365 = 0; _i365 < _list364.size; ++_i365)
+                  Mutation _elem365;
+                  for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                   {
-                    Mutation _elem366; // required
-                    _elem366 = new Mutation();
-                    _elem366.read(iprot);
-                    struct.mutations.add(_elem366);
+                    _elem365 = new Mutation();
+                    _elem365.read(iprot);
+                    struct.mutations.add(_elem365);
                   }
                   iprot.readListEnd();
                 }
@@ -30549,13 +33168,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map367 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map367.size);
-                  for (int _i368 = 0; _i368 < _map367.size; ++_i368)
+                  ByteBuffer _key368;
+                  ByteBuffer _val369;
+                  for (int _i370 = 0; _i370 < _map367.size; ++_i370)
                   {
-                    ByteBuffer _key369; // required
-                    ByteBuffer _val370; // required
-                    _key369 = iprot.readBinary();
-                    _val370 = iprot.readBinary();
-                    struct.attributes.put(_key369, _val370);
+                    _key368 = iprot.readBinary();
+                    _val369 = iprot.readBinary();
+                    struct.attributes.put(_key368, _val369);
                   }
                   iprot.readMapEnd();
                 }
@@ -30697,12 +33316,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list375 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.mutations = new ArrayList<Mutation>(_list375.size);
-            for (int _i376 = 0; _i376 < _list375.size; ++_i376)
+            Mutation _elem376;
+            for (int _i377 = 0; _i377 < _list375.size; ++_i377)
             {
-              Mutation _elem377; // required
-              _elem377 = new Mutation();
-              _elem377.read(iprot);
-              struct.mutations.add(_elem377);
+              _elem376 = new Mutation();
+              _elem376.read(iprot);
+              struct.mutations.add(_elem376);
             }
           }
           struct.setMutationsIsSet(true);
@@ -30715,13 +33334,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map378 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map378.size);
-            for (int _i379 = 0; _i379 < _map378.size; ++_i379)
+            ByteBuffer _key379;
+            ByteBuffer _val380;
+            for (int _i381 = 0; _i381 < _map378.size; ++_i381)
             {
-              ByteBuffer _key380; // required
-              ByteBuffer _val381; // required
-              _key380 = iprot.readBinary();
-              _val381 = iprot.readBinary();
-              struct.attributes.put(_key380, _val381);
+              _key379 = iprot.readBinary();
+              _val380 = iprot.readBinary();
+              struct.attributes.put(_key379, _val380);
             }
           }
           struct.setAttributesIsSet(true);
@@ -30731,7 +33350,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRowTs_result implements org.apache.thrift.TBase<mutateRowTs_result, mutateRowTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRowTs_result implements org.apache.thrift.TBase<mutateRowTs_result, mutateRowTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRowTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRowTs_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -30985,45 +33604,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRowTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRowTs_result typedOther = (mutateRowTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -31201,7 +33820,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRows_args implements org.apache.thrift.TBase<mutateRows_args, mutateRows_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRows_args implements org.apache.thrift.TBase<mutateRows_args, mutateRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRows_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRows_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -31326,7 +33945,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.rowBatches = rowBatches;
       this.attributes = attributes;
     }
@@ -31339,14 +33958,14 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetRowBatches()) {
-        List<BatchMutation> __this__rowBatches = new ArrayList<BatchMutation>();
+        List<BatchMutation> __this__rowBatches = new ArrayList<BatchMutation>(other.rowBatches.size());
         for (BatchMutation other_element : other.rowBatches) {
           __this__rowBatches.add(new BatchMutation(other_element));
         }
         this.rowBatches = __this__rowBatches;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -31382,19 +34001,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public mutateRows_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public mutateRows_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -31605,60 +34224,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_rowBatches = true && (isSetRowBatches());
-      builder.append(present_rowBatches);
+      list.add(present_rowBatches);
       if (present_rowBatches)
-        builder.append(rowBatches);
+        list.add(rowBatches);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRows_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRows_args typedOther = (mutateRows_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRowBatches()).compareTo(typedOther.isSetRowBatches());
+      lastComparison = Boolean.valueOf(isSetRowBatches()).compareTo(other.isSetRowBatches());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRowBatches()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowBatches, typedOther.rowBatches);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowBatches, other.rowBatches);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -31687,7 +34306,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -31762,12 +34381,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list382 = iprot.readListBegin();
                   struct.rowBatches = new ArrayList<BatchMutation>(_list382.size);
-                  for (int _i383 = 0; _i383 < _list382.size; ++_i383)
+                  BatchMutation _elem383;
+                  for (int _i384 = 0; _i384 < _list382.size; ++_i384)
                   {
-                    BatchMutation _elem384; // required
-                    _elem384 = new BatchMutation();
-                    _elem384.read(iprot);
-                    struct.rowBatches.add(_elem384);
+                    _elem383 = new BatchMutation();
+                    _elem383.read(iprot);
+                    struct.rowBatches.add(_elem383);
                   }
                   iprot.readListEnd();
                 }
@@ -31781,13 +34400,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map385 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map385.size);
-                  for (int _i386 = 0; _i386 < _map385.size; ++_i386)
+                  ByteBuffer _key386;
+                  ByteBuffer _val387;
+                  for (int _i388 = 0; _i388 < _map385.size; ++_i388)
                   {
-                    ByteBuffer _key387; // required
-                    ByteBuffer _val388; // required
-                    _key387 = iprot.readBinary();
-                    _val388 = iprot.readBinary();
-                    struct.attributes.put(_key387, _val388);
+                    _key386 = iprot.readBinary();
+                    _val387 = iprot.readBinary();
+                    struct.attributes.put(_key386, _val387);
                   }
                   iprot.readMapEnd();
                 }
@@ -31905,12 +34524,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list393 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.rowBatches = new ArrayList<BatchMutation>(_list393.size);
-            for (int _i394 = 0; _i394 < _list393.size; ++_i394)
+            BatchMutation _elem394;
+            for (int _i395 = 0; _i395 < _list393.size; ++_i395)
             {
-              BatchMutation _elem395; // required
-              _elem395 = new BatchMutation();
-              _elem395.read(iprot);
-              struct.rowBatches.add(_elem395);
+              _elem394 = new BatchMutation();
+              _elem394.read(iprot);
+              struct.rowBatches.add(_elem394);
             }
           }
           struct.setRowBatchesIsSet(true);
@@ -31919,13 +34538,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map396 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map396.size);
-            for (int _i397 = 0; _i397 < _map396.size; ++_i397)
+            ByteBuffer _key397;
+            ByteBuffer _val398;
+            for (int _i399 = 0; _i399 < _map396.size; ++_i399)
             {
-              ByteBuffer _key398; // required
-              ByteBuffer _val399; // required
-              _key398 = iprot.readBinary();
-              _val399 = iprot.readBinary();
-              struct.attributes.put(_key398, _val399);
+              _key397 = iprot.readBinary();
+              _val398 = iprot.readBinary();
+              struct.attributes.put(_key397, _val398);
             }
           }
           struct.setAttributesIsSet(true);
@@ -31935,7 +34554,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRows_result implements org.apache.thrift.TBase<mutateRows_result, mutateRows_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRows_result implements org.apache.thrift.TBase<mutateRows_result, mutateRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRows_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRows_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -32189,45 +34808,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRows_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRows_result typedOther = (mutateRows_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -32405,7 +35024,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRowsTs_args implements org.apache.thrift.TBase<mutateRowsTs_args, mutateRowsTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRowsTs_args implements org.apache.thrift.TBase<mutateRowsTs_args, mutateRowsTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRowsTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRowsTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -32546,7 +35165,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.rowBatches = rowBatches;
       this.timestamp = timestamp;
       setTimestampIsSet(true);
@@ -32562,7 +35181,7 @@ public class Hbase {
         this.tableName = other.tableName;
       }
       if (other.isSetRowBatches()) {
-        List<BatchMutation> __this__rowBatches = new ArrayList<BatchMutation>();
+        List<BatchMutation> __this__rowBatches = new ArrayList<BatchMutation>(other.rowBatches.size());
         for (BatchMutation other_element : other.rowBatches) {
           __this__rowBatches.add(new BatchMutation(other_element));
         }
@@ -32570,7 +35189,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -32608,19 +35227,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public mutateRowsTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public mutateRowsTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -32800,7 +35419,7 @@ public class Hbase {
         return getRowBatches();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -32882,75 +35501,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_rowBatches = true && (isSetRowBatches());
-      builder.append(present_rowBatches);
+      list.add(present_rowBatches);
       if (present_rowBatches)
-        builder.append(rowBatches);
+        list.add(rowBatches);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRowsTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRowsTs_args typedOther = (mutateRowsTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRowBatches()).compareTo(typedOther.isSetRowBatches());
+      lastComparison = Boolean.valueOf(isSetRowBatches()).compareTo(other.isSetRowBatches());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRowBatches()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowBatches, typedOther.rowBatches);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowBatches, other.rowBatches);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -32979,7 +35598,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -33060,12 +35679,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                   struct.rowBatches = new ArrayList<BatchMutation>(_list400.size);
-                  for (int _i401 = 0; _i401 < _list400.size; ++_i401)
+                  BatchMutation _elem401;
+                  for (int _i402 = 0; _i402 < _list400.size; ++_i402)
                   {
-                    BatchMutation _elem402; // required
-                    _elem402 = new BatchMutation();
-                    _elem402.read(iprot);
-                    struct.rowBatches.add(_elem402);
+                    _elem401 = new BatchMutation();
+                    _elem401.read(iprot);
+                    struct.rowBatches.add(_elem401);
                   }
                   iprot.readListEnd();
                 }
@@ -33087,13 +35706,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map403 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map403.size);
-                  for (int _i404 = 0; _i404 < _map403.size; ++_i404)
+                  ByteBuffer _key404;
+                  ByteBuffer _val405;
+                  for (int _i406 = 0; _i406 < _map403.size; ++_i406)
                   {
-                    ByteBuffer _key405; // required
-                    ByteBuffer _val406; // required
-                    _key405 = iprot.readBinary();
-                    _val406 = iprot.readBinary();
-                    struct.attributes.put(_key405, _val406);
+                    _key404 = iprot.readBinary();
+                    _val405 = iprot.readBinary();
+                    struct.attributes.put(_key404, _val405);
                   }
                   iprot.readMapEnd();
                 }
@@ -33220,12 +35839,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list411 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.rowBatches = new ArrayList<BatchMutation>(_list411.size);
-            for (int _i412 = 0; _i412 < _list411.size; ++_i412)
+            BatchMutation _elem412;
+            for (int _i413 = 0; _i413 < _list411.size; ++_i413)
             {
-              BatchMutation _elem413; // required
-              _elem413 = new BatchMutation();
-              _elem413.read(iprot);
-              struct.rowBatches.add(_elem413);
+              _elem412 = new BatchMutation();
+              _elem412.read(iprot);
+              struct.rowBatches.add(_elem412);
             }
           }
           struct.setRowBatchesIsSet(true);
@@ -33238,13 +35857,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map414 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map414.size);
-            for (int _i415 = 0; _i415 < _map414.size; ++_i415)
+            ByteBuffer _key415;
+            ByteBuffer _val416;
+            for (int _i417 = 0; _i417 < _map414.size; ++_i417)
             {
-              ByteBuffer _key416; // required
-              ByteBuffer _val417; // required
-              _key416 = iprot.readBinary();
-              _val417 = iprot.readBinary();
-              struct.attributes.put(_key416, _val417);
+              _key415 = iprot.readBinary();
+              _val416 = iprot.readBinary();
+              struct.attributes.put(_key415, _val416);
             }
           }
           struct.setAttributesIsSet(true);
@@ -33254,7 +35873,7 @@ public class Hbase {
 
   }
 
-  public static class mutateRowsTs_result implements org.apache.thrift.TBase<mutateRowsTs_result, mutateRowsTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRowsTs_result implements org.apache.thrift.TBase<mutateRowsTs_result, mutateRowsTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRowsTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRowsTs_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -33508,45 +36127,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRowsTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRowsTs_result typedOther = (mutateRowsTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -33724,7 +36343,7 @@ public class Hbase {
 
   }
 
-  public static class atomicIncrement_args implements org.apache.thrift.TBase<atomicIncrement_args, atomicIncrement_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class atomicIncrement_args implements org.apache.thrift.TBase<atomicIncrement_args, atomicIncrement_args._Fields>, java.io.Serializable, Cloneable, Comparable<atomicIncrement_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atomicIncrement_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -33862,9 +36481,9 @@ public class Hbase {
       long value)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       this.value = value;
       setValueIsSet(true);
     }
@@ -33908,19 +36527,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public atomicIncrement_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public atomicIncrement_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -33948,19 +36567,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row to increment
      */
     public atomicIncrement_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public atomicIncrement_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -33988,19 +36607,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * name of column
      */
     public atomicIncrement_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public atomicIncrement_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -34097,7 +36716,7 @@ public class Hbase {
         return getColumn();
 
       case VALUE:
-        return Long.valueOf(getValue());
+        return getValue();
 
       }
       throw new IllegalStateException();
@@ -34176,75 +36795,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_value = true;
-      builder.append(present_value);
+      list.add(present_value);
       if (present_value)
-        builder.append(value);
+        list.add(value);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(atomicIncrement_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      atomicIncrement_args typedOther = (atomicIncrement_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetValue()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -34273,7 +36892,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -34281,7 +36900,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -34289,7 +36908,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -34476,7 +37095,7 @@ public class Hbase {
 
   }
 
-  public static class atomicIncrement_result implements org.apache.thrift.TBase<atomicIncrement_result, atomicIncrement_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class atomicIncrement_result implements org.apache.thrift.TBase<atomicIncrement_result, atomicIncrement_result._Fields>, java.io.Serializable, Cloneable, Comparable<atomicIncrement_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atomicIncrement_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
@@ -34717,7 +37336,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Long.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -34791,60 +37410,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(atomicIncrement_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      atomicIncrement_result typedOther = (atomicIncrement_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -35051,7 +37670,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAll_args implements org.apache.thrift.TBase<deleteAll_args, deleteAll_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAll_args implements org.apache.thrift.TBase<deleteAll_args, deleteAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAll_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAll_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -35189,9 +37808,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       this.attributes = attributes;
     }
 
@@ -35209,7 +37828,7 @@ public class Hbase {
         this.column = other.column;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -35246,19 +37865,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public deleteAll_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public deleteAll_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -35286,19 +37905,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * Row to update
      */
     public deleteAll_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public deleteAll_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -35326,19 +37945,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * name of column whose value is to be deleted
      */
     public deleteAll_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public deleteAll_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -35526,75 +38145,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAll_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAll_args typedOther = (deleteAll_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -35623,7 +38242,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -35631,7 +38250,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -35639,7 +38258,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -35722,13 +38341,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map418 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map418.size);
-                  for (int _i419 = 0; _i419 < _map418.size; ++_i419)
+                  ByteBuffer _key419;
+                  ByteBuffer _val420;
+                  for (int _i421 = 0; _i421 < _map418.size; ++_i421)
                   {
-                    ByteBuffer _key420; // required
-                    ByteBuffer _val421; // required
-                    _key420 = iprot.readBinary();
-                    _val421 = iprot.readBinary();
-                    struct.attributes.put(_key420, _val421);
+                    _key419 = iprot.readBinary();
+                    _val420 = iprot.readBinary();
+                    struct.attributes.put(_key419, _val420);
                   }
                   iprot.readMapEnd();
                 }
@@ -35852,13 +38471,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map424 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map424.size);
-            for (int _i425 = 0; _i425 < _map424.size; ++_i425)
+            ByteBuffer _key425;
+            ByteBuffer _val426;
+            for (int _i427 = 0; _i427 < _map424.size; ++_i427)
             {
-              ByteBuffer _key426; // required
-              ByteBuffer _val427; // required
-              _key426 = iprot.readBinary();
-              _val427 = iprot.readBinary();
-              struct.attributes.put(_key426, _val427);
+              _key425 = iprot.readBinary();
+              _val426 = iprot.readBinary();
+              struct.attributes.put(_key425, _val426);
             }
           }
           struct.setAttributesIsSet(true);
@@ -35868,7 +38487,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAll_result implements org.apache.thrift.TBase<deleteAll_result, deleteAll_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAll_result implements org.apache.thrift.TBase<deleteAll_result, deleteAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAll_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAll_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -36063,30 +38682,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAll_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAll_result typedOther = (deleteAll_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -36231,7 +38850,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAllTs_args implements org.apache.thrift.TBase<deleteAllTs_args, deleteAllTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAllTs_args implements org.apache.thrift.TBase<deleteAllTs_args, deleteAllTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -36385,9 +39004,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       this.timestamp = timestamp;
       setTimestampIsSet(true);
       this.attributes = attributes;
@@ -36409,7 +39028,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -36448,19 +39067,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public deleteAllTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public deleteAllTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -36488,19 +39107,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * Row to update
      */
     public deleteAllTs_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public deleteAllTs_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -36528,19 +39147,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * name of column whose value is to be deleted
      */
     public deleteAllTs_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public deleteAllTs_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -36686,7 +39305,7 @@ public class Hbase {
         return getColumn();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -36779,90 +39398,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAllTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAllTs_args typedOther = (deleteAllTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -36891,7 +39510,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -36899,7 +39518,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -36907,7 +39526,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -37004,13 +39623,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map428 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map428.size);
-                  for (int _i429 = 0; _i429 < _map428.size; ++_i429)
+                  ByteBuffer _key429;
+                  ByteBuffer _val430;
+                  for (int _i431 = 0; _i431 < _map428.size; ++_i431)
                   {
-                    ByteBuffer _key430; // required
-                    ByteBuffer _val431; // required
-                    _key430 = iprot.readBinary();
-                    _val431 = iprot.readBinary();
-                    struct.attributes.put(_key430, _val431);
+                    _key429 = iprot.readBinary();
+                    _val430 = iprot.readBinary();
+                    struct.attributes.put(_key429, _val430);
                   }
                   iprot.readMapEnd();
                 }
@@ -37147,13 +39766,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map434 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map434.size);
-            for (int _i435 = 0; _i435 < _map434.size; ++_i435)
+            ByteBuffer _key435;
+            ByteBuffer _val436;
+            for (int _i437 = 0; _i437 < _map434.size; ++_i437)
             {
-              ByteBuffer _key436; // required
-              ByteBuffer _val437; // required
-              _key436 = iprot.readBinary();
-              _val437 = iprot.readBinary();
-              struct.attributes.put(_key436, _val437);
+              _key435 = iprot.readBinary();
+              _val436 = iprot.readBinary();
+              struct.attributes.put(_key435, _val436);
             }
           }
           struct.setAttributesIsSet(true);
@@ -37163,7 +39782,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAllTs_result implements org.apache.thrift.TBase<deleteAllTs_result, deleteAllTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAllTs_result implements org.apache.thrift.TBase<deleteAllTs_result, deleteAllTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllTs_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -37358,30 +39977,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAllTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAllTs_result typedOther = (deleteAllTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -37526,7 +40145,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAllRow_args implements org.apache.thrift.TBase<deleteAllRow_args, deleteAllRow_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAllRow_args implements org.apache.thrift.TBase<deleteAllRow_args, deleteAllRow_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllRow_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllRow_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -37650,8 +40269,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.attributes = attributes;
     }
 
@@ -37666,7 +40285,7 @@ public class Hbase {
         this.row = other.row;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -37702,19 +40321,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public deleteAllRow_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public deleteAllRow_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -37742,19 +40361,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * key of the row to be completely deleted.
      */
     public deleteAllRow_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public deleteAllRow_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -37920,60 +40539,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAllRow_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAllRow_args typedOther = (deleteAllRow_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -38002,7 +40621,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -38010,7 +40629,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -38085,13 +40704,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map438 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map438.size);
-                  for (int _i439 = 0; _i439 < _map438.size; ++_i439)
+                  ByteBuffer _key439;
+                  ByteBuffer _val440;
+                  for (int _i441 = 0; _i441 < _map438.size; ++_i441)
                   {
-                    ByteBuffer _key440; // required
-                    ByteBuffer _val441; // required
-                    _key440 = iprot.readBinary();
-                    _val441 = iprot.readBinary();
-                    struct.attributes.put(_key440, _val441);
+                    _key439 = iprot.readBinary();
+                    _val440 = iprot.readBinary();
+                    struct.attributes.put(_key439, _val440);
                   }
                   iprot.readMapEnd();
                 }
@@ -38200,13 +40819,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map444 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map444.size);
-            for (int _i445 = 0; _i445 < _map444.size; ++_i445)
+            ByteBuffer _key445;
+            ByteBuffer _val446;
+            for (int _i447 = 0; _i447 < _map444.size; ++_i447)
             {
-              ByteBuffer _key446; // required
-              ByteBuffer _val447; // required
-              _key446 = iprot.readBinary();
-              _val447 = iprot.readBinary();
-              struct.attributes.put(_key446, _val447);
+              _key445 = iprot.readBinary();
+              _val446 = iprot.readBinary();
+              struct.attributes.put(_key445, _val446);
             }
           }
           struct.setAttributesIsSet(true);
@@ -38216,7 +40835,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAllRow_result implements org.apache.thrift.TBase<deleteAllRow_result, deleteAllRow_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAllRow_result implements org.apache.thrift.TBase<deleteAllRow_result, deleteAllRow_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllRow_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllRow_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -38411,30 +41030,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAllRow_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAllRow_result typedOther = (deleteAllRow_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -38579,7 +41198,7 @@ public class Hbase {
 
   }
 
-  public static class increment_args implements org.apache.thrift.TBase<increment_args, increment_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class increment_args implements org.apache.thrift.TBase<increment_args, increment_args._Fields>, java.io.Serializable, Cloneable, Comparable<increment_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("increment_args");
 
     private static final org.apache.thrift.protocol.TField INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("increment", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -38786,30 +41405,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_increment = true && (isSetIncrement());
-      builder.append(present_increment);
+      list.add(present_increment);
       if (present_increment)
-        builder.append(increment);
+        list.add(increment);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(increment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      increment_args typedOther = (increment_args)other;
 
-      lastComparison = Boolean.valueOf(isSetIncrement()).compareTo(typedOther.isSetIncrement());
+      lastComparison = Boolean.valueOf(isSetIncrement()).compareTo(other.isSetIncrement());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIncrement()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.increment, typedOther.increment);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.increment, other.increment);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -38957,7 +41576,7 @@ public class Hbase {
 
   }
 
-  public static class increment_result implements org.apache.thrift.TBase<increment_result, increment_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class increment_result implements org.apache.thrift.TBase<increment_result, increment_result._Fields>, java.io.Serializable, Cloneable, Comparable<increment_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("increment_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -39152,30 +41771,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(increment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      increment_result typedOther = (increment_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -39320,7 +41939,7 @@ public class Hbase {
 
   }
 
-  public static class incrementRows_args implements org.apache.thrift.TBase<incrementRows_args, incrementRows_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class incrementRows_args implements org.apache.thrift.TBase<incrementRows_args, incrementRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<incrementRows_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrementRows_args");
 
     private static final org.apache.thrift.protocol.TField INCREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("increments", org.apache.thrift.protocol.TType.LIST, (short)1);
@@ -39423,7 +42042,7 @@ public class Hbase {
      */
     public incrementRows_args(incrementRows_args other) {
       if (other.isSetIncrements()) {
-        List<TIncrement> __this__increments = new ArrayList<TIncrement>();
+        List<TIncrement> __this__increments = new ArrayList<TIncrement>(other.increments.size());
         for (TIncrement other_element : other.increments) {
           __this__increments.add(new TIncrement(other_element));
         }
@@ -39547,30 +42166,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_increments = true && (isSetIncrements());
-      builder.append(present_increments);
+      list.add(present_increments);
       if (present_increments)
-        builder.append(increments);
+        list.add(increments);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(incrementRows_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      incrementRows_args typedOther = (incrementRows_args)other;
 
-      lastComparison = Boolean.valueOf(isSetIncrements()).compareTo(typedOther.isSetIncrements());
+      lastComparison = Boolean.valueOf(isSetIncrements()).compareTo(other.isSetIncrements());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIncrements()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.increments, typedOther.increments);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.increments, other.increments);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -39650,12 +42269,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list448 = iprot.readListBegin();
                   struct.increments = new ArrayList<TIncrement>(_list448.size);
-                  for (int _i449 = 0; _i449 < _list448.size; ++_i449)
+                  TIncrement _elem449;
+                  for (int _i450 = 0; _i450 < _list448.size; ++_i450)
                   {
-                    TIncrement _elem450; // required
-                    _elem450 = new TIncrement();
-                    _elem450.read(iprot);
-                    struct.increments.add(_elem450);
+                    _elem449 = new TIncrement();
+                    _elem449.read(iprot);
+                    struct.increments.add(_elem449);
                   }
                   iprot.readListEnd();
                 }
@@ -39732,12 +42351,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list453 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.increments = new ArrayList<TIncrement>(_list453.size);
-            for (int _i454 = 0; _i454 < _list453.size; ++_i454)
+            TIncrement _elem454;
+            for (int _i455 = 0; _i455 < _list453.size; ++_i455)
             {
-              TIncrement _elem455; // required
-              _elem455 = new TIncrement();
-              _elem455.read(iprot);
-              struct.increments.add(_elem455);
+              _elem454 = new TIncrement();
+              _elem454.read(iprot);
+              struct.increments.add(_elem454);
             }
           }
           struct.setIncrementsIsSet(true);
@@ -39747,7 +42366,7 @@ public class Hbase {
 
   }
 
-  public static class incrementRows_result implements org.apache.thrift.TBase<incrementRows_result, incrementRows_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class incrementRows_result implements org.apache.thrift.TBase<incrementRows_result, incrementRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<incrementRows_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrementRows_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -39942,30 +42561,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(incrementRows_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      incrementRows_result typedOther = (incrementRows_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -40110,7 +42729,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAllRowTs_args implements org.apache.thrift.TBase<deleteAllRowTs_args, deleteAllRowTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAllRowTs_args implements org.apache.thrift.TBase<deleteAllRowTs_args, deleteAllRowTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllRowTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllRowTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -40250,8 +42869,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.timestamp = timestamp;
       setTimestampIsSet(true);
       this.attributes = attributes;
@@ -40270,7 +42889,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -40308,19 +42927,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public deleteAllRowTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public deleteAllRowTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -40348,19 +42967,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * key of the row to be completely deleted.
      */
     public deleteAllRowTs_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public deleteAllRowTs_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -40495,7 +43114,7 @@ public class Hbase {
         return getRow();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -40577,75 +43196,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAllRowTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAllRowTs_args typedOther = (deleteAllRowTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -40674,7 +43293,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -40682,7 +43301,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -40771,13 +43390,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map456 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map456.size);
-                  for (int _i457 = 0; _i457 < _map456.size; ++_i457)
+                  ByteBuffer _key457;
+                  ByteBuffer _val458;
+                  for (int _i459 = 0; _i459 < _map456.size; ++_i459)
                   {
-                    ByteBuffer _key458; // required
-                    ByteBuffer _val459; // required
-                    _key458 = iprot.readBinary();
-                    _val459 = iprot.readBinary();
-                    struct.attributes.put(_key458, _val459);
+                    _key457 = iprot.readBinary();
+                    _val458 = iprot.readBinary();
+                    struct.attributes.put(_key457, _val458);
                   }
                   iprot.readMapEnd();
                 }
@@ -40899,13 +43518,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map462 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map462.size);
-            for (int _i463 = 0; _i463 < _map462.size; ++_i463)
+            ByteBuffer _key463;
+            ByteBuffer _val464;
+            for (int _i465 = 0; _i465 < _map462.size; ++_i465)
             {
-              ByteBuffer _key464; // required
-              ByteBuffer _val465; // required
-              _key464 = iprot.readBinary();
-              _val465 = iprot.readBinary();
-              struct.attributes.put(_key464, _val465);
+              _key463 = iprot.readBinary();
+              _val464 = iprot.readBinary();
+              struct.attributes.put(_key463, _val464);
             }
           }
           struct.setAttributesIsSet(true);
@@ -40915,7 +43534,7 @@ public class Hbase {
 
   }
 
-  public static class deleteAllRowTs_result implements org.apache.thrift.TBase<deleteAllRowTs_result, deleteAllRowTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteAllRowTs_result implements org.apache.thrift.TBase<deleteAllRowTs_result, deleteAllRowTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllRowTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllRowTs_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -41110,30 +43729,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteAllRowTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteAllRowTs_result typedOther = (deleteAllRowTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -41278,7 +43897,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithScan_args implements org.apache.thrift.TBase<scannerOpenWithScan_args, scannerOpenWithScan_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithScan_args implements org.apache.thrift.TBase<scannerOpenWithScan_args, scannerOpenWithScan_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithScan_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithScan_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -41402,7 +44021,7 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       this.scan = scan;
       this.attributes = attributes;
     }
@@ -41418,7 +44037,7 @@ public class Hbase {
         this.scan = new TScan(other.scan);
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -41454,19 +44073,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public scannerOpenWithScan_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public scannerOpenWithScan_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -41662,60 +44281,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_scan = true && (isSetScan());
-      builder.append(present_scan);
+      list.add(present_scan);
       if (present_scan)
-        builder.append(scan);
+        list.add(scan);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithScan_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithScan_args typedOther = (scannerOpenWithScan_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetScan()).compareTo(typedOther.isSetScan());
+      lastComparison = Boolean.valueOf(isSetScan()).compareTo(other.isSetScan());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetScan()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan, typedOther.scan);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan, other.scan);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -41744,7 +44363,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -41831,13 +44450,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map466 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map466.size);
-                  for (int _i467 = 0; _i467 < _map466.size; ++_i467)
+                  ByteBuffer _key467;
+                  ByteBuffer _val468;
+                  for (int _i469 = 0; _i469 < _map466.size; ++_i469)
                   {
-                    ByteBuffer _key468; // required
-                    ByteBuffer _val469; // required
-                    _key468 = iprot.readBinary();
-                    _val469 = iprot.readBinary();
-                    struct.attributes.put(_key468, _val469);
+                    _key467 = iprot.readBinary();
+                    _val468 = iprot.readBinary();
+                    struct.attributes.put(_key467, _val468);
                   }
                   iprot.readMapEnd();
                 }
@@ -41947,13 +44566,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map472 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map472.size);
-            for (int _i473 = 0; _i473 < _map472.size; ++_i473)
+            ByteBuffer _key473;
+            ByteBuffer _val474;
+            for (int _i475 = 0; _i475 < _map472.size; ++_i475)
             {
-              ByteBuffer _key474; // required
-              ByteBuffer _val475; // required
-              _key474 = iprot.readBinary();
-              _val475 = iprot.readBinary();
-              struct.attributes.put(_key474, _val475);
+              _key473 = iprot.readBinary();
+              _val474 = iprot.readBinary();
+              struct.attributes.put(_key473, _val474);
             }
           }
           struct.setAttributesIsSet(true);
@@ -41963,7 +44582,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithScan_result implements org.apache.thrift.TBase<scannerOpenWithScan_result, scannerOpenWithScan_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithScan_result implements org.apache.thrift.TBase<scannerOpenWithScan_result, scannerOpenWithScan_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithScan_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithScan_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -42159,7 +44778,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -42219,45 +44838,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithScan_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithScan_result typedOther = (scannerOpenWithScan_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -42431,7 +45050,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpen_args implements org.apache.thrift.TBase<scannerOpen_args, scannerOpen_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpen_args implements org.apache.thrift.TBase<scannerOpen_args, scannerOpen_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpen_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpen_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -42576,8 +45195,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.startRow = startRow;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
       this.columns = columns;
       this.attributes = attributes;
     }
@@ -42593,14 +45212,14 @@ public class Hbase {
         this.startRow = other.startRow;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
         this.columns = __this__columns;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -42637,19 +45256,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public scannerOpen_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public scannerOpen_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -42678,7 +45297,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStartRow() {
-      return startRow;
+      return org.apache.thrift.TBaseHelper.copyBinary(startRow);
     }
 
     /**
@@ -42686,12 +45305,12 @@ public class Hbase {
      * Send "" (empty string) to start at the first row.
      */
     public scannerOpen_args setStartRow(byte[] startRow) {
-      setStartRow(startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(startRow));
+      this.startRow = startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startRow, startRow.length));
       return this;
     }
 
     public scannerOpen_args setStartRow(ByteBuffer startRow) {
-      this.startRow = startRow;
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
       return this;
     }
 
@@ -42928,75 +45547,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_startRow = true && (isSetStartRow());
-      builder.append(present_startRow);
+      list.add(present_startRow);
       if (present_startRow)
-        builder.append(startRow);
+        list.add(startRow);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpen_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpen_args typedOther = (scannerOpen_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
+      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStartRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -43025,7 +45644,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -43033,7 +45652,7 @@ public class Hbase {
       if (this.startRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.startRow);
+        org.apache.thrift.TBaseHelper.toString(this.startRow, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -43041,7 +45660,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -43116,11 +45735,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list476 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list476.size);
-                  for (int _i477 = 0; _i477 < _list476.size; ++_i477)
+                  ByteBuffer _elem477;
+                  for (int _i478 = 0; _i478 < _list476.size; ++_i478)
                   {
-                    ByteBuffer _elem478; // required
-                    _elem478 = iprot.readBinary();
-                    struct.columns.add(_elem478);
+                    _elem477 = iprot.readBinary();
+                    struct.columns.add(_elem477);
                   }
                   iprot.readListEnd();
                 }
@@ -43134,13 +45753,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map479 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map479.size);
-                  for (int _i480 = 0; _i480 < _map479.size; ++_i480)
+                  ByteBuffer _key480;
+                  ByteBuffer _val481;
+                  for (int _i482 = 0; _i482 < _map479.size; ++_i482)
                   {
-                    ByteBuffer _key481; // required
-                    ByteBuffer _val482; // required
-                    _key481 = iprot.readBinary();
-                    _val482 = iprot.readBinary();
-                    struct.attributes.put(_key481, _val482);
+                    _key480 = iprot.readBinary();
+                    _val481 = iprot.readBinary();
+                    struct.attributes.put(_key480, _val481);
                   }
                   iprot.readMapEnd();
                 }
@@ -43273,11 +45892,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list487 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list487.size);
-            for (int _i488 = 0; _i488 < _list487.size; ++_i488)
+            ByteBuffer _elem488;
+            for (int _i489 = 0; _i489 < _list487.size; ++_i489)
             {
-              ByteBuffer _elem489; // required
-              _elem489 = iprot.readBinary();
-              struct.columns.add(_elem489);
+              _elem488 = iprot.readBinary();
+              struct.columns.add(_elem488);
             }
           }
           struct.setColumnsIsSet(true);
@@ -43286,13 +45905,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map490 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map490.size);
-            for (int _i491 = 0; _i491 < _map490.size; ++_i491)
+            ByteBuffer _key491;
+            ByteBuffer _val492;
+            for (int _i493 = 0; _i493 < _map490.size; ++_i493)
             {
-              ByteBuffer _key492; // required
-              ByteBuffer _val493; // required
-              _key492 = iprot.readBinary();
-              _val493 = iprot.readBinary();
-              struct.attributes.put(_key492, _val493);
+              _key491 = iprot.readBinary();
+              _val492 = iprot.readBinary();
+              struct.attributes.put(_key491, _val492);
             }
           }
           struct.setAttributesIsSet(true);
@@ -43302,7 +45921,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpen_result implements org.apache.thrift.TBase<scannerOpen_result, scannerOpen_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpen_result implements org.apache.thrift.TBase<scannerOpen_result, scannerOpen_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpen_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpen_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -43498,7 +46117,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -43558,45 +46177,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpen_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpen_result typedOther = (scannerOpen_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -43770,7 +46389,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithStop_args implements org.apache.thrift.TBase<scannerOpenWithStop_args, scannerOpenWithStop_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithStop_args implements org.apache.thrift.TBase<scannerOpenWithStop_args, scannerOpenWithStop_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithStop_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithStop_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -43931,9 +46550,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.startRow = startRow;
-      this.stopRow = stopRow;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
+      this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(stopRow);
       this.columns = columns;
       this.attributes = attributes;
     }
@@ -43952,14 +46571,14 @@ public class Hbase {
         this.stopRow = other.stopRow;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
         this.columns = __this__columns;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -43997,19 +46616,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public scannerOpenWithStop_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public scannerOpenWithStop_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -44038,7 +46657,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStartRow() {
-      return startRow;
+      return org.apache.thrift.TBaseHelper.copyBinary(startRow);
     }
 
     /**
@@ -44046,12 +46665,12 @@ public class Hbase {
      * Send "" (empty string) to start at the first row.
      */
     public scannerOpenWithStop_args setStartRow(byte[] startRow) {
-      setStartRow(startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(startRow));
+      this.startRow = startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startRow, startRow.length));
       return this;
     }
 
     public scannerOpenWithStop_args setStartRow(ByteBuffer startRow) {
-      this.startRow = startRow;
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
       return this;
     }
 
@@ -44080,7 +46699,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStopRow() {
-      return stopRow;
+      return org.apache.thrift.TBaseHelper.copyBinary(stopRow);
     }
 
     /**
@@ -44088,12 +46707,12 @@ public class Hbase {
      * scanner's results
      */
     public scannerOpenWithStop_args setStopRow(byte[] stopRow) {
-      setStopRow(stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(stopRow));
+      this.stopRow = stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(stopRow, stopRow.length));
       return this;
     }
 
     public scannerOpenWithStop_args setStopRow(ByteBuffer stopRow) {
-      this.stopRow = stopRow;
+      this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(stopRow);
       return this;
     }
 
@@ -44352,90 +46971,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_startRow = true && (isSetStartRow());
-      builder.append(present_startRow);
+      list.add(present_startRow);
       if (present_startRow)
-        builder.append(startRow);
+        list.add(startRow);
 
       boolean present_stopRow = true && (isSetStopRow());
-      builder.append(present_stopRow);
+      list.add(present_stopRow);
       if (present_stopRow)
-        builder.append(stopRow);
+        list.add(stopRow);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithStop_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithStop_args typedOther = (scannerOpenWithStop_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
+      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStartRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(typedOther.isSetStopRow());
+      lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(other.isSetStopRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStopRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, typedOther.stopRow);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, other.stopRow);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -44464,7 +47083,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -44472,7 +47091,7 @@ public class Hbase {
       if (this.startRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.startRow);
+        org.apache.thrift.TBaseHelper.toString(this.startRow, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -44480,7 +47099,7 @@ public class Hbase {
       if (this.stopRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.stopRow);
+        org.apache.thrift.TBaseHelper.toString(this.stopRow, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -44488,7 +47107,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -44571,11 +47190,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list494 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list494.size);
-                  for (int _i495 = 0; _i495 < _list494.size; ++_i495)
+                  ByteBuffer _elem495;
+                  for (int _i496 = 0; _i496 < _list494.size; ++_i496)
                   {
-                    ByteBuffer _elem496; // required
-                    _elem496 = iprot.readBinary();
-                    struct.columns.add(_elem496);
+                    _elem495 = iprot.readBinary();
+                    struct.columns.add(_elem495);
                   }
                   iprot.readListEnd();
                 }
@@ -44589,13 +47208,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map497 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map497.size);
-                  for (int _i498 = 0; _i498 < _map497.size; ++_i498)
+                  ByteBuffer _key498;
+                  ByteBuffer _val499;
+                  for (int _i500 = 0; _i500 < _map497.size; ++_i500)
                   {
-                    ByteBuffer _key499; // required
-                    ByteBuffer _val500; // required
-                    _key499 = iprot.readBinary();
-                    _val500 = iprot.readBinary();
-                    struct.attributes.put(_key499, _val500);
+                    _key498 = iprot.readBinary();
+                    _val499 = iprot.readBinary();
+                    struct.attributes.put(_key498, _val499);
                   }
                   iprot.readMapEnd();
                 }
@@ -44743,11 +47362,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list505.size);
-            for (int _i506 = 0; _i506 < _list505.size; ++_i506)
+            ByteBuffer _elem506;
+            for (int _i507 = 0; _i507 < _list505.size; ++_i507)
             {
-              ByteBuffer _elem507; // required
-              _elem507 = iprot.readBinary();
-              struct.columns.add(_elem507);
+              _elem506 = iprot.readBinary();
+              struct.columns.add(_elem506);
             }
           }
           struct.setColumnsIsSet(true);
@@ -44756,13 +47375,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map508 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map508.size);
-            for (int _i509 = 0; _i509 < _map508.size; ++_i509)
+            ByteBuffer _key509;
+            ByteBuffer _val510;
+            for (int _i511 = 0; _i511 < _map508.size; ++_i511)
             {
-              ByteBuffer _key510; // required
-              ByteBuffer _val511; // required
-              _key510 = iprot.readBinary();
-              _val511 = iprot.readBinary();
-              struct.attributes.put(_key510, _val511);
+              _key509 = iprot.readBinary();
+              _val510 = iprot.readBinary();
+              struct.attributes.put(_key509, _val510);
             }
           }
           struct.setAttributesIsSet(true);
@@ -44772,7 +47391,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithStop_result implements org.apache.thrift.TBase<scannerOpenWithStop_result, scannerOpenWithStop_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithStop_result implements org.apache.thrift.TBase<scannerOpenWithStop_result, scannerOpenWithStop_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithStop_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithStop_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -44968,7 +47587,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -45028,45 +47647,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithStop_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithStop_result typedOther = (scannerOpenWithStop_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -45240,7 +47859,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithPrefix_args implements org.apache.thrift.TBase<scannerOpenWithPrefix_args, scannerOpenWithPrefix_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithPrefix_args implements org.apache.thrift.TBase<scannerOpenWithPrefix_args, scannerOpenWithPrefix_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithPrefix_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithPrefix_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -45379,8 +47998,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.startAndPrefix = startAndPrefix;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.startAndPrefix = org.apache.thrift.TBaseHelper.copyBinary(startAndPrefix);
       this.columns = columns;
       this.attributes = attributes;
     }
@@ -45396,14 +48015,14 @@ public class Hbase {
         this.startAndPrefix = other.startAndPrefix;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
         this.columns = __this__columns;
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -45440,19 +48059,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public scannerOpenWithPrefix_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public scannerOpenWithPrefix_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -45480,19 +48099,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStartAndPrefix() {
-      return startAndPrefix;
+      return org.apache.thrift.TBaseHelper.copyBinary(startAndPrefix);
     }
 
     /**
      * the prefix (and thus start row) of the keys you want
      */
     public scannerOpenWithPrefix_args setStartAndPrefix(byte[] startAndPrefix) {
-      setStartAndPrefix(startAndPrefix == null ? (ByteBuffer)null : ByteBuffer.wrap(startAndPrefix));
+      this.startAndPrefix = startAndPrefix == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startAndPrefix, startAndPrefix.length));
       return this;
     }
 
     public scannerOpenWithPrefix_args setStartAndPrefix(ByteBuffer startAndPrefix) {
-      this.startAndPrefix = startAndPrefix;
+      this.startAndPrefix = org.apache.thrift.TBaseHelper.copyBinary(startAndPrefix);
       return this;
     }
 
@@ -45725,75 +48344,75 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_startAndPrefix = true && (isSetStartAndPrefix());
-      builder.append(present_startAndPrefix);
+      list.add(present_startAndPrefix);
       if (present_startAndPrefix)
-        builder.append(startAndPrefix);
+        list.add(startAndPrefix);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithPrefix_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithPrefix_args typedOther = (scannerOpenWithPrefix_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStartAndPrefix()).compareTo(typedOther.isSetStartAndPrefix());
+      lastComparison = Boolean.valueOf(isSetStartAndPrefix()).compareTo(other.isSetStartAndPrefix());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStartAndPrefix()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAndPrefix, typedOther.startAndPrefix);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAndPrefix, other.startAndPrefix);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -45822,7 +48441,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -45830,7 +48449,7 @@ public class Hbase {
       if (this.startAndPrefix == null) {
         sb.append("null");
       } else {
-        sb.append(this.startAndPrefix);
+        org.apache.thrift.TBaseHelper.toString(this.startAndPrefix, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -45838,7 +48457,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -45913,11 +48532,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list512 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list512.size);
-                  for (int _i513 = 0; _i513 < _list512.size; ++_i513)
+                  ByteBuffer _elem513;
+                  for (int _i514 = 0; _i514 < _list512.size; ++_i514)
                   {
-                    ByteBuffer _elem514; // required
-                    _elem514 = iprot.readBinary();
-                    struct.columns.add(_elem514);
+                    _elem513 = iprot.readBinary();
+                    struct.columns.add(_elem513);
                   }
                   iprot.readListEnd();
                 }
@@ -45931,13 +48550,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map515 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map515.size);
-                  for (int _i516 = 0; _i516 < _map515.size; ++_i516)
+                  ByteBuffer _key516;
+                  ByteBuffer _val517;
+                  for (int _i518 = 0; _i518 < _map515.size; ++_i518)
                   {
-                    ByteBuffer _key517; // required
-                    ByteBuffer _val518; // required
-                    _key517 = iprot.readBinary();
-                    _val518 = iprot.readBinary();
-                    struct.attributes.put(_key517, _val518);
+                    _key516 = iprot.readBinary();
+                    _val517 = iprot.readBinary();
+                    struct.attributes.put(_key516, _val517);
                   }
                   iprot.readMapEnd();
                 }
@@ -46070,11 +48689,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list523 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list523.size);
-            for (int _i524 = 0; _i524 < _list523.size; ++_i524)
+            ByteBuffer _elem524;
+            for (int _i525 = 0; _i525 < _list523.size; ++_i525)
             {
-              ByteBuffer _elem525; // required
-              _elem525 = iprot.readBinary();
-              struct.columns.add(_elem525);
+              _elem524 = iprot.readBinary();
+              struct.columns.add(_elem524);
             }
           }
           struct.setColumnsIsSet(true);
@@ -46083,13 +48702,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map526 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map526.size);
-            for (int _i527 = 0; _i527 < _map526.size; ++_i527)
+            ByteBuffer _key527;
+            ByteBuffer _val528;
+            for (int _i529 = 0; _i529 < _map526.size; ++_i529)
             {
-              ByteBuffer _key528; // required
-              ByteBuffer _val529; // required
-              _key528 = iprot.readBinary();
-              _val529 = iprot.readBinary();
-              struct.attributes.put(_key528, _val529);
+              _key527 = iprot.readBinary();
+              _val528 = iprot.readBinary();
+              struct.attributes.put(_key527, _val528);
             }
           }
           struct.setAttributesIsSet(true);
@@ -46099,7 +48718,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithPrefix_result implements org.apache.thrift.TBase<scannerOpenWithPrefix_result, scannerOpenWithPrefix_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithPrefix_result implements org.apache.thrift.TBase<scannerOpenWithPrefix_result, scannerOpenWithPrefix_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithPrefix_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithPrefix_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -46295,7 +48914,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -46355,45 +48974,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithPrefix_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithPrefix_result typedOther = (scannerOpenWithPrefix_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -46567,7 +49186,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenTs_args implements org.apache.thrift.TBase<scannerOpenTs_args, scannerOpenTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenTs_args implements org.apache.thrift.TBase<scannerOpenTs_args, scannerOpenTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -46728,8 +49347,8 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.startRow = startRow;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
       this.columns = columns;
       this.timestamp = timestamp;
       setTimestampIsSet(true);
@@ -46748,7 +49367,7 @@ public class Hbase {
         this.startRow = other.startRow;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
@@ -46756,7 +49375,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -46795,19 +49414,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public scannerOpenTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public scannerOpenTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -46836,7 +49455,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStartRow() {
-      return startRow;
+      return org.apache.thrift.TBaseHelper.copyBinary(startRow);
     }
 
     /**
@@ -46844,12 +49463,12 @@ public class Hbase {
      * Send "" (empty string) to start at the first row.
      */
     public scannerOpenTs_args setStartRow(byte[] startRow) {
-      setStartRow(startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(startRow));
+      this.startRow = startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startRow, startRow.length));
       return this;
     }
 
     public scannerOpenTs_args setStartRow(ByteBuffer startRow) {
-      this.startRow = startRow;
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
       return this;
     }
 
@@ -47044,7 +49663,7 @@ public class Hbase {
         return getColumns();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -47137,90 +49756,90 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_startRow = true && (isSetStartRow());
-      builder.append(present_startRow);
+      list.add(present_startRow);
       if (present_startRow)
-        builder.append(startRow);
+        list.add(startRow);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenTs_args typedOther = (scannerOpenTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
+      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStartRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -47249,7 +49868,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -47257,7 +49876,7 @@ public class Hbase {
       if (this.startRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.startRow);
+        org.apache.thrift.TBaseHelper.toString(this.startRow, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -47265,7 +49884,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -47346,11 +49965,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list530 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list530.size);
-                  for (int _i531 = 0; _i531 < _list530.size; ++_i531)
+                  ByteBuffer _elem531;
+                  for (int _i532 = 0; _i532 < _list530.size; ++_i532)
                   {
-                    ByteBuffer _elem532; // required
-                    _elem532 = iprot.readBinary();
-                    struct.columns.add(_elem532);
+                    _elem531 = iprot.readBinary();
+                    struct.columns.add(_elem531);
                   }
                   iprot.readListEnd();
                 }
@@ -47372,13 +49991,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map533 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map533.size);
-                  for (int _i534 = 0; _i534 < _map533.size; ++_i534)
+                  ByteBuffer _key534;
+                  ByteBuffer _val535;
+                  for (int _i536 = 0; _i536 < _map533.size; ++_i536)
                   {
-                    ByteBuffer _key535; // required
-                    ByteBuffer _val536; // required
-                    _key535 = iprot.readBinary();
-                    _val536 = iprot.readBinary();
-                    struct.attributes.put(_key535, _val536);
+                    _key534 = iprot.readBinary();
+                    _val535 = iprot.readBinary();
+                    struct.attributes.put(_key534, _val535);
                   }
                   iprot.readMapEnd();
                 }
@@ -47520,11 +50139,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list541 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list541.size);
-            for (int _i542 = 0; _i542 < _list541.size; ++_i542)
+            ByteBuffer _elem542;
+            for (int _i543 = 0; _i543 < _list541.size; ++_i543)
             {
-              ByteBuffer _elem543; // required
-              _elem543 = iprot.readBinary();
-              struct.columns.add(_elem543);
+              _elem542 = iprot.readBinary();
+              struct.columns.add(_elem542);
             }
           }
           struct.setColumnsIsSet(true);
@@ -47537,13 +50156,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map544 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map544.size);
-            for (int _i545 = 0; _i545 < _map544.size; ++_i545)
+            ByteBuffer _key545;
+            ByteBuffer _val546;
+            for (int _i547 = 0; _i547 < _map544.size; ++_i547)
             {
-              ByteBuffer _key546; // required
-              ByteBuffer _val547; // required
-              _key546 = iprot.readBinary();
-              _val547 = iprot.readBinary();
-              struct.attributes.put(_key546, _val547);
+              _key545 = iprot.readBinary();
+              _val546 = iprot.readBinary();
+              struct.attributes.put(_key545, _val546);
             }
           }
           struct.setAttributesIsSet(true);
@@ -47553,7 +50172,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenTs_result implements org.apache.thrift.TBase<scannerOpenTs_result, scannerOpenTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenTs_result implements org.apache.thrift.TBase<scannerOpenTs_result, scannerOpenTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -47749,7 +50368,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -47809,45 +50428,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenTs_result typedOther = (scannerOpenTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -48021,7 +50640,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithStopTs_args implements org.apache.thrift.TBase<scannerOpenWithStopTs_args, scannerOpenWithStopTs_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithStopTs_args implements org.apache.thrift.TBase<scannerOpenWithStopTs_args, scannerOpenWithStopTs_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithStopTs_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithStopTs_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -48198,9 +50817,9 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.startRow = startRow;
-      this.stopRow = stopRow;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
+      this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(stopRow);
       this.columns = columns;
       this.timestamp = timestamp;
       setTimestampIsSet(true);
@@ -48222,7 +50841,7 @@ public class Hbase {
         this.stopRow = other.stopRow;
       }
       if (other.isSetColumns()) {
-        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+        List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
         for (ByteBuffer other_element : other.columns) {
           __this__columns.add(other_element);
         }
@@ -48230,7 +50849,7 @@ public class Hbase {
       }
       this.timestamp = other.timestamp;
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -48270,19 +50889,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public scannerOpenWithStopTs_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public scannerOpenWithStopTs_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -48311,7 +50930,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStartRow() {
-      return startRow;
+      return org.apache.thrift.TBaseHelper.copyBinary(startRow);
     }
 
     /**
@@ -48319,12 +50938,12 @@ public class Hbase {
      * Send "" (empty string) to start at the first row.
      */
     public scannerOpenWithStopTs_args setStartRow(byte[] startRow) {
-      setStartRow(startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(startRow));
+      this.startRow = startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startRow, startRow.length));
       return this;
     }
 
     public scannerOpenWithStopTs_args setStartRow(ByteBuffer startRow) {
-      this.startRow = startRow;
+      this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
       return this;
     }
 
@@ -48353,7 +50972,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForStopRow() {
-      return stopRow;
+      return org.apache.thrift.TBaseHelper.copyBinary(stopRow);
     }
 
     /**
@@ -48361,12 +50980,12 @@ public class Hbase {
      * scanner's results
      */
     public scannerOpenWithStopTs_args setStopRow(byte[] stopRow) {
-      setStopRow(stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(stopRow));
+      this.stopRow = stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(stopRow, stopRow.length));
       return this;
     }
 
     public scannerOpenWithStopTs_args setStopRow(ByteBuffer stopRow) {
-      this.stopRow = stopRow;
+      this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(stopRow);
       return this;
     }
 
@@ -48572,7 +51191,7 @@ public class Hbase {
         return getColumns();
 
       case TIMESTAMP:
-        return Long.valueOf(getTimestamp());
+        return getTimestamp();
 
       case ATTRIBUTES:
         return getAttributes();
@@ -48676,105 +51295,105 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_startRow = true && (isSetStartRow());
-      builder.append(present_startRow);
+      list.add(present_startRow);
       if (present_startRow)
-        builder.append(startRow);
+        list.add(startRow);
 
       boolean present_stopRow = true && (isSetStopRow());
-      builder.append(present_stopRow);
+      list.add(present_stopRow);
       if (present_stopRow)
-        builder.append(stopRow);
+        list.add(stopRow);
 
       boolean present_columns = true && (isSetColumns());
-      builder.append(present_columns);
+      list.add(present_columns);
       if (present_columns)
-        builder.append(columns);
+        list.add(columns);
 
       boolean present_timestamp = true;
-      builder.append(present_timestamp);
+      list.add(present_timestamp);
       if (present_timestamp)
-        builder.append(timestamp);
+        list.add(timestamp);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithStopTs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithStopTs_args typedOther = (scannerOpenWithStopTs_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
+      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStartRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(typedOther.isSetStopRow());
+      lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(other.isSetStopRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetStopRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, typedOther.stopRow);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, other.stopRow);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumns()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTimestamp()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -48803,7 +51422,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -48811,7 +51430,7 @@ public class Hbase {
       if (this.startRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.startRow);
+        org.apache.thrift.TBaseHelper.toString(this.startRow, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -48819,7 +51438,7 @@ public class Hbase {
       if (this.stopRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.stopRow);
+        org.apache.thrift.TBaseHelper.toString(this.stopRow, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -48827,7 +51446,7 @@ public class Hbase {
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -48916,11 +51535,11 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list548 = iprot.readListBegin();
                   struct.columns = new ArrayList<ByteBuffer>(_list548.size);
-                  for (int _i549 = 0; _i549 < _list548.size; ++_i549)
+                  ByteBuffer _elem549;
+                  for (int _i550 = 0; _i550 < _list548.size; ++_i550)
                   {
-                    ByteBuffer _elem550; // required
-                    _elem550 = iprot.readBinary();
-                    struct.columns.add(_elem550);
+                    _elem549 = iprot.readBinary();
+                    struct.columns.add(_elem549);
                   }
                   iprot.readListEnd();
                 }
@@ -48942,13 +51561,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map551 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map551.size);
-                  for (int _i552 = 0; _i552 < _map551.size; ++_i552)
+                  ByteBuffer _key552;
+                  ByteBuffer _val553;
+                  for (int _i554 = 0; _i554 < _map551.size; ++_i554)
                   {
-                    ByteBuffer _key553; // required
-                    ByteBuffer _val554; // required
-                    _key553 = iprot.readBinary();
-                    _val554 = iprot.readBinary();
-                    struct.attributes.put(_key553, _val554);
+                    _key552 = iprot.readBinary();
+                    _val553 = iprot.readBinary();
+                    struct.attributes.put(_key552, _val553);
                   }
                   iprot.readMapEnd();
                 }
@@ -49105,11 +51724,11 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list559 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.columns = new ArrayList<ByteBuffer>(_list559.size);
-            for (int _i560 = 0; _i560 < _list559.size; ++_i560)
+            ByteBuffer _elem560;
+            for (int _i561 = 0; _i561 < _list559.size; ++_i561)
             {
-              ByteBuffer _elem561; // required
-              _elem561 = iprot.readBinary();
-              struct.columns.add(_elem561);
+              _elem560 = iprot.readBinary();
+              struct.columns.add(_elem560);
             }
           }
           struct.setColumnsIsSet(true);
@@ -49122,13 +51741,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map562 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map562.size);
-            for (int _i563 = 0; _i563 < _map562.size; ++_i563)
+            ByteBuffer _key563;
+            ByteBuffer _val564;
+            for (int _i565 = 0; _i565 < _map562.size; ++_i565)
             {
-              ByteBuffer _key564; // required
-              ByteBuffer _val565; // required
-              _key564 = iprot.readBinary();
-              _val565 = iprot.readBinary();
-              struct.attributes.put(_key564, _val565);
+              _key563 = iprot.readBinary();
+              _val564 = iprot.readBinary();
+              struct.attributes.put(_key563, _val564);
             }
           }
           struct.setAttributesIsSet(true);
@@ -49138,7 +51757,7 @@ public class Hbase {
 
   }
 
-  public static class scannerOpenWithStopTs_result implements org.apache.thrift.TBase<scannerOpenWithStopTs_result, scannerOpenWithStopTs_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerOpenWithStopTs_result implements org.apache.thrift.TBase<scannerOpenWithStopTs_result, scannerOpenWithStopTs_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerOpenWithStopTs_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerOpenWithStopTs_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -49334,7 +51953,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -49394,45 +52013,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerOpenWithStopTs_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerOpenWithStopTs_result typedOther = (scannerOpenWithStopTs_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -49606,7 +52225,7 @@ public class Hbase {
 
   }
 
-  public static class scannerGet_args implements org.apache.thrift.TBase<scannerGet_args, scannerGet_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerGet_args implements org.apache.thrift.TBase<scannerGet_args, scannerGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerGet_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerGet_args");
 
     private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
@@ -49769,7 +52388,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case ID:
-        return Integer.valueOf(getId());
+        return getId();
 
       }
       throw new IllegalStateException();
@@ -49815,30 +52434,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_id = true;
-      builder.append(present_id);
+      list.add(present_id);
       if (present_id)
-        builder.append(id);
+        list.add(id);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerGet_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerGet_args typedOther = (scannerGet_args)other;
 
-      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
+      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -49977,7 +52596,7 @@ public class Hbase {
 
   }
 
-  public static class scannerGet_result implements org.apache.thrift.TBase<scannerGet_result, scannerGet_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerGet_result implements org.apache.thrift.TBase<scannerGet_result, scannerGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerGet_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerGet_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -50092,7 +52711,7 @@ public class Hbase {
      */
     public scannerGet_result(scannerGet_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -50310,60 +52929,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerGet_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerGet_result typedOther = (scannerGet_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -50459,12 +53078,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list566.size);
-                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
+                  TRowResult _elem567;
+                  for (int _i568 = 0; _i568 < _list566.size; ++_i568)
                   {
-                    TRowResult _elem568; // required
-                    _elem568 = new TRowResult();
-                    _elem568.read(iprot);
-                    struct.success.add(_elem568);
+                    _elem567 = new TRowResult();
+                    _elem567.read(iprot);
+                    struct.success.add(_elem567);
                   }
                   iprot.readListEnd();
                 }
@@ -50581,12 +53200,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list571.size);
-            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
+            TRowResult _elem572;
+            for (int _i573 = 0; _i573 < _list571.size; ++_i573)
             {
-              TRowResult _elem573; // required
-              _elem573 = new TRowResult();
-              _elem573.read(iprot);
-              struct.success.add(_elem573);
+              _elem572 = new TRowResult();
+              _elem572.read(iprot);
+              struct.success.add(_elem572);
             }
           }
           struct.setSuccessIsSet(true);
@@ -50606,7 +53225,7 @@ public class Hbase {
 
   }
 
-  public static class scannerGetList_args implements org.apache.thrift.TBase<scannerGetList_args, scannerGetList_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerGetList_args implements org.apache.thrift.TBase<scannerGetList_args, scannerGetList_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerGetList_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerGetList_args");
 
     private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
@@ -50826,10 +53445,10 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case ID:
-        return Integer.valueOf(getId());
+        return getId();
 
       case NB_ROWS:
-        return Integer.valueOf(getNbRows());
+        return getNbRows();
 
       }
       throw new IllegalStateException();
@@ -50886,45 +53505,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_id = true;
-      builder.append(present_id);
+      list.add(present_id);
       if (present_id)
-        builder.append(id);
+        list.add(id);
 
       boolean present_nbRows = true;
-      builder.append(present_nbRows);
+      list.add(present_nbRows);
       if (present_nbRows)
-        builder.append(nbRows);
+        list.add(nbRows);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerGetList_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerGetList_args typedOther = (scannerGetList_args)other;
 
-      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
+      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNbRows()).compareTo(typedOther.isSetNbRows());
+      lastComparison = Boolean.valueOf(isSetNbRows()).compareTo(other.isSetNbRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetNbRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nbRows, typedOther.nbRows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nbRows, other.nbRows);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -51088,7 +53707,7 @@ public class Hbase {
 
   }
 
-  public static class scannerGetList_result implements org.apache.thrift.TBase<scannerGetList_result, scannerGetList_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerGetList_result implements org.apache.thrift.TBase<scannerGetList_result, scannerGetList_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerGetList_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerGetList_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -51203,7 +53822,7 @@ public class Hbase {
      */
     public scannerGetList_result(scannerGetList_result other) {
       if (other.isSetSuccess()) {
-        List<TRowResult> __this__success = new ArrayList<TRowResult>();
+        List<TRowResult> __this__success = new ArrayList<TRowResult>(other.success.size());
         for (TRowResult other_element : other.success) {
           __this__success.add(new TRowResult(other_element));
         }
@@ -51421,60 +54040,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerGetList_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerGetList_result typedOther = (scannerGetList_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -51570,12 +54189,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
                   struct.success = new ArrayList<TRowResult>(_list574.size);
-                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
+                  TRowResult _elem575;
+                  for (int _i576 = 0; _i576 < _list574.size; ++_i576)
                   {
-                    TRowResult _elem576; // required
-                    _elem576 = new TRowResult();
-                    _elem576.read(iprot);
-                    struct.success.add(_elem576);
+                    _elem575 = new TRowResult();
+                    _elem575.read(iprot);
+                    struct.success.add(_elem575);
                   }
                   iprot.readListEnd();
                 }
@@ -51692,12 +54311,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TRowResult>(_list579.size);
-            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
+            TRowResult _elem580;
+            for (int _i581 = 0; _i581 < _list579.size; ++_i581)
             {
-              TRowResult _elem581; // required
-              _elem581 = new TRowResult();
-              _elem581.read(iprot);
-              struct.success.add(_elem581);
+              _elem580 = new TRowResult();
+              _elem580.read(iprot);
+              struct.success.add(_elem580);
             }
           }
           struct.setSuccessIsSet(true);
@@ -51717,7 +54336,7 @@ public class Hbase {
 
   }
 
-  public static class scannerClose_args implements org.apache.thrift.TBase<scannerClose_args, scannerClose_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerClose_args implements org.apache.thrift.TBase<scannerClose_args, scannerClose_args._Fields>, java.io.Serializable, Cloneable, Comparable<scannerClose_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerClose_args");
 
     private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
@@ -51880,7 +54499,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case ID:
-        return Integer.valueOf(getId());
+        return getId();
 
       }
       throw new IllegalStateException();
@@ -51926,30 +54545,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_id = true;
-      builder.append(present_id);
+      list.add(present_id);
       if (present_id)
-        builder.append(id);
+        list.add(id);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerClose_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerClose_args typedOther = (scannerClose_args)other;
 
-      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
+      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -52088,7 +54707,7 @@ public class Hbase {
 
   }
 
-  public static class scannerClose_result implements org.apache.thrift.TBase<scannerClose_result, scannerClose_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class scannerClose_result implements org.apache.thrift.TBase<scannerClose_result, scannerClose_result._Fields>, java.io.Serializable, Cloneable, Comparable<scannerClose_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scannerClose_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -52342,45 +54961,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(scannerClose_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      scannerClose_result typedOther = (scannerClose_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -52558,7 +55177,7 @@ public class Hbase {
 
   }
 
-  public static class getRegionInfo_args implements org.apache.thrift.TBase<getRegionInfo_args, getRegionInfo_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRegionInfo_args implements org.apache.thrift.TBase<getRegionInfo_args, getRegionInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegionInfo_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegionInfo_args");
 
     private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -52652,7 +55271,7 @@ public class Hbase {
       ByteBuffer row)
     {
       this();
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
@@ -52682,19 +55301,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public getRegionInfo_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getRegionInfo_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -52775,30 +55394,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRegionInfo_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRegionInfo_args typedOther = (getRegionInfo_args)other;
 
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -52827,7 +55446,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       sb.append(")");
@@ -52941,7 +55560,7 @@ public class Hbase {
 
   }
 
-  public static class getRegionInfo_result implements org.apache.thrift.TBase<getRegionInfo_result, getRegionInfo_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRegionInfo_result implements org.apache.thrift.TBase<getRegionInfo_result, getRegionInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegionInfo_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegionInfo_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
@@ -53195,45 +55814,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRegionInfo_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRegionInfo_result typedOther = (getRegionInfo_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -53414,7 +56033,7 @@ public class Hbase {
 
   }
 
-  public static class append_args implements org.apache.thrift.TBase<append_args, append_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class append_args implements org.apache.thrift.TBase<append_args, append_args._Fields>, java.io.Serializable, Cloneable, Comparable<append_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("append_args");
 
     private static final org.apache.thrift.protocol.TField APPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("append", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -53621,30 +56240,30 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_append = true && (isSetAppend());
-      builder.append(present_append);
+      list.add(present_append);
       if (present_append)
-        builder.append(append);
+        list.add(append);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(append_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      append_args typedOther = (append_args)other;
 
-      lastComparison = Boolean.valueOf(isSetAppend()).compareTo(typedOther.isSetAppend());
+      lastComparison = Boolean.valueOf(isSetAppend()).compareTo(other.isSetAppend());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAppend()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.append, typedOther.append);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.append, other.append);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -53792,7 +56411,7 @@ public class Hbase {
 
   }
 
-  public static class append_result implements org.apache.thrift.TBase<append_result, append_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class append_result implements org.apache.thrift.TBase<append_result, append_result._Fields>, java.io.Serializable, Cloneable, Comparable<append_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("append_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -53898,7 +56517,7 @@ public class Hbase {
      */
     public append_result(append_result other) {
       if (other.isSetSuccess()) {
-        List<TCell> __this__success = new ArrayList<TCell>();
+        List<TCell> __this__success = new ArrayList<TCell>(other.success.size());
         for (TCell other_element : other.success) {
           __this__success.add(new TCell(other_element));
         }
@@ -54066,45 +56685,45 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(append_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      append_result typedOther = (append_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -54192,12 +56811,12 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
                   struct.success = new ArrayList<TCell>(_list582.size);
-                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
+                  TCell _elem583;
+                  for (int _i584 = 0; _i584 < _list582.size; ++_i584)
                   {
-                    TCell _elem584; // required
-                    _elem584 = new TCell();
-                    _elem584.read(iprot);
-                    struct.success.add(_elem584);
+                    _elem583 = new TCell();
+                    _elem583.read(iprot);
+                    struct.success.add(_elem583);
                   }
                   iprot.readListEnd();
                 }
@@ -54294,12 +56913,12 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TCell>(_list587.size);
-            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
+            TCell _elem588;
+            for (int _i589 = 0; _i589 < _list587.size; ++_i589)
             {
-              TCell _elem589; // required
-              _elem589 = new TCell();
-              _elem589.read(iprot);
-              struct.success.add(_elem589);
+              _elem588 = new TCell();
+              _elem588.read(iprot);
+              struct.success.add(_elem588);
             }
           }
           struct.setSuccessIsSet(true);
@@ -54314,7 +56933,7 @@ public class Hbase {
 
   }
 
-  public static class checkAndPut_args implements org.apache.thrift.TBase<checkAndPut_args, checkAndPut_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class checkAndPut_args implements org.apache.thrift.TBase<checkAndPut_args, checkAndPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndPut_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndPut_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -54484,10 +57103,10 @@ public class Hbase {
       Map<ByteBuffer,ByteBuffer> attributes)
     {
       this();
-      this.tableName = tableName;
-      this.row = row;
-      this.column = column;
-      this.value = value;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
+      this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
       this.mput = mput;
       this.attributes = attributes;
     }
@@ -54512,7 +57131,7 @@ public class Hbase {
         this.mput = new Mutation(other.mput);
       }
       if (other.isSetAttributes()) {
-        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
+        Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes.size());
         for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
 
           ByteBuffer other_element_key = other_element.getKey();
@@ -54551,19 +57170,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForTableName() {
-      return tableName;
+      return org.apache.thrift.TBaseHelper.copyBinary(tableName);
     }
 
     /**
      * name of table
      */
     public checkAndPut_args setTableName(byte[] tableName) {
-      setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+      this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
       return this;
     }
 
     public checkAndPut_args setTableName(ByteBuffer tableName) {
-      this.tableName = tableName;
+      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
       return this;
     }
 
@@ -54591,19 +57210,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row key
      */
     public checkAndPut_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public checkAndPut_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -54631,19 +57250,19 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForColumn() {
-      return column;
+      return org.apache.thrift.TBaseHelper.copyBinary(column);
     }
 
     /**
      * column name
      */
     public checkAndPut_args setColumn(byte[] column) {
-      setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+      this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
       return this;
     }
 
     public checkAndPut_args setColumn(ByteBuffer column) {
-      this.column = column;
+      this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
       return this;
     }
 
@@ -54673,7 +57292,7 @@ public class Hbase {
     }
 
     public ByteBuffer bufferForValue() {
-      return value;
+      return org.apache.thrift.TBaseHelper.copyBinary(value);
     }
 
     /**
@@ -54682,12 +57301,12 @@ public class Hbase {
      * column in question
      */
     public checkAndPut_args setValue(byte[] value) {
-      setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
+      this.value = value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(value, value.length));
       return this;
     }
 
     public checkAndPut_args setValue(ByteBuffer value) {
-      this.value = value;
+      this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
       return this;
     }
 
@@ -54949,105 +57568,105 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_tableName = true && (isSetTableName());
-      builder.append(present_tableName);
+      list.add(present_tableName);
       if (present_tableName)
-        builder.append(tableName);
+        list.add(tableName);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_column = true && (isSetColumn());
-      builder.append(present_column);
+      list.add(present_column);
       if (present_column)
-        builder.append(column);
+        list.add(column);
 
       boolean present_value = true && (isSetValue());
-      builder.append(present_value);
+      list.add(present_value);
       if (present_value)
-        builder.append(value);
+        list.add(value);
 
       boolean present_mput = true && (isSetMput());
-      builder.append(present_mput);
+      list.add(present_mput);
       if (present_mput)
-        builder.append(mput);
+        list.add(mput);
 
       boolean present_attributes = true && (isSetAttributes());
-      builder.append(present_attributes);
+      list.add(present_attributes);
       if (present_attributes)
-        builder.append(attributes);
+        list.add(attributes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(checkAndPut_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      checkAndPut_args typedOther = (checkAndPut_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTableName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetColumn()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetValue()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetMput()).compareTo(typedOther.isSetMput());
+      lastComparison = Boolean.valueOf(isSetMput()).compareTo(other.isSetMput());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetMput()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mput, typedOther.mput);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mput, other.mput);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetAttributes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -55076,7 +57695,7 @@ public class Hbase {
       if (this.tableName == null) {
         sb.append("null");
       } else {
-        sb.append(this.tableName);
+        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -55084,7 +57703,7 @@ public class Hbase {
       if (this.row == null) {
         sb.append("null");
       } else {
-        sb.append(this.row);
+        org.apache.thrift.TBaseHelper.toString(this.row, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -55092,7 +57711,7 @@ public class Hbase {
       if (this.column == null) {
         sb.append("null");
       } else {
-        sb.append(this.column);
+        org.apache.thrift.TBaseHelper.toString(this.column, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -55100,7 +57719,7 @@ public class Hbase {
       if (this.value == null) {
         sb.append("null");
       } else {
-        sb.append(this.value);
+        org.apache.thrift.TBaseHelper.toString(this.value, sb);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -55211,13 +57830,13 @@ public class Hbase {
                 {
                   org.apache.thrift.protocol.TMap _map590 = iprot.readMapBegin();
                   struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map590.size);
-                  for (int _i591 = 0; _i591 < _map590.size; ++_i591)
+                  ByteBuffer _key591;
+                  ByteBuffer _val592;
+                  for (int _i593 = 0; _i593 < _map590.size; ++_i593)
                   {
-                    ByteBuffer _key592; // required
-                    ByteBuffer _val593; // required
-                    _key592 = iprot.readBinary();
-                    _val593 = iprot.readBinary();
-                    struct.attributes.put(_key592, _val593);
+                    _key591 = iprot.readBinary();
+                    _val592 = iprot.readBinary();
+                    struct.attributes.put(_key591, _val592);
                   }
                   iprot.readMapEnd();
                 }
@@ -55372,13 +57991,13 @@ public class Hbase {
           {
             org.apache.thrift.protocol.TMap _map596 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
             struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map596.size);
-            for (int _i597 = 0; _i597 < _map596.size; ++_i597)
+            ByteBuffer _key597;
+            ByteBuffer _val598;
+            for (int _i599 = 0; _i599 < _map596.size; ++_i599)
             {
-              ByteBuffer _key598; // required
-              ByteBuffer _val599; // required
-              _key598 = iprot.readBinary();
-              _val599 = iprot.readBinary();
-              struct.attributes.put(_key598, _val599);
+              _key597 = iprot.readBinary();
+              _val598 = iprot.readBinary();
+              struct.attributes.put(_key597, _val598);
             }
           }
           struct.setAttributesIsSet(true);
@@ -55388,7 +58007,7 @@ public class Hbase {
 
   }
 
-  public static class checkAndPut_result implements org.apache.thrift.TBase<checkAndPut_result, checkAndPut_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class checkAndPut_result implements org.apache.thrift.TBase<checkAndPut_result, checkAndPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndPut_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndPut_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
@@ -55629,7 +58248,7 @@ public class Hbase {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Boolean.valueOf(isSuccess());
+        return isSuccess();
 
       case IO:
         return getIo();
@@ -55703,60 +58322,60 @@ public class Hbase {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(checkAndPut_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      checkAndPut_result typedOther = (checkAndPut_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java
index 4cd5eb9..3624f6c 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,15 +29,18 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * An IOError exception signals that an error occurred communicating
  * to the Hbase master or an Hbase region server.  Also used to return
  * more general Hbase error conditions.
  */
-public class IOError extends TException implements org.apache.thrift.TBase<IOError, IOError._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class IOError extends TException implements org.apache.thrift.TBase<IOError, IOError._Fields>, java.io.Serializable, Cloneable, Comparable<IOError> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IOError");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -231,30 +235,30 @@ public class IOError extends TException implements org.apache.thrift.TBase<IOErr
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_message = true && (isSetMessage());
-    builder.append(present_message);
+    list.add(present_message);
     if (present_message)
-      builder.append(message);
+      list.add(message);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(IOError other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    IOError typedOther = (IOError)other;
 
-    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
+    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMessage()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java
index c1b0b7e..099098e 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,14 +29,17 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * An IllegalArgument exception indicates an illegal or invalid
  * argument was passed into a procedure.
  */
-public class IllegalArgument extends TException implements org.apache.thrift.TBase<IllegalArgument, IllegalArgument._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class IllegalArgument extends TException implements org.apache.thrift.TBase<IllegalArgument, IllegalArgument._Fields>, java.io.Serializable, Cloneable, Comparable<IllegalArgument> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IllegalArgument");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -230,30 +234,30 @@ public class IllegalArgument extends TException implements org.apache.thrift.TBa
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_message = true && (isSetMessage());
-    builder.append(present_message);
+    list.add(present_message);
     if (present_message)
-      builder.append(message);
+      list.add(message);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(IllegalArgument other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    IllegalArgument typedOther = (IllegalArgument)other;
 
-    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
+    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMessage()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java
index 98ad68f..5e91281 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A Mutation object is used to either update or delete a column-value.
  */
-public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable, Comparable<Mutation> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mutation");
 
   private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.BOOL, (short)1);
@@ -155,8 +159,8 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
     this();
     this.isDelete = isDelete;
     setIsDeleteIsSet(true);
-    this.column = column;
-    this.value = value;
+    this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
+    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
     this.writeToWAL = writeToWAL;
     setWriteToWALIsSet(true);
   }
@@ -219,16 +223,16 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   }
 
   public ByteBuffer bufferForColumn() {
-    return column;
+    return org.apache.thrift.TBaseHelper.copyBinary(column);
   }
 
   public Mutation setColumn(byte[] column) {
-    setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+    this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
     return this;
   }
 
   public Mutation setColumn(ByteBuffer column) {
-    this.column = column;
+    this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
     return this;
   }
 
@@ -253,16 +257,16 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   }
 
   public ByteBuffer bufferForValue() {
-    return value;
+    return org.apache.thrift.TBaseHelper.copyBinary(value);
   }
 
   public Mutation setValue(byte[] value) {
-    setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
+    this.value = value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(value, value.length));
     return this;
   }
 
   public Mutation setValue(ByteBuffer value) {
-    this.value = value;
+    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
     return this;
   }
 
@@ -344,7 +348,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   public Object getFieldValue(_Fields field) {
     switch (field) {
     case IS_DELETE:
-      return Boolean.valueOf(isIsDelete());
+      return isIsDelete();
 
     case COLUMN:
       return getColumn();
@@ -353,7 +357,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
       return getValue();
 
     case WRITE_TO_WAL:
-      return Boolean.valueOf(isWriteToWAL());
+      return isWriteToWAL();
 
     }
     throw new IllegalStateException();
@@ -432,75 +436,75 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_isDelete = true;
-    builder.append(present_isDelete);
+    list.add(present_isDelete);
     if (present_isDelete)
-      builder.append(isDelete);
+      list.add(isDelete);
 
     boolean present_column = true && (isSetColumn());
-    builder.append(present_column);
+    list.add(present_column);
     if (present_column)
-      builder.append(column);
+      list.add(column);
 
     boolean present_value = true && (isSetValue());
-    builder.append(present_value);
+    list.add(present_value);
     if (present_value)
-      builder.append(value);
+      list.add(value);
 
     boolean present_writeToWAL = true;
-    builder.append(present_writeToWAL);
+    list.add(present_writeToWAL);
     if (present_writeToWAL)
-      builder.append(writeToWAL);
+      list.add(writeToWAL);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(Mutation other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    Mutation typedOther = (Mutation)other;
 
-    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(typedOther.isSetIsDelete());
+    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetIsDelete()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, typedOther.isDelete);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumn()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetValue()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetWriteToWAL()).compareTo(typedOther.isSetWriteToWAL());
+    lastComparison = Boolean.valueOf(isSetWriteToWAL()).compareTo(other.isSetWriteToWAL());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetWriteToWAL()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeToWAL, typedOther.writeToWAL);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeToWAL, other.writeToWAL);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -533,7 +537,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
     if (this.column == null) {
       sb.append("null");
     } else {
-      sb.append(this.column);
+      org.apache.thrift.TBaseHelper.toString(this.column, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -541,7 +545,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
     if (this.value == null) {
       sb.append("null");
     } else {
-      sb.append(this.value);
+      org.apache.thrift.TBaseHelper.toString(this.value, sb);
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TAppend.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TAppend.java
index 85e0cf4..92a6e2b 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TAppend.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TAppend.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * An Append object is used to specify the parameters for performing the append operation.
  */
-public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields>, java.io.Serializable, Cloneable, Comparable<TAppend> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAppend");
 
   private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -148,8 +152,8 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
     List<ByteBuffer> values)
   {
     this();
-    this.table = table;
-    this.row = row;
+    this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     this.columns = columns;
     this.values = values;
   }
@@ -165,14 +169,14 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
       this.row = other.row;
     }
     if (other.isSetColumns()) {
-      List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+      List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
       for (ByteBuffer other_element : other.columns) {
         __this__columns.add(other_element);
       }
       this.columns = __this__columns;
     }
     if (other.isSetValues()) {
-      List<ByteBuffer> __this__values = new ArrayList<ByteBuffer>();
+      List<ByteBuffer> __this__values = new ArrayList<ByteBuffer>(other.values.size());
       for (ByteBuffer other_element : other.values) {
         __this__values.add(other_element);
       }
@@ -198,16 +202,16 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
   }
 
   public ByteBuffer bufferForTable() {
-    return table;
+    return org.apache.thrift.TBaseHelper.copyBinary(table);
   }
 
   public TAppend setTable(byte[] table) {
-    setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+    this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
     return this;
   }
 
   public TAppend setTable(ByteBuffer table) {
-    this.table = table;
+    this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
     return this;
   }
 
@@ -232,16 +236,16 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TAppend setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TAppend setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -466,75 +470,75 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_table = true && (isSetTable());
-    builder.append(present_table);
+    list.add(present_table);
     if (present_table)
-      builder.append(table);
+      list.add(table);
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_values = true && (isSetValues());
-    builder.append(present_values);
+    list.add(present_values);
     if (present_values)
-      builder.append(values);
+      list.add(values);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TAppend other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TAppend typedOther = (TAppend)other;
 
-    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+    lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTable()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetValues()).compareTo(typedOther.isSetValues());
+    lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetValues()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, typedOther.values);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -563,7 +567,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
     if (this.table == null) {
       sb.append("null");
     } else {
-      sb.append(this.table);
+      org.apache.thrift.TBaseHelper.toString(this.table, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -571,7 +575,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
     if (this.row == null) {
       sb.append("null");
     } else {
-      sb.append(this.row);
+      org.apache.thrift.TBaseHelper.toString(this.row, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -579,7 +583,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
     if (this.columns == null) {
       sb.append("null");
     } else {
-      sb.append(this.columns);
+      org.apache.thrift.TBaseHelper.toString(this.columns, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -587,7 +591,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
     if (this.values == null) {
       sb.append("null");
     } else {
-      sb.append(this.values);
+      org.apache.thrift.TBaseHelper.toString(this.values, sb);
     }
     first = false;
     sb.append(")");
@@ -654,11 +658,11 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
               {
                 org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                 struct.columns = new ArrayList<ByteBuffer>(_list34.size);
-                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
+                ByteBuffer _elem35;
+                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                 {
-                  ByteBuffer _elem36; // required
-                  _elem36 = iprot.readBinary();
-                  struct.columns.add(_elem36);
+                  _elem35 = iprot.readBinary();
+                  struct.columns.add(_elem35);
                 }
                 iprot.readListEnd();
               }
@@ -672,11 +676,11 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
               {
                 org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                 struct.values = new ArrayList<ByteBuffer>(_list37.size);
-                for (int _i38 = 0; _i38 < _list37.size; ++_i38)
+                ByteBuffer _elem38;
+                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                 {
-                  ByteBuffer _elem39; // required
-                  _elem39 = iprot.readBinary();
-                  struct.values.add(_elem39);
+                  _elem38 = iprot.readBinary();
+                  struct.values.add(_elem38);
                 }
                 iprot.readListEnd();
               }
@@ -807,11 +811,11 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
         {
           org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.columns = new ArrayList<ByteBuffer>(_list44.size);
-          for (int _i45 = 0; _i45 < _list44.size; ++_i45)
+          ByteBuffer _elem45;
+          for (int _i46 = 0; _i46 < _list44.size; ++_i46)
           {
-            ByteBuffer _elem46; // required
-            _elem46 = iprot.readBinary();
-            struct.columns.add(_elem46);
+            _elem45 = iprot.readBinary();
+            struct.columns.add(_elem45);
           }
         }
         struct.setColumnsIsSet(true);
@@ -820,11 +824,11 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
         {
           org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.values = new ArrayList<ByteBuffer>(_list47.size);
-          for (int _i48 = 0; _i48 < _list47.size; ++_i48)
+          ByteBuffer _elem48;
+          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
           {
-            ByteBuffer _elem49; // required
-            _elem49 = iprot.readBinary();
-            struct.values.add(_elem49);
+            _elem48 = iprot.readBinary();
+            struct.values.add(_elem48);
           }
         }
         struct.setValuesIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java
index ea29935..c63939e 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,16 +29,19 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * TCell - Used to transport a cell value (byte[]) and the timestamp it was
  * stored with together as a result for get and getRow methods. This promotes
  * the timestamp of a cell to a first-class value, making it easy to take
  * note of temporal data. Cell is used all the way from HStore up to HTable.
  */
-public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, java.io.Serializable, Cloneable, Comparable<TCell> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCell");
 
   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -135,7 +139,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
     long timestamp)
   {
     this();
-    this.value = value;
+    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
     this.timestamp = timestamp;
     setTimestampIsSet(true);
   }
@@ -168,16 +172,16 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
   }
 
   public ByteBuffer bufferForValue() {
-    return value;
+    return org.apache.thrift.TBaseHelper.copyBinary(value);
   }
 
   public TCell setValue(byte[] value) {
-    setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
+    this.value = value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(value, value.length));
     return this;
   }
 
   public TCell setValue(ByteBuffer value) {
-    this.value = value;
+    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
     return this;
   }
 
@@ -246,7 +250,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
       return getValue();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     }
     throw new IllegalStateException();
@@ -303,45 +307,45 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_value = true && (isSetValue());
-    builder.append(present_value);
+    list.add(present_value);
     if (present_value)
-      builder.append(value);
+      list.add(value);
 
     boolean present_timestamp = true;
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TCell other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TCell typedOther = (TCell)other;
 
-    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetValue()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -370,7 +374,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
     if (this.value == null) {
       sb.append("null");
     } else {
-      sb.append(this.value);
+      org.apache.thrift.TBaseHelper.toString(this.value, sb);
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TColumn.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TColumn.java
index 22a137e..4e92dc6 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TColumn.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TColumn.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Holds column name and the cell.
  */
-public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");
 
   private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -130,7 +134,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
     TCell cell)
   {
     this();
-    this.columnName = columnName;
+    this.columnName = org.apache.thrift.TBaseHelper.copyBinary(columnName);
     this.cell = cell;
   }
 
@@ -162,16 +166,16 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
   }
 
   public ByteBuffer bufferForColumnName() {
-    return columnName;
+    return org.apache.thrift.TBaseHelper.copyBinary(columnName);
   }
 
   public TColumn setColumnName(byte[] columnName) {
-    setColumnName(columnName == null ? (ByteBuffer)null : ByteBuffer.wrap(columnName));
+    this.columnName = columnName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(columnName, columnName.length));
     return this;
   }
 
   public TColumn setColumnName(ByteBuffer columnName) {
-    this.columnName = columnName;
+    this.columnName = org.apache.thrift.TBaseHelper.copyBinary(columnName);
     return this;
   }
 
@@ -298,45 +302,45 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_columnName = true && (isSetColumnName());
-    builder.append(present_columnName);
+    list.add(present_columnName);
     if (present_columnName)
-      builder.append(columnName);
+      list.add(columnName);
 
     boolean present_cell = true && (isSetCell());
-    builder.append(present_cell);
+    list.add(present_cell);
     if (present_cell)
-      builder.append(cell);
+      list.add(cell);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TColumn other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TColumn typedOther = (TColumn)other;
 
-    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(typedOther.isSetColumnName());
+    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(other.isSetColumnName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumnName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, typedOther.columnName);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
+    lastComparison = Boolean.valueOf(isSetCell()).compareTo(other.isSetCell());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCell()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, other.cell);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -365,7 +369,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
     if (this.columnName == null) {
       sb.append("null");
     } else {
-      sb.append(this.columnName);
+      org.apache.thrift.TBaseHelper.toString(this.columnName, sb);
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java
index 6200279..10ef656 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,14 +29,17 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * For increments that are not incrementColumnValue
  * equivalents.
  */
-public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncrement._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncrement._Fields>, java.io.Serializable, Cloneable, Comparable<TIncrement> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIncrement");
 
   private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -149,9 +153,9 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
     long ammount)
   {
     this();
-    this.table = table;
-    this.row = row;
-    this.column = column;
+    this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+    this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
     this.ammount = ammount;
     setAmmountIsSet(true);
   }
@@ -192,16 +196,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   public ByteBuffer bufferForTable() {
-    return table;
+    return org.apache.thrift.TBaseHelper.copyBinary(table);
   }
 
   public TIncrement setTable(byte[] table) {
-    setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+    this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
     return this;
   }
 
   public TIncrement setTable(ByteBuffer table) {
-    this.table = table;
+    this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
     return this;
   }
 
@@ -226,16 +230,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TIncrement setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TIncrement setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -260,16 +264,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   public ByteBuffer bufferForColumn() {
-    return column;
+    return org.apache.thrift.TBaseHelper.copyBinary(column);
   }
 
   public TIncrement setColumn(byte[] column) {
-    setColumn(column == null ? (ByteBuffer)null : ByteBuffer.wrap(column));
+    this.column = column == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(column, column.length));
     return this;
   }
 
   public TIncrement setColumn(ByteBuffer column) {
-    this.column = column;
+    this.column = org.apache.thrift.TBaseHelper.copyBinary(column);
     return this;
   }
 
@@ -360,7 +364,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
       return getColumn();
 
     case AMMOUNT:
-      return Long.valueOf(getAmmount());
+      return getAmmount();
 
     }
     throw new IllegalStateException();
@@ -439,75 +443,75 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_table = true && (isSetTable());
-    builder.append(present_table);
+    list.add(present_table);
     if (present_table)
-      builder.append(table);
+      list.add(table);
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_column = true && (isSetColumn());
-    builder.append(present_column);
+    list.add(present_column);
     if (present_column)
-      builder.append(column);
+      list.add(column);
 
     boolean present_ammount = true;
-    builder.append(present_ammount);
+    list.add(present_ammount);
     if (present_ammount)
-      builder.append(ammount);
+      list.add(ammount);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TIncrement other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TIncrement typedOther = (TIncrement)other;
 
-    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+    lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTable()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
+    lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumn()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAmmount()).compareTo(typedOther.isSetAmmount());
+    lastComparison = Boolean.valueOf(isSetAmmount()).compareTo(other.isSetAmmount());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAmmount()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ammount, typedOther.ammount);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ammount, other.ammount);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -536,7 +540,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
     if (this.table == null) {
       sb.append("null");
     } else {
-      sb.append(this.table);
+      org.apache.thrift.TBaseHelper.toString(this.table, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -544,7 +548,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
     if (this.row == null) {
       sb.append("null");
     } else {
-      sb.append(this.row);
+      org.apache.thrift.TBaseHelper.toString(this.row, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -552,7 +556,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
     if (this.column == null) {
       sb.append("null");
     } else {
-      sb.append(this.column);
+      org.apache.thrift.TBaseHelper.toString(this.column, sb);
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java
index 278ef3a..760908c 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A TRegionInfo contains information about an HTable region.
  */
-public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegionInfo._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TRegionInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRegionInfo");
 
   private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -174,14 +178,14 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
     int port)
   {
     this();
-    this.startKey = startKey;
-    this.endKey = endKey;
+    this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
+    this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
     this.id = id;
     setIdIsSet(true);
-    this.name = name;
+    this.name = org.apache.thrift.TBaseHelper.copyBinary(name);
     this.version = version;
     setVersionIsSet(true);
-    this.serverName = serverName;
+    this.serverName = org.apache.thrift.TBaseHelper.copyBinary(serverName);
     this.port = port;
     setPortIsSet(true);
   }
@@ -232,16 +236,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public ByteBuffer bufferForStartKey() {
-    return startKey;
+    return org.apache.thrift.TBaseHelper.copyBinary(startKey);
   }
 
   public TRegionInfo setStartKey(byte[] startKey) {
-    setStartKey(startKey == null ? (ByteBuffer)null : ByteBuffer.wrap(startKey));
+    this.startKey = startKey == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startKey, startKey.length));
     return this;
   }
 
   public TRegionInfo setStartKey(ByteBuffer startKey) {
-    this.startKey = startKey;
+    this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
     return this;
   }
 
@@ -266,16 +270,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public ByteBuffer bufferForEndKey() {
-    return endKey;
+    return org.apache.thrift.TBaseHelper.copyBinary(endKey);
   }
 
   public TRegionInfo setEndKey(byte[] endKey) {
-    setEndKey(endKey == null ? (ByteBuffer)null : ByteBuffer.wrap(endKey));
+    this.endKey = endKey == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(endKey, endKey.length));
     return this;
   }
 
   public TRegionInfo setEndKey(ByteBuffer endKey) {
-    this.endKey = endKey;
+    this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
     return this;
   }
 
@@ -323,16 +327,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public ByteBuffer bufferForName() {
-    return name;
+    return org.apache.thrift.TBaseHelper.copyBinary(name);
   }
 
   public TRegionInfo setName(byte[] name) {
-    setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
+    this.name = name == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(name, name.length));
     return this;
   }
 
   public TRegionInfo setName(ByteBuffer name) {
-    this.name = name;
+    this.name = org.apache.thrift.TBaseHelper.copyBinary(name);
     return this;
   }
 
@@ -380,16 +384,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public ByteBuffer bufferForServerName() {
-    return serverName;
+    return org.apache.thrift.TBaseHelper.copyBinary(serverName);
   }
 
   public TRegionInfo setServerName(byte[] serverName) {
-    setServerName(serverName == null ? (ByteBuffer)null : ByteBuffer.wrap(serverName));
+    this.serverName = serverName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(serverName, serverName.length));
     return this;
   }
 
   public TRegionInfo setServerName(ByteBuffer serverName) {
-    this.serverName = serverName;
+    this.serverName = org.apache.thrift.TBaseHelper.copyBinary(serverName);
     return this;
   }
 
@@ -501,19 +505,19 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
       return getEndKey();
 
     case ID:
-      return Long.valueOf(getId());
+      return getId();
 
     case NAME:
       return getName();
 
     case VERSION:
-      return Byte.valueOf(getVersion());
+      return getVersion();
 
     case SERVER_NAME:
       return getServerName();
 
     case PORT:
-      return Integer.valueOf(getPort());
+      return getPort();
 
     }
     throw new IllegalStateException();
@@ -625,120 +629,120 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_startKey = true && (isSetStartKey());
-    builder.append(present_startKey);
+    list.add(present_startKey);
     if (present_startKey)
-      builder.append(startKey);
+      list.add(startKey);
 
     boolean present_endKey = true && (isSetEndKey());
-    builder.append(present_endKey);
+    list.add(present_endKey);
     if (present_endKey)
-      builder.append(endKey);
+      list.add(endKey);
 
     boolean present_id = true;
-    builder.append(present_id);
+    list.add(present_id);
     if (present_id)
-      builder.append(id);
+      list.add(id);
 
     boolean present_name = true && (isSetName());
-    builder.append(present_name);
+    list.add(present_name);
     if (present_name)
-      builder.append(name);
+      list.add(name);
 
     boolean present_version = true;
-    builder.append(present_version);
+    list.add(present_version);
     if (present_version)
-      builder.append(version);
+      list.add(version);
 
     boolean present_serverName = true && (isSetServerName());
-    builder.append(present_serverName);
+    list.add(present_serverName);
     if (present_serverName)
-      builder.append(serverName);
+      list.add(serverName);
 
     boolean present_port = true;
-    builder.append(present_port);
+    list.add(present_port);
     if (present_port)
-      builder.append(port);
+      list.add(port);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TRegionInfo other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TRegionInfo typedOther = (TRegionInfo)other;
 
-    lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(typedOther.isSetStartKey());
+    lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStartKey()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, typedOther.startKey);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetEndKey()).compareTo(typedOther.isSetEndKey());
+    lastComparison = Boolean.valueOf(isSetEndKey()).compareTo(other.isSetEndKey());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetEndKey()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, typedOther.endKey);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, other.endKey);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
+    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetId()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
+    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
+    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetVersion()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
+    lastComparison = Boolean.valueOf(isSetServerName()).compareTo(other.isSetServerName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetServerName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, typedOther.serverName);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, other.serverName);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
+    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetPort()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -767,7 +771,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
     if (this.startKey == null) {
       sb.append("null");
     } else {
-      sb.append(this.startKey);
+      org.apache.thrift.TBaseHelper.toString(this.startKey, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -775,7 +779,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
     if (this.endKey == null) {
       sb.append("null");
     } else {
-      sb.append(this.endKey);
+      org.apache.thrift.TBaseHelper.toString(this.endKey, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -787,7 +791,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
     if (this.name == null) {
       sb.append("null");
     } else {
-      sb.append(this.name);
+      org.apache.thrift.TBaseHelper.toString(this.name, sb);
     }
     first = false;
     if (!first) sb.append(", ");
@@ -799,7 +803,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
     if (this.serverName == null) {
       sb.append("null");
     } else {
-      sb.append(this.serverName);
+      org.apache.thrift.TBaseHelper.toString(this.serverName, sb);
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java
index 3bb244d..842e803 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Holds row name and then a map of columns to cells.
  */
-public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResult._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResult._Fields>, java.io.Serializable, Cloneable, Comparable<TRowResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRowResult");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -116,7 +120,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.COLUMNS,_Fields.SORTED_COLUMNS};
+  private static final _Fields optionals[] = {_Fields.COLUMNS,_Fields.SORTED_COLUMNS};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -140,7 +144,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
     ByteBuffer row)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   /**
@@ -151,7 +155,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
       this.row = other.row;
     }
     if (other.isSetColumns()) {
-      Map<ByteBuffer,TCell> __this__columns = new HashMap<ByteBuffer,TCell>();
+      Map<ByteBuffer,TCell> __this__columns = new HashMap<ByteBuffer,TCell>(other.columns.size());
       for (Map.Entry<ByteBuffer, TCell> other_element : other.columns.entrySet()) {
 
         ByteBuffer other_element_key = other_element.getKey();
@@ -166,7 +170,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
       this.columns = __this__columns;
     }
     if (other.isSetSortedColumns()) {
-      List<TColumn> __this__sortedColumns = new ArrayList<TColumn>();
+      List<TColumn> __this__sortedColumns = new ArrayList<TColumn>(other.sortedColumns.size());
       for (TColumn other_element : other.sortedColumns) {
         __this__sortedColumns.add(new TColumn(other_element));
       }
@@ -191,16 +195,16 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TRowResult setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TRowResult setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -399,60 +403,60 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_sortedColumns = true && (isSetSortedColumns());
-    builder.append(present_sortedColumns);
+    list.add(present_sortedColumns);
     if (present_sortedColumns)
-      builder.append(sortedColumns);
+      list.add(sortedColumns);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TRowResult other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TRowResult typedOther = (TRowResult)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetSortedColumns()).compareTo(typedOther.isSetSortedColumns());
+    lastComparison = Boolean.valueOf(isSetSortedColumns()).compareTo(other.isSetSortedColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetSortedColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortedColumns, typedOther.sortedColumns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortedColumns, other.sortedColumns);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -481,7 +485,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
     if (this.row == null) {
       sb.append("null");
     } else {
-      sb.append(this.row);
+      org.apache.thrift.TBaseHelper.toString(this.row, sb);
     }
     first = false;
     if (isSetColumns()) {
@@ -560,14 +564,14 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
               {
                 org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                 struct.columns = new HashMap<ByteBuffer,TCell>(2*_map8.size);
-                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
+                ByteBuffer _key9;
+                TCell _val10;
+                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                 {
-                  ByteBuffer _key10; // required
-                  TCell _val11; // required
-                  _key10 = iprot.readBinary();
-                  _val11 = new TCell();
-                  _val11.read(iprot);
-                  struct.columns.put(_key10, _val11);
+                  _key9 = iprot.readBinary();
+                  _val10 = new TCell();
+                  _val10.read(iprot);
+                  struct.columns.put(_key9, _val10);
                 }
                 iprot.readMapEnd();
               }
@@ -581,12 +585,12 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
               {
                 org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                 struct.sortedColumns = new ArrayList<TColumn>(_list12.size);
-                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
+                TColumn _elem13;
+                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                 {
-                  TColumn _elem14; // required
-                  _elem14 = new TColumn();
-                  _elem14.read(iprot);
-                  struct.sortedColumns.add(_elem14);
+                  _elem13 = new TColumn();
+                  _elem13.read(iprot);
+                  struct.sortedColumns.add(_elem13);
                 }
                 iprot.readListEnd();
               }
@@ -708,14 +712,14 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
         {
           org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.columns = new HashMap<ByteBuffer,TCell>(2*_map19.size);
-          for (int _i20 = 0; _i20 < _map19.size; ++_i20)
+          ByteBuffer _key20;
+          TCell _val21;
+          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
           {
-            ByteBuffer _key21; // required
-            TCell _val22; // required
-            _key21 = iprot.readBinary();
-            _val22 = new TCell();
-            _val22.read(iprot);
-            struct.columns.put(_key21, _val22);
+            _key20 = iprot.readBinary();
+            _val21 = new TCell();
+            _val21.read(iprot);
+            struct.columns.put(_key20, _val21);
           }
         }
         struct.setColumnsIsSet(true);
@@ -724,12 +728,12 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
         {
           org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.sortedColumns = new ArrayList<TColumn>(_list23.size);
-          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
+          TColumn _elem24;
+          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
           {
-            TColumn _elem25; // required
-            _elem25 = new TColumn();
-            _elem25.read(iprot);
-            struct.sortedColumns.add(_elem25);
+            _elem24 = new TColumn();
+            _elem24.read(iprot);
+            struct.sortedColumns.add(_elem24);
           }
         }
         struct.setSortedColumnsIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java
index 5f5cdc7..1262df0 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A Scan object is used to specify scanner parameters when opening a scanner.
  */
-public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, java.io.Serializable, Cloneable, Comparable<TScan> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TScan");
 
   private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -152,7 +156,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   private static final int __SORTCOLUMNS_ISSET_ID = 3;
   private static final int __REVERSED_ISSET_ID = 4;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.START_ROW,_Fields.STOP_ROW,_Fields.TIMESTAMP,_Fields.COLUMNS,_Fields.CACHING,_Fields.FILTER_STRING,_Fields.BATCH_SIZE,_Fields.SORT_COLUMNS,_Fields.REVERSED};
+  private static final _Fields optionals[] = {_Fields.START_ROW,_Fields.STOP_ROW,_Fields.TIMESTAMP,_Fields.COLUMNS,_Fields.CACHING,_Fields.FILTER_STRING,_Fields.BATCH_SIZE,_Fields.SORT_COLUMNS,_Fields.REVERSED};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -195,7 +199,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
     }
     this.timestamp = other.timestamp;
     if (other.isSetColumns()) {
-      List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>();
+      List<ByteBuffer> __this__columns = new ArrayList<ByteBuffer>(other.columns.size());
       for (ByteBuffer other_element : other.columns) {
         __this__columns.add(other_element);
       }
@@ -238,16 +242,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public ByteBuffer bufferForStartRow() {
-    return startRow;
+    return org.apache.thrift.TBaseHelper.copyBinary(startRow);
   }
 
   public TScan setStartRow(byte[] startRow) {
-    setStartRow(startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(startRow));
+    this.startRow = startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startRow, startRow.length));
     return this;
   }
 
   public TScan setStartRow(ByteBuffer startRow) {
-    this.startRow = startRow;
+    this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
     return this;
   }
 
@@ -272,16 +276,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public ByteBuffer bufferForStopRow() {
-    return stopRow;
+    return org.apache.thrift.TBaseHelper.copyBinary(stopRow);
   }
 
   public TScan setStopRow(byte[] stopRow) {
-    setStopRow(stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(stopRow));
+    this.stopRow = stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(stopRow, stopRow.length));
     return this;
   }
 
   public TScan setStopRow(ByteBuffer stopRow) {
-    this.stopRow = stopRow;
+    this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(stopRow);
     return this;
   }
 
@@ -391,16 +395,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public ByteBuffer bufferForFilterString() {
-    return filterString;
+    return org.apache.thrift.TBaseHelper.copyBinary(filterString);
   }
 
   public TScan setFilterString(byte[] filterString) {
-    setFilterString(filterString == null ? (ByteBuffer)null : ByteBuffer.wrap(filterString));
+    this.filterString = filterString == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(filterString, filterString.length));
     return this;
   }
 
   public TScan setFilterString(ByteBuffer filterString) {
-    this.filterString = filterString;
+    this.filterString = org.apache.thrift.TBaseHelper.copyBinary(filterString);
     return this;
   }
 
@@ -574,25 +578,25 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       return getStopRow();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     case COLUMNS:
       return getColumns();
 
     case CACHING:
-      return Integer.valueOf(getCaching());
+      return getCaching();
 
     case FILTER_STRING:
       return getFilterString();
 
     case BATCH_SIZE:
-      return Integer.valueOf(getBatchSize());
+      return getBatchSize();
 
     case SORT_COLUMNS:
-      return Boolean.valueOf(isSortColumns());
+      return isSortColumns();
 
     case REVERSED:
-      return Boolean.valueOf(isReversed());
+      return isReversed();
 
     }
     throw new IllegalStateException();
@@ -726,150 +730,150 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_startRow = true && (isSetStartRow());
-    builder.append(present_startRow);
+    list.add(present_startRow);
     if (present_startRow)
-      builder.append(startRow);
+      list.add(startRow);
 
     boolean present_stopRow = true && (isSetStopRow());
-    builder.append(present_stopRow);
+    list.add(present_stopRow);
     if (present_stopRow)
-      builder.append(stopRow);
+      list.add(stopRow);
 
     boolean present_timestamp = true && (isSetTimestamp());
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_caching = true && (isSetCaching());
-    builder.append(present_caching);
+    list.add(present_caching);
     if (present_caching)
-      builder.append(caching);
+      list.add(caching);
 
     boolean present_filterString = true && (isSetFilterString());
-    builder.append(present_filterString);
+    list.add(present_filterString);
     if (present_filterString)
-      builder.append(filterString);
+      list.add(filterString);
 
     boolean present_batchSize = true && (isSetBatchSize());
-    builder.append(present_batchSize);
+    list.add(present_batchSize);
     if (present_batchSize)
-      builder.append(batchSize);
+      list.add(batchSize);
 
     boolean present_sortColumns = true && (isSetSortColumns());
-    builder.append(present_sortColumns);
+    list.add(present_sortColumns);
     if (present_sortColumns)
-      builder.append(sortColumns);
+      list.add(sortColumns);
 
     boolean present_reversed = true && (isSetReversed());
-    builder.append(present_reversed);
+    list.add(present_reversed);
     if (present_reversed)
-      builder.append(reversed);
+      list.add(reversed);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TScan other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TScan typedOther = (TScan)other;
 
-    lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
+    lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStartRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(typedOther.isSetStopRow());
+    lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(other.isSetStopRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStopRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, typedOther.stopRow);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, other.stopRow);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCaching()).compareTo(typedOther.isSetCaching());
+    lastComparison = Boolean.valueOf(isSetCaching()).compareTo(other.isSetCaching());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCaching()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caching, typedOther.caching);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caching, other.caching);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetFilterString()).compareTo(typedOther.isSetFilterString());
+    lastComparison = Boolean.valueOf(isSetFilterString()).compareTo(other.isSetFilterString());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetFilterString()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterString, typedOther.filterString);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterString, other.filterString);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(typedOther.isSetBatchSize());
+    lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetBatchSize()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, typedOther.batchSize);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, other.batchSize);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetSortColumns()).compareTo(typedOther.isSetSortColumns());
+    lastComparison = Boolean.valueOf(isSetSortColumns()).compareTo(other.isSetSortColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetSortColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortColumns, typedOther.sortColumns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortColumns, other.sortColumns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetReversed()).compareTo(typedOther.isSetReversed());
+    lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetReversed()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, typedOther.reversed);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -899,7 +903,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       if (this.startRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.startRow);
+        org.apache.thrift.TBaseHelper.toString(this.startRow, sb);
       }
       first = false;
     }
@@ -909,7 +913,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       if (this.stopRow == null) {
         sb.append("null");
       } else {
-        sb.append(this.stopRow);
+        org.apache.thrift.TBaseHelper.toString(this.stopRow, sb);
       }
       first = false;
     }
@@ -925,7 +929,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       if (this.columns == null) {
         sb.append("null");
       } else {
-        sb.append(this.columns);
+        org.apache.thrift.TBaseHelper.toString(this.columns, sb);
       }
       first = false;
     }
@@ -941,7 +945,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       if (this.filterString == null) {
         sb.append("null");
       } else {
-        sb.append(this.filterString);
+        org.apache.thrift.TBaseHelper.toString(this.filterString, sb);
       }
       first = false;
     }
@@ -1037,11 +1041,11 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
               {
                 org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                 struct.columns = new ArrayList<ByteBuffer>(_list26.size);
-                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
+                ByteBuffer _elem27;
+                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                 {
-                  ByteBuffer _elem28; // required
-                  _elem28 = iprot.readBinary();
-                  struct.columns.add(_elem28);
+                  _elem27 = iprot.readBinary();
+                  struct.columns.add(_elem27);
                 }
                 iprot.readListEnd();
               }
@@ -1266,11 +1270,11 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
         {
           org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.columns = new ArrayList<ByteBuffer>(_list31.size);
-          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
+          ByteBuffer _elem32;
+          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
           {
-            ByteBuffer _elem33; // required
-            _elem33 = iprot.readBinary();
-            struct.columns.add(_elem33);
+            _elem32 = iprot.readBinary();
+            struct.columns.add(_elem32);
           }
         }
         struct.setColumnsIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java
index b5e17ef..a5c7275 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java
@@ -245,10 +245,11 @@ public class ThriftServer extends Configured implements Tool {
     log.info("starting HBase HsHA Thrift server on " + inetSocketAddress.toString());
     THsHaServer.Args serverArgs = new THsHaServer.Args(serverTransport);
     if (workerThreads > 0) {
-      serverArgs.workerThreads(workerThreads);
+      // Could support the min & max threads, avoiding to preserve existing functionality.
+      serverArgs.minWorkerThreads(workerThreads).maxWorkerThreads(workerThreads);
     }
     ExecutorService executorService = createExecutor(
-        serverArgs.getWorkerThreads(), metrics);
+        workerThreads, metrics);
     serverArgs.executorService(executorService);
     serverArgs.processor(processor);
     serverArgs.transportFactory(transportFactory);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAppend.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAppend.java
index 49d0e75..ad631ce 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAppend.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAppend.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields>, java.io.Serializable, Cloneable, Comparable<TAppend> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAppend");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -131,7 +135,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.ATTRIBUTES,_Fields.DURABILITY,_Fields.CELL_VISIBILITY};
+  private static final _Fields optionals[] = {_Fields.ATTRIBUTES,_Fields.DURABILITY,_Fields.CELL_VISIBILITY};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -160,7 +164,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
     List<TColumnValue> columns)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     this.columns = columns;
   }
 
@@ -170,30 +174,16 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
   public TAppend(TAppend other) {
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetColumns()) {
-      List<TColumnValue> __this__columns = new ArrayList<TColumnValue>();
+      List<TColumnValue> __this__columns = new ArrayList<TColumnValue>(other.columns.size());
       for (TColumnValue other_element : other.columns) {
         __this__columns.add(new TColumnValue(other_element));
       }
       this.columns = __this__columns;
     }
     if (other.isSetAttributes()) {
-      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
-      for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
-
-        ByteBuffer other_element_key = other_element.getKey();
-        ByteBuffer other_element_value = other_element.getValue();
-
-        ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
-;
-
-        ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
-;
-
-        __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
-      }
+      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes);
       this.attributes = __this__attributes;
     }
     if (other.isSetDurability()) {
@@ -223,16 +213,16 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TAppend setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TAppend setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -531,90 +521,90 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_attributes = true && (isSetAttributes());
-    builder.append(present_attributes);
+    list.add(present_attributes);
     if (present_attributes)
-      builder.append(attributes);
+      list.add(attributes);
 
     boolean present_durability = true && (isSetDurability());
-    builder.append(present_durability);
+    list.add(present_durability);
     if (present_durability)
-      builder.append(durability.getValue());
+      list.add(durability.getValue());
 
     boolean present_cellVisibility = true && (isSetCellVisibility());
-    builder.append(present_cellVisibility);
+    list.add(present_cellVisibility);
     if (present_cellVisibility)
-      builder.append(cellVisibility);
+      list.add(cellVisibility);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TAppend other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TAppend typedOther = (TAppend)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAttributes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(typedOther.isSetDurability());
+    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetDurability()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, typedOther.durability);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCellVisibility()).compareTo(typedOther.isSetCellVisibility());
+    lastComparison = Boolean.valueOf(isSetCellVisibility()).compareTo(other.isSetCellVisibility());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCellVisibility()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, typedOther.cellVisibility);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, other.cellVisibility);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -749,12 +739,12 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
               {
                 org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                 struct.columns = new ArrayList<TColumnValue>(_list88.size);
-                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
+                TColumnValue _elem89;
+                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                 {
-                  TColumnValue _elem90; // required
-                  _elem90 = new TColumnValue();
-                  _elem90.read(iprot);
-                  struct.columns.add(_elem90);
+                  _elem89 = new TColumnValue();
+                  _elem89.read(iprot);
+                  struct.columns.add(_elem89);
                 }
                 iprot.readListEnd();
               }
@@ -768,13 +758,13 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
               {
                 org.apache.thrift.protocol.TMap _map91 = iprot.readMapBegin();
                 struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map91.size);
-                for (int _i92 = 0; _i92 < _map91.size; ++_i92)
+                ByteBuffer _key92;
+                ByteBuffer _val93;
+                for (int _i94 = 0; _i94 < _map91.size; ++_i94)
                 {
-                  ByteBuffer _key93; // required
-                  ByteBuffer _val94; // required
-                  _key93 = iprot.readBinary();
-                  _val94 = iprot.readBinary();
-                  struct.attributes.put(_key93, _val94);
+                  _key92 = iprot.readBinary();
+                  _val93 = iprot.readBinary();
+                  struct.attributes.put(_key92, _val93);
                 }
                 iprot.readMapEnd();
               }
@@ -785,7 +775,7 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
             break;
           case 4: // DURABILITY
             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
-              struct.durability = TDurability.findByValue(iprot.readI32());
+              struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
               struct.setDurabilityIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -923,12 +913,12 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
       {
         org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
         struct.columns = new ArrayList<TColumnValue>(_list99.size);
-        for (int _i100 = 0; _i100 < _list99.size; ++_i100)
+        TColumnValue _elem100;
+        for (int _i101 = 0; _i101 < _list99.size; ++_i101)
         {
-          TColumnValue _elem101; // required
-          _elem101 = new TColumnValue();
-          _elem101.read(iprot);
-          struct.columns.add(_elem101);
+          _elem100 = new TColumnValue();
+          _elem100.read(iprot);
+          struct.columns.add(_elem100);
         }
       }
       struct.setColumnsIsSet(true);
@@ -937,19 +927,19 @@ public class TAppend implements org.apache.thrift.TBase<TAppend, TAppend._Fields
         {
           org.apache.thrift.protocol.TMap _map102 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map102.size);
-          for (int _i103 = 0; _i103 < _map102.size; ++_i103)
+          ByteBuffer _key103;
+          ByteBuffer _val104;
+          for (int _i105 = 0; _i105 < _map102.size; ++_i105)
           {
-            ByteBuffer _key104; // required
-            ByteBuffer _val105; // required
-            _key104 = iprot.readBinary();
-            _val105 = iprot.readBinary();
-            struct.attributes.put(_key104, _val105);
+            _key103 = iprot.readBinary();
+            _val104 = iprot.readBinary();
+            struct.attributes.put(_key103, _val104);
           }
         }
         struct.setAttributesIsSet(true);
       }
       if (incoming.get(1)) {
-        struct.durability = TDurability.findByValue(iprot.readI32());
+        struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
         struct.setDurabilityIsSet(true);
       }
       if (incoming.get(2)) {
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAuthorization.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAuthorization.java
index f217f87..d448cdd 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAuthorization.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAuthorization.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, TAuthorization._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, TAuthorization._Fields>, java.io.Serializable, Cloneable, Comparable<TAuthorization> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAuthorization");
 
   private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.LIST, (short)1);
@@ -103,7 +107,7 @@ public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, T
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.LABELS};
+  private static final _Fields optionals[] = {_Fields.LABELS};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -122,10 +126,7 @@ public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, T
    */
   public TAuthorization(TAuthorization other) {
     if (other.isSetLabels()) {
-      List<String> __this__labels = new ArrayList<String>();
-      for (String other_element : other.labels) {
-        __this__labels.add(other_element);
-      }
+      List<String> __this__labels = new ArrayList<String>(other.labels);
       this.labels = __this__labels;
     }
   }
@@ -240,30 +241,30 @@ public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, T
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_labels = true && (isSetLabels());
-    builder.append(present_labels);
+    list.add(present_labels);
     if (present_labels)
-      builder.append(labels);
+      list.add(labels);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TAuthorization other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TAuthorization typedOther = (TAuthorization)other;
 
-    lastComparison = Boolean.valueOf(isSetLabels()).compareTo(typedOther.isSetLabels());
+    lastComparison = Boolean.valueOf(isSetLabels()).compareTo(other.isSetLabels());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetLabels()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, typedOther.labels);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, other.labels);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -345,11 +346,11 @@ public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, T
               {
                 org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                 struct.labels = new ArrayList<String>(_list8.size);
-                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
+                String _elem9;
+                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                 {
-                  String _elem10; // required
-                  _elem10 = iprot.readString();
-                  struct.labels.add(_elem10);
+                  _elem9 = iprot.readString();
+                  struct.labels.add(_elem9);
                 }
                 iprot.readListEnd();
               }
@@ -428,11 +429,11 @@ public class TAuthorization implements org.apache.thrift.TBase<TAuthorization, T
         {
           org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.labels = new ArrayList<String>(_list13.size);
-          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
+          String _elem14;
+          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
           {
-            String _elem15; // required
-            _elem15 = iprot.readString();
-            struct.labels.add(_elem15);
+            _elem14 = iprot.readString();
+            struct.labels.add(_elem14);
           }
         }
         struct.setLabelsIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TCellVisibility.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TCellVisibility.java
index 59c7ef7..3ad4f6a 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TCellVisibility.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TCellVisibility.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class TCellVisibility implements org.apache.thrift.TBase<TCellVisibility, TCellVisibility._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TCellVisibility implements org.apache.thrift.TBase<TCellVisibility, TCellVisibility._Fields>, java.io.Serializable, Cloneable, Comparable<TCellVisibility> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCellVisibility");
 
   private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -103,7 +107,7 @@ public class TCellVisibility implements org.apache.thrift.TBase<TCellVisibility,
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.EXPRESSION};
+  private static final _Fields optionals[] = {_Fields.EXPRESSION};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -220,30 +224,30 @@ public class TCellVisibility implements org.apache.thrift.TBase<TCellVisibility,
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_expression = true && (isSetExpression());
-    builder.append(present_expression);
+    list.add(present_expression);
     if (present_expression)
-      builder.append(expression);
+      list.add(expression);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TCellVisibility other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TCellVisibility typedOther = (TCellVisibility)other;
 
-    lastComparison = Boolean.valueOf(isSetExpression()).compareTo(typedOther.isSetExpression());
+    lastComparison = Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetExpression()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, typedOther.expression);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java
index fbf08e3..0fe7791 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,15 +29,18 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Addresses a single cell or multiple cells
  * in a HBase table by column family and optionally
  * a column qualifier and timestamp
  */
-public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");
 
   private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -120,7 +124,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.QUALIFIER,_Fields.TIMESTAMP};
+  private static final _Fields optionals[] = {_Fields.QUALIFIER,_Fields.TIMESTAMP};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -141,7 +145,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
     ByteBuffer family)
   {
     this();
-    this.family = family;
+    this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
   }
 
   /**
@@ -151,11 +155,9 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetFamily()) {
       this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
-;
     }
     if (other.isSetQualifier()) {
       this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
-;
     }
     this.timestamp = other.timestamp;
   }
@@ -178,16 +180,16 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
   }
 
   public ByteBuffer bufferForFamily() {
-    return family;
+    return org.apache.thrift.TBaseHelper.copyBinary(family);
   }
 
   public TColumn setFamily(byte[] family) {
-    setFamily(family == null ? (ByteBuffer)null : ByteBuffer.wrap(family));
+    this.family = family == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(family, family.length));
     return this;
   }
 
   public TColumn setFamily(ByteBuffer family) {
-    this.family = family;
+    this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
     return this;
   }
 
@@ -212,16 +214,16 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
   }
 
   public ByteBuffer bufferForQualifier() {
-    return qualifier;
+    return org.apache.thrift.TBaseHelper.copyBinary(qualifier);
   }
 
   public TColumn setQualifier(byte[] qualifier) {
-    setQualifier(qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(qualifier));
+    this.qualifier = qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(qualifier, qualifier.length));
     return this;
   }
 
   public TColumn setQualifier(ByteBuffer qualifier) {
-    this.qualifier = qualifier;
+    this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
     return this;
   }
 
@@ -301,7 +303,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
       return getQualifier();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     }
     throw new IllegalStateException();
@@ -369,60 +371,60 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_family = true && (isSetFamily());
-    builder.append(present_family);
+    list.add(present_family);
     if (present_family)
-      builder.append(family);
+      list.add(family);
 
     boolean present_qualifier = true && (isSetQualifier());
-    builder.append(present_qualifier);
+    list.add(present_qualifier);
     if (present_qualifier)
-      builder.append(qualifier);
+      list.add(qualifier);
 
     boolean present_timestamp = true && (isSetTimestamp());
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TColumn other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TColumn typedOther = (TColumn)other;
 
-    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
+    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetFamily()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(typedOther.isSetQualifier());
+    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetQualifier()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, typedOther.qualifier);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java
index 0a2833b..9bdbf97 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Represents a single cell and the amount to increment it by
  */
-public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncrement, TColumnIncrement._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncrement, TColumnIncrement._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnIncrement> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnIncrement");
 
   private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -118,7 +122,7 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
   // isset id assignments
   private static final int __AMOUNT_ISSET_ID = 0;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.AMOUNT};
+  private static final _Fields optionals[] = {_Fields.AMOUNT};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -142,8 +146,8 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
     ByteBuffer qualifier)
   {
     this();
-    this.family = family;
-    this.qualifier = qualifier;
+    this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
+    this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
   }
 
   /**
@@ -153,11 +157,9 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetFamily()) {
       this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
-;
     }
     if (other.isSetQualifier()) {
       this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
-;
     }
     this.amount = other.amount;
   }
@@ -180,16 +182,16 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
   }
 
   public ByteBuffer bufferForFamily() {
-    return family;
+    return org.apache.thrift.TBaseHelper.copyBinary(family);
   }
 
   public TColumnIncrement setFamily(byte[] family) {
-    setFamily(family == null ? (ByteBuffer)null : ByteBuffer.wrap(family));
+    this.family = family == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(family, family.length));
     return this;
   }
 
   public TColumnIncrement setFamily(ByteBuffer family) {
-    this.family = family;
+    this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
     return this;
   }
 
@@ -214,16 +216,16 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
   }
 
   public ByteBuffer bufferForQualifier() {
-    return qualifier;
+    return org.apache.thrift.TBaseHelper.copyBinary(qualifier);
   }
 
   public TColumnIncrement setQualifier(byte[] qualifier) {
-    setQualifier(qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(qualifier));
+    this.qualifier = qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(qualifier, qualifier.length));
     return this;
   }
 
   public TColumnIncrement setQualifier(ByteBuffer qualifier) {
-    this.qualifier = qualifier;
+    this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
     return this;
   }
 
@@ -303,7 +305,7 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
       return getQualifier();
 
     case AMOUNT:
-      return Long.valueOf(getAmount());
+      return getAmount();
 
     }
     throw new IllegalStateException();
@@ -371,60 +373,60 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_family = true && (isSetFamily());
-    builder.append(present_family);
+    list.add(present_family);
     if (present_family)
-      builder.append(family);
+      list.add(family);
 
     boolean present_qualifier = true && (isSetQualifier());
-    builder.append(present_qualifier);
+    list.add(present_qualifier);
     if (present_qualifier)
-      builder.append(qualifier);
+      list.add(qualifier);
 
     boolean present_amount = true && (isSetAmount());
-    builder.append(present_amount);
+    list.add(present_amount);
     if (present_amount)
-      builder.append(amount);
+      list.add(amount);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TColumnIncrement other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TColumnIncrement typedOther = (TColumnIncrement)other;
 
-    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
+    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetFamily()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(typedOther.isSetQualifier());
+    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetQualifier()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, typedOther.qualifier);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
+    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAmount()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java
index d1cca13..e5cbe56 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Represents a single cell and its value.
  */
-public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColumnValue._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColumnValue._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnValue> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnValue");
 
   private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -128,7 +132,7 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.TAGS};
+  private static final _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.TAGS};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -155,9 +159,9 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
     ByteBuffer value)
   {
     this();
-    this.family = family;
-    this.qualifier = qualifier;
-    this.value = value;
+    this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
+    this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
+    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
   }
 
   /**
@@ -167,20 +171,16 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetFamily()) {
       this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
-;
     }
     if (other.isSetQualifier()) {
       this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
-;
     }
     if (other.isSetValue()) {
       this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
-;
     }
     this.timestamp = other.timestamp;
     if (other.isSetTags()) {
       this.tags = org.apache.thrift.TBaseHelper.copyBinary(other.tags);
-;
     }
   }
 
@@ -204,16 +204,16 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   }
 
   public ByteBuffer bufferForFamily() {
-    return family;
+    return org.apache.thrift.TBaseHelper.copyBinary(family);
   }
 
   public TColumnValue setFamily(byte[] family) {
-    setFamily(family == null ? (ByteBuffer)null : ByteBuffer.wrap(family));
+    this.family = family == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(family, family.length));
     return this;
   }
 
   public TColumnValue setFamily(ByteBuffer family) {
-    this.family = family;
+    this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
     return this;
   }
 
@@ -238,16 +238,16 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   }
 
   public ByteBuffer bufferForQualifier() {
-    return qualifier;
+    return org.apache.thrift.TBaseHelper.copyBinary(qualifier);
   }
 
   public TColumnValue setQualifier(byte[] qualifier) {
-    setQualifier(qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(qualifier));
+    this.qualifier = qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(qualifier, qualifier.length));
     return this;
   }
 
   public TColumnValue setQualifier(ByteBuffer qualifier) {
-    this.qualifier = qualifier;
+    this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
     return this;
   }
 
@@ -272,16 +272,16 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   }
 
   public ByteBuffer bufferForValue() {
-    return value;
+    return org.apache.thrift.TBaseHelper.copyBinary(value);
   }
 
   public TColumnValue setValue(byte[] value) {
-    setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
+    this.value = value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(value, value.length));
     return this;
   }
 
   public TColumnValue setValue(ByteBuffer value) {
-    this.value = value;
+    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
     return this;
   }
 
@@ -329,16 +329,16 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   }
 
   public ByteBuffer bufferForTags() {
-    return tags;
+    return org.apache.thrift.TBaseHelper.copyBinary(tags);
   }
 
   public TColumnValue setTags(byte[] tags) {
-    setTags(tags == null ? (ByteBuffer)null : ByteBuffer.wrap(tags));
+    this.tags = tags == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tags, tags.length));
     return this;
   }
 
   public TColumnValue setTags(ByteBuffer tags) {
-    this.tags = tags;
+    this.tags = org.apache.thrift.TBaseHelper.copyBinary(tags);
     return this;
   }
 
@@ -414,7 +414,7 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
       return getValue();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     case TAGS:
       return getTags();
@@ -507,90 +507,90 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_family = true && (isSetFamily());
-    builder.append(present_family);
+    list.add(present_family);
     if (present_family)
-      builder.append(family);
+      list.add(family);
 
     boolean present_qualifier = true && (isSetQualifier());
-    builder.append(present_qualifier);
+    list.add(present_qualifier);
     if (present_qualifier)
-      builder.append(qualifier);
+      list.add(qualifier);
 
     boolean present_value = true && (isSetValue());
-    builder.append(present_value);
+    list.add(present_value);
     if (present_value)
-      builder.append(value);
+      list.add(value);
 
     boolean present_timestamp = true && (isSetTimestamp());
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
     boolean present_tags = true && (isSetTags());
-    builder.append(present_tags);
+    list.add(present_tags);
     if (present_tags)
-      builder.append(tags);
+      list.add(tags);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TColumnValue other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TColumnValue typedOther = (TColumnValue)other;
 
-    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
+    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetFamily()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(typedOther.isSetQualifier());
+    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetQualifier()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, typedOther.qualifier);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetValue()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
+    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTags()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, typedOther.tags);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
index a4d7777..5a42d8a 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,11 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Used to perform Delete operations on a single row.
  * 
@@ -57,7 +60,8 @@ import org.slf4j.LoggerFactory;
  * by changing the durability. If you don't provide durability, it defaults to
  * column family's default setting for durability.
  */
-public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields>, java.io.Serializable, Cloneable, Comparable<TDelete> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDelete");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -172,7 +176,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.COLUMNS,_Fields.TIMESTAMP,_Fields.DELETE_TYPE,_Fields.ATTRIBUTES,_Fields.DURABILITY};
+  private static final _Fields optionals[] = {_Fields.COLUMNS,_Fields.TIMESTAMP,_Fields.DELETE_TYPE,_Fields.ATTRIBUTES,_Fields.DURABILITY};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -204,7 +208,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
     ByteBuffer row)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   /**
@@ -214,10 +218,9 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetColumns()) {
-      List<TColumn> __this__columns = new ArrayList<TColumn>();
+      List<TColumn> __this__columns = new ArrayList<TColumn>(other.columns.size());
       for (TColumn other_element : other.columns) {
         __this__columns.add(new TColumn(other_element));
       }
@@ -228,20 +231,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       this.deleteType = other.deleteType;
     }
     if (other.isSetAttributes()) {
-      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
-      for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
-
-        ByteBuffer other_element_key = other_element.getKey();
-        ByteBuffer other_element_value = other_element.getValue();
-
-        ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
-;
-
-        ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
-;
-
-        __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
-      }
+      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes);
       this.attributes = __this__attributes;
     }
     if (other.isSetDurability()) {
@@ -271,16 +261,16 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TDelete setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TDelete setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -522,7 +512,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       return getColumns();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     case DELETE_TYPE:
       return getDeleteType();
@@ -632,105 +622,105 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_timestamp = true && (isSetTimestamp());
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
     boolean present_deleteType = true && (isSetDeleteType());
-    builder.append(present_deleteType);
+    list.add(present_deleteType);
     if (present_deleteType)
-      builder.append(deleteType.getValue());
+      list.add(deleteType.getValue());
 
     boolean present_attributes = true && (isSetAttributes());
-    builder.append(present_attributes);
+    list.add(present_attributes);
     if (present_attributes)
-      builder.append(attributes);
+      list.add(attributes);
 
     boolean present_durability = true && (isSetDurability());
-    builder.append(present_durability);
+    list.add(present_durability);
     if (present_durability)
-      builder.append(durability.getValue());
+      list.add(durability.getValue());
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TDelete other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TDelete typedOther = (TDelete)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetDeleteType()).compareTo(typedOther.isSetDeleteType());
+    lastComparison = Boolean.valueOf(isSetDeleteType()).compareTo(other.isSetDeleteType());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetDeleteType()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteType, typedOther.deleteType);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteType, other.deleteType);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAttributes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(typedOther.isSetDurability());
+    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetDurability()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, typedOther.durability);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -869,12 +859,12 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
               {
                 org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                 struct.columns = new ArrayList<TColumn>(_list52.size);
-                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
+                TColumn _elem53;
+                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                 {
-                  TColumn _elem54; // required
-                  _elem54 = new TColumn();
-                  _elem54.read(iprot);
-                  struct.columns.add(_elem54);
+                  _elem53 = new TColumn();
+                  _elem53.read(iprot);
+                  struct.columns.add(_elem53);
                 }
                 iprot.readListEnd();
               }
@@ -893,7 +883,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
             break;
           case 4: // DELETE_TYPE
             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
-              struct.deleteType = TDeleteType.findByValue(iprot.readI32());
+              struct.deleteType = org.apache.hadoop.hbase.thrift2.generated.TDeleteType.findByValue(iprot.readI32());
               struct.setDeleteTypeIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -904,13 +894,13 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
               {
                 org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
                 struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map55.size);
-                for (int _i56 = 0; _i56 < _map55.size; ++_i56)
+                ByteBuffer _key56;
+                ByteBuffer _val57;
+                for (int _i58 = 0; _i58 < _map55.size; ++_i58)
                 {
-                  ByteBuffer _key57; // required
-                  ByteBuffer _val58; // required
-                  _key57 = iprot.readBinary();
-                  _val58 = iprot.readBinary();
-                  struct.attributes.put(_key57, _val58);
+                  _key56 = iprot.readBinary();
+                  _val57 = iprot.readBinary();
+                  struct.attributes.put(_key56, _val57);
                 }
                 iprot.readMapEnd();
               }
@@ -921,7 +911,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
             break;
           case 7: // DURABILITY
             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
-              struct.durability = TDurability.findByValue(iprot.readI32());
+              struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
               struct.setDurabilityIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -1070,12 +1060,12 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
         {
           org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.columns = new ArrayList<TColumn>(_list63.size);
-          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
+          TColumn _elem64;
+          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
           {
-            TColumn _elem65; // required
-            _elem65 = new TColumn();
-            _elem65.read(iprot);
-            struct.columns.add(_elem65);
+            _elem64 = new TColumn();
+            _elem64.read(iprot);
+            struct.columns.add(_elem64);
           }
         }
         struct.setColumnsIsSet(true);
@@ -1085,26 +1075,26 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
         struct.setTimestampIsSet(true);
       }
       if (incoming.get(2)) {
-        struct.deleteType = TDeleteType.findByValue(iprot.readI32());
+        struct.deleteType = org.apache.hadoop.hbase.thrift2.generated.TDeleteType.findByValue(iprot.readI32());
         struct.setDeleteTypeIsSet(true);
       }
       if (incoming.get(3)) {
         {
           org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map66.size);
-          for (int _i67 = 0; _i67 < _map66.size; ++_i67)
+          ByteBuffer _key67;
+          ByteBuffer _val68;
+          for (int _i69 = 0; _i69 < _map66.size; ++_i69)
           {
-            ByteBuffer _key68; // required
-            ByteBuffer _val69; // required
-            _key68 = iprot.readBinary();
-            _val69 = iprot.readBinary();
-            struct.attributes.put(_key68, _val69);
+            _key67 = iprot.readBinary();
+            _val68 = iprot.readBinary();
+            struct.attributes.put(_key67, _val68);
           }
         }
         struct.setAttributesIsSet(true);
       }
       if (incoming.get(4)) {
-        struct.durability = TDurability.findByValue(iprot.readI32());
+        struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
         struct.setDurabilityIsSet(true);
       }
     }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
index 39a5015..5d47508 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDurability.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDurability.java
index 042b70b..c1144f3 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDurability.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDurability.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java
index 7e93341..9fa157c 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,11 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Used to perform Get operations on a single row.
  * 
@@ -44,7 +47,8 @@ import org.slf4j.LoggerFactory;
  * If you specify a time range and a timestamp the range is ignored.
  * Timestamps on TColumns are ignored.
  */
-public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.io.Serializable, Cloneable, Comparable<TGet> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGet");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -154,7 +158,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private static final int __MAXVERSIONS_ISSET_ID = 1;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.COLUMNS,_Fields.TIMESTAMP,_Fields.TIME_RANGE,_Fields.MAX_VERSIONS,_Fields.FILTER_STRING,_Fields.ATTRIBUTES,_Fields.AUTHORIZATIONS};
+  private static final _Fields optionals[] = {_Fields.COLUMNS,_Fields.TIMESTAMP,_Fields.TIME_RANGE,_Fields.MAX_VERSIONS,_Fields.FILTER_STRING,_Fields.ATTRIBUTES,_Fields.AUTHORIZATIONS};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -188,7 +192,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
     ByteBuffer row)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   /**
@@ -198,10 +202,9 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetColumns()) {
-      List<TColumn> __this__columns = new ArrayList<TColumn>();
+      List<TColumn> __this__columns = new ArrayList<TColumn>(other.columns.size());
       for (TColumn other_element : other.columns) {
         __this__columns.add(new TColumn(other_element));
       }
@@ -214,23 +217,9 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
     this.maxVersions = other.maxVersions;
     if (other.isSetFilterString()) {
       this.filterString = org.apache.thrift.TBaseHelper.copyBinary(other.filterString);
-;
     }
     if (other.isSetAttributes()) {
-      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
-      for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
-
-        ByteBuffer other_element_key = other_element.getKey();
-        ByteBuffer other_element_value = other_element.getValue();
-
-        ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
-;
-
-        ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
-;
-
-        __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
-      }
+      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes);
       this.attributes = __this__attributes;
     }
     if (other.isSetAuthorizations()) {
@@ -262,16 +251,16 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TGet setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TGet setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -405,16 +394,16 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   }
 
   public ByteBuffer bufferForFilterString() {
-    return filterString;
+    return org.apache.thrift.TBaseHelper.copyBinary(filterString);
   }
 
   public TGet setFilterString(byte[] filterString) {
-    setFilterString(filterString == null ? (ByteBuffer)null : ByteBuffer.wrap(filterString));
+    this.filterString = filterString == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(filterString, filterString.length));
     return this;
   }
 
   public TGet setFilterString(ByteBuffer filterString) {
-    this.filterString = filterString;
+    this.filterString = org.apache.thrift.TBaseHelper.copyBinary(filterString);
     return this;
   }
 
@@ -570,13 +559,13 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
       return getColumns();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     case TIME_RANGE:
       return getTimeRange();
 
     case MAX_VERSIONS:
-      return Integer.valueOf(getMaxVersions());
+      return getMaxVersions();
 
     case FILTER_STRING:
       return getFilterString();
@@ -708,135 +697,135 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_timestamp = true && (isSetTimestamp());
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
     boolean present_timeRange = true && (isSetTimeRange());
-    builder.append(present_timeRange);
+    list.add(present_timeRange);
     if (present_timeRange)
-      builder.append(timeRange);
+      list.add(timeRange);
 
     boolean present_maxVersions = true && (isSetMaxVersions());
-    builder.append(present_maxVersions);
+    list.add(present_maxVersions);
     if (present_maxVersions)
-      builder.append(maxVersions);
+      list.add(maxVersions);
 
     boolean present_filterString = true && (isSetFilterString());
-    builder.append(present_filterString);
+    list.add(present_filterString);
     if (present_filterString)
-      builder.append(filterString);
+      list.add(filterString);
 
     boolean present_attributes = true && (isSetAttributes());
-    builder.append(present_attributes);
+    list.add(present_attributes);
     if (present_attributes)
-      builder.append(attributes);
+      list.add(attributes);
 
     boolean present_authorizations = true && (isSetAuthorizations());
-    builder.append(present_authorizations);
+    list.add(present_authorizations);
     if (present_authorizations)
-      builder.append(authorizations);
+      list.add(authorizations);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TGet other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TGet typedOther = (TGet)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(typedOther.isSetTimeRange());
+    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(other.isSetTimeRange());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimeRange()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRange, typedOther.timeRange);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRange, other.timeRange);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetMaxVersions()).compareTo(typedOther.isSetMaxVersions());
+    lastComparison = Boolean.valueOf(isSetMaxVersions()).compareTo(other.isSetMaxVersions());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMaxVersions()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxVersions, typedOther.maxVersions);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxVersions, other.maxVersions);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetFilterString()).compareTo(typedOther.isSetFilterString());
+    lastComparison = Boolean.valueOf(isSetFilterString()).compareTo(other.isSetFilterString());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetFilterString()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterString, typedOther.filterString);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterString, other.filterString);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAttributes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
+    lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(other.isSetAuthorizations());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAuthorizations()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, other.authorizations);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -997,12 +986,12 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
               {
                 org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                 struct.columns = new ArrayList<TColumn>(_list16.size);
-                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
+                TColumn _elem17;
+                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                 {
-                  TColumn _elem18; // required
-                  _elem18 = new TColumn();
-                  _elem18.read(iprot);
-                  struct.columns.add(_elem18);
+                  _elem17 = new TColumn();
+                  _elem17.read(iprot);
+                  struct.columns.add(_elem17);
                 }
                 iprot.readListEnd();
               }
@@ -1049,13 +1038,13 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
               {
                 org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                 struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map19.size);
-                for (int _i20 = 0; _i20 < _map19.size; ++_i20)
+                ByteBuffer _key20;
+                ByteBuffer _val21;
+                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                 {
-                  ByteBuffer _key21; // required
-                  ByteBuffer _val22; // required
-                  _key21 = iprot.readBinary();
-                  _val22 = iprot.readBinary();
-                  struct.attributes.put(_key21, _val22);
+                  _key20 = iprot.readBinary();
+                  _val21 = iprot.readBinary();
+                  struct.attributes.put(_key20, _val21);
                 }
                 iprot.readMapEnd();
               }
@@ -1240,12 +1229,12 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
         {
           org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.columns = new ArrayList<TColumn>(_list27.size);
-          for (int _i28 = 0; _i28 < _list27.size; ++_i28)
+          TColumn _elem28;
+          for (int _i29 = 0; _i29 < _list27.size; ++_i29)
           {
-            TColumn _elem29; // required
-            _elem29 = new TColumn();
-            _elem29.read(iprot);
-            struct.columns.add(_elem29);
+            _elem28 = new TColumn();
+            _elem28.read(iprot);
+            struct.columns.add(_elem28);
           }
         }
         struct.setColumnsIsSet(true);
@@ -1271,13 +1260,13 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
         {
           org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map30.size);
-          for (int _i31 = 0; _i31 < _map30.size; ++_i31)
+          ByteBuffer _key31;
+          ByteBuffer _val32;
+          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
           {
-            ByteBuffer _key32; // required
-            ByteBuffer _val33; // required
-            _key32 = iprot.readBinary();
-            _val33 = iprot.readBinary();
-            struct.attributes.put(_key32, _val33);
+            _key31 = iprot.readBinary();
+            _val32 = iprot.readBinary();
+            struct.attributes.put(_key31, _val32);
           }
         }
         struct.setAttributesIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java
index e37471a..98b259b 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,12 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
 public class THBaseService {
 
   public interface Iface {
@@ -247,41 +251,41 @@ public class THBaseService {
 
   public interface AsyncIface {
 
-    public void exists(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exists_call> resultHandler) throws org.apache.thrift.TException;
+    public void exists(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void get(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws org.apache.thrift.TException;
+    public void get(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getMultiple(ByteBuffer table, List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMultiple_call> resultHandler) throws org.apache.thrift.TException;
+    public void getMultiple(ByteBuffer table, List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void put(ByteBuffer table, TPut tput, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.put_call> resultHandler) throws org.apache.thrift.TException;
+    public void put(ByteBuffer table, TPut tput, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void checkAndPut(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TPut tput, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkAndPut_call> resultHandler) throws org.apache.thrift.TException;
+    public void checkAndPut(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TPut tput, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void putMultiple(ByteBuffer table, List<TPut> tputs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.putMultiple_call> resultHandler) throws org.apache.thrift.TException;
+    public void putMultiple(ByteBuffer table, List<TPut> tputs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteSingle(ByteBuffer table, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteSingle_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteSingle(ByteBuffer table, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void deleteMultiple(ByteBuffer table, List<TDelete> tdeletes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteMultiple_call> resultHandler) throws org.apache.thrift.TException;
+    public void deleteMultiple(ByteBuffer table, List<TDelete> tdeletes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void checkAndDelete(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkAndDelete_call> resultHandler) throws org.apache.thrift.TException;
+    public void checkAndDelete(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void increment(ByteBuffer table, TIncrement tincrement, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.increment_call> resultHandler) throws org.apache.thrift.TException;
+    public void increment(ByteBuffer table, TIncrement tincrement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void append(ByteBuffer table, TAppend tappend, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.append_call> resultHandler) throws org.apache.thrift.TException;
+    public void append(ByteBuffer table, TAppend tappend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void openScanner(ByteBuffer table, TScan tscan, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.openScanner_call> resultHandler) throws org.apache.thrift.TException;
+    public void openScanner(ByteBuffer table, TScan tscan, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getScannerRows(int scannerId, int numRows, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getScannerRows_call> resultHandler) throws org.apache.thrift.TException;
+    public void getScannerRows(int scannerId, int numRows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void closeScanner(int scannerId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.closeScanner_call> resultHandler) throws org.apache.thrift.TException;
+    public void closeScanner(int scannerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void mutateRow(ByteBuffer table, TRowMutations trowMutations, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutateRow_call> resultHandler) throws org.apache.thrift.TException;
+    public void mutateRow(ByteBuffer table, TRowMutations trowMutations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getScannerResults(ByteBuffer table, TScan tscan, int numRows, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getScannerResults_call> resultHandler) throws org.apache.thrift.TException;
+    public void getScannerResults(ByteBuffer table, TScan tscan, int numRows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getRegionLocation(ByteBuffer table, ByteBuffer row, boolean reload, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRegionLocation_call> resultHandler) throws org.apache.thrift.TException;
+    public void getRegionLocation(ByteBuffer table, ByteBuffer row, boolean reload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getAllRegionLocations(ByteBuffer table, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllRegionLocations_call> resultHandler) throws org.apache.thrift.TException;
+    public void getAllRegionLocations(ByteBuffer table, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
   }
 
@@ -808,7 +812,7 @@ public class THBaseService {
       super(protocolFactory, clientManager, transport);
     }
 
-    public void exists(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<exists_call> resultHandler) throws org.apache.thrift.TException {
+    public void exists(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       exists_call method_call = new exists_call(table, tget, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -818,7 +822,7 @@ public class THBaseService {
     public static class exists_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TGet tget;
-      public exists_call(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<exists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public exists_call(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tget = tget;
@@ -843,7 +847,7 @@ public class THBaseService {
       }
     }
 
-    public void get(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler) throws org.apache.thrift.TException {
+    public void get(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       get_call method_call = new get_call(table, tget, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -853,7 +857,7 @@ public class THBaseService {
     public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TGet tget;
-      public get_call(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public get_call(ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tget = tget;
@@ -878,7 +882,7 @@ public class THBaseService {
       }
     }
 
-    public void getMultiple(ByteBuffer table, List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback<getMultiple_call> resultHandler) throws org.apache.thrift.TException {
+    public void getMultiple(ByteBuffer table, List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getMultiple_call method_call = new getMultiple_call(table, tgets, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -888,7 +892,7 @@ public class THBaseService {
     public static class getMultiple_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private List<TGet> tgets;
-      public getMultiple_call(ByteBuffer table, List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback<getMultiple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getMultiple_call(ByteBuffer table, List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tgets = tgets;
@@ -913,7 +917,7 @@ public class THBaseService {
       }
     }
 
-    public void put(ByteBuffer table, TPut tput, org.apache.thrift.async.AsyncMethodCallback<put_call> resultHandler) throws org.apache.thrift.TException {
+    public void put(ByteBuffer table, TPut tput, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       put_call method_call = new put_call(table, tput, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -923,7 +927,7 @@ public class THBaseService {
     public static class put_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TPut tput;
-      public put_call(ByteBuffer table, TPut tput, org.apache.thrift.async.AsyncMethodCallback<put_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public put_call(ByteBuffer table, TPut tput, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tput = tput;
@@ -948,7 +952,7 @@ public class THBaseService {
       }
     }
 
-    public void checkAndPut(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TPut tput, org.apache.thrift.async.AsyncMethodCallback<checkAndPut_call> resultHandler) throws org.apache.thrift.TException {
+    public void checkAndPut(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TPut tput, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       checkAndPut_call method_call = new checkAndPut_call(table, row, family, qualifier, value, tput, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -962,7 +966,7 @@ public class THBaseService {
       private ByteBuffer qualifier;
       private ByteBuffer value;
       private TPut tput;
-      public checkAndPut_call(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TPut tput, org.apache.thrift.async.AsyncMethodCallback<checkAndPut_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public checkAndPut_call(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TPut tput, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.row = row;
@@ -995,7 +999,7 @@ public class THBaseService {
       }
     }
 
-    public void putMultiple(ByteBuffer table, List<TPut> tputs, org.apache.thrift.async.AsyncMethodCallback<putMultiple_call> resultHandler) throws org.apache.thrift.TException {
+    public void putMultiple(ByteBuffer table, List<TPut> tputs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       putMultiple_call method_call = new putMultiple_call(table, tputs, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1005,7 +1009,7 @@ public class THBaseService {
     public static class putMultiple_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private List<TPut> tputs;
-      public putMultiple_call(ByteBuffer table, List<TPut> tputs, org.apache.thrift.async.AsyncMethodCallback<putMultiple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public putMultiple_call(ByteBuffer table, List<TPut> tputs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tputs = tputs;
@@ -1030,7 +1034,7 @@ public class THBaseService {
       }
     }
 
-    public void deleteSingle(ByteBuffer table, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback<deleteSingle_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteSingle(ByteBuffer table, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteSingle_call method_call = new deleteSingle_call(table, tdelete, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1040,7 +1044,7 @@ public class THBaseService {
     public static class deleteSingle_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TDelete tdelete;
-      public deleteSingle_call(ByteBuffer table, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback<deleteSingle_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteSingle_call(ByteBuffer table, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tdelete = tdelete;
@@ -1065,7 +1069,7 @@ public class THBaseService {
       }
     }
 
-    public void deleteMultiple(ByteBuffer table, List<TDelete> tdeletes, org.apache.thrift.async.AsyncMethodCallback<deleteMultiple_call> resultHandler) throws org.apache.thrift.TException {
+    public void deleteMultiple(ByteBuffer table, List<TDelete> tdeletes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       deleteMultiple_call method_call = new deleteMultiple_call(table, tdeletes, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1075,7 +1079,7 @@ public class THBaseService {
     public static class deleteMultiple_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private List<TDelete> tdeletes;
-      public deleteMultiple_call(ByteBuffer table, List<TDelete> tdeletes, org.apache.thrift.async.AsyncMethodCallback<deleteMultiple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public deleteMultiple_call(ByteBuffer table, List<TDelete> tdeletes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tdeletes = tdeletes;
@@ -1100,7 +1104,7 @@ public class THBaseService {
       }
     }
 
-    public void checkAndDelete(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback<checkAndDelete_call> resultHandler) throws org.apache.thrift.TException {
+    public void checkAndDelete(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       checkAndDelete_call method_call = new checkAndDelete_call(table, row, family, qualifier, value, tdelete, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1114,7 +1118,7 @@ public class THBaseService {
       private ByteBuffer qualifier;
       private ByteBuffer value;
       private TDelete tdelete;
-      public checkAndDelete_call(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback<checkAndDelete_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public checkAndDelete_call(ByteBuffer table, ByteBuffer row, ByteBuffer family, ByteBuffer qualifier, ByteBuffer value, TDelete tdelete, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.row = row;
@@ -1147,7 +1151,7 @@ public class THBaseService {
       }
     }
 
-    public void increment(ByteBuffer table, TIncrement tincrement, org.apache.thrift.async.AsyncMethodCallback<increment_call> resultHandler) throws org.apache.thrift.TException {
+    public void increment(ByteBuffer table, TIncrement tincrement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       increment_call method_call = new increment_call(table, tincrement, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1157,7 +1161,7 @@ public class THBaseService {
     public static class increment_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TIncrement tincrement;
-      public increment_call(ByteBuffer table, TIncrement tincrement, org.apache.thrift.async.AsyncMethodCallback<increment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public increment_call(ByteBuffer table, TIncrement tincrement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tincrement = tincrement;
@@ -1182,7 +1186,7 @@ public class THBaseService {
       }
     }
 
-    public void append(ByteBuffer table, TAppend tappend, org.apache.thrift.async.AsyncMethodCallback<append_call> resultHandler) throws org.apache.thrift.TException {
+    public void append(ByteBuffer table, TAppend tappend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       append_call method_call = new append_call(table, tappend, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1192,7 +1196,7 @@ public class THBaseService {
     public static class append_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TAppend tappend;
-      public append_call(ByteBuffer table, TAppend tappend, org.apache.thrift.async.AsyncMethodCallback<append_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public append_call(ByteBuffer table, TAppend tappend, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tappend = tappend;
@@ -1217,7 +1221,7 @@ public class THBaseService {
       }
     }
 
-    public void openScanner(ByteBuffer table, TScan tscan, org.apache.thrift.async.AsyncMethodCallback<openScanner_call> resultHandler) throws org.apache.thrift.TException {
+    public void openScanner(ByteBuffer table, TScan tscan, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       openScanner_call method_call = new openScanner_call(table, tscan, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1227,7 +1231,7 @@ public class THBaseService {
     public static class openScanner_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TScan tscan;
-      public openScanner_call(ByteBuffer table, TScan tscan, org.apache.thrift.async.AsyncMethodCallback<openScanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public openScanner_call(ByteBuffer table, TScan tscan, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tscan = tscan;
@@ -1252,7 +1256,7 @@ public class THBaseService {
       }
     }
 
-    public void getScannerRows(int scannerId, int numRows, org.apache.thrift.async.AsyncMethodCallback<getScannerRows_call> resultHandler) throws org.apache.thrift.TException {
+    public void getScannerRows(int scannerId, int numRows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getScannerRows_call method_call = new getScannerRows_call(scannerId, numRows, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1262,7 +1266,7 @@ public class THBaseService {
     public static class getScannerRows_call extends org.apache.thrift.async.TAsyncMethodCall {
       private int scannerId;
       private int numRows;
-      public getScannerRows_call(int scannerId, int numRows, org.apache.thrift.async.AsyncMethodCallback<getScannerRows_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getScannerRows_call(int scannerId, int numRows, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.scannerId = scannerId;
         this.numRows = numRows;
@@ -1287,7 +1291,7 @@ public class THBaseService {
       }
     }
 
-    public void closeScanner(int scannerId, org.apache.thrift.async.AsyncMethodCallback<closeScanner_call> resultHandler) throws org.apache.thrift.TException {
+    public void closeScanner(int scannerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       closeScanner_call method_call = new closeScanner_call(scannerId, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1296,7 +1300,7 @@ public class THBaseService {
 
     public static class closeScanner_call extends org.apache.thrift.async.TAsyncMethodCall {
       private int scannerId;
-      public closeScanner_call(int scannerId, org.apache.thrift.async.AsyncMethodCallback<closeScanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public closeScanner_call(int scannerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.scannerId = scannerId;
       }
@@ -1319,7 +1323,7 @@ public class THBaseService {
       }
     }
 
-    public void mutateRow(ByteBuffer table, TRowMutations trowMutations, org.apache.thrift.async.AsyncMethodCallback<mutateRow_call> resultHandler) throws org.apache.thrift.TException {
+    public void mutateRow(ByteBuffer table, TRowMutations trowMutations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       mutateRow_call method_call = new mutateRow_call(table, trowMutations, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1329,7 +1333,7 @@ public class THBaseService {
     public static class mutateRow_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
       private TRowMutations trowMutations;
-      public mutateRow_call(ByteBuffer table, TRowMutations trowMutations, org.apache.thrift.async.AsyncMethodCallback<mutateRow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public mutateRow_call(ByteBuffer table, TRowMutations trowMutations, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.trowMutations = trowMutations;
@@ -1354,7 +1358,7 @@ public class THBaseService {
       }
     }
 
-    public void getScannerResults(ByteBuffer table, TScan tscan, int numRows, org.apache.thrift.async.AsyncMethodCallback<getScannerResults_call> resultHandler) throws org.apache.thrift.TException {
+    public void getScannerResults(ByteBuffer table, TScan tscan, int numRows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getScannerResults_call method_call = new getScannerResults_call(table, tscan, numRows, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1365,7 +1369,7 @@ public class THBaseService {
       private ByteBuffer table;
       private TScan tscan;
       private int numRows;
-      public getScannerResults_call(ByteBuffer table, TScan tscan, int numRows, org.apache.thrift.async.AsyncMethodCallback<getScannerResults_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getScannerResults_call(ByteBuffer table, TScan tscan, int numRows, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.tscan = tscan;
@@ -1392,7 +1396,7 @@ public class THBaseService {
       }
     }
 
-    public void getRegionLocation(ByteBuffer table, ByteBuffer row, boolean reload, org.apache.thrift.async.AsyncMethodCallback<getRegionLocation_call> resultHandler) throws org.apache.thrift.TException {
+    public void getRegionLocation(ByteBuffer table, ByteBuffer row, boolean reload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getRegionLocation_call method_call = new getRegionLocation_call(table, row, reload, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1403,7 +1407,7 @@ public class THBaseService {
       private ByteBuffer table;
       private ByteBuffer row;
       private boolean reload;
-      public getRegionLocation_call(ByteBuffer table, ByteBuffer row, boolean reload, org.apache.thrift.async.AsyncMethodCallback<getRegionLocation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getRegionLocation_call(ByteBuffer table, ByteBuffer row, boolean reload, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
         this.row = row;
@@ -1430,7 +1434,7 @@ public class THBaseService {
       }
     }
 
-    public void getAllRegionLocations(ByteBuffer table, org.apache.thrift.async.AsyncMethodCallback<getAllRegionLocations_call> resultHandler) throws org.apache.thrift.TException {
+    public void getAllRegionLocations(ByteBuffer table, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
       getAllRegionLocations_call method_call = new getAllRegionLocations_call(table, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
@@ -1439,7 +1443,7 @@ public class THBaseService {
 
     public static class getAllRegionLocations_call extends org.apache.thrift.async.TAsyncMethodCall {
       private ByteBuffer table;
-      public getAllRegionLocations_call(ByteBuffer table, org.apache.thrift.async.AsyncMethodCallback<getAllRegionLocations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+      public getAllRegionLocations_call(ByteBuffer table, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.table = table;
       }
@@ -1938,7 +1942,1076 @@ public class THBaseService {
 
   }
 
-  public static class exists_args implements org.apache.thrift.TBase<exists_args, exists_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
+    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
+    public AsyncProcessor(I iface) {
+      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
+    }
+
+    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
+      super(iface, getProcessMap(processMap));
+    }
+
+    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
+      processMap.put("exists", new exists());
+      processMap.put("get", new get());
+      processMap.put("getMultiple", new getMultiple());
+      processMap.put("put", new put());
+      processMap.put("checkAndPut", new checkAndPut());
+      processMap.put("putMultiple", new putMultiple());
+      processMap.put("deleteSingle", new deleteSingle());
+      processMap.put("deleteMultiple", new deleteMultiple());
+      processMap.put("checkAndDelete", new checkAndDelete());
+      processMap.put("increment", new increment());
+      processMap.put("append", new append());
+      processMap.put("openScanner", new openScanner());
+      processMap.put("getScannerRows", new getScannerRows());
+      processMap.put("closeScanner", new closeScanner());
+      processMap.put("mutateRow", new mutateRow());
+      processMap.put("getScannerResults", new getScannerResults());
+      processMap.put("getRegionLocation", new getRegionLocation());
+      processMap.put("getAllRegionLocations", new getAllRegionLocations());
+      return processMap;
+    }
+
+    public static class exists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exists_args, Boolean> {
+      public exists() {
+        super("exists");
+      }
+
+      public exists_args getEmptyArgsInstance() {
+        return new exists_args();
+      }
+
+      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Boolean>() { 
+          public void onComplete(Boolean o) {
+            exists_result result = new exists_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            exists_result result = new exists_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, exists_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
+        iface.exists(args.table, args.tget,resultHandler);
+      }
+    }
+
+    public static class get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_args, TResult> {
+      public get() {
+        super("get");
+      }
+
+      public get_args getEmptyArgsInstance() {
+        return new get_args();
+      }
+
+      public AsyncMethodCallback<TResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<TResult>() { 
+          public void onComplete(TResult o) {
+            get_result result = new get_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            get_result result = new get_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, get_args args, org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws TException {
+        iface.get(args.table, args.tget,resultHandler);
+      }
+    }
+
+    public static class getMultiple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiple_args, List<TResult>> {
+      public getMultiple() {
+        super("getMultiple");
+      }
+
+      public getMultiple_args getEmptyArgsInstance() {
+        return new getMultiple_args();
+      }
+
+      public AsyncMethodCallback<List<TResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TResult>>() { 
+          public void onComplete(List<TResult> o) {
+            getMultiple_result result = new getMultiple_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getMultiple_result result = new getMultiple_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getMultiple_args args, org.apache.thrift.async.AsyncMethodCallback<List<TResult>> resultHandler) throws TException {
+        iface.getMultiple(args.table, args.tgets,resultHandler);
+      }
+    }
+
+    public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, Void> {
+      public put() {
+        super("put");
+      }
+
+      public put_args getEmptyArgsInstance() {
+        return new put_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            put_result result = new put_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            put_result result = new put_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.put(args.table, args.tput,resultHandler);
+      }
+    }
+
+    public static class checkAndPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAndPut_args, Boolean> {
+      public checkAndPut() {
+        super("checkAndPut");
+      }
+
+      public checkAndPut_args getEmptyArgsInstance() {
+        return new checkAndPut_args();
+      }
+
+      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Boolean>() { 
+          public void onComplete(Boolean o) {
+            checkAndPut_result result = new checkAndPut_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            checkAndPut_result result = new checkAndPut_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, checkAndPut_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
+        iface.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.tput,resultHandler);
+      }
+    }
+
+    public static class putMultiple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putMultiple_args, Void> {
+      public putMultiple() {
+        super("putMultiple");
+      }
+
+      public putMultiple_args getEmptyArgsInstance() {
+        return new putMultiple_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            putMultiple_result result = new putMultiple_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            putMultiple_result result = new putMultiple_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, putMultiple_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.putMultiple(args.table, args.tputs,resultHandler);
+      }
+    }
+
+    public static class deleteSingle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSingle_args, Void> {
+      public deleteSingle() {
+        super("deleteSingle");
+      }
+
+      public deleteSingle_args getEmptyArgsInstance() {
+        return new deleteSingle_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            deleteSingle_result result = new deleteSingle_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteSingle_result result = new deleteSingle_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteSingle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.deleteSingle(args.table, args.tdelete,resultHandler);
+      }
+    }
+
+    public static class deleteMultiple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMultiple_args, List<TDelete>> {
+      public deleteMultiple() {
+        super("deleteMultiple");
+      }
+
+      public deleteMultiple_args getEmptyArgsInstance() {
+        return new deleteMultiple_args();
+      }
+
+      public AsyncMethodCallback<List<TDelete>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TDelete>>() { 
+          public void onComplete(List<TDelete> o) {
+            deleteMultiple_result result = new deleteMultiple_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            deleteMultiple_result result = new deleteMultiple_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, deleteMultiple_args args, org.apache.thrift.async.AsyncMethodCallback<List<TDelete>> resultHandler) throws TException {
+        iface.deleteMultiple(args.table, args.tdeletes,resultHandler);
+      }
+    }
+
+    public static class checkAndDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAndDelete_args, Boolean> {
+      public checkAndDelete() {
+        super("checkAndDelete");
+      }
+
+      public checkAndDelete_args getEmptyArgsInstance() {
+        return new checkAndDelete_args();
+      }
+
+      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Boolean>() { 
+          public void onComplete(Boolean o) {
+            checkAndDelete_result result = new checkAndDelete_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            checkAndDelete_result result = new checkAndDelete_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, checkAndDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
+        iface.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.tdelete,resultHandler);
+      }
+    }
+
+    public static class increment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, increment_args, TResult> {
+      public increment() {
+        super("increment");
+      }
+
+      public increment_args getEmptyArgsInstance() {
+        return new increment_args();
+      }
+
+      public AsyncMethodCallback<TResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<TResult>() { 
+          public void onComplete(TResult o) {
+            increment_result result = new increment_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            increment_result result = new increment_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, increment_args args, org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws TException {
+        iface.increment(args.table, args.tincrement,resultHandler);
+      }
+    }
+
+    public static class append<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, append_args, TResult> {
+      public append() {
+        super("append");
+      }
+
+      public append_args getEmptyArgsInstance() {
+        return new append_args();
+      }
+
+      public AsyncMethodCallback<TResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<TResult>() { 
+          public void onComplete(TResult o) {
+            append_result result = new append_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            append_result result = new append_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, append_args args, org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws TException {
+        iface.append(args.table, args.tappend,resultHandler);
+      }
+    }
+
+    public static class openScanner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openScanner_args, Integer> {
+      public openScanner() {
+        super("openScanner");
+      }
+
+      public openScanner_args getEmptyArgsInstance() {
+        return new openScanner_args();
+      }
+
+      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Integer>() { 
+          public void onComplete(Integer o) {
+            openScanner_result result = new openScanner_result();
+            result.success = o;
+            result.setSuccessIsSet(true);
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            openScanner_result result = new openScanner_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, openScanner_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
+        iface.openScanner(args.table, args.tscan,resultHandler);
+      }
+    }
+
+    public static class getScannerRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getScannerRows_args, List<TResult>> {
+      public getScannerRows() {
+        super("getScannerRows");
+      }
+
+      public getScannerRows_args getEmptyArgsInstance() {
+        return new getScannerRows_args();
+      }
+
+      public AsyncMethodCallback<List<TResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TResult>>() { 
+          public void onComplete(List<TResult> o) {
+            getScannerRows_result result = new getScannerRows_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getScannerRows_result result = new getScannerRows_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof TIllegalArgument) {
+                        result.ia = (TIllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getScannerRows_args args, org.apache.thrift.async.AsyncMethodCallback<List<TResult>> resultHandler) throws TException {
+        iface.getScannerRows(args.scannerId, args.numRows,resultHandler);
+      }
+    }
+
+    public static class closeScanner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeScanner_args, Void> {
+      public closeScanner() {
+        super("closeScanner");
+      }
+
+      public closeScanner_args getEmptyArgsInstance() {
+        return new closeScanner_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            closeScanner_result result = new closeScanner_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            closeScanner_result result = new closeScanner_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof TIllegalArgument) {
+                        result.ia = (TIllegalArgument) e;
+                        result.setIaIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, closeScanner_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.closeScanner(args.scannerId,resultHandler);
+      }
+    }
+
+    public static class mutateRow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mutateRow_args, Void> {
+      public mutateRow() {
+        super("mutateRow");
+      }
+
+      public mutateRow_args getEmptyArgsInstance() {
+        return new mutateRow_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            mutateRow_result result = new mutateRow_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            mutateRow_result result = new mutateRow_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, mutateRow_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.mutateRow(args.table, args.trowMutations,resultHandler);
+      }
+    }
+
+    public static class getScannerResults<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getScannerResults_args, List<TResult>> {
+      public getScannerResults() {
+        super("getScannerResults");
+      }
+
+      public getScannerResults_args getEmptyArgsInstance() {
+        return new getScannerResults_args();
+      }
+
+      public AsyncMethodCallback<List<TResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<TResult>>() { 
+          public void onComplete(List<TResult> o) {
+            getScannerResults_result result = new getScannerResults_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getScannerResults_result result = new getScannerResults_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getScannerResults_args args, org.apache.thrift.async.AsyncMethodCallback<List<TResult>> resultHandler) throws TException {
+        iface.getScannerResults(args.table, args.tscan, args.numRows,resultHandler);
+      }
+    }
+
+    public static class getRegionLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegionLocation_args, THRegionLocation> {
+      public getRegionLocation() {
+        super("getRegionLocation");
+      }
+
+      public getRegionLocation_args getEmptyArgsInstance() {
+        return new getRegionLocation_args();
+      }
+
+      public AsyncMethodCallback<THRegionLocation> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<THRegionLocation>() { 
+          public void onComplete(THRegionLocation o) {
+            getRegionLocation_result result = new getRegionLocation_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getRegionLocation_result result = new getRegionLocation_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getRegionLocation_args args, org.apache.thrift.async.AsyncMethodCallback<THRegionLocation> resultHandler) throws TException {
+        iface.getRegionLocation(args.table, args.row, args.reload,resultHandler);
+      }
+    }
+
+    public static class getAllRegionLocations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRegionLocations_args, List<THRegionLocation>> {
+      public getAllRegionLocations() {
+        super("getAllRegionLocations");
+      }
+
+      public getAllRegionLocations_args getEmptyArgsInstance() {
+        return new getAllRegionLocations_args();
+      }
+
+      public AsyncMethodCallback<List<THRegionLocation>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<List<THRegionLocation>>() { 
+          public void onComplete(List<THRegionLocation> o) {
+            getAllRegionLocations_result result = new getAllRegionLocations_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getAllRegionLocations_result result = new getAllRegionLocations_result();
+            if (e instanceof TIOError) {
+                        result.io = (TIOError) e;
+                        result.setIoIsSet(true);
+                        msg = result;
+            }
+             else 
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
+            }
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
+            }
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getAllRegionLocations_args args, org.apache.thrift.async.AsyncMethodCallback<List<THRegionLocation>> resultHandler) throws TException {
+        iface.getAllRegionLocations(args.table,resultHandler);
+      }
+    }
+
+  }
+
+  public static class exists_args implements org.apache.thrift.TBase<exists_args, exists_args._Fields>, java.io.Serializable, Cloneable, Comparable<exists_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -2046,7 +3119,7 @@ public class THBaseService {
       TGet tget)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tget = tget;
     }
 
@@ -2056,7 +3129,6 @@ public class THBaseService {
     public exists_args(exists_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTget()) {
         this.tget = new TGet(other.tget);
@@ -2082,19 +3154,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to check on
      */
     public exists_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public exists_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -2227,45 +3299,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tget = true && (isSetTget());
-      builder.append(present_tget);
+      list.add(present_tget);
       if (present_tget)
-        builder.append(tget);
+        list.add(tget);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(exists_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      exists_args typedOther = (exists_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTget()).compareTo(typedOther.isSetTget());
+      lastComparison = Boolean.valueOf(isSetTget()).compareTo(other.isSetTget());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTget()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tget, typedOther.tget);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tget, other.tget);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -2433,7 +3505,7 @@ public class THBaseService {
 
   }
 
-  public static class exists_result implements org.apache.thrift.TBase<exists_result, exists_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class exists_result implements org.apache.thrift.TBase<exists_result, exists_result._Fields>, java.io.Serializable, Cloneable, Comparable<exists_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
@@ -2629,7 +3701,7 @@ public class THBaseService {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Boolean.valueOf(isSuccess());
+        return isSuccess();
 
       case IO:
         return getIo();
@@ -2689,45 +3761,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(exists_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      exists_result typedOther = (exists_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -2901,7 +3973,7 @@ public class THBaseService {
 
   }
 
-  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -3009,7 +4081,7 @@ public class THBaseService {
       TGet tget)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tget = tget;
     }
 
@@ -3019,7 +4091,6 @@ public class THBaseService {
     public get_args(get_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTget()) {
         this.tget = new TGet(other.tget);
@@ -3045,19 +4116,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to get from
      */
     public get_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public get_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -3190,45 +4261,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tget = true && (isSetTget());
-      builder.append(present_tget);
+      list.add(present_tget);
       if (present_tget)
-        builder.append(tget);
+        list.add(tget);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(get_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_args typedOther = (get_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTget()).compareTo(typedOther.isSetTget());
+      lastComparison = Boolean.valueOf(isSetTget()).compareTo(other.isSetTget());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTget()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tget, typedOther.tget);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tget, other.tget);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -3396,7 +4467,7 @@ public class THBaseService {
 
   }
 
-  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
@@ -3650,45 +4721,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(get_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_result typedOther = (get_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -3869,7 +4940,7 @@ public class THBaseService {
 
   }
 
-  public static class getMultiple_args implements org.apache.thrift.TBase<getMultiple_args, getMultiple_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getMultiple_args implements org.apache.thrift.TBase<getMultiple_args, getMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiple_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiple_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -3982,7 +5053,7 @@ public class THBaseService {
       List<TGet> tgets)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tgets = tgets;
     }
 
@@ -3992,10 +5063,9 @@ public class THBaseService {
     public getMultiple_args(getMultiple_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTgets()) {
-        List<TGet> __this__tgets = new ArrayList<TGet>();
+        List<TGet> __this__tgets = new ArrayList<TGet>(other.tgets.size());
         for (TGet other_element : other.tgets) {
           __this__tgets.add(new TGet(other_element));
         }
@@ -4022,19 +5092,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to get from
      */
     public getMultiple_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public getMultiple_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -4186,45 +5256,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tgets = true && (isSetTgets());
-      builder.append(present_tgets);
+      list.add(present_tgets);
       if (present_tgets)
-        builder.append(tgets);
+        list.add(tgets);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getMultiple_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getMultiple_args typedOther = (getMultiple_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTgets()).compareTo(typedOther.isSetTgets());
+      lastComparison = Boolean.valueOf(isSetTgets()).compareTo(other.isSetTgets());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTgets()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tgets, typedOther.tgets);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tgets, other.tgets);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -4326,12 +5396,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                   struct.tgets = new ArrayList<TGet>(_list132.size);
-                  for (int _i133 = 0; _i133 < _list132.size; ++_i133)
+                  TGet _elem133;
+                  for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                   {
-                    TGet _elem134; // required
-                    _elem134 = new TGet();
-                    _elem134.read(iprot);
-                    struct.tgets.add(_elem134);
+                    _elem133 = new TGet();
+                    _elem133.read(iprot);
+                    struct.tgets.add(_elem133);
                   }
                   iprot.readListEnd();
                 }
@@ -4407,12 +5477,12 @@ public class THBaseService {
         {
           org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.tgets = new ArrayList<TGet>(_list137.size);
-          for (int _i138 = 0; _i138 < _list137.size; ++_i138)
+          TGet _elem138;
+          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
           {
-            TGet _elem139; // required
-            _elem139 = new TGet();
-            _elem139.read(iprot);
-            struct.tgets.add(_elem139);
+            _elem138 = new TGet();
+            _elem138.read(iprot);
+            struct.tgets.add(_elem138);
           }
         }
         struct.setTgetsIsSet(true);
@@ -4421,7 +5491,7 @@ public class THBaseService {
 
   }
 
-  public static class getMultiple_result implements org.apache.thrift.TBase<getMultiple_result, getMultiple_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getMultiple_result implements org.apache.thrift.TBase<getMultiple_result, getMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiple_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiple_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -4527,7 +5597,7 @@ public class THBaseService {
      */
     public getMultiple_result(getMultiple_result other) {
       if (other.isSetSuccess()) {
-        List<TResult> __this__success = new ArrayList<TResult>();
+        List<TResult> __this__success = new ArrayList<TResult>(other.success.size());
         for (TResult other_element : other.success) {
           __this__success.add(new TResult(other_element));
         }
@@ -4695,45 +5765,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getMultiple_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getMultiple_result typedOther = (getMultiple_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -4821,12 +5891,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                   struct.success = new ArrayList<TResult>(_list140.size);
-                  for (int _i141 = 0; _i141 < _list140.size; ++_i141)
+                  TResult _elem141;
+                  for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                   {
-                    TResult _elem142; // required
-                    _elem142 = new TResult();
-                    _elem142.read(iprot);
-                    struct.success.add(_elem142);
+                    _elem141 = new TResult();
+                    _elem141.read(iprot);
+                    struct.success.add(_elem141);
                   }
                   iprot.readListEnd();
                 }
@@ -4923,12 +5993,12 @@ public class THBaseService {
           {
             org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TResult>(_list145.size);
-            for (int _i146 = 0; _i146 < _list145.size; ++_i146)
+            TResult _elem146;
+            for (int _i147 = 0; _i147 < _list145.size; ++_i147)
             {
-              TResult _elem147; // required
-              _elem147 = new TResult();
-              _elem147.read(iprot);
-              struct.success.add(_elem147);
+              _elem146 = new TResult();
+              _elem146.read(iprot);
+              struct.success.add(_elem146);
             }
           }
           struct.setSuccessIsSet(true);
@@ -4943,7 +6013,7 @@ public class THBaseService {
 
   }
 
-  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -5051,7 +6121,7 @@ public class THBaseService {
       TPut tput)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tput = tput;
     }
 
@@ -5061,7 +6131,6 @@ public class THBaseService {
     public put_args(put_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTput()) {
         this.tput = new TPut(other.tput);
@@ -5087,19 +6156,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to put data in
      */
     public put_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public put_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -5232,45 +6301,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tput = true && (isSetTput());
-      builder.append(present_tput);
+      list.add(present_tput);
       if (present_tput)
-        builder.append(tput);
+        list.add(tput);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(put_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      put_args typedOther = (put_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTput()).compareTo(typedOther.isSetTput());
+      lastComparison = Boolean.valueOf(isSetTput()).compareTo(other.isSetTput());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTput()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tput, typedOther.tput);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tput, other.tput);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -5438,7 +6507,7 @@ public class THBaseService {
 
   }
 
-  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -5633,30 +6702,30 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(put_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      put_result typedOther = (put_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -5801,7 +6870,7 @@ public class THBaseService {
 
   }
 
-  public static class checkAndPut_args implements org.apache.thrift.TBase<checkAndPut_args, checkAndPut_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class checkAndPut_args implements org.apache.thrift.TBase<checkAndPut_args, checkAndPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndPut_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndPut_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -5969,11 +7038,11 @@ public class THBaseService {
       TPut tput)
     {
       this();
-      this.table = table;
-      this.row = row;
-      this.family = family;
-      this.qualifier = qualifier;
-      this.value = value;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
+      this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
+      this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
       this.tput = tput;
     }
 
@@ -5983,23 +7052,18 @@ public class THBaseService {
     public checkAndPut_args(checkAndPut_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetRow()) {
         this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
       }
       if (other.isSetFamily()) {
         this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
-;
       }
       if (other.isSetQualifier()) {
         this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
-;
       }
       if (other.isSetValue()) {
         this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
-;
       }
       if (other.isSetTput()) {
         this.tput = new TPut(other.tput);
@@ -6029,19 +7093,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * to check in and put to
      */
     public checkAndPut_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public checkAndPut_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -6069,19 +7133,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row to check
      */
     public checkAndPut_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public checkAndPut_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -6109,19 +7173,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForFamily() {
-      return family;
+      return org.apache.thrift.TBaseHelper.copyBinary(family);
     }
 
     /**
      * column family to check
      */
     public checkAndPut_args setFamily(byte[] family) {
-      setFamily(family == null ? (ByteBuffer)null : ByteBuffer.wrap(family));
+      this.family = family == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(family, family.length));
       return this;
     }
 
     public checkAndPut_args setFamily(ByteBuffer family) {
-      this.family = family;
+      this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
       return this;
     }
 
@@ -6149,19 +7213,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForQualifier() {
-      return qualifier;
+      return org.apache.thrift.TBaseHelper.copyBinary(qualifier);
     }
 
     /**
      * column qualifier to check
      */
     public checkAndPut_args setQualifier(byte[] qualifier) {
-      setQualifier(qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(qualifier));
+      this.qualifier = qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(qualifier, qualifier.length));
       return this;
     }
 
     public checkAndPut_args setQualifier(ByteBuffer qualifier) {
-      this.qualifier = qualifier;
+      this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
       return this;
     }
 
@@ -6191,7 +7255,7 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForValue() {
-      return value;
+      return org.apache.thrift.TBaseHelper.copyBinary(value);
     }
 
     /**
@@ -6200,12 +7264,12 @@ public class THBaseService {
      * column in question
      */
     public checkAndPut_args setValue(byte[] value) {
-      setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
+      this.value = value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(value, value.length));
       return this;
     }
 
     public checkAndPut_args setValue(ByteBuffer value) {
-      this.value = value;
+      this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
       return this;
     }
 
@@ -6426,105 +7490,105 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_family = true && (isSetFamily());
-      builder.append(present_family);
+      list.add(present_family);
       if (present_family)
-        builder.append(family);
+        list.add(family);
 
       boolean present_qualifier = true && (isSetQualifier());
-      builder.append(present_qualifier);
+      list.add(present_qualifier);
       if (present_qualifier)
-        builder.append(qualifier);
+        list.add(qualifier);
 
       boolean present_value = true && (isSetValue());
-      builder.append(present_value);
+      list.add(present_value);
       if (present_value)
-        builder.append(value);
+        list.add(value);
 
       boolean present_tput = true && (isSetTput());
-      builder.append(present_tput);
+      list.add(present_tput);
       if (present_tput)
-        builder.append(tput);
+        list.add(tput);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(checkAndPut_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      checkAndPut_args typedOther = (checkAndPut_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
+      lastComparison = Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetFamily()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(typedOther.isSetQualifier());
+      lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetQualifier()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, typedOther.qualifier);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetValue()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTput()).compareTo(typedOther.isSetTput());
+      lastComparison = Boolean.valueOf(isSetTput()).compareTo(other.isSetTput());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTput()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tput, typedOther.tput);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tput, other.tput);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -6807,7 +7871,7 @@ public class THBaseService {
 
   }
 
-  public static class checkAndPut_result implements org.apache.thrift.TBase<checkAndPut_result, checkAndPut_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class checkAndPut_result implements org.apache.thrift.TBase<checkAndPut_result, checkAndPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndPut_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndPut_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
@@ -7003,7 +8067,7 @@ public class THBaseService {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Boolean.valueOf(isSuccess());
+        return isSuccess();
 
       case IO:
         return getIo();
@@ -7063,45 +8127,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(checkAndPut_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      checkAndPut_result typedOther = (checkAndPut_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -7275,7 +8339,7 @@ public class THBaseService {
 
   }
 
-  public static class putMultiple_args implements org.apache.thrift.TBase<putMultiple_args, putMultiple_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class putMultiple_args implements org.apache.thrift.TBase<putMultiple_args, putMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<putMultiple_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putMultiple_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -7384,7 +8448,7 @@ public class THBaseService {
       List<TPut> tputs)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tputs = tputs;
     }
 
@@ -7394,10 +8458,9 @@ public class THBaseService {
     public putMultiple_args(putMultiple_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTputs()) {
-        List<TPut> __this__tputs = new ArrayList<TPut>();
+        List<TPut> __this__tputs = new ArrayList<TPut>(other.tputs.size());
         for (TPut other_element : other.tputs) {
           __this__tputs.add(new TPut(other_element));
         }
@@ -7424,19 +8487,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to put data in
      */
     public putMultiple_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public putMultiple_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -7584,45 +8647,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tputs = true && (isSetTputs());
-      builder.append(present_tputs);
+      list.add(present_tputs);
       if (present_tputs)
-        builder.append(tputs);
+        list.add(tputs);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(putMultiple_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      putMultiple_args typedOther = (putMultiple_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTputs()).compareTo(typedOther.isSetTputs());
+      lastComparison = Boolean.valueOf(isSetTputs()).compareTo(other.isSetTputs());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTputs()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tputs, typedOther.tputs);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tputs, other.tputs);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -7724,12 +8787,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                   struct.tputs = new ArrayList<TPut>(_list148.size);
-                  for (int _i149 = 0; _i149 < _list148.size; ++_i149)
+                  TPut _elem149;
+                  for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                   {
-                    TPut _elem150; // required
-                    _elem150 = new TPut();
-                    _elem150.read(iprot);
-                    struct.tputs.add(_elem150);
+                    _elem149 = new TPut();
+                    _elem149.read(iprot);
+                    struct.tputs.add(_elem149);
                   }
                   iprot.readListEnd();
                 }
@@ -7805,12 +8868,12 @@ public class THBaseService {
         {
           org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.tputs = new ArrayList<TPut>(_list153.size);
-          for (int _i154 = 0; _i154 < _list153.size; ++_i154)
+          TPut _elem154;
+          for (int _i155 = 0; _i155 < _list153.size; ++_i155)
           {
-            TPut _elem155; // required
-            _elem155 = new TPut();
-            _elem155.read(iprot);
-            struct.tputs.add(_elem155);
+            _elem154 = new TPut();
+            _elem154.read(iprot);
+            struct.tputs.add(_elem154);
           }
         }
         struct.setTputsIsSet(true);
@@ -7819,7 +8882,7 @@ public class THBaseService {
 
   }
 
-  public static class putMultiple_result implements org.apache.thrift.TBase<putMultiple_result, putMultiple_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class putMultiple_result implements org.apache.thrift.TBase<putMultiple_result, putMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<putMultiple_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putMultiple_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -8014,30 +9077,30 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(putMultiple_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      putMultiple_result typedOther = (putMultiple_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -8182,7 +9245,7 @@ public class THBaseService {
 
   }
 
-  public static class deleteSingle_args implements org.apache.thrift.TBase<deleteSingle_args, deleteSingle_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteSingle_args implements org.apache.thrift.TBase<deleteSingle_args, deleteSingle_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSingle_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSingle_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -8290,7 +9353,7 @@ public class THBaseService {
       TDelete tdelete)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tdelete = tdelete;
     }
 
@@ -8300,7 +9363,6 @@ public class THBaseService {
     public deleteSingle_args(deleteSingle_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTdelete()) {
         this.tdelete = new TDelete(other.tdelete);
@@ -8326,19 +9388,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to delete from
      */
     public deleteSingle_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public deleteSingle_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -8471,45 +9533,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tdelete = true && (isSetTdelete());
-      builder.append(present_tdelete);
+      list.add(present_tdelete);
       if (present_tdelete)
-        builder.append(tdelete);
+        list.add(tdelete);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteSingle_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteSingle_args typedOther = (deleteSingle_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTdelete()).compareTo(typedOther.isSetTdelete());
+      lastComparison = Boolean.valueOf(isSetTdelete()).compareTo(other.isSetTdelete());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTdelete()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdelete, typedOther.tdelete);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdelete, other.tdelete);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -8677,7 +9739,7 @@ public class THBaseService {
 
   }
 
-  public static class deleteSingle_result implements org.apache.thrift.TBase<deleteSingle_result, deleteSingle_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteSingle_result implements org.apache.thrift.TBase<deleteSingle_result, deleteSingle_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSingle_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSingle_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -8872,30 +9934,30 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteSingle_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteSingle_result typedOther = (deleteSingle_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -9040,7 +10102,7 @@ public class THBaseService {
 
   }
 
-  public static class deleteMultiple_args implements org.apache.thrift.TBase<deleteMultiple_args, deleteMultiple_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteMultiple_args implements org.apache.thrift.TBase<deleteMultiple_args, deleteMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMultiple_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMultiple_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -9149,7 +10211,7 @@ public class THBaseService {
       List<TDelete> tdeletes)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tdeletes = tdeletes;
     }
 
@@ -9159,10 +10221,9 @@ public class THBaseService {
     public deleteMultiple_args(deleteMultiple_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTdeletes()) {
-        List<TDelete> __this__tdeletes = new ArrayList<TDelete>();
+        List<TDelete> __this__tdeletes = new ArrayList<TDelete>(other.tdeletes.size());
         for (TDelete other_element : other.tdeletes) {
           __this__tdeletes.add(new TDelete(other_element));
         }
@@ -9189,19 +10250,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to delete from
      */
     public deleteMultiple_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public deleteMultiple_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -9349,45 +10410,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tdeletes = true && (isSetTdeletes());
-      builder.append(present_tdeletes);
+      list.add(present_tdeletes);
       if (present_tdeletes)
-        builder.append(tdeletes);
+        list.add(tdeletes);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteMultiple_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteMultiple_args typedOther = (deleteMultiple_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTdeletes()).compareTo(typedOther.isSetTdeletes());
+      lastComparison = Boolean.valueOf(isSetTdeletes()).compareTo(other.isSetTdeletes());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTdeletes()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdeletes, typedOther.tdeletes);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdeletes, other.tdeletes);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -9489,12 +10550,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                   struct.tdeletes = new ArrayList<TDelete>(_list156.size);
-                  for (int _i157 = 0; _i157 < _list156.size; ++_i157)
+                  TDelete _elem157;
+                  for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                   {
-                    TDelete _elem158; // required
-                    _elem158 = new TDelete();
-                    _elem158.read(iprot);
-                    struct.tdeletes.add(_elem158);
+                    _elem157 = new TDelete();
+                    _elem157.read(iprot);
+                    struct.tdeletes.add(_elem157);
                   }
                   iprot.readListEnd();
                 }
@@ -9570,12 +10631,12 @@ public class THBaseService {
         {
           org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.tdeletes = new ArrayList<TDelete>(_list161.size);
-          for (int _i162 = 0; _i162 < _list161.size; ++_i162)
+          TDelete _elem162;
+          for (int _i163 = 0; _i163 < _list161.size; ++_i163)
           {
-            TDelete _elem163; // required
-            _elem163 = new TDelete();
-            _elem163.read(iprot);
-            struct.tdeletes.add(_elem163);
+            _elem162 = new TDelete();
+            _elem162.read(iprot);
+            struct.tdeletes.add(_elem162);
           }
         }
         struct.setTdeletesIsSet(true);
@@ -9584,7 +10645,7 @@ public class THBaseService {
 
   }
 
-  public static class deleteMultiple_result implements org.apache.thrift.TBase<deleteMultiple_result, deleteMultiple_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class deleteMultiple_result implements org.apache.thrift.TBase<deleteMultiple_result, deleteMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMultiple_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMultiple_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -9690,7 +10751,7 @@ public class THBaseService {
      */
     public deleteMultiple_result(deleteMultiple_result other) {
       if (other.isSetSuccess()) {
-        List<TDelete> __this__success = new ArrayList<TDelete>();
+        List<TDelete> __this__success = new ArrayList<TDelete>(other.success.size());
         for (TDelete other_element : other.success) {
           __this__success.add(new TDelete(other_element));
         }
@@ -9858,45 +10919,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(deleteMultiple_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      deleteMultiple_result typedOther = (deleteMultiple_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -9984,12 +11045,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                   struct.success = new ArrayList<TDelete>(_list164.size);
-                  for (int _i165 = 0; _i165 < _list164.size; ++_i165)
+                  TDelete _elem165;
+                  for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                   {
-                    TDelete _elem166; // required
-                    _elem166 = new TDelete();
-                    _elem166.read(iprot);
-                    struct.success.add(_elem166);
+                    _elem165 = new TDelete();
+                    _elem165.read(iprot);
+                    struct.success.add(_elem165);
                   }
                   iprot.readListEnd();
                 }
@@ -10086,12 +11147,12 @@ public class THBaseService {
           {
             org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TDelete>(_list169.size);
-            for (int _i170 = 0; _i170 < _list169.size; ++_i170)
+            TDelete _elem170;
+            for (int _i171 = 0; _i171 < _list169.size; ++_i171)
             {
-              TDelete _elem171; // required
-              _elem171 = new TDelete();
-              _elem171.read(iprot);
-              struct.success.add(_elem171);
+              _elem170 = new TDelete();
+              _elem170.read(iprot);
+              struct.success.add(_elem170);
             }
           }
           struct.setSuccessIsSet(true);
@@ -10106,7 +11167,7 @@ public class THBaseService {
 
   }
 
-  public static class checkAndDelete_args implements org.apache.thrift.TBase<checkAndDelete_args, checkAndDelete_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class checkAndDelete_args implements org.apache.thrift.TBase<checkAndDelete_args, checkAndDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndDelete_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndDelete_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -10274,11 +11335,11 @@ public class THBaseService {
       TDelete tdelete)
     {
       this();
-      this.table = table;
-      this.row = row;
-      this.family = family;
-      this.qualifier = qualifier;
-      this.value = value;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
+      this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
+      this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
+      this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
       this.tdelete = tdelete;
     }
 
@@ -10288,23 +11349,18 @@ public class THBaseService {
     public checkAndDelete_args(checkAndDelete_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetRow()) {
         this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
       }
       if (other.isSetFamily()) {
         this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
-;
       }
       if (other.isSetQualifier()) {
         this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(other.qualifier);
-;
       }
       if (other.isSetValue()) {
         this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
-;
       }
       if (other.isSetTdelete()) {
         this.tdelete = new TDelete(other.tdelete);
@@ -10334,19 +11390,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * to check in and delete from
      */
     public checkAndDelete_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public checkAndDelete_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -10374,19 +11430,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     /**
      * row to check
      */
     public checkAndDelete_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public checkAndDelete_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -10414,19 +11470,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForFamily() {
-      return family;
+      return org.apache.thrift.TBaseHelper.copyBinary(family);
     }
 
     /**
      * column family to check
      */
     public checkAndDelete_args setFamily(byte[] family) {
-      setFamily(family == null ? (ByteBuffer)null : ByteBuffer.wrap(family));
+      this.family = family == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(family, family.length));
       return this;
     }
 
     public checkAndDelete_args setFamily(ByteBuffer family) {
-      this.family = family;
+      this.family = org.apache.thrift.TBaseHelper.copyBinary(family);
       return this;
     }
 
@@ -10454,19 +11510,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForQualifier() {
-      return qualifier;
+      return org.apache.thrift.TBaseHelper.copyBinary(qualifier);
     }
 
     /**
      * column qualifier to check
      */
     public checkAndDelete_args setQualifier(byte[] qualifier) {
-      setQualifier(qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(qualifier));
+      this.qualifier = qualifier == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(qualifier, qualifier.length));
       return this;
     }
 
     public checkAndDelete_args setQualifier(ByteBuffer qualifier) {
-      this.qualifier = qualifier;
+      this.qualifier = org.apache.thrift.TBaseHelper.copyBinary(qualifier);
       return this;
     }
 
@@ -10496,7 +11552,7 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForValue() {
-      return value;
+      return org.apache.thrift.TBaseHelper.copyBinary(value);
     }
 
     /**
@@ -10505,12 +11561,12 @@ public class THBaseService {
      * column in question
      */
     public checkAndDelete_args setValue(byte[] value) {
-      setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
+      this.value = value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(value, value.length));
       return this;
     }
 
     public checkAndDelete_args setValue(ByteBuffer value) {
-      this.value = value;
+      this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
       return this;
     }
 
@@ -10731,105 +11787,105 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_family = true && (isSetFamily());
-      builder.append(present_family);
+      list.add(present_family);
       if (present_family)
-        builder.append(family);
+        list.add(family);
 
       boolean present_qualifier = true && (isSetQualifier());
-      builder.append(present_qualifier);
+      list.add(present_qualifier);
       if (present_qualifier)
-        builder.append(qualifier);
+        list.add(qualifier);
 
       boolean present_value = true && (isSetValue());
-      builder.append(present_value);
+      list.add(present_value);
       if (present_value)
-        builder.append(value);
+        list.add(value);
 
       boolean present_tdelete = true && (isSetTdelete());
-      builder.append(present_tdelete);
+      list.add(present_tdelete);
       if (present_tdelete)
-        builder.append(tdelete);
+        list.add(tdelete);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(checkAndDelete_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      checkAndDelete_args typedOther = (checkAndDelete_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
+      lastComparison = Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetFamily()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(typedOther.isSetQualifier());
+      lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(other.isSetQualifier());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetQualifier()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, typedOther.qualifier);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
+      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetValue()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTdelete()).compareTo(typedOther.isSetTdelete());
+      lastComparison = Boolean.valueOf(isSetTdelete()).compareTo(other.isSetTdelete());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTdelete()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdelete, typedOther.tdelete);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdelete, other.tdelete);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -11112,7 +12168,7 @@ public class THBaseService {
 
   }
 
-  public static class checkAndDelete_result implements org.apache.thrift.TBase<checkAndDelete_result, checkAndDelete_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class checkAndDelete_result implements org.apache.thrift.TBase<checkAndDelete_result, checkAndDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndDelete_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndDelete_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
@@ -11308,7 +12364,7 @@ public class THBaseService {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Boolean.valueOf(isSuccess());
+        return isSuccess();
 
       case IO:
         return getIo();
@@ -11368,45 +12424,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(checkAndDelete_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      checkAndDelete_result typedOther = (checkAndDelete_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -11580,7 +12636,7 @@ public class THBaseService {
 
   }
 
-  public static class increment_args implements org.apache.thrift.TBase<increment_args, increment_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class increment_args implements org.apache.thrift.TBase<increment_args, increment_args._Fields>, java.io.Serializable, Cloneable, Comparable<increment_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("increment_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -11688,7 +12744,7 @@ public class THBaseService {
       TIncrement tincrement)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tincrement = tincrement;
     }
 
@@ -11698,7 +12754,6 @@ public class THBaseService {
     public increment_args(increment_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTincrement()) {
         this.tincrement = new TIncrement(other.tincrement);
@@ -11724,19 +12779,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to increment the value on
      */
     public increment_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public increment_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -11869,45 +12924,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tincrement = true && (isSetTincrement());
-      builder.append(present_tincrement);
+      list.add(present_tincrement);
       if (present_tincrement)
-        builder.append(tincrement);
+        list.add(tincrement);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(increment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      increment_args typedOther = (increment_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTincrement()).compareTo(typedOther.isSetTincrement());
+      lastComparison = Boolean.valueOf(isSetTincrement()).compareTo(other.isSetTincrement());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTincrement()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tincrement, typedOther.tincrement);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tincrement, other.tincrement);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -12075,7 +13130,7 @@ public class THBaseService {
 
   }
 
-  public static class increment_result implements org.apache.thrift.TBase<increment_result, increment_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class increment_result implements org.apache.thrift.TBase<increment_result, increment_result._Fields>, java.io.Serializable, Cloneable, Comparable<increment_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("increment_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
@@ -12329,45 +13384,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(increment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      increment_result typedOther = (increment_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -12548,7 +13603,7 @@ public class THBaseService {
 
   }
 
-  public static class append_args implements org.apache.thrift.TBase<append_args, append_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class append_args implements org.apache.thrift.TBase<append_args, append_args._Fields>, java.io.Serializable, Cloneable, Comparable<append_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("append_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -12656,7 +13711,7 @@ public class THBaseService {
       TAppend tappend)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tappend = tappend;
     }
 
@@ -12666,7 +13721,6 @@ public class THBaseService {
     public append_args(append_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTappend()) {
         this.tappend = new TAppend(other.tappend);
@@ -12692,19 +13746,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to append the value on
      */
     public append_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public append_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -12837,45 +13891,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tappend = true && (isSetTappend());
-      builder.append(present_tappend);
+      list.add(present_tappend);
       if (present_tappend)
-        builder.append(tappend);
+        list.add(tappend);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(append_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      append_args typedOther = (append_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTappend()).compareTo(typedOther.isSetTappend());
+      lastComparison = Boolean.valueOf(isSetTappend()).compareTo(other.isSetTappend());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTappend()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tappend, typedOther.tappend);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tappend, other.tappend);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -13043,7 +14097,7 @@ public class THBaseService {
 
   }
 
-  public static class append_result implements org.apache.thrift.TBase<append_result, append_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class append_result implements org.apache.thrift.TBase<append_result, append_result._Fields>, java.io.Serializable, Cloneable, Comparable<append_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("append_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
@@ -13297,45 +14351,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(append_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      append_result typedOther = (append_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -13516,7 +14570,7 @@ public class THBaseService {
 
   }
 
-  public static class openScanner_args implements org.apache.thrift.TBase<openScanner_args, openScanner_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class openScanner_args implements org.apache.thrift.TBase<openScanner_args, openScanner_args._Fields>, java.io.Serializable, Cloneable, Comparable<openScanner_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openScanner_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -13624,7 +14678,7 @@ public class THBaseService {
       TScan tscan)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tscan = tscan;
     }
 
@@ -13634,7 +14688,6 @@ public class THBaseService {
     public openScanner_args(openScanner_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTscan()) {
         this.tscan = new TScan(other.tscan);
@@ -13660,19 +14713,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to get the Scanner for
      */
     public openScanner_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public openScanner_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -13805,45 +14858,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tscan = true && (isSetTscan());
-      builder.append(present_tscan);
+      list.add(present_tscan);
       if (present_tscan)
-        builder.append(tscan);
+        list.add(tscan);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(openScanner_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      openScanner_args typedOther = (openScanner_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTscan()).compareTo(typedOther.isSetTscan());
+      lastComparison = Boolean.valueOf(isSetTscan()).compareTo(other.isSetTscan());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTscan()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tscan, typedOther.tscan);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tscan, other.tscan);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -14011,7 +15064,7 @@ public class THBaseService {
 
   }
 
-  public static class openScanner_result implements org.apache.thrift.TBase<openScanner_result, openScanner_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class openScanner_result implements org.apache.thrift.TBase<openScanner_result, openScanner_result._Fields>, java.io.Serializable, Cloneable, Comparable<openScanner_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openScanner_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
@@ -14207,7 +15260,7 @@ public class THBaseService {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Integer.valueOf(getSuccess());
+        return getSuccess();
 
       case IO:
         return getIo();
@@ -14267,45 +15320,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true;
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(openScanner_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      openScanner_result typedOther = (openScanner_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -14479,7 +15532,7 @@ public class THBaseService {
 
   }
 
-  public static class getScannerRows_args implements org.apache.thrift.TBase<getScannerRows_args, getScannerRows_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getScannerRows_args implements org.apache.thrift.TBase<getScannerRows_args, getScannerRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerRows_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScannerRows_args");
 
     private static final org.apache.thrift.protocol.TField SCANNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scannerId", org.apache.thrift.protocol.TType.I32, (short)1);
@@ -14701,10 +15754,10 @@ public class THBaseService {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SCANNER_ID:
-        return Integer.valueOf(getScannerId());
+        return getScannerId();
 
       case NUM_ROWS:
-        return Integer.valueOf(getNumRows());
+        return getNumRows();
 
       }
       throw new IllegalStateException();
@@ -14761,45 +15814,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_scannerId = true;
-      builder.append(present_scannerId);
+      list.add(present_scannerId);
       if (present_scannerId)
-        builder.append(scannerId);
+        list.add(scannerId);
 
       boolean present_numRows = true;
-      builder.append(present_numRows);
+      list.add(present_numRows);
       if (present_numRows)
-        builder.append(numRows);
+        list.add(numRows);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getScannerRows_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getScannerRows_args typedOther = (getScannerRows_args)other;
 
-      lastComparison = Boolean.valueOf(isSetScannerId()).compareTo(typedOther.isSetScannerId());
+      lastComparison = Boolean.valueOf(isSetScannerId()).compareTo(other.isSetScannerId());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetScannerId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scannerId, typedOther.scannerId);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scannerId, other.scannerId);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNumRows()).compareTo(typedOther.isSetNumRows());
+      lastComparison = Boolean.valueOf(isSetNumRows()).compareTo(other.isSetNumRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetNumRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRows, typedOther.numRows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRows, other.numRows);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -14960,7 +16013,7 @@ public class THBaseService {
 
   }
 
-  public static class getScannerRows_result implements org.apache.thrift.TBase<getScannerRows_result, getScannerRows_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getScannerRows_result implements org.apache.thrift.TBase<getScannerRows_result, getScannerRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerRows_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScannerRows_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -15081,7 +16134,7 @@ public class THBaseService {
      */
     public getScannerRows_result(getScannerRows_result other) {
       if (other.isSetSuccess()) {
-        List<TResult> __this__success = new ArrayList<TResult>();
+        List<TResult> __this__success = new ArrayList<TResult>(other.success.size());
         for (TResult other_element : other.success) {
           __this__success.add(new TResult(other_element));
         }
@@ -15305,60 +16358,60 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getScannerRows_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getScannerRows_result typedOther = (getScannerRows_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -15454,12 +16507,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                   struct.success = new ArrayList<TResult>(_list172.size);
-                  for (int _i173 = 0; _i173 < _list172.size; ++_i173)
+                  TResult _elem173;
+                  for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                   {
-                    TResult _elem174; // required
-                    _elem174 = new TResult();
-                    _elem174.read(iprot);
-                    struct.success.add(_elem174);
+                    _elem173 = new TResult();
+                    _elem173.read(iprot);
+                    struct.success.add(_elem173);
                   }
                   iprot.readListEnd();
                 }
@@ -15576,12 +16629,12 @@ public class THBaseService {
           {
             org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TResult>(_list177.size);
-            for (int _i178 = 0; _i178 < _list177.size; ++_i178)
+            TResult _elem178;
+            for (int _i179 = 0; _i179 < _list177.size; ++_i179)
             {
-              TResult _elem179; // required
-              _elem179 = new TResult();
-              _elem179.read(iprot);
-              struct.success.add(_elem179);
+              _elem178 = new TResult();
+              _elem178.read(iprot);
+              struct.success.add(_elem178);
             }
           }
           struct.setSuccessIsSet(true);
@@ -15601,7 +16654,7 @@ public class THBaseService {
 
   }
 
-  public static class closeScanner_args implements org.apache.thrift.TBase<closeScanner_args, closeScanner_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class closeScanner_args implements org.apache.thrift.TBase<closeScanner_args, closeScanner_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeScanner_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeScanner_args");
 
     private static final org.apache.thrift.protocol.TField SCANNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scannerId", org.apache.thrift.protocol.TType.I32, (short)1);
@@ -15764,7 +16817,7 @@ public class THBaseService {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SCANNER_ID:
-        return Integer.valueOf(getScannerId());
+        return getScannerId();
 
       }
       throw new IllegalStateException();
@@ -15810,30 +16863,30 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_scannerId = true;
-      builder.append(present_scannerId);
+      list.add(present_scannerId);
       if (present_scannerId)
-        builder.append(scannerId);
+        list.add(scannerId);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(closeScanner_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      closeScanner_args typedOther = (closeScanner_args)other;
 
-      lastComparison = Boolean.valueOf(isSetScannerId()).compareTo(typedOther.isSetScannerId());
+      lastComparison = Boolean.valueOf(isSetScannerId()).compareTo(other.isSetScannerId());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetScannerId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scannerId, typedOther.scannerId);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scannerId, other.scannerId);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -15966,7 +17019,7 @@ public class THBaseService {
 
   }
 
-  public static class closeScanner_result implements org.apache.thrift.TBase<closeScanner_result, closeScanner_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class closeScanner_result implements org.apache.thrift.TBase<closeScanner_result, closeScanner_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeScanner_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeScanner_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -16232,45 +17285,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
       boolean present_ia = true && (isSetIa());
-      builder.append(present_ia);
+      list.add(present_ia);
       if (present_ia)
-        builder.append(ia);
+        list.add(ia);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(closeScanner_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      closeScanner_result typedOther = (closeScanner_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIa()).compareTo(typedOther.isSetIa());
+      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIa()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, typedOther.ia);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -16448,7 +17501,7 @@ public class THBaseService {
 
   }
 
-  public static class mutateRow_args implements org.apache.thrift.TBase<mutateRow_args, mutateRow_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRow_args implements org.apache.thrift.TBase<mutateRow_args, mutateRow_args._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRow_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRow_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -16556,7 +17609,7 @@ public class THBaseService {
       TRowMutations trowMutations)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.trowMutations = trowMutations;
     }
 
@@ -16566,7 +17619,6 @@ public class THBaseService {
     public mutateRow_args(mutateRow_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTrowMutations()) {
         this.trowMutations = new TRowMutations(other.trowMutations);
@@ -16592,19 +17644,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * table to apply the mutations
      */
     public mutateRow_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public mutateRow_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -16737,45 +17789,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_trowMutations = true && (isSetTrowMutations());
-      builder.append(present_trowMutations);
+      list.add(present_trowMutations);
       if (present_trowMutations)
-        builder.append(trowMutations);
+        list.add(trowMutations);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRow_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRow_args typedOther = (mutateRow_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTrowMutations()).compareTo(typedOther.isSetTrowMutations());
+      lastComparison = Boolean.valueOf(isSetTrowMutations()).compareTo(other.isSetTrowMutations());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTrowMutations()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trowMutations, typedOther.trowMutations);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trowMutations, other.trowMutations);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -16943,7 +17995,7 @@ public class THBaseService {
 
   }
 
-  public static class mutateRow_result implements org.apache.thrift.TBase<mutateRow_result, mutateRow_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class mutateRow_result implements org.apache.thrift.TBase<mutateRow_result, mutateRow_result._Fields>, java.io.Serializable, Cloneable, Comparable<mutateRow_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutateRow_result");
 
     private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -17138,30 +18190,30 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(mutateRow_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      mutateRow_result typedOther = (mutateRow_result)other;
 
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -17306,7 +18358,7 @@ public class THBaseService {
 
   }
 
-  public static class getScannerResults_args implements org.apache.thrift.TBase<getScannerResults_args, getScannerResults_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getScannerResults_args implements org.apache.thrift.TBase<getScannerResults_args, getScannerResults_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerResults_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScannerResults_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -17432,7 +18484,7 @@ public class THBaseService {
       int numRows)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       this.tscan = tscan;
       this.numRows = numRows;
       setNumRowsIsSet(true);
@@ -17445,7 +18497,6 @@ public class THBaseService {
       __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetTscan()) {
         this.tscan = new TScan(other.tscan);
@@ -17474,19 +18525,19 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
      * the table to get the Scanner for
      */
     public getScannerResults_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public getScannerResults_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -17602,7 +18653,7 @@ public class THBaseService {
         return getTscan();
 
       case NUM_ROWS:
-        return Integer.valueOf(getNumRows());
+        return getNumRows();
 
       }
       throw new IllegalStateException();
@@ -17670,60 +18721,60 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_tscan = true && (isSetTscan());
-      builder.append(present_tscan);
+      list.add(present_tscan);
       if (present_tscan)
-        builder.append(tscan);
+        list.add(tscan);
 
       boolean present_numRows = true;
-      builder.append(present_numRows);
+      list.add(present_numRows);
       if (present_numRows)
-        builder.append(numRows);
+        list.add(numRows);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getScannerResults_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getScannerResults_args typedOther = (getScannerResults_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetTscan()).compareTo(typedOther.isSetTscan());
+      lastComparison = Boolean.valueOf(isSetTscan()).compareTo(other.isSetTscan());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTscan()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tscan, typedOther.tscan);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tscan, other.tscan);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNumRows()).compareTo(typedOther.isSetNumRows());
+      lastComparison = Boolean.valueOf(isSetNumRows()).compareTo(other.isSetNumRows());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetNumRows()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRows, typedOther.numRows);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRows, other.numRows);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -17921,7 +18972,7 @@ public class THBaseService {
 
   }
 
-  public static class getScannerResults_result implements org.apache.thrift.TBase<getScannerResults_result, getScannerResults_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getScannerResults_result implements org.apache.thrift.TBase<getScannerResults_result, getScannerResults_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScannerResults_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScannerResults_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -18027,7 +19078,7 @@ public class THBaseService {
      */
     public getScannerResults_result(getScannerResults_result other) {
       if (other.isSetSuccess()) {
-        List<TResult> __this__success = new ArrayList<TResult>();
+        List<TResult> __this__success = new ArrayList<TResult>(other.success.size());
         for (TResult other_element : other.success) {
           __this__success.add(new TResult(other_element));
         }
@@ -18195,45 +19246,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getScannerResults_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getScannerResults_result typedOther = (getScannerResults_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -18321,12 +19372,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                   struct.success = new ArrayList<TResult>(_list180.size);
-                  for (int _i181 = 0; _i181 < _list180.size; ++_i181)
+                  TResult _elem181;
+                  for (int _i182 = 0; _i182 < _list180.size; ++_i182)
                   {
-                    TResult _elem182; // required
-                    _elem182 = new TResult();
-                    _elem182.read(iprot);
-                    struct.success.add(_elem182);
+                    _elem181 = new TResult();
+                    _elem181.read(iprot);
+                    struct.success.add(_elem181);
                   }
                   iprot.readListEnd();
                 }
@@ -18423,12 +19474,12 @@ public class THBaseService {
           {
             org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<TResult>(_list185.size);
-            for (int _i186 = 0; _i186 < _list185.size; ++_i186)
+            TResult _elem186;
+            for (int _i187 = 0; _i187 < _list185.size; ++_i187)
             {
-              TResult _elem187; // required
-              _elem187 = new TResult();
-              _elem187.read(iprot);
-              struct.success.add(_elem187);
+              _elem186 = new TResult();
+              _elem186.read(iprot);
+              struct.success.add(_elem186);
             }
           }
           struct.setSuccessIsSet(true);
@@ -18443,7 +19494,7 @@ public class THBaseService {
 
   }
 
-  public static class getRegionLocation_args implements org.apache.thrift.TBase<getRegionLocation_args, getRegionLocation_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRegionLocation_args implements org.apache.thrift.TBase<getRegionLocation_args, getRegionLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegionLocation_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegionLocation_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -18549,8 +19600,8 @@ public class THBaseService {
       boolean reload)
     {
       this();
-      this.table = table;
-      this.row = row;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       this.reload = reload;
       setReloadIsSet(true);
     }
@@ -18562,11 +19613,9 @@ public class THBaseService {
       __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
       if (other.isSetRow()) {
         this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
       }
       this.reload = other.reload;
     }
@@ -18589,16 +19638,16 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     public getRegionLocation_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public getRegionLocation_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -18623,16 +19672,16 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForRow() {
-      return row;
+      return org.apache.thrift.TBaseHelper.copyBinary(row);
     }
 
     public getRegionLocation_args setRow(byte[] row) {
-      setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+      this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
       return this;
     }
 
     public getRegionLocation_args setRow(ByteBuffer row) {
-      this.row = row;
+      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
       return this;
     }
 
@@ -18712,7 +19761,7 @@ public class THBaseService {
         return getRow();
 
       case RELOAD:
-        return Boolean.valueOf(isReload());
+        return isReload();
 
       }
       throw new IllegalStateException();
@@ -18780,60 +19829,60 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
       boolean present_row = true && (isSetRow());
-      builder.append(present_row);
+      list.add(present_row);
       if (present_row)
-        builder.append(row);
+        list.add(row);
 
       boolean present_reload = true;
-      builder.append(present_reload);
+      list.add(present_reload);
       if (present_reload)
-        builder.append(reload);
+        list.add(reload);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRegionLocation_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRegionLocation_args typedOther = (getRegionLocation_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+      lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetRow()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetReload()).compareTo(typedOther.isSetReload());
+      lastComparison = Boolean.valueOf(isSetReload()).compareTo(other.isSetReload());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetReload()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reload, typedOther.reload);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reload, other.reload);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -19026,7 +20075,7 @@ public class THBaseService {
 
   }
 
-  public static class getRegionLocation_result implements org.apache.thrift.TBase<getRegionLocation_result, getRegionLocation_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getRegionLocation_result implements org.apache.thrift.TBase<getRegionLocation_result, getRegionLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegionLocation_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegionLocation_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
@@ -19280,45 +20329,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getRegionLocation_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getRegionLocation_result typedOther = (getRegionLocation_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -19499,7 +20548,7 @@ public class THBaseService {
 
   }
 
-  public static class getAllRegionLocations_args implements org.apache.thrift.TBase<getAllRegionLocations_args, getAllRegionLocations_args._Fields>, java.io.Serializable, Cloneable   {
+  public static class getAllRegionLocations_args implements org.apache.thrift.TBase<getAllRegionLocations_args, getAllRegionLocations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRegionLocations_args>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRegionLocations_args");
 
     private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -19587,7 +20636,7 @@ public class THBaseService {
       ByteBuffer table)
     {
       this();
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     /**
@@ -19596,7 +20645,6 @@ public class THBaseService {
     public getAllRegionLocations_args(getAllRegionLocations_args other) {
       if (other.isSetTable()) {
         this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);
-;
       }
     }
 
@@ -19615,16 +20663,16 @@ public class THBaseService {
     }
 
     public ByteBuffer bufferForTable() {
-      return table;
+      return org.apache.thrift.TBaseHelper.copyBinary(table);
     }
 
     public getAllRegionLocations_args setTable(byte[] table) {
-      setTable(table == null ? (ByteBuffer)null : ByteBuffer.wrap(table));
+      this.table = table == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(table, table.length));
       return this;
     }
 
     public getAllRegionLocations_args setTable(ByteBuffer table) {
-      this.table = table;
+      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);
       return this;
     }
 
@@ -19705,30 +20753,30 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_table = true && (isSetTable());
-      builder.append(present_table);
+      list.add(present_table);
       if (present_table)
-        builder.append(table);
+        list.add(table);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getAllRegionLocations_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getAllRegionLocations_args typedOther = (getAllRegionLocations_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
+      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetTable()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -19864,7 +20912,7 @@ public class THBaseService {
 
   }
 
-  public static class getAllRegionLocations_result implements org.apache.thrift.TBase<getAllRegionLocations_result, getAllRegionLocations_result._Fields>, java.io.Serializable, Cloneable   {
+  public static class getAllRegionLocations_result implements org.apache.thrift.TBase<getAllRegionLocations_result, getAllRegionLocations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRegionLocations_result>   {
     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRegionLocations_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
@@ -19970,7 +21018,7 @@ public class THBaseService {
      */
     public getAllRegionLocations_result(getAllRegionLocations_result other) {
       if (other.isSetSuccess()) {
-        List<THRegionLocation> __this__success = new ArrayList<THRegionLocation>();
+        List<THRegionLocation> __this__success = new ArrayList<THRegionLocation>(other.success.size());
         for (THRegionLocation other_element : other.success) {
           __this__success.add(new THRegionLocation(other_element));
         }
@@ -20138,45 +21186,45 @@ public class THBaseService {
 
     @Override
     public int hashCode() {
-      HashCodeBuilder builder = new HashCodeBuilder();
+      List<Object> list = new ArrayList<Object>();
 
       boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
+      list.add(present_success);
       if (present_success)
-        builder.append(success);
+        list.add(success);
 
       boolean present_io = true && (isSetIo());
-      builder.append(present_io);
+      list.add(present_io);
       if (present_io)
-        builder.append(io);
+        list.add(io);
 
-      return builder.toHashCode();
+      return list.hashCode();
     }
 
+    @Override
     public int compareTo(getAllRegionLocations_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getAllRegionLocations_result typedOther = (getAllRegionLocations_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIo()).compareTo(typedOther.isSetIo());
+      lastComparison = Boolean.valueOf(isSetIo()).compareTo(other.isSetIo());
       if (lastComparison != 0) {
         return lastComparison;
       }
       if (isSetIo()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, typedOther.io);
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -20264,12 +21312,12 @@ public class THBaseService {
                 {
                   org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                   struct.success = new ArrayList<THRegionLocation>(_list188.size);
-                  for (int _i189 = 0; _i189 < _list188.size; ++_i189)
+                  THRegionLocation _elem189;
+                  for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                   {
-                    THRegionLocation _elem190; // required
-                    _elem190 = new THRegionLocation();
-                    _elem190.read(iprot);
-                    struct.success.add(_elem190);
+                    _elem189 = new THRegionLocation();
+                    _elem189.read(iprot);
+                    struct.success.add(_elem189);
                   }
                   iprot.readListEnd();
                 }
@@ -20366,12 +21414,12 @@ public class THBaseService {
           {
             org.apache.thrift.protocol.TList _list193 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
             struct.success = new ArrayList<THRegionLocation>(_list193.size);
-            for (int _i194 = 0; _i194 < _list193.size; ++_i194)
+            THRegionLocation _elem194;
+            for (int _i195 = 0; _i195 < _list193.size; ++_i195)
             {
-              THRegionLocation _elem195; // required
-              _elem195 = new THRegionLocation();
-              _elem195.read(iprot);
-              struct.success.add(_elem195);
+              _elem194 = new THRegionLocation();
+              _elem194.read(iprot);
+              struct.success.add(_elem194);
             }
           }
           struct.setSuccessIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionInfo.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionInfo.java
index e709612..be6e56d 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionInfo.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionInfo.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THRegionInfo._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THRegionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<THRegionInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THRegionInfo");
 
   private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionId", org.apache.thrift.protocol.TType.I64, (short)1);
@@ -138,7 +142,7 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
   private static final int __SPLIT_ISSET_ID = 2;
   private static final int __REPLICAID_ISSET_ID = 3;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.START_KEY,_Fields.END_KEY,_Fields.OFFLINE,_Fields.SPLIT,_Fields.REPLICA_ID};
+  private static final _Fields optionals[] = {_Fields.START_KEY,_Fields.END_KEY,_Fields.OFFLINE,_Fields.SPLIT,_Fields.REPLICA_ID};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -170,7 +174,7 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
     this();
     this.regionId = regionId;
     setRegionIdIsSet(true);
-    this.tableName = tableName;
+    this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
   }
 
   /**
@@ -181,15 +185,12 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
     this.regionId = other.regionId;
     if (other.isSetTableName()) {
       this.tableName = org.apache.thrift.TBaseHelper.copyBinary(other.tableName);
-;
     }
     if (other.isSetStartKey()) {
       this.startKey = org.apache.thrift.TBaseHelper.copyBinary(other.startKey);
-;
     }
     if (other.isSetEndKey()) {
       this.endKey = org.apache.thrift.TBaseHelper.copyBinary(other.endKey);
-;
     }
     this.offline = other.offline;
     this.split = other.split;
@@ -244,16 +245,16 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
   }
 
   public ByteBuffer bufferForTableName() {
-    return tableName;
+    return org.apache.thrift.TBaseHelper.copyBinary(tableName);
   }
 
   public THRegionInfo setTableName(byte[] tableName) {
-    setTableName(tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(tableName));
+    this.tableName = tableName == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tableName, tableName.length));
     return this;
   }
 
   public THRegionInfo setTableName(ByteBuffer tableName) {
-    this.tableName = tableName;
+    this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
     return this;
   }
 
@@ -278,16 +279,16 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
   }
 
   public ByteBuffer bufferForStartKey() {
-    return startKey;
+    return org.apache.thrift.TBaseHelper.copyBinary(startKey);
   }
 
   public THRegionInfo setStartKey(byte[] startKey) {
-    setStartKey(startKey == null ? (ByteBuffer)null : ByteBuffer.wrap(startKey));
+    this.startKey = startKey == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startKey, startKey.length));
     return this;
   }
 
   public THRegionInfo setStartKey(ByteBuffer startKey) {
-    this.startKey = startKey;
+    this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
     return this;
   }
 
@@ -312,16 +313,16 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
   }
 
   public ByteBuffer bufferForEndKey() {
-    return endKey;
+    return org.apache.thrift.TBaseHelper.copyBinary(endKey);
   }
 
   public THRegionInfo setEndKey(byte[] endKey) {
-    setEndKey(endKey == null ? (ByteBuffer)null : ByteBuffer.wrap(endKey));
+    this.endKey = endKey == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(endKey, endKey.length));
     return this;
   }
 
   public THRegionInfo setEndKey(ByteBuffer endKey) {
-    this.endKey = endKey;
+    this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
     return this;
   }
 
@@ -473,7 +474,7 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
   public Object getFieldValue(_Fields field) {
     switch (field) {
     case REGION_ID:
-      return Long.valueOf(getRegionId());
+      return getRegionId();
 
     case TABLE_NAME:
       return getTableName();
@@ -485,13 +486,13 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
       return getEndKey();
 
     case OFFLINE:
-      return Boolean.valueOf(isOffline());
+      return isOffline();
 
     case SPLIT:
-      return Boolean.valueOf(isSplit());
+      return isSplit();
 
     case REPLICA_ID:
-      return Integer.valueOf(getReplicaId());
+      return getReplicaId();
 
     }
     throw new IllegalStateException();
@@ -603,120 +604,120 @@ public class THRegionInfo implements org.apache.thrift.TBase<THRegionInfo, THReg
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_regionId = true;
-    builder.append(present_regionId);
+    list.add(present_regionId);
     if (present_regionId)
-      builder.append(regionId);
+      list.add(regionId);
 
     boolean present_tableName = true && (isSetTableName());
-    builder.append(present_tableName);
+    list.add(present_tableName);
     if (present_tableName)
-      builder.append(tableName);
+      list.add(tableName);
 
     boolean present_startKey = true && (isSetStartKey());
-    builder.append(present_startKey);
+    list.add(present_startKey);
     if (present_startKey)
-      builder.append(startKey);
+      list.add(startKey);
 
     boolean present_endKey = true && (isSetEndKey());
-    builder.append(present_endKey);
+    list.add(present_endKey);
     if (present_endKey)
-      builder.append(endKey);
+      list.add(endKey);
 
     boolean present_offline = true && (isSetOffline());
-    builder.append(present_offline);
+    list.add(present_offline);
     if (present_offline)
-      builder.append(offline);
+      list.add(offline);
 
     boolean present_split = true && (isSetSplit());
-    builder.append(present_split);
+    list.add(present_split);
     if (present_split)
-      builder.append(split);
+      list.add(split);
 
     boolean present_replicaId = true && (isSetReplicaId());
-    builder.append(present_replicaId);
+    list.add(present_replicaId);
     if (present_replicaId)
-      builder.append(replicaId);
+      list.add(replicaId);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(THRegionInfo other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    THRegionInfo typedOther = (THRegionInfo)other;
 
-    lastComparison = Boolean.valueOf(isSetRegionId()).compareTo(typedOther.isSetRegionId());
+    lastComparison = Boolean.valueOf(isSetRegionId()).compareTo(other.isSetRegionId());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRegionId()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, typedOther.regionId);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, other.regionId);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTableName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(typedOther.isSetStartKey());
+    lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStartKey()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, typedOther.startKey);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetEndKey()).compareTo(typedOther.isSetEndKey());
+    lastComparison = Boolean.valueOf(isSetEndKey()).compareTo(other.isSetEndKey());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetEndKey()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, typedOther.endKey);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, other.endKey);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetOffline()).compareTo(typedOther.isSetOffline());
+    lastComparison = Boolean.valueOf(isSetOffline()).compareTo(other.isSetOffline());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetOffline()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offline, typedOther.offline);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offline, other.offline);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetSplit()).compareTo(typedOther.isSetSplit());
+    lastComparison = Boolean.valueOf(isSetSplit()).compareTo(other.isSetSplit());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetSplit()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split, typedOther.split);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split, other.split);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetReplicaId()).compareTo(typedOther.isSetReplicaId());
+    lastComparison = Boolean.valueOf(isSetReplicaId()).compareTo(other.isSetReplicaId());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetReplicaId()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaId, typedOther.replicaId);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaId, other.replicaId);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionLocation.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionLocation.java
index 22d00fc..5b51b03 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionLocation.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THRegionLocation.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class THRegionLocation implements org.apache.thrift.TBase<THRegionLocation, THRegionLocation._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class THRegionLocation implements org.apache.thrift.TBase<THRegionLocation, THRegionLocation._Fields>, java.io.Serializable, Cloneable, Comparable<THRegionLocation> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THRegionLocation");
 
   private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverName", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -285,45 +289,45 @@ public class THRegionLocation implements org.apache.thrift.TBase<THRegionLocatio
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_serverName = true && (isSetServerName());
-    builder.append(present_serverName);
+    list.add(present_serverName);
     if (present_serverName)
-      builder.append(serverName);
+      list.add(serverName);
 
     boolean present_regionInfo = true && (isSetRegionInfo());
-    builder.append(present_regionInfo);
+    list.add(present_regionInfo);
     if (present_regionInfo)
-      builder.append(regionInfo);
+      list.add(regionInfo);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(THRegionLocation other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    THRegionLocation typedOther = (THRegionLocation)other;
 
-    lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
+    lastComparison = Boolean.valueOf(isSetServerName()).compareTo(other.isSetServerName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetServerName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, typedOther.serverName);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, other.serverName);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetRegionInfo()).compareTo(typedOther.isSetRegionInfo());
+    lastComparison = Boolean.valueOf(isSetRegionInfo()).compareTo(other.isSetRegionInfo());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRegionInfo()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionInfo, typedOther.regionInfo);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionInfo, other.regionInfo);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java
index d79eb3f..ee41eb5 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,15 +29,18 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A TIOError exception signals that an error occurred communicating
  * to the HBase master or a HBase region server. Also used to return
  * more general HBase error conditions.
  */
-public class TIOError extends TException implements org.apache.thrift.TBase<TIOError, TIOError._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TIOError extends TException implements org.apache.thrift.TBase<TIOError, TIOError._Fields>, java.io.Serializable, Cloneable, Comparable<TIOError> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIOError");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -108,7 +112,7 @@ public class TIOError extends TException implements org.apache.thrift.TBase<TIOE
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.MESSAGE};
+  private static final _Fields optionals[] = {_Fields.MESSAGE};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -225,30 +229,30 @@ public class TIOError extends TException implements org.apache.thrift.TBase<TIOE
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_message = true && (isSetMessage());
-    builder.append(present_message);
+    list.add(present_message);
     if (present_message)
-      builder.append(message);
+      list.add(message);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TIOError other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TIOError typedOther = (TIOError)other;
 
-    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
+    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMessage()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java
index b18ce43..4cbb4e6 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,14 +29,17 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A TIllegalArgument exception indicates an illegal or invalid
  * argument was passed into a procedure.
  */
-public class TIllegalArgument extends TException implements org.apache.thrift.TBase<TIllegalArgument, TIllegalArgument._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TIllegalArgument extends TException implements org.apache.thrift.TBase<TIllegalArgument, TIllegalArgument._Fields>, java.io.Serializable, Cloneable, Comparable<TIllegalArgument> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIllegalArgument");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -107,7 +111,7 @@ public class TIllegalArgument extends TException implements org.apache.thrift.TB
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.MESSAGE};
+  private static final _Fields optionals[] = {_Fields.MESSAGE};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -224,30 +228,30 @@ public class TIllegalArgument extends TException implements org.apache.thrift.TB
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_message = true && (isSetMessage());
-    builder.append(present_message);
+    list.add(present_message);
     if (present_message)
-      builder.append(message);
+      list.add(message);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TIllegalArgument other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TIllegalArgument typedOther = (TIllegalArgument)other;
 
-    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
+    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMessage()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java
index 358a9fc..36abb52 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,11 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Used to perform Increment operations for a single row.
  * 
@@ -38,7 +41,8 @@ import org.slf4j.LoggerFactory;
  * by changing the durability. If you don't provide durability, it defaults to
  * column family's default setting for durability.
  */
-public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncrement._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncrement._Fields>, java.io.Serializable, Cloneable, Comparable<TIncrement> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIncrement");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -138,7 +142,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.ATTRIBUTES,_Fields.DURABILITY,_Fields.CELL_VISIBILITY};
+  private static final _Fields optionals[] = {_Fields.ATTRIBUTES,_Fields.DURABILITY,_Fields.CELL_VISIBILITY};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -167,7 +171,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
     List<TColumnIncrement> columns)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     this.columns = columns;
   }
 
@@ -177,30 +181,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   public TIncrement(TIncrement other) {
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetColumns()) {
-      List<TColumnIncrement> __this__columns = new ArrayList<TColumnIncrement>();
+      List<TColumnIncrement> __this__columns = new ArrayList<TColumnIncrement>(other.columns.size());
       for (TColumnIncrement other_element : other.columns) {
         __this__columns.add(new TColumnIncrement(other_element));
       }
       this.columns = __this__columns;
     }
     if (other.isSetAttributes()) {
-      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
-      for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
-
-        ByteBuffer other_element_key = other_element.getKey();
-        ByteBuffer other_element_value = other_element.getValue();
-
-        ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
-;
-
-        ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
-;
-
-        __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
-      }
+      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes);
       this.attributes = __this__attributes;
     }
     if (other.isSetDurability()) {
@@ -230,16 +220,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TIncrement setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TIncrement setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -538,90 +528,90 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_attributes = true && (isSetAttributes());
-    builder.append(present_attributes);
+    list.add(present_attributes);
     if (present_attributes)
-      builder.append(attributes);
+      list.add(attributes);
 
     boolean present_durability = true && (isSetDurability());
-    builder.append(present_durability);
+    list.add(present_durability);
     if (present_durability)
-      builder.append(durability.getValue());
+      list.add(durability.getValue());
 
     boolean present_cellVisibility = true && (isSetCellVisibility());
-    builder.append(present_cellVisibility);
+    list.add(present_cellVisibility);
     if (present_cellVisibility)
-      builder.append(cellVisibility);
+      list.add(cellVisibility);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TIncrement other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TIncrement typedOther = (TIncrement)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAttributes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(typedOther.isSetDurability());
+    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetDurability()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, typedOther.durability);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCellVisibility()).compareTo(typedOther.isSetCellVisibility());
+    lastComparison = Boolean.valueOf(isSetCellVisibility()).compareTo(other.isSetCellVisibility());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCellVisibility()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, typedOther.cellVisibility);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, other.cellVisibility);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -756,12 +746,12 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
               {
                 org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                 struct.columns = new ArrayList<TColumnIncrement>(_list70.size);
-                for (int _i71 = 0; _i71 < _list70.size; ++_i71)
+                TColumnIncrement _elem71;
+                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                 {
-                  TColumnIncrement _elem72; // required
-                  _elem72 = new TColumnIncrement();
-                  _elem72.read(iprot);
-                  struct.columns.add(_elem72);
+                  _elem71 = new TColumnIncrement();
+                  _elem71.read(iprot);
+                  struct.columns.add(_elem71);
                 }
                 iprot.readListEnd();
               }
@@ -775,13 +765,13 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
               {
                 org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                 struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map73.size);
-                for (int _i74 = 0; _i74 < _map73.size; ++_i74)
+                ByteBuffer _key74;
+                ByteBuffer _val75;
+                for (int _i76 = 0; _i76 < _map73.size; ++_i76)
                 {
-                  ByteBuffer _key75; // required
-                  ByteBuffer _val76; // required
-                  _key75 = iprot.readBinary();
-                  _val76 = iprot.readBinary();
-                  struct.attributes.put(_key75, _val76);
+                  _key74 = iprot.readBinary();
+                  _val75 = iprot.readBinary();
+                  struct.attributes.put(_key74, _val75);
                 }
                 iprot.readMapEnd();
               }
@@ -792,7 +782,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
             break;
           case 5: // DURABILITY
             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
-              struct.durability = TDurability.findByValue(iprot.readI32());
+              struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
               struct.setDurabilityIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -930,12 +920,12 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
       {
         org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
         struct.columns = new ArrayList<TColumnIncrement>(_list81.size);
-        for (int _i82 = 0; _i82 < _list81.size; ++_i82)
+        TColumnIncrement _elem82;
+        for (int _i83 = 0; _i83 < _list81.size; ++_i83)
         {
-          TColumnIncrement _elem83; // required
-          _elem83 = new TColumnIncrement();
-          _elem83.read(iprot);
-          struct.columns.add(_elem83);
+          _elem82 = new TColumnIncrement();
+          _elem82.read(iprot);
+          struct.columns.add(_elem82);
         }
       }
       struct.setColumnsIsSet(true);
@@ -944,19 +934,19 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
         {
           org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map84.size);
-          for (int _i85 = 0; _i85 < _map84.size; ++_i85)
+          ByteBuffer _key85;
+          ByteBuffer _val86;
+          for (int _i87 = 0; _i87 < _map84.size; ++_i87)
           {
-            ByteBuffer _key86; // required
-            ByteBuffer _val87; // required
-            _key86 = iprot.readBinary();
-            _val87 = iprot.readBinary();
-            struct.attributes.put(_key86, _val87);
+            _key85 = iprot.readBinary();
+            _val86 = iprot.readBinary();
+            struct.attributes.put(_key85, _val86);
           }
         }
         struct.setAttributesIsSet(true);
       }
       if (incoming.get(1)) {
-        struct.durability = TDurability.findByValue(iprot.readI32());
+        struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
         struct.setDurabilityIsSet(true);
       }
       if (incoming.get(2)) {
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TMutation.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TMutation.java
index 8fb1567..39379d1 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TMutation.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TMutation.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,11 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Atomic mutation for the specified row. It can be either Put or Delete.
  */
@@ -186,6 +189,7 @@ public class TMutation extends org.apache.thrift.TUnion<TMutation, TMutation._Fi
           throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
       }
     } else {
+      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
       return null;
     }
   }
@@ -334,19 +338,19 @@ public class TMutation extends org.apache.thrift.TUnion<TMutation, TMutation._Fi
 
   @Override
   public int hashCode() {
-    HashCodeBuilder hcb = new HashCodeBuilder();
-    hcb.append(this.getClass().getName());
+    List<Object> list = new ArrayList<Object>();
+    list.add(this.getClass().getName());
     org.apache.thrift.TFieldIdEnum setField = getSetField();
     if (setField != null) {
-      hcb.append(setField.getThriftFieldId());
+      list.add(setField.getThriftFieldId());
       Object value = getFieldValue();
       if (value instanceof org.apache.thrift.TEnum) {
-        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
+        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
       } else {
-        hcb.append(value);
+        list.add(value);
       }
     }
-    return hcb.toHashCode();
+    return list.hashCode();
   }
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
     try {
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java
index c9a122c..392e402 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,9 +29,11 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Used to perform Put operations for a single row.
  * 
@@ -43,7 +46,8 @@ import org.slf4j.LoggerFactory;
  * by changing the durability. If you don't provide durability, it defaults to
  * column family's default setting for durability.
  */
-public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.io.Serializable, Cloneable, Comparable<TPut> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPut");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -150,7 +154,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.ATTRIBUTES,_Fields.DURABILITY,_Fields.CELL_VISIBILITY};
+  private static final _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.ATTRIBUTES,_Fields.DURABILITY,_Fields.CELL_VISIBILITY};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -181,7 +185,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
     List<TColumnValue> columnValues)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     this.columnValues = columnValues;
   }
 
@@ -192,10 +196,9 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetColumnValues()) {
-      List<TColumnValue> __this__columnValues = new ArrayList<TColumnValue>();
+      List<TColumnValue> __this__columnValues = new ArrayList<TColumnValue>(other.columnValues.size());
       for (TColumnValue other_element : other.columnValues) {
         __this__columnValues.add(new TColumnValue(other_element));
       }
@@ -203,20 +206,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
     }
     this.timestamp = other.timestamp;
     if (other.isSetAttributes()) {
-      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
-      for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
-
-        ByteBuffer other_element_key = other_element.getKey();
-        ByteBuffer other_element_value = other_element.getValue();
-
-        ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
-;
-
-        ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
-;
-
-        __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
-      }
+      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes);
       this.attributes = __this__attributes;
     }
     if (other.isSetDurability()) {
@@ -248,16 +238,16 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TPut setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TPut setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -491,7 +481,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
       return getColumnValues();
 
     case TIMESTAMP:
-      return Long.valueOf(getTimestamp());
+      return getTimestamp();
 
     case ATTRIBUTES:
       return getAttributes();
@@ -601,105 +591,105 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columnValues = true && (isSetColumnValues());
-    builder.append(present_columnValues);
+    list.add(present_columnValues);
     if (present_columnValues)
-      builder.append(columnValues);
+      list.add(columnValues);
 
     boolean present_timestamp = true && (isSetTimestamp());
-    builder.append(present_timestamp);
+    list.add(present_timestamp);
     if (present_timestamp)
-      builder.append(timestamp);
+      list.add(timestamp);
 
     boolean present_attributes = true && (isSetAttributes());
-    builder.append(present_attributes);
+    list.add(present_attributes);
     if (present_attributes)
-      builder.append(attributes);
+      list.add(attributes);
 
     boolean present_durability = true && (isSetDurability());
-    builder.append(present_durability);
+    list.add(present_durability);
     if (present_durability)
-      builder.append(durability.getValue());
+      list.add(durability.getValue());
 
     boolean present_cellVisibility = true && (isSetCellVisibility());
-    builder.append(present_cellVisibility);
+    list.add(present_cellVisibility);
     if (present_cellVisibility)
-      builder.append(cellVisibility);
+      list.add(cellVisibility);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TPut other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TPut typedOther = (TPut)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumnValues()).compareTo(typedOther.isSetColumnValues());
+    lastComparison = Boolean.valueOf(isSetColumnValues()).compareTo(other.isSetColumnValues());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumnValues()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValues, typedOther.columnValues);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValues, other.columnValues);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimestamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAttributes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(typedOther.isSetDurability());
+    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetDurability()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, typedOther.durability);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCellVisibility()).compareTo(typedOther.isSetCellVisibility());
+    lastComparison = Boolean.valueOf(isSetCellVisibility()).compareTo(other.isSetCellVisibility());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCellVisibility()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, typedOther.cellVisibility);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, other.cellVisibility);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -842,12 +832,12 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
               {
                 org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                 struct.columnValues = new ArrayList<TColumnValue>(_list34.size);
-                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
+                TColumnValue _elem35;
+                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                 {
-                  TColumnValue _elem36; // required
-                  _elem36 = new TColumnValue();
-                  _elem36.read(iprot);
-                  struct.columnValues.add(_elem36);
+                  _elem35 = new TColumnValue();
+                  _elem35.read(iprot);
+                  struct.columnValues.add(_elem35);
                 }
                 iprot.readListEnd();
               }
@@ -869,13 +859,13 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
               {
                 org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin();
                 struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map37.size);
-                for (int _i38 = 0; _i38 < _map37.size; ++_i38)
+                ByteBuffer _key38;
+                ByteBuffer _val39;
+                for (int _i40 = 0; _i40 < _map37.size; ++_i40)
                 {
-                  ByteBuffer _key39; // required
-                  ByteBuffer _val40; // required
-                  _key39 = iprot.readBinary();
-                  _val40 = iprot.readBinary();
-                  struct.attributes.put(_key39, _val40);
+                  _key38 = iprot.readBinary();
+                  _val39 = iprot.readBinary();
+                  struct.attributes.put(_key38, _val39);
                 }
                 iprot.readMapEnd();
               }
@@ -886,7 +876,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
             break;
           case 6: // DURABILITY
             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
-              struct.durability = TDurability.findByValue(iprot.readI32());
+              struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
               struct.setDurabilityIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -1035,12 +1025,12 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
       {
         org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
         struct.columnValues = new ArrayList<TColumnValue>(_list45.size);
-        for (int _i46 = 0; _i46 < _list45.size; ++_i46)
+        TColumnValue _elem46;
+        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
         {
-          TColumnValue _elem47; // required
-          _elem47 = new TColumnValue();
-          _elem47.read(iprot);
-          struct.columnValues.add(_elem47);
+          _elem46 = new TColumnValue();
+          _elem46.read(iprot);
+          struct.columnValues.add(_elem46);
         }
       }
       struct.setColumnValuesIsSet(true);
@@ -1053,19 +1043,19 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
         {
           org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map48.size);
-          for (int _i49 = 0; _i49 < _map48.size; ++_i49)
+          ByteBuffer _key49;
+          ByteBuffer _val50;
+          for (int _i51 = 0; _i51 < _map48.size; ++_i51)
           {
-            ByteBuffer _key50; // required
-            ByteBuffer _val51; // required
-            _key50 = iprot.readBinary();
-            _val51 = iprot.readBinary();
-            struct.attributes.put(_key50, _val51);
+            _key49 = iprot.readBinary();
+            _val50 = iprot.readBinary();
+            struct.attributes.put(_key49, _val50);
           }
         }
         struct.setAttributesIsSet(true);
       }
       if (incoming.get(2)) {
-        struct.durability = TDurability.findByValue(iprot.readI32());
+        struct.durability = org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
         struct.setDurabilityIsSet(true);
       }
       if (incoming.get(3)) {
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java
index 182f947..962d85f 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * if no Result is found, row and columnValues will not be set.
  */
-public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields>, java.io.Serializable, Cloneable, Comparable<TResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResult");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -111,7 +115,7 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
   }
 
   // isset id assignments
-  private _Fields optionals[] = {_Fields.ROW};
+  private static final _Fields optionals[] = {_Fields.ROW};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -140,10 +144,9 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
   public TResult(TResult other) {
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetColumnValues()) {
-      List<TColumnValue> __this__columnValues = new ArrayList<TColumnValue>();
+      List<TColumnValue> __this__columnValues = new ArrayList<TColumnValue>(other.columnValues.size());
       for (TColumnValue other_element : other.columnValues) {
         __this__columnValues.add(new TColumnValue(other_element));
       }
@@ -167,16 +170,16 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TResult setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TResult setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -318,45 +321,45 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_columnValues = true && (isSetColumnValues());
-    builder.append(present_columnValues);
+    list.add(present_columnValues);
     if (present_columnValues)
-      builder.append(columnValues);
+      list.add(columnValues);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TResult other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TResult typedOther = (TResult)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumnValues()).compareTo(typedOther.isSetColumnValues());
+    lastComparison = Boolean.valueOf(isSetColumnValues()).compareTo(other.isSetColumnValues());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumnValues()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValues, typedOther.columnValues);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValues, other.columnValues);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -457,12 +460,12 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
               {
                 org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                 struct.columnValues = new ArrayList<TColumnValue>(_list0.size);
-                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
+                TColumnValue _elem1;
+                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                 {
-                  TColumnValue _elem2; // required
-                  _elem2 = new TColumnValue();
-                  _elem2.read(iprot);
-                  struct.columnValues.add(_elem2);
+                  _elem1 = new TColumnValue();
+                  _elem1.read(iprot);
+                  struct.columnValues.add(_elem1);
                 }
                 iprot.readListEnd();
               }
@@ -545,12 +548,12 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
       {
         org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
         struct.columnValues = new ArrayList<TColumnValue>(_list5.size);
-        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
+        TColumnValue _elem6;
+        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
         {
-          TColumnValue _elem7; // required
-          _elem7 = new TColumnValue();
-          _elem7.read(iprot);
-          struct.columnValues.add(_elem7);
+          _elem6 = new TColumnValue();
+          _elem6.read(iprot);
+          struct.columnValues.add(_elem6);
         }
       }
       struct.setColumnValuesIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TRowMutations.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TRowMutations.java
index 94521c2..b30e97a 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TRowMutations.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TRowMutations.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,13 +29,16 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * A TRowMutations object is used to apply a number of Mutations to a single row.
  */
-public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRowMutations._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRowMutations._Fields>, java.io.Serializable, Cloneable, Comparable<TRowMutations> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRowMutations");
 
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -131,7 +135,7 @@ public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRo
     List<TMutation> mutations)
   {
     this();
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     this.mutations = mutations;
   }
 
@@ -141,10 +145,9 @@ public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRo
   public TRowMutations(TRowMutations other) {
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
-;
     }
     if (other.isSetMutations()) {
-      List<TMutation> __this__mutations = new ArrayList<TMutation>();
+      List<TMutation> __this__mutations = new ArrayList<TMutation>(other.mutations.size());
       for (TMutation other_element : other.mutations) {
         __this__mutations.add(new TMutation(other_element));
       }
@@ -168,16 +171,16 @@ public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRo
   }
 
   public ByteBuffer bufferForRow() {
-    return row;
+    return org.apache.thrift.TBaseHelper.copyBinary(row);
   }
 
   public TRowMutations setRow(byte[] row) {
-    setRow(row == null ? (ByteBuffer)null : ByteBuffer.wrap(row));
+    this.row = row == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(row, row.length));
     return this;
   }
 
   public TRowMutations setRow(ByteBuffer row) {
-    this.row = row;
+    this.row = org.apache.thrift.TBaseHelper.copyBinary(row);
     return this;
   }
 
@@ -319,45 +322,45 @@ public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRo
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_row = true && (isSetRow());
-    builder.append(present_row);
+    list.add(present_row);
     if (present_row)
-      builder.append(row);
+      list.add(row);
 
     boolean present_mutations = true && (isSetMutations());
-    builder.append(present_mutations);
+    list.add(present_mutations);
     if (present_mutations)
-      builder.append(mutations);
+      list.add(mutations);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TRowMutations other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TRowMutations typedOther = (TRowMutations)other;
 
-    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
+    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetMutations()).compareTo(typedOther.isSetMutations());
+    lastComparison = Boolean.valueOf(isSetMutations()).compareTo(other.isSetMutations());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMutations()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, typedOther.mutations);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutations, other.mutations);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -459,12 +462,12 @@ public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRo
               {
                 org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                 struct.mutations = new ArrayList<TMutation>(_list124.size);
-                for (int _i125 = 0; _i125 < _list124.size; ++_i125)
+                TMutation _elem125;
+                for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                 {
-                  TMutation _elem126; // required
-                  _elem126 = new TMutation();
-                  _elem126.read(iprot);
-                  struct.mutations.add(_elem126);
+                  _elem125 = new TMutation();
+                  _elem125.read(iprot);
+                  struct.mutations.add(_elem125);
                 }
                 iprot.readListEnd();
               }
@@ -540,12 +543,12 @@ public class TRowMutations implements org.apache.thrift.TBase<TRowMutations, TRo
       {
         org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
         struct.mutations = new ArrayList<TMutation>(_list129.size);
-        for (int _i130 = 0; _i130 < _list129.size; ++_i130)
+        TMutation _elem130;
+        for (int _i131 = 0; _i131 < _list129.size; ++_i131)
         {
-          TMutation _elem131; // required
-          _elem131 = new TMutation();
-          _elem131.read(iprot);
-          struct.mutations.add(_elem131);
+          _elem130 = new TMutation();
+          _elem130.read(iprot);
+          struct.mutations.add(_elem130);
         }
       }
       struct.setMutationsIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java
index 3fbf970..f4c4d77 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,14 +29,17 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
 /**
  * Any timestamps in the columns are ignored, use timeRange to select by timestamp.
  * Max versions defaults to 1.
  */
-public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, java.io.Serializable, Cloneable {
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, java.io.Serializable, Cloneable, Comparable<TScan> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TScan");
 
   private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -162,7 +166,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   private static final int __BATCHSIZE_ISSET_ID = 2;
   private static final int __REVERSED_ISSET_ID = 3;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.START_ROW,_Fields.STOP_ROW,_Fields.COLUMNS,_Fields.CACHING,_Fields.MAX_VERSIONS,_Fields.TIME_RANGE,_Fields.FILTER_STRING,_Fields.BATCH_SIZE,_Fields.ATTRIBUTES,_Fields.AUTHORIZATIONS,_Fields.REVERSED};
+  private static final _Fields optionals[] = {_Fields.START_ROW,_Fields.STOP_ROW,_Fields.COLUMNS,_Fields.CACHING,_Fields.MAX_VERSIONS,_Fields.TIME_RANGE,_Fields.FILTER_STRING,_Fields.BATCH_SIZE,_Fields.ATTRIBUTES,_Fields.AUTHORIZATIONS,_Fields.REVERSED};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -207,14 +211,12 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
     __isset_bitfield = other.__isset_bitfield;
     if (other.isSetStartRow()) {
       this.startRow = org.apache.thrift.TBaseHelper.copyBinary(other.startRow);
-;
     }
     if (other.isSetStopRow()) {
       this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(other.stopRow);
-;
     }
     if (other.isSetColumns()) {
-      List<TColumn> __this__columns = new ArrayList<TColumn>();
+      List<TColumn> __this__columns = new ArrayList<TColumn>(other.columns.size());
       for (TColumn other_element : other.columns) {
         __this__columns.add(new TColumn(other_element));
       }
@@ -227,24 +229,10 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
     }
     if (other.isSetFilterString()) {
       this.filterString = org.apache.thrift.TBaseHelper.copyBinary(other.filterString);
-;
     }
     this.batchSize = other.batchSize;
     if (other.isSetAttributes()) {
-      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>();
-      for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.attributes.entrySet()) {
-
-        ByteBuffer other_element_key = other_element.getKey();
-        ByteBuffer other_element_value = other_element.getValue();
-
-        ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
-;
-
-        ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
-;
-
-        __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
-      }
+      Map<ByteBuffer,ByteBuffer> __this__attributes = new HashMap<ByteBuffer,ByteBuffer>(other.attributes);
       this.attributes = __this__attributes;
     }
     if (other.isSetAuthorizations()) {
@@ -282,16 +270,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public ByteBuffer bufferForStartRow() {
-    return startRow;
+    return org.apache.thrift.TBaseHelper.copyBinary(startRow);
   }
 
   public TScan setStartRow(byte[] startRow) {
-    setStartRow(startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(startRow));
+    this.startRow = startRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(startRow, startRow.length));
     return this;
   }
 
   public TScan setStartRow(ByteBuffer startRow) {
-    this.startRow = startRow;
+    this.startRow = org.apache.thrift.TBaseHelper.copyBinary(startRow);
     return this;
   }
 
@@ -316,16 +304,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public ByteBuffer bufferForStopRow() {
-    return stopRow;
+    return org.apache.thrift.TBaseHelper.copyBinary(stopRow);
   }
 
   public TScan setStopRow(byte[] stopRow) {
-    setStopRow(stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(stopRow));
+    this.stopRow = stopRow == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(stopRow, stopRow.length));
     return this;
   }
 
   public TScan setStopRow(ByteBuffer stopRow) {
-    this.stopRow = stopRow;
+    this.stopRow = org.apache.thrift.TBaseHelper.copyBinary(stopRow);
     return this;
   }
 
@@ -459,16 +447,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public ByteBuffer bufferForFilterString() {
-    return filterString;
+    return org.apache.thrift.TBaseHelper.copyBinary(filterString);
   }
 
   public TScan setFilterString(byte[] filterString) {
-    setFilterString(filterString == null ? (ByteBuffer)null : ByteBuffer.wrap(filterString));
+    this.filterString = filterString == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(filterString, filterString.length));
     return this;
   }
 
   public TScan setFilterString(ByteBuffer filterString) {
-    this.filterString = filterString;
+    this.filterString = org.apache.thrift.TBaseHelper.copyBinary(filterString);
     return this;
   }
 
@@ -697,10 +685,10 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       return getColumns();
 
     case CACHING:
-      return Integer.valueOf(getCaching());
+      return getCaching();
 
     case MAX_VERSIONS:
-      return Integer.valueOf(getMaxVersions());
+      return getMaxVersions();
 
     case TIME_RANGE:
       return getTimeRange();
@@ -709,7 +697,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       return getFilterString();
 
     case BATCH_SIZE:
-      return Integer.valueOf(getBatchSize());
+      return getBatchSize();
 
     case ATTRIBUTES:
       return getAttributes();
@@ -718,7 +706,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       return getAuthorizations();
 
     case REVERSED:
-      return Boolean.valueOf(isReversed());
+      return isReversed();
 
     }
     throw new IllegalStateException();
@@ -874,180 +862,180 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_startRow = true && (isSetStartRow());
-    builder.append(present_startRow);
+    list.add(present_startRow);
     if (present_startRow)
-      builder.append(startRow);
+      list.add(startRow);
 
     boolean present_stopRow = true && (isSetStopRow());
-    builder.append(present_stopRow);
+    list.add(present_stopRow);
     if (present_stopRow)
-      builder.append(stopRow);
+      list.add(stopRow);
 
     boolean present_columns = true && (isSetColumns());
-    builder.append(present_columns);
+    list.add(present_columns);
     if (present_columns)
-      builder.append(columns);
+      list.add(columns);
 
     boolean present_caching = true && (isSetCaching());
-    builder.append(present_caching);
+    list.add(present_caching);
     if (present_caching)
-      builder.append(caching);
+      list.add(caching);
 
     boolean present_maxVersions = true && (isSetMaxVersions());
-    builder.append(present_maxVersions);
+    list.add(present_maxVersions);
     if (present_maxVersions)
-      builder.append(maxVersions);
+      list.add(maxVersions);
 
     boolean present_timeRange = true && (isSetTimeRange());
-    builder.append(present_timeRange);
+    list.add(present_timeRange);
     if (present_timeRange)
-      builder.append(timeRange);
+      list.add(timeRange);
 
     boolean present_filterString = true && (isSetFilterString());
-    builder.append(present_filterString);
+    list.add(present_filterString);
     if (present_filterString)
-      builder.append(filterString);
+      list.add(filterString);
 
     boolean present_batchSize = true && (isSetBatchSize());
-    builder.append(present_batchSize);
+    list.add(present_batchSize);
     if (present_batchSize)
-      builder.append(batchSize);
+      list.add(batchSize);
 
     boolean present_attributes = true && (isSetAttributes());
-    builder.append(present_attributes);
+    list.add(present_attributes);
     if (present_attributes)
-      builder.append(attributes);
+      list.add(attributes);
 
     boolean present_authorizations = true && (isSetAuthorizations());
-    builder.append(present_authorizations);
+    list.add(present_authorizations);
     if (present_authorizations)
-      builder.append(authorizations);
+      list.add(authorizations);
 
     boolean present_reversed = true && (isSetReversed());
-    builder.append(present_reversed);
+    list.add(present_reversed);
     if (present_reversed)
-      builder.append(reversed);
+      list.add(reversed);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TScan other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TScan typedOther = (TScan)other;
 
-    lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
+    lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStartRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(typedOther.isSetStopRow());
+    lastComparison = Boolean.valueOf(isSetStopRow()).compareTo(other.isSetStopRow());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStopRow()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, typedOther.stopRow);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopRow, other.stopRow);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
+    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetColumns()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetCaching()).compareTo(typedOther.isSetCaching());
+    lastComparison = Boolean.valueOf(isSetCaching()).compareTo(other.isSetCaching());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetCaching()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caching, typedOther.caching);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caching, other.caching);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetMaxVersions()).compareTo(typedOther.isSetMaxVersions());
+    lastComparison = Boolean.valueOf(isSetMaxVersions()).compareTo(other.isSetMaxVersions());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMaxVersions()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxVersions, typedOther.maxVersions);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxVersions, other.maxVersions);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(typedOther.isSetTimeRange());
+    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(other.isSetTimeRange());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetTimeRange()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRange, typedOther.timeRange);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRange, other.timeRange);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetFilterString()).compareTo(typedOther.isSetFilterString());
+    lastComparison = Boolean.valueOf(isSetFilterString()).compareTo(other.isSetFilterString());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetFilterString()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterString, typedOther.filterString);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterString, other.filterString);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(typedOther.isSetBatchSize());
+    lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetBatchSize()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, typedOther.batchSize);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, other.batchSize);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
+    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAttributes()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, typedOther.attributes);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
+    lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(other.isSetAuthorizations());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetAuthorizations()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, other.authorizations);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetReversed()).compareTo(typedOther.isSetReversed());
+    lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetReversed()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, typedOther.reversed);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -1237,12 +1225,12 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
               {
                 org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                 struct.columns = new ArrayList<TColumn>(_list106.size);
-                for (int _i107 = 0; _i107 < _list106.size; ++_i107)
+                TColumn _elem107;
+                for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                 {
-                  TColumn _elem108; // required
-                  _elem108 = new TColumn();
-                  _elem108.read(iprot);
-                  struct.columns.add(_elem108);
+                  _elem107 = new TColumn();
+                  _elem107.read(iprot);
+                  struct.columns.add(_elem107);
                 }
                 iprot.readListEnd();
               }
@@ -1297,13 +1285,13 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
               {
                 org.apache.thrift.protocol.TMap _map109 = iprot.readMapBegin();
                 struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map109.size);
-                for (int _i110 = 0; _i110 < _map109.size; ++_i110)
+                ByteBuffer _key110;
+                ByteBuffer _val111;
+                for (int _i112 = 0; _i112 < _map109.size; ++_i112)
                 {
-                  ByteBuffer _key111; // required
-                  ByteBuffer _val112; // required
-                  _key111 = iprot.readBinary();
-                  _val112 = iprot.readBinary();
-                  struct.attributes.put(_key111, _val112);
+                  _key110 = iprot.readBinary();
+                  _val111 = iprot.readBinary();
+                  struct.attributes.put(_key110, _val111);
                 }
                 iprot.readMapEnd();
               }
@@ -1544,12 +1532,12 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
         {
           org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
           struct.columns = new ArrayList<TColumn>(_list117.size);
-          for (int _i118 = 0; _i118 < _list117.size; ++_i118)
+          TColumn _elem118;
+          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
           {
-            TColumn _elem119; // required
-            _elem119 = new TColumn();
-            _elem119.read(iprot);
-            struct.columns.add(_elem119);
+            _elem118 = new TColumn();
+            _elem118.read(iprot);
+            struct.columns.add(_elem118);
           }
         }
         struct.setColumnsIsSet(true);
@@ -1579,13 +1567,13 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
         {
           org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.attributes = new HashMap<ByteBuffer,ByteBuffer>(2*_map120.size);
-          for (int _i121 = 0; _i121 < _map120.size; ++_i121)
+          ByteBuffer _key121;
+          ByteBuffer _val122;
+          for (int _i123 = 0; _i123 < _map120.size; ++_i123)
           {
-            ByteBuffer _key122; // required
-            ByteBuffer _val123; // required
-            _key122 = iprot.readBinary();
-            _val123 = iprot.readBinary();
-            struct.attributes.put(_key122, _val123);
+            _key121 = iprot.readBinary();
+            _val122 = iprot.readBinary();
+            struct.attributes.put(_key121, _val122);
           }
         }
         struct.setAttributesIsSet(true);
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TServerName.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TServerName.java
index 652fa3f..0682675 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TServerName.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TServerName.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class TServerName implements org.apache.thrift.TBase<TServerName, TServerName._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TServerName implements org.apache.thrift.TBase<TServerName, TServerName._Fields>, java.io.Serializable, Cloneable, Comparable<TServerName> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TServerName");
 
   private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -116,7 +120,7 @@ public class TServerName implements org.apache.thrift.TBase<TServerName, TServer
   private static final int __PORT_ISSET_ID = 0;
   private static final int __STARTCODE_ISSET_ID = 1;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.PORT,_Fields.START_CODE};
+  private static final _Fields optionals[] = {_Fields.PORT,_Fields.START_CODE};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -270,10 +274,10 @@ public class TServerName implements org.apache.thrift.TBase<TServerName, TServer
       return getHostName();
 
     case PORT:
-      return Integer.valueOf(getPort());
+      return getPort();
 
     case START_CODE:
-      return Long.valueOf(getStartCode());
+      return getStartCode();
 
     }
     throw new IllegalStateException();
@@ -341,60 +345,60 @@ public class TServerName implements org.apache.thrift.TBase<TServerName, TServer
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_hostName = true && (isSetHostName());
-    builder.append(present_hostName);
+    list.add(present_hostName);
     if (present_hostName)
-      builder.append(hostName);
+      list.add(hostName);
 
     boolean present_port = true && (isSetPort());
-    builder.append(present_port);
+    list.add(present_port);
     if (present_port)
-      builder.append(port);
+      list.add(port);
 
     boolean present_startCode = true && (isSetStartCode());
-    builder.append(present_startCode);
+    list.add(present_startCode);
     if (present_startCode)
-      builder.append(startCode);
+      list.add(startCode);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TServerName other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TServerName typedOther = (TServerName)other;
 
-    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
+    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetHostName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
+    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetPort()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetStartCode()).compareTo(typedOther.isSetStartCode());
+    lastComparison = Boolean.valueOf(isSetStartCode()).compareTo(other.isSetStartCode());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetStartCode()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startCode, typedOther.startCode);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startCode, other.startCode);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java
index cc7a15b..63c91f5 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java
@@ -1,12 +1,11 @@
 /**
- * Autogenerated by Thrift Compiler (0.9.0)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.hadoop.hbase.thrift2.generated;
 
-import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;
 import org.apache.thrift.scheme.StandardScheme;
@@ -16,6 +15,8 @@ import org.apache.thrift.protocol.TTupleProtocol;
 import org.apache.thrift.protocol.TProtocolException;
 import org.apache.thrift.EncodingUtils;
 import org.apache.thrift.TException;
+import org.apache.thrift.async.AsyncMethodCallback;
+import org.apache.thrift.server.AbstractNonblockingServer.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -28,10 +29,13 @@ import java.util.Collections;
 import java.util.BitSet;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import javax.annotation.Generated;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRange._Fields>, java.io.Serializable, Cloneable {
+@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-17")
+public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRange._Fields>, java.io.Serializable, Cloneable, Comparable<TTimeRange> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTimeRange");
 
   private static final org.apache.thrift.protocol.TField MIN_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("minStamp", org.apache.thrift.protocol.TType.I64, (short)1);
@@ -227,10 +231,10 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
   public Object getFieldValue(_Fields field) {
     switch (field) {
     case MIN_STAMP:
-      return Long.valueOf(getMinStamp());
+      return getMinStamp();
 
     case MAX_STAMP:
-      return Long.valueOf(getMaxStamp());
+      return getMaxStamp();
 
     }
     throw new IllegalStateException();
@@ -287,45 +291,45 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
 
   @Override
   public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
+    List<Object> list = new ArrayList<Object>();
 
     boolean present_minStamp = true;
-    builder.append(present_minStamp);
+    list.add(present_minStamp);
     if (present_minStamp)
-      builder.append(minStamp);
+      list.add(minStamp);
 
     boolean present_maxStamp = true;
-    builder.append(present_maxStamp);
+    list.add(present_maxStamp);
     if (present_maxStamp)
-      builder.append(maxStamp);
+      list.add(maxStamp);
 
-    return builder.toHashCode();
+    return list.hashCode();
   }
 
+  @Override
   public int compareTo(TTimeRange other) {
     if (!getClass().equals(other.getClass())) {
       return getClass().getName().compareTo(other.getClass().getName());
     }
 
     int lastComparison = 0;
-    TTimeRange typedOther = (TTimeRange)other;
 
-    lastComparison = Boolean.valueOf(isSetMinStamp()).compareTo(typedOther.isSetMinStamp());
+    lastComparison = Boolean.valueOf(isSetMinStamp()).compareTo(other.isSetMinStamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMinStamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minStamp, typedOther.minStamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minStamp, other.minStamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetMaxStamp()).compareTo(typedOther.isSetMaxStamp());
+    lastComparison = Boolean.valueOf(isSetMaxStamp()).compareTo(other.isSetMaxStamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
     if (isSetMaxStamp()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxStamp, typedOther.maxStamp);
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxStamp, other.maxStamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
diff --git a/pom.xml b/pom.xml
index cb01cea..fa7400e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1195,7 +1195,7 @@
     <mockito-all.version>1.10.8</mockito-all.version>
     <protobuf.version>2.5.0</protobuf.version>
     <thrift.path>thrift</thrift.path>
-    <thrift.version>0.9.2</thrift.version>
+    <thrift.version>0.9.3</thrift.version>
     <zookeeper.version>3.4.6</zookeeper.version>
     <slf4j.version>1.7.7</slf4j.version>
     <clover.version>4.0.3</clover.version>
-- 
2.1.2

