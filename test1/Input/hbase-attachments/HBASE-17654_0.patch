From 84c258ca5d9e67d26601b9b0a1e552947a11a1f3 Mon Sep 17 00:00:00 2001
From: Apekshit Sharma <appy@apache.org>
Date: Thu, 16 Feb 2017 02:00:37 -0800
Subject: [PATCH] HBASE-17654 RSGroup refactoring.

Changes contain:
- Making rsGroupInfoManager non-static in RSGroupAdminEndpoint
- Encapsulate RSGroupAdminService into an internal class in RSGroupAdminEndpoint (on need of inheritence).
- Make RSGroupAdminEndpoint extend BaseMasterObserver, so got rid of unwanted empty implementations.
- Change two internal classes in RSGroupAdminServer to non-static (so outer classes' variables can be shared).
- Rename RSGroupSerDe to RSGroupUtil (for time being, before TODO in that class is addressed).
- Javadoc comments
- Improving variable names
- Maybe other misc refactoring

Change-Id: I09f0f5aa413150390c91795b8a8fd5e6cdd6c416
---
 .../apache/hadoop/hbase/rsgroup/RSGroupAdmin.java  |   52 +-
 .../hadoop/hbase/rsgroup/RSGroupAdminClient.java   |   19 +-
 .../hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java | 1255 +++-----------------
 .../hadoop/hbase/rsgroup/RSGroupAdminServer.java   |   57 +-
 .../hbase/rsgroup/RSGroupBasedLoadBalancer.java    |   34 +-
 .../hadoop/hbase/rsgroup/RSGroupInfoManager.java   |   52 +-
 .../hbase/rsgroup/RSGroupInfoManagerImpl.java      |  289 ++---
 .../apache/hadoop/hbase/rsgroup/RSGroupSerDe.java  |  121 --
 .../apache/hadoop/hbase/rsgroup/RSGroupUtil.java   |  119 ++
 .../hadoop/hbase/rsgroup/RSGroupableBalancer.java  |    5 +-
 .../balancer/TestRSGroupBasedLoadBalancer.java     |    3 +-
 .../hbase/rsgroup/VerifyingRSGroupAdminClient.java |    8 +-
 12 files changed, 490 insertions(+), 1524 deletions(-)
 delete mode 100644 hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java
 create mode 100644 hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupUtil.java

diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
index df8129d..cbc3493 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
@@ -17,7 +17,6 @@
  */
 package org.apache.hadoop.hbase.rsgroup;
 
-import java.io.Closeable;
 import java.io.IOException;
 import java.util.List;
 import java.util.Set;
@@ -32,76 +31,51 @@ import org.apache.hadoop.hbase.util.Address;
 @InterfaceAudience.Private
 public interface RSGroupAdmin {
   /**
-   * Gets the regionserver group information.
-   *
-   * @param groupName the group name
-   * @return An instance of RSGroupInfo
+   * Gets {@code RSGroupInfo} for given group name.
    */
   RSGroupInfo getRSGroupInfo(String groupName) throws IOException;
 
   /**
-   * Gets the regionserver group info of table.
-   *
-   * @param tableName the table name
-   * @return An instance of RSGroupInfo.
+   * Gets {@code RSGroupInfo} for the given table's group.
    */
   RSGroupInfo getRSGroupInfoOfTable(TableName tableName) throws IOException;
 
   /**
-   * Move a set of serves to another group
-   *
-   *
-   * @param servers set of servers, must be in the form HOST:PORT
-   * @param targetGroup the target group
-   * @throws java.io.IOException Signals that an I/O exception has occurred.
+   * Move given set of servers to the specified target RegionServer group.
    */
-  void moveServers(Set<Address> servers, String targetGroup)
-  throws IOException;
+  void moveServers(Set<Address> servers, String targetGroup) throws IOException;
 
   /**
-   * Move tables to a new group.
+   * Move given set of tables to the specified target RegionServer group.
    * This will unassign all of a table's region so it can be reassigned to the correct group.
-   * @param tables list of tables to move
-   * @param targetGroup target group
-   * @throws java.io.IOException on failure to move tables
    */
   void moveTables(Set<TableName> tables, String targetGroup) throws IOException;
 
   /**
-   * Add a new group
-   * @param name name of the group
-   * @throws java.io.IOException on failure to add group
+   * Creates a new RegionServer group with the given name.
    */
-  void addRSGroup(String name) throws IOException;
+  void addRSGroup(String groupName) throws IOException;
 
   /**
-   * Remove a regionserver group
-   * @param name name of the group
-   * @throws java.io.IOException on failure to remove group
+   * Removes RegionServer group associated with the given name.
    */
-  void removeRSGroup(String name) throws IOException;
+  void removeRSGroup(String groupName) throws IOException;
 
   /**
-   * Balance the regions in a group
+   * Balance regions in the given RegionServer group.
    *
-   * @param name the name of the group to balance
-   * @return boolean whether balance ran or not
-   * @throws java.io.IOException on unexpected failure to balance group
+   * @return boolean Whether balance ran or not
    */
-  boolean balanceRSGroup(String name) throws IOException;
+  boolean balanceRSGroup(String groupName) throws IOException;
 
   /**
-   * Lists the existing groups.
-   *
-   * @return Collection of RSGroupInfo.
+   * Lists current set of RegionServer groups.
    */
   List<RSGroupInfo> listRSGroups() throws IOException;
 
   /**
    * Retrieve the RSGroupInfo a server is affiliated to
    * @param hostPort HostPort to get RSGroupInfo for
-   * @return RSGroupInfo associated with the server
-   * @throws java.io.IOException on unexpected failure to retrieve GroupInfo
    */
   RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException;
 }
\ No newline at end of file
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java
index c199b2f..1c8edac 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java
@@ -36,7 +36,6 @@ import org.apache.hadoop.hbase.util.Address;
 import com.google.common.collect.Sets;
 import com.google.protobuf.ServiceException;
 
-
 /**
  * Client used for managing region server group information.
  */
@@ -57,7 +56,7 @@ class RSGroupAdminClient implements RSGroupAdmin {
             RSGroupAdminProtos.GetRSGroupInfoRequest.newBuilder()
                 .setRSGroupName(groupName).build());
       if(resp.hasRSGroupInfo()) {
-        return RSGroupSerDe.toGroupInfo(resp.getRSGroupInfo());
+        return RSGroupUtil.toGroupInfo(resp.getRSGroupInfo());
       }
       return null;
     } catch (ServiceException e) {
@@ -74,7 +73,7 @@ class RSGroupAdminClient implements RSGroupAdmin {
     try {
       GetRSGroupInfoOfTableResponse resp = stub.getRSGroupInfoOfTable(null, request);
       if (resp.hasRSGroupInfo()) {
-        return RSGroupSerDe.toGroupInfo(resp.getRSGroupInfo());
+        return RSGroupUtil.toGroupInfo(resp.getRSGroupInfo());
       }
       return null;
     } catch (ServiceException e) {
@@ -95,7 +94,6 @@ class RSGroupAdminClient implements RSGroupAdmin {
         RSGroupAdminProtos.MoveServersRequest.newBuilder()
             .setTargetGroup(targetGroup)
             .addAllServers(hostPorts).build();
-
     try {
       stub.moveServers(null, request);
     } catch (ServiceException e) {
@@ -106,8 +104,7 @@ class RSGroupAdminClient implements RSGroupAdmin {
   @Override
   public void moveTables(Set<TableName> tables, String targetGroup) throws IOException {
     RSGroupAdminProtos.MoveTablesRequest.Builder builder =
-        RSGroupAdminProtos.MoveTablesRequest.newBuilder()
-            .setTargetGroup(targetGroup);
+        RSGroupAdminProtos.MoveTablesRequest.newBuilder().setTargetGroup(targetGroup);
     for(TableName tableName: tables) {
       builder.addTableName(ProtobufUtil.toProtoTableName(tableName));
     }
@@ -143,10 +140,10 @@ class RSGroupAdminClient implements RSGroupAdmin {
   }
 
   @Override
-  public boolean balanceRSGroup(String name) throws IOException {
+  public boolean balanceRSGroup(String groupName) throws IOException {
     RSGroupAdminProtos.BalanceRSGroupRequest request =
         RSGroupAdminProtos.BalanceRSGroupRequest.newBuilder()
-            .setRSGroupName(name).build();
+            .setRSGroupName(groupName).build();
 
     try {
       return stub.balanceRSGroup(null, request).getBalanceRan();
@@ -161,9 +158,9 @@ class RSGroupAdminClient implements RSGroupAdmin {
       List<RSGroupProtos.RSGroupInfo> resp =
           stub.listRSGroupInfos(null,
               RSGroupAdminProtos.ListRSGroupInfosRequest.newBuilder().build()).getRSGroupInfoList();
-      List<RSGroupInfo> result = new ArrayList<RSGroupInfo>(resp.size());
+      List<RSGroupInfo> result = new ArrayList<>(resp.size());
       for(RSGroupProtos.RSGroupInfo entry: resp) {
-        result.add(RSGroupSerDe.toGroupInfo(entry));
+        result.add(RSGroupUtil.toGroupInfo(entry));
       }
       return result;
     } catch (ServiceException e) {
@@ -183,7 +180,7 @@ class RSGroupAdminClient implements RSGroupAdmin {
     try {
       GetRSGroupInfoOfServerResponse resp = stub.getRSGroupInfoOfServer(null, request);
       if (resp.hasRSGroupInfo()) {
-        return RSGroupSerDe.toGroupInfo(resp.getRSGroupInfo());
+        return RSGroupUtil.toGroupInfo(resp.getRSGroupInfo());
       }
       return null;
     } catch (ServiceException e) {
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
index eb70179..a1e670b 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
@@ -20,262 +20,67 @@ package org.apache.hadoop.hbase.rsgroup;
 
 import java.io.IOException;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Set;
 
-import org.apache.hadoop.hbase.Coprocessor;
+import com.google.common.collect.Sets;
+import com.google.protobuf.RpcCallback;
+import com.google.protobuf.RpcController;
 import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.NamespaceDescriptor;
-import org.apache.hadoop.hbase.ProcedureInfo;
-import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.client.MasterSwitchType;
-import org.apache.hadoop.hbase.client.Mutation;
 import org.apache.hadoop.hbase.constraint.ConstraintException;
+import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
-import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.ipc.CoprocessorRpcUtils;
 import org.apache.hadoop.hbase.master.MasterServices;
-import org.apache.hadoop.hbase.master.RegionPlan;
-import org.apache.hadoop.hbase.master.locking.LockProcedure;
-import org.apache.hadoop.hbase.master.locking.LockProcedure.LockType;
-import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
-import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.AddRSGroupRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.AddRSGroupResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.BalanceRSGroupRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.BalanceRSGroupResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoOfServerRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoOfServerResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoOfTableRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoOfTableResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.ListRSGroupInfosRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.ListRSGroupInfosResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.MoveServersRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.MoveServersResponse;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.MoveTablesRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.MoveTablesResponse;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RSGroupAdminService;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RemoveRSGroupRequest;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RemoveRSGroupResponse;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.SnapshotDescription;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Quotas;
-import org.apache.hadoop.hbase.util.Address;
 
-import com.google.common.collect.Sets;
-import com.google.protobuf.RpcCallback;
-import com.google.protobuf.RpcController;
 import com.google.protobuf.Service;
-
+import org.apache.hadoop.hbase.util.Address;
 
 @InterfaceAudience.Private
-public class RSGroupAdminEndpoint extends RSGroupAdminService implements CoprocessorService, 
-    Coprocessor, MasterObserver {
+public class RSGroupAdminEndpoint extends BaseMasterObserver implements CoprocessorService {
   private MasterServices master = null;
-
-  // TODO: Static? Fix.
-  private static RSGroupInfoManager groupInfoManager;
+  // Only instance of RSGroupInfoManager. RSGroup aware load balancers ask for this instance on
+  // their setup.
+  private RSGroupInfoManager groupInfoManager;
   private RSGroupAdminServer groupAdminServer;
+  private RSGroupAdminService groupAdminService;
 
   @Override
   public void start(CoprocessorEnvironment env) throws IOException {
-    MasterCoprocessorEnvironment menv = (MasterCoprocessorEnvironment)env;
-    master = menv.getMasterServices();
-    setGroupInfoManager(new RSGroupInfoManagerImpl(master));
+    master = ((MasterCoprocessorEnvironment)env).getMasterServices();
+    groupInfoManager = RSGroupInfoManagerImpl.getInstance(master);
     groupAdminServer = new RSGroupAdminServer(master, groupInfoManager);
+    groupAdminService = new RSGroupAdminServiceImpl();
     Class<?> clazz =
         master.getConfiguration().getClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS, null);
     if (!RSGroupableBalancer.class.isAssignableFrom(clazz)) {
-      throw new IOException("Configured balancer is not a GroupableBalancer");
+      throw new IOException("Configured balancer does not support RegionServer groups.");
     }
   }
 
   @Override
-  public void stop(CoprocessorEnvironment env) throws IOException {
-  }
-
-  @Override
   public Service getService() {
-    return this;
-  }
-
-  private static void setStaticGroupInfoManager(RSGroupInfoManagerImpl groupInfoManager) {
-    RSGroupAdminEndpoint.groupInfoManager = groupInfoManager;
-  }
-
-  private void setGroupInfoManager(RSGroupInfoManagerImpl groupInfoManager) throws IOException {
-    if (groupInfoManager == null) {
-      groupInfoManager = new RSGroupInfoManagerImpl(master);
-      groupInfoManager.init();
-    } else if (!groupInfoManager.isInit()) {
-      groupInfoManager.init();
-    }
-    setStaticGroupInfoManager(groupInfoManager);
+    return groupAdminService;
   }
 
   RSGroupInfoManager getGroupInfoManager() {
     return groupInfoManager;
   }
 
-  @Override
-  public void getRSGroupInfo(RpcController controller,
-                           GetRSGroupInfoRequest request,
-                           RpcCallback<GetRSGroupInfoResponse> done) {
-    GetRSGroupInfoResponse.Builder builder =
-          GetRSGroupInfoResponse.newBuilder();
-    String groupName = request.getRSGroupName();
-    try {
-      RSGroupInfo rsGroupInfo = groupAdminServer.getRSGroupInfo(groupName);
-      if (rsGroupInfo != null) {
-        builder.setRSGroupInfo(RSGroupSerDe.toProtoGroupInfo(rsGroupInfo));
-      }
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void getRSGroupInfoOfTable(RpcController controller,
-                                  GetRSGroupInfoOfTableRequest request,
-                                  RpcCallback<GetRSGroupInfoOfTableResponse> done) {
-    GetRSGroupInfoOfTableResponse.Builder builder =
-          GetRSGroupInfoOfTableResponse.newBuilder();
-    try {
-      TableName tableName = ProtobufUtil.toTableName(request.getTableName());
-      RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupInfoOfTable(tableName);
-      if (RSGroupInfo != null) {
-        builder.setRSGroupInfo(RSGroupSerDe.toProtoGroupInfo(RSGroupInfo));
-      }
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void moveServers(RpcController controller,
-                          MoveServersRequest request,
-                          RpcCallback<MoveServersResponse> done) {
-    RSGroupAdminProtos.MoveServersResponse.Builder builder =
-          RSGroupAdminProtos.MoveServersResponse.newBuilder();
-    try {
-      Set<Address> hostPorts = Sets.newHashSet();
-      for(HBaseProtos.ServerName el: request.getServersList()) {
-        hostPorts.add(Address.fromParts(el.getHostName(), el.getPort()));
-      }
-      groupAdminServer.moveServers(hostPorts, request.getTargetGroup());
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void moveTables(RpcController controller,
-                         MoveTablesRequest request,
-                         RpcCallback<MoveTablesResponse> done) {
-    MoveTablesResponse.Builder builder =
-          MoveTablesResponse.newBuilder();
-    try {
-      Set<TableName> tables = new HashSet<TableName>(request.getTableNameList().size());
-      for(HBaseProtos.TableName tableName: request.getTableNameList()) {
-        tables.add(ProtobufUtil.toTableName(tableName));
-      }
-      groupAdminServer.moveTables(tables, request.getTargetGroup());
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void addRSGroup(RpcController controller,
-                       AddRSGroupRequest request,
-                       RpcCallback<AddRSGroupResponse> done) {
-    AddRSGroupResponse.Builder builder =
-          AddRSGroupResponse.newBuilder();
-    try {
-      groupAdminServer.addRSGroup(request.getRSGroupName());
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void removeRSGroup(RpcController controller,
-                          RemoveRSGroupRequest request,
-                          RpcCallback<RemoveRSGroupResponse> done) {
-    RemoveRSGroupResponse.Builder builder =
-          RemoveRSGroupResponse.newBuilder();
-    try {
-      groupAdminServer.removeRSGroup(request.getRSGroupName());
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void balanceRSGroup(RpcController controller,
-                           BalanceRSGroupRequest request,
-                           RpcCallback<BalanceRSGroupResponse> done) {
-    BalanceRSGroupResponse.Builder builder = BalanceRSGroupResponse.newBuilder();
-    try {
-      builder.setBalanceRan(groupAdminServer.balanceRSGroup(request.getRSGroupName()));
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-      builder.setBalanceRan(false);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void listRSGroupInfos(RpcController controller,
-                             ListRSGroupInfosRequest request,
-                             RpcCallback<ListRSGroupInfosResponse> done) {
-    ListRSGroupInfosResponse.Builder builder =
-          ListRSGroupInfosResponse.newBuilder();
-    try {
-      for(RSGroupInfo RSGroupInfo : groupAdminServer.listRSGroups()) {
-        builder.addRSGroupInfo(RSGroupSerDe.toProtoGroupInfo(RSGroupInfo));
-      }
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
-
-  @Override
-  public void getRSGroupInfoOfServer(RpcController controller,
-                                   GetRSGroupInfoOfServerRequest request,
-                                   RpcCallback<GetRSGroupInfoOfServerResponse> done) {
-    GetRSGroupInfoOfServerResponse.Builder builder = GetRSGroupInfoOfServerResponse.newBuilder();
-    try {
-      Address hp =
-          Address.fromParts(request.getServer().getHostName(), request.getServer().getPort());
-      RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupOfServer(hp);
-      if (RSGroupInfo != null) {
-        builder.setRSGroupInfo(RSGroupSerDe.toProtoGroupInfo(RSGroupInfo));
-      }
-    } catch (IOException e) {
-      CoprocessorRpcUtils.setControllerException(controller, e);
-    }
-    done.run(builder.build());
-  }
+  /////////////////////////////////////////////////////////////////////////////
+  // MasterObserver overrides
+  /////////////////////////////////////////////////////////////////////////////
 
   @Override
   public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
@@ -303,890 +108,160 @@ public class RSGroupAdminEndpoint extends RSGroupAdminService implements Coproce
                                  NamespaceDescriptor ns) throws IOException {
     preCreateNamespace(ctx, ns);
   }
+  /////////////////////////////////////////////////////////////////////////////
+
+  /**
+   * Implementation of RSGroupAdminService defined in RSGroupAdmin.proto.
+   * This class calls {@link RSGroupAdminServer} for actual work, converts result to protocol
+   * buffer response, handles exceptions if any occurred and then calls the {@code RpcCallback} with
+   * the response.
+   */
+  private class RSGroupAdminServiceImpl extends RSGroupAdminProtos.RSGroupAdminService {
+    @Override
+    public void getRSGroupInfo(RpcController controller,
+        RSGroupAdminProtos.GetRSGroupInfoRequest request,
+        RpcCallback<RSGroupAdminProtos.GetRSGroupInfoResponse> done) {
+      RSGroupAdminProtos.GetRSGroupInfoResponse.Builder builder =
+          RSGroupAdminProtos.GetRSGroupInfoResponse.newBuilder();
+      String groupName = request.getRSGroupName();
+      try {
+        RSGroupInfo rsGroupInfo = groupAdminServer.getRSGroupInfo(groupName);
+        if (rsGroupInfo != null) {
+          builder.setRSGroupInfo(RSGroupUtil.toProtoGroupInfo(rsGroupInfo));
+        }
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  @Override
-  public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              HTableDescriptor desc,
-                              HRegionInfo[] regions) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    HTableDescriptor desc,
-                                    HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     HTableDescriptor desc,
-                                     HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void postCompletedCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preDeleteTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                             TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postCompletedDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preTruncateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postTruncateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                       TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postCompletedTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                             TableName tableName,
-                             HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              TableName tableName,
-                              HTableDescriptor htd) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    TableName tableName,
-                                    HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     TableName tableName,
-                                     HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postCompletedModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                           TableName tableName,
-                           HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 TableName tableName,
-                                 HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                            TableName tableName,
-                            HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  TableName tableName,
-                                  HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preAddColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  TableName tableName,
-                                  HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postAddColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                   TableName tableName,
-                                   HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              TableName tableName,
-                              HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    TableName tableName,
-                                    HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               TableName tableName,
-                               HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, HColumnDescriptor columnFamily) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, HColumnDescriptor columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void preModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily)
-      throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName, HColumnDescriptor columnFamily) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postCompletedModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily)
-      throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws
-      IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void postCompletedDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void preEnableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postCompletedEnableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
+    @Override
+    public void getRSGroupInfoOfTable(RpcController controller,
+        RSGroupAdminProtos.GetRSGroupInfoOfTableRequest request,
+        RpcCallback<RSGroupAdminProtos.GetRSGroupInfoOfTableResponse> done) {
+      RSGroupAdminProtos.GetRSGroupInfoOfTableResponse.Builder builder =
+          RSGroupAdminProtos.GetRSGroupInfoOfTableResponse.newBuilder();
+      try {
+        TableName tableName = ProtobufUtil.toTableName(request.getTableName());
+        RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupInfoOfTable(tableName);
+        if (RSGroupInfo != null) {
+          builder.setRSGroupInfo(RSGroupUtil.toProtoGroupInfo(RSGroupInfo));
+        }
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  }
+    @Override
+    public void moveServers(RpcController controller, RSGroupAdminProtos.MoveServersRequest request,
+        RpcCallback<RSGroupAdminProtos.MoveServersResponse> done) {
+      RSGroupAdminProtos.MoveServersResponse.Builder builder =
+          RSGroupAdminProtos.MoveServersResponse.newBuilder();
+      try {
+        Set<Address> hostPorts = Sets.newHashSet();
+        for (HBaseProtos.ServerName el : request.getServersList()) {
+          hostPorts.add(Address.fromParts(el.getHostName(), el.getPort()));
+        }
+        groupAdminServer.moveServers(hostPorts, request.getTargetGroup());
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  @Override
-  public void preDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
+    @Override
+    public void moveTables(RpcController controller, RSGroupAdminProtos.MoveTablesRequest request,
+        RpcCallback<RSGroupAdminProtos.MoveTablesResponse> done) {
+      RSGroupAdminProtos.MoveTablesResponse.Builder builder =
+          RSGroupAdminProtos.MoveTablesResponse.newBuilder();
+      try {
+        Set<TableName> tables = new HashSet<>(request.getTableNameList().size());
+        for (HBaseProtos.TableName tableName : request.getTableNameList()) {
+          tables.add(ProtobufUtil.toTableName(tableName));
+        }
+        groupAdminServer.moveTables(tables, request.getTargetGroup());
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  }
+    @Override
+    public void addRSGroup(RpcController controller, RSGroupAdminProtos.AddRSGroupRequest request,
+        RpcCallback<RSGroupAdminProtos.AddRSGroupResponse> done) {
+      RSGroupAdminProtos.AddRSGroupResponse.Builder builder =
+          RSGroupAdminProtos.AddRSGroupResponse.newBuilder();
+      try {
+        groupAdminServer.addRSGroup(request.getRSGroupName());
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  @Override
-  public void postDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
+    @Override
+    public void removeRSGroup(RpcController controller,
+        RSGroupAdminProtos.RemoveRSGroupRequest request,
+        RpcCallback<RSGroupAdminProtos.RemoveRSGroupResponse> done) {
+      RSGroupAdminProtos.RemoveRSGroupResponse.Builder builder =
+          RSGroupAdminProtos.RemoveRSGroupResponse.newBuilder();
+      try {
+        groupAdminServer.removeRSGroup(request.getRSGroupName());
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  }
+    @Override
+    public void balanceRSGroup(RpcController controller,
+        RSGroupAdminProtos.BalanceRSGroupRequest request,
+        RpcCallback<RSGroupAdminProtos.BalanceRSGroupResponse> done) {
+      RSGroupAdminProtos.BalanceRSGroupResponse.Builder builder =
+          RSGroupAdminProtos.BalanceRSGroupResponse.newBuilder();
+      try {
+        builder.setBalanceRan(groupAdminServer.balanceRSGroup(request.getRSGroupName()));
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+        builder.setBalanceRan(false);
+      }
+      done.run(builder.build());
+    }
 
-  @Deprecated
-  @Override
-  public void preDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
+    @Override
+    public void listRSGroupInfos(RpcController controller,
+        RSGroupAdminProtos.ListRSGroupInfosRequest request,
+        RpcCallback<RSGroupAdminProtos.ListRSGroupInfosResponse> done) {
+      RSGroupAdminProtos.ListRSGroupInfosResponse.Builder builder =
+          RSGroupAdminProtos.ListRSGroupInfosResponse.newBuilder();
+      try {
+        for (RSGroupInfo RSGroupInfo : groupAdminServer.listRSGroups()) {
+          builder.addRSGroupInfo(RSGroupUtil.toProtoGroupInfo(RSGroupInfo));
+        }
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
 
-  }
-
-  @Override
-  public void preDisableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postCompletedDisableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Override
-  public void preMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo region,
-                      ServerName srcServer, ServerName destServer) throws IOException {
-
-  }
-
-  @Override
-  public void postMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo region,
-                       ServerName srcServer, ServerName destServer) throws IOException {
-
-  }
-
-  @Override
-  public void preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo, boolean force) throws IOException {
-
-  }
-
-  @Override
-  public void postUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo, boolean force) throws IOException {
-
-  }
-
-  @Override
-  public void preRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void postRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void preBalance(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-
-  }
-
-  @Override
-  public void postBalance(ObserverContext<MasterCoprocessorEnvironment> ctx, List<RegionPlan>
-      plans) throws IOException {
-
-  }
-
-  @Override
-  public boolean preBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx, boolean
-      newValue) throws IOException {
-    return newValue;
-  }
-
-  @Override
-  public void postBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx, boolean
-      oldValue, boolean newValue) throws IOException {
-
-  }
-
-  @Override
-  public void preShutdown(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-
-  }
-
-  @Override
-  public void preStopMaster(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-
-  }
-
-  @Override
-  public void postStartMaster(ObserverContext<MasterCoprocessorEnvironment> ctx) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preMasterInitialization(ObserverContext<MasterCoprocessorEnvironment> ctx) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx, SnapshotDescription
-      snapshot, HTableDescriptor hTableDescriptor) throws IOException {
-
-  }
-
-  @Override
-  public void postSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx, SnapshotDescription
-      snapshot, HTableDescriptor hTableDescriptor) throws IOException {
-
-  }
-
-  @Override
-  public void preListSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void postListSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void preCloneSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               SnapshotDescription snapshot, HTableDescriptor hTableDescriptor)
-      throws IOException {
-
-  }
-
-  @Override
-  public void postCloneSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                SnapshotDescription snapshot, HTableDescriptor hTableDescriptor)
-      throws IOException {
-
-  }
-
-  @Override
-  public void preRestoreSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 SnapshotDescription snapshot, HTableDescriptor hTableDescriptor)
-      throws IOException {
-
-  }
-
-  @Override
-  public void postRestoreSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  SnapshotDescription snapshot, HTableDescriptor
-      hTableDescriptor) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void preGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     List<TableName> tableNamesList, List<HTableDescriptor>
-      descriptors, String regex) throws IOException {
-
-  }
-
-  @Override
-  public void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      List<TableName> tableNamesList, List<HTableDescriptor>
-      descriptors, String regex) throws IOException {
-
-  }
-
-  @Override
-  public void preGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               List<HTableDescriptor> descriptors, String regex) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                List<HTableDescriptor> descriptors, String regex) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postCreateNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  NamespaceDescriptor ns) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace) throws IOException {
-
-  }
-
-  @Override
-  public void postModifyNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  NamespaceDescriptor ns) throws IOException {
-
-  }
-
-  @Override
-  public void preGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace) throws IOException {
-
-  }
-
-  @Override
-  public void postGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                         NamespaceDescriptor ns) throws IOException {
-
-  }
-
-  @Override
-  public void preListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                          List<NamespaceDescriptor> descriptors) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                           List<NamespaceDescriptor> descriptors) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public boolean preSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException {
-    return false;
-  }
-
-  @Override
-  public void postSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String userName,
-                              Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      userName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String userName,
-                              TableName tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      userName, TableName tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String userName,
-                              String namespace, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      userName, String namespace, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetTableQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetTableQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetNamespaceQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetNamespaceQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace, Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preDispatchMerge(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  @Override
-  public void postDispatchMerge(ObserverContext<MasterCoprocessorEnvironment> c, HRegionInfo
-      regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<Address> servers, String targetGroup)
-  throws IOException {}
-
-  @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<Address> servers, String targetGroup)
-  throws IOException {}
-
-  @Override
-  public void preMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<TableName>
-      tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void postMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<TableName> tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void preAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void postAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void postRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String groupName)
-      throws IOException {
-  }
-
-  @Override
-  public void postBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 String groupName, boolean balancerRan) throws IOException {
-  }
-
-  @Override
-  public void preAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      ProcedureExecutor<MasterProcedureEnv> procEnv, long procId) throws IOException {
-  }
-
-  @Override
-  public void postAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<ProcedureInfo> procInfoList) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegion(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void postCompletedSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo regionInfoA,
-      final HRegionInfo regionInfoB) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionBeforePONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final byte[] splitKey,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAfterPONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void postRollBackSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postCompletedMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void postRollBackMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-
-  @Override
-  public void postLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-
-  @Override
-  public void preRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace, TableName tableName,
-      HRegionInfo[] regionInfos, LockType type, String description) throws IOException {
-    // TODO Auto-generated method stub
-    
-  }
-
-  @Override
-  public void postRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace, TableName tableName,
-      HRegionInfo[] regionInfos, LockType type, String description) throws IOException {
-    // TODO Auto-generated method stub
-    
+    @Override
+    public void getRSGroupInfoOfServer(RpcController controller,
+        RSGroupAdminProtos.GetRSGroupInfoOfServerRequest request,
+        RpcCallback<RSGroupAdminProtos.GetRSGroupInfoOfServerResponse> done) {
+      RSGroupAdminProtos.GetRSGroupInfoOfServerResponse.Builder builder =
+          RSGroupAdminProtos.GetRSGroupInfoOfServerResponse.newBuilder();
+      try {
+        Address hp = Address.fromParts(request.getServer().getHostName(),
+            request.getServer().getPort());
+        RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupOfServer(hp);
+        if (RSGroupInfo != null) {
+          builder.setRSGroupInfo(RSGroupUtil.toProtoGroupInfo(RSGroupInfo));
+        }
+      } catch (IOException e) {
+        CoprocessorRpcUtils.setControllerException(controller, e);
+      }
+      done.run(builder.build());
+    }
   }
 }
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java
index d502066..47ae61e 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java
@@ -62,21 +62,21 @@ public class RSGroupAdminServer implements RSGroupAdmin {
   private MasterServices master;
   private final RSGroupInfoManager rsGroupInfoManager;
 
-  public RSGroupAdminServer(MasterServices master,
-                            RSGroupInfoManager RSGroupInfoManager) throws IOException {
+  public RSGroupAdminServer(MasterServices master, RSGroupInfoManager rsGroupInfoManager)
+      throws IOException {
     this.master = master;
-    this.rsGroupInfoManager = RSGroupInfoManager;
+    this.rsGroupInfoManager = rsGroupInfoManager;
   }
 
   @Override
   public RSGroupInfo getRSGroupInfo(String groupName) throws IOException {
-    return getRSGroupInfoManager().getRSGroup(groupName);
+    return rsGroupInfoManager.getRSGroup(groupName);
   }
 
   @Override
   public RSGroupInfo getRSGroupInfoOfTable(TableName tableName) throws IOException {
-    String groupName = getRSGroupInfoManager().getRSGroupOfTable(tableName);
-    return groupName == null? null: getRSGroupInfoManager().getRSGroup(groupName);
+    String groupName = rsGroupInfoManager.getRSGroupOfTable(tableName);
+    return groupName == null? null: rsGroupInfoManager.getRSGroup(groupName);
   }
 
   private void checkOnlineServersOnly(Set<Address> servers) throws ConstraintException {
@@ -95,18 +95,17 @@ public class RSGroupAdminServer implements RSGroupAdmin {
   /**
    * Check passed name. Fail if nulls or if corresponding RSGroupInfo not found.
    * @return The RSGroupInfo named <code>name</code>
-   * @throws IOException
    */
   private RSGroupInfo getAndCheckRSGroupInfo(String name)
   throws IOException {
     if (StringUtils.isEmpty(name)) {
       throw new ConstraintException("RSGroup cannot be null.");
     }
-    RSGroupInfo rsgi = getRSGroupInfo(name);
-    if (rsgi == null) {
+    RSGroupInfo rsGroupInfo = getRSGroupInfo(name);
+    if (rsGroupInfo == null) {
       throw new ConstraintException("RSGroup does not exist: " + name);
     }
-    return rsgi;
+    return rsGroupInfo;
   }
 
   /**
@@ -151,16 +150,15 @@ public class RSGroupAdminServer implements RSGroupAdmin {
       return;
     }
     RSGroupInfo targetGrp = getAndCheckRSGroupInfo(targetGroupName);
-    RSGroupInfoManager manager = getRSGroupInfoManager();
     // Lock the manager during the below manipulations.
-    synchronized (manager) {
+    synchronized (rsGroupInfoManager) {
       if (master.getMasterCoprocessorHost() != null) {
         master.getMasterCoprocessorHost().preMoveServers(servers, targetGroupName);
       }
       // Presume first server is the source group. Later we check all servers are from
       // this same group.
       Address firstServer = servers.iterator().next();
-      RSGroupInfo srcGrp = manager.getRSGroupOfServer(firstServer);
+      RSGroupInfo srcGrp = rsGroupInfoManager.getRSGroupOfServer(firstServer);
       if (srcGrp == null) {
         // Be careful. This message is tested for in TestRSGroupsBase...
         throw new ConstraintException("Source RSGroup for server " + firstServer + " does not exist.");
@@ -176,7 +174,7 @@ public class RSGroupAdminServer implements RSGroupAdmin {
       }
       // Check all servers are of same rsgroup.
       for (Address server: servers) {
-        String tmpGroup = manager.getRSGroupOfServer(server).getName();
+        String tmpGroup = rsGroupInfoManager.getRSGroupOfServer(server).getName();
         if (!tmpGroup.equals(srcGrp.getName())) {
           throw new ConstraintException("Move server request should only come from one source " +
               "RSGroup. Expecting only " + srcGrp.getName() + " but contains " + tmpGroup);
@@ -188,7 +186,8 @@ public class RSGroupAdminServer implements RSGroupAdmin {
       }
 
       // MovedServers may be < passed in 'servers'.
-      Set<Address> movedServers = manager.moveServers(servers, srcGrp.getName(), targetGroupName);
+      Set<Address> movedServers = rsGroupInfoManager.moveServers(servers, srcGrp.getName(),
+          targetGroupName);
       // Appy makes note that if we were passed in a List of servers,
       // we'd save having to do stuff like the below.
       List<Address> editableMovedServers = Lists.newArrayList(movedServers);
@@ -229,7 +228,7 @@ public class RSGroupAdminServer implements RSGroupAdmin {
           }
         }
         try {
-          manager.wait(1000);
+          rsGroupInfoManager.wait(1000);
         } catch (InterruptedException e) {
           LOG.warn("Sleep interrupted", e);
           Thread.currentThread().interrupt();
@@ -252,15 +251,14 @@ public class RSGroupAdminServer implements RSGroupAdmin {
       LOG.debug("moveTables() passed an empty set. Ignoring.");
       return;
     }
-    RSGroupInfoManager manager = getRSGroupInfoManager();
     // Lock the manager during below machinations.
-    synchronized (manager) {
+    synchronized (rsGroupInfoManager) {
       if (master.getMasterCoprocessorHost() != null) {
         master.getMasterCoprocessorHost().preMoveTables(tables, targetGroup);
       }
 
       if(targetGroup != null) {
-        RSGroupInfo destGroup = manager.getRSGroup(targetGroup);
+        RSGroupInfo destGroup = rsGroupInfoManager.getRSGroup(targetGroup);
         if(destGroup == null) {
           throw new ConstraintException("Target " + targetGroup + " RSGroup does not exist.");
         }
@@ -270,14 +268,14 @@ public class RSGroupAdminServer implements RSGroupAdmin {
       }
 
       for (TableName table : tables) {
-        String srcGroup = manager.getRSGroupOfTable(table);
+        String srcGroup = rsGroupInfoManager.getRSGroupOfTable(table);
         if(srcGroup != null && srcGroup.equals(targetGroup)) {
           throw new ConstraintException(
               "Source RSGroup " + srcGroup + " is same as target " + targetGroup +
               " RSGroup for table " + table);
         }
       }
-      manager.moveTables(tables, targetGroup);
+      rsGroupInfoManager.moveTables(tables, targetGroup);
       if (master.getMasterCoprocessorHost() != null) {
         master.getMasterCoprocessorHost().postMoveTables(tables, targetGroup);
       }
@@ -306,7 +304,7 @@ public class RSGroupAdminServer implements RSGroupAdmin {
     if (master.getMasterCoprocessorHost() != null) {
       master.getMasterCoprocessorHost().preAddRSGroup(name);
     }
-    getRSGroupInfoManager().addRSGroup(new RSGroupInfo(name));
+    rsGroupInfoManager.addRSGroup(new RSGroupInfo(name));
     if (master.getMasterCoprocessorHost() != null) {
       master.getMasterCoprocessorHost().postAddRSGroup(name);
     }
@@ -314,13 +312,12 @@ public class RSGroupAdminServer implements RSGroupAdmin {
 
   @Override
   public void removeRSGroup(String name) throws IOException {
-    RSGroupInfoManager manager = getRSGroupInfoManager();
     // Hold lock across coprocessor calls.
-    synchronized (manager) {
+    synchronized (rsGroupInfoManager) {
       if (master.getMasterCoprocessorHost() != null) {
         master.getMasterCoprocessorHost().preRemoveRSGroup(name);
       }
-      RSGroupInfo RSGroupInfo = manager.getRSGroup(name);
+      RSGroupInfo RSGroupInfo = rsGroupInfoManager.getRSGroup(name);
       if (RSGroupInfo == null) {
         throw new ConstraintException("RSGroup " + name + " does not exist");
       }
@@ -343,7 +340,7 @@ public class RSGroupAdminServer implements RSGroupAdmin {
               ns.getName());
         }
       }
-      manager.removeRSGroup(name);
+      rsGroupInfoManager.removeRSGroup(name);
       if (master.getMasterCoprocessorHost() != null) {
         master.getMasterCoprocessorHost().postRemoveRSGroup(name);
       }
@@ -412,16 +409,12 @@ public class RSGroupAdminServer implements RSGroupAdmin {
 
   @Override
   public List<RSGroupInfo> listRSGroups() throws IOException {
-    return getRSGroupInfoManager().listRSGroups();
+    return rsGroupInfoManager.listRSGroups();
   }
 
   @Override
   public RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException {
-    return getRSGroupInfoManager().getRSGroupOfServer(hostPort);
-  }
-
-  private RSGroupInfoManager getRSGroupInfoManager() throws IOException {
-    return rsGroupInfoManager;
+    return rsGroupInfoManager.getRSGroupOfServer(hostPort);
   }
 
   private Map<String, RegionState> rsGroupGetRegionsInTransition(String groupName)
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java
index 3de1b1d..7436441 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java
@@ -18,6 +18,7 @@
 
 package org.apache.hadoop.hbase.rsgroup;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.ListMultimap;
@@ -70,10 +71,7 @@ import org.apache.hadoop.util.ReflectionUtils;
  *
  */
 @InterfaceAudience.Private
-public class RSGroupBasedLoadBalancer implements RSGroupableBalancer, LoadBalancer {
-  /** Config for pluggable load balancers */
-  public static final String HBASE_GROUP_LOADBALANCER_CLASS = "hbase.group.grouploadbalancer.class";
-
+public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
   private static final Log LOG = LogFactory.getLog(RSGroupBasedLoadBalancer.class);
 
   private Configuration config;
@@ -84,17 +82,12 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer, LoadBalanc
   private volatile RSGroupInfoManager rsGroupInfoManager;
   private LoadBalancer internalBalancer;
 
-  //used during reflection by LoadBalancerFactory
-  @InterfaceAudience.Private
+  /**
+   * Used by reflection in {@link org.apache.hadoop.hbase.master.balancer.LoadBalancerFactory}.
+   */
   public RSGroupBasedLoadBalancer() {
   }
 
-  //This constructor should only be used for unit testing
-  @InterfaceAudience.Private
-  public RSGroupBasedLoadBalancer(RSGroupInfoManager rsGroupInfoManager) {
-    this.rsGroupInfoManager = rsGroupInfoManager;
-  }
-
   @Override
   public Configuration getConf() {
     return config;
@@ -116,11 +109,6 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer, LoadBalanc
   }
 
   @Override
-  public void setClusterLoad(Map<TableName, Map<ServerName, List<HRegionInfo>>> clusterLoad){
-
-  }
-
-  @Override
   public List<RegionPlan> balanceCluster(TableName tableName, Map<ServerName, List<HRegionInfo>>
       clusterState) throws HBaseIOException {
     return balanceCluster(clusterState);
@@ -390,8 +378,7 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer, LoadBalanc
 
     // Create the balancer
     Class<? extends LoadBalancer> balancerKlass = config.getClass(
-        HBASE_GROUP_LOADBALANCER_CLASS,
-        StochasticLoadBalancer.class, LoadBalancer.class);
+        HBASE_GROUP_LOADBALANCER_CLASS, StochasticLoadBalancer.class, LoadBalancer.class);
     internalBalancer = ReflectionUtils.newInstance(balancerKlass, config);
     internalBalancer.setMasterServices(masterServices);
     internalBalancer.setClusterStatus(clusterStatus);
@@ -405,6 +392,10 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer, LoadBalanc
   }
 
   @Override
+  public void setClusterLoad(Map<TableName, Map<ServerName, List<HRegionInfo>>> clusterLoad) {
+  }
+
+  @Override
   public void regionOnline(HRegionInfo regionInfo, ServerName sn) {
   }
 
@@ -425,4 +416,9 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer, LoadBalanc
   public boolean isStopped() {
     return false;
   }
+
+  @VisibleForTesting
+  public void setRsGroupInfoManager(RSGroupInfoManager rsGroupInfoManager) {
+    this.rsGroupInfoManager = rsGroupInfoManager;
+  }
 }
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java
index d5a971c..91c6ac6 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java
@@ -37,28 +37,21 @@ import org.apache.hadoop.hbase.util.Address;
 @InterfaceAudience.Private
 public interface RSGroupInfoManager {
   //Assigned before user tables
-  public static final TableName RSGROUP_TABLE_NAME =
+  TableName RSGROUP_TABLE_NAME =
       TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, "rsgroup");
-  public static final byte[] RSGROUP_TABLE_NAME_BYTES = RSGROUP_TABLE_NAME.toBytes();
-  public static final String rsGroupZNode = "rsgroup";
-  public static final byte[] META_FAMILY_BYTES = Bytes.toBytes("m");
-  public static final byte[] META_QUALIFIER_BYTES = Bytes.toBytes("i");
-  public static final byte[] ROW_KEY = {0};
-
+  byte[] RSGROUP_TABLE_NAME_BYTES = RSGROUP_TABLE_NAME.toBytes();
+  String rsGroupZNode = "rsgroup";
+  byte[] META_FAMILY_BYTES = Bytes.toBytes("m");
+  byte[] META_QUALIFIER_BYTES = Bytes.toBytes("i");
+  byte[] ROW_KEY = {0};
 
   /**
-   * Adds the group.
-   *
-   * @param rsGroupInfo the group name
-   * @throws java.io.IOException Signals that an I/O exception has occurred.
+   * Add given RSGroupInfo to existing list of group infos.
    */
   void addRSGroup(RSGroupInfo rsGroupInfo) throws IOException;
 
   /**
    * Remove a region server group.
-   *
-   * @param groupName the group name
-   * @throws java.io.IOException Signals that an I/O exception has occurred.
    */
   void removeRSGroup(String groupName) throws IOException;
 
@@ -68,32 +61,21 @@ public interface RSGroupInfoManager {
    * @param srcGroup groupName being moved from
    * @param dstGroup groupName being moved to
    * @return Set of servers moved (May be a subset of {@code servers}).
-   * @throws java.io.IOException on move failure
    */
-  Set<Address> moveServers(Set<Address> servers,
-                      String srcGroup, String dstGroup) throws IOException;
+  Set<Address> moveServers(Set<Address> servers, String srcGroup, String dstGroup) throws IOException;
 
   /**
    * Gets the group info of server.
-   *
-   * @param hostPort the server
-   * @return An instance of RSGroupInfo
    */
-  RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException;
+  RSGroupInfo getRSGroupOfServer(Address serverHostPort) throws IOException;
 
   /**
-   * Gets the group information.
-   *
-   * @param groupName the group name
-   * @return An instance of RSGroupInfo
+   * Gets {@code RSGroupInfo} for the given group name.
    */
   RSGroupInfo getRSGroup(String groupName) throws IOException;
 
   /**
    * Get the group membership of a table
-   * @param tableName name of table to get group membership
-   * @return Group name of table
-   * @throws java.io.IOException on failure to retrive information
    */
   String getRSGroupOfTable(TableName tableName) throws IOException;
 
@@ -102,29 +84,21 @@ public interface RSGroupInfoManager {
    *
    * @param tableNames set of tables to move
    * @param groupName name of group of tables to move to
-   * @throws java.io.IOException on failure to move
    */
   void moveTables(Set<TableName> tableNames, String groupName) throws IOException;
 
   /**
-   * List the groups
-   *
-   * @return list of RSGroupInfo
-   * @throws java.io.IOException on failure
+   * List the existing {@code RSGroupInfo}s.
    */
   List<RSGroupInfo> listRSGroups() throws IOException;
 
   /**
-   * Refresh/reload the group information from
-   * the persistent store
-   *
-   * @throws java.io.IOException on failure to refresh
+   * Refresh/reload the group information from the persistent store
    */
   void refresh() throws IOException;
 
   /**
-   * Whether the manager is able to fully
-   * return group metadata
+   * Whether the manager is able to fully return group metadata
    *
    * @return whether the manager is in online mode
    */
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java
index a89d9ed..69488d0 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java
@@ -103,7 +103,7 @@ import com.google.protobuf.ServiceException;
  * enforced everywhere.
  */
 @InterfaceAudience.Private
-public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListener {
+public class RSGroupInfoManagerImpl implements RSGroupInfoManager {
   private static final Log LOG = LogFactory.getLog(RSGroupInfoManagerImpl.class);
 
   /** Table descriptor for <code>hbase:rsgroup</code> catalog table */
@@ -123,47 +123,38 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
 
   private Map<String, RSGroupInfo> rsGroupMap;
   private Map<TableName, String> tableMap;
-  private final MasterServices master;
-  private Table rsGroupTable;
-  private final ClusterConnection conn;
+  private final MasterServices masterServices;
   private final ZooKeeperWatcher watcher;
-  private RSGroupStartupWorker rsGroupStartupWorker;
-  // contains list of groups that were last flushed to persistent store
+  private final ClusterConnection conn;
+  private final ServerEventsListenerThread serverEventsListenerThread =
+      new ServerEventsListenerThread();
+  private final RSGroupStartupWorker rsGroupStartupWorker = new RSGroupStartupWorker();
+  private Table rsGroupTable;
+  // Contains list of groups that were last flushed to persistent store
   private Set<String> prevRSGroups;
-  private final RSGroupSerDe rsGroupSerDe;
-  private DefaultServerUpdater defaultServerUpdater;
-  private boolean init = false;
 
+  static RSGroupInfoManager getInstance(MasterServices master) throws IOException {
+    RSGroupInfoManagerImpl instance = new RSGroupInfoManagerImpl(master);
+    instance.init();
+    return instance;
+  }
 
-  public RSGroupInfoManagerImpl(MasterServices master) throws IOException {
+  private RSGroupInfoManagerImpl(MasterServices masterServices) {
     this.rsGroupMap = Collections.EMPTY_MAP;
     this.tableMap = Collections.EMPTY_MAP;
-    rsGroupSerDe = new RSGroupSerDe();
-    this.master = master;
-    this.watcher = master.getZooKeeper();
-    this.conn = master.getClusterConnection();
-    prevRSGroups = new HashSet<String>();
+    this.masterServices = masterServices;
+    this.watcher = masterServices.getZooKeeper();
+    this.conn = masterServices.getClusterConnection();
+    prevRSGroups = new HashSet<>();
   }
 
-  public synchronized void init() throws IOException{
-    rsGroupStartupWorker = new RSGroupStartupWorker(this, master, conn);
+  private synchronized void init() throws IOException {
     refresh();
     rsGroupStartupWorker.start();
-    defaultServerUpdater = new DefaultServerUpdater(this);
-    master.getServerManager().registerListener(this);
-    defaultServerUpdater.start();
-    init = true;
-  }
-
-  synchronized boolean isInit() {
-    return init;
+    serverEventsListenerThread.start();
+    masterServices.getServerManager().registerListener(serverEventsListenerThread);
   }
 
-  /**
-   * Adds the group.
-   *
-   * @param rsGroupInfo the group name
-   */
   @Override
   public synchronized void addRSGroup(RSGroupInfo rsGroupInfo) throws IOException {
     checkGroupName(rsGroupInfo.getName());
@@ -176,30 +167,24 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     flushConfig(newGroupMap);
   }
 
-  private RSGroupInfo getRSGroupInfo(final String groupName) throws DoNotRetryIOException {
-    RSGroupInfo rsgi = null;
-    try {
-      rsgi = getRSGroup(groupName);
-    } catch (IOException ioe) {
-      // Will never happen
-      throw new DoNotRetryIOException(ioe);
-    }
-    if (rsgi == null) {
+  private RSGroupInfo getRSGroupInfo(final String groupName) throws IOException {
+    RSGroupInfo rsGroupInfo = getRSGroup(groupName);
+    if (rsGroupInfo == null) {
       throw new DoNotRetryIOException("RSGroup " + groupName + " does not exist");
     }
-    return rsgi;
+    return rsGroupInfo;
   }
 
   @Override
-  public synchronized Set<Address> moveServers(Set<Address> servers, String srcGroup, String dstGroup)
-  throws IOException {
+  public synchronized Set<Address> moveServers(Set<Address> servers, String srcGroup,
+      String dstGroup) throws IOException {
     RSGroupInfo src = getRSGroupInfo(srcGroup);
     RSGroupInfo dst = getRSGroupInfo(dstGroup);
-    // If destination is 'default' rsgroup, only add servers that are online. If not online, drop it.
-    // If not 'default' group, add server to dst group EVEN IF IT IS NOT online (could be a group
-    // of dead servers that are to come back later).
+    // If destination is 'default' rsgroup, only add servers that are online. If not online, drop
+    // it. If not 'default' group, add server to dst group EVEN IF IT IS NOT online (could be a
+    // group of dead servers that are to come back later).
     Set<Address> onlineServers = dst.getName().equals(RSGroupInfo.DEFAULT_GROUP)?
-        getOnlineServers(this.master): null;
+        getOnlineServers(this.masterServices): null;
     for (Address el: servers) {
       src.removeServer(el);
       if (onlineServers != null) {
@@ -220,45 +205,30 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     return dst.getServers();
   }
 
-  /**
-   * Gets the group info of server.
-   *
-   * @param hostPort the server
-   * @return An instance of GroupInfo.
-   */
   @Override
-  public synchronized RSGroupInfo getRSGroupOfServer(Address hostPort)
+  public synchronized RSGroupInfo getRSGroupOfServer(Address serverHostPort)
   throws IOException {
     for (RSGroupInfo info : rsGroupMap.values()) {
-      if (info.containsServer(hostPort)) {
+      if (info.containsServer(serverHostPort)) {
         return info;
       }
     }
     return null;
   }
 
-  /**
-   * Gets the group information.
-   *
-   * @param groupName
-   *          the group name
-   * @return An instance of GroupInfo
-   */
   @Override
-  public synchronized RSGroupInfo getRSGroup(String groupName) throws IOException {
-    return this.rsGroupMap.get(groupName);
+  public synchronized RSGroupInfo getRSGroup(String groupName) {
+    return rsGroupMap.get(groupName);
   }
 
-
-
   @Override
-  public synchronized String getRSGroupOfTable(TableName tableName) throws IOException {
+  public synchronized String getRSGroupOfTable(TableName tableName) {
     return tableMap.get(tableName);
   }
 
   @Override
-  public synchronized void moveTables(
-      Set<TableName> tableNames, String groupName) throws IOException {
+  public synchronized void moveTables(Set<TableName> tableNames, String groupName)
+      throws IOException {
     if (groupName != null && !rsGroupMap.containsKey(groupName)) {
       throw new DoNotRetryIOException("Group "+groupName+" does not exist or is a special group");
     }
@@ -276,17 +246,9 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
         newGroupMap.put(dst.getName(), dst);
       }
     }
-
     flushConfig(newGroupMap);
   }
 
-
-  /**
-   * Delete a region server group.
-   *
-   * @param groupName the group name
-   * @throws java.io.IOException Signals that an I/O exception has occurred.
-   */
   @Override
   public synchronized void removeRSGroup(String groupName) throws IOException {
     if (!rsGroupMap.containsKey(groupName) || groupName.equals(RSGroupInfo.DEFAULT_GROUP)) {
@@ -298,7 +260,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
   }
 
   @Override
-  public synchronized List<RSGroupInfo> listRSGroups() throws IOException {
+  public synchronized List<RSGroupInfo> listRSGroups() {
     return Lists.newLinkedList(rsGroupMap.values());
   }
 
@@ -322,21 +284,21 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
       if (rsGroupTable == null) {
         rsGroupTable = conn.getTable(RSGROUP_TABLE_NAME);
       }
-      groupList.addAll(rsGroupSerDe.retrieveGroupList(rsGroupTable));
+      groupList.addAll(RSGroupUtil.retrieveGroupList(rsGroupTable));
     } else {
       LOG.debug("Refershing in Offline mode.");
       String groupBasePath = ZKUtil.joinZNode(watcher.znodePaths.baseZNode, rsGroupZNode);
-      groupList.addAll(rsGroupSerDe.retrieveGroupList(watcher, groupBasePath));
+      groupList.addAll(RSGroupUtil.retrieveGroupList(watcher, groupBasePath));
     }
 
     // refresh default group, prune
     NavigableSet<TableName> orphanTables = new TreeSet<TableName>();
-    for(String entry: master.getTableDescriptors().getAll().keySet()) {
+    for(String entry: masterServices.getTableDescriptors().getAll().keySet()) {
       orphanTables.add(TableName.valueOf(entry));
     }
 
     List<TableName> specialTables;
-    if(!master.isInitialized()) {
+    if(!masterServices.isInitialized()) {
       specialTables = new ArrayList<TableName>(4);
       specialTables.add(AccessControlLists.ACL_TABLE_NAME);
       specialTables.add(TableName.META_TABLE_NAME);
@@ -344,7 +306,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
       specialTables.add(RSGROUP_TABLE_NAME);
     } else {
       specialTables =
-          master.listTableNamesByNamespace(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR);
+          masterServices.listTableNamesByNamespace(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR);
     }
 
     for(TableName table : specialTables) {
@@ -379,22 +341,22 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     prevRSGroups.addAll(rsGroupMap.keySet());
   }
 
-  private synchronized Map<TableName,String> flushConfigTable(Map<String,RSGroupInfo> newGroupMap)
+  private synchronized Map<TableName,String> flushConfigTable(Map<String,RSGroupInfo> groupMap)
       throws IOException {
     Map<TableName,String> newTableMap = Maps.newHashMap();
     List<Mutation> mutations = Lists.newArrayList();
 
     // populate deletes
     for(String groupName : prevRSGroups) {
-      if(!newGroupMap.containsKey(groupName)) {
+      if(!groupMap.containsKey(groupName)) {
         Delete d = new Delete(Bytes.toBytes(groupName));
         mutations.add(d);
       }
     }
 
     // populate puts
-    for(RSGroupInfo RSGroupInfo : newGroupMap.values()) {
-      RSGroupProtos.RSGroupInfo proto = RSGroupSerDe.toProtoGroupInfo(RSGroupInfo);
+    for(RSGroupInfo RSGroupInfo : groupMap.values()) {
+      RSGroupProtos.RSGroupInfo proto = RSGroupUtil.toProtoGroupInfo(RSGroupInfo);
       Put p = new Put(Bytes.toBytes(RSGroupInfo.getName()));
       p.addColumn(META_FAMILY_BYTES, META_QUALIFIER_BYTES, proto.toByteArray());
       mutations.add(p);
@@ -408,6 +370,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     }
     return newTableMap;
   }
+
   private synchronized void flushConfig() throws IOException {
     flushConfig(rsGroupMap);
   }
@@ -454,7 +417,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
 
       for (RSGroupInfo RSGroupInfo : newGroupMap.values()) {
         String znode = ZKUtil.joinZNode(groupBasePath, RSGroupInfo.getName());
-        RSGroupProtos.RSGroupInfo proto = RSGroupSerDe.toProtoGroupInfo(RSGroupInfo);
+        RSGroupProtos.RSGroupInfo proto = RSGroupUtil.toProtoGroupInfo(RSGroupInfo);
         LOG.debug("Updating znode: "+znode);
         ZKUtil.createAndFailSilent(watcher, znode);
         zkOps.add(ZKUtil.ZKUtilOp.deleteNodeFailSilent(znode));
@@ -466,7 +429,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
       ZKUtil.multiOrSequential(watcher, zkOps, false);
     } catch (KeeperException e) {
       LOG.error("Failed to write to rsGroupZNode", e);
-      master.abort("Failed to write to rsGroupZNode", e);
+      masterServices.abort("Failed to write to rsGroupZNode", e);
       throw new IOException("Failed to write to rsGroupZNode",e);
     }
 
@@ -476,22 +439,22 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
 
   // Called by getDefaultServers. Presume it has lock in place.
   private List<ServerName> getOnlineRS() throws IOException {
-    if (master != null) {
-      return master.getServerManager().getOnlineServersList();
+    if (masterServices != null) {
+      return masterServices.getServerManager().getOnlineServersList();
     }
+    LOG.debug("Reading online RS from zookeeper");
+    List<ServerName> servers = new LinkedList<ServerName>();
     try {
-      LOG.debug("Reading online RS from zookeeper");
-      List<ServerName> servers = new LinkedList<ServerName>();
       for (String el: ZKUtil.listChildrenNoWatch(watcher, watcher.znodePaths.rsZNode)) {
         servers.add(ServerName.parseServerName(el));
       }
-      return servers;
     } catch (KeeperException e) {
       throw new IOException("Failed to retrieve server list from zookeeper", e);
     }
+    return servers;
   }
 
-  // Called by DefaultServerUpdater. Presume it has lock on this manager when it runs.
+  // Called by ServerEventsListenerThread. Presume it has lock on this manager when it runs.
   private SortedSet<Address> getDefaultServers() throws IOException {
     SortedSet<Address> defaultServers = Sets.newTreeSet();
     for (ServerName server : getOnlineRS()) {
@@ -511,7 +474,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     return defaultServers;
   }
 
-  // Called by DefaultServerUpdater. Synchronize on this because redoing
+  // Called by ServerEventsListenerThread. Synchronize on this because redoing
   // the rsGroupMap then writing it out.
   private synchronized void updateDefaultServers(SortedSet<Address> servers) throws IOException {
     RSGroupInfo info = rsGroupMap.get(RSGroupInfo.DEFAULT_GROUP);
@@ -521,39 +484,47 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     flushConfig(newGroupMap);
   }
 
-  @Override
-  public void serverAdded(ServerName serverName) {
-    // #serverChanged is internally synchronized
-    defaultServerUpdater.serverChanged();
-  }
-
-  @Override
-  public void serverRemoved(ServerName serverName) {
-    // #serverChanged is internally synchronized
-    defaultServerUpdater.serverChanged();
-  }
-
-  private static class DefaultServerUpdater extends Thread {
-    private static final Log LOG = LogFactory.getLog(DefaultServerUpdater.class);
-    private final RSGroupInfoManagerImpl mgr;
+  /**
+   * Calls {@link RSGroupInfoManagerImpl#updateDefaultServers(SortedSet)} to update list of known
+   * servers. Notifications about server changes are received by registering {@link ServerListener}.
+   * As a listener, we need to return immediately, so the real work of updating the servers is
+   * done asynchronously in this thread.
+   */
+  private class ServerEventsListenerThread extends Thread implements ServerListener {
+    private final Log LOG = LogFactory.getLog(ServerEventsListenerThread.class);
     private boolean hasChanged = false;
 
-    public DefaultServerUpdater(RSGroupInfoManagerImpl mgr) {
-      super("RSGroup.ServerUpdater");
+    public ServerEventsListenerThread() {
+      setName(ServerEventsListenerThread.class.getName()+"-"+masterServices.getServerName());
       setDaemon(true);
-      this.mgr = mgr;
+    }
+
+    @Override
+    public void serverAdded(ServerName serverName) {
+      serverChanged();
+    }
+
+    @Override
+    public void serverRemoved(ServerName serverName) {
+      serverChanged();
+    }
+
+    private synchronized void serverChanged() {
+      hasChanged = true;
+      this.notify();
     }
 
     @Override
     public void run() {
       SortedSet<Address> prevDefaultServers = new TreeSet<>();
-      while(isMasterRunning(this.mgr.master)) {
+      while(isMasterRunning(masterServices)) {
         try {
           LOG.info("Updating default servers.");
-          synchronized (this.mgr) {
-            SortedSet<Address> servers = mgr.getDefaultServers();
+          RSGroupInfoManagerImpl manager = RSGroupInfoManagerImpl.this;
+          synchronized (manager) {
+            SortedSet<Address> servers = manager.getDefaultServers();
             if (!servers.equals(prevDefaultServers)) {
-              mgr.updateDefaultServers(servers);
+              manager.updateDefaultServers(servers);
               prevDefaultServers = servers;
               LOG.info("Updated with servers: "+servers.size());
             }
@@ -573,28 +544,13 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
         }
       }
     }
-
-    public void serverChanged() {
-      synchronized (this) {
-        hasChanged = true;
-        this.notify();
-      }
-    }
   }
 
-  private static class RSGroupStartupWorker extends Thread {
-    private static final Log LOG = LogFactory.getLog(RSGroupStartupWorker.class);
+  private class RSGroupStartupWorker extends Thread {
+    private final Log LOG = LogFactory.getLog(RSGroupStartupWorker.class);
     private volatile boolean online = false;
-    private final MasterServices masterServices;
-    private final RSGroupInfoManagerImpl groupInfoManager;
-    private final ClusterConnection conn;
-
-    public RSGroupStartupWorker(RSGroupInfoManagerImpl groupInfoManager,
-                                MasterServices masterServices,
-                                ClusterConnection conn) {
-      this.masterServices = masterServices;
-      this.groupInfoManager = groupInfoManager;
-      this.conn = conn;
+
+    RSGroupStartupWorker() {
       setName(RSGroupStartupWorker.class.getName()+"-"+masterServices.getServerName());
       setDaemon(true);
     }
@@ -606,13 +562,13 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
       }
     }
 
-    public boolean waitForGroupTableOnline() {
+    private boolean waitForGroupTableOnline() {
       final List<HRegionInfo> foundRegions = new LinkedList<HRegionInfo>();
       final List<HRegionInfo> assignedRegions = new LinkedList<HRegionInfo>();
       final AtomicBoolean found = new AtomicBoolean(false);
       final TableStateManager tsm = masterServices.getTableStateManager();
       boolean createSent = false;
-      while (!found.get() && isMasterRunning(this.masterServices)) {
+      while (!found.get() && isMasterRunning(masterServices)) {
         foundRegions.clear();
         assignedRegions.clear();
         found.set(true);
@@ -679,7 +635,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
             MetaTableAccessor.fullScanRegions(conn, visitor);
             // if no regions in meta then we have to create the table
             if (foundRegions.size() < 1 && rootMetaFound && !createSent && nsFound.get()) {
-              groupInfoManager.createRSGroupTable(masterServices);
+              createRSGroupTable();
               createSent = true;
             }
             LOG.info("RSGroup table=" + RSGROUP_TABLE_NAME + " isOnline=" + found.get()
@@ -693,10 +649,10 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
           }
           if (found.get()) {
             LOG.debug("With group table online, refreshing cached information.");
-            groupInfoManager.refresh(true);
+            RSGroupInfoManagerImpl.this.refresh(true);
             online = true;
             //flush any inconsistencies between ZK and HTable
-            groupInfoManager.flushConfig();
+            RSGroupInfoManagerImpl.this.flushConfig();
           }
         } catch (RuntimeException e) {
           throw e;
@@ -713,6 +669,30 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
       return found.get();
     }
 
+    private void createRSGroupTable() throws IOException {
+      Long procId = masterServices.createSystemTable(RSGROUP_TABLE_DESC);
+      // wait for region to be online
+      int tries = 600;
+      while (!(masterServices.getMasterProcedureExecutor().isFinished(procId))
+          && masterServices.getMasterProcedureExecutor().isRunning()
+          && tries > 0) {
+        try {
+          Thread.sleep(100);
+        } catch (InterruptedException e) {
+          throw new IOException("Wait interrupted ", e);
+        }
+        tries--;
+      }
+      if(tries <= 0) {
+        throw new IOException("Failed to create group table in a given time.");
+      } else {
+        ProcedureInfo result = masterServices.getMasterProcedureExecutor().getResult(procId);
+        if (result != null && result.isFailed()) {
+          throw new IOException("Failed to create group table. " + result.getExceptionFullMessage());
+        }
+      }
+    }
+
     public boolean isOnline() {
       return online;
     }
@@ -722,32 +702,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     return !masterServices.isAborted() && !masterServices.isStopped();
   }
 
-  private void createRSGroupTable(MasterServices masterServices) throws IOException {
-    Long procId = masterServices.createSystemTable(RSGROUP_TABLE_DESC);
-    // wait for region to be online
-    int tries = 600;
-    while (!(masterServices.getMasterProcedureExecutor().isFinished(procId))
-        && masterServices.getMasterProcedureExecutor().isRunning()
-        && tries > 0) {
-      try {
-        Thread.sleep(100);
-      } catch (InterruptedException e) {
-        throw new IOException("Wait interrupted", e);
-      }
-      tries--;
-    }
-    if(tries <= 0) {
-      throw new IOException("Failed to create group table in a given time.");
-    } else {
-      ProcedureInfo result = masterServices.getMasterProcedureExecutor().getResult(procId);
-      if (result != null && result.isFailed()) {
-        throw new IOException("Failed to create group table. " + result.getExceptionFullMessage());
-      }
-    }
-  }
-
-  private void multiMutate(List<Mutation> mutations)
-      throws IOException {
+  private void multiMutate(List<Mutation> mutations) throws IOException {
     CoprocessorRpcChannel channel = rsGroupTable.coprocessorService(ROW_KEY);
     MultiRowMutationProtos.MutateRowsRequest.Builder mmrBuilder
       = MultiRowMutationProtos.MutateRowsRequest.newBuilder();
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java
deleted file mode 100644
index 3cea939..0000000
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.hbase.rsgroup;
-
-import com.google.common.collect.Lists;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.client.Result;
-import org.apache.hadoop.hbase.client.Scan;
-import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.exceptions.DeserializationException;
-import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos;
-import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
-import org.apache.hadoop.hbase.protobuf.generated.RSGroupProtos;
-import org.apache.hadoop.hbase.util.Address;
-import org.apache.hadoop.hbase.zookeeper.ZKUtil;
-import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
-import org.apache.zookeeper.KeeperException;
-
-//TODO do better encapsulation of SerDe logic from GroupInfoManager and GroupTracker
-@InterfaceAudience.Private
-public class RSGroupSerDe {
-  private static final Log LOG = LogFactory.getLog(RSGroupSerDe.class);
-
-  public RSGroupSerDe() {super();}
-
-  public List<RSGroupInfo> retrieveGroupList(Table groupTable) throws IOException {
-    List<RSGroupInfo> RSGroupInfoList = Lists.newArrayList();
-    for (Result result : groupTable.getScanner(new Scan())) {
-      RSGroupProtos.RSGroupInfo proto =
-          RSGroupProtos.RSGroupInfo.parseFrom(
-              result.getValue(
-                  RSGroupInfoManager.META_FAMILY_BYTES,
-                  RSGroupInfoManager.META_QUALIFIER_BYTES));
-      RSGroupInfoList.add(toGroupInfo(proto));
-    }
-    return RSGroupInfoList;
-  }
-
-  public List<RSGroupInfo> retrieveGroupList(ZooKeeperWatcher watcher,
-                                             String groupBasePath) throws IOException {
-    List<RSGroupInfo> RSGroupInfoList = Lists.newArrayList();
-    //Overwrite any info stored by table, this takes precedence
-    try {
-      if(ZKUtil.checkExists(watcher, groupBasePath) != -1) {
-        for(String znode: ZKUtil.listChildrenAndWatchForNewChildren(watcher, groupBasePath)) {
-          byte[] data = ZKUtil.getData(watcher, ZKUtil.joinZNode(groupBasePath, znode));
-          if(data.length > 0) {
-            ProtobufUtil.expectPBMagicPrefix(data);
-            ByteArrayInputStream bis = new ByteArrayInputStream(
-                data, ProtobufUtil.lengthOfPBMagic(), data.length);
-            RSGroupInfoList.add(toGroupInfo(RSGroupProtos.RSGroupInfo.parseFrom(bis)));
-          }
-        }
-        LOG.debug("Read ZK GroupInfo count:" + RSGroupInfoList.size());
-      }
-    } catch (KeeperException e) {
-      throw new IOException("Failed to read rsGroupZNode",e);
-    } catch (DeserializationException e) {
-      throw new IOException("Failed to read rsGroupZNode",e);
-    } catch (InterruptedException e) {
-      throw new IOException("Failed to read rsGroupZNode",e);
-    }
-    return RSGroupInfoList;
-  }
-
-
-  public static RSGroupInfo toGroupInfo(RSGroupProtos.RSGroupInfo proto) {
-    RSGroupInfo RSGroupInfo = new RSGroupInfo(proto.getName());
-    for(HBaseProtos.ServerName el: proto.getServersList()) {
-      RSGroupInfo.addServer(Address.fromParts(el.getHostName(), el.getPort()));
-    }
-    for(HBaseProtos.TableName pTableName: proto.getTablesList()) {
-      RSGroupInfo.addTable(ProtobufUtil.toTableName(pTableName));
-    }
-    return RSGroupInfo;
-  }
-
-  public static RSGroupProtos.RSGroupInfo toProtoGroupInfo(RSGroupInfo pojo) {
-    List<HBaseProtos.TableName> tables =
-        new ArrayList<HBaseProtos.TableName>(pojo.getTables().size());
-    for(TableName arg: pojo.getTables()) {
-      tables.add(ProtobufUtil.toProtoTableName(arg));
-    }
-    List<HBaseProtos.ServerName> hostports =
-        new ArrayList<HBaseProtos.ServerName>(pojo.getServers().size());
-    for(Address el: pojo.getServers()) {
-      hostports.add(HBaseProtos.ServerName.newBuilder()
-          .setHostName(el.getHostname())
-          .setPort(el.getPort())
-          .build());
-    }
-    return RSGroupProtos.RSGroupInfo.newBuilder().setName(pojo.getName())
-        .addAllServers(hostports)
-        .addAllTables(tables).build();
-  }
-}
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupUtil.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupUtil.java
new file mode 100644
index 0000000..761ae08
--- /dev/null
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupUtil.java
@@ -0,0 +1,119 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.rsgroup;
+
+import com.google.common.collect.Lists;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.client.Result;
+import org.apache.hadoop.hbase.client.Scan;
+import org.apache.hadoop.hbase.client.Table;
+import org.apache.hadoop.hbase.exceptions.DeserializationException;
+import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos;
+import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
+import org.apache.hadoop.hbase.protobuf.generated.RSGroupProtos;
+import org.apache.hadoop.hbase.util.Address;
+import org.apache.hadoop.hbase.zookeeper.ZKUtil;
+import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
+import org.apache.zookeeper.KeeperException;
+
+//TODO do better encapsulation of SerDe logic from GroupInfoManager and GroupTracker
+@InterfaceAudience.Private
+public class RSGroupUtil {
+  private static final Log LOG = LogFactory.getLog(RSGroupUtil.class);
+
+  public static List<RSGroupInfo> retrieveGroupList(Table groupTable) throws IOException {
+    List<RSGroupInfo> RSGroupInfoList = Lists.newArrayList();
+    for (Result result : groupTable.getScanner(new Scan())) {
+      RSGroupProtos.RSGroupInfo proto =
+          RSGroupProtos.RSGroupInfo.parseFrom(
+              result.getValue(
+                  RSGroupInfoManager.META_FAMILY_BYTES,
+                  RSGroupInfoManager.META_QUALIFIER_BYTES));
+      RSGroupInfoList.add(toGroupInfo(proto));
+    }
+    return RSGroupInfoList;
+  }
+
+  public static List<RSGroupInfo> retrieveGroupList(ZooKeeperWatcher watcher, String groupBasePath)
+      throws IOException {
+    List<RSGroupInfo> RSGroupInfoList = Lists.newArrayList();
+    //Overwrite any info stored by table, this takes precedence
+    try {
+      if(ZKUtil.checkExists(watcher, groupBasePath) != -1) {
+        for(String znode: ZKUtil.listChildrenAndWatchForNewChildren(watcher, groupBasePath)) {
+          byte[] data = ZKUtil.getData(watcher, ZKUtil.joinZNode(groupBasePath, znode));
+          if(data.length > 0) {
+            ProtobufUtil.expectPBMagicPrefix(data);
+            ByteArrayInputStream bis = new ByteArrayInputStream(
+                data, ProtobufUtil.lengthOfPBMagic(), data.length);
+            RSGroupInfoList.add(toGroupInfo(RSGroupProtos.RSGroupInfo.parseFrom(bis)));
+          }
+        }
+        LOG.debug("Read ZK GroupInfo count:" + RSGroupInfoList.size());
+      }
+    } catch (KeeperException e) {
+      throw new IOException("Failed to read rsGroupZNode",e);
+    } catch (DeserializationException e) {
+      throw new IOException("Failed to read rsGroupZNode",e);
+    } catch (InterruptedException e) {
+      throw new IOException("Failed to read rsGroupZNode",e);
+    }
+    return RSGroupInfoList;
+  }
+
+
+  public static RSGroupInfo toGroupInfo(RSGroupProtos.RSGroupInfo proto) {
+    RSGroupInfo RSGroupInfo = new RSGroupInfo(proto.getName());
+    for(HBaseProtos.ServerName el: proto.getServersList()) {
+      RSGroupInfo.addServer(Address.fromParts(el.getHostName(), el.getPort()));
+    }
+    for(HBaseProtos.TableName pTableName: proto.getTablesList()) {
+      RSGroupInfo.addTable(ProtobufUtil.toTableName(pTableName));
+    }
+    return RSGroupInfo;
+  }
+
+  public static RSGroupProtos.RSGroupInfo toProtoGroupInfo(RSGroupInfo pojo) {
+    List<HBaseProtos.TableName> tables =
+        new ArrayList<HBaseProtos.TableName>(pojo.getTables().size());
+    for(TableName arg: pojo.getTables()) {
+      tables.add(ProtobufUtil.toProtoTableName(arg));
+    }
+    List<HBaseProtos.ServerName> hostports =
+        new ArrayList<HBaseProtos.ServerName>(pojo.getServers().size());
+    for(Address el: pojo.getServers()) {
+      hostports.add(HBaseProtos.ServerName.newBuilder()
+          .setHostName(el.getHostname())
+          .setPort(el.getPort())
+          .build());
+    }
+    return RSGroupProtos.RSGroupInfo.newBuilder().setName(pojo.getName())
+        .addAllServers(hostports)
+        .addAllTables(tables).build();
+  }
+}
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java
index bff392b..41aa9c3 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java
@@ -26,4 +26,7 @@ import org.apache.hadoop.hbase.master.LoadBalancer;
  * marked with this Interface before it runs.
  */
 @InterfaceAudience.Private
-public interface RSGroupableBalancer extends LoadBalancer {}
\ No newline at end of file
+public interface RSGroupableBalancer extends LoadBalancer {
+  /** Config for pluggable load balancers */
+  String HBASE_GROUP_LOADBALANCER_CLASS = "hbase.group.grouploadbalancer.class";
+}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java
index 73cf85a..bf41a48 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java
@@ -94,7 +94,8 @@ public class TestRSGroupBasedLoadBalancer {
     Configuration conf = HBaseConfiguration.create();
     conf.set("hbase.regions.slop", "0");
     conf.set("hbase.group.grouploadbalancer.class", SimpleLoadBalancer.class.getCanonicalName());
-    loadBalancer = new RSGroupBasedLoadBalancer(getMockedGroupInfoManager());
+    loadBalancer = new RSGroupBasedLoadBalancer();
+    loadBalancer.setRsGroupInfoManager(getMockedGroupInfoManager());
     loadBalancer.setMasterServices(getMockedMaster());
     loadBalancer.setConf(conf);
     loadBalancer.initialize();
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java
index 0732d7c..b744677 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java
@@ -89,8 +89,8 @@ public class VerifyingRSGroupAdminClient implements RSGroupAdmin {
   }
 
   @Override
-  public boolean balanceRSGroup(String name) throws IOException {
-    return wrapped.balanceRSGroup(name);
+  public boolean balanceRSGroup(String groupName) throws IOException {
+    return wrapped.balanceRSGroup(groupName);
   }
 
   @Override
@@ -113,7 +113,7 @@ public class VerifyingRSGroupAdminClient implements RSGroupAdmin {
               result.getValue(
                   RSGroupInfoManager.META_FAMILY_BYTES,
                   RSGroupInfoManager.META_QUALIFIER_BYTES));
-      groupMap.put(proto.getName(), RSGroupSerDe.toGroupInfo(proto));
+      groupMap.put(proto.getName(), RSGroupUtil.toGroupInfo(proto));
     }
     Assert.assertEquals(Sets.newHashSet(groupMap.values()),
         Sets.newHashSet(wrapped.listRSGroups()));
@@ -125,7 +125,7 @@ public class VerifyingRSGroupAdminClient implements RSGroupAdmin {
           ProtobufUtil.expectPBMagicPrefix(data);
           ByteArrayInputStream bis = new ByteArrayInputStream(
               data, ProtobufUtil.lengthOfPBMagic(), data.length);
-          zList.add(RSGroupSerDe.toGroupInfo(RSGroupProtos.RSGroupInfo.parseFrom(bis)));
+          zList.add(RSGroupUtil.toGroupInfo(RSGroupProtos.RSGroupInfo.parseFrom(bis)));
         }
       }
       Assert.assertEquals(zList.size(), groupMap.size());
-- 
2.3.2 (Apple Git-55)
