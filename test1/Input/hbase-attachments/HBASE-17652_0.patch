From 799b59190331f591934ca518ea7ac929e6e67a2e Mon Sep 17 00:00:00 2001
From: Apekshit Sharma <appy@apache.org>
Date: Wed, 15 Feb 2017 13:07:21 -0800
Subject: [PATCH] HBASE-17652 Use 'default' keyword in coprocessor Observer
 interfaces to get rid of 'Base...Observer' implementations.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Reason for refactor:
In cases where one might need to use multiple observers, say region, master and regionserver; and the fact that only one class can be extended, it gives rise to following pattern:

public class BaseMasterAndRegionObserver
  extends BaseRegionObserver
  implements MasterObserver

class AccessController
  extends BaseMasterAndRegionObserver
  implements RegionServerObserver

were BaseMasterAndRegionObserver is full copy of BaseMasterObserver.

There is an example of simple case too where the current design fails.
Say only one observer is needed by the coprocessor, but the design doesn't permit extending even that single observer (see RSGroupAdminEndpoint), that leads to copy of full Bas
e...Observer class into coprocessor class leading to 1000s of lines of code and this ugly mix of 5 main functions with 100 useless functions.
Change-Id: I265738d47e8554e7b4678e88bb916a0cc7d00ab3
---
 .../java/org/apache/hadoop/hbase/Coprocessor.java  |    4 +-
 .../apache/hadoop/hbase/TestHTableDescriptor.java  |    5 +-
 .../hadoop/hbase/coprocessor/TestClassLoading.java |    4 +-
 .../example/ExampleMasterObserverWithMetrics.java  |   10 +-
 .../example/ExampleRegionObserverWithMetrics.java  |   11 +-
 .../example/ZooKeeperScanPolicyObserver.java       |    4 +-
 .../hbase/mapreduce/IntegrationTestBulkLoad.java   |    4 +-
 .../hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java |  886 ---------------
 .../hbase/constraint/ConstraintProcessor.java      |    6 +-
 .../coprocessor/BaseMasterAndRegionObserver.java   |  916 ---------------
 .../hbase/coprocessor/BaseMasterObserver.java      | 1187 --------------------
 .../hbase/coprocessor/BaseRegionObserver.java      |  559 ---------
 .../coprocessor/BaseRegionServerObserver.java      |   99 --
 .../hadoop/hbase/coprocessor/BaseWALObserver.java  |   69 --
 .../hadoop/hbase/coprocessor/BulkLoadObserver.java |    8 +-
 .../hadoop/hbase/coprocessor/EndpointObserver.java |   17 +-
 .../hadoop/hbase/coprocessor/MasterObserver.java   |  805 ++++++-------
 .../hadoop/hbase/coprocessor/RegionObserver.java   |  430 ++++---
 .../hbase/coprocessor/RegionServerObserver.java    |  122 +-
 .../hadoop/hbase/coprocessor/WALObserver.java      |   24 +-
 .../hadoop/hbase/coprocessor/package-info.java     |    5 -
 .../hbase/regionserver/RegionCoprocessorHost.java  |    5 -
 .../regionserver/ReplicationObserver.java          |    4 +-
 .../hbase/security/access/AccessController.java    |    8 +-
 .../access/CoprocessorWhitelistMasterObserver.java |    4 +-
 .../security/visibility/VisibilityController.java  |   11 +-
 .../hadoop/hbase/tool/WriteSinkCoprocessor.java    |    4 +-
 .../hbase/client/HConnectionTestingUtility.java    |    5 +-
 ...stAsyncNonMetaRegionLocatorConcurrenyLimit.java |    4 +-
 .../client/TestAsyncRegionLocatorTimeout.java      |    6 +-
 .../hadoop/hbase/client/TestAsyncTableBatch.java   |    4 +-
 .../TestAvoidCellReferencesIntoShippedBlocks.java  |    4 +-
 .../hbase/client/TestBlockEvictionFromClient.java  |    7 +-
 .../hbase/client/TestClientOperationInterrupt.java |    4 +-
 .../hadoop/hbase/client/TestEnableTable.java       |    4 +-
 .../hadoop/hbase/client/TestFromClientSide.java    |    4 +-
 .../hadoop/hbase/client/TestFromClientSide3.java   |    5 +-
 .../org/apache/hadoop/hbase/client/TestHCM.java    |   12 +-
 .../client/TestMobCloneSnapshotFromClient.java     |    5 +-
 .../hbase/client/TestReplicaWithCluster.java       |    6 +-
 .../hadoop/hbase/client/TestReplicasClient.java    |    4 +-
 .../hbase/coprocessor/SampleRegionWALObserver.java |    2 +-
 .../hbase/coprocessor/SimpleRegionObserver.java    |    2 +-
 .../coprocessor/TestCoprocessorInterface.java      |    4 +-
 .../hbase/coprocessor/TestCoprocessorMetrics.java  |   19 +-
 .../hbase/coprocessor/TestHTableWrapper.java       |    2 +-
 .../TestMasterCoprocessorExceptionWithAbort.java   |    2 +-
 .../TestMasterCoprocessorExceptionWithRemove.java  |    2 +-
 .../coprocessor/TestOpenTableInCoprocessor.java    |   10 +-
 .../coprocessor/TestRegionObserverBypass.java      |    2 +-
 ...ObserverForAddingMutationsFromCoprocessors.java |   11 +-
 .../coprocessor/TestRegionObserverInterface.java   |    2 +-
 .../TestRegionObserverScannerOpenHook.java         |   11 +-
 .../coprocessor/TestRegionObserverStacking.java    |    6 +-
 .../TestImportTSVWithOperationAttributes.java      |    4 +-
 .../hbase/mapreduce/TestImportTSVWithTTLs.java     |    4 +-
 .../master/TestAssignmentManagerOnCluster.java     |    4 +-
 .../hbase/mob/compactions/TestMobCompactor.java    |    4 +-
 .../hbase/namespace/TestNamespaceAuditor.java      |   13 +-
 .../hbase/regionserver/NoOpScanPolicyObserver.java |    4 +-
 .../regionserver/TestHRegionServerBulkLoad.java    |    4 +-
 .../regionserver/TestScannerRetriableFailure.java  |    4 +-
 .../regionserver/TestScannerWithCorruptHFile.java  |    4 +-
 .../TestSplitTransactionOnCluster.java             |    4 +-
 .../apache/hadoop/hbase/regionserver/TestTags.java |    8 +-
 .../hbase/replication/TestMasterReplication.java   |    9 +-
 .../hbase/replication/TestReplicationWithTags.java |    6 +-
 ...stRegionReplicaReplicationEndpointNoMaster.java |    4 +-
 .../hbase/security/access/SecureTestUtil.java      |    4 +-
 .../TestCoprocessorWhitelistMasterObserver.java    |    5 +-
 .../TestVisibilityLabelsReplication.java           |    7 +-
 .../hbase/snapshot/TestSnapshotClientRetries.java  |    4 +-
 .../hadoop/hbase/util/BaseTestHBaseFsck.java       |    4 +-
 .../hbase/util/TestCoprocessorScanPolicy.java      |    6 +-
 .../hbase/thrift/ErrorThrowingGetObserver.java     |    5 +-
 .../thrift2/TestThriftHBaseServiceHandler.java     |    5 +-
 src/main/asciidoc/_chapters/cp.adoc                |   32 +-
 77 files changed, 829 insertions(+), 4679 deletions(-)
 delete mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java
 delete mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java
 delete mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java
 delete mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionServerObserver.java
 delete mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseWALObserver.java

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java
index 3bd737f..7951760 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java
@@ -54,8 +54,8 @@ public interface Coprocessor {
   }
 
   // Interface
-  void start(CoprocessorEnvironment env) throws IOException;
+  default void start(CoprocessorEnvironment env) throws IOException {}
 
-  void stop(CoprocessorEnvironment env) throws IOException;
+  default void stop(CoprocessorEnvironment env) throws IOException {}
 
 }
diff --git a/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHTableDescriptor.java b/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHTableDescriptor.java
index 6ecfde3..7ca5f51 100644
--- a/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHTableDescriptor.java
+++ b/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHTableDescriptor.java
@@ -117,7 +117,7 @@ public class TestHTableDescriptor {
   public void testGetSetRemoveCP() throws Exception {
     HTableDescriptor desc = new HTableDescriptor(TableName.valueOf(name.getMethodName()));
     // simple CP
-    String className = "org.apache.hadoop.hbase.coprocessor.BaseRegionObserver";
+    String className = "org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver";
     // add and check that it is present
     desc.addCoprocessor(className);
     assertTrue(desc.hasCoprocessor(className));
@@ -134,7 +134,8 @@ public class TestHTableDescriptor {
   public void testSetListRemoveCP() throws Exception {
     HTableDescriptor desc = new HTableDescriptor(TableName.valueOf(name.getMethodName()));
     // simple CP
-    String className1 = "org.apache.hadoop.hbase.coprocessor.BaseRegionObserver";
+    // todo: fix this. putting compile error here;
+    String className1 = "org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver";
     String className2 = "org.apache.hadoop.hbase.coprocessor.SampleRegionWALObserver";
     // Check that any coprocessor is present.
     assertTrue(desc.getCoprocessors().isEmpty());
diff --git a/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java b/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
index 0211ab8..c527e7b 100644
--- a/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
+++ b/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
@@ -68,7 +68,7 @@ public class TestClassLoading {
   // TOOD: Fix the import of this handler.  It is coming in from a package that is far away.
   private static Class<?> regionCoprocessor2 = TestServerCustomProtocol.PingHandler.class;
   private static Class<?> regionServerCoprocessor = SampleRegionWALObserver.class;
-  private static Class<?> masterCoprocessor = BaseMasterObserver.class;
+  private static Class<?> masterCoprocessor = MasterObserver.class;
 
   private static final String[] regionServerSystemCoprocessors =
       new String[]{
@@ -109,7 +109,7 @@ public class TestClassLoading {
 
   static File buildCoprocessorJar(String className) throws Exception {
     String code = "import org.apache.hadoop.hbase.coprocessor.*;" +
-      "public class " + className + " extends BaseRegionObserver {}";
+      "public class " + className + " implements RegionObserver {}";
     return ClassLoaderTestHelper.buildJar(
       TEST_UTIL.getDataTestDir().toString(), className, code);
   }
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java
index a5bae0a..6649162 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java
@@ -26,7 +26,7 @@ import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.metrics.Counter;
@@ -45,7 +45,7 @@ import org.apache.hadoop.hbase.metrics.Timer;
  * </p>
  * @see ExampleRegionObserverWithMetrics
  */
-public class ExampleMasterObserverWithMetrics extends BaseMasterObserver {
+public class ExampleMasterObserverWithMetrics implements MasterObserver {
 
   private static final Log LOG = LogFactory.getLog(ExampleMasterObserverWithMetrics.class);
 
@@ -69,7 +69,6 @@ public class ExampleMasterObserverWithMetrics extends BaseMasterObserver {
   @Override
   public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
                              HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-    super.preCreateTable(ctx, desc, regions);
     // we rely on the fact that there is only 1 instance of our MasterObserver. We keep track of
     // when the operation starts before the operation is executing.
     this.createTableStartTime = System.currentTimeMillis();
@@ -78,7 +77,6 @@ public class ExampleMasterObserverWithMetrics extends BaseMasterObserver {
   @Override
   public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
                               HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-    super.postCreateTable(ctx, desc, regions);
     if (this.createTableStartTime > 0) {
       long time = System.currentTimeMillis() - this.createTableStartTime;
       LOG.info("Create table took: " + time);
@@ -90,16 +88,12 @@ public class ExampleMasterObserverWithMetrics extends BaseMasterObserver {
 
   @Override
   public void preDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName) throws IOException {
-    super.preDisableTable(ctx, tableName);
-
     // Increment the Counter for disable table operations
     this.disableTableCounter.increment();
   }
 
   @Override
   public void start(CoprocessorEnvironment env) throws IOException {
-    super.start(env);
-
     // start for the MasterObserver will be called only once in the lifetime of the
     // server. We will construct and register all metrics that we will track across method
     // invocations.
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java
index 7606b05..fd593a7 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java
@@ -27,9 +27,9 @@ import java.util.concurrent.ThreadLocalRandom;
 import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.client.Get;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.metrics.Counter;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
 import org.apache.hadoop.hbase.metrics.Timer;
@@ -45,7 +45,7 @@ import org.apache.hadoop.hbase.metrics.Timer;
  *
  * @see ExampleMasterObserverWithMetrics
  */
-public class ExampleRegionObserverWithMetrics extends BaseRegionObserver {
+public class ExampleRegionObserverWithMetrics implements RegionObserver {
 
   private Counter preGetCounter;
   private Timer costlyOperationTimer;
@@ -53,8 +53,6 @@ public class ExampleRegionObserverWithMetrics extends BaseRegionObserver {
   @Override
   public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get, List<Cell> results)
       throws IOException {
-    super.preGetOp(e, get, results);
-
     // Increment the Counter whenever the coprocessor is called
     preGetCounter.increment();
   }
@@ -62,8 +60,6 @@ public class ExampleRegionObserverWithMetrics extends BaseRegionObserver {
   @Override
   public void postGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
                         List<Cell> results) throws IOException {
-    super.postGetOp(e, get, results);
-
     // do a costly (high latency) operation which we want to measure how long it takes by
     // using a Timer (which is a Meter and a Histogram).
     long start = System.nanoTime();
@@ -83,8 +79,6 @@ public class ExampleRegionObserverWithMetrics extends BaseRegionObserver {
 
   @Override
   public void start(CoprocessorEnvironment env) throws IOException {
-    super.start(env);
-
     // start for the RegionServerObserver will be called only once in the lifetime of the
     // server. We will construct and register all metrics that we will track across method
     // invocations.
@@ -116,6 +110,5 @@ public class ExampleRegionObserverWithMetrics extends BaseRegionObserver {
   public void stop(CoprocessorEnvironment e) throws IOException {
     // we should NOT remove / deregister the metrics in stop(). The whole registry will be
     // removed when the last region of the table is closed.
-    super.stop(e);
   }
 }
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java
index 48d7a55..eba1c8b 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java
@@ -29,9 +29,9 @@ import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.client.IsolationLevel;
 import org.apache.hadoop.hbase.client.Scan;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.HStore;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.KeyValueScanner;
@@ -63,7 +63,7 @@ import org.apache.zookeeper.ZooKeeper;
  * because RegionObservers come and go and currently
  * listeners registered with ZooKeeperWatcher cannot be removed.
  */
-public class ZooKeeperScanPolicyObserver extends BaseRegionObserver {
+public class ZooKeeperScanPolicyObserver implements RegionObserver {
   public static final String node = "/backup/example/lastbackup";
   public static final String zkkey = "ZK";
   private static final Log LOG = LogFactory.getLog(ZooKeeperScanPolicyObserver.class);
diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/mapreduce/IntegrationTestBulkLoad.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/mapreduce/IntegrationTestBulkLoad.java
index e518269..fd062d1 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/mapreduce/IntegrationTestBulkLoad.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/mapreduce/IntegrationTestBulkLoad.java
@@ -46,9 +46,9 @@ import org.apache.hadoop.hbase.client.RegionLocator;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.RegionScanner;
@@ -152,7 +152,7 @@ public class IntegrationTestBulkLoad extends IntegrationTestBase {
   private boolean load = false;
   private boolean check = false;
 
-  public static class SlowMeCoproScanOperations extends BaseRegionObserver {
+  public static class SlowMeCoproScanOperations implements RegionObserver {
     static final AtomicLong sleepTime = new AtomicLong(2000);
     Random r = new Random();
     AtomicLong countOfNext = new AtomicLong(0);
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
index eb70179..72e166b 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
@@ -303,890 +303,4 @@ public class RSGroupAdminEndpoint extends RSGroupAdminService implements Coproce
                                  NamespaceDescriptor ns) throws IOException {
     preCreateNamespace(ctx, ns);
   }
-
-  @Override
-  public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              HTableDescriptor desc,
-                              HRegionInfo[] regions) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    HTableDescriptor desc,
-                                    HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     HTableDescriptor desc,
-                                     HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void postCompletedCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preDeleteTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                             TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postCompletedDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preTruncateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postTruncateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                       TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postCompletedTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                             TableName tableName,
-                             HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              TableName tableName,
-                              HTableDescriptor htd) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    TableName tableName,
-                                    HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     TableName tableName,
-                                     HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postCompletedModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                           TableName tableName,
-                           HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 TableName tableName,
-                                 HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                            TableName tableName,
-                            HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  TableName tableName,
-                                  HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preAddColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  TableName tableName,
-                                  HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postAddColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                   TableName tableName,
-                                   HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              TableName tableName,
-                              HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                    TableName tableName,
-                                    HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               TableName tableName,
-                               HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, HColumnDescriptor columnFamily) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, HColumnDescriptor columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void preModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily)
-      throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName, HColumnDescriptor columnFamily) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postCompletedModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily)
-      throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws
-      IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteColumnHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName, byte[] columnFamily) throws IOException {
-
-  }
-
-  @Override
-  public void postCompletedDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void preEnableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postCompletedEnableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Override
-  public void preDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void preDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void preDisableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Deprecated
-  @Override
-  public void postDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      TableName tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postCompletedDisableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException {
-
-  }
-
-  @Override
-  public void preMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo region,
-                      ServerName srcServer, ServerName destServer) throws IOException {
-
-  }
-
-  @Override
-  public void postMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo region,
-                       ServerName srcServer, ServerName destServer) throws IOException {
-
-  }
-
-  @Override
-  public void preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo, boolean force) throws IOException {
-
-  }
-
-  @Override
-  public void postUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo, boolean force) throws IOException {
-
-  }
-
-  @Override
-  public void preRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void postRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionInfo) throws IOException {
-
-  }
-
-  @Override
-  public void preBalance(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-
-  }
-
-  @Override
-  public void postBalance(ObserverContext<MasterCoprocessorEnvironment> ctx, List<RegionPlan>
-      plans) throws IOException {
-
-  }
-
-  @Override
-  public boolean preBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx, boolean
-      newValue) throws IOException {
-    return newValue;
-  }
-
-  @Override
-  public void postBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx, boolean
-      oldValue, boolean newValue) throws IOException {
-
-  }
-
-  @Override
-  public void preShutdown(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-
-  }
-
-  @Override
-  public void preStopMaster(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-
-  }
-
-  @Override
-  public void postStartMaster(ObserverContext<MasterCoprocessorEnvironment> ctx) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preMasterInitialization(ObserverContext<MasterCoprocessorEnvironment> ctx) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx, SnapshotDescription
-      snapshot, HTableDescriptor hTableDescriptor) throws IOException {
-
-  }
-
-  @Override
-  public void postSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx, SnapshotDescription
-      snapshot, HTableDescriptor hTableDescriptor) throws IOException {
-
-  }
-
-  @Override
-  public void preListSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void postListSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void preCloneSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               SnapshotDescription snapshot, HTableDescriptor hTableDescriptor)
-      throws IOException {
-
-  }
-
-  @Override
-  public void postCloneSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                SnapshotDescription snapshot, HTableDescriptor hTableDescriptor)
-      throws IOException {
-
-  }
-
-  @Override
-  public void preRestoreSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 SnapshotDescription snapshot, HTableDescriptor hTableDescriptor)
-      throws IOException {
-
-  }
-
-  @Override
-  public void postRestoreSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  SnapshotDescription snapshot, HTableDescriptor
-      hTableDescriptor) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteSnapshot(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 SnapshotDescription snapshot) throws IOException {
-
-  }
-
-  @Override
-  public void preGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                     List<TableName> tableNamesList, List<HTableDescriptor>
-      descriptors, String regex) throws IOException {
-
-  }
-
-  @Override
-  public void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                      List<TableName> tableNamesList, List<HTableDescriptor>
-      descriptors, String regex) throws IOException {
-
-  }
-
-  @Override
-  public void preGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               List<HTableDescriptor> descriptors, String regex) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                List<HTableDescriptor> descriptors, String regex) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postCreateNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  NamespaceDescriptor ns) throws IOException {
-
-  }
-
-  @Override
-  public void preDeleteNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace) throws IOException {
-
-  }
-
-  @Override
-  public void postDeleteNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace) throws IOException {
-
-  }
-
-  @Override
-  public void postModifyNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                  NamespaceDescriptor ns) throws IOException {
-
-  }
-
-  @Override
-  public void preGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace) throws IOException {
-
-  }
-
-  @Override
-  public void postGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                         NamespaceDescriptor ns) throws IOException {
-
-  }
-
-  @Override
-  public void preListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                          List<NamespaceDescriptor> descriptors) throws
-      IOException {
-
-  }
-
-  @Override
-  public void postListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                           List<NamespaceDescriptor> descriptors) throws
-      IOException {
-
-  }
-
-  @Override
-  public void preTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public void postTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName) throws IOException {
-
-  }
-
-  @Override
-  public boolean preSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException {
-    return false;
-  }
-
-  @Override
-  public void postSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String userName,
-                              Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      userName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String userName,
-                              TableName tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      userName, TableName tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String userName,
-                              String namespace, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetUserQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      userName, String namespace, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetTableQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetTableQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, TableName
-      tableName, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void preSetNamespaceQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace, Quotas quotas) throws IOException {
-
-  }
-
-  @Override
-  public void postSetNamespaceQuota(ObserverContext<MasterCoprocessorEnvironment> ctx, String
-      namespace, Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preDispatchMerge(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo
-      regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  @Override
-  public void postDispatchMerge(ObserverContext<MasterCoprocessorEnvironment> c, HRegionInfo
-      regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<Address> servers, String targetGroup)
-  throws IOException {}
-
-  @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<Address> servers, String targetGroup)
-  throws IOException {}
-
-  @Override
-  public void preMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<TableName>
-      tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void postMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<TableName> tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void preAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void postAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void postRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String groupName)
-      throws IOException {
-  }
-
-  @Override
-  public void postBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 String groupName, boolean balancerRan) throws IOException {
-  }
-
-  @Override
-  public void preAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      ProcedureExecutor<MasterProcedureEnv> procEnv, long procId) throws IOException {
-  }
-
-  @Override
-  public void postAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<ProcedureInfo> procInfoList) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegion(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void postCompletedSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo regionInfoA,
-      final HRegionInfo regionInfoB) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionBeforePONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final byte[] splitKey,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAfterPONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void postRollBackSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postCompletedMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void postRollBackMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-
-  @Override
-  public void postLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-
-  @Override
-  public void preRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace, TableName tableName,
-      HRegionInfo[] regionInfos, LockType type, String description) throws IOException {
-    // TODO Auto-generated method stub
-    
-  }
-
-  @Override
-  public void postRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace, TableName tableName,
-      HRegionInfo[] regionInfos, LockType type, String description) throws IOException {
-    // TODO Auto-generated method stub
-    
-  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java
index d7f79f0..9eaecd3 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java
@@ -29,9 +29,9 @@ import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Durability;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
 
@@ -42,7 +42,7 @@ import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
  * implemented on any given system by a coprocessor.
  */
 @InterfaceAudience.Private
-public class ConstraintProcessor extends BaseRegionObserver {
+public class ConstraintProcessor implements RegionObserver {
 
   private static final Log LOG = LogFactory.getLog(ConstraintProcessor.class);
 
@@ -95,7 +95,7 @@ public class ConstraintProcessor extends BaseRegionObserver {
   @Override
   public boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> e,
       final InternalScanner s, final Cell curRowCell, final boolean hasMore) throws IOException {
-    // Impl in BaseRegionObserver might do unnecessary copy for Off heap backed Cells.
+    // 'default' in RegionObserver might do unnecessary copy for Off heap backed Cells.
     return hasMore;
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java
deleted file mode 100644
index 8cb41b6..0000000
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java
+++ /dev/null
@@ -1,916 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.hbase.coprocessor;
-
-
-import java.io.IOException;
-import java.util.List;
-import java.util.Set;
-
-import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HBaseInterfaceAudience;
-import org.apache.hadoop.hbase.HColumnDescriptor;
-import org.apache.hadoop.hbase.HRegionInfo;
-import org.apache.hadoop.hbase.HTableDescriptor;
-import org.apache.hadoop.hbase.NamespaceDescriptor;
-import org.apache.hadoop.hbase.ProcedureInfo;
-import org.apache.hadoop.hbase.ServerName;
-import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.classification.InterfaceStability;
-import org.apache.hadoop.hbase.client.MasterSwitchType;
-import org.apache.hadoop.hbase.client.Mutation;
-import org.apache.hadoop.hbase.master.RegionPlan;
-import org.apache.hadoop.hbase.master.locking.LockProcedure;
-import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
-import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.SnapshotDescription;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Quotas;
-import org.apache.hadoop.hbase.util.Address;
-
-@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
-@InterfaceStability.Evolving
-public class BaseMasterAndRegionObserver extends BaseRegionObserver
-    implements MasterObserver {
-  @Override
-  public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  /**
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *   (<a href="https://issues.apache.org/jira/browse/HBASE-">HBASE-</a>).
-   *   Use {@link #preMergeRegions(ObserverContext, HRegionInfo[])}
-   */
-  @Deprecated
-  @Override
-  public void preDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  /**
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *   (<a href="https://issues.apache.org/jira/browse/HBASE-">HBASE-</a>).
-   *   Use {@link #postMergeRegions(ObserverContext, HRegionInfo[])}
-   */
-  @Deprecated
-  @Override
-  public void postDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preCreateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postCreateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void postCompletedCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preDeleteTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postDeleteTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException{
-  }
-
-  @Override
-  public void preDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException{
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preTruncateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postTruncateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HTableDescriptor htd) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HTableDescriptor htd) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postCompletedModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preCreateNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException {
-  }
-
-  @Override
-  public void postCreateNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException {
-  }
-
-  @Override
-  public void preDeleteNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException {
-  }
-
-  @Override
-  public void postDeleteNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException {
-  }
-
-  @Override
-  public void preModifyNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException {
-  }
-
-  @Override
-  public void postModifyNamespace(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException {
-  }
-
-  @Override
-  public void preGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException {
-  }
-
-  @Override
-  public void postGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException {
-  }
-
-  @Override
-  public void preListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<NamespaceDescriptor> descriptors) throws IOException {
-  }
-
-  @Override
-  public void postListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<NamespaceDescriptor> descriptors) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preAddColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postAddColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preModifyColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postModifyColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preDeleteColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postDeleteColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws IOException {
-  }
-
-
-  @Override
-  public void preEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preEnableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preEnableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-  @Deprecated
-  @Override
-  public void postEnableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedEnableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void preDisableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preDisableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Deprecated
-  @Override
-  public void postDisableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedDisableTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preAbortProcedure(
-      ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final ProcedureExecutor<MasterProcedureEnv> procEnv,
-      final long procId) throws IOException {
-  }
-
-  @Override
-  public void postAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postListProcedures(
-      ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<ProcedureInfo> procInfoList) throws IOException {
-  }
-
-  @Override
-  public void preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo, boolean force) throws IOException {
-  }
-
-  @Override
-  public void postUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo, boolean force) throws IOException {
-  }
-
-  @Override
-  public void preRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx,
-    HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void postRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx,
-    HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void preBalance(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postBalance(ObserverContext<MasterCoprocessorEnvironment> ctx, List<RegionPlan> plans)
-      throws IOException {
-  }
-
-  @Override
-  public boolean preSetSplitOrMergeEnabled(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                           boolean newValue,
-                                           MasterSwitchType switchType)
-      throws IOException {
-    return false;
-  }
-
-  @Override
-  public void postSetSplitOrMergeEnabled(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                         boolean newValue,
-                                         MasterSwitchType switchType)
-      throws IOException {
-
-  }
-
-  @Override
-  public boolean preBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      boolean b) throws IOException {
-    return b;
-  }
-
-  @Override
-  public void postBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      boolean oldValue, boolean newValue) throws IOException {
-  }
-
-  @Override
-  public void preShutdown(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preStopMaster(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postStartMaster(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preMasterInitialization(
-      ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void start(CoprocessorEnvironment ctx) throws IOException {
-  }
-
-  @Override
-  public void stop(CoprocessorEnvironment ctx) throws IOException {
-  }
-
-  @Override
-  public void preMove(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo region, ServerName srcServer, ServerName destServer)
-  throws IOException {
-  }
-
-  @Override
-  public void postMove(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo region, ServerName srcServer, ServerName destServer)
-  throws IOException {
-  }
-
-  @Override
-  public void preSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void postSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void preListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void postListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void preCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void postCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void preRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void postRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void preDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void postDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void preGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<TableName> tableNamesList, List<HTableDescriptor> descriptors,
-      String regex) throws IOException {
-  }
-
-  @Override
-  public void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<TableName> tableNamesList, List<HTableDescriptor> descriptors,
-      String regex) throws IOException {
-  }
-
-  @Override
-  public void preGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<HTableDescriptor> descriptors, String regex) throws IOException {
-  }
-
-  @Override
-  public void postGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<HTableDescriptor> descriptors, String regex) throws IOException {
-  }
-
-  @Override
-  public void preTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void postBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                 String groupName, boolean balancerRan) throws IOException {
-  }
-
-  @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<Address>
-      servers, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void postMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<TableName>
-      tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void postRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String groupName)
-      throws IOException {
-  }
-
-  @Override
-  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<Address> servers, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void preMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<TableName> tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void preRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preSplitRegion(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void postCompletedSplitRegionAction(
-      ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo regionInfoA,
-      final HRegionInfo regionInfoB) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionBeforePONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final byte[] splitKey,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAfterPONRAction(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postRollBackSplitRegionAction(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postCompletedMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void postRollBackMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
-      TableName tableName, HRegionInfo[] regionInfos, LockProcedure.LockType type,
-      String description) throws IOException {
-  }
-
-  @Override
-  public void postRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
-      TableName tableName, HRegionInfo[] regionInfos, LockProcedure.LockType type,
-      String description) throws IOException {
-  }
-
-  @Override
-  public void preLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-
-  @Override
-  public void postLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java
deleted file mode 100644
index 6e9a2ad..0000000
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java
+++ /dev/null
@@ -1,1187 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.hbase.coprocessor;
-
-
-import java.io.IOException;
-import java.util.List;
-import java.util.Set;
-
-import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HBaseInterfaceAudience;
-import org.apache.hadoop.hbase.HColumnDescriptor;
-import org.apache.hadoop.hbase.HRegionInfo;
-import org.apache.hadoop.hbase.HTableDescriptor;
-import org.apache.hadoop.hbase.NamespaceDescriptor;
-import org.apache.hadoop.hbase.ProcedureInfo;
-import org.apache.hadoop.hbase.ServerName;
-import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.classification.InterfaceStability;
-import org.apache.hadoop.hbase.client.MasterSwitchType;
-import org.apache.hadoop.hbase.client.Mutation;
-import org.apache.hadoop.hbase.master.RegionPlan;
-import org.apache.hadoop.hbase.master.locking.LockProcedure;
-import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
-import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.SnapshotDescription;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Quotas;
-import org.apache.hadoop.hbase.util.Address;
-
-@InterfaceAudience.LimitedPrivate({HBaseInterfaceAudience.COPROC, HBaseInterfaceAudience.CONFIG})
-@InterfaceStability.Evolving
-public class BaseMasterObserver implements MasterObserver {
-  @Override
-  public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  /**
-   * Called before a new table is created by
-   * {@link org.apache.hadoop.hbase.master.HMaster}.  Called as part of create
-   * table handler and it is async to the create RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param desc the HTableDescriptor for the table
-   * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #preCreateTableAction(ObserverContext, HTableDescriptor, HRegionInfo[])}.
-   */
-  @Deprecated
-  @Override
-  public void preCreateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void preCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  /**
-   * Called after the createTable operation has been requested.  Called as part
-   * of create table RPC call.  Called as part of create table handler and
-   * it is async to the create RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param desc the HTableDescriptor for the table
-   * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *   (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *   Use {@link #postCompletedCreateTableAction(ObserverContext, HTableDescriptor, HRegionInfo[])}
-   */
-  @Deprecated
-  @Override
-  public void postCreateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-  }
-
-  @Override
-  public void postCompletedCreateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException {
-  }
-
-  /**
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *   (<a href="https://issues.apache.org/jira/browse/HBASE-">HBASE-</a>).
-   *   Use {@link #preMergeRegions(ObserverContext, HRegionInfo[])}
-   */
-  @Deprecated
-  @Override
-  public void preDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  /**
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *   (<a href="https://issues.apache.org/jira/browse/HBASE-">HBASE-</a>).
-   *   Use {@link #postMergeRegions(ObserverContext, HRegionInfo[])}
-   */
-  @Deprecated
-  @Override
-  public void postDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionA, HRegionInfo regionB) throws IOException {
-  }
-
-  @Override
-  public void preDeleteTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postDeleteTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  /**
-   * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a
-   * table.  Called as part of delete table handler and
-   * it is async to the delete RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #preDeleteTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void preDeleteTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException{
-  }
-
-  @Override
-  public void preDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException{
-  }
-
-  /**
-   * Called after {@link org.apache.hadoop.hbase.master.HMaster} deletes a
-   * table.  Called as part of delete table handler and it is async to the
-   * delete RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #postCompletedDeleteTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void postDeleteTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedDeleteTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postTruncateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  /**
-   * Called before {@link org.apache.hadoop.hbase.master.HMaster} truncates a
-   * table.  Called as part of truncate table handler and it is sync
-   * to the truncate RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #preTruncateTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void preTruncateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  /**
-   * Called after {@link org.apache.hadoop.hbase.master.HMaster} truncates a
-   * table.  Called as part of truncate table handler and it is sync to the
-   * truncate RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #postCompletedTruncateTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void postTruncateTableHandler(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedTruncateTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postModifyTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HTableDescriptor htd) throws IOException {
-  }
-
-  /**
-   * Called prior to modifying a table's properties.  Called as part of modify
-   * table handler and it is async to the modify table RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #preModifyTableAction(ObserverContext, TableName, HTableDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void preModifyTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  /**
-   * Called after to modifying a table's properties.  Called as part of modify
-   * table handler and it is async to the modify table RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *     Use {@link #postCompletedModifyTableAction(ObserverContext, TableName, HTableDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void postModifyTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void postCompletedModifyTableAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HTableDescriptor htd) throws IOException {
-  }
-
-  @Override
-  public void preCreateNamespace(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, NamespaceDescriptor ns)
-          throws IOException {
-  }
-
-  @Override
-  public void postCreateNamespace(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, NamespaceDescriptor ns)
-          throws IOException {
-  }
-
-  @Override
-  public void preDeleteNamespace(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace) throws IOException {
-  }
-
-  @Override
-  public void postDeleteNamespace(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace) throws IOException {
-  }
-
-  @Override
-  public void preModifyNamespace(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, NamespaceDescriptor ns)
-          throws IOException {
-  }
-
-  @Override
-  public void postModifyNamespace(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, NamespaceDescriptor ns)
-          throws IOException {
-  }
-
-  @Override
-  public void preGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException {
-  }
-
-  @Override
-  public void postGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException {
-  }
-
-  @Override
-  public void preListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<NamespaceDescriptor> descriptors) throws IOException {
-  }
-
-  @Override
-  public void postListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<NamespaceDescriptor> descriptors) throws IOException {
-  }
-
-  /**
-   * Called prior to adding a new column family to the table.  Called as part of
-   * add column RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #preAddColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void preAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called after the new column family has been created.  Called as part of
-   * add column RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #postAddColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void postAddColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postAddColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called prior to adding a new column family to the table.  Called as part of
-   * add column handler.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *          (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>). Use
-   *          {@link #preAddColumnFamilyAction(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void preAddColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called after the new column family has been created.  Called as part of
-   * add column handler.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>). Use
-   *     {@link #postCompletedAddColumnFamilyAction(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void postAddColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedAddColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called prior to modifying a column family's attributes.  Called as part of
-   * modify column RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #preModifyColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void preModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called after the column family has been updated.  Called as part of modify
-   * column RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #postModifyColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void postModifyColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postModifyColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called prior to modifying a column family's attributes.  Called as part of
-   * modify column handler.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *     Use {@link #preModifyColumnFamilyAction(ObserverContext, TableName, HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void preModifyColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called after the column family has been updated.  Called as part of modify
-   * column handler.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *   (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>). Use
-   *   {@link #postCompletedModifyColumnFamilyAction(ObserverContext,TableName,HColumnDescriptor)}.
-   */
-  @Deprecated
-  @Override
-  public void postModifyColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedModifyColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException {
-  }
-
-  /**
-   * Called prior to deleting the entire column family.  Called as part of
-   * delete column RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the column family
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #preDeleteColumnFamily(ObserverContext, TableName, byte[])}.
-   */
-  @Deprecated
-  @Override
-  public void preDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  /**
-   * Called after the column family has been deleted.  Called as part of delete
-   * column RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the column family
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #postDeleteColumnFamily(ObserverContext, TableName, byte[])}.
-   */
-  @Deprecated
-  @Override
-  public void postDeleteColumn(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postDeleteColumnFamily(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, byte[] columnFamily) throws IOException {
-  }
-
-  /**
-   * Called prior to deleting the entire column family.  Called as part of
-   * delete column handler.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the column family
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *             Use {@link #preDeleteColumnFamilyAction(ObserverContext, TableName, byte[])}.
-   */
-  @Deprecated
-  @Override
-  public void preDeleteColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void preDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws IOException {
-  }
-
-  /**
-   * Called after the column family has been deleted.  Called as part of
-   * delete column handler.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @param columnFamily the column family
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *         (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
-   *         Use {@link #postCompletedDeleteColumnFamilyAction(ObserverContext, TableName, byte[])}.
-   */
-  @Deprecated
-  @Override
-  public void postDeleteColumnHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName,
-      byte[] columnFamily) throws IOException {
-  }
-
-  @Override
-  public void postCompletedDeleteColumnFamilyAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName,
-      final byte[] columnFamily) throws IOException {
-  }
-
-
-  @Override
-  public void preEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postEnableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  /**
-   * Called prior to enabling a table.  Called as part of enable table handler
-   * and it is async to the enable table RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #preEnableTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void preEnableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preEnableTableAction(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  /**
-   * Called after the enableTable operation has been requested.  Called as part
-   * of enable table handler and it is async to the enable table RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #postCompletedEnableTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void postEnableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedEnableTableAction(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postDisableTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  /**
-   * Called prior to disabling a table.  Called as part of disable table handler
-   * and it is asyn to the disable table RPC call.
-   * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #preDisableTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void preDisableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preDisableTableAction(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  /**
-   * Called after the disableTable operation has been requested.  Called as part
-   * of disable table handler and it is asyn to the disable table RPC call.
-   * @param ctx the environment to interact with the framework and master
-   * @param tableName the name of the table
-   * @throws IOException if something went wrong
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
-   *     Use {@link #postCompletedDisableTableAction(ObserverContext, TableName)}.
-   */
-  @Deprecated
-  @Override
-  public void postDisableTableHandler(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void postCompletedDisableTableAction(
-      ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException {
-  }
-
-  @Override
-  public void preMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegions(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preAbortProcedure(
-      ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final ProcedureExecutor<MasterProcedureEnv> procEnv,
-      final long procId) throws IOException {
-  }
-
-  @Override
-  public void postAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postListProcedures(
-      ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<ProcedureInfo> procInfoList) throws IOException {
-  }
-
-  @Override
-  public void preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo, boolean force) throws IOException {
-  }
-
-  @Override
-  public void postUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionInfo, boolean force) throws IOException {
-  }
-
-  @Override
-  public void preRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx,
-    HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public void postRegionOffline(ObserverContext<MasterCoprocessorEnvironment> ctx,
-    HRegionInfo regionInfo) throws IOException {
-  }
-
-  @Override
-  public boolean preSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException {
-    return false;
-  }
-
-  @Override
-  public void postSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegion(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final TableName tableName,
-      final byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void postCompletedSplitRegionAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo regionInfoA,
-      final HRegionInfo regionInfoB) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionBeforePONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final byte[] splitKey,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void preSplitRegionAfterPONRAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void postRollBackSplitRegionAction(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void postCompletedMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void preMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void postMergeRegionsCommitAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException {
-  }
-
-  @Override
-  public void postRollBackMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException {
-  }
-
-  @Override
-  public void preBalance(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postBalance(ObserverContext<MasterCoprocessorEnvironment> ctx, List<RegionPlan> plans)
-      throws IOException {
-  }
-
-  @Override
-  public boolean preBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      boolean b) throws IOException {
-    return b;
-  }
-
-  @Override
-  public void postBalanceSwitch(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      boolean oldValue, boolean newValue) throws IOException {
-  }
-
-  @Override
-  public void preShutdown(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preStopMaster(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postStartMaster(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void preMasterInitialization(
-      ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void start(CoprocessorEnvironment ctx) throws IOException {
-  }
-
-  @Override
-  public void stop(CoprocessorEnvironment ctx) throws IOException {
-  }
-
-  @Override
-  public void preMove(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo region, ServerName srcServer, ServerName destServer)
-  throws IOException {
-  }
-
-  @Override
-  public void postMove(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo region, ServerName srcServer, ServerName destServer)
-  throws IOException {
-  }
-
-  @Override
-  public void preSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void postSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void preListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void postListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void preCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void postCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void preRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void postRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException {
-  }
-
-  @Override
-  public void preDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void postDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException {
-  }
-
-  @Override
-  public void preGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<TableName> tableNamesList, List<HTableDescriptor> descriptors, String regex)
-      throws IOException {
-  }
-
-  @Override
-  public void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<TableName> tableNamesList, List<HTableDescriptor> descriptors,
-      String regex) throws IOException {
-  }
-
-  @Override
-  public void preGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<HTableDescriptor> descriptors, String regex) throws IOException {
-  }
-
-  @Override
-  public void postGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<HTableDescriptor> descriptors, String regex) throws IOException {
-  }
-
-  @Override
-  public void preTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void postTableFlush(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void postSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String namespace, final Quotas quotas) throws IOException {
-  }
-
-  @Override
-  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<Address>
-      servers, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<Address>
-      servers, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void preMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<TableName>
-      tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void postMoveTables(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<TableName> tables, String targetGroup) throws IOException {
-  }
-
-  @Override
-  public void preAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void postAddRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-
-  }
-
-  @Override
-  public void postRemoveRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String name)
-      throws IOException {
-  }
-
-  @Override
-  public void preBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx, String groupName)
-      throws IOException {
-  }
-
-  @Override
-  public void postBalanceRSGroup(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String groupName, boolean balancerRan) throws IOException {
-  }
-
-  @Override
-  public void preRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
-      TableName tableName, HRegionInfo[] regionInfos, LockProcedure.LockType type,
-      String description) throws IOException {
-  }
-
-  @Override
-  public void postRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
-      TableName tableName, HRegionInfo[] regionInfos, LockProcedure.LockType type,
-      String description) throws IOException {
-  }
-
-  @Override
-  public void preLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-
-  @Override
-  public void postLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException {
-  }
-}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java
deleted file mode 100644
index f5cc4de..0000000
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java
+++ /dev/null
@@ -1,559 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.hadoop.hbase.coprocessor;
-
-import com.google.common.collect.ImmutableList;
-
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.NavigableSet;
-
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.hbase.Cell;
-import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HBaseInterfaceAudience;
-import org.apache.hadoop.hbase.HRegionInfo;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.classification.InterfaceStability;
-import org.apache.hadoop.hbase.client.Append;
-import org.apache.hadoop.hbase.client.Delete;
-import org.apache.hadoop.hbase.client.Durability;
-import org.apache.hadoop.hbase.client.Get;
-import org.apache.hadoop.hbase.client.Increment;
-import org.apache.hadoop.hbase.client.Mutation;
-import org.apache.hadoop.hbase.client.Put;
-import org.apache.hadoop.hbase.client.Result;
-import org.apache.hadoop.hbase.client.Scan;
-import org.apache.hadoop.hbase.filter.ByteArrayComparable;
-import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
-import org.apache.hadoop.hbase.io.FSDataInputStreamWrapper;
-import org.apache.hadoop.hbase.io.Reference;
-import org.apache.hadoop.hbase.io.hfile.CacheConfig;
-import org.apache.hadoop.hbase.regionserver.InternalScanner;
-import org.apache.hadoop.hbase.regionserver.KeyValueScanner;
-import org.apache.hadoop.hbase.regionserver.MiniBatchOperationInProgress;
-import org.apache.hadoop.hbase.regionserver.Region;
-import org.apache.hadoop.hbase.regionserver.Region.Operation;
-import org.apache.hadoop.hbase.regionserver.RegionScanner;
-import org.apache.hadoop.hbase.regionserver.ScanType;
-import org.apache.hadoop.hbase.regionserver.Store;
-import org.apache.hadoop.hbase.regionserver.StoreFile;
-import org.apache.hadoop.hbase.regionserver.StoreFileReader;
-import org.apache.hadoop.hbase.regionserver.compactions.CompactionRequest;
-import org.apache.hadoop.hbase.regionserver.querymatcher.DeleteTracker;
-import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
-import org.apache.hadoop.hbase.util.Pair;
-import org.apache.hadoop.hbase.wal.WALKey;
-
-/**
- * An abstract class that implements RegionObserver.
- * By extending it, you can create your own region observer without
- * overriding all abstract methods of RegionObserver.
- */
-@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
-@InterfaceStability.Evolving
-public class BaseRegionObserver implements RegionObserver {
-  @Override
-  public void start(CoprocessorEnvironment e) throws IOException { }
-
-  @Override
-  public void stop(CoprocessorEnvironment e) throws IOException { }
-
-  @Override
-  public void preOpen(ObserverContext<RegionCoprocessorEnvironment> e) throws IOException { }
-
-  @Override
-  public void postOpen(ObserverContext<RegionCoprocessorEnvironment> e) { }
-
-  @Override
-  public void postLogReplay(ObserverContext<RegionCoprocessorEnvironment> e) { }
-
-  @Override
-  public void preClose(ObserverContext<RegionCoprocessorEnvironment> c, boolean abortRequested)
-      throws IOException { }
-
-  @Override
-  public void postClose(ObserverContext<RegionCoprocessorEnvironment> e,
-      boolean abortRequested) { }
-
-  @Override
-  public InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)
-      throws IOException {
-    return s;
-  }
-
-  @Override
-  public InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s,
-      final long readPoint) throws IOException {
-    return preFlushScannerOpen(c, store, memstoreScanner, s);
-  }
-
-  @Override
-  public void preFlush(ObserverContext<RegionCoprocessorEnvironment> e) throws IOException {
-  }
-
-  @Override
-  public void postFlush(ObserverContext<RegionCoprocessorEnvironment> e) throws IOException {
-  }
-
-  @Override
-  public InternalScanner preFlush(ObserverContext<RegionCoprocessorEnvironment> e, Store store,
-      InternalScanner scanner) throws IOException {
-    return scanner;
-  }
-
-  @Override
-  public void postFlush(ObserverContext<RegionCoprocessorEnvironment> e, Store store,
-      StoreFile resultFile) throws IOException {
-  }
-
-  @Override
-  public void preSplit(ObserverContext<RegionCoprocessorEnvironment> e) throws IOException {
-  }
-
-  @Override
-  public void preSplit(ObserverContext<RegionCoprocessorEnvironment> c,
-      byte[] splitRow) throws IOException {
-  }
-
-  @Override
-  public void preSplitBeforePONR(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      byte[] splitKey, List<Mutation> metaEntries) throws IOException {
-  }
-
-  @Override
-  public void preSplitAfterPONR(
-      ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void preRollBackSplit(ObserverContext<RegionCoprocessorEnvironment> ctx)
-      throws IOException {
-  }
-
-  @Override
-  public void postRollBackSplit(
-      ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void postCompleteSplit(
-      ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException {
-  }
-
-  @Override
-  public void postSplit(ObserverContext<RegionCoprocessorEnvironment> e, Region l, Region r)
-      throws IOException {
-  }
-
-  @Override
-  public void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final List<StoreFile> candidates) throws IOException { }
-
-  @Override
-  public void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final List<StoreFile> candidates, final CompactionRequest request)
-      throws IOException {
-    preCompactSelection(c, store, candidates);
-  }
-
-  @Override
-  public void postCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final ImmutableList<StoreFile> selected) { }
-
-  @Override
-  public void postCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final ImmutableList<StoreFile> selected, CompactionRequest request) {
-    postCompactSelection(c, store, selected);
-  }
-
-  @Override
-  public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e,
-      final Store store, final InternalScanner scanner, final ScanType scanType)
-      throws IOException {
-    return scanner;
-  }
-
-  @Override
-  public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e,
-      final Store store, final InternalScanner scanner, final ScanType scanType,
-      CompactionRequest request) throws IOException {
-    return preCompact(e, store, scanner, scanType);
-  }
-
-  @Override
-  public InternalScanner preCompactScannerOpen(
-      final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
-      List<? extends KeyValueScanner> scanners, final ScanType scanType, final long earliestPutTs,
-      final InternalScanner s) throws IOException {
-    return s;
-  }
-
-  @Override
-  public InternalScanner preCompactScannerOpen(
-      final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
-      List<? extends KeyValueScanner> scanners, final ScanType scanType, final long earliestPutTs,
-      final InternalScanner s, CompactionRequest request) throws IOException {
-    return preCompactScannerOpen(c, store, scanners, scanType, earliestPutTs, s);
-  }
-
-  @Override
-  public InternalScanner preCompactScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
-      Store store, List<? extends KeyValueScanner> scanners, ScanType scanType, long earliestPutTs,
-      InternalScanner s, CompactionRequest request, long readPoint) throws IOException {
-    return preCompactScannerOpen(c, store, scanners, scanType, earliestPutTs, s, request);
-  }
-
-  @Override
-  public void postCompact(ObserverContext<RegionCoprocessorEnvironment> e, final Store store,
-      final StoreFile resultFile) throws IOException {
-  }
-
-@Override
-  public void postCompact(ObserverContext<RegionCoprocessorEnvironment> e, final Store store,
-      final StoreFile resultFile, CompactionRequest request) throws IOException {
-    postCompact(e, store, resultFile);
-  }
-
-  @Override
-  public void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Get get, final List<Cell> results) throws IOException {
-  }
-
-  @Override
-  public void postGetOp(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Get get, final List<Cell> results) throws IOException {
-  }
-
-  @Override
-  public boolean preExists(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Get get, final boolean exists) throws IOException {
-    return exists;
-  }
-
-  @Override
-  public boolean postExists(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Get get, boolean exists) throws IOException {
-    return exists;
-  }
-
-  @Override
-  public void prePut(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Put put, final WALEdit edit, final Durability durability) throws IOException {
-  }
-
-  @Override
-  public void postPut(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Put put, final WALEdit edit, final Durability durability) throws IOException {
-  }
-
-  @Override
-  public void preDelete(final ObserverContext<RegionCoprocessorEnvironment> e, final Delete delete,
-      final WALEdit edit, final Durability durability) throws IOException {
-  }
-
-  @Override
-  public void prePrepareTimeStampForDeleteVersion(
-      final ObserverContext<RegionCoprocessorEnvironment> e, final Mutation delete,
-      final Cell cell, final byte[] byteNow, final Get get) throws IOException {
-  }
-
-  @Override
-  public void postDelete(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Delete delete, final WALEdit edit, final Durability durability)
-      throws IOException {
-  }
-
-  @Override
-  public void preBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
-  }
-
-  @Override
-  public void postBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
-  }
-
-  @Override
-  public void postBatchMutateIndispensably(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      MiniBatchOperationInProgress<Mutation> miniBatchOp, final boolean success) throws IOException {
-  }
-
-  @Override
-  public boolean preCheckAndPut(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte [] row, final byte [] family, final byte [] qualifier,
-      final CompareOp compareOp, final ByteArrayComparable comparator,
-      final Put put, final boolean result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public boolean preCheckAndPutAfterRowLock(
-      final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte[] row, final byte[] family, final byte[] qualifier, final CompareOp compareOp,
-      final ByteArrayComparable comparator, final Put put,
-      final boolean result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public boolean postCheckAndPut(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte [] row, final byte [] family, final byte [] qualifier,
-      final CompareOp compareOp, final ByteArrayComparable comparator,
-      final Put put, final boolean result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public boolean preCheckAndDelete(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte [] row, final byte [] family, final byte [] qualifier,
-      final CompareOp compareOp, final ByteArrayComparable comparator,
-      final Delete delete, final boolean result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public boolean preCheckAndDeleteAfterRowLock(
-      final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte[] row, final byte[] family, final byte[] qualifier, final CompareOp compareOp,
-      final ByteArrayComparable comparator, final Delete delete,
-      final boolean result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public boolean postCheckAndDelete(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte [] row, final byte [] family, final byte [] qualifier,
-      final CompareOp compareOp, final ByteArrayComparable comparator,
-      final Delete delete, final boolean result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public Result preAppend(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Append append) throws IOException {
-    return null;
-  }
-
-  @Override
-  public Result preAppendAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Append append) throws IOException {
-    return null;
-  }
-
-  @Override
-  public Result postAppend(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Append append, final Result result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public long preIncrementColumnValue(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte [] row, final byte [] family, final byte [] qualifier,
-      final long amount, final boolean writeToWAL) throws IOException {
-    return amount;
-  }
-
-  @Override
-  public long postIncrementColumnValue(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final byte [] row, final byte [] family, final byte [] qualifier,
-      final long amount, final boolean writeToWAL, long result)
-      throws IOException {
-    return result;
-  }
-
-  @Override
-  public Result preIncrement(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Increment increment) throws IOException {
-    return null;
-  }
-
-  @Override
-  public Result preIncrementAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Increment increment) throws IOException {
-    return null;
-  }
-
-  @Override
-  public Result postIncrement(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Increment increment, final Result result) throws IOException {
-    return result;
-  }
-
-  @Override
-  public RegionScanner preScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Scan scan, final RegionScanner s) throws IOException {
-    return s;
-  }
-
-  @Override
-  public KeyValueScanner preStoreScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final Scan scan, final NavigableSet<byte[]> targetCols,
-      final KeyValueScanner s) throws IOException {
-    return s;
-  }
-
-  @Override
-  public KeyValueScanner preStoreScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final Scan scan, final NavigableSet<byte[]> targetCols,
-      final KeyValueScanner s, final long readPt) throws IOException {
-    return preStoreScannerOpen(c, store, scan, targetCols, s);
-  }
-
-  @Override
-  public RegionScanner postScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final Scan scan, final RegionScanner s) throws IOException {
-    return s;
-  }
-
-  @Override
-  public boolean preScannerNext(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final InternalScanner s, final List<Result> results,
-      final int limit, final boolean hasMore) throws IOException {
-    return hasMore;
-  }
-
-  @Override
-  public boolean postScannerNext(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final InternalScanner s, final List<Result> results, final int limit,
-      final boolean hasMore) throws IOException {
-    return hasMore;
-  }
-
-  @Override
-  @Deprecated
-  public boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final InternalScanner s, final byte[] currentRow, final int offset, final short length,
-      final boolean hasMore) throws IOException {
-    return hasMore;
-  }
-
-  @Override
-  public boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final InternalScanner s, final Cell curRowCell, final boolean hasMore) throws IOException {
-    return postScannerFilterRow(e, s, curRowCell.getRowArray(), curRowCell.getRowOffset(),
-        curRowCell.getRowLength(), hasMore);
-  }
-
-  @Override
-  public void preScannerClose(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final InternalScanner s) throws IOException {
-  }
-
-  @Override
-  public void postScannerClose(final ObserverContext<RegionCoprocessorEnvironment> e,
-      final InternalScanner s) throws IOException {
-  }
-
-  @Override
-  public void preReplayWALs(ObserverContext<? extends RegionCoprocessorEnvironment> env,
-      HRegionInfo info, Path edits) throws IOException {
-  }
-
-  @Override
-  public void postReplayWALs(ObserverContext<? extends RegionCoprocessorEnvironment> env,
-      HRegionInfo info, Path edits) throws IOException {
-  }
-
-  /**
-   * Implementers should override this version of the method and leave the deprecated one as-is.
-   */
-  @Override
-  public void preWALRestore(ObserverContext<? extends RegionCoprocessorEnvironment> env,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {
-  }
-
-  /**
-   * Implementers should override this version of the method and leave the deprecated one as-is.
-   */
-  @Override
-  public void postWALRestore(ObserverContext<? extends RegionCoprocessorEnvironment> env,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {
-  }
-
-  @Override
-  public void preBulkLoadHFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-    List<Pair<byte[], String>> familyPaths) throws IOException {
-  }
-
-  @Override
-  public void preCommitStoreFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      final byte[] family, final List<Pair<Path, Path>> pairs) throws IOException {
-  }
-
-  @Override
-  public void postCommitStoreFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      final byte[] family, Path srcPath, Path dstPath) throws IOException {
-  }
-
-  @Override
-  public boolean postBulkLoadHFile(ObserverContext<RegionCoprocessorEnvironment> ctx,
-    List<Pair<byte[], String>> stagingFamilyPaths, Map<byte[], List<Path>> finalPaths,
-    boolean hasLoaded) throws IOException {
-    return postBulkLoadHFile(ctx, stagingFamilyPaths, hasLoaded);
-  }
-
-  @Override
-  public boolean postBulkLoadHFile(ObserverContext<RegionCoprocessorEnvironment> ctx,
-    List<Pair<byte[], String>> stagingFamilyPaths, boolean hasLoaded) throws IOException {
-    return hasLoaded;
-  }
-
-  @Override
-  public StoreFileReader preStoreFileReaderOpen(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      FileSystem fs, Path p, FSDataInputStreamWrapper in, long size, CacheConfig cacheConf,
-      Reference r, StoreFileReader reader) throws IOException {
-    return reader;
-  }
-
-  @Override
-  public StoreFileReader postStoreFileReaderOpen(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      FileSystem fs, Path p, FSDataInputStreamWrapper in, long size, CacheConfig cacheConf,
-      Reference r, StoreFileReader reader) throws IOException {
-    return reader;
-  }
-
-  @Override
-  public Cell postMutationBeforeWAL(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      MutationType opType, Mutation mutation, Cell oldCell, Cell newCell) throws IOException {
-    return newCell;
-  }
-
-  @Override
-  public void postStartRegionOperation(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Operation op) throws IOException {
-  }
-
-  @Override
-  public void postCloseRegionOperation(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Operation op) throws IOException {
-  }
-
-  @Override
-  public DeleteTracker postInstantiateDeleteTracker(
-      final ObserverContext<RegionCoprocessorEnvironment> ctx, DeleteTracker delTracker)
-      throws IOException {
-    return delTracker;
-  }
-}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionServerObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionServerObserver.java
deleted file mode 100644
index 7308d6b..0000000
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionServerObserver.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.hadoop.hbase.coprocessor;
-
-import java.io.IOException;
-import java.util.List;
-
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.classification.InterfaceStability;
-import org.apache.hadoop.hbase.CellScanner;
-import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HBaseInterfaceAudience;
-import org.apache.hadoop.hbase.client.Mutation;
-import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.WALEntry;
-import org.apache.hadoop.hbase.regionserver.Region;
-import org.apache.hadoop.hbase.replication.ReplicationEndpoint;
-
-/**
- * An abstract class that implements RegionServerObserver.
- * By extending it, you can create your own region server observer without
- * overriding all abstract methods of RegionServerObserver.
- */
-@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
-@InterfaceStability.Evolving
-public class BaseRegionServerObserver implements RegionServerObserver {
-
-  @Override
-  public void preStopRegionServer(ObserverContext<RegionServerCoprocessorEnvironment> env)
-      throws IOException { }
-
-  @Override
-  public void start(CoprocessorEnvironment env) throws IOException { }
-
-  @Override
-  public void stop(CoprocessorEnvironment env) throws IOException { }
-
-  @Override
-  public void preMerge(ObserverContext<RegionServerCoprocessorEnvironment> ctx, Region regionA,
-      Region regionB) throws IOException { }
-
-  @Override
-  public void postMerge(ObserverContext<RegionServerCoprocessorEnvironment> c, Region regionA,
-      Region regionB, Region mergedRegion) throws IOException { }
-
-  @Override
-  public void preMergeCommit(ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      Region regionA, Region regionB, List<Mutation> metaEntries) throws IOException { }
-
-  @Override
-  public void postMergeCommit(ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      Region regionA, Region regionB, Region mergedRegion) throws IOException { }
-
-  @Override
-  public void preRollBackMerge(ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      Region regionA, Region regionB) throws IOException { }
-
-  @Override
-  public void postRollBackMerge(ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      Region regionA, Region regionB) throws IOException { }
-
-  @Override
-  public void preRollWALWriterRequest(ObserverContext<RegionServerCoprocessorEnvironment> ctx)
-      throws IOException { }
-
-  @Override
-  public void postRollWALWriterRequest(ObserverContext<RegionServerCoprocessorEnvironment> ctx)
-      throws IOException { }
-
-  @Override
-  public ReplicationEndpoint postCreateReplicationEndPoint(
-      ObserverContext<RegionServerCoprocessorEnvironment> ctx, ReplicationEndpoint endpoint) {
-    return endpoint;
-  }
-
-  @Override
-  public void preReplicateLogEntries(ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      List<WALEntry> entries, CellScanner cells) throws IOException { }
-
-  @Override
-  public void postReplicateLogEntries(ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      List<WALEntry> entries, CellScanner cells) throws IOException { }
-}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseWALObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseWALObserver.java
deleted file mode 100644
index 8507db7..0000000
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseWALObserver.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.hbase.coprocessor;
-
-import java.io.IOException;
-
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HBaseInterfaceAudience;
-import org.apache.hadoop.hbase.HRegionInfo;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.classification.InterfaceStability;
-import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
-import org.apache.hadoop.hbase.wal.WALKey;
-
-/**
- * An abstract class that implements WALObserver.
- * By extending it, you can create your own WAL observer without
- * overriding all abstract methods of WALObserver.
- */
-@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
-@InterfaceStability.Evolving
-public class BaseWALObserver implements WALObserver {
-  @Override
-  public void start(CoprocessorEnvironment e) throws IOException { }
-
-  @Override
-  public void stop(CoprocessorEnvironment e) throws IOException { }
-
-  /**
-   * Implementers should override this method and leave the deprecated version as-is.
-   */
-  @Override
-  public boolean preWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {
-    return false;
-  }
-
-  /**
-   * Implementers should override this method and leave the deprecated version as-is.
-   */
-  @Override
-  public void postWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {}
-
-  @Override
-  public void preWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      Path oldPath, Path newPath) throws IOException { }
-
-  @Override
-  public void postWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      Path oldPath, Path newPath) throws IOException { }
-}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java
index 20910be..071ba28 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java
@@ -40,8 +40,8 @@ public interface BulkLoadObserver extends Coprocessor {
       * @param ctx the environment to interact with the framework and master
       * @throws IOException
       */
-    void prePrepareBulkLoad(ObserverContext<RegionCoprocessorEnvironment> ctx,
-                            PrepareBulkLoadRequest request) throws IOException;
+    default void prePrepareBulkLoad(ObserverContext<RegionCoprocessorEnvironment> ctx,
+        PrepareBulkLoadRequest request) throws IOException {}
 
     /**
       * Called as part of SecureBulkLoadEndpoint.cleanupBulkLoad() RPC call.
@@ -49,6 +49,6 @@ public interface BulkLoadObserver extends Coprocessor {
       * @param ctx the environment to interact with the framework and master
       * @throws IOException
       */
-    void preCleanupBulkLoad(ObserverContext<RegionCoprocessorEnvironment> ctx,
-                            CleanupBulkLoadRequest request) throws IOException;
+    default void preCleanupBulkLoad(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      CleanupBulkLoadRequest request) throws IOException {}
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
index 1076437..359926a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
@@ -46,12 +46,12 @@ public interface EndpointObserver extends Coprocessor {
    * @param ctx the environment provided by the region server
    * @param service the endpoint service
    * @param methodName the invoked service method
-   * @param request the request message
    * @return the possibly modified message
-   * @throws IOException
    */
-  Message preEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx, Service service,
-      String methodName, Message request) throws IOException;
+  default Message preEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Service service, String methodName, Message request) throws IOException {
+    return request;
+  }
 
   /**
    * Called after an Endpoint service method is invoked. The response message can be
@@ -59,11 +59,8 @@ public interface EndpointObserver extends Coprocessor {
    * @param ctx the environment provided by the region server
    * @param service the endpoint service
    * @param methodName the invoked service method
-   * @param request the request message
-   * @param responseBuilder the response message builder
-   * @throws IOException
    */
-  void postEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx, Service service,
-      String methodName, Message request, Message.Builder responseBuilder) throws IOException;
-
+  default void postEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Service service, String methodName, Message request, Message.Builder responseBuilder)
+      throws IOException {}
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
index 1d0c467d..4822554 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
@@ -24,6 +24,7 @@ import java.util.List;
 import java.util.Set;
 
 import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
@@ -50,11 +51,14 @@ import org.apache.hadoop.hbase.util.Address;
 /**
  * Defines coprocessor hooks for interacting with operations on the
  * {@link org.apache.hadoop.hbase.master.HMaster} process.
+ *
+ * Since most implementations will be interested in only a subset of hooks, this class uses
+ * 'default' empty functions (except few which are non-empty) to avoid redundant empty
+ * implementations.
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public interface MasterObserver extends Coprocessor {
-
   /**
    * Called before a new table is created by
    * {@link org.apache.hadoop.hbase.master.HMaster}.  Called as part of create
@@ -63,10 +67,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param desc the HTableDescriptor for the table
    * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
    */
-  void preCreateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException;
+  default void preCreateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {}
 
   /**
    * Called after the createTable operation has been requested.  Called as part
@@ -74,10 +77,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param desc the HTableDescriptor for the table
    * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
    */
-  void postCreateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HTableDescriptor desc, HRegionInfo[] regions) throws IOException;
+  default void postCreateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {}
 
   /**
    * Called before a new table is created by
@@ -87,14 +89,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param desc the HTableDescriptor for the table
    * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #preCreateTableAction(ObserverContext, HTableDescriptor, HRegionInfo[])}.
    */
   @Deprecated
-  void preCreateTableHandler(final ObserverContext<MasterCoprocessorEnvironment>
-      ctx, HTableDescriptor desc, HRegionInfo[] regions) throws IOException;
+  default void preCreateTableHandler(final ObserverContext<MasterCoprocessorEnvironment>
+      ctx, HTableDescriptor desc, HRegionInfo[] regions) throws IOException {}
 
   /**
    * Called after the createTable operation has been requested.  Called as part
@@ -103,14 +104,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param desc the HTableDescriptor for the table
    * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *   (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *   Use {@link #postCompletedCreateTableAction(ObserverContext, HTableDescriptor, HRegionInfo[])}
    */
   @Deprecated
-  void postCreateTableHandler(final ObserverContext<MasterCoprocessorEnvironment>
-  ctx, HTableDescriptor desc, HRegionInfo[] regions) throws IOException;
+  default void postCreateTableHandler(final ObserverContext<MasterCoprocessorEnvironment>
+  ctx, HTableDescriptor desc, HRegionInfo[] regions) throws IOException {}
 
   /**
    * Called before a new table is created by
@@ -125,12 +125,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param desc the HTableDescriptor for the table
    * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
    */
-  void preCreateTableAction(
+  default void preCreateTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException;
+      final HRegionInfo[] regions) throws IOException {}
 
   /**
    * Called after the createTable operation has been requested.  Called as part
@@ -144,12 +143,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param desc the HTableDescriptor for the table
    * @param regions the initial regions created for the table
-   * @throws IOException if something went wrong
    */
-  void postCompletedCreateTableAction(
+  default void postCompletedCreateTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HTableDescriptor desc,
-      final HRegionInfo[] regions) throws IOException;
+      final HRegionInfo[] regions) throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a
@@ -157,20 +155,18 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preDeleteTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException;
+  default void preDeleteTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName) throws IOException {}
 
   /**
    * Called after the deleteTable operation has been requested.  Called as part
    * of delete table RPC call.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postDeleteTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException;
+  default void postDeleteTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName) throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a
@@ -179,15 +175,14 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #preDeleteTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void preDeleteTableHandler(
+  default void preDeleteTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after {@link org.apache.hadoop.hbase.master.HMaster} deletes a
@@ -196,15 +191,14 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #postCompletedDeleteTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void postDeleteTableHandler(
+  default void postDeleteTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a
@@ -218,11 +212,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preDeleteTableAction(
+  default void preDeleteTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after {@link org.apache.hadoop.hbase.master.HMaster} deletes a
@@ -236,11 +229,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postCompletedDeleteTableAction(
+  default void postCompletedDeleteTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} truncates a
@@ -248,10 +240,9 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preTruncateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException;
+  default void preTruncateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName) throws IOException {}
 
   /**
    * Called after the truncateTable operation has been requested.  Called as part
@@ -260,10 +251,9 @@ public interface MasterObserver extends Coprocessor {
    * truncate operation is terminated.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postTruncateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName) throws IOException;
+  default void postTruncateTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName) throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} truncates a
@@ -272,15 +262,14 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #preTruncateTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void preTruncateTableHandler(
+  default void preTruncateTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after {@link org.apache.hadoop.hbase.master.HMaster} truncates a
@@ -289,15 +278,14 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #postCompletedTruncateTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void postTruncateTableHandler(
+  default void postTruncateTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} truncates a
@@ -311,11 +299,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preTruncateTableAction(
+  default void preTruncateTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after {@link org.apache.hadoop.hbase.master.HMaster} truncates a
@@ -329,11 +316,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postCompletedTruncateTableAction(
+  default void postCompletedTruncateTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, final TableName tableName)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called prior to modifying a table's properties.  Called as part of modify
@@ -342,10 +328,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
    */
-  void preModifyTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, HTableDescriptor htd) throws IOException;
+  default void preModifyTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, HTableDescriptor htd) throws IOException {}
 
   /**
    * Called after the modifyTable operation has been requested.  Called as part
@@ -353,10 +338,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
    */
-  void postModifyTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, HTableDescriptor htd) throws IOException;
+  default void postModifyTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, HTableDescriptor htd) throws IOException {}
 
   /**
    * Called prior to modifying a table's properties.  Called as part of modify
@@ -365,15 +349,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #preModifyTableAction(ObserverContext, TableName, HTableDescriptor)}.
    */
   @Deprecated
-  void preModifyTableHandler(
+  default void preModifyTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, HTableDescriptor htd) throws IOException;
+      final TableName tableName, HTableDescriptor htd) throws IOException {}
 
   /**
    * Called after to modifying a table's properties.  Called as part of modify
@@ -382,15 +365,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *     Use {@link #postCompletedModifyTableAction(ObserverContext, TableName, HTableDescriptor)}.
    */
   @Deprecated
-  void postModifyTableHandler(
+  default void postModifyTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, HTableDescriptor htd) throws IOException;
+      final TableName tableName, HTableDescriptor htd) throws IOException {}
 
   /**
    * Called prior to modifying a table's properties.  Called as part of modify
@@ -404,12 +386,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
    */
-  void preModifyTableAction(
+  default void preModifyTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final TableName tableName,
-      final HTableDescriptor htd) throws IOException;
+      final HTableDescriptor htd) throws IOException {}
 
   /**
    * Called after to modifying a table's properties.  Called as part of modify
@@ -423,12 +404,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param htd the HTableDescriptor
-   * @throws IOException if something went wrong
    */
-  void postCompletedModifyTableAction(
+  default void postCompletedModifyTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final TableName tableName,
-      final HTableDescriptor htd) throws IOException;
+      final HTableDescriptor htd) throws IOException {}
 
   /**
    * Called prior to adding a new column family to the table.  Called as part of
@@ -436,14 +416,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #preAddColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void preAddColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void preAddColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to adding a new column family to the table.  Called as part of
@@ -456,10 +435,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void preAddColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void preAddColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the new column family has been created.  Called as part of
@@ -467,14 +445,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #postAddColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void postAddColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void postAddColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the new column family has been created.  Called as part of
@@ -487,10 +464,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void postAddColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void postAddColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to adding a new column family to the table.  Called as part of
@@ -498,15 +474,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *          (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>). Use
    *          {@link #preAddColumnFamilyAction(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void preAddColumnHandler(
+  default void preAddColumnHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to adding a new column family to the table.  Called as part of
@@ -519,12 +494,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void preAddColumnFamilyAction(
+  default void preAddColumnFamilyAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException;
+      final HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the new column family has been created.  Called as part of
@@ -532,15 +506,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>). Use
    *     {@link #postCompletedAddColumnFamilyAction(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void postAddColumnHandler(
+  default void postAddColumnHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the new column family has been created.  Called as part of
@@ -553,12 +526,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void postCompletedAddColumnFamilyAction(
+  default void postCompletedAddColumnFamilyAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException;
+      final HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to modifying a column family's attributes.  Called as part of
@@ -566,14 +538,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #preModifyColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void preModifyColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void preModifyColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to modifying a column family's attributes.  Called as part of
@@ -586,10 +557,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void preModifyColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void preModifyColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been updated.  Called as part of modify
@@ -597,14 +567,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #postModifyColumnFamily(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void postModifyColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void postModifyColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been updated.  Called as part of modify
@@ -617,10 +586,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void postModifyColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+  default void postModifyColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to modifying a column family's attributes.  Called as part of
@@ -628,15 +596,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *     Use {@link #preModifyColumnFamilyAction(ObserverContext, TableName, HColumnDescriptor)}.
    */
   @Deprecated
-  void preModifyColumnHandler(
+  default void preModifyColumnHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to modifying a column family's attributes.  Called as part of
@@ -649,12 +616,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void preModifyColumnFamilyAction(
+  default void preModifyColumnFamilyAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException;
+      final HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been updated.  Called as part of modify
@@ -662,15 +628,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *   (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>). Use
    *   {@link #postCompletedModifyColumnFamilyAction(ObserverContext,TableName,HColumnDescriptor)}.
    */
   @Deprecated
-  void postModifyColumnHandler(
+  default void postModifyColumnHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      TableName tableName, HColumnDescriptor columnFamily) throws IOException;
+      TableName tableName, HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been updated.  Called as part of modify
@@ -683,12 +648,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the HColumnDescriptor
-   * @throws IOException if something went wrong
    */
-  void postCompletedModifyColumnFamilyAction(
+  default void postCompletedModifyColumnFamilyAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final TableName tableName,
-      final HColumnDescriptor columnFamily) throws IOException;
+      final HColumnDescriptor columnFamily) throws IOException {}
 
   /**
    * Called prior to deleting the entire column family.  Called as part of
@@ -696,14 +660,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #preDeleteColumnFamily(ObserverContext, TableName, byte[])}.
    */
   @Deprecated
-  void preDeleteColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+  default void preDeleteColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called prior to deleting the entire column family.  Called as part of
@@ -716,10 +679,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column
-   * @throws IOException if something went wrong
    */
-  void preDeleteColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+  default void preDeleteColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been deleted.  Called as part of delete
@@ -727,14 +689,13 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #postDeleteColumnFamily(ObserverContext, TableName, byte[])}.
    */
   @Deprecated
-  void postDeleteColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+  default void postDeleteColumn(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been deleted.  Called as part of delete
@@ -747,10 +708,9 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    */
-  void postDeleteColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+  default void postDeleteColumnFamily(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called prior to deleting the entire column family.  Called as part of
@@ -758,15 +718,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *             Use {@link #preDeleteColumnFamilyAction(ObserverContext, TableName, byte[])}.
    */
   @Deprecated
-  void preDeleteColumnHandler(
+  default void preDeleteColumnHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called prior to deleting the entire column family.  Called as part of
@@ -779,11 +738,10 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    */
-  void preDeleteColumnFamilyAction(
+  default void preDeleteColumnFamilyAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been deleted.  Called as part of
@@ -791,15 +749,14 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *         (<a href="https://issues.apache.org/jira/browse/HBASE-13645">HBASE-13645</a>).
    *         Use {@link #postCompletedDeleteColumnFamilyAction(ObserverContext, TableName, byte[])}.
    */
   @Deprecated
-  void postDeleteColumnHandler(
+  default void postDeleteColumnHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called after the column family has been deleted.  Called as part of
@@ -812,31 +769,28 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param columnFamily the column family
-   * @throws IOException if something went wrong
    */
-  void postCompletedDeleteColumnFamilyAction(
+  default void postCompletedDeleteColumnFamilyAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final byte[] columnFamily) throws IOException;
+      final TableName tableName, final byte[] columnFamily) throws IOException {}
 
   /**
    * Called prior to enabling a table.  Called as part of enable table RPC call.
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preEnableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+  default void preEnableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the enableTable operation has been requested.  Called as part
    * of enable table RPC call.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postEnableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+  default void postEnableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName) throws IOException {}
 
   /**
    * Called prior to enabling a table.  Called as part of enable table handler
@@ -844,30 +798,28 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #preEnableTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void preEnableTableHandler(
+  default void preEnableTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the enableTable operation has been requested.  Called as part
    * of enable table handler and it is async to the enable table RPC call.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #postCompletedEnableTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void postEnableTableHandler(
+  default void postEnableTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called prior to enabling a table.  Called as part of enable table procedure
@@ -880,11 +832,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preEnableTableAction(
+  default void preEnableTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the enableTable operation has been requested.  Called as part
@@ -896,11 +847,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postCompletedEnableTableAction(
+  default void postCompletedEnableTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called prior to disabling a table.  Called as part of disable table RPC
@@ -908,20 +858,18 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preDisableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+  default void preDisableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the disableTable operation has been requested.  Called as part
    * of disable table RPC call.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postDisableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+  default void postDisableTable(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName) throws IOException {}
 
   /**
    * Called prior to disabling a table.  Called as part of disable table handler
@@ -929,30 +877,28 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #preDisableTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void preDisableTableHandler(
+  default void preDisableTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the disableTable operation has been requested.  Called as part
    * of disable table handler and it is asyn to the disable table RPC call.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
    *     (<a href="https://issues.apache.org/jira/browse/HBASE-15575">HBASE-15575</a>).
    *     Use {@link #postCompletedDisableTableAction(ObserverContext, TableName)}.
    */
   @Deprecated
-  void postDisableTableHandler(
+  default void postDisableTableHandler(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called prior to disabling a table.  Called as part of disable table procedure
@@ -965,11 +911,10 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preDisableTableAction(
+  default void preDisableTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the disableTable operation has been requested.  Called as part
@@ -981,49 +926,44 @@ public interface MasterObserver extends Coprocessor {
    *
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postCompletedDisableTableAction(
+  default void postCompletedDisableTableAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+      final TableName tableName) throws IOException {}
 
   /**
    * Called before a abortProcedure request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param procEnv procedure executor
    * @param procId the Id of the procedure
-   * @throws IOException if something went wrong
    */
-  void preAbortProcedure(
+  default void preAbortProcedure(
       ObserverContext<MasterCoprocessorEnvironment> ctx,
       final ProcedureExecutor<MasterProcedureEnv> procEnv,
-      final long procId) throws IOException;
+      final long procId) throws IOException {}
 
   /**
    * Called after a abortProcedure request has been processed.
    * @param ctx the environment to interact with the framework and master
-   * @throws IOException if something went wrong
    */
-  void postAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void postAbortProcedure(ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Called before a listProcedures request has been processed.
    * @param ctx the environment to interact with the framework and master
-   * @throws IOException if something went wrong
    */
-  void preListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preListProcedures(ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Called after a listProcedures request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param procInfoList the list of procedures about to be returned
-   * @throws IOException if something went wrong
    */
-  void postListProcedures(
+  default void postListProcedures(
       ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<ProcedureInfo> procInfoList) throws IOException;
+      List<ProcedureInfo> procInfoList) throws IOException {}
 
   /**
    * Called prior to moving a given region from one region server to another.
@@ -1032,10 +972,10 @@ public interface MasterObserver extends Coprocessor {
    * @param srcServer the source ServerName
    * @param destServer the destination ServerName
    */
-  void preMove(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void preMove(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HRegionInfo region, final ServerName srcServer,
       final ServerName destServer)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called after the region move has been requested.
@@ -1044,26 +984,26 @@ public interface MasterObserver extends Coprocessor {
    * @param srcServer the source ServerName
    * @param destServer the destination ServerName
    */
-  void postMove(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void postMove(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HRegionInfo region, final ServerName srcServer,
       final ServerName destServer)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called prior to assigning a specific region.
    * @param ctx the environment to interact with the framework and master
    * @param regionInfo the regionInfo of the region
    */
-  void preAssign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo regionInfo) throws IOException;
+  default void preAssign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final HRegionInfo regionInfo) throws IOException {}
 
   /**
    * Called after the region assignment has been requested.
    * @param ctx the environment to interact with the framework and master
    * @param regionInfo the regionInfo of the region
    */
-  void postAssign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo regionInfo) throws IOException;
+  default void postAssign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final HRegionInfo regionInfo) throws IOException {}
 
   /**
    * Called prior to unassigning a given region.
@@ -1071,8 +1011,8 @@ public interface MasterObserver extends Coprocessor {
    * @param regionInfo
    * @param force whether to force unassignment or not
    */
-  void preUnassign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo regionInfo, final boolean force) throws IOException;
+  default void preUnassign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final HRegionInfo regionInfo, final boolean force) throws IOException {}
 
   /**
    * Called after the region unassignment has been requested.
@@ -1080,8 +1020,8 @@ public interface MasterObserver extends Coprocessor {
    * @param regionInfo
    * @param force whether to force unassignment or not
    */
-  void postUnassign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo regionInfo, final boolean force) throws IOException;
+  default void postUnassign(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final HRegionInfo regionInfo, final boolean force) throws IOException {}
 
   /**
    * Called prior to marking a given region as offline. <code>ctx.bypass()</code> will not have any
@@ -1089,24 +1029,24 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param regionInfo
    */
-  void preRegionOffline(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo regionInfo) throws IOException;
+  default void preRegionOffline(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final HRegionInfo regionInfo) throws IOException {}
 
   /**
    * Called after the region has been marked offline.
    * @param ctx the environment to interact with the framework and master
    * @param regionInfo
    */
-  void postRegionOffline(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo regionInfo) throws IOException;
+  default void postRegionOffline(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final HRegionInfo regionInfo) throws IOException {}
 
   /**
    * Called prior to requesting rebalancing of the cluster regions, though after
    * the initial checks for regions in transition and the balance switch flag.
    * @param ctx the environment to interact with the framework and master
    */
-  void preBalance(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preBalance(final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Called after the balancing plan has been submitted.
@@ -1115,8 +1055,8 @@ public interface MasterObserver extends Coprocessor {
    * as for the final destination for the underlying region but may not represent the
    * final state of assignment
    */
-  void postBalance(final ObserverContext<MasterCoprocessorEnvironment> ctx, List<RegionPlan> plans)
-      throws IOException;
+  default void postBalance(final ObserverContext<MasterCoprocessorEnvironment> ctx, List<RegionPlan> plans)
+      throws IOException {}
 
   /**
    * Called prior to setting split / merge switch
@@ -1124,8 +1064,10 @@ public interface MasterObserver extends Coprocessor {
    * @param newValue the new value submitted in the call
    * @param switchType type of switch
    */
-  boolean preSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException;
+  default boolean preSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final boolean newValue, final MasterSwitchType switchType) throws IOException {
+    return false;
+  }
 
   /**
    * Called after setting split / merge switch
@@ -1133,8 +1075,8 @@ public interface MasterObserver extends Coprocessor {
    * @param newValue the new value submitted in the call
    * @param switchType type of switch
    */
-  void postSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue, final MasterSwitchType switchType) throws IOException;
+  default void postSetSplitOrMergeEnabled(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final boolean newValue, final MasterSwitchType switchType) throws IOException {}
 
   /**
    * Called before the split region procedure is called.
@@ -1143,11 +1085,11 @@ public interface MasterObserver extends Coprocessor {
    * @param splitRow split point
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preSplitRegion(
+  default void preSplitRegion(
       final ObserverContext<MasterCoprocessorEnvironment> c,
       final TableName tableName,
       final byte[] splitRow)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before the region is split.
@@ -1156,11 +1098,11 @@ public interface MasterObserver extends Coprocessor {
    * @param splitRow split point
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preSplitRegionAction(
+  default void preSplitRegionAction(
       final ObserverContext<MasterCoprocessorEnvironment> c,
       final TableName tableName,
       final byte[] splitRow)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after the region is split.
@@ -1169,10 +1111,10 @@ public interface MasterObserver extends Coprocessor {
    * @param regionInfoB the right daughter region
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postCompletedSplitRegionAction(
+  default void postCompletedSplitRegionAction(
       final ObserverContext<MasterCoprocessorEnvironment> c,
       final HRegionInfo regionInfoA,
-      final HRegionInfo regionInfoB) throws IOException;
+      final HRegionInfo regionInfoB) throws IOException {}
 
   /**
    * This will be called before PONR step as part of split transaction. Calling
@@ -1180,12 +1122,11 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param splitKey
    * @param metaEntries
-   * @throws IOException
    */
-  void preSplitRegionBeforePONRAction(
+  default void preSplitRegionBeforePONRAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final byte[] splitKey,
-      final List<Mutation> metaEntries) throws IOException;
+      final List<Mutation> metaEntries) throws IOException {}
 
 
   /**
@@ -1193,86 +1134,76 @@ public interface MasterObserver extends Coprocessor {
    * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no
    * effect in this hook.
    * @param ctx the environment to interact with the framework and master
-   * @throws IOException
    */
-  void preSplitRegionAfterPONRAction(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preSplitRegionAfterPONRAction(
+      final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * This will be called after the roll back of the split region is completed
    * @param ctx the environment to interact with the framework and master
-   * @throws IOException
    */
-  void postRollBackSplitRegionAction(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void postRollBackSplitRegionAction(
+      final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Called before the regions merge.
    * Call {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} to skip the merge.
    * @throws IOException if an error occurred on the coprocessor
-   * @param ctx
-   * @param regionsToMerge
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and master
    */
-  void preMergeRegionsAction(
+  default void preMergeRegionsAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException;
+      final HRegionInfo[] regionsToMerge) throws IOException {}
 
   /**
    * called after the regions merge.
-   * @param c
-   * @param regionsToMerge
-   * @param mergedRegion
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and master
    */
-  void postCompletedMergeRegionsAction(
-      final ObserverContext<MasterCoprocessorEnvironment> c,
+  default void postCompletedMergeRegionsAction(
+      final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException;
+      final HRegionInfo mergedRegion) throws IOException {}
 
   /**
    * This will be called before PONR step as part of regions merge transaction. Calling
    * {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} rollback the merge
-   * @param ctx
-   * @param regionsToMerge
+   * @param ctx the environment to interact with the framework and master
    * @param metaEntries mutations to execute on hbase:meta atomically with regions merge updates.
    *        Any puts or deletes to execute on hbase:meta can be added to the mutations.
-   * @throws IOException
    */
-  void preMergeRegionsCommitAction(
+  default void preMergeRegionsCommitAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HRegionInfo[] regionsToMerge,
-      @MetaMutationAnnotation List<Mutation> metaEntries) throws IOException;
+      @MetaMutationAnnotation List<Mutation> metaEntries) throws IOException {}
 
   /**
    * This will be called after PONR step as part of regions merge transaction.
-   * @param ctx
-   * @param regionsToMerge
-   * @param mergedRegion
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and master
    */
-  void postMergeRegionsCommitAction(
+  default void postMergeRegionsCommitAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final HRegionInfo[] regionsToMerge,
-      final HRegionInfo mergedRegion) throws IOException;
+      final HRegionInfo mergedRegion) throws IOException {}
 
   /**
    * This will be called after the roll back of the regions merge.
-   * @param ctx
-   * @param regionsToMerge
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and master
    */
-  void postRollBackMergeRegionsAction(
+  default void postRollBackMergeRegionsAction(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException;
+      final HRegionInfo[] regionsToMerge) throws IOException {}
 
   /**
    * Called prior to modifying the flag used to enable/disable region balancing.
    * @param ctx the coprocessor instance's environment
    * @param newValue the new flag value submitted in the call
    */
-  boolean preBalanceSwitch(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean newValue) throws IOException;
+  default boolean preBalanceSwitch(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final boolean newValue) throws IOException {
+    return newValue;
+  }
 
   /**
    * Called after the flag to enable/disable balancing has changed.
@@ -1280,38 +1211,38 @@ public interface MasterObserver extends Coprocessor {
    * @param oldValue the previously set balanceSwitch value
    * @param newValue the newly set balanceSwitch value
    */
-  void postBalanceSwitch(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final boolean oldValue, final boolean newValue) throws IOException;
+  default void postBalanceSwitch(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final boolean oldValue, final boolean newValue) throws IOException {}
 
   /**
    * Called prior to shutting down the full HBase cluster, including this
    * {@link org.apache.hadoop.hbase.master.HMaster} process.
    */
-  void preShutdown(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preShutdown(final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
 
   /**
    * Called immediately prior to stopping this
    * {@link org.apache.hadoop.hbase.master.HMaster} process.
    */
-  void preStopMaster(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preStopMaster(final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Called immediately after an active master instance has completed
    * initialization.  Will not be called on standby master instances unless
    * they take over the active role.
    */
-  void postStartMaster(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void postStartMaster(final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Call before the master initialization is set to true.
    * {@link org.apache.hadoop.hbase.master.HMaster} process.
    */
-  void preMasterInitialization(final ObserverContext<MasterCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preMasterInitialization(final ObserverContext<MasterCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * Called before a new snapshot is taken.
@@ -1320,11 +1251,10 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor for the snapshot
    * @param hTableDescriptor the hTableDescriptor of the table to snapshot
-   * @throws IOException if something went wrong
    */
-  void preSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void preSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after the snapshot operation has been requested.
@@ -1332,31 +1262,28 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor for the snapshot
    * @param hTableDescriptor the hTableDescriptor of the table to snapshot
-   * @throws IOException if something went wrong
    */
-  void postSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void postSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before listSnapshots request has been processed.
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor of the snapshot to list
-   * @throws IOException if something went wrong
    */
-  void preListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException;
+  default void preListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final SnapshotDescription snapshot) throws IOException {}
 
   /**
    * Called after listSnapshots request has been processed.
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor of the snapshot to list
-   * @throws IOException if something went wrong
    */
-  void postListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException;
+  default void postListSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final SnapshotDescription snapshot) throws IOException {}
 
   /**
    * Called before a snapshot is cloned.
@@ -1365,11 +1292,10 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor for the snapshot
    * @param hTableDescriptor the hTableDescriptor of the table to create
-   * @throws IOException if something went wrong
    */
-  void preCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void preCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after a snapshot clone operation has been requested.
@@ -1377,11 +1303,10 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor for the snapshot
    * @param hTableDescriptor the hTableDescriptor of the table to create
-   * @throws IOException if something went wrong
    */
-  void postCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void postCloneSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before a snapshot is restored.
@@ -1390,11 +1315,10 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor for the snapshot
    * @param hTableDescriptor the hTableDescriptor of the table to restore
-   * @throws IOException if something went wrong
    */
-  void preRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void preRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called after a snapshot restore operation has been requested.
@@ -1402,11 +1326,10 @@ public interface MasterObserver extends Coprocessor {
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor for the snapshot
    * @param hTableDescriptor the hTableDescriptor of the table to restore
-   * @throws IOException if something went wrong
    */
-  void postRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void postRestoreSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
       final SnapshotDescription snapshot, final HTableDescriptor hTableDescriptor)
-      throws IOException;
+      throws IOException {}
 
   /**
    * Called before a snapshot is deleted.
@@ -1414,20 +1337,18 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor of the snapshot to delete
-   * @throws IOException if something went wrong
    */
-  void preDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException;
+  default void preDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final SnapshotDescription snapshot) throws IOException {}
 
   /**
    * Called after the delete snapshot operation has been requested.
    * Called as part of deleteSnapshot RPC call.
    * @param ctx the environment to interact with the framework and master
    * @param snapshot the SnapshotDescriptor of the snapshot to delete
-   * @throws IOException if something went wrong
    */
-  void postDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final SnapshotDescription snapshot) throws IOException;
+  default void postDeleteSnapshot(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final SnapshotDescription snapshot) throws IOException {}
 
   /**
    * Called before a getTableDescriptors request has been processed.
@@ -1435,11 +1356,10 @@ public interface MasterObserver extends Coprocessor {
    * @param tableNamesList the list of table names, or null if querying for all
    * @param descriptors an empty list, can be filled with what to return if bypassing
    * @param regex regular expression used for filtering the table names
-   * @throws IOException if something went wrong
    */
-  void preGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void preGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
       List<TableName> tableNamesList, List<HTableDescriptor> descriptors,
-      String regex) throws IOException;
+      String regex) throws IOException {}
 
   /**
    * Called after a getTableDescriptors request has been processed.
@@ -1447,31 +1367,28 @@ public interface MasterObserver extends Coprocessor {
    * @param tableNamesList the list of table names, or null if querying for all
    * @param descriptors the list of descriptors about to be returned
    * @param regex regular expression used for filtering the table names
-   * @throws IOException if something went wrong
    */
-  void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
+  default void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
       List<TableName> tableNamesList, List<HTableDescriptor> descriptors,
-      String regex) throws IOException;
+      String regex) throws IOException {}
 
   /**
    * Called before a getTableNames request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param descriptors an empty list, can be filled with what to return if bypassing
    * @param regex regular expression used for filtering the table names
-   * @throws IOException if something went wrong
    */
-  void preGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<HTableDescriptor> descriptors, String regex) throws IOException;
+  default void preGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      List<HTableDescriptor> descriptors, String regex) throws IOException {}
 
   /**
    * Called after a getTableNames request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param descriptors the list of descriptors about to be returned
    * @param regex regular expression used for filtering the table names
-   * @throws IOException if something went wrong
    */
-  void postGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<HTableDescriptor> descriptors, String regex) throws IOException;
+  default void postGetTableNames(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      List<HTableDescriptor> descriptors, String regex) throws IOException {}
 
 
 
@@ -1481,18 +1398,16 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param ns the NamespaceDescriptor for the table
-   * @throws IOException if something went wrong
    */
-  void preCreateNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException;
+  default void preCreateNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      NamespaceDescriptor ns) throws IOException {}
   /**
    * Called after the createNamespace operation has been requested.
    * @param ctx the environment to interact with the framework and master
    * @param ns the NamespaceDescriptor for the table
-   * @throws IOException if something went wrong
    */
-  void postCreateNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-       NamespaceDescriptor ns) throws IOException;
+  default void postCreateNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+       NamespaceDescriptor ns) throws IOException {}
 
   /**
    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a
@@ -1500,113 +1415,101 @@ public interface MasterObserver extends Coprocessor {
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param namespace the name of the namespace
-   * @throws IOException if something went wrong
    */
-  void preDeleteNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException;
+  default void preDeleteNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      String namespace) throws IOException {}
 
   /**
    * Called after the deleteNamespace operation has been requested.
    * @param ctx the environment to interact with the framework and master
    * @param namespace the name of the namespace
-   * @throws IOException if something went wrong
    */
-  void postDeleteNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException;
+  default void postDeleteNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      String namespace) throws IOException {}
 
   /**
    * Called prior to modifying a namespace's properties.
    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
    * @param ctx the environment to interact with the framework and master
    * @param ns the NamespaceDescriptor
-   * @throws IOException if something went wrong
    */
-  void preModifyNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException;
+  default void preModifyNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      NamespaceDescriptor ns) throws IOException {}
 
   /**
    * Called after the modifyNamespace operation has been requested.
    * @param ctx the environment to interact with the framework and master
    * @param ns the NamespaceDescriptor
-   * @throws IOException if something went wrong
    */
-  void postModifyNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException;
+  default void postModifyNamespace(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      NamespaceDescriptor ns) throws IOException {}
 
   /**
    * Called before a getNamespaceDescriptor request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param namespace the name of the namespace
-   * @throws IOException if something went wrong
    */
-  void preGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String namespace) throws IOException;
+  default void preGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      String namespace) throws IOException {}
 
   /**
    * Called after a getNamespaceDescriptor request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param ns the NamespaceDescriptor
-   * @throws IOException if something went wrong
    */
-  void postGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      NamespaceDescriptor ns) throws IOException;
+  default void postGetNamespaceDescriptor(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      NamespaceDescriptor ns) throws IOException {}
 
   /**
    * Called before a listNamespaceDescriptors request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param descriptors an empty list, can be filled with what to return if bypassing
-   * @throws IOException if something went wrong
    */
-  void preListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<NamespaceDescriptor> descriptors) throws IOException;
+  default void preListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      List<NamespaceDescriptor> descriptors) throws IOException {}
 
   /**
    * Called after a listNamespaceDescriptors request has been processed.
    * @param ctx the environment to interact with the framework and master
    * @param descriptors the list of descriptors about to be returned
-   * @throws IOException if something went wrong
    */
-  void postListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      List<NamespaceDescriptor> descriptors) throws IOException;
+  default void postListNamespaceDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      List<NamespaceDescriptor> descriptors) throws IOException {}
 
 
   /**
    * Called before the table memstore is flushed to disk.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void preTableFlush(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+  default void preTableFlush(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName) throws IOException {}
 
   /**
    * Called after the table memstore is flushed to disk.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
-   * @throws IOException if something went wrong
    */
-  void postTableFlush(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName) throws IOException;
+  default void postTableFlush(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName) throws IOException {}
 
   /**
    * Called before the quota for the user is stored.
    * @param ctx the environment to interact with the framework and master
    * @param userName the name of user
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final Quotas quotas) throws IOException;
+  default void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String userName, final Quotas quotas) throws IOException {}
 
   /**
    * Called after the quota for the user is stored.
    * @param ctx the environment to interact with the framework and master
    * @param userName the name of user
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final Quotas quotas) throws IOException;
+  default void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String userName, final Quotas quotas) throws IOException {}
 
   /**
    * Called before the quota for the user on the specified table is stored.
@@ -1614,10 +1517,9 @@ public interface MasterObserver extends Coprocessor {
    * @param userName the name of user
    * @param tableName the name of the table
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final TableName tableName, final Quotas quotas) throws IOException;
+  default void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String userName, final TableName tableName, final Quotas quotas) throws IOException {}
 
   /**
    * Called after the quota for the user on the specified table is stored.
@@ -1625,10 +1527,9 @@ public interface MasterObserver extends Coprocessor {
    * @param userName the name of user
    * @param tableName the name of the table
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final TableName tableName, final Quotas quotas) throws IOException;
+  default void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String userName, final TableName tableName, final Quotas quotas) throws IOException {}
 
   /**
    * Called before the quota for the user on the specified namespace is stored.
@@ -1636,10 +1537,9 @@ public interface MasterObserver extends Coprocessor {
    * @param userName the name of user
    * @param namespace the name of the namespace
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final String namespace, final Quotas quotas) throws IOException;
+  default void preSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String userName, final String namespace, final Quotas quotas) throws IOException {}
 
   /**
    * Called after the quota for the user on the specified namespace is stored.
@@ -1647,50 +1547,45 @@ public interface MasterObserver extends Coprocessor {
    * @param userName the name of user
    * @param namespace the name of the namespace
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String userName, final String namespace, final Quotas quotas) throws IOException;
+  default void postSetUserQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String userName, final String namespace, final Quotas quotas) throws IOException {}
 
   /**
    * Called before the quota for the table is stored.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void preSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final Quotas quotas) throws IOException;
+  default void preSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, final Quotas quotas) throws IOException {}
 
   /**
    * Called after the quota for the table is stored.
    * @param ctx the environment to interact with the framework and master
    * @param tableName the name of the table
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void postSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final TableName tableName, final Quotas quotas) throws IOException;
+  default void postSetTableQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final TableName tableName, final Quotas quotas) throws IOException {}
 
   /**
    * Called before the quota for the namespace is stored.
    * @param ctx the environment to interact with the framework and master
    * @param namespace the name of the namespace
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void preSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String namespace, final Quotas quotas) throws IOException;
+  default void preSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String namespace, final Quotas quotas) throws IOException {}
 
   /**
    * Called after the quota for the namespace is stored.
    * @param ctx the environment to interact with the framework and master
    * @param namespace the name of the namespace
    * @param quotas the quota settings
-   * @throws IOException if something went wrong
    */
-  void postSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final String namespace, final Quotas quotas) throws IOException;
+  default void postSetNamespaceQuota(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      final String namespace, final Quotas quotas) throws IOException {}
 
   /**
    * Called before dispatching region merge request.
@@ -1704,8 +1599,8 @@ public interface MasterObserver extends Coprocessor {
    *   Use {@link #preMergeRegions(ObserverContext, HRegionInfo[])}
    */
   @Deprecated
-  void preDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      HRegionInfo regionA, HRegionInfo regionB) throws IOException;
+  default void preDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+      HRegionInfo regionA, HRegionInfo regionB) throws IOException {}
 
   /**
    * called after dispatching the region merge request.
@@ -1718,8 +1613,8 @@ public interface MasterObserver extends Coprocessor {
    *   Use {@link #postMergeRegions(ObserverContext, HRegionInfo[])}
    */
   @Deprecated
-  void postDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo regionA, final HRegionInfo regionB) throws IOException;
+  default void postDispatchMerge(final ObserverContext<MasterCoprocessorEnvironment> c,
+      final HRegionInfo regionA, final HRegionInfo regionB) throws IOException {}
 
   /**
    * Called before merge regions request.
@@ -1728,9 +1623,9 @@ public interface MasterObserver extends Coprocessor {
    * @param regionsToMerge regions to be merged
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preMergeRegions(
+  default void preMergeRegions(
       final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      final HRegionInfo[] regionsToMerge) throws IOException;
+      final HRegionInfo[] regionsToMerge) throws IOException {}
 
   /**
    * called after merge regions request.
@@ -1738,271 +1633,239 @@ public interface MasterObserver extends Coprocessor {
    * @param regionsToMerge regions to be merged
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postMergeRegions(
+  default void postMergeRegions(
       final ObserverContext<MasterCoprocessorEnvironment> c,
-      final HRegionInfo[] regionsToMerge) throws IOException;
+      final HRegionInfo[] regionsToMerge) throws IOException {}
 
   /**
    * Called before servers are moved to target region server group
    * @param ctx the environment to interact with the framework and master
    * @param servers set of servers to move
    * @param targetGroup destination group
-   * @throws IOException on failure
    */
-  void preMoveServers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                      Set<Address> servers, String targetGroup) throws IOException;
+  default void preMoveServers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                      Set<Address> servers, String targetGroup) throws IOException {}
 
   /**
    * Called after servers are moved to target region server group
    * @param ctx the environment to interact with the framework and master
    * @param servers set of servers to move
    * @param targetGroup name of group
-   * @throws IOException on failure
    */
-  void postMoveServers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                       Set<Address> servers, String targetGroup) throws IOException;
+  default void postMoveServers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                       Set<Address> servers, String targetGroup) throws IOException {}
 
   /**
    * Called before tables are moved to target region server group
    * @param ctx the environment to interact with the framework and master
    * @param tables set of tables to move
    * @param targetGroup name of group
-   * @throws IOException on failure
    */
-  void preMoveTables(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                     Set<TableName> tables, String targetGroup) throws IOException;
+  default void preMoveTables(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                     Set<TableName> tables, String targetGroup) throws IOException {}
 
   /**
    * Called after servers are moved to target region server group
    * @param ctx the environment to interact with the framework and master
    * @param tables set of tables to move
    * @param targetGroup name of group
-   * @throws IOException on failure
    */
-  void postMoveTables(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                      Set<TableName> tables, String targetGroup) throws IOException;
+  default void postMoveTables(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                      Set<TableName> tables, String targetGroup) throws IOException {}
 
   /**
    * Called before a new region server group is added
    * @param ctx the environment to interact with the framework and master
    * @param name group name
-   * @throws IOException on failure
    */
-  void preAddRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                     String name) throws IOException;
+  default void preAddRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                     String name) throws IOException {}
 
   /**
    * Called after a new region server group is added
    * @param ctx the environment to interact with the framework and master
    * @param name group name
-   * @throws IOException on failure
    */
-  void postAddRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                      String name) throws IOException;
+  default void postAddRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                      String name) throws IOException {}
 
   /**
    * Called before a region server group is removed
    * @param ctx the environment to interact with the framework and master
    * @param name group name
-   * @throws IOException on failure
    */
-  void preRemoveRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                        String name) throws IOException;
+  default void preRemoveRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                        String name) throws IOException {}
 
   /**
    * Called after a region server group is removed
    * @param ctx the environment to interact with the framework and master
    * @param name group name
-   * @throws IOException on failure
    */
-  void postRemoveRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                         String name) throws IOException;
+  default void postRemoveRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                         String name) throws IOException {}
 
   /**
    * Called before a region server group is removed
    * @param ctx the environment to interact with the framework and master
    * @param groupName group name
-   * @throws IOException on failure
    */
-  void preBalanceRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                         String groupName) throws IOException;
+  default void preBalanceRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                         String groupName) throws IOException {}
 
   /**
    * Called after a region server group is removed
    * @param ctx the environment to interact with the framework and master
    * @param groupName group name
-   * @throws IOException on failure
    */
-  void postBalanceRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                          String groupName, boolean balancerRan) throws IOException;
+  default void postBalanceRSGroup(final ObserverContext<MasterCoprocessorEnvironment> ctx,
+                          String groupName, boolean balancerRan) throws IOException {}
 
   /**
    * Called before add a replication peer
    * @param ctx the environment to interact with the framework and master
    * @param peerId a short name that identifies the peer
    * @param peerConfig configuration for the replication peer
-   * @throws IOException on failure
    */
   default void preAddReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId, ReplicationPeerConfig peerConfig) throws IOException {
-  }
+      String peerId, ReplicationPeerConfig peerConfig) throws IOException {}
 
   /**
    * Called after add a replication peer
    * @param ctx the environment to interact with the framework and master
    * @param peerId a short name that identifies the peer
    * @param peerConfig configuration for the replication peer
-   * @throws IOException on failure
    */
   default void postAddReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId, ReplicationPeerConfig peerConfig) throws IOException {
-  }
+      String peerId, ReplicationPeerConfig peerConfig) throws IOException {}
 
   /**
    * Called before remove a replication peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void preRemoveReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called after remove a replication peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void postRemoveReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called before enable a replication peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void preEnableReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called after enable a replication peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void postEnableReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called before disable a replication peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void preDisableReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called after disable a replication peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void postDisableReplicationPeer(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called before get the configured ReplicationPeerConfig for the specified peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void preGetReplicationPeerConfig(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String peerId) throws IOException {
-  }
+      String peerId) throws IOException {}
 
   /**
    * Called after get the configured ReplicationPeerConfig for the specified peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void postGetReplicationPeerConfig(
-      final ObserverContext<MasterCoprocessorEnvironment> ctx, String peerId) throws IOException {
-  }
+      final ObserverContext<MasterCoprocessorEnvironment> ctx, String peerId) throws IOException {}
 
   /**
    * Called before update peerConfig for the specified peer
    * @param ctx
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void preUpdateReplicationPeerConfig(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, String peerId,
-      ReplicationPeerConfig peerConfig) throws IOException {
-  }
+      ReplicationPeerConfig peerConfig) throws IOException {}
 
   /**
    * Called after update peerConfig for the specified peer
-   * @param ctx
+   * @param ctx the environment to interact with the framework and master
    * @param peerId a short name that identifies the peer
-   * @throws IOException on failure
    */
   default void postUpdateReplicationPeerConfig(
       final ObserverContext<MasterCoprocessorEnvironment> ctx, String peerId,
-      ReplicationPeerConfig peerConfig) throws IOException {
-  }
+      ReplicationPeerConfig peerConfig) throws IOException {}
 
   /**
    * Called before list replication peers.
-   * @param ctx
+   * @param ctx the environment to interact with the framework and master
    * @param regex The regular expression to match peer id
-   * @throws IOException on failure
    */
   default void preListReplicationPeers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String regex) throws IOException {
-  }
+      String regex) throws IOException {}
 
   /**
    * Called after list replication peers.
-   * @param ctx
+   * @param ctx the environment to interact with the framework and master
    * @param regex The regular expression to match peer id
-   * @throws IOException on failure
    */
   default void postListReplicationPeers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-      String regex) throws IOException {
-  }
+      String regex) throws IOException {}
 
   /**
    * Called before new LockProcedure is queued.
+   * @param ctx the environment to interact with the framework and master
    */
-  public void preRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
+  default void preRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
       TableName tableName, HRegionInfo[] regionInfos, LockProcedure.LockType type,
-      String description) throws IOException;
+      String description) throws IOException {}
 
   /**
    * Called after new LockProcedure is queued.
+   * @param ctx the environment to interact with the framework and master
    */
-  public void postRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
+  default void postRequestLock(ObserverContext<MasterCoprocessorEnvironment> ctx, String namespace,
       TableName tableName, HRegionInfo[] regionInfos, LockProcedure.LockType type,
-      String description) throws IOException;
+      String description) throws IOException {}
 
   /**
    * Called before heartbeat to a lock.
+   * @param ctx the environment to interact with the framework and master
+   * @param keepAlive if lock should be kept alive; lock will be released if set to false.
    */
-  public void preLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException;
+  default void preLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      LockProcedure proc, boolean keepAlive) throws IOException {}
 
   /**
    * Called after heartbeat to a lock.
+   * @param ctx the environment to interact with the framework and master
+   * @param keepAlive if lock was kept alive; lock was released if set to false.
    */
-  public void postLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      LockProcedure proc, boolean keepAlive) throws IOException;
+  default void postLockHeartbeat(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      LockProcedure proc, boolean keepAlive) throws IOException {}
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
index 390b723..75b2c1e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
@@ -30,6 +30,7 @@ import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -68,6 +69,9 @@ import org.apache.hadoop.hbase.wal.WALKey;
 /**
  * Coprocessors implement this interface to observe and mediate client actions
  * on the region.
+ *
+ * Since most implementations will be interested in only a subset of hooks, this class uses
+ * 'default' functions to avoid redundant implementations.
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
@@ -75,9 +79,8 @@ import org.apache.hadoop.hbase.wal.WALKey;
 // ObserverContext<? extends RegionCoprocessorEnvironment>
 // so we can use additional environment state that isn't exposed to coprocessors.
 public interface RegionObserver extends Coprocessor {
-
   /** Mutation type for postMutationBeforeWAL hook */
-  public enum MutationType {
+  enum MutationType {
     APPEND, INCREMENT
   }
 
@@ -86,19 +89,19 @@ public interface RegionObserver extends Coprocessor {
    * @param c the environment provided by the region server
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preOpen(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException;
+  default void preOpen(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException {}
 
   /**
    * Called after the region is reported as open to the master.
    * @param c the environment provided by the region server
    */
-  void postOpen(final ObserverContext<RegionCoprocessorEnvironment> c);
+  default void postOpen(final ObserverContext<RegionCoprocessorEnvironment> c) {}
 
   /**
    * Called after the log replay on the region is over.
    * @param c the environment provided by the region server
    */
-  void postLogReplay(final ObserverContext<RegionCoprocessorEnvironment> c);
+  default void postLogReplay(final ObserverContext<RegionCoprocessorEnvironment> c) {}
 
   /**
    * Called before a memstore is flushed to disk and prior to creating the scanner to read from
@@ -118,9 +121,11 @@ public interface RegionObserver extends Coprocessor {
    *             InternalScanner, long)}
    */
   @Deprecated
-  InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)
-      throws IOException;
+      throws IOException {
+    return s;
+  }
 
   /**
    * Called before a memstore is flushed to disk and prior to creating the scanner to read from
@@ -138,9 +143,11 @@ public interface RegionObserver extends Coprocessor {
    * is to be used.
    * @throws IOException if an error occurred on the coprocessor
    */
-  InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s,
-      final long readPoint) throws IOException;
+      final long readPoint) throws IOException {
+    return preFlushScannerOpen(c, store, memstoreScanner, s);
+  }
 
   /**
    * Called before the memstore is flushed to disk.
@@ -149,7 +156,7 @@ public interface RegionObserver extends Coprocessor {
    * @deprecated use {@link #preFlush(ObserverContext, Store, InternalScanner)} instead
    */
   @Deprecated
-  void preFlush(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException;
+  default void preFlush(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException {}
 
   /**
    * Called before a Store's memstore is flushed to disk.
@@ -160,8 +167,10 @@ public interface RegionObserver extends Coprocessor {
    * unless the implementation is writing new store files on its own.
    * @throws IOException if an error occurred on the coprocessor
    */
-  InternalScanner preFlush(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
-      final InternalScanner scanner) throws IOException;
+  default InternalScanner preFlush(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Store store, final InternalScanner scanner) throws IOException {
+    return scanner;
+  }
 
   /**
    * Called after the memstore is flushed to disk.
@@ -170,7 +179,8 @@ public interface RegionObserver extends Coprocessor {
    * @deprecated use {@link #preFlush(ObserverContext, Store, InternalScanner)} instead.
    */
   @Deprecated
-  void postFlush(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException;
+  default void postFlush(final ObserverContext<RegionCoprocessorEnvironment> c)
+      throws IOException {}
 
   /**
    * Called after a Store's memstore is flushed to disk.
@@ -179,8 +189,8 @@ public interface RegionObserver extends Coprocessor {
    * @param resultFile the new store file written out during compaction
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postFlush(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
-      final StoreFile resultFile) throws IOException;
+  default void postFlush(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
+      final StoreFile resultFile) throws IOException {}
 
   /**
    * Called prior to selecting the {@link StoreFile StoreFiles} to compact from the list of
@@ -192,9 +202,11 @@ public interface RegionObserver extends Coprocessor {
    * @param request custom compaction request
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final List<StoreFile> candidates, final CompactionRequest request)
-      throws IOException;
+      throws IOException {
+    preCompactSelection(c, store, candidates);
+  }
 
   /**
    * Called prior to selecting the {@link StoreFile}s to compact from the list of available
@@ -208,8 +220,8 @@ public interface RegionObserver extends Coprocessor {
    *             instead
    */
   @Deprecated
-  void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final List<StoreFile> candidates) throws IOException;
+  default void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Store store, final List<StoreFile> candidates) throws IOException {}
 
   /**
    * Called after the {@link StoreFile}s to compact have been selected from the available
@@ -219,8 +231,10 @@ public interface RegionObserver extends Coprocessor {
    * @param selected the store files selected to compact
    * @param request custom compaction request
    */
-  void postCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final ImmutableList<StoreFile> selected, CompactionRequest request);
+  default void postCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Store store, final ImmutableList<StoreFile> selected, CompactionRequest request) {
+    postCompactSelection(c, store, selected);
+  }
 
   /**
    * Called after the {@link StoreFile}s to compact have been selected from the available
@@ -232,8 +246,8 @@ public interface RegionObserver extends Coprocessor {
    *             CompactionRequest)} instead.
    */
   @Deprecated
-  void postCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final ImmutableList<StoreFile> selected);
+  default void postCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Store store, final ImmutableList<StoreFile> selected) {}
 
   /**
    * Called prior to writing the {@link StoreFile}s selected for compaction into a new
@@ -258,9 +272,11 @@ public interface RegionObserver extends Coprocessor {
    *         implementation is writing new store files on its own.
    * @throws IOException if an error occurred on the coprocessor
    */
-  InternalScanner preCompact(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default InternalScanner preCompact(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final InternalScanner scanner, final ScanType scanType,
-      CompactionRequest request) throws IOException;
+      CompactionRequest request) throws IOException {
+    return preCompact(c, store, scanner, scanType);
+  }
 
   /**
    * Called prior to writing the {@link StoreFile}s selected for compaction into a new
@@ -288,8 +304,11 @@ public interface RegionObserver extends Coprocessor {
    *             ScanType, CompactionRequest)} instead
    */
   @Deprecated
-  InternalScanner preCompact(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Store store, final InternalScanner scanner, final ScanType scanType) throws IOException;
+  default InternalScanner preCompact(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Store store, final InternalScanner scanner, final ScanType scanType)
+      throws IOException {
+    return scanner;
+  }
 
   /**
    * Called prior to writing the {@link StoreFile}s selected for compaction into a new
@@ -314,10 +333,13 @@ public interface RegionObserver extends Coprocessor {
    *             InternalScanner, CompactionRequest, long)} instead.
    */
   @Deprecated
-  InternalScanner preCompactScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default InternalScanner preCompactScannerOpen(
+      final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,
       final long earliestPutTs, final InternalScanner s, CompactionRequest request)
-      throws IOException;
+      throws IOException {
+    return preCompactScannerOpen(c, store, scanners, scanType, earliestPutTs, s);
+  }
 
   /**
    * Called prior to writing the {@link StoreFile}s selected for compaction into a new
@@ -340,10 +362,13 @@ public interface RegionObserver extends Coprocessor {
    *          be used.
    * @throws IOException if an error occurred on the coprocessor
    */
-  InternalScanner preCompactScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default InternalScanner preCompactScannerOpen(
+      final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,
       final long earliestPutTs, final InternalScanner s, final CompactionRequest request,
-      final long readPoint) throws IOException;
+      final long readPoint) throws IOException {
+    return preCompactScannerOpen(c, store, scanners, scanType, earliestPutTs, s, request);
+  }
 
   /**
    * Called prior to writing the {@link StoreFile}s selected for compaction into a new
@@ -368,9 +393,12 @@ public interface RegionObserver extends Coprocessor {
    *             InternalScanner, CompactionRequest, long)} instead.
    */
   @Deprecated
-  InternalScanner preCompactScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default InternalScanner preCompactScannerOpen(
+      final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,
-      final long earliestPutTs, final InternalScanner s) throws IOException;
+      final long earliestPutTs, final InternalScanner s) throws IOException {
+    return s;
+  }
 
   /**
    * Called after compaction has completed and the new store file has been moved in to place.
@@ -380,8 +408,10 @@ public interface RegionObserver extends Coprocessor {
    * @param request the requested compaction
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postCompact(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
-      StoreFile resultFile, CompactionRequest request) throws IOException;
+  default void postCompact(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
+      StoreFile resultFile, CompactionRequest request) throws IOException {
+    postCompact(c, store, resultFile);
+  }
 
   /**
    * Called after compaction has completed and the new store file has been moved in to place.
@@ -393,8 +423,8 @@ public interface RegionObserver extends Coprocessor {
    *             instead
    */
   @Deprecated
-  void postCompact(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
-      StoreFile resultFile) throws IOException;
+  default void postCompact(final ObserverContext<RegionCoprocessorEnvironment> c, final Store store,
+      StoreFile resultFile) throws IOException {}
 
   /**
    * Called before the region is split.
@@ -405,7 +435,7 @@ public interface RegionObserver extends Coprocessor {
    *    final ObserverContext&lt;RegionCoprocessorEnvironment&gt; c, byte[] splitRow)
    */
   @Deprecated
-  void preSplit(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException;
+  default void preSplit(final ObserverContext<RegionCoprocessorEnvironment> c) throws IOException {}
 
   /**
    * Called before the region is split.
@@ -416,8 +446,8 @@ public interface RegionObserver extends Coprocessor {
    * Note: the logic moves to Master; it is unused in RS
    */
   @Deprecated
-  void preSplit(final ObserverContext<RegionCoprocessorEnvironment> c, byte[] splitRow)
-      throws IOException;
+  default void preSplit(final ObserverContext<RegionCoprocessorEnvironment> c, byte[] splitRow)
+      throws IOException {}
 
   /**
    * Called after the region is split.
@@ -429,8 +459,8 @@ public interface RegionObserver extends Coprocessor {
    * @deprecated Use postCompleteSplit() instead
    */
   @Deprecated
-  void postSplit(final ObserverContext<RegionCoprocessorEnvironment> c, final Region l,
-      final Region r) throws IOException;
+  default void postSplit(final ObserverContext<RegionCoprocessorEnvironment> c, final Region l,
+      final Region r) throws IOException {}
 
   /**
    * This will be called before PONR step as part of split transaction. Calling
@@ -438,71 +468,67 @@ public interface RegionObserver extends Coprocessor {
    * @param ctx
    * @param splitKey
    * @param metaEntries
-   * @throws IOException
    *
    * Note: the logic moves to Master; it is unused in RS
   */
   @Deprecated
-  void preSplitBeforePONR(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      byte[] splitKey, List<Mutation> metaEntries) throws IOException;
+  default void preSplitBeforePONR(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+      byte[] splitKey, List<Mutation> metaEntries) throws IOException {}
 
   /**
    * This will be called after PONR step as part of split transaction
    * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no
    * effect in this hook.
    * @param ctx
-   * @throws IOException
    *
    * Note: the logic moves to Master; it is unused in RS
   */
   @Deprecated
-  void preSplitAfterPONR(final ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
+  default void preSplitAfterPONR(final ObserverContext<RegionCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * This will be called before the roll back of the split region is completed
    * @param ctx
-   * @throws IOException
    *
    * Note: the logic moves to Master; it is unused in RS
   */
   @Deprecated
-  void preRollBackSplit(final ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
+  default void preRollBackSplit(final ObserverContext<RegionCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * This will be called after the roll back of the split region is completed
    * @param ctx
-   * @throws IOException
    *
    * Note: the logic moves to Master; it is unused in RS
   */
   @Deprecated
-  void postRollBackSplit(final ObserverContext<RegionCoprocessorEnvironment> ctx)
-    throws IOException;
+  default void postRollBackSplit(final ObserverContext<RegionCoprocessorEnvironment> ctx)
+    throws IOException {}
 
   /**
    * Called after any split request is processed.  This will be called irrespective of success or
    * failure of the split.
    * @param ctx
-   * @throws IOException
    */
-  void postCompleteSplit(final ObserverContext<RegionCoprocessorEnvironment> ctx)
-    throws IOException;
+  default void postCompleteSplit(final ObserverContext<RegionCoprocessorEnvironment> ctx)
+    throws IOException {}
   /**
    * Called before the region is reported as closed to the master.
    * @param c the environment provided by the region server
    * @param abortRequested true if the region server is aborting
-   * @throws IOException
    */
-  void preClose(final ObserverContext<RegionCoprocessorEnvironment> c,
-      boolean abortRequested) throws IOException;
+  default void preClose(final ObserverContext<RegionCoprocessorEnvironment> c,
+      boolean abortRequested) throws IOException {}
 
   /**
    * Called after the region is reported as closed to the master.
    * @param c the environment provided by the region server
    * @param abortRequested true if the region server is aborting
    */
-  void postClose(final ObserverContext<RegionCoprocessorEnvironment> c,
-      boolean abortRequested);
+  default void postClose(final ObserverContext<RegionCoprocessorEnvironment> c,
+      boolean abortRequested) {}
 
   /**
    * Called before the client performs a Get
@@ -518,9 +544,9 @@ public interface RegionObserver extends Coprocessor {
    * is not bypassed.
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
+  default void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
       final List<Cell> result)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called after the client performs a Get
@@ -535,9 +561,9 @@ public interface RegionObserver extends Coprocessor {
    * @param result the result to return to the client, modify as necessary
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postGetOp(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
+  default void postGetOp(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
       final List<Cell> result)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called before the client tests for existence using a Get.
@@ -552,9 +578,10 @@ public interface RegionObserver extends Coprocessor {
    * @return the value to return to the client if bypassing default processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean preExists(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
-      final boolean exists)
-    throws IOException;
+  default boolean preExists(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
+      final boolean exists) throws IOException {
+    return exists;
+  }
 
   /**
    * Called after the client tests for existence using a Get.
@@ -567,9 +594,10 @@ public interface RegionObserver extends Coprocessor {
    * @return the result to return to the client
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean postExists(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
-      final boolean exists)
-    throws IOException;
+  default boolean postExists(final ObserverContext<RegionCoprocessorEnvironment> c, final Get get,
+      final boolean exists) throws IOException {
+    return exists;
+  }
 
   /**
    * Called before the client stores a value.
@@ -587,9 +615,9 @@ public interface RegionObserver extends Coprocessor {
    * @param durability Persistence guarantee for this Put
    * @throws IOException if an error occurred on the coprocessor
    */
-  void prePut(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void prePut(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Put put, final WALEdit edit, final Durability durability)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called after the client stores a value.
@@ -605,9 +633,9 @@ public interface RegionObserver extends Coprocessor {
    * @param durability Persistence guarantee for this Put
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Put put, final WALEdit edit, final Durability durability)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called before the client deletes a value.
@@ -625,9 +653,9 @@ public interface RegionObserver extends Coprocessor {
    * @param durability Persistence guarantee for this Delete
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void preDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Delete delete, final WALEdit edit, final Durability durability)
-    throws IOException;
+    throws IOException {}
 /**
  * Called before the server updates the timestamp for version delete with latest timestamp.
  * <p>
@@ -641,11 +669,11 @@ public interface RegionObserver extends Coprocessor {
  * @param byteNow - timestamp bytes
  * @param get - the get formed using the current cell's row.
  * Note that the get does not specify the family and qualifier
- * @throws IOException
  */
-  void prePrepareTimeStampForDeleteVersion(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void prePrepareTimeStampForDeleteVersion(
+      final ObserverContext<RegionCoprocessorEnvironment> c,
       final Mutation mutation, final Cell cell, final byte[] byteNow,
-      final Get get) throws IOException;
+      final Get get) throws IOException {}
 
   /**
    * Called after the client deletes a value.
@@ -661,9 +689,9 @@ public interface RegionObserver extends Coprocessor {
    * @param durability Persistence guarantee for this Delete
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void postDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Delete delete, final WALEdit edit, final Durability durability)
-    throws IOException;
+    throws IOException {}
 
   /**
    * This will be called for every batch mutation operation happening at the server. This will be
@@ -678,12 +706,13 @@ public interface RegionObserver extends Coprocessor {
    * @param miniBatchOp batch of Mutations getting applied to region.
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException;
+  default void preBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {}
 
   /**
    * This will be called after applying a batch of Mutations on a region. The Mutations are added to
-   * memstore and WAL. The difference of this one with {@link #postPut(ObserverContext, Put, WALEdit, Durability) }
+   * memstore and WAL. The difference of this one with
+   * {@link #postPut(ObserverContext, Put, WALEdit, Durability) }
    * and {@link #postDelete(ObserverContext, Delete, WALEdit, Durability) } is
    * this hook will be executed before the mvcc transaction completion.
    * <p>
@@ -693,27 +722,25 @@ public interface RegionObserver extends Coprocessor {
    * @param miniBatchOp batch of Mutations applied to region.
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException;
+  default void postBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {}
 
   /**
    * This will be called for region operations where read lock is acquired in
    * {@link Region#startRegionOperation()}.
    * @param ctx
    * @param operation The operation is about to be taken on the region
-   * @throws IOException
    */
-  void postStartRegionOperation(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Operation operation) throws IOException;
+  default void postStartRegionOperation(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Operation operation) throws IOException {}
 
   /**
    * Called after releasing read lock in {@link Region#closeRegionOperation()}.
    * @param ctx
    * @param operation
-   * @throws IOException
    */
-  void postCloseRegionOperation(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Operation operation) throws IOException;
+  default void postCloseRegionOperation(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Operation operation) throws IOException {}
 
   /**
    * Called after the completion of batch put/delete and will be called even if the batch operation
@@ -724,10 +751,10 @@ public interface RegionObserver extends Coprocessor {
    * @param ctx
    * @param miniBatchOp
    * @param success true if batch operation is successful otherwise false.
-   * @throws IOException
    */
-  void postBatchMutateIndispensably(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-      MiniBatchOperationInProgress<Mutation> miniBatchOp, final boolean success) throws IOException;
+  default void postBatchMutateIndispensably(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+      MiniBatchOperationInProgress<Mutation> miniBatchOp, final boolean success)
+      throws IOException {}
 
   /**
    * Called before checkAndPut.
@@ -751,11 +778,13 @@ public interface RegionObserver extends Coprocessor {
    * processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean preCheckAndPut(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean preCheckAndPut(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte [] row, final byte [] family, final byte [] qualifier,
       final CompareOp compareOp, final ByteArrayComparable comparator,
       final Put put, final boolean result)
-    throws IOException;
+    throws IOException {
+    return result;
+  }
 
   /**
    * Called before checkAndPut but after acquiring rowlock.
@@ -783,10 +812,12 @@ public interface RegionObserver extends Coprocessor {
    * processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean preCheckAndPutAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean preCheckAndPutAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte[] row, final byte[] family, final byte[] qualifier, final CompareOp compareOp,
       final ByteArrayComparable comparator, final Put put,
-      final boolean result) throws IOException;
+      final boolean result) throws IOException {
+    return result;
+  }
 
   /**
    * Called after checkAndPut
@@ -807,11 +838,13 @@ public interface RegionObserver extends Coprocessor {
    * @return the possibly transformed return value to return to client
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean postCheckAndPut(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean postCheckAndPut(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte [] row, final byte [] family, final byte [] qualifier,
       final CompareOp compareOp, final ByteArrayComparable comparator,
       final Put put, final boolean result)
-    throws IOException;
+    throws IOException {
+    return result;
+  }
 
   /**
    * Called before checkAndDelete.
@@ -834,11 +867,13 @@ public interface RegionObserver extends Coprocessor {
    * @return the value to return to client if bypassing default processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean preCheckAndDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean preCheckAndDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte [] row, final byte [] family, final byte [] qualifier,
       final CompareOp compareOp, final ByteArrayComparable comparator,
       final Delete delete, final boolean result)
-    throws IOException;
+    throws IOException {
+    return result;
+  }
 
   /**
    * Called before checkAndDelete but after acquiring rowock.
@@ -865,10 +900,13 @@ public interface RegionObserver extends Coprocessor {
    * @return the value to return to client if bypassing default processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean preCheckAndDeleteAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean preCheckAndDeleteAfterRowLock(
+      final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte[] row, final byte[] family, final byte[] qualifier, final CompareOp compareOp,
       final ByteArrayComparable comparator, final Delete delete,
-      final boolean result) throws IOException;
+      final boolean result) throws IOException {
+    return result;
+  }
 
   /**
    * Called after checkAndDelete
@@ -889,11 +927,13 @@ public interface RegionObserver extends Coprocessor {
    * @return the possibly transformed returned value to return to client
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean postCheckAndDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean postCheckAndDelete(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte [] row, final byte [] family, final byte [] qualifier,
       final CompareOp compareOp, final ByteArrayComparable comparator,
       final Delete delete, final boolean result)
-    throws IOException;
+    throws IOException {
+    return result;
+  }
 
   /**
    * Called before incrementColumnValue
@@ -913,10 +953,11 @@ public interface RegionObserver extends Coprocessor {
    * @deprecated This hook is no longer called by the RegionServer
    */
   @Deprecated
-  long preIncrementColumnValue(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default long preIncrementColumnValue(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte [] row, final byte [] family, final byte [] qualifier,
-      final long amount, final boolean writeToWAL)
-    throws IOException;
+      final long amount, final boolean writeToWAL) throws IOException {
+    return amount;
+  }
 
   /**
    * Called after incrementColumnValue
@@ -935,10 +976,11 @@ public interface RegionObserver extends Coprocessor {
    * @deprecated This hook is no longer called by the RegionServer
    */
   @Deprecated
-  long postIncrementColumnValue(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default long postIncrementColumnValue(final ObserverContext<RegionCoprocessorEnvironment> c,
       final byte [] row, final byte [] family, final byte [] qualifier,
-      final long amount, final boolean writeToWAL, final long result)
-    throws IOException;
+      final long amount, final boolean writeToWAL, final long result) throws IOException {
+    return result;
+  }
 
   /**
    * Called before Append.
@@ -955,9 +997,11 @@ public interface RegionObserver extends Coprocessor {
    * @return result to return to the client if bypassing default processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  Result preAppend(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default Result preAppend(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Append append)
-    throws IOException;
+    throws IOException {
+    return null;
+  }
 
   /**
    * Called before Append but after acquiring rowlock.
@@ -978,8 +1022,10 @@ public interface RegionObserver extends Coprocessor {
    * @return result to return to the client if bypassing default processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  Result preAppendAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Append append) throws IOException;
+  default Result preAppendAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Append append) throws IOException {
+    return null;
+  }
 
   /**
    * Called after Append
@@ -995,9 +1041,11 @@ public interface RegionObserver extends Coprocessor {
    * @return the result to return to the client
    * @throws IOException if an error occurred on the coprocessor
    */
-  Result postAppend(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default Result postAppend(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Append append, final Result result)
-    throws IOException;
+    throws IOException {
+    return result;
+  }
 
   /**
    * Called before Increment.
@@ -1014,9 +1062,11 @@ public interface RegionObserver extends Coprocessor {
    * @return result to return to the client if bypassing default processing
    * @throws IOException if an error occurred on the coprocessor
    */
-  Result preIncrement(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default Result preIncrement(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Increment increment)
-    throws IOException;
+    throws IOException {
+    return null;
+  }
 
   /**
    * Called before Increment but after acquiring rowlock.
@@ -1037,11 +1087,12 @@ public interface RegionObserver extends Coprocessor {
    * @param increment
    *          increment object
    * @return result to return to the client if bypassing default processing
-   * @throws IOException
    *           if an error occurred on the coprocessor
    */
-  Result preIncrementAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Increment increment) throws IOException;
+  default Result preIncrementAfterRowLock(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Increment increment) throws IOException {
+    return null;
+  }
 
   /**
    * Called after increment
@@ -1057,9 +1108,10 @@ public interface RegionObserver extends Coprocessor {
    * @return the result to return to the client
    * @throws IOException if an error occurred on the coprocessor
    */
-  Result postIncrement(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Increment increment, final Result result)
-    throws IOException;
+  default Result postIncrement(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Increment increment, final Result result) throws IOException {
+    return result;
+  }
 
   /**
    * Called before the client opens a new scanner.
@@ -1078,9 +1130,10 @@ public interface RegionObserver extends Coprocessor {
    * overriding default behavior, null otherwise
    * @throws IOException if an error occurred on the coprocessor
    */
-  RegionScanner preScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final Scan scan, final RegionScanner s)
-    throws IOException;
+  default RegionScanner preScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final Scan scan, final RegionScanner s) throws IOException {
+    return s;
+  }
 
   /**
    * Called before a store opens a new scanner.
@@ -1109,9 +1162,11 @@ public interface RegionObserver extends Coprocessor {
    *   KeyValueScanner, long)} instead
    */
   @Deprecated
-  KeyValueScanner preStoreScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default KeyValueScanner preStoreScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final Scan scan, final NavigableSet<byte[]> targetCols,
-      final KeyValueScanner s) throws IOException;
+      final KeyValueScanner s) throws IOException {
+    return s;
+  }
 
   /**
    * Called before a store opens a new scanner.
@@ -1138,9 +1193,11 @@ public interface RegionObserver extends Coprocessor {
    * @return a KeyValueScanner instance to use or {@code null} to use the default implementation
    * @throws IOException if an error occurred on the coprocessor
    */
-  KeyValueScanner preStoreScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default KeyValueScanner preStoreScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final Scan scan, final NavigableSet<byte[]> targetCols,
-      final KeyValueScanner s, final long readPt) throws IOException;
+      final KeyValueScanner s, final long readPt) throws IOException {
+    return preStoreScannerOpen(c, store, scan, targetCols, s);
+  }
 
   /**
    * Called after the client opens a new scanner.
@@ -1156,9 +1213,11 @@ public interface RegionObserver extends Coprocessor {
    * @return the scanner instance to use
    * @throws IOException if an error occurred on the coprocessor
    */
-  RegionScanner postScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default RegionScanner postScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Scan scan, final RegionScanner s)
-    throws IOException;
+    throws IOException {
+    return s;
+  }
 
   /**
    * Called before the client asks for the next row on a scanner.
@@ -1180,10 +1239,12 @@ public interface RegionObserver extends Coprocessor {
    * @return 'has more' indication that should be sent to client
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean preScannerNext(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean preScannerNext(final ObserverContext<RegionCoprocessorEnvironment> c,
       final InternalScanner s, final List<Result> result,
       final int limit, final boolean hasNext)
-    throws IOException;
+    throws IOException {
+    return hasNext;
+  }
 
   /**
    * Called after the client asks for the next row on a scanner.
@@ -1201,10 +1262,11 @@ public interface RegionObserver extends Coprocessor {
    * @return 'has more' indication that should be sent to client
    * @throws IOException if an error occurred on the coprocessor
    */
-  boolean postScannerNext(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean postScannerNext(final ObserverContext<RegionCoprocessorEnvironment> c,
       final InternalScanner s, final List<Result> result, final int limit,
-      final boolean hasNext)
-    throws IOException;
+      final boolean hasNext) throws IOException {
+    return hasNext;
+  }
 
   /**
    * This will be called by the scan flow when the current scanned row is being filtered out by the
@@ -1215,7 +1277,7 @@ public interface RegionObserver extends Coprocessor {
    * <li>
    * <code>boolean filterRow()</code> returning true</li>
    * <li>
-   * <code>void filterRow(List&lt;KeyValue&gt; kvs)</code> removing all the kvs
+   * <code>default void filterRow(List&lt;KeyValue&gt; kvs)</code> removing all the kvs
    * from the passed List</li>
    * </ol>
    * @param c the environment provided by the region server
@@ -1225,14 +1287,15 @@ public interface RegionObserver extends Coprocessor {
    * @param length length of rowkey
    * @param hasMore the 'has more' indication
    * @return whether more rows are available for the scanner or not
-   * @throws IOException
    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0.
    * Instead use {@link #postScannerFilterRow(ObserverContext, InternalScanner, Cell, boolean)}
    */
   @Deprecated
-  boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> c,
       final InternalScanner s, final byte[] currentRow, final int offset, final short length,
-      final boolean hasMore) throws IOException;
+      final boolean hasMore) throws IOException {
+    return hasMore;
+  }
 
   /**
    * This will be called by the scan flow when the current scanned row is being filtered out by the
@@ -1243,7 +1306,7 @@ public interface RegionObserver extends Coprocessor {
    * <li>
    * <code>boolean filterRow()</code> returning true</li>
    * <li>
-   * <code>void filterRow(List&lt;KeyValue&gt; kvs)</code> removing all the kvs from
+   * <code>default void filterRow(List&lt;KeyValue&gt; kvs)</code> removing all the kvs from
    * the passed List</li>
    * </ol>
    * <p>
@@ -1254,10 +1317,11 @@ public interface RegionObserver extends Coprocessor {
    * @param curRowCell The cell in the current row which got filtered out
    * @param hasMore the 'has more' indication
    * @return whether more rows are available for the scanner or not
-   * @throws IOException
    */
-  boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> c,
-      final InternalScanner s, Cell curRowCell, final boolean hasMore) throws IOException;
+  default boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> c,
+      final InternalScanner s, Cell curRowCell, final boolean hasMore) throws IOException {
+    return hasMore;
+  }
 
   /**
    * Called before the client closes a scanner.
@@ -1270,9 +1334,9 @@ public interface RegionObserver extends Coprocessor {
    * @param s the scanner
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preScannerClose(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void preScannerClose(final ObserverContext<RegionCoprocessorEnvironment> c,
       final InternalScanner s)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called after the client closes a scanner.
@@ -1283,9 +1347,9 @@ public interface RegionObserver extends Coprocessor {
    * @param s the scanner
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postScannerClose(final ObserverContext<RegionCoprocessorEnvironment> c,
+  default void postScannerClose(final ObserverContext<RegionCoprocessorEnvironment> c,
       final InternalScanner s)
-    throws IOException;
+    throws IOException {}
 
   /**
    * Called before replaying WALs for this region.
@@ -1296,8 +1360,8 @@ public interface RegionObserver extends Coprocessor {
    * @param edits the file of recovered edits
    * @throws IOException if an error occurred on the coprocessor
    */
-  void preReplayWALs(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
-      HRegionInfo info, Path edits) throws IOException;
+  default void preReplayWALs(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
+      HRegionInfo info, Path edits) throws IOException {}
 
   /**
    * Called after replaying WALs for this region.
@@ -1306,22 +1370,22 @@ public interface RegionObserver extends Coprocessor {
    * @param edits the file of recovered edits
    * @throws IOException if an error occurred on the coprocessor
    */
-  void postReplayWALs(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
-      HRegionInfo info, Path edits) throws IOException;
+  default void postReplayWALs(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
+      HRegionInfo info, Path edits) throws IOException {}
 
   /**
    * Called before a {@link org.apache.hadoop.hbase.regionserver.wal.WALEdit}
    * replayed for this region.
    */
-  void preWALRestore(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException;
+  default void preWALRestore(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
+      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {}
 
   /**
    * Called after a {@link org.apache.hadoop.hbase.regionserver.wal.WALEdit}
    * replayed for this region.
    */
-  void postWALRestore(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException;
+  default void postWALRestore(final ObserverContext<? extends RegionCoprocessorEnvironment> ctx,
+      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {}
 
   /**
    * Called before bulkLoadHFile. Users can create a StoreFile instance to
@@ -1330,10 +1394,9 @@ public interface RegionObserver extends Coprocessor {
    * @param ctx
    * @param familyPaths pairs of { CF, HFile path } submitted for bulk load. Adding
    * or removing from this list will add or remove HFiles to be bulk loaded.
-   * @throws IOException
    */
-  void preBulkLoadHFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-    List<Pair<byte[], String>> familyPaths) throws IOException;
+  default void preBulkLoadHFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+    List<Pair<byte[], String>> familyPaths) throws IOException {}
 
   /**
    * Called before moving bulk loaded hfile to region directory.
@@ -1342,7 +1405,6 @@ public interface RegionObserver extends Coprocessor {
    * @param family column family
    * @param pairs List of pairs of { HFile location in staging dir, HFile path in region dir }
    * Each pair are for the same hfile.
-   * @throws IOException
    */
   default void preCommitStoreFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
       final byte[] family, final List<Pair<Path, Path>> pairs) throws IOException {
@@ -1368,7 +1430,6 @@ public interface RegionObserver extends Coprocessor {
    * @param finalPaths Map of CF to List of file paths for the final loaded files
    * @param hasLoaded whether the bulkLoad was successful
    * @return the new value of hasLoaded
-   * @throws IOException
    */
   default boolean postBulkLoadHFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
     List<Pair<byte[], String>> stagingFamilyPaths, Map<byte[], List<Path>> finalPaths,
@@ -1383,11 +1444,12 @@ public interface RegionObserver extends Coprocessor {
    * @param stagingFamilyPaths pairs of { CF, HFile path } submitted for bulk load
    * @param hasLoaded whether the bulkLoad was successful
    * @return the new value of hasLoaded
-   * @throws IOException
    * @deprecated Use {@link #postBulkLoadHFile(ObserverContext, List, Map, boolean)}
    */
-  boolean postBulkLoadHFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
-    List<Pair<byte[], String>> stagingFamilyPaths, boolean hasLoaded) throws IOException;
+  default boolean postBulkLoadHFile(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+    List<Pair<byte[], String>> stagingFamilyPaths, boolean hasLoaded) throws IOException {
+    return hasLoaded;
+  }
 
   /**
    * Called before creation of Reader for a store file.
@@ -1404,11 +1466,13 @@ public interface RegionObserver extends Coprocessor {
    * @param reader the base reader, if not {@code null}, from previous RegionObserver in the chain
    * @return a Reader instance to use instead of the base reader if overriding
    * default behavior, null otherwise
-   * @throws IOException
    */
-  StoreFileReader preStoreFileReaderOpen(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+  default StoreFileReader preStoreFileReaderOpen(
+      final ObserverContext<RegionCoprocessorEnvironment> ctx,
       final FileSystem fs, final Path p, final FSDataInputStreamWrapper in, long size,
-      final CacheConfig cacheConf, final Reference r, StoreFileReader reader) throws IOException;
+      final CacheConfig cacheConf, final Reference r, StoreFileReader reader) throws IOException {
+    return reader;
+  }
 
   /**
    * Called after the creation of Reader for a store file.
@@ -1422,11 +1486,13 @@ public interface RegionObserver extends Coprocessor {
    * @param r original reference file. This will be not null only when reading a split file.
    * @param reader the base reader instance
    * @return The reader to use
-   * @throws IOException
    */
-  StoreFileReader postStoreFileReaderOpen(final ObserverContext<RegionCoprocessorEnvironment> ctx,
+  default StoreFileReader postStoreFileReaderOpen(
+      final ObserverContext<RegionCoprocessorEnvironment> ctx,
       final FileSystem fs, final Path p, final FSDataInputStreamWrapper in, long size,
-      final CacheConfig cacheConf, final Reference r, StoreFileReader reader) throws IOException;
+      final CacheConfig cacheConf, final Reference r, StoreFileReader reader) throws IOException {
+    return reader;
+  }
 
   /**
    * Called after a new cell has been created during an increment operation, but before
@@ -1439,10 +1505,11 @@ public interface RegionObserver extends Coprocessor {
    * @param oldCell old cell containing previous value
    * @param newCell the new cell containing the computed value
    * @return the new cell, possibly changed
-   * @throws IOException
    */
-  Cell postMutationBeforeWAL(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      MutationType opType, Mutation mutation, Cell oldCell, Cell newCell) throws IOException;
+  default Cell postMutationBeforeWAL(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      MutationType opType, Mutation mutation, Cell oldCell, Cell newCell) throws IOException {
+    return newCell;
+  }
 
   /**
    * Called after the ScanQueryMatcher creates ScanDeleteTracker. Implementing
@@ -1452,9 +1519,10 @@ public interface RegionObserver extends Coprocessor {
    * @param ctx the environment provided by the region server
    * @param delTracker the deleteTracker that is created by the QueryMatcher
    * @return the Delete Tracker
-   * @throws IOException
    */
-  DeleteTracker postInstantiateDeleteTracker(
+  default DeleteTracker postInstantiateDeleteTracker(
       final ObserverContext<RegionCoprocessorEnvironment> ctx, DeleteTracker delTracker)
-      throws IOException;
+      throws IOException {
+        return delTracker;
+  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java
index dcd858e..4dd1514 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java
@@ -23,6 +23,7 @@ import java.util.List;
 
 import org.apache.hadoop.hbase.CellScanner;
 import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.MetaMutationAnnotation;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -35,130 +36,123 @@ import org.apache.hadoop.hbase.replication.ReplicationEndpoint;
 /**
  * Defines coprocessor hooks for interacting with operations on the
  * {@link org.apache.hadoop.hbase.regionserver.HRegionServer} process.
+ *
+ * Since most implementations will be interested in only a subset of hooks, this class uses
+ * 'default' empty functions (except few which are non-empty) to avoid redundant empty
+ * implementations.
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public interface RegionServerObserver extends Coprocessor {
-
   /**
    * Called before stopping region server.
-   * @param env An instance of RegionServerCoprocessorEnvironment
-   * @throws IOException Signals that an I/O exception has occurred.
+   * @param ctx the environment to interact with the framework and region server.
    */
-  void preStopRegionServer(
-    final ObserverContext<RegionServerCoprocessorEnvironment> env)
-    throws IOException;
+  default void preStopRegionServer(
+    final ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {}
 
   /**
    * Called before the regions merge.
    * Call {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} to skip the merge.
-   * @throws IOException if an error occurred on the coprocessor
-   * @param ctx
-   * @param regionA
-   * @param regionB
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and region server.
+   * @param regionA region being merged.
+   * @param regionB region being merged.
    */
-  void preMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      final Region regionA, final Region regionB) throws IOException;
+  default void preMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      final Region regionA, final Region regionB) throws IOException {}
 
   /**
    * called after the regions merge.
-   * @param c
-   * @param regionA
-   * @param regionB
-   * @param mergedRegion
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and region server.
+   * @param regionA region being merged.
+   * @param regionB region being merged.
    */
-  void postMerge(final ObserverContext<RegionServerCoprocessorEnvironment> c,
-      final Region regionA, final Region regionB, final Region mergedRegion) throws IOException;
+  default void postMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      final Region regionA, final Region regionB, final Region mergedRegion) throws IOException {}
 
   /**
    * This will be called before PONR step as part of regions merge transaction. Calling
    * {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} rollback the merge
-   * @param ctx
-   * @param regionA
-   * @param regionB
+   * @param ctx the environment to interact with the framework and region server.
+   * @param regionA region being merged.
+   * @param regionB region being merged.
    * @param metaEntries mutations to execute on hbase:meta atomically with regions merge updates.
    *        Any puts or deletes to execute on hbase:meta can be added to the mutations.
-   * @throws IOException
    */
-  void preMergeCommit(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+  default void preMergeCommit(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
       final Region regionA, final Region regionB,
-      @MetaMutationAnnotation List<Mutation> metaEntries) throws IOException;
+      @MetaMutationAnnotation List<Mutation> metaEntries) throws IOException {}
 
   /**
    * This will be called after PONR step as part of regions merge transaction.
-   * @param ctx
-   * @param regionA
-   * @param regionB
-   * @param mergedRegion
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and region server.
+   * @param regionA region being merged.
+   * @param regionB region being merged.
    */
-  void postMergeCommit(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      final Region regionA, final Region regionB, final Region mergedRegion) throws IOException;
+  default void postMergeCommit(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      final Region regionA, final Region regionB, final Region mergedRegion) throws IOException {}
 
   /**
    * This will be called before the roll back of the regions merge.
-   * @param ctx
-   * @param regionA
-   * @param regionB
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and region server.
+   * @param regionA region being merged.
+   * @param regionB region being merged.
    */
-  void preRollBackMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      final Region regionA, final Region regionB) throws IOException;
+  default void preRollBackMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      final Region regionA, final Region regionB) throws IOException {}
 
   /**
    * This will be called after the roll back of the regions merge.
-   * @param ctx
-   * @param regionA
-   * @param regionB
-   * @throws IOException
+   * @param ctx the environment to interact with the framework and region server.
+   * @param regionA region being merged.
+   * @param regionB region being merged.
    */
-  void postRollBackMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      final Region regionA, final Region regionB) throws IOException;
+  default void postRollBackMerge(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      final Region regionA, final Region regionB) throws IOException {}
 
   /**
    * This will be called before executing user request to roll a region server WAL.
-   * @param ctx An instance of ObserverContext
-   * @throws IOException Signals that an I/O exception has occurred.
+   * @param ctx the environment to interact with the framework and region server.
    */
-  void preRollWALWriterRequest(final ObserverContext<RegionServerCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void preRollWALWriterRequest(
+      final ObserverContext<RegionServerCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * This will be called after executing user request to roll a region server WAL.
-   * @param ctx An instance of ObserverContext
-   * @throws IOException Signals that an I/O exception has occurred.
+   * @param ctx the environment to interact with the framework and region server.
    */
-  void postRollWALWriterRequest(final ObserverContext<RegionServerCoprocessorEnvironment> ctx)
-      throws IOException;
+  default void postRollWALWriterRequest(
+      final ObserverContext<RegionServerCoprocessorEnvironment> ctx)
+      throws IOException {}
 
   /**
    * This will be called after the replication endpoint is instantiated.
-   * @param ctx
+   * @param ctx the environment to interact with the framework and region server.
    * @param endpoint - the base endpoint for replication
    * @return the endpoint to use during replication.
    */
-  ReplicationEndpoint postCreateReplicationEndPoint(
-      ObserverContext<RegionServerCoprocessorEnvironment> ctx, ReplicationEndpoint endpoint);
+  default ReplicationEndpoint postCreateReplicationEndPoint(
+      ObserverContext<RegionServerCoprocessorEnvironment> ctx, ReplicationEndpoint endpoint) {
+    return endpoint;
+  }
 
   /**
    * This will be called before executing replication request to shipping log entries.
-   * @param ctx An instance of ObserverContext
+   * @param ctx the environment to interact with the framework and region server.
    * @param entries list of WALEntries to replicate
    * @param cells Cells that the WALEntries refer to (if cells is non-null)
-   * @throws IOException Signals that an I/O exception has occurred.
    */
-  void preReplicateLogEntries(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      List<WALEntry> entries, CellScanner cells) throws IOException;
+  default void preReplicateLogEntries(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      List<WALEntry> entries, CellScanner cells) throws IOException {}
 
   /**
    * This will be called after executing replication request to shipping log entries.
-   * @param ctx An instance of ObserverContext
+   * @param ctx the environment to interact with the framework and region server.
    * @param entries list of WALEntries to replicate
    * @param cells Cells that the WALEntries refer to (if cells is non-null)
-   * @throws IOException Signals that an I/O exception has occurred.
    */
-  void postReplicateLogEntries(final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
-      List<WALEntry> entries, CellScanner cells) throws IOException;
+  default void postReplicateLogEntries(
+      final ObserverContext<RegionServerCoprocessorEnvironment> ctx,
+      List<WALEntry> entries, CellScanner cells) throws IOException {}
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java
index 344a764..d43d667 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java
@@ -23,6 +23,7 @@ import java.io.IOException;
 
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -42,11 +43,14 @@ import org.apache.hadoop.hbase.wal.WALKey;
  *
  * Defines coprocessor hooks for interacting with operations on the
  * {@link org.apache.hadoop.hbase.wal.WAL}.
+ *
+ * Since most implementations will be interested in only a subset of hooks, this class uses
+ * 'default' empty functions (except few which are non-empty) to avoid redundant empty
+ * implementations.
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public interface WALObserver extends Coprocessor {
-
   /**
    * Called before a {@link org.apache.hadoop.hbase.regionserver.wal.WALEdit}
    * is writen to WAL.
@@ -54,30 +58,32 @@ public interface WALObserver extends Coprocessor {
    * @return true if default behavior should be bypassed, false otherwise
    */
   // TODO: return value is not used
-  boolean preWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException;
+  default boolean preWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
+      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {
+    return false;
+  }
 
   /**
    * Called after a {@link org.apache.hadoop.hbase.regionserver.wal.WALEdit}
    * is writen to WAL.
    */
-  void postWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException;
+  default void postWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
+      HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {}
 
   /**
    * Called before rolling the current WAL
    * @param oldPath the path of the current wal that we are replacing
    * @param newPath the path of the wal we are going to create
    */
-  void preWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      Path oldPath, Path newPath) throws IOException;
+  default void preWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
+      Path oldPath, Path newPath) throws IOException {}
 
   /**
    * Called after rolling the current WAL
    * @param oldPath the path of the wal that we replaced
    * @param newPath the path of the wal we have created and now is the current
    */
-  void postWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
-      Path oldPath, Path newPath) throws IOException;
+  default void postWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
+      Path oldPath, Path newPath) throws IOException {}
 }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/package-info.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/package-info.java
index 9932cda..e2113c0 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/package-info.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/package-info.java
@@ -127,11 +127,6 @@ observe and mediate client actions on the region:
   <li>preCheckAndDelete, postCheckAndDelete: Called before and after the client
   calls checkAndDelete().</li>
 </ul>
-You can also extend abstract class <code>BaseRegionObserverCoprocessor</code>
-which
-implements both <code>Coprocessor</code> and <code>RegionObserver</code>.
-In addition, it overrides all methods with default behaviors so you don't
-have to override all of them.
 <p>
 Here's an example of what a simple RegionObserver might look like. This
 example shows how to implement access control for HBase. This
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
index e4b47bc..649273d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
@@ -55,7 +55,6 @@ import org.apache.hadoop.hbase.client.Mutation;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.EndpointObserver;
@@ -236,10 +235,6 @@ public class RegionCoprocessorHost
             hasCustomPostScannerFilterRow = true;
             break out;
           }
-          if (clazz == BaseRegionObserver.class) {
-            // we reached BaseRegionObserver, try next coprocessor
-            break;
-          }
           try {
             clazz.getDeclaredMethod("postScannerFilterRow", ObserverContext.class,
               InternalScanner.class, Cell.class, boolean.class);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationObserver.java
index 03046b4..8326eb8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationObserver.java
@@ -29,9 +29,9 @@ import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.HConstants;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.util.Pair;
 
@@ -40,7 +40,7 @@ import org.apache.hadoop.hbase.util.Pair;
  */
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
-public class ReplicationObserver extends BaseRegionObserver {
+public class ReplicationObserver implements RegionObserver {
   private static final Log LOG = LogFactory.getLog(ReplicationObserver.class);
 
   @Override
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
index aeffe1f..9d4e17a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
@@ -68,14 +68,15 @@ import org.apache.hadoop.hbase.client.Query;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterAndRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.BulkLoadObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.EndpointObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.filter.ByteArrayComparable;
@@ -168,8 +169,7 @@ import com.google.protobuf.Service;
  * </p>
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
-public class AccessController extends BaseMasterAndRegionObserver
-    implements RegionServerObserver,
+public class AccessController implements MasterObserver, RegionObserver, RegionServerObserver,
       AccessControlService.Interface, CoprocessorService, EndpointObserver, BulkLoadObserver {
 
   private static final Log LOG = LogFactory.getLog(AccessController.class);
@@ -2125,7 +2125,7 @@ public class AccessController extends BaseMasterAndRegionObserver
   @Override
   public boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> e,
       final InternalScanner s, final Cell curRowCell, final boolean hasMore) throws IOException {
-    // Impl in BaseRegionObserver might do unnecessary copy for Off heap backed Cells.
+    // 'default' in RegionObserver might do unnecessary copy for Off heap backed Cells.
     return hasMore;
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/CoprocessorWhitelistMasterObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/CoprocessorWhitelistMasterObserver.java
index 61196df..649fbdd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/CoprocessorWhitelistMasterObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/CoprocessorWhitelistMasterObserver.java
@@ -33,7 +33,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
 
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
@@ -48,7 +48,7 @@ import org.apache.hadoop.hbase.util.Bytes;
  * Master observer for restricting coprocessor assignments.
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
-public class CoprocessorWhitelistMasterObserver extends BaseMasterObserver {
+public class CoprocessorWhitelistMasterObserver implements MasterObserver {
 
   public static final String CP_COPROCESSOR_WHITELIST_PATHS_KEY =
       "hbase.coprocessor.region.whitelist.paths";
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java
index e7c75fc..fb685bc 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java
@@ -60,15 +60,16 @@ import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.constraint.ConstraintException;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterAndRegionObserver;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionServerObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.exceptions.DeserializationException;
 import org.apache.hadoop.hbase.exceptions.FailedSanityCheckException;
 import org.apache.hadoop.hbase.filter.Filter;
@@ -120,7 +121,7 @@ import com.google.protobuf.Service;
  * visibility labels
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
-public class VisibilityController extends BaseMasterAndRegionObserver implements
+public class VisibilityController implements MasterObserver, RegionObserver,
     VisibilityLabelsService.Interface, CoprocessorService {
 
   private static final Log LOG = LogFactory.getLog(VisibilityController.class);
@@ -766,7 +767,7 @@ public class VisibilityController extends BaseMasterAndRegionObserver implements
   @Override
   public boolean postScannerFilterRow(final ObserverContext<RegionCoprocessorEnvironment> e,
       final InternalScanner s, final Cell curRowCell, final boolean hasMore) throws IOException {
-    // Impl in BaseRegionObserver might do unnecessary copy for Off heap backed Cells.
+    // 'default' in RegionObserver might do unnecessary copy for Off heap backed Cells.
     return hasMore;
   }
 
@@ -1087,7 +1088,7 @@ public class VisibilityController extends BaseMasterAndRegionObserver implements
    * replicated as string.  The value for the configuration should be
    * 'org.apache.hadoop.hbase.security.visibility.VisibilityController$VisibilityReplication'.
    */
-  public static class VisibilityReplication extends BaseRegionServerObserver {
+  public static class VisibilityReplication implements RegionServerObserver {
     private Configuration conf;
     private VisibilityLabelService visibilityLabelService;
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/WriteSinkCoprocessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/WriteSinkCoprocessor.java
index 6337e28..5ec61d4 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/WriteSinkCoprocessor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/WriteSinkCoprocessor.java
@@ -22,9 +22,9 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.client.Mutation;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.MiniBatchOperationInProgress;
 import org.apache.hadoop.hbase.regionserver.OperationStatus;
 
@@ -58,7 +58,7 @@ import java.util.concurrent.atomic.AtomicLong;
  * 0 row(s) in 0.0050 seconds
  * </p>
  */
-public class WriteSinkCoprocessor extends BaseRegionObserver {
+public class WriteSinkCoprocessor implements RegionObserver {
   private static final Log LOG = LogFactory.getLog(WriteSinkCoprocessor.class);
   private final AtomicLong ops = new AtomicLong();
   private String regionName;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/HConnectionTestingUtility.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/HConnectionTestingUtility.java
index e5ab3e8..682709e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/HConnectionTestingUtility.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/HConnectionTestingUtility.java
@@ -23,15 +23,14 @@ import java.util.concurrent.atomic.AtomicLong;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.RegionLocations;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HRegionLocation;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos;
 import org.apache.hadoop.hbase.util.Threads;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.ipc.RpcControllerFactory;
@@ -160,7 +159,7 @@ public class HConnectionTestingUtility {
   /**
    * This coproceesor sleep 2s at first increment/append rpc call.
    */
-  public static class SleepAtFirstRpcCall extends BaseRegionObserver {
+  public static class SleepAtFirstRpcCall implements RegionObserver {
     static final AtomicLong ct = new AtomicLong(0);
     static final String SLEEP_TIME_CONF_KEY =
         "hbase.coprocessor.SleepAtFirstRpcCall.sleepTime";
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNonMetaRegionLocatorConcurrenyLimit.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNonMetaRegionLocatorConcurrenyLimit.java
index 3918dc9..08f6ace 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNonMetaRegionLocatorConcurrenyLimit.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNonMetaRegionLocatorConcurrenyLimit.java
@@ -37,9 +37,9 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HRegionLocation;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.RegionScanner;
 import org.apache.hadoop.hbase.security.User;
@@ -73,7 +73,7 @@ public class TestAsyncNonMetaRegionLocatorConcurrenyLimit {
 
   private static AtomicInteger MAX_CONCURRENCY = new AtomicInteger(0);
 
-  public static final class CountingRegionObserver extends BaseRegionObserver {
+  public static final class CountingRegionObserver implements RegionObserver {
 
     @Override
     public RegionScanner preScannerOpen(ObserverContext<RegionCoprocessorEnvironment> e, Scan scan,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionLocatorTimeout.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionLocatorTimeout.java
index dfefcc7..bea39b0 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionLocatorTimeout.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionLocatorTimeout.java
@@ -35,9 +35,9 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HRegionLocation;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.exceptions.TimeoutIOException;
 import org.apache.hadoop.hbase.regionserver.RegionScanner;
 import org.apache.hadoop.hbase.security.User;
@@ -65,7 +65,7 @@ public class TestAsyncRegionLocatorTimeout {
 
   private static volatile long SLEEP_MS = 0L;
 
-  public static class SleepRegionObserver extends BaseRegionObserver {
+  public static class SleepRegionObserver implements RegionObserver {
 
     @Override
     public RegionScanner preScannerOpen(ObserverContext<RegionCoprocessorEnvironment> e, Scan scan,
@@ -73,7 +73,7 @@ public class TestAsyncRegionLocatorTimeout {
       if (SLEEP_MS > 0) {
         Threads.sleepWithoutInterrupt(SLEEP_MS);
       }
-      return super.preScannerOpen(e, scan, s);
+      return s;
     }
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableBatch.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableBatch.java
index 308b9e5..ea1aece 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableBatch.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableBatch.java
@@ -39,9 +39,9 @@ import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.ClientTests;
 import org.apache.hadoop.hbase.testclassification.LargeTests;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -202,7 +202,7 @@ public class TestAsyncTableBatch {
     assertEquals(4, Bytes.toInt(appendValue, 8));
   }
 
-  public static final class ErrorInjectObserver extends BaseRegionObserver {
+  public static final class ErrorInjectObserver implements RegionObserver {
 
     @Override
     public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAvoidCellReferencesIntoShippedBlocks.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAvoidCellReferencesIntoShippedBlocks.java
index 1f830a9..ab09c5e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAvoidCellReferencesIntoShippedBlocks.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAvoidCellReferencesIntoShippedBlocks.java
@@ -34,11 +34,11 @@ import org.apache.hadoop.hbase.CellComparator;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MultiRowMutationEndpoint;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.hfile.BlockCache;
 import org.apache.hadoop.hbase.io.hfile.BlockCacheKey;
 import org.apache.hadoop.hbase.io.hfile.CacheConfig;
@@ -251,7 +251,7 @@ public class TestAvoidCellReferencesIntoShippedBlocks {
     }
   }
 
-  public static class CompactorRegionObserver extends BaseRegionObserver {
+  public static class CompactorRegionObserver implements RegionObserver {
     @Override
     public InternalScanner preCompactScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
         Store store, List<? extends KeyValueScanner> scanners, ScanType scanType,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java
index 7f9c0e4..f453662 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java
@@ -40,11 +40,11 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MultiRowMutationEndpoint;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.hfile.BlockCache;
 import org.apache.hadoop.hbase.io.hfile.BlockCacheKey;
 import org.apache.hadoop.hbase.io.hfile.CacheConfig;
@@ -1558,7 +1558,7 @@ public class TestBlockEvictionFromClient {
     }
   }
 
-  public static class CustomInnerRegionObserver extends BaseRegionObserver {
+  public static class CustomInnerRegionObserver implements RegionObserver {
     static final AtomicLong sleepTime = new AtomicLong(0);
     static final AtomicBoolean slowDownNext = new AtomicBoolean(false);
     static final AtomicInteger countOfNext = new AtomicInteger(0);
@@ -1578,14 +1578,13 @@ public class TestBlockEvictionFromClient {
         } catch (InterruptedException e1) {
         }
       }
-      return super.postScannerNext(e, s, results, limit, hasMore);
+      return hasMore;
     }
 
     @Override
     public void postGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
         List<Cell> results) throws IOException {
       slowdownCode(e, true);
-      super.postGetOp(e, get, results);
     }
 
     public static AtomicReference<CountDownLatch> getCdl() {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientOperationInterrupt.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientOperationInterrupt.java
index a480563..c1cb0a6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientOperationInterrupt.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientOperationInterrupt.java
@@ -26,10 +26,10 @@ import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.HBaseConfiguration;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.ClientTests;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -58,7 +58,7 @@ public class TestClientOperationInterrupt {
   private static final byte[] test = Bytes.toBytes("test");
   private static Configuration conf;
 
-  public static class TestCoprocessor extends BaseRegionObserver {
+  public static class TestCoprocessor implements RegionObserver {
     @Override
     public void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> e,
                          final Get get, final List<Cell> results) throws IOException {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestEnableTable.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestEnableTable.java
index 87dea77..80b7208 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestEnableTable.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestEnableTable.java
@@ -42,7 +42,7 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.master.HMaster;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -192,7 +192,7 @@ public class TestEnableTable {
     }
   }
 
-  public  static class MasterSyncObserver extends BaseMasterObserver {
+  public  static class MasterSyncObserver implements MasterObserver {
     volatile CountDownLatch tableCreationLatch = null;
     volatile CountDownLatch tableDeletionLatch = null;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
index 1820f0e..aab586d 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
@@ -68,11 +68,11 @@ import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.Waiter;
 import org.apache.hadoop.hbase.client.metrics.ScanMetrics;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MultiRowMutationEndpoint;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.exceptions.ScannerResetException;
 import org.apache.hadoop.hbase.filter.BinaryComparator;
 import org.apache.hadoop.hbase.filter.CompareFilter;
@@ -554,7 +554,7 @@ public class TestFromClientSide {
    * This is a coprocessor to inject a test failure so that a store scanner.reseek() call will
    * fail with an IOException() on the first call.
    */
-  public static class ExceptionInReseekRegionObserver extends BaseRegionObserver {
+  public static class ExceptionInReseekRegionObserver implements RegionObserver {
     static AtomicLong reqCount = new AtomicLong(0);
     static AtomicBoolean isDoNotRetry = new AtomicBoolean(false); // whether to throw DNRIOE
     static AtomicBoolean throwOnce = new AtomicBoolean(true); // whether to only throw once
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java
index bc5aa8f..3680822 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java
@@ -41,7 +41,6 @@ import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.regionserver.MiniBatchOperationInProgress;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.regionserver.Region;
 import org.apache.hadoop.hbase.regionserver.RegionScanner;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
@@ -827,7 +826,7 @@ public class TestFromClientSide3 {
     return clz.cast(cp);
   }
 
-  public static class WatiingForMultiMutationsObserver extends BaseRegionObserver {
+  public static class WatiingForMultiMutationsObserver implements RegionObserver {
     final CountDownLatch latch = new CountDownLatch(1);
     @Override
     public void postBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
@@ -840,7 +839,7 @@ public class TestFromClientSide3 {
     }
   }
 
-  public static class WatiingForScanObserver extends BaseRegionObserver {
+  public static class WatiingForScanObserver implements RegionObserver {
     private final CountDownLatch latch = new CountDownLatch(1);
     @Override
     public void postBatchMutate(final ObserverContext<RegionCoprocessorEnvironment> c,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHCM.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHCM.java
index 5ff7e77..8475828 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHCM.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHCM.java
@@ -49,9 +49,9 @@ import org.apache.hadoop.hbase.RegionLocations;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.Waiter;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.exceptions.ClientExceptionsUtil;
 import org.apache.hadoop.hbase.exceptions.DeserializationException;
 import org.apache.hadoop.hbase.exceptions.RegionMovedException;
@@ -120,7 +120,7 @@ public class TestHCM {
 /**
 * This copro sleeps 20 second. The first call it fails. The second time, it works.
 */
-  public static class SleepAndFailFirstTime extends BaseRegionObserver {
+  public static class SleepAndFailFirstTime implements RegionObserver {
     static final AtomicLong ct = new AtomicLong(0);
     static final String SLEEP_TIME_CONF_KEY =
         "hbase.coprocessor.SleepAndFailFirstTime.sleepTime";
@@ -172,12 +172,12 @@ public class TestHCM {
       if (ct.incrementAndGet() == 1) {
         throw new IOException("first call I fail");
       }
-      return super.preIncrement(e, increment);
+      return null;
     }
 
   }
 
-  public static class SleepCoprocessor extends BaseRegionObserver {
+  public static class SleepCoprocessor implements RegionObserver {
     public static final int SLEEP_TIME = 5000;
     @Override
     public void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> e,
@@ -195,7 +195,7 @@ public class TestHCM {
     public Result preIncrement(final ObserverContext<RegionCoprocessorEnvironment> e,
                                final Increment increment) throws IOException {
       Threads.sleep(SLEEP_TIME);
-      return super.preIncrement(e, increment);
+      return null;
     }
 
     @Override
@@ -206,7 +206,7 @@ public class TestHCM {
 
   }
 
-  public static class SleepLongerAtFirstCoprocessor extends BaseRegionObserver {
+  public static class SleepLongerAtFirstCoprocessor implements RegionObserver {
     public static final int SLEEP_TIME = 2000;
     static final AtomicLong ct = new AtomicLong(0);
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobCloneSnapshotFromClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobCloneSnapshotFromClient.java
index 27b1ba3..b938f7e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobCloneSnapshotFromClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobCloneSnapshotFromClient.java
@@ -27,9 +27,9 @@ import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.master.cleaner.TimeToLiveHFileCleaner;
 import org.apache.hadoop.hbase.mob.MobConstants;
 import org.apache.hadoop.hbase.snapshot.MobSnapshotTestingUtils;
@@ -137,7 +137,7 @@ public class TestMobCloneSnapshotFromClient extends TestCloneSnapshotFromClient
   /**
    * This coprocessor is used to delay the flush.
    */
-  public static class DelayFlushCoprocessor extends BaseRegionObserver {
+  public static class DelayFlushCoprocessor implements RegionObserver {
     @Override
     public void preFlush(ObserverContext<RegionCoprocessorEnvironment> e) throws IOException {
       if (delayFlush) {
@@ -150,7 +150,6 @@ public class TestMobCloneSnapshotFromClient extends TestCloneSnapshotFromClient
           throw new InterruptedIOException(e1.getMessage());
         }
       }
-      super.preFlush(e);
     }
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicaWithCluster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicaWithCluster.java
index 3a08088..22e88da 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicaWithCluster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicaWithCluster.java
@@ -41,9 +41,9 @@ import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.Waiter;
 import org.apache.hadoop.hbase.client.replication.ReplicationAdmin;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.ipc.RpcControllerFactory;
 import org.apache.hadoop.hbase.regionserver.RegionScanner;
 import org.apache.hadoop.hbase.regionserver.RegionServerStoppedException;
@@ -78,7 +78,7 @@ public class TestReplicaWithCluster {
   /**
    * This copro is used to synchronize the tests.
    */
-  public static class SlowMeCopro extends BaseRegionObserver {
+  public static class SlowMeCopro implements RegionObserver {
     static final AtomicLong sleepTime = new AtomicLong(0);
     static final AtomicReference<CountDownLatch> cdl = new AtomicReference<>(new CountDownLatch(0));
 
@@ -114,7 +114,7 @@ public class TestReplicaWithCluster {
   /**
    * This copro is used to simulate region server down exception for Get and Scan
    */
-  public static class RegionServerStoppedCopro extends BaseRegionObserver {
+  public static class RegionServerStoppedCopro implements RegionObserver {
 
     public RegionServerStoppedCopro() {
     }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicasClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicasClient.java
index 40e3bde..7cbb5ad 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicasClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicasClient.java
@@ -46,9 +46,9 @@ import org.apache.hadoop.hbase.KeyValue;
 import org.apache.hadoop.hbase.NotServingRegionException;
 import org.apache.hadoop.hbase.RegionLocations;
 import org.apache.hadoop.hbase.TableNotFoundException;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.shaded.protobuf.RequestConverter;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;
@@ -98,7 +98,7 @@ public class TestReplicasClient {
   /**
    * This copro is used to synchronize the tests.
    */
-  public static class SlowMeCopro extends BaseRegionObserver {
+  public static class SlowMeCopro implements RegionObserver {
     static final AtomicLong sleepTime = new AtomicLong(0);
     static final AtomicBoolean slowDownNext = new AtomicBoolean(false);
     static final AtomicInteger countOfNext = new AtomicInteger(0);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java
index dfd1988..46b14aa 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java
@@ -39,7 +39,7 @@ import org.apache.hadoop.hbase.wal.WALKey;
  * passed-in WALEdit, i.e, ignore specified columns when writing, or add a KeyValue. On the other
  * side, it checks whether the ignored column is still in WAL when Restoreed at region reconstruct.
  */
-public class SampleRegionWALObserver extends BaseRegionObserver implements WALObserver {
+public class SampleRegionWALObserver implements WALObserver, RegionObserver {
 
   private static final Log LOG = LogFactory.getLog(SampleRegionWALObserver.class);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java
index d4511b9..e6ede81 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java
@@ -74,7 +74,7 @@ import org.apache.hadoop.hbase.wal.WALKey;
  * A sample region observer that tests the RegionObserver interface.
  * It works with TestRegionObserverInterface to provide the test case.
  */
-public class SimpleRegionObserver extends BaseRegionObserver {
+public class SimpleRegionObserver implements RegionObserver {
 
   final AtomicInteger ctBeforeDelete = new AtomicInteger(1);
   final AtomicInteger ctPreOpen = new AtomicInteger(0);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
index a479497..21d9861 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
@@ -144,7 +144,7 @@ public class TestCoprocessorInterface {
     }
   }
 
-  public static class CoprocessorImpl extends BaseRegionObserver {
+  public static class CoprocessorImpl implements RegionObserver {
 
     private boolean startCalled;
     private boolean stopCalled;
@@ -237,7 +237,7 @@ public class TestCoprocessorInterface {
     }
   }
 
-  public static class CoprocessorII extends BaseRegionObserver {
+  public static class CoprocessorII implements RegionObserver {
     private ConcurrentMap<String, Object> sharedData;
     @Override
     public void start(CoprocessorEnvironment e) {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java
index 2b21a2c..16bb6d9 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java
@@ -95,15 +95,13 @@ public class TestCoprocessorMetrics {
   /**
    * MasterObserver that has a Timer metric for create table operation.
    */
-  public static class CustomMasterObserver extends BaseMasterObserver {
+  public static class CustomMasterObserver implements MasterObserver {
     private Timer createTableTimer;
     private long start = Long.MIN_VALUE;
 
     @Override
     public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
                                HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-      super.preCreateTable(ctx, desc, regions);
-
       // we rely on the fact that there is only 1 instance of our MasterObserver
       this.start = System.currentTimeMillis();
     }
@@ -111,7 +109,6 @@ public class TestCoprocessorMetrics {
     @Override
     public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
                                 HTableDescriptor desc, HRegionInfo[] regions) throws IOException {
-      super.postCreateTable(ctx, desc, regions);
       if (this.start > 0) {
         long time = System.currentTimeMillis() - start;
         LOG.info("Create table took: " + time);
@@ -121,7 +118,6 @@ public class TestCoprocessorMetrics {
 
     @Override
     public void start(CoprocessorEnvironment env) throws IOException {
-      super.start(env);
       if (env instanceof MasterCoprocessorEnvironment) {
         MetricRegistry registry =
             ((MasterCoprocessorEnvironment) env).getMetricRegistryForMaster();
@@ -134,7 +130,7 @@ public class TestCoprocessorMetrics {
   /**
    * RegionServerObserver that has a Counter for rollWAL requests.
    */
-  public static class CustomRegionServerObserver extends BaseRegionServerObserver {
+  public static class CustomRegionServerObserver implements RegionServerObserver {
     /** This is the Counter metric object to keep track of the current count across invocations */
     private Counter rollWALCounter;
     @Override
@@ -142,12 +138,10 @@ public class TestCoprocessorMetrics {
         throws IOException {
       // Increment the Counter whenever the coprocessor is called
       rollWALCounter.increment();
-      super.postRollWALWriterRequest(ctx);
     }
 
     @Override
     public void start(CoprocessorEnvironment env) throws IOException {
-      super.start(env);
       if (env instanceof RegionServerCoprocessorEnvironment) {
         MetricRegistry registry =
             ((RegionServerCoprocessorEnvironment) env).getMetricRegistryForRegionServer();
@@ -162,20 +156,18 @@ public class TestCoprocessorMetrics {
   /**
    * WALObserver that has a Counter for walEdits written.
    */
-  public static class CustomWALObserver extends BaseWALObserver {
+  public static class CustomWALObserver implements WALObserver {
     private Counter walEditsCount;
 
     @Override
     public void postWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
                              HRegionInfo info, org.apache.hadoop.hbase.wal.WALKey logKey,
                              WALEdit logEdit) throws IOException {
-      super.postWALWrite(ctx, info, logKey, logEdit);
       walEditsCount.increment();
     }
 
     @Override
     public void start(CoprocessorEnvironment env) throws IOException {
-      super.start(env);
       if (env instanceof WALCoprocessorEnvironment) {
         MetricRegistry registry =
             ((WALCoprocessorEnvironment) env).getMetricRegistryForRegionServer();
@@ -190,20 +182,17 @@ public class TestCoprocessorMetrics {
   /**
    * RegionObserver that has a Counter for preGet()
    */
-  public static class CustomRegionObserver extends BaseRegionObserver {
+  public static class CustomRegionObserver implements RegionObserver {
     private Counter preGetCounter;
 
     @Override
     public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
                          List<Cell> results) throws IOException {
-      super.preGetOp(e, get, results);
       preGetCounter.increment();
     }
 
     @Override
     public void start(CoprocessorEnvironment env) throws IOException {
-      super.start(env);
-
       if (env instanceof RegionCoprocessorEnvironment) {
         MetricRegistry registry =
             ((RegionCoprocessorEnvironment) env).getMetricRegistryForRegionServer();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java
index bd89744..04d8c8c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java
@@ -87,7 +87,7 @@ public class TestHTableWrapper {
   private static final byte[] bytes4 = Bytes.toBytes(4);
   private static final byte[] bytes5 = Bytes.toBytes(5);
 
-  static class DummyRegionObserver extends BaseRegionObserver {
+  static class DummyRegionObserver implements RegionObserver {
   }
 
   private Table hTableInterface;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java
index 6eeb6d1..5130a41 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java
@@ -96,7 +96,7 @@ public class TestMasterCoprocessorExceptionWithAbort {
    }
   }
 
-  public static class BuggyMasterObserver extends BaseMasterObserver {
+  public static class BuggyMasterObserver implements MasterObserver {
     private boolean preCreateTableCalled;
     private boolean postCreateTableCalled;
     private boolean startCalled;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java
index ddc9cb8..7c5d8a1 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java
@@ -72,7 +72,7 @@ public class TestMasterCoprocessorExceptionWithRemove {
     }
   }
 
-  public static class BuggyMasterObserver extends BaseMasterObserver {
+  public static class BuggyMasterObserver implements MasterObserver {
     private boolean preCreateTableCalled;
     private boolean postCreateTableCalled;
     private boolean startCalled;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestOpenTableInCoprocessor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestOpenTableInCoprocessor.java
index 7a51252..b75fc79 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestOpenTableInCoprocessor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestOpenTableInCoprocessor.java
@@ -63,7 +63,7 @@ public class TestOpenTableInCoprocessor {
   /**
    * Custom coprocessor that just copies the write to another table.
    */
-  public static class SendToOtherTableCoprocessor extends BaseRegionObserver {
+  public static class SendToOtherTableCoprocessor implements RegionObserver {
 
     @Override
     public void prePut(final ObserverContext<RegionCoprocessorEnvironment> e, final Put put,
@@ -80,7 +80,7 @@ public class TestOpenTableInCoprocessor {
   /**
    * Coprocessor that creates an HTable with a pool to write to another table
    */
-  public static class CustomThreadPoolCoprocessor extends BaseRegionObserver {
+  public static class CustomThreadPoolCoprocessor implements RegionObserver {
 
     /**
      * Get a pool that has only ever one thread. A second action added to the pool (running
@@ -145,8 +145,10 @@ public class TestOpenTableInCoprocessor {
     runCoprocessorConnectionToRemoteTable(CustomThreadPoolCoprocessor.class, completedWithPool);
   }
 
-  private void runCoprocessorConnectionToRemoteTable(Class<? extends BaseRegionObserver> clazz,
-      boolean[] completeCheck) throws Throwable {
+  private void runCoprocessorConnectionToRemoteTable(Class clazz, boolean[] completeCheck)
+      throws Throwable {
+    // Check if given class implements RegionObserver.
+    assert(RegionObserver.class.isAssignableFrom(clazz));
     HTableDescriptor primary = new HTableDescriptor(primaryTable);
     primary.addFamily(new HColumnDescriptor(family));
     // add our coprocessor
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverBypass.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverBypass.java
index 2e63856..fb87ff6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverBypass.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverBypass.java
@@ -204,7 +204,7 @@ public class TestRegionObserverBypass {
     t.delete(d);
   }
 
-  public static class TestCoprocessor extends BaseRegionObserver {
+  public static class TestCoprocessor implements RegionObserver {
     @Override
     public void prePut(final ObserverContext<RegionCoprocessorEnvironment> e,
         final Put put, final WALEdit edit, final Durability durability)
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverForAddingMutationsFromCoprocessors.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverForAddingMutationsFromCoprocessors.java
index 98e930a..58af88e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverForAddingMutationsFromCoprocessors.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverForAddingMutationsFromCoprocessors.java
@@ -194,7 +194,7 @@ public class TestRegionObserverForAddingMutationsFromCoprocessors {
     }
   }
 
-  public static class TestMultiMutationCoprocessor extends BaseRegionObserver {
+  public static class TestMultiMutationCoprocessor implements RegionObserver {
     @Override
     public void preBatchMutate(ObserverContext<RegionCoprocessorEnvironment> c,
         MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
@@ -211,7 +211,7 @@ public class TestRegionObserverForAddingMutationsFromCoprocessors {
     }
   }
 
-  public static class TestDeleteCellCoprocessor extends BaseRegionObserver {
+  public static class TestDeleteCellCoprocessor implements RegionObserver {
     @Override
     public void preBatchMutate(ObserverContext<RegionCoprocessorEnvironment> c,
         MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
@@ -230,7 +230,7 @@ public class TestRegionObserverForAddingMutationsFromCoprocessors {
     }
   }
 
-  public static class TestDeleteFamilyCoprocessor extends BaseRegionObserver {
+  public static class TestDeleteFamilyCoprocessor implements RegionObserver {
     @Override
     public void preBatchMutate(ObserverContext<RegionCoprocessorEnvironment> c,
         MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
@@ -249,7 +249,7 @@ public class TestRegionObserverForAddingMutationsFromCoprocessors {
     }
   }
 
-  public static class TestDeleteRowCoprocessor extends BaseRegionObserver {
+  public static class TestDeleteRowCoprocessor implements RegionObserver {
     @Override
     public void preBatchMutate(ObserverContext<RegionCoprocessorEnvironment> c,
         MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
@@ -268,7 +268,7 @@ public class TestRegionObserverForAddingMutationsFromCoprocessors {
     }
   }
 
-  public static class TestWALObserver extends BaseWALObserver {
+  public static class TestWALObserver implements WALObserver {
     static WALEdit savedEdit = null;
     @Override
     public void postWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> ctx,
@@ -276,7 +276,6 @@ public class TestRegionObserverForAddingMutationsFromCoprocessors {
       if (info.getTable().equals(TableName.valueOf("testCPMutationsAreWrittenToWALEdit"))) {
         savedEdit = logEdit;
       }
-      super.postWALWrite(ctx, info, logKey, logEdit);
     }
   }
 }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java
index 94cefcf..2e0db44 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java
@@ -409,7 +409,7 @@ public class TestRegionObserverInterface {
   }
 
   /* Overrides compaction to only output rows with keys that are even numbers */
-  public static class EvenOnlyCompactor extends BaseRegionObserver {
+  public static class EvenOnlyCompactor implements RegionObserver {
     long lastCompaction;
     long lastFlush;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
index 5abca77..ce36af8 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
@@ -98,16 +98,15 @@ public class TestRegionObserverScannerOpenHook {
   }
 
   /**
-   * Do the same logic as the {@link BaseRegionObserver}. Needed since {@link BaseRegionObserver} is
-   * an abstract class.
+   * Do the default logic in {@link RegionObserver} interface.
    */
-  public static class EmptyRegionObsever extends BaseRegionObserver {
+  public static class EmptyRegionObsever implements RegionObserver {
   }
 
   /**
    * Don't return any data from a scan by creating a custom {@link StoreScanner}.
    */
-  public static class NoDataFromScan extends BaseRegionObserver {
+  public static class NoDataFromScan implements RegionObserver {
     @Override
     public KeyValueScanner preStoreScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
         Store store, Scan scan, NavigableSet<byte[]> targetCols, KeyValueScanner s, long readPt)
@@ -120,7 +119,7 @@ public class TestRegionObserverScannerOpenHook {
   /**
    * Don't allow any data in a flush by creating a custom {@link StoreScanner}.
    */
-  public static class NoDataFromFlush extends BaseRegionObserver {
+  public static class NoDataFromFlush implements RegionObserver {
     @Override
     public InternalScanner preFlushScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
         Store store, KeyValueScanner memstoreScanner, InternalScanner s) throws IOException {
@@ -136,7 +135,7 @@ public class TestRegionObserverScannerOpenHook {
    * Don't allow any data to be written out in the compaction by creating a custom
    * {@link StoreScanner}.
    */
-  public static class NoDataFromCompaction extends BaseRegionObserver {
+  public static class NoDataFromCompaction implements RegionObserver {
     @Override
     public InternalScanner preCompactScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
         Store store, List<? extends KeyValueScanner> scanners, ScanType scanType,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java
index 723edcb..2e44dee 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java
@@ -48,7 +48,7 @@ public class TestRegionObserverStacking extends TestCase {
     = new HBaseTestingUtility();
   static final Path DIR = TEST_UTIL.getDataTestDir();
 
-  public static class ObserverA extends BaseRegionObserver {
+  public static class ObserverA implements RegionObserver {
     long id;
     @Override
     public void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
@@ -63,7 +63,7 @@ public class TestRegionObserverStacking extends TestCase {
     }
   }
 
-  public static class ObserverB extends BaseRegionObserver {
+  public static class ObserverB implements RegionObserver {
     long id;
     @Override
     public void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
@@ -78,7 +78,7 @@ public class TestRegionObserverStacking extends TestCase {
     }
   }
 
-  public static class ObserverC extends BaseRegionObserver {
+  public static class ObserverC implements RegionObserver {
     long id;
 
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java
index 737f322..26f8dea 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java
@@ -41,6 +41,7 @@ import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.LargeTests;
 import org.apache.hadoop.hbase.testclassification.MapReduceTests;
 import org.apache.hadoop.hbase.client.Durability;
@@ -49,7 +50,6 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.regionserver.Region;
@@ -247,7 +247,7 @@ public class TestImportTSVWithOperationAttributes implements Configurable {
     assertTrue(verified);
   }
 
-  public static class OperationAttributesTestController extends BaseRegionObserver {
+  public static class OperationAttributesTestController implements RegionObserver {
 
     @Override
     public void prePut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java
index 6e298a3..21cae54 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java
@@ -34,11 +34,11 @@ import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.LargeTests;
 import org.apache.hadoop.hbase.testclassification.MapReduceTests;
 import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.Put;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.regionserver.Region;
@@ -156,7 +156,7 @@ public class TestImportTSVWithTTLs implements Configurable {
     return tool;
   }
 
-  public static class TTLCheckingObserver extends BaseRegionObserver {
+  public static class TTLCheckingObserver implements RegionObserver {
 
     @Override
     public void prePut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java
index 97f7865..242b012 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java
@@ -27,7 +27,6 @@ import static org.junit.Assert.fail;
 
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -59,7 +58,6 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.coordination.ZkCoordinatedStateManager;
 import org.apache.hadoop.hbase.client.TableState;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
@@ -1359,7 +1357,7 @@ public class TestAssignmentManagerOnCluster {
     }
   }
 
-  public static class MyRegionObserver extends BaseRegionObserver {
+  public static class MyRegionObserver implements RegionObserver {
     // If enabled, fail all preClose calls
     static AtomicBoolean preCloseEnabled = new AtomicBoolean(false);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/compactions/TestMobCompactor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/compactions/TestMobCompactor.java
index f0584d5..7dcff2c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/compactions/TestMobCompactor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/compactions/TestMobCompactor.java
@@ -68,9 +68,9 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.HFileLink;
 import org.apache.hadoop.hbase.io.crypto.KeyProviderForTesting;
 import org.apache.hadoop.hbase.io.crypto.aes.AES;
@@ -750,7 +750,7 @@ public class TestMobCompactor {
    * This copro overwrites the default compaction policy. It always chooses two latest
    * hfiles and compacts them into a new one.
    */
-  public static class CompactTwoLatestHfilesCopro extends BaseRegionObserver {
+  public static class CompactTwoLatestHfilesCopro implements RegionObserver {
     @Override
     public void preCompactSelection(final ObserverContext<RegionCoprocessorEnvironment> c,
       final Store store, final List<StoreFile> candidates, final CompactionRequest request)
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
index 0190b8f..cc79915 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
@@ -55,13 +55,12 @@ import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.RegionLocator;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionServerObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.mapreduce.TableInputFormatBase;
@@ -282,7 +281,7 @@ public class TestNamespaceAuditor {
     assertNull("Namespace state not found to be null.", stateInfo);
   }
 
-  public static class CPRegionServerObserver extends BaseRegionServerObserver {
+  public static class CPRegionServerObserver implements RegionServerObserver {
     private volatile boolean shouldFailMerge = false;
 
     public void failMerge(boolean fail) {
@@ -308,7 +307,7 @@ public class TestNamespaceAuditor {
     }
   }
 
-  public static class CPMasterObserver extends BaseMasterObserver {
+  public static class CPMasterObserver implements MasterObserver {
     private volatile boolean shouldFailMerge = false;
 
     public void failMerge(boolean fail) {
@@ -591,7 +590,7 @@ public class TestNamespaceAuditor {
     return Bytes.toBytes("" + key);
   }
 
-  public static class CustomObserver extends BaseRegionObserver{
+  public static class CustomObserver implements RegionObserver {
     volatile CountDownLatch postSplit;
     volatile CountDownLatch postCompact;
 
@@ -676,7 +675,7 @@ public class TestNamespaceAuditor {
         .getMasterQuotaManager().getNamespaceQuotaManager();
   }
 
-  public static class MasterSyncObserver extends BaseMasterObserver {
+  public static class MasterSyncObserver implements MasterObserver {
     volatile CountDownLatch tableDeletionLatch;
     static boolean throwExceptionInPreCreateTableAction;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/NoOpScanPolicyObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/NoOpScanPolicyObserver.java
index 025a28d..2d096fa 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/NoOpScanPolicyObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/NoOpScanPolicyObserver.java
@@ -26,9 +26,9 @@ import java.util.NavigableSet;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 
 /**
  * RegionObserver that just reimplements the default behavior,
@@ -37,7 +37,7 @@ import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
  * {@link TestCompactionWithCoprocessor} to make sure that a wide range
  * of functionality still behaves as expected.
  */
-public class NoOpScanPolicyObserver extends BaseRegionObserver {
+public class NoOpScanPolicyObserver implements RegionObserver {
   /**
    * Reimplement the default behavior
    */
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionServerBulkLoad.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionServerBulkLoad.java
index 67897a2..398711e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionServerBulkLoad.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionServerBulkLoad.java
@@ -53,9 +53,9 @@ import org.apache.hadoop.hbase.client.RpcRetryingCallerFactory;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.SecureBulkLoadClient;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.compress.Compression;
 import org.apache.hadoop.hbase.io.compress.Compression.Algorithm;
 import org.apache.hadoop.hbase.io.hfile.CacheConfig;
@@ -248,7 +248,7 @@ public class TestHRegionServerBulkLoad {
     }
   }
 
-  public static class MyObserver extends BaseRegionObserver {
+  public static class MyObserver implements RegionObserver {
     static int sleepDuration;
     @Override
     public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java
index c89860c..ac33f15 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerRetriableFailure.java
@@ -36,9 +36,9 @@ import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.RegionServerTests;
 import org.apache.hadoop.hbase.testclassification.LargeTests;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -64,7 +64,7 @@ public class TestScannerRetriableFailure {
 
   @Rule public TestTableName TEST_TABLE = new TestTableName();
 
-  public static class FaultyScannerObserver extends BaseRegionObserver {
+  public static class FaultyScannerObserver implements RegionObserver {
     private int faults = 0;
 
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithCorruptHFile.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithCorruptHFile.java
index a1719fc..6cfff43 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithCorruptHFile.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithCorruptHFile.java
@@ -32,9 +32,9 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.hfile.CorruptHFileException;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -65,7 +65,7 @@ public class TestScannerWithCorruptHFile {
     TEST_UTIL.shutdownMiniCluster();
   }
 
-  public static class CorruptHFileCoprocessor extends BaseRegionObserver {
+  public static class CorruptHFileCoprocessor implements RegionObserver {
     @Override
     public boolean preScannerNext(ObserverContext<RegionCoprocessorEnvironment> e,
       InternalScanner s, List<Result> results, int limit, boolean hasMore) throws IOException {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
index 966d794..81846df 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
@@ -66,7 +66,7 @@ import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.client.TestReplicasClient.SlowMeCopro;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.master.AssignmentManager;
@@ -268,7 +268,7 @@ public class TestSplitTransactionOnCluster {
     assertEquals(2, cluster.getRegions(tableName).size());
   }
 
-  public static class FailingSplitMasterObserver extends BaseMasterObserver {
+  public static class FailingSplitMasterObserver implements MasterObserver {
     volatile CountDownLatch latch;
     @Override
     public void start(CoprocessorEnvironment e) throws IOException {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java
index 32c7845..310f5cf 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java
@@ -49,10 +49,10 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.io.encoding.DataBlockEncoding;
 import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
@@ -545,7 +545,7 @@ public class TestTags {
     }
   }
 
-  public static class TestCoprocessorForTags extends BaseRegionObserver {
+  public static class TestCoprocessorForTags implements RegionObserver {
 
     public static volatile boolean checkTagPresence = false;
     public static List<Tag> tags = null;
@@ -589,14 +589,14 @@ public class TestTags {
     public Result preIncrement(ObserverContext<RegionCoprocessorEnvironment> e, Increment increment)
         throws IOException {
       updateMutationAddingTags(increment);
-      return super.preIncrement(e, increment);
+      return null;
     }
 
     @Override
     public Result preAppend(ObserverContext<RegionCoprocessorEnvironment> e, Append append)
         throws IOException {
       updateMutationAddingTags(append);
-      return super.preAppend(e, append);
+      return null;
     }
 
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java
index 3b6718a..cfc96c2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java
@@ -55,16 +55,13 @@ import org.apache.hadoop.hbase.client.Get;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.client.replication.ReplicationAdmin;
 import org.apache.hadoop.hbase.client.replication.ReplicationSerDeHelper;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.mapreduce.LoadIncrementalHFiles;
 import org.apache.hadoop.hbase.regionserver.HRegion;
-import org.apache.hadoop.hbase.regionserver.HRegionServer;
-import org.apache.hadoop.hbase.regionserver.RSRpcServices;
 import org.apache.hadoop.hbase.regionserver.wal.WALActionsListener;
 import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
 import org.apache.hadoop.hbase.replication.regionserver.TestSourceFSConfigurationProvider;
@@ -80,8 +77,6 @@ import org.junit.Before;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 
-import com.google.protobuf.ServiceException;
-
 @Category({ReplicationTests.class, LargeTests.class})
 public class TestMasterReplication {
 
@@ -717,7 +712,7 @@ public class TestMasterReplication {
    * Use a coprocessor to count puts and deletes. as KVs would be replicated back with the same
    * timestamp there is otherwise no way to count them.
    */
-  public static class CoprocessorCounter extends BaseRegionObserver {
+  public static class CoprocessorCounter implements RegionObserver {
     private int nCount = 0;
     private int nDelete = 0;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWithTags.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWithTags.java
index f2c1c23..ebf00e3 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWithTags.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWithTags.java
@@ -51,10 +51,10 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.client.replication.ReplicationAdmin;
 import org.apache.hadoop.hbase.codec.KeyValueCodecWithTags;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
 import org.apache.hadoop.hbase.testclassification.LargeTests;
 import org.apache.hadoop.hbase.testclassification.ReplicationTests;
@@ -197,7 +197,7 @@ public class TestReplicationWithTags {
     }
   }
 
-  public static class TestCoprocessorForTagsAtSource extends BaseRegionObserver {
+  public static class TestCoprocessorForTagsAtSource implements RegionObserver {
     @Override
     public void prePut(final ObserverContext<RegionCoprocessorEnvironment> e, final Put put,
         final WALEdit edit, final Durability durability) throws IOException {
@@ -230,7 +230,7 @@ public class TestReplicationWithTags {
     }
   }
 
-  public static class TestCoprocessorForTagsAtSink extends BaseRegionObserver {
+  public static class TestCoprocessorForTagsAtSink implements RegionObserver {
     public static List<Tag> tags = null;
 
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpointNoMaster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpointNoMaster.java
index 7b40d2a..dcfa736 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpointNoMaster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpointNoMaster.java
@@ -42,10 +42,10 @@ import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.RegionLocator;
 import org.apache.hadoop.hbase.client.RpcRetryingCallerFactory;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseWALObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.WALCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.WALObserver;
 import org.apache.hadoop.hbase.ipc.RpcControllerFactory;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.ReplicateWALEntryResponse;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
@@ -148,7 +148,7 @@ public class TestRegionReplicaReplicationEndpointNoMaster {
 
   static ConcurrentLinkedQueue<Entry> entries = new ConcurrentLinkedQueue<Entry>();
 
-  public static class WALEditCopro extends BaseWALObserver {
+  public static class WALEditCopro implements WALObserver {
     public WALEditCopro() {
       entries.clear();
     }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/SecureTestUtil.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/SecureTestUtil.java
index 067e1f5..a6f11f2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/SecureTestUtil.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/SecureTestUtil.java
@@ -49,7 +49,7 @@ import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.RetriesExhaustedWithDetailsException;
 import org.apache.hadoop.hbase.client.Admin;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
@@ -622,7 +622,7 @@ public class SecureTestUtil {
     });
   }
 
-  public static class MasterSyncObserver extends BaseMasterObserver {
+  public static class MasterSyncObserver implements MasterObserver {
     volatile CountDownLatch tableCreationLatch = null;
     volatile CountDownLatch tableDeletionLatch = null;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCoprocessorWhitelistMasterObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCoprocessorWhitelistMasterObserver.java
index 87fd6ab..aeb909e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCoprocessorWhitelistMasterObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCoprocessorWhitelistMasterObserver.java
@@ -39,6 +39,7 @@ import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.testclassification.SecurityTests;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -289,6 +290,8 @@ public class TestCoprocessorWhitelistMasterObserver extends SecureTestUtil {
       admin.listTables("^" + TEST_TABLE.getNameAsString() + "$"));
   }
 
+  public static class TestRegionObserver implements RegionObserver {}
+
   /**
    * Test a table creation including a coprocessor path
    * which is on the classpath
@@ -308,7 +311,7 @@ public class TestCoprocessorWhitelistMasterObserver extends SecureTestUtil {
     HTableDescriptor htd = new HTableDescriptor(TEST_TABLE);
     HColumnDescriptor hcd = new HColumnDescriptor(TEST_FAMILY);
     htd.addFamily(hcd);
-    htd.addCoprocessor("org.apache.hadoop.hbase.coprocessor.BaseRegionObserver");
+    htd.addCoprocessor(TestRegionObserver.class.getName());
     Connection connection = ConnectionFactory.createConnection(conf);
     Admin admin = connection.getAdmin();
     LOG.info("Creating Table");
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsReplication.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsReplication.java
index 2181ddb..a10e3a9 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsReplication.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsReplication.java
@@ -56,12 +56,11 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.client.replication.ReplicationAdmin;
 import org.apache.hadoop.hbase.codec.KeyValueCodecWithTags;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsResponse;
 import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
 import org.apache.hadoop.hbase.replication.ReplicationEndpoint;
@@ -394,7 +393,7 @@ public class TestVisibilityLabelsReplication {
   // A simple BaseRegionbserver impl that allows to add a non-visibility tag from the
   // attributes of the Put mutation.  The existing cells in the put mutation is overwritten
   // with a new cell that has the visibility tags and the non visibility tag
-  public static class SimpleCP extends BaseRegionObserver {
+  public static class SimpleCP implements RegionObserver {
     @Override
     public void prePut(ObserverContext<RegionCoprocessorEnvironment> e, Put m, WALEdit edit,
         Durability durability) throws IOException {
@@ -423,7 +422,7 @@ public class TestVisibilityLabelsReplication {
     }
   }
 
-  public static class TestCoprocessorForTagsAtSink extends BaseRegionObserver {
+  public static class TestCoprocessorForTagsAtSink implements RegionObserver {
     public static List<Tag> tags = null;
 
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestSnapshotClientRetries.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestSnapshotClientRetries.java
index fd0144c..c49595e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestSnapshotClientRetries.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestSnapshotClientRetries.java
@@ -28,7 +28,7 @@ import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableName;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -74,7 +74,7 @@ public class TestSnapshotClientRetries {
     cloneAndAssertOneRetry(snapshotName, TEST_TABLE.getTableName());
   }
 
-  public static class MasterSyncObserver extends BaseMasterObserver {
+  public static class MasterSyncObserver implements MasterObserver {
     volatile AtomicInteger snapshotCount = null;
     volatile AtomicInteger cloneCount = null;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java
index 574d546..b7fb9f7 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java
@@ -58,7 +58,7 @@ import org.apache.hadoop.hbase.client.RegionLocator;
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseMasterObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.master.RegionStates;
@@ -590,7 +590,7 @@ public class BaseTestHBaseFsck {
   @org.junit.Rule
   public TestName name = new TestName();
 
-  public static class MasterSyncObserver extends BaseMasterObserver {
+  public static class MasterSyncObserver implements MasterObserver {
     volatile CountDownLatch tableCreationLatch = null;
     volatile CountDownLatch tableDeletionLatch = null;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
index a9297de..304717a 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
@@ -41,16 +41,14 @@ import org.apache.hadoop.hbase.KeyValueUtil;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.Get;
-import org.apache.hadoop.hbase.client.IsolationLevel;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
-import org.apache.hadoop.hbase.regionserver.HStore;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.KeyValueScanner;
 import org.apache.hadoop.hbase.regionserver.ScanInfo;
@@ -211,7 +209,7 @@ public class TestCoprocessorScanPolicy {
     EnvironmentEdgeManager.reset();
   }
 
-  public static class ScanObserver extends BaseRegionObserver {
+  public static class ScanObserver implements RegionObserver {
     private Map<TableName, Long> ttls =
         new HashMap<TableName, Long>();
     private Map<TableName, Integer> versions =
diff --git a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/ErrorThrowingGetObserver.java b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/ErrorThrowingGetObserver.java
index 810dabc..fcd80d0 100644
--- a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/ErrorThrowingGetObserver.java
+++ b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/ErrorThrowingGetObserver.java
@@ -26,9 +26,9 @@ import org.apache.hadoop.hbase.NotServingRegionException;
 import org.apache.hadoop.hbase.RegionTooBusyException;
 import org.apache.hadoop.hbase.UnknownScannerException;
 import org.apache.hadoop.hbase.client.Get;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.exceptions.FailedSanityCheckException;
 import org.apache.hadoop.hbase.exceptions.OutOfOrderScannerNextException;
 import org.apache.hadoop.hbase.exceptions.RegionMovedException;
@@ -42,7 +42,7 @@ import java.util.List;
 /**
  * Simple test coprocessor for injecting exceptions on Get requests.
  */
-public class ErrorThrowingGetObserver extends BaseRegionObserver {
+public class ErrorThrowingGetObserver implements RegionObserver {
   public static final String SHOULD_ERROR_ATTRIBUTE = "error";
 
   @Override
@@ -75,7 +75,6 @@ public class ErrorThrowingGetObserver extends BaseRegionObserver {
           throw new DoNotRetryIOException("Failing for test");
       }
     }
-    super.preGetOp(e, get, results);
   }
 
   public enum ErrorType {
diff --git a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java
index fbcff32..b0fe074 100644
--- a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java
+++ b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java
@@ -37,11 +37,10 @@ import org.apache.hadoop.hbase.client.Increment;
 import org.apache.hadoop.hbase.client.Delete;
 import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.filter.ParseFilter;
-import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos;
 import org.apache.hadoop.hbase.security.UserProvider;
 import org.apache.hadoop.hbase.test.MetricsAssertHelper;
 import org.apache.hadoop.hbase.testclassification.ClientTests;
@@ -1331,7 +1330,7 @@ public class TestThriftHBaseServiceHandler {
     assertTColumnValueEqual(columnValueB, result.getColumnValues().get(1));
   }
 
-  public static class DelayingRegionObserver extends BaseRegionObserver {
+  public static class DelayingRegionObserver implements RegionObserver {
     private static final Log LOG = LogFactory.getLog(DelayingRegionObserver.class);
     // sleep time in msec
     private long delayMillis;
diff --git a/src/main/asciidoc/_chapters/cp.adoc b/src/main/asciidoc/_chapters/cp.adoc
index 7e60f2f..47f92bb 100644
--- a/src/main/asciidoc/_chapters/cp.adoc
+++ b/src/main/asciidoc/_chapters/cp.adoc
@@ -100,12 +100,10 @@ AOP::
 
 === Coprocessor Implementation Overview
 
-. Either your class should extend one of the Coprocessor classes, such as
-link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.html[BaseRegionObserver],
-or it should implement the link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/Coprocessor.html[Coprocessor]
-or
-link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/CoprocessorService.html[CoprocessorService]
-interface.
+. Your class should implement one of the Coprocessor interfaces -
+link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/Coprocessor.html[Coprocessor],
+link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/RegionObserver.html[RegionObserver],
+link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/CoprocessorService.html[CoprocessorService] - to name a few.
 
 . Load the coprocessor, either statically (from the configuration) or dynamically,
 using HBase Shell. For more details see <<cp_loading,Loading Coprocessors>>.
@@ -150,36 +148,22 @@ RegionObserver::
   A RegionObserver coprocessor allows you to observe events on a region, such as `Get`
   and `Put` operations. See
   link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/RegionObserver.html[RegionObserver].
-  Consider overriding the convenience class
-  link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.html[BaseRegionObserver],
-  which implements the `RegionObserver` interface and will not break if new methods are added.
 
 RegionServerObserver::
   A RegionServerObserver allows you to observe events related to the RegionServer's
   operation, such as starting, stopping, or performing merges, commits, or rollbacks.
   See
   link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.html[RegionServerObserver].
-  Consider overriding the convenience class
-  https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.html[BaseMasterAndRegionObserver]
-  which implements both `MasterObserver` and `RegionServerObserver` interfaces and
-  will not break if new methods are added.
 
-MasterOvserver::
+MasterObserver::
   A MasterObserver allows you to observe events related to the HBase Master, such
   as table creation, deletion, or schema modification. See
   link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/MasterObserver.html[MasterObserver].
-  Consider overriding the convenience class
-  https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.html[BaseMasterAndRegionObserver],
-  which implements both `MasterObserver` and `RegionServerObserver` interfaces and
-  will not break if new methods are added.
 
 WalObserver::
   A WalObserver allows you to observe events related to writes to the Write-Ahead
   Log (WAL). See
   link:http://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/WALObserver.html[WALObserver].
-  Consider overriding the convenience class
-  link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/BaseWALObserver.html[BaseWALObserver],
-  which implements the `WalObserver` interface and will not break if new methods are added.
 
 <<cp_example,Examples>> provides working examples of observer coprocessors.
 
@@ -499,8 +483,8 @@ of the `users` table.
 The following Observer coprocessor prevents the details of the user `admin` from being
 returned in a `Get` or `Scan` of the `users` table.
 
-. Write a class that extends the
-link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.html[BaseRegionObserver]
+. Write a class that implements the
+link:https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/coprocessor/RegionObserver.html[RegionObserver]
 class.
 
 . Override the `preGetOp()` method (the `preGet()` method is deprecated) to check
@@ -520,7 +504,7 @@ Following are the implementation of the above steps:
 
 [source,java]
 ----
-public class RegionObserverExample extends BaseRegionObserver {
+public class RegionObserverExample implements RegionObserver {
 
     private static final byte[] ADMIN = Bytes.toBytes("admin");
     private static final byte[] COLUMN_FAMILY = Bytes.toBytes("details");
-- 
2.3.2 (Apple Git-55)
