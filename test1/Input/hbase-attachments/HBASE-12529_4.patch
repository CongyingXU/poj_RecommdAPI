import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public class RandTest {
  private static abstract class QueueBalancer {
    public abstract int getNextQueue();
  }

  private static class LocalRandomQueueBalancer extends QueueBalancer {
    private int queueSize;

    public LocalRandomQueueBalancer(int queueSize) {
      this.queueSize = queueSize;
    }

    public int getNextQueue() {
      return ThreadLocalRandom.current().nextInt(queueSize);
    }
  }

  private static class RandomQueueBalancer extends QueueBalancer {
    private int queueSize;
    private Random rand;

    public RandomQueueBalancer(int queueSize) {
      this.queueSize = queueSize;
      this.rand = new Random();
    }

    public int getNextQueue() {
      return rand.nextInt(queueSize);
    }
  }

  private static class DumbLocalRandomQueueBalancer extends QueueBalancer {
    private int queueSize;

    private final ThreadLocal<Random> threadRandom =
      new ThreadLocal<Random>() {
        @Override
        protected Random initialValue() {
          return new Random();
        }
      };

    public DumbLocalRandomQueueBalancer(int queueSize) {
      this.queueSize = queueSize;
    }

    public int getNextQueue() {
      return threadRandom.get().nextInt(queueSize);
    }
  }

  public static void testRandom(final QueueBalancer balancer, final int threadCount)
      throws Exception {
    final int GENERATED_NUMBER_COUNT = 10000000;
    List<Thread> threads = new ArrayList<Thread>();
    for (int i = 0; i < threadCount; i++) {
      final int threadId = i;
      Thread thread = new Thread() {
          @Override
          public void run() {
              long st = System.currentTimeMillis();
              long[] hit = new long[threadCount];
              for (int j = 0; j < GENERATED_NUMBER_COUNT; j++) {
                  int random = balancer.getNextQueue();
                  hit[random] += 1;
              }
              long et = System.currentTimeMillis();
              String x = "";
              for (int i = 0; i < threadCount; ++i) {
                x += String.format("%8d ", hit[i]);
              }
              System.out.println(threadId + "[" + x + "] time " + (et - st));
          }
      };
      threads.add(thread);
      thread.start();
    }

    for (Thread thread: threads) {
      thread.join();
    }
  }

  public static void main(String[] args) throws Exception {
    final int MAX_THREAD_COUNT = 10;
    for (int i = 1; i <= MAX_THREAD_COUNT; ++i) {
      System.out.println("Random with " + i + " threads");
      testRandom(new RandomQueueBalancer(i), i);

      System.out.println("Local-Random with " + i + " threads");
      testRandom(new LocalRandomQueueBalancer(i), i);

      System.out.println("Dumb-Local-Random with " + i + " threads");
      testRandom(new DumbLocalRandomQueueBalancer(i), i);

      System.out.println();
    }
  }
}
