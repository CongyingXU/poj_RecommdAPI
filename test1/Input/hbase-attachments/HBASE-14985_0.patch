diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/io/TimeRange.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/io/TimeRange.java
index 8352e4e..10bd5a1 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/io/TimeRange.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/io/TimeRange.java
@@ -36,8 +36,11 @@ import org.apache.hadoop.hbase.util.Bytes;
 @InterfaceAudience.Public
 @InterfaceStability.Stable
 public class TimeRange {
+  private static final long MIN_TIME = 0L;
+  private static final long MAX_TIME = Long.MAX_VALUE;
   private long minStamp = 0L;
-  private long maxStamp = Long.MAX_VALUE;
+  private long maxStamp = MAX_TIME;
+
   private boolean allTime = false;
 
   /**
@@ -54,6 +57,9 @@ public class TimeRange {
    */
   public TimeRange(long minStamp) {
     this.minStamp = minStamp;
+    if (this.minStamp == MIN_TIME){
+      this.allTime = true;
+    }
   }
 
   /**
@@ -81,6 +87,10 @@ public class TimeRange {
     }
     this.minStamp = minStamp;
     this.maxStamp = maxStamp;
+    if (this.minStamp == MIN_TIME && this.maxStamp == MAX_TIME){
+      this.allTime = true;
+    }
+
   }
 
   /**
diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestTimeRange.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestTimeRange.java
index 65fd465..1ed1f9c 100644
--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestTimeRange.java
+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestTimeRange.java
@@ -1,7 +1,63 @@
-package org.apache.hadoop.hbase.io;
-
 /**
- * Created by gjacoby on 12/15/15.
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
+
+package org.apache.hadoop.hbase.io;
+
+import org.apache.hadoop.hbase.testclassification.SmallTests;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+import java.io.IOException;
+
+@Category(SmallTests.class)
 public class TestTimeRange {
+
+  @Test
+  public void testRangeConstruction() throws IOException {
+    TimeRange defaultRange = new TimeRange();
+    Assert.assertEquals(0L, defaultRange.getMin());
+    Assert.assertEquals(Long.MAX_VALUE, defaultRange.getMax());
+    Assert.assertTrue(defaultRange.isAllTime());
+
+    TimeRange oneArgRange = new TimeRange(0L);
+    Assert.assertEquals(0L, oneArgRange.getMin());
+    Assert.assertEquals(Long.MAX_VALUE, oneArgRange.getMax());
+    Assert.assertTrue(oneArgRange.isAllTime());
+
+    TimeRange oneArgRange2 = new TimeRange(1);
+    Assert.assertEquals(1, oneArgRange2.getMin());
+    Assert.assertEquals(Long.MAX_VALUE, oneArgRange2.getMax());
+    Assert.assertFalse(oneArgRange2.isAllTime());
+
+    TimeRange twoArgRange = new TimeRange(0L, Long.MAX_VALUE);
+    Assert.assertEquals(0L, twoArgRange.getMin());
+    Assert.assertEquals(Long.MAX_VALUE, twoArgRange.getMax());
+    Assert.assertTrue(twoArgRange.isAllTime());
+
+    TimeRange twoArgRange2 = new TimeRange(0L, Long.MAX_VALUE - 1);
+    Assert.assertEquals(0L, twoArgRange2.getMin());
+    Assert.assertEquals(Long.MAX_VALUE - 1, twoArgRange2.getMax());
+    Assert.assertFalse(twoArgRange2.isAllTime());
+
+    TimeRange twoArgRange3 = new TimeRange(1, Long.MAX_VALUE);
+    Assert.assertEquals(1, twoArgRange3.getMin());
+    Assert.assertEquals(Long.MAX_VALUE, twoArgRange3.getMax());
+    Assert.assertFalse(twoArgRange3.isAllTime());
+  }
 }
