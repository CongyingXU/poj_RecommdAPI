/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/
union sub2ChoiceType switch(long) {
    case 0:
        double e4;
    case 1:
        double e6;
};
union _omg_sub2ChoiceType switch(long) {
    case 0:
        double e4;
    case 1:
        double e6;
};
struct typeSequenceStruct4 {
    long varInt;
    string varString;
};
struct typeSequenceStructr6 {
    float varFloat;
    typeSequenceStruct4 typeSequenceStruct4_f;
};
struct SimpleStruct {
    float varFloat;
    long varInt;
    string varString;
};
struct typeSequenceStruct1 {
    long varString;
    float varFloat;
};
struct typeSequenceStruct1Type {
    string attrString;
    SimpleStruct SimpleStruct_f;
    typeSequenceStruct1 typeSequenceStruct1_f;
};
struct typeSequenceStruct5 {
    string varStringExt;
    float varFloatExt;
};
struct sub3SequenceStruct {
    boolean e5;
};
union long_nil switch(boolean) {
    case TRUE:
        long value;
};
union _1_attrib2Type_nil_nil switch(boolean) {
    case TRUE:
        string<2>  value;
};
struct typeSequenceStruct2 {
    long_nil attrib1;
    _1_attrib2Type_nil_nil attrib2;
    short simpleTypeValue;
};
struct sub1SequenceStruct {
    float e3;
};
struct base {
    string attr1;
    long attr2;
    long e1;
    string e2;
};
struct sub2 {
    base base_f;
    sub2ChoiceType sub2ChoiceType_f;
};
struct sub3 {
    sub2 sub2_f;
    sub3SequenceStruct sub3SequenceStruct_f;
};
struct testStructType {
    string attrString;
    SimpleStruct SimpleStruct_f;
};
struct typeSequenceStruct5Type {
    string AttrString;
    any any_f;
    typeSequenceStruct5 typeSequenceStruct5_f;
};
struct typeSequenceStruct3 {
    float varFloat;
};
struct typeSequenceStruct3Type {
    string attrString1;
    string attrString2;
    SimpleStruct SimpleStruct_f;
    typeSequenceStruct3 typeSequenceStruct3_f;
};
struct sub1 {
    base base_f;
    sub1SequenceStruct sub1SequenceStruct_f;
};
interface TypeInheritancePortType {
    struct echoObjectResult {
        ::base return;
    };
    struct echoObject2Result {
        ::sub2 return;
    };
    struct echoObject {
        ::base x;
    };
    struct echoObject3Result {
        ::sub2 return;
    };
    struct echoObject3 {
        ::sub3 x;
    };
    struct echoObject2 {
        ::sub1 x;
    };
    ::base
    echoObject(
        in ::base x
    );
    ::sub2
    echoObject2(
        in ::sub1 x
    );
    ::sub2
    echoObject3(
        in ::sub3 x
    );
};
