<?xml version="1.0" encoding="utf-8"?>

<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements. See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership. The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<definitions xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
    xmlns:s="http://www.w3.org/2001/XMLSchema" 
    targetNamespace="http://org/apache/axis2/jaxws/proxy/gorilla_dlw" 
    xmlns:tns="http://org/apache/axis2/jaxws/proxy/gorilla_dlw" 
    xmlns:data="http://org/apache/axis2/jaxws/proxy/gorilla_dlw/data"
    xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
    xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <!-- Use elementFormDefault=qualified.  Many users use this setting for interop compatibility -->
    <s:schema elementFormDefault="qualified" 
        xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
        targetNamespace="http://org/apache/axis2/jaxws/proxy/gorilla_dlw/data" >

      <s:import namespace="http://org/apache/axis2/jaxws/proxy/gorilla_dlw/data2"  />

      <s:element name="assertFault">
        <s:complexType>
           <s:sequence>
             <s:element name="faultData" type="s:string" />
           </s:sequence>
        </s:complexType>
      </s:element>

      <s:simpleType name="stringList">   
        <s:list itemType="s:string"/> 
      </s:simpleType>

      <s:simpleType name="fruit">
         <s:restriction base="s:string">
            <s:enumeration value="apple"/>                      
            <s:enumeration value="orange"/>                    
            <s:enumeration value="pear"/>                    
         </s:restriction>
      </s:simpleType>

      <s:complexType name="Object0">
         <s:sequence>
           <s:element name="data0" type="s:string" />
         </s:sequence>
      </s:complexType>

      <!-- Echo a String.  This also supports the situation where there is no string -->
      <s:element name="echoString">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoStringResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo combined String-->
      <s:element name="echoString2">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="s:string" />
            <s:element minOccurs="0" maxOccurs="1" name="inout" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoString2Response">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="inout" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo int -->
      <s:element name="echoInt">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="s:int" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoIntResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="s:int" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo enum -->
      <s:element name="echoEnum">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="data:fruit" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoEnumResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="data:fruit" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo anyType.  Test polymorphism -->
      <s:element name="echoAnyType">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="s:anyType" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoAnyTypeResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="s:anyType" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo stringList.  Tests xsd:list-->
      <!-- Both the SEI and the bean use List String to represent the data.  -->
      <!-- But there are some semantic differences between this and echoStringArray -->
      <!-- due to xml differences between xsd:list and maxOccurs unbounded -->
      <s:element name="echoStringList">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <s:element name="echoStringListResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Just like stringList, except the SEI parameter is manually changed to String[] -->
      <!-- This will test List <-> java Array processing -->
      <s:element name="echoStringListAlt">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <s:element name="echoStringListAltResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Just like stringList, except the SEI parameter is manually changed to LinkedList String -->
      <!-- This will test List <-> java Array processing -->
      <s:element name="echoStringListAsLinkedList">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>
	  
	  <s:element name="echoStringListAsLinkedListResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="data" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <s:element name="echoStringListAltAsLinkedListResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="result" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- The SEI and bean property map to List List String -->
      <s:element name="echoStringListArray">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <s:element name="echoStringListArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="data:stringList" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo a String aray. -->
      <!-- Probably the most common case.  Both the SEI and bean are mapped to List String -->
      <!-- The xml maxOccurs semantics are used to marshal and unmarshal the values... -->
      <!-- Which makes this a little different than the echoStringList case -->
      <s:element name="echoStringArray">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoStringArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Same as echoStringArray, except the SEI is manually changed to String[] -->
      <s:element name="echoStringArrayAlt">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoStringArrayAltResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Same as echoStringArray, except the SEI is manually changed to LinkedList String -->
      <s:element name="echoStringArrayAsLinkedList">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoStringArrayAsLinkedListResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo Indexed String Array -->
      <!-- In this case the parameter is a List String, but the bean property uses the indexed -->
      <!-- setter/getter style methods -->
      <s:element name="echoIndexedStringArray">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:string" >
              <s:annotation>
                <s:appinfo>
                  <jaxb:property collectionType="indexed" />
                </s:appinfo>
              </s:annotation>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoIndexedStringArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="s:string" >
              <s:annotation>
                <s:appinfo>
                  <jaxb:property collectionType="indexed" />
                </s:appinfo>
              </s:annotation>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo combined String-->
      <s:element name="echoString2Array">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:string" />
            <s:element minOccurs="0" maxOccurs="unbounded" name="inout" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoString2ArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="inout" type="s:string" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo int -->
      <s:element name="echoIntArray">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:int" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoIntArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="s:int" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo enum -->
      <s:element name="echoEnumArray">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="data:fruit" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoEnumArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="data:fruit" />
          </s:sequence>
        </s:complexType>
      </s:element>

      <!-- Echo anyType.  Test polymorphism -->
      <s:element name="echoAnyTypeArray">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="data" type="s:anyType" />
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="echoAnyTypeArrayResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="result" type="s:anyType" />
          </s:sequence>
        </s:complexType>
      </s:element>
	  
     <s:element name="echoDate">     	 
           <s:complexType>
		   <s:choice>
				<s:element name="RequestedTerminationTime" nillable="true" type="s:dateTime" />
				<s:element name="RequestedLifetimeDuration" type="s:duration" />
			</s:choice>
			
             <!--<s:sequence>
               <s:element name="request" nillable="true" type="s:date" />
             </s:sequence> -->
			 
           </s:complexType>
	  </s:element>

	  <s:element name="echoDateResponse">
           <s:complexType>
             <s:sequence>
               <s:element name="response" type="s:date" />
             </s:sequence>
           </s:complexType>
	  </s:element>
	  
	  <s:complexType name="echoBasetype">
	            <s:sequence>
	               <s:element name="request" type="s:date" />
	            </s:sequence>
	         </s:complexType>
			 
	  	 <s:element name="echoPolymorphicDate">
			 <s:complexType>
				<s:complexContent>
					<s:extension base="data:echoBasetype"/>
				</s:complexContent>
			</s:complexType>
		 </s:element>
		 	  
    </s:schema>

    <s:schema elementFormDefault="qualified" 
        targetNamespace="http://org/apache/axis2/jaxws/proxy/gorilla_dlw/data2" >
        
        <!-- For anyType processing,  Object1 is in an imported schema, thus it should be allowed in the anyType -->
        <s:complexType name="Object1">
           <s:sequence>
             <s:element name="data1" type="s:string" />
           </s:sequence>
        </s:complexType>
    </s:schema>

   <s:schema elementFormDefault="qualified" 
        targetNamespace="http://org/apache/axis2/jaxws/proxy/gorilla_dlw/dataUnref" >
        
        <!-- For anyType processing,  Object2 is in an unreferenced schema, thus may fail when used with anyType -->
        <s:complexType name="Object2">
           <s:sequence>
             <s:element name="data2" type="s:string" />
           </s:sequence>
        </s:complexType>
    </s:schema>
 
  </types>

  <!-- messages -->
  <message name="assertFault">
    <part name="x" element="data:assertFault" />
  </message>

  <message name="echoString">
    <part name="x" element="data:echoString" />
  </message>
  <message name="echoStringResponse">
    <part name="x" element="data:echoStringResponse" />
  </message>

  <message name="echoString2">
    <part name="x" element="data:echoString2" />
  </message>
  <message name="echoString2Response">
    <part name="x" element="data:echoString2Response" />
  </message>

  <message name="echoInt">
    <part name="x" element="data:echoInt" />
  </message>
  <message name="echoIntResponse">
    <part name="x" element="data:echoIntResponse" />
  </message>

  <message name="echoEnum">
    <part name="x" element="data:echoEnum" />
  </message>
  <message name="echoEnumResponse">
    <part name="x" element="data:echoEnumResponse" />
  </message>

  <message name="echoAnyType">
    <part name="x" element="data:echoAnyType" />
  </message>
  <message name="echoAnyTypeResponse">
    <part name="x" element="data:echoAnyTypeResponse" />
  </message>

  <message name="echoStringList">
    <part name="x" element="data:echoStringList" />
  </message>
  <message name="echoStringListResponse">
    <part name="x" element="data:echoStringListResponse" />
  </message>
  <message name="echoStringListAlt">
    <part name="x" element="data:echoStringListAlt" />
  </message>
  <message name="echoStringListAltResponse">
    <part name="x" element="data:echoStringListAltResponse" />
  </message>
  <message name="echoStringListAsLinkedList">
    <part name="x" element="data:echoStringListAsLinkedList" />
  </message>
  <message name="echoStringListAsLinkedListResponse">
    <part name="x" element="data:echoStringListAsLinkedListResponse" />
  </message>

  <message name="echoStringListArray">
    <part name="x" element="data:echoStringListArray" />
  </message>
  <message name="echoStringListArrayResponse">
    <part name="x" element="data:echoStringListArrayResponse" />
  </message>

  <message name="echoStringArray">
    <part name="x" element="data:echoStringArray" />
  </message>
  <message name="echoStringArrayResponse">
    <part name="x" element="data:echoStringArrayResponse" />
  </message>

  <message name="echoStringArrayAlt">
    <part name="x" element="data:echoStringArrayAlt" />
  </message>
  <message name="echoStringArrayAltResponse">
    <part name="x" element="data:echoStringArrayAltResponse" />
  </message>

  <message name="echoStringArrayAsLinkedList">
    <part name="x" element="data:echoStringArrayAsLinkedList" />
  </message>
  <message name="echoStringArrayAsLinkedListResponse">
    <part name="x" element="data:echoStringArrayAsLinkedListResponse" />
  </message>
  
  <message name="echoIndexedStringArray">
    <part name="x" element="data:echoIndexedStringArray" />
  </message>
  <message name="echoIndexedStringArrayResponse">
    <part name="x" element="data:echoIndexedStringArrayResponse" />
  </message>

  <message name="echoString2Array">
    <part name="x" element="data:echoString2Array" />
  </message>
  <message name="echoString2ArrayResponse">
    <part name="x" element="data:echoString2ArrayResponse" />
  </message>

  <message name="echoIntArray">
    <part name="x" element="data:echoIntArray" />
  </message>
  <message name="echoIntArrayResponse">
    <part name="x" element="data:echoIntArrayResponse" />
  </message>

  <message name="echoEnumArray">
    <part name="x" element="data:echoEnumArray" />
  </message>
  <message name="echoEnumArrayResponse">
    <part name="x" element="data:echoEnumArrayResponse" />
  </message>

  <message name="echoAnyTypeArray">
    <part name="x" element="data:echoAnyTypeArray" />
  </message>
  <message name="echoAnyTypeArrayResponse">
    <part name="x" element="data:echoAnyTypeArrayResponse" />
  </message>
  
  
   <message name="echoPolymorphicDateMessage">
      <part name="dateRequest" element="data:echoPolymorphicDate"/>
   </message>
   
   <message name="echoDateMessage">
      <part name="dateRequest" element="data:echoDate"/>
   </message>

   <message name="echoDateResponseMessage">
      <part name="dateResponse" element="data:echoDateResponse"/>
   </message>

  <!-- operation -->
  <portType name="GorillaInterface">
    <operation name="echoString">
      <input message="tns:echoString" />
      <output message="tns:echoStringResponse" />
      <fault name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoString2">
      <input message="tns:echoString2" />
      <output message="tns:echoString2Response" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoInt">
      <input message="tns:echoInt" />
      <output message="tns:echoIntResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoEnum">
      <input message="tns:echoEnum" />
      <output message="tns:echoEnumResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoAnyType">
      <input message="tns:echoAnyType" />
      <output message="tns:echoAnyTypeResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>

    <operation name="echoStringList">
      <input message="tns:echoStringList" />
      <output message="tns:echoStringListResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoStringListAlt">
      <input message="tns:echoStringListAlt" />
      <output message="tns:echoStringListAltResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoStringListAsLinkedList">
      <input message="tns:echoStringListAsLinkedList" />
      <output message="tns:echoStringListAsLinkedListResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
   
    <operation name="echoStringListArray">
      <input message="tns:echoStringListArray" />
      <output message="tns:echoStringListArrayResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>

    <operation name="echoStringArray">
      <input message="tns:echoStringArray" />
      <output message="tns:echoStringArrayResponse" />
      <fault name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoStringArrayAlt">
      <input message="tns:echoStringArrayAlt" />
      <output message="tns:echoStringArrayAltResponse" />
      <fault name="assertFault" message="tns:assertFault" />
    </operation>

   <operation name="echoStringArrayAsLinkedList">
      <input message="tns:echoStringArrayAsLinkedList" />
      <output message="tns:echoStringArrayAsLinkedListResponse" />
      <fault name="assertFault" message="tns:assertFault" />
    </operation>


    <operation name="echoIndexedStringArray">
      <input message="tns:echoIndexedStringArray" />
      <output message="tns:echoIndexedStringArrayResponse" />
      <fault name="assertFault" message="tns:assertFault" />
    </operation>

    <operation name="echoString2Array">
      <input message="tns:echoString2Array" />
      <output message="tns:echoString2ArrayResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoIntArray">
      <input message="tns:echoIntArray" />
      <output message="tns:echoIntArrayResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoEnumArray">
      <input message="tns:echoEnumArray" />
      <output message="tns:echoEnumArrayResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoAnyTypeArray">
      <input message="tns:echoAnyTypeArray" />
      <output message="tns:echoAnyTypeArrayResponse" />
      <fault  name="assertFault" message="tns:assertFault" />
    </operation>
    <operation name="echoPolymorphicDate">
      <input message="tns:echoPolymorphicDateMessage" />
    </operation>
	<operation name="echoDate">
      <input message="tns:echoDateMessage" />
      <output message="tns:echoDateResponseMessage" />
	</operation>
  </portType>

  <!-- binding -->
  <binding name="GorillaSOAP" type="tns:GorillaInterface">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" />
    <operation name="echoString">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoString2">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoInt">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoEnum">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoAnyType">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoStringList">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoStringListAlt">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoStringListAsLinkedList">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoStringListArray">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>

    <operation name="echoStringArray">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoStringArrayAlt">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoStringArrayAsLinkedList">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>

    <operation name="echoIndexedStringArray">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>

    <operation name="echoString2Array">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoIntArray">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoEnumArray">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoAnyTypeArray">
      <soap:operation style="document" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="assertFault">
        <soap:fault name="assertFault" use="literal" />
      </fault>
    </operation>
    <operation name="echoDate">
      <soap:operation soapAction=""/>
      <input>
         <soap:body use="literal"/>
      </input>
      <output>
         <soap:body use="literal"/>
      </output>
    </operation>  
	<operation name="echoPolymorphicDate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
    </operation>
 </binding>

  <service name="GorillaService">
    <port name="GorillaPort" binding="tns:GorillaSOAP">
      <soap:address location="http://localhost:9080/axis2/services/GorillaService" />
    </port>
  </service>
</definitions>
