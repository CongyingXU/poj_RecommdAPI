Index: C:/axis2/modules/core/test/org/apache/axis2/description/WSDLToAllServicesBuilderTest.java
===================================================================
--- C:/axis2/modules/core/test/org/apache/axis2/description/WSDLToAllServicesBuilderTest.java	(revision 0)
+++ C:/axis2/modules/core/test/org/apache/axis2/description/WSDLToAllServicesBuilderTest.java	(revision 0)
@@ -0,0 +1,125 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ *
+ *
+ */
+package org.apache.axis2.description;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.OutputStream;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.WSDL11ToAllAxisServicesBuilder;
+import org.apache.axis2.description.WSDL11ToAxisServiceBuilder;
+import org.apache.axis2.description.WSDL20ToAllAxisServicesBuilder;
+import org.apache.axis2.engine.ListenerManager;
+
+import junit.framework.TestCase;
+
+
+/**
+ * Tests the WSDL11ToAllServicesBuilder class.
+ *
+ */
+public class WSDLToAllServicesBuilderTest extends TestCase {
+    private static final String[] expectedService11 = {
+        "EchoServicePortTwo", 
+        "EchoServicePortOne",
+        "EchoServicePortThree"};
+    private static final String[] expectedService20 = {
+        "echoService1$echoServiceSOAPBinding_http", 
+        "echoService1$echoServiceEndpoint2SOAPBinding_http", 
+        "echoService2$echoServiceSOAPBinding_http"};
+    private ConfigurationContext configContext;
+    ListenerManager lm;
+
+    protected void setUp() throws Exception {
+        configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
+        lm = new ListenerManager();
+        lm.init(configContext);
+        lm.start();
+    }
+
+    protected void tearDown() throws AxisFault {
+        lm.stop();
+    }
+
+    private void checkResults(List axisServices, String expectedService[]) {
+        
+        Iterator asi = axisServices.iterator();
+        int i = 0;
+        while (asi.hasNext() && i < expectedService.length) {
+            AxisService as = (AxisService) asi.next();
+            System.out.println("AxisService : " + as.getName());
+            assertEquals("Unexpected service name in AxisService List: expected "
+                    + expectedService[i] + " but found " + as.getName() + ".",
+                    as.getName(),
+                    expectedService[i]);
+            i++;
+        }
+    }
+    
+    public void testWSDL11toAllAxisServices() throws Exception {
+        File testResourceFile = new File("target/test-classes/wsdl/EchoServiceWsdl11.wsdl");
+        File outLocation = new File("target/test-resources");
+        outLocation.mkdirs();
+        if (testResourceFile.exists()) {
+            List axisServices = null;
+            try {
+                WSDL11ToAllAxisServicesBuilder builder = new WSDL11ToAllAxisServicesBuilder(
+                        new FileInputStream(testResourceFile));
+                axisServices = builder.populateAllServices();
+                System.out.println("WSDL file: " + testResourceFile.getName());
+            } catch (Exception e) {
+                System.out.println("Error in WSDL : " + testResourceFile.getName());
+                System.out.println("Exception: " + e.toString());
+                throw e;
+            }
+            checkResults(axisServices, expectedService11);
+
+        }
+    }
+
+    public void testWSDL20toAllAxisServices() throws Exception {
+        File testResourceFile = new File("target/test-classes/wsdl/EchoServiceWsdl20.wsdl");
+        File outLocation = new File("target/test-resources");
+        outLocation.mkdirs();
+        if (testResourceFile.exists()) {
+            List axisServices = null;
+            try {
+                WSDL20ToAllAxisServicesBuilder builder = new WSDL20ToAllAxisServicesBuilder(
+                        new FileInputStream(testResourceFile));
+                axisServices = builder.populateAllServices();
+                System.out.println("WSDL file: " + testResourceFile.getName());
+            } catch (Exception e) {
+                System.out.println("Error in WSDL : " + testResourceFile.getName());
+                System.out.println("Exception: " + e.toString());
+                throw e;
+            }
+            checkResults(axisServices, expectedService20);
+
+        }
+    }
+
+
+
+}
Index: C:/axis2/modules/core/src/org/apache/axis2/description/WSDL11ToAllAxisServicesBuilder.java
===================================================================
--- C:/axis2/modules/core/src/org/apache/axis2/description/WSDL11ToAllAxisServicesBuilder.java	(revision 0)
+++ C:/axis2/modules/core/src/org/apache/axis2/description/WSDL11ToAllAxisServicesBuilder.java	(revision 0)
@@ -0,0 +1,139 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ *
+ *
+ */
+package org.apache.axis2.description;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.Map.Entry;
+
+import javax.wsdl.Definition;
+import javax.wsdl.Port;
+import javax.wsdl.Service;
+import javax.wsdl.WSDLException;
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Extends the WSDL11ToAxisServiceBuilder class to provide functionality to return
+ * multiple AxisService objects; one for each port on each service in the WSDL 1.1 file.
+ *
+ */
+public class WSDL11ToAllAxisServicesBuilder extends WSDL11ToAxisServiceBuilder {
+    protected static final Log log =
+        LogFactory.getLog(WSDL11ToAllAxisServicesBuilder.class);
+
+    public static final String WSDL_SERVICE_QNAME = "WSDL_SERVICE_QNAME";
+
+    public static final String WSDL_PORT = "WSDL_PORT";
+
+    private ArrayList axisServices = null;
+    
+    /**
+     * Class constructor.  
+     * @param in  - Contains the wsdl 1.1 file
+     */
+    public WSDL11ToAllAxisServicesBuilder(InputStream in) {
+        super(in);
+        axisServices = new ArrayList();   // create an empty ArrayList
+    }
+    
+    /**
+     * Public method to access the wsdl 1.1 file and create a List of AxisService objects.
+     * For each port on each service in the wsdl, an AxisService object is created and
+     * added to the List.  The name of the AxisService is changed from the service name
+     * to the port name, since port names are unique to the wsdl.  
+     * @return A List containing one AxisService object for each port in the wsdl file.
+     * The name of the AxisService is modified from the service name to the port name.
+     * @throws AxisFault 
+     */
+    public List populateAllServices() throws AxisFault {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Entry: populateAllServices");
+            }
+
+            setup();  // setup contains code with gathers non-service specific info
+                      // from the WSDL.  This only needs to be done once per WSDL.
+            if (wsdl4jDefinition == null) {  
+                if (log.isDebugEnabled()) {
+                    log.debug("Exit: populateAllServices.  wsdl definition is null!");
+                }
+                return null;   // can't go any further without the wsdl
+            }
+            Iterator wsdlServIter = wsdl4jDefinition.getServices().entrySet().iterator();
+
+            while (wsdlServIter.hasNext()) {
+                Entry entry = (Entry) wsdlServIter.next();
+                Service service = (Service) entry.getValue();
+                // set the serviceName on the parent to setup call to populateService
+                serviceName = service.getQName();
+                Iterator wsdlPortIter = service.getPorts().entrySet().iterator();
+                while (wsdlPortIter.hasNext()) {
+                    Entry portEntry = (Entry) wsdlPortIter.next();
+                    Port port = (Port) portEntry.getValue();
+                    portName = port.getName();
+                    // start with a fresh axisService
+                    this.axisService = new AxisService();
+                    // now that serviceName and portName are set, call up to the
+                    // parent class to populate this service.                   
+                    AxisService retAxisService = populateService();
+                    if (retAxisService != null) {
+                        // save off the wsdl service QName as a parameter.
+                        Parameter serviceNameParameter = new Parameter();
+                        serviceNameParameter.setName(WSDL_SERVICE_QNAME);
+                        serviceNameParameter.setValue(serviceName);
+                        retAxisService.addParameter(serviceNameParameter);
+                        // Also save off the javax.wsdl.Port object that this AxisService
+                        // represents.
+                        Parameter portParameter = new Parameter();
+                        portParameter.setName(WSDL_PORT);
+                        portParameter.setValue(port);
+                        retAxisService.addParameter(portParameter);                        
+                        // since this AxisService really represents the wsdl
+                        // port, change the name
+                        // from wsdl service name to port name.
+                        retAxisService.setName(portName); // TODO: mangle name????
+
+                        axisServices.add(retAxisService);
+                    } // end if axisService was returned
+                } // end for all ports of a service
+            } // end for all services in the wsdl
+            
+            if (log.isDebugEnabled()) {
+                log.debug("Exit: populateAllServices.");
+            }
+            return axisServices;
+        } catch (AxisFault e) {
+            throw e;  // just rethrow any AxisFaults
+        } catch (Exception e) {
+            if (log.isDebugEnabled()) {
+                log.debug("populateAllServices caught Exception.  Converting to AxisFault. " + e.toString());
+            }
+            throw new AxisFault(e);
+        }
+    }
+
+}
Index: C:/axis2/modules/core/src/org/apache/axis2/description/WSDL20ToAxisServiceBuilder.java
===================================================================
--- C:/axis2/modules/core/src/org/apache/axis2/description/WSDL20ToAxisServiceBuilder.java	(revision 428755)
+++ C:/axis2/modules/core/src/org/apache/axis2/description/WSDL20ToAxisServiceBuilder.java	(working copy)
@@ -65,7 +65,7 @@
 
 public class WSDL20ToAxisServiceBuilder extends WSDLToAxisServiceBuilder {
 
-    private Description description;
+    protected Description description;
 
     private String wsdlURI;
 
@@ -73,12 +73,16 @@
     // woden.
     private static String RPC = "rpc";
 
-    private String interfaceName;
+    protected String interfaceName;
 
     private String savedTargetNamespace;
 
     private Map namespacemap;
 
+    private HashMap stringBasedNamespaceMap;
+
+    private boolean setupComplete = false;
+
     public WSDL20ToAxisServiceBuilder(InputStream in, QName serviceName,
                                       String interfaceName) {
         this.in = in;
@@ -113,34 +117,8 @@
     public AxisService populateService() throws AxisFault {
 
         try {
-            if (description == null) {
+            setup();
 
-                DescriptionElement descriptionElement = null;
-                if (wsdlURI != null && !"".equals(wsdlURI)) {
-                    descriptionElement = readInTheWSDLFile(wsdlURI);
-                } else if (in != null) {
-
-                    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
-                    documentBuilderFactory.setNamespaceAware(true);
-                    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
-                    Document document = documentBuilder.parse(in);
-
-                    WSDLReader reader = DOMWSDLFactory.newInstance().newWSDLReader();
-                    WSDLSource wsdlSource = reader.createWSDLSource();
-                    wsdlSource.setSource(document.getDocumentElement());
-//                    wsdlSource.setBaseURI(new URI(getBaseUri()));
-                    descriptionElement = reader.readWSDL(wsdlSource);
-                } else {
-                    throw new AxisFault("No resources found to read the wsdl");
-                }
-
-                savedTargetNamespace = descriptionElement.getTargetNamespace()
-                        .toString();
-                namespacemap = descriptionElement.getNamespaces();
-                this.description = descriptionElement.toComponent();
-
-            }
-
             // Setting wsdl4jdefintion to axisService , so if some one want
             // to play with it he can do that by getting the parameter
             Parameter wsdlDescriptionParamter = new Parameter();
@@ -169,13 +147,6 @@
 
             // Create the namespacemap
 
-            HashMap stringBasedNamespaceMap = new HashMap();
-            Iterator iterator = namespacemap.keySet().iterator();
-            while (iterator.hasNext()) {
-                String key = (String) iterator.next();
-                stringBasedNamespaceMap.put(key, (namespacemap.get(key))
-                        .toString());
-            }
             axisService.setNameSpacesMap(stringBasedNamespaceMap);
             // TypeDefinition[] typeDefinitions =
             // description.getTypeDefinitions();
@@ -226,7 +197,63 @@
             throw new AxisFault(e);
         }
     }
-
+    
+    /**
+     * contains all code which gathers non-service specific information from the wsdl.
+     * <p>
+     * After all the setup completes successfully, the setupComplete field is set so that
+     * any subsequent calls to setup() will result in a no-op.
+     * Note that subclass WSDL20ToAllAxisServicesBuilder will call populateService for
+     * each port in the WSDL.  Separating the non-service specific information here allows
+     * WSDL20ToAllAxisServicesBuilder to only do this work 1 time per WSDL, instead of for
+     * each port on each service.
+     * @throws AxisFault 
+     */
+    protected void setup()throws AxisFault {
+        if (setupComplete == true) {  // already setup, just do nothing and return
+            return;
+        }
+        try {
+            if (description == null) {
+    
+                DescriptionElement descriptionElement = null;
+                if (wsdlURI != null && !"".equals(wsdlURI)) {
+                    descriptionElement = readInTheWSDLFile(wsdlURI);
+                } else if (in != null) {
+    
+                    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+                    documentBuilderFactory.setNamespaceAware(true);
+                    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
+                    Document document = documentBuilder.parse(in);
+    
+                    WSDLReader reader = DOMWSDLFactory.newInstance().newWSDLReader();
+                    WSDLSource wsdlSource = reader.createWSDLSource();
+                    wsdlSource.setSource(document.getDocumentElement());
+    //                wsdlSource.setBaseURI(new URI(getBaseUri()));
+                    descriptionElement = reader.readWSDL(wsdlSource);
+                } else {
+                    throw new AxisFault("No resources found to read the wsdl");
+                }
+                savedTargetNamespace = descriptionElement.getTargetNamespace()
+                .toString();
+                namespacemap = descriptionElement.getNamespaces();
+                this.description = descriptionElement.toComponent();
+            }
+            stringBasedNamespaceMap = new HashMap();
+            Iterator iterator = namespacemap.keySet().iterator();
+            while (iterator.hasNext()) {
+                String key = (String) iterator.next();
+                stringBasedNamespaceMap.put(key, (namespacemap.get(key))
+                        .toString());
+            }
+            setupComplete  = true;
+        } catch (AxisFault e) {
+            throw e;  // just rethrow AxisFaults
+        } catch (Exception e) {
+            throw new AxisFault(e);
+        }
+    }
+    
     private void processBinding(Binding binding, Description description)
             throws Exception {
         if (binding != null) {
@@ -478,6 +505,7 @@
             for (int i = 0; i < services.length; i++) {
                 if (serviceName.equals(services[i].getName())) {
                     service = services[i];
+                    break;  // found it.  Stop looking.
                 }
             }
             if (service == null) {
@@ -500,8 +528,9 @@
             }
 
             for (int i = 0; i < endpoints.length; ++i) {
-                if (this.interfaceName.equals(endpoints[i])) {
+                if (this.interfaceName.equals(endpoints[i].getName().toString())) {
                     endpoint = endpoints[i];
+                    break;  // found it.  Stop looking
                 }
             }
             if (endpoint == null) {
Index: C:/axis2/modules/core/src/org/apache/axis2/description/WSDL20ToAllAxisServicesBuilder.java
===================================================================
--- C:/axis2/modules/core/src/org/apache/axis2/description/WSDL20ToAllAxisServicesBuilder.java	(revision 0)
+++ C:/axis2/modules/core/src/org/apache/axis2/description/WSDL20ToAllAxisServicesBuilder.java	(revision 0)
@@ -0,0 +1,121 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ *
+ *
+ */
+
+package org.apache.axis2.description;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map.Entry;
+import org.apache.woden.wsdl20.Description;
+import org.apache.woden.wsdl20.Endpoint;
+import org.apache.woden.wsdl20.Interface;
+import org.apache.woden.wsdl20.Service;
+
+
+import javax.wsdl.WSDLException;
+
+import org.apache.axis2.AxisFault;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Extends the WSDL20ToAxisServiceBuilder class to provide functionality to return
+ * multiple AxisService objects; one for each endpoint on each service in the WSDL 2.0 file.
+ *
+ */
+public class WSDL20ToAllAxisServicesBuilder extends WSDL20ToAxisServiceBuilder {
+    protected static final Log log =
+        LogFactory.getLog(WSDL20ToAllAxisServicesBuilder.class);
+
+    private ArrayList axisServices = null;
+    
+    /**
+     * Class constructor.  
+     * @param in  - Contains the wsdl 2.0 file
+     */
+    public WSDL20ToAllAxisServicesBuilder(InputStream in) {
+        super(in, null, null);
+        axisServices = new ArrayList();   // create an empty ArrayList
+    }
+    
+    /**
+     * Public method to access the wsdl 2.0 file and create a List of AxisService objects.
+     * For each endpoint on each service in the wsdl, an AxisService object is created and
+     * added to the List.  The name of the AxisService is changed from the service name
+     * to the the following: <service name>#<endpoint name>.  Note that the endpoint name
+     * is not unique to a wsdl 2.0 file.  Multiple services in the file may have endpoints
+     * with the same name.  Therefore the name of the AxisService needs to be a combination
+     * of service/endpoint name to be unique to the wsdl.  
+     * @return A List containing one AxisService object for each port in the wsdl file.
+     * The name of the AxisService is modified to uniquely represent the service/endpoint
+     * pair.  The format of the name is "<wsdl service name>#<wsdl endpoint name>"
+     * @throws AxisFault 
+     */
+    public List populateAllServices() throws AxisFault {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Entry: populateAllServices");
+            }
+            setup();  // setup contains code with gathers non-service specific info
+                      // from the WSDL.  This only needs to be done once per WSDL.
+            if (description == null) {  
+                if (log.isDebugEnabled()) {
+                    log.debug("Exit: populateAllServices.  wsdl description is null!");
+                }
+                return null;   // can't go any further without the wsdl
+            }
+            Service[] services = description.getServices();
+            for (int i = 0; i < services.length; i++) {
+                Service service = services[i];
+                // set the serviceName on the parent to setup call to populateService
+                serviceName = service.getName();
+                Endpoint[] endpoints = service.getEndpoints();
+                for (int j = 0; j < endpoints.length; j++) {
+                    interfaceName = endpoints[j].getName().toString();
+                    // start with a fresh axisService
+                    this.axisService = new AxisService();
+                    // now that serviceName and interfaceName are set, call up to the
+                    // parent class to populate this service.                   
+                    AxisService retAxisService = populateService();
+                    if (retAxisService != null) {
+                        // since this AxisService really represents the wsdl
+                        // port, change the name
+                        // from wsdl service name to port name.
+                        // TODO: mangle name?
+                        retAxisService.setName(retAxisService.getName() + "$" + interfaceName); // TODO: mangle name????
+                        axisServices.add(retAxisService);
+                    } // end if axisService was returned
+                } // end for all ports of a service
+            } // end for all services in the wsdl
+            if (log.isDebugEnabled()) {
+                log.debug("Exit: populateAllServices.");
+            }
+            return axisServices;
+        } catch (AxisFault e) {
+            throw e;  // just rethrow any AxisFaults
+        } catch (Exception e) {
+            if (log.isDebugEnabled()) {
+                log.debug("populateAllServices caught Exception.  Converting to AxisFault. " + e.toString());
+            }
+            throw new AxisFault(e);
+        }
+    }
+
+}
Index: C:/axis2/modules/core/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java
===================================================================
--- C:/axis2/modules/core/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java	(revision 428755)
+++ C:/axis2/modules/core/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java	(working copy)
@@ -58,7 +58,7 @@
     protected static final Log log =
             LogFactory.getLog(WSDL11ToAxisServiceBuilder.class);
 
-    private String portName;
+    protected String portName;
 
     private static final String BINDING = "Binding";
 
@@ -82,7 +82,7 @@
 
     private static final String BINDING_OPERATION_OUTPUT = "Binding.Operation.Output";
 
-    private Definition wsdl4jDefinition = null;
+    protected Definition wsdl4jDefinition = null;
 
     private WSDLLocator customWSLD4JResolver;
 
@@ -101,7 +101,16 @@
     private static int prefixCounter = 0;
     public static final String NAMESPACE_URI = "namespace";
     public static final String TRAGET_NAMESPACE = "targetNamespace";
+    
+    /**
+     * keep track of whether setup code related to the entire wsdl is complete.
+     * Note that WSDL11ToAllAxisServices will call setup multiple times, so this
+     * field is used to make subsequent calls no-ops.
+     */
+    private boolean setupComplete = false;
 
+    private Map schemaMap = null;
+
     /**
      * constructor taking in the service name and the port name
      *
@@ -160,9 +169,7 @@
      */
     public AxisService populateService() throws AxisFault {
         try {
-            if (wsdl4jDefinition == null) {
-                wsdl4jDefinition = readInTheWSDLFile(in);
-            }
+            setup();
             // Setting wsdl4jdefintion to axisService , so if some one want
             // to play with it he can do that by getting the parameter
             Parameter wsdldefintionParamter = new Parameter();
@@ -177,16 +184,8 @@
             axisService.setTargetNamespace(wsdl4jDefinition
                     .getTargetNamespace());
 
-            //adding ns in the original WSDL
-            processPoliciesInDefintion(wsdl4jDefinition);
-
-            //process the imports
-            processImports(wsdl4jDefinition);
             axisService.setNameSpacesMap(wsdl4jDefinition.getNamespaces());
 
-            Types wsdl4jTypes = wsdl4jDefinition.getTypes();
-
-            Map schemaMap = populateSchemaMap(wsdl4jTypes);
             Binding binding = findBinding(wsdl4jDefinition);
 
             // create new Schema extensions element for wrapping
@@ -195,6 +194,7 @@
 
             //we might have modified the schemas by now so the addition should
             //happen here
+            Types wsdl4jTypes = wsdl4jDefinition.getTypes();
             if (null != wsdl4jTypes) {
                 this.copyExtensibleElements(
                         wsdl4jTypes.getExtensibilityElements(),
@@ -213,7 +213,7 @@
                     }
                 }
             }
-            // copy the documentation element contentto the description
+            // copy the documentation element content to the description
             Element documentationElement = wsdl4jDefinition.getDocumentationElement();
             if (documentationElement != null) {
                 Node firstChild = documentationElement.getFirstChild();
@@ -234,7 +234,43 @@
             throw new AxisFault(e);
         }
     }
+    
+    /**
+     * contains all code which gathers non-service specific information from the wsdl.
+     * <p>
+     * After all the setup completes successfully, the setupComplete field is set so that
+     * any subsequent calls to setup() will result in a no-op.
+     * Note that subclass WSDL11ToAllAxisServicesBuilder will call populateService for
+     * each port in the WSDL.  Separating the non-service specific information here allows
+     * WSDL11ToAllAxisServicesBuilder to only do this work 1 time per WSDL, instead of for
+     * each port on each service.
+     * @throws WSDLException if readInTheWSDLFile fails
+     */
+    protected void setup() throws WSDLException {
+        if (setupComplete) { // already setup, just do nothing and return
+            return;
+        }
+        if (wsdl4jDefinition == null) {
+            wsdl4jDefinition = readInTheWSDLFile(in);
+        }
+        if (wsdl4jDefinition == null) {
+            return; // can't continue without wsdl
+        }
+        // adding ns in the original WSDL
+        processPoliciesInDefintion(wsdl4jDefinition);
 
+        // process the imports
+        processImports(wsdl4jDefinition);
+
+        // setup the schemaMap
+        schemaMap = populateSchemaMap(wsdl4jDefinition.getTypes());
+
+        setupComplete = true; // if any part of setup fails, don't mark setupComplete
+        return;
+    }
+    
+
+    
     /**
      * Populate a map of targetNamespace vs DOM schema element
      * This is used to grab the correct schema element when adding
Index: C:/axis2/modules/core/test-resources/wsdl/EchoServiceWsdl20.wsdl
===================================================================
--- C:/axis2/modules/core/test-resources/wsdl/EchoServiceWsdl20.wsdl	(revision 0)
+++ C:/axis2/modules/core/test-resources/wsdl/EchoServiceWsdl20.wsdl	(revision 0)
@@ -0,0 +1,77 @@
+<description xmlns="http://www.w3.org/2006/01/wsdl"
+	xmlns:tns="http://www.wso2.com/wsdl/2006/interop/EchoService"
+	xmlns:wsoap="http://www.w3.org/2006/01/wsdl/soap"
+	xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
+	targetNamespace="http://www.wso2.com/wsdl/2006/interop/EchoService"
+	xmlns:wwis="http://www.wso2.com/schemas/2006/interop/EchoService">
+
+	<documentation>
+		This test contains simple echo operations which can be used for
+		iteroperability testing.
+	</documentation>
+
+	<types>
+		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+			xmlns="http://www.wso2.com/schemas/2006/interop/EchoService"
+			targetNamespace="http://www.wso2.com/schemas/2006/interop/EchoService"
+			elementFormDefault="unqualified"
+			attributeFormDefault="unqualified">
+			<xs:element type="tEchoString" name="echoString" />
+			<xs:complexType name="tEchoString">
+				<xs:sequence>
+					<xs:element type="xs:string" name="echoStringParam" />
+				</xs:sequence>
+			</xs:complexType>
+			<xs:element type="xs:string" name="echoStringResponse" />
+
+			<xs:element type="tEchoXML" name="echoXML" />
+			<xs:complexType name="tEchoXML">
+				<xs:sequence>
+					<xs:element type="xs:anyType" name="echoXMLParam" />
+				</xs:sequence>
+			</xs:complexType>
+			<xs:element type="xs:anyType" name="echoXMLResponse" />
+
+		</xs:schema>
+	</types>
+	<interface name="echoServiceInterface">
+		<operation pattern="http://www.w3.org/2006/01/wsdl/in-out"
+			name="echoString">
+			<input element="wwis:echoString" messageLabel="In" />
+			<output element="wwis:echoStringResponse"
+				messageLabel="Out" />
+		</operation>
+		<operation pattern="http://www.w3.org/2006/01/wsdl/in-out"
+			name="echoXML">
+			<input element="wwis:echoXML" messageLabel="In" />
+			<output element="wwis:echoXMLResponse" messageLabel="Out" />
+		</operation>
+	</interface>
+	<binding interface="tns:echoServiceInterface"
+		type="http://www.w3.org/2006/01/wsdl/soap"
+		name="echoServiceSOAPBinding"
+		wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP">
+		<operation
+			wsoap:mep="http://www.w3.org/2003/05/soap/mep/soap-response"
+			ref="tns:echoString" />
+		<operation
+			wsoap:mep="http://www.w3.org/2003/05/soap/mep/soap-response"
+			ref="tns:echoXML" />
+	</binding>
+	<service name="echoService1" interface="tns:echoServiceInterface">
+		<endpoint
+			address="http://www-lk.wso2.com/axis2/services/EchoService"
+			binding="tns:echoServiceSOAPBinding"
+			name="echoServiceSOAPBinding_http" />
+		<endpoint
+			address="http://www-lk.wso2.com/axis2/services/EchoService"
+			binding="tns:echoServiceSOAPBinding"
+			name="echoServiceEndpoint2SOAPBinding_http" />
+	</service>
+	<service name="echoService2" interface="tns:echoServiceInterface">
+		<endpoint
+			address="http://www-lk.wso2.com/axis2/services/EchoService"
+			binding="tns:echoServiceSOAPBinding"
+			name="echoServiceSOAPBinding_http" />
+	</service>
+</description>
\ No newline at end of file
Index: C:/axis2/modules/core/test-resources/wsdl/EchoServiceWsdl11.wsdl
===================================================================
--- C:/axis2/modules/core/test-resources/wsdl/EchoServiceWsdl11.wsdl	(revision 0)
+++ C:/axis2/modules/core/test-resources/wsdl/EchoServiceWsdl11.wsdl	(revision 0)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<definitions name="Echo"
+    targetNamespace="http://ws.apache.org/axis2/tests"
+    xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" 
+    xmlns:tns="http://ws.apache.org/axis2/tests"
+    xmlns="http://schemas.xmlsoap.org/wsdl/"
+    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
+    xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
+    xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
+    xmlns:intf="http://ws-policy.tests">
+    	  
+  <types>
+    <schema targetNamespace="http://xmlsoap.org/Echo"
+         xmlns="http://www.w3.org/2001/XMLSchema">
+      <complexType name="echo">
+        <sequence>
+          <element name="text" type="xsd:string" nillable="true"/>
+                 </sequence>
+      </complexType>
+      <complexType name="echoResponse">
+        <sequence>
+          <element name="text" type="xsd:string" nillable="true"/>
+                 </sequence>
+      </complexType>
+      <element name="Echo" type="tns:echo"/>
+      <element name="EchoResponse" type="tns:echoResponse"/>
+    </schema>
+  </types>
+
+  <message name="EchoRequest">
+    <part name="echo" element="tns:Echo"/>
+  </message>
+
+  <message name="EchoResponse">
+    <part name="echoResponse" element="tns:EchoResponse"/>
+  </message>
+
+  <portType name="EchoPort">
+    <operation name="Echo">
+      <input  message="tns:EchoRequest" wsa:Action="http://tests.org/echo/in" />
+      <output message="tns:EchoResponse" wsa:Action="http://tests.org/echo/out" />
+    </operation>
+  </portType>
+
+  <binding name="EchoBinding" type="tns:EchoPort">
+    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"
+style="document"/>
+    <operation name="Echo">
+      <soap:operation soapAction="http://ws.apache.org/axis2/tests/echo"/>
+      <input> 
+        <soap:body use="literal"/>
+      </input>
+      <output>
+        <soap:body use="literal"/>
+      </output>
+    </operation>
+  </binding>
+   
+  <service name="EchoServiceOne">
+    <port name="EchoServicePortOne" binding="tns:EchoBinding">
+      <soap:address location="http://localhost:8080/axis2/services/EchoService"/>
+    </port>
+    <port name="EchoServicePortTwo" binding="tns:EchoBinding">
+      <soap:address location="http://localhost:8080/axis2/services/EchoService"/>
+    </port>
+  </service>
+  
+  <service name="EchoServiceTwo">
+    <port name="EchoServicePortThree" binding="tns:EchoBinding">
+      <soap:address location="http://localhost:8080/axis2/services/EchoService"/>
+    </port>
+  </service>
+
+</definitions>
