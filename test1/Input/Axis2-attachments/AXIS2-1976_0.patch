Index: C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/message/MessageInternalException.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/message/MessageInternalException.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/message/MessageInternalException.java	(working copy)
@@ -1,53 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws.message;
-
-/**
- * MessageInternalException
- * The apis defined in the JAX-WS Message sub-component may 
- * throw this unchecked Exception.  This exception is only thrown
- * in situations that should never occur. 
- * Consumers of the Message sub-component should
- * provide sufficient try/catch logic to handle these situtations
- * as they would other unchecked exceptions.
- * (@see org.apache.axis2.jaxws.message.MessageException)
- */
-public class MessageInternalException extends RuntimeException {
-
-	/**
-	 * @param message
-	 */
-	public MessageInternalException(String message) {
-		super(message);
-	}
-
-	/**
-	 * @param message
-	 * @param cause
-	 */
-	public MessageInternalException(String message, Throwable cause) {
-		super(message, cause);
-	}
-
-	/**
-	 * @param cause
-	 */
-	public MessageInternalException(Throwable cause) {
-		super(cause);
-	}
-
-}
Index: C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/message/MessageException.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/message/MessageException.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/message/MessageException.java	(working copy)
@@ -1,51 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws.message;
-
-/**
- * MessageException
- * The apis defined in the JAX-WS Message sub-component will 
- * throw this checked Exception when assertions fail or other probable
- * failures occur.  Consumers of the Message sub-component should
- * provide sufficient try/catch logic to handle these situtations.
- * (@see org.apache.axis2.jaxws.message.MessageInternalException)
- */
-public class MessageException extends Exception {
-	 
-	/**
-	 * @param message
-	 */
-	public MessageException(String message) {
-		super(message);
-	}
-
-	/**
-	 * @param message
-	 * @param cause
-	 */
-	public MessageException(String message, Throwable cause) {
-		super(message, cause);
-	}
-
-	/**
-	 * @param cause
-	 */
-	public MessageException(Throwable cause) {
-		super(cause);
-	}
-
-}
Index: C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/ExceptionFactory.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/ExceptionFactory.java	(revision 495789)
+++ C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/ExceptionFactory.java	(working copy)
@@ -26,8 +26,6 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.message.MessageException;
-import org.apache.axis2.jaxws.message.MessageInternalException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -118,56 +116,6 @@
 	}
 	
 	/**
-	 * Create a MessageException using the information from a Throwable and message
-	 * @param message
-	 * @param throwable
-	 * @return MessageException
-	 */
-	public static MessageException makeMessageException(String message, Throwable throwable) {
-		try {
-			// See if there is already a MessgeException 
-			MessageException e = (MessageException) findException(throwable, MessageException.class);
-			if (e == null) {
-				e = createMessageException(message, throwable);
-			}
-			return e;
-		} catch (RuntimeException re) {
-			// TODO 
-			// This is not a good situation, an exception occurred while building the exception.
-			// This should never occur!  For now log the problem and rethrow...we may revisit this later
-			if (log.isDebugEnabled()) {
-				log.debug(Messages.getMessage("exceptionDuringExceptionFlow"), re);
-			}
-			throw re;
-		}
-	}
-	
-	/**
-	 * Create a MessageInternalException using the information from a Throwable and message
-	 * @param message
-	 * @param throwable
-	 * @return MessageInternalException
-	 */
-	public static MessageInternalException makeMessageInternalException(String message, Throwable throwable) {
-		try {
-			// See if there is already a HTTPException 
-			MessageInternalException e = (MessageInternalException) findException(throwable, MessageInternalException.class);
-			if (e == null) {
-				e = createMessageInternalException(message, throwable);
-			}
-			return e;
-		} catch (RuntimeException re) {
-			// TODO 
-			// This is not a good situation, an exception occurred while building the exception.
-			// This should never occur!  For now log the problem and rethrow...we may revisit this later
-			if (log.isDebugEnabled()) {
-				log.debug(Messages.getMessage("exceptionDuringExceptionFlow"), re);
-			}
-			throw re;
-		}
-	}
-	
-	/**
 	 * Make a WebServiceException with a given message
 	 * @param message
 	 * @return WebServiceException
@@ -184,26 +132,9 @@
 	public static WebServiceException makeWebServiceException(Throwable throwable){
 		return makeWebServiceException(null, throwable);
 	}
+
 	
 	/**
-	 * Create a MessageException using the information from a given Throwable instance
-	 * @param throwable
-	 * @return MessageException
-	 */
-	public static MessageException makeMessageException(Throwable throwable){
-		return makeMessageException(null, throwable);
-	}
-	
-	/**
-	 * Make a MessageException with a given message
-	 * @param message
-	 * @return MessageException
-	 */
-	public static MessageException makeMessageException(String message) {
-		return makeMessageException(message, null);  
-	}
-	
-	/**
 	 * Create a WebServiceException
 	 * @param message
 	 * @param t Throwable
@@ -211,8 +142,8 @@
 	 */
 	private static WebServiceException createWebServiceException(String message, Throwable t) {
         
-        // We might have an embedded MessageException that has a good message on it
-        MessageException me = (MessageException) findException(t, MessageException.class);
+        // We might have an embedded WebServiceException that has a good message on it
+        WebServiceException me = (WebServiceException) findException(t, WebServiceException.class);
         if (me != null) {
             String meMessage = me.getMessage();
             if (meMessage != null) {
@@ -278,57 +209,6 @@
 		return e;
 	}
 	
-	/**
-	 * Create a MessageException
-	 * @param message
-	 * @param t Throwable
-	 * @return MessageException
-	 */
-	private static MessageException createMessageException(String message, Throwable t) {
-		Throwable rootCause = null;
-		if (t != null) {
-			rootCause = getRootCause(t);
-		}
-		rootCause = rootCause==null ? t :rootCause;
-		
-		MessageException e = null;
-		if (message != null) {
-			e = new MessageException(message, rootCause);
-		} else {
-			e = new MessageException(rootCause);
-		}
-		if (log.isDebugEnabled()) {
-			log.debug("create Exception:", e);
-		}
-		return e;
-	}
-	
-	/**
-	 * Create a MessageInternalException
-	 * @param message
-	 * @param t Throwable
-	 * @return MessageException
-	 */
-	private static MessageInternalException createMessageInternalException(String message, Throwable t) {
-        
-		Throwable rootCause = null;
-		if (t != null) {
-			rootCause = getRootCause(t);
-		}
-		rootCause = rootCause==null ? t :rootCause;
-		
-		MessageInternalException e = null;
-		if (message != null) {
-			e = new MessageInternalException(message, rootCause);
-		} else {
-			e = new MessageInternalException(rootCause);
-		}
-		if (log.isDebugEnabled()) {
-			log.debug("create Exception:", e);
-		}
-		return e;
-	}
-	
     /**
      * Return the exception or nested cause that is assignable from the specified class
      * @param t Throwable
@@ -380,8 +260,6 @@
     	while (t != null) {
     		Throwable nextCause = null;
     		if (t instanceof InvocationTargetException ||
-    		    t instanceof MessageException ||
-    		    t instanceof MessageInternalException ||
     		    t instanceof AxisFault) {
     			// Skip over this cause
     			nextCause = getCause(t);
Index: C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/util/SAAJFactory.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/util/SAAJFactory.java	(revision 495789)
+++ C:/eclipse/workspace_axis2/GM/modules/metadata/src/org/apache/axis2/jaxws/util/SAAJFactory.java	(working copy)
@@ -22,10 +22,10 @@
 import javax.xml.soap.MessageFactory;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPFactory;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.message.MessageException;
 
 /**
  * Provides convenience methods to construct a SOAP 1.1 or SOAP 1.2 SAAJ MessageFactory or SOAPFactory.
@@ -47,14 +47,14 @@
      * @param namespace
      * @return
      */
-    public static SOAPFactory createSOAPFactory(String namespace) throws MessageException, SOAPException {
+    public static SOAPFactory createSOAPFactory(String namespace) throws WebServiceException, SOAPException {
         Method m = getSOAPFactoryNewInstanceProtocolMethod();
         SOAPFactory sf = null;
         if (m == null) {
             if (namespace.equals(SOAP11_ENV_NS)) {
                 sf = SOAPFactory.newInstance();
             } else {
-                throw ExceptionFactory.makeMessageException(Messages.getMessage("SOAP12WithSAAJ12Err"));
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SOAP12WithSAAJ12Err"));
             }
         } else {
             String protocol = DYNAMIC_PROTOCOL;
@@ -66,7 +66,7 @@
             try {
                 sf = (SOAPFactory) m.invoke(null, new Object[] {protocol});
             } catch (Exception e) {
-                throw ExceptionFactory.makeMessageException(e);
+                throw ExceptionFactory.makeWebServiceException(e);
             }
         }
         return sf;
@@ -77,14 +77,14 @@
      * @param namespace
      * @return
      */
-    public static MessageFactory createMessageFactory(String namespace) throws MessageException, SOAPException {
+    public static MessageFactory createMessageFactory(String namespace) throws WebServiceException, SOAPException {
         Method m = getMessageFactoryNewInstanceProtocolMethod();
         MessageFactory mf = null;
         if (m == null) {
             if (namespace.equals(SOAP11_ENV_NS)) {
                 mf = MessageFactory.newInstance();
             } else {
-                throw ExceptionFactory.makeMessageException(Messages.getMessage("SOAP12WithSAAJ12Err"));
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SOAP12WithSAAJ12Err"));
             }
         } else {
             String protocol = DYNAMIC_PROTOCOL;
@@ -96,7 +96,7 @@
             try {
                 mf = (MessageFactory) m.invoke(null, new Object[] {protocol});
             } catch (Exception e) {
-                throw ExceptionFactory.makeMessageException(e);
+                throw ExceptionFactory.makeWebServiceException(e);
             }
         }
         return mf;
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpine.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpine.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpine.java	(working copy)
@@ -21,10 +21,10 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
@@ -48,18 +48,18 @@
      * Write out the Message
      * @param writer XMLStreamWriter
      * @param consume true if this is the last request on the block.
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException;  
+    public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException;  
     
     /**
      * Get the XMLStreamReader represented by this Message for the xml part
      * @param consume true if this is the last request on the Message
      * @return XMLStreamReader
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws XMLStreamException
      */
-    public XMLStreamReader getXMLStreamReader(boolean consume) throws MessageException;
+    public XMLStreamReader getXMLStreamReader(boolean consume) throws WebServiceException;
     
     /**
      * @return the Style (document or rpc)
@@ -69,14 +69,14 @@
     /**
      * @return the QName of the operation element if Style.rpc.  Otherwise null
      */
-    public QName getOperationElement() throws MessageException;
+    public QName getOperationElement() throws WebServiceException;
     
     /**
      * Set the operation element qname.  The operation qname is only used if
      * Style.rpc
      * @param operationQName
      */
-    public void setOperationElement(QName operationQName) throws MessageException;
+    public void setOperationElement(QName operationQName) throws WebServiceException;
     
     /**
      * isConsumed
@@ -90,7 +90,7 @@
      * Determines whether the XMLPart represents a Fault
      * @return true if the message represents a fault
      */
-    public boolean isFault() throws MessageException;
+    public boolean isFault() throws WebServiceException;
     
     /**
      * If the XMLPart represents a fault, an XMLFault is returned
@@ -98,7 +98,7 @@
      * @return the XMLFault object or null
      * @see XMLFault
      */
-    public XMLFault getXMLFault() throws MessageException;
+    public XMLFault getXMLFault() throws WebServiceException;
     
     /**
      * Change the XMLPart so that it represents the fault described
@@ -106,22 +106,22 @@
      * @param xmlfault
      * @see XMLFault
      */
-    public void setXMLFault(XMLFault xmlFault) throws MessageException;
+    public void setXMLFault(XMLFault xmlFault) throws WebServiceException;
     
     /**
      * getAsOMElement
      * Get the xml part as a read/write OM
      * @return OMElement (probably OM SOAPEnvelope)
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    public OMElement getAsOMElement() throws MessageException;
+    public OMElement getAsOMElement() throws WebServiceException;
     
     /**
      * getNumBodyBlocks
      * @return number of body blocks
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    public int getNumBodyBlocks() throws MessageException;
+    public int getNumBodyBlocks() throws WebServiceException;
     
     /**
      * getBodyBlock
@@ -133,10 +133,10 @@
      * @param context
      * @param blockFactory
      * @return Block
-     * @throws MessageException
+     * @throws WebServiceException
      */
     public Block getBodyBlock(int index, Object context, BlockFactory blockFactory)  
-        throws MessageException;
+        throws WebServiceException;
     
     /**
      * setBodyBlock
@@ -145,25 +145,25 @@
      * use the getBodyBlock method to access it.
      * @param index
      * @param block
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    public void setBodyBlock(int index, Block block) throws MessageException;
+    public void setBodyBlock(int index, Block block) throws WebServiceException;
     
     /**
      * removePayload
      * Removes the indicated BodyBlock
      * @param index
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    public void removeBodyBlock(int index) throws MessageException;
+    public void removeBodyBlock(int index) throws WebServiceException;
     
     
     /**
      * getNumHeaderBlocks
      * @return number of header blocks
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    public int getNumHeaderBlocks() throws MessageException;
+    public int getNumHeaderBlocks() throws WebServiceException;
     
     /**
      * getHeaderBlock
@@ -176,12 +176,12 @@
      * @param context
      * @param blockFactory
      * @return Block
-     * @throws MessageException
+     * @throws WebServiceException
      */
     public Block getHeaderBlock(String namespace, String localPart, 
             Object context, 
             BlockFactory blockFactory)  
-        throws MessageException;
+        throws WebServiceException;
     
     /**
      * appendHeaderBlock
@@ -191,20 +191,20 @@
      * @param namespace
      * @param localPart
      * @param block
-     * @throws MessageException
+     * @throws WebServiceException
      */
     public void setHeaderBlock(String namespace, String localPart, Block block) 
-        throws MessageException;
+        throws WebServiceException;
     
     /**
      * removePayload
      * Removes the indicated block
      * @param namespace
      * @param localPart
-     * @throws MessageException
+     * @throws WebServiceException
      */
     public void removeHeaderBlock(String namespace, String localPart) 
-        throws MessageException;
+        throws WebServiceException;
     
     
     /**
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartFactoryImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartFactoryImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartFactoryImpl.java	(working copy)
@@ -18,11 +18,11 @@
 
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLPart;
 import org.apache.axis2.jaxws.message.factory.XMLPartFactory;
@@ -42,7 +42,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.XMLPartFactory#createFrom(javax.xml.stream.XMLStreamReader)
 	 */
-	public XMLPart createFrom(XMLStreamReader reader) throws XMLStreamException, MessageException {
+	public XMLPart createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException {
 		StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(reader, null);  // Pass null has the version to trigger autodetection
 		SOAPEnvelope omEnvelope = builder.getSOAPEnvelope();
 		return createFrom(omEnvelope);
@@ -51,21 +51,21 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.MessageFactory#createFrom(org.apache.axiom.om.OMElement)
 	 */
-	public XMLPart createFrom(OMElement omElement) throws XMLStreamException, MessageException {
+	public XMLPart createFrom(OMElement omElement) throws XMLStreamException, WebServiceException {
 		return new XMLPartImpl(omElement);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.MessageFactory#create(org.apache.axis2.jaxws.message.Protocol)
 	 */
-	public XMLPart create(Protocol protocol) throws XMLStreamException, MessageException {
+	public XMLPart create(Protocol protocol) throws XMLStreamException, WebServiceException {
 		return new XMLPartImpl(protocol);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.XMLPartFactory#createFrom(javax.xml.soap.SOAPEnvelope)
 	 */
-	public XMLPart createFrom(javax.xml.soap.SOAPEnvelope soapEnvelope) throws XMLStreamException, MessageException {
+	public XMLPart createFrom(javax.xml.soap.SOAPEnvelope soapEnvelope) throws XMLStreamException, WebServiceException {
 		return new XMLPartImpl(soapEnvelope);
 	}
 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(working copy)
@@ -25,6 +25,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMNamespace;
@@ -44,7 +45,6 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
@@ -104,9 +104,9 @@
 	 * Create spine from an existing OM tree
 	 * @param envelope
      * @param style Style
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public XMLSpineImpl(SOAPEnvelope envelope, Style style) throws MessageException {
+	public XMLSpineImpl(SOAPEnvelope envelope, Style style) throws WebServiceException {
 		super();
         this.style = style;
 		init(envelope);
@@ -116,11 +116,11 @@
 			protocol = Protocol.soap12;
 		} else {
 			// TODO Support for REST
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("RESTIsNotSupported"), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
 		}
 	} 
 
-	private void init(SOAPEnvelope envelope) throws MessageException {
+	private void init(SOAPEnvelope envelope) throws WebServiceException {
 		root = envelope;
 		headerBlocks.clear();
 		bodyBlocks.clear();
@@ -181,9 +181,9 @@
 	 * @param it Iterator
 	 * @param blocks List<Block> to update
 	 * @param toEnd if true, iterator is advanced to the end, otherwise it is advanced one Element
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	private  void advanceIterator(Iterator it, List<Block> blocks, boolean toEnd) throws MessageException {
+	private  void advanceIterator(Iterator it, List<Block> blocks, boolean toEnd) throws WebServiceException {
 		
 		// TODO This code must be reworked.  The OM Iterator causes the entire OMElement to be 
 		// parsed when it.next() is invoked.  I will need to fix this to gain performance.  (scheu)
@@ -204,7 +204,7 @@
 				try { 
 					block = obf.createFrom((OMElement) node, null, null);
 				} catch (XMLStreamException xse) {
-					throw ExceptionFactory.makeMessageException(xse);
+					throw ExceptionFactory.makeWebServiceException(xse);
 				}
 				blocks.add(block);
 			} else {
@@ -223,7 +223,7 @@
 			soapFactory = new SOAP12Factory();
 		} else {
 			// TODO REST Support is needed
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("RESTIsNotSupported"), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
 		}
 		return soapFactory;
 	}
@@ -267,17 +267,17 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#outputTo(javax.xml.stream.XMLStreamWriter, boolean)
 	 */
-	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException {
+	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException {
 		Reader2Writer r2w = new Reader2Writer(getXMLStreamReader(consume));
 		r2w.outputTo(writer);
 	}
 
-	public XMLStreamReader getXMLStreamReader(boolean consume) throws MessageException {
+	public XMLStreamReader getXMLStreamReader(boolean consume) throws WebServiceException {
 		return new XMLStreamReaderForXMLSpine(root, protocol,
 					headerBlocks, bodyBlocks, detailBlocks, consume);
 	}
 
-	public XMLFault getXMLFault() throws MessageException {
+	public XMLFault getXMLFault() throws WebServiceException {
 		if (!isFault()) {
 		    return null;
         }
@@ -295,14 +295,14 @@
         return xmlFault;
 	}
     
-    private int getNumDetailBlocks() throws MessageException {
+    private int getNumDetailBlocks() throws WebServiceException {
         if (detailIterator != null) {
             advanceIterator(detailIterator, detailBlocks, true);
         }
         return detailBlocks.size();
     }
 	
-	public void setXMLFault(XMLFault xmlFault) throws MessageException {
+	public void setXMLFault(XMLFault xmlFault) throws WebServiceException {
         
         // Clear out the existing body and detail blocks
         SOAPBody body = root.getBody();
@@ -332,7 +332,7 @@
 		return consumed;
 	}
 
-	public OMElement getAsOMElement() throws MessageException {
+	public OMElement getAsOMElement() throws WebServiceException {
 	    if (headerBlocks != null) {        
 	        for (int i=0; i<headerBlocks.size(); i++) {                   
 	            Block b = (Block) headerBlocks.get(i);                   
@@ -387,14 +387,14 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getNumBodyBlocks()
 	 */
-	public int getNumBodyBlocks() throws MessageException {
+	public int getNumBodyBlocks() throws WebServiceException {
 		if (bodyIterator != null) {
 			advanceIterator(bodyIterator, bodyBlocks, true);
 		}
 		return bodyBlocks.size();
 	}
 
-	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory) throws MessageException {
+	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory) throws WebServiceException {
 		if (index >= bodyBlocks.size() && bodyIterator != null) {
 			advanceIterator(bodyIterator, bodyBlocks, true);
 		}
@@ -408,29 +408,29 @@
 			}
 			return newBlock;
 		} catch (XMLStreamException xse) {
-			throw ExceptionFactory.makeMessageException(xse);
+			throw ExceptionFactory.makeWebServiceException(xse);
 		}
 	}
 
-	public void setBodyBlock(int index, Block block) throws MessageException {
+	public void setBodyBlock(int index, Block block) throws WebServiceException {
 		if (index >= bodyBlocks.size() && bodyIterator != null) {
 			advanceIterator(bodyIterator, bodyBlocks, true);
 		}
 		bodyBlocks.add(index, block);
 	}
 
-	public void removeBodyBlock(int index) throws MessageException {
+	public void removeBodyBlock(int index) throws WebServiceException {
 		if (index >= bodyBlocks.size() && bodyIterator != null) {
 			advanceIterator(bodyIterator, bodyBlocks, true);
 		}
 		bodyBlocks.remove(index);
 	}
 
-	public int getNumHeaderBlocks() throws MessageException {
+	public int getNumHeaderBlocks() throws WebServiceException {
 		return headerBlocks.size();
 	}
 
-	public Block getHeaderBlock(String namespace, String localPart, Object context, BlockFactory blockFactory) throws MessageException {
+	public Block getHeaderBlock(String namespace, String localPart, Object context, BlockFactory blockFactory) throws WebServiceException {
 		int index = getHeaderBlockIndex(namespace, localPart);
 		try {
 			//Block oldBlock = bodyBlocks.get(index);
@@ -442,11 +442,11 @@
 			}
 			return newBlock;
 		} catch (XMLStreamException xse) {
-			throw ExceptionFactory.makeMessageException(xse);
+			throw ExceptionFactory.makeWebServiceException(xse);
 		}
 	}
 
-	public void setHeaderBlock(String namespace, String localPart, Block block) throws MessageException {
+	public void setHeaderBlock(String namespace, String localPart, Block block) throws WebServiceException {
 		int index = getHeaderBlockIndex(namespace, localPart);
 		headerBlocks.add(block);
 		//headerBlocks.set(index, block);
@@ -457,9 +457,9 @@
 	 * @param namespace
 	 * @param localPart
 	 * @return index of header block or -1
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	private int getHeaderBlockIndex(String namespace, String localPart) throws MessageException {
+	private int getHeaderBlockIndex(String namespace, String localPart) throws WebServiceException {
 		for (int i=0; i<headerBlocks.size(); i++) {
 			Block block = headerBlocks.get(i);
 			QName qName = block.getQName();
@@ -470,7 +470,7 @@
 		}
 		return -1;
 	}
-	public void removeHeaderBlock(String namespace, String localPart) throws MessageException {
+	public void removeHeaderBlock(String namespace, String localPart) throws WebServiceException {
 		int index = getHeaderBlockIndex(namespace, localPart);
 		headerBlocks.remove(index);
 	}
@@ -484,7 +484,7 @@
         return "SPINE";
     }
 
-    public boolean isFault() throws MessageException {
+    public boolean isFault() throws WebServiceException {
 		return XMLFaultUtils.isFault(root);
 	}
 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(working copy)
@@ -28,6 +28,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.soap.SOAP11Constants;
@@ -36,7 +37,6 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.XMLPart;
@@ -112,15 +112,15 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor constructs an empty XMLPart with the specified protocol
 	 * @param protocol
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	XMLPartBase(Protocol protocol) throws MessageException {
+	XMLPartBase(Protocol protocol) throws WebServiceException {
 		super();
 		this.protocol = protocol;
 		if (protocol.equals(Protocol.unknown)) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("ProtocolIsNotKnown"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ProtocolIsNotKnown"));
 		} else if (protocol.equals(Protocol.rest)) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
 		}
 		content = _createSpine(protocol);
 		contentType = SPINE;
@@ -130,9 +130,9 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor creates an XMLPart from the specified root.
 	 * @param root
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	XMLPartBase(OMElement root) throws MessageException {
+	XMLPartBase(OMElement root) throws WebServiceException {
 		content = root;
 		contentType = OM;
 		QName qName = root.getQName();
@@ -141,7 +141,7 @@
 		} else if (qName.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
 			protocol = Protocol.soap12;
 		} else {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
 		}
 	}
 	
@@ -149,9 +149,9 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor creates an XMLPart from the specified root.
 	 * @param root
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	XMLPartBase(SOAPEnvelope root) throws MessageException {
+	XMLPartBase(SOAPEnvelope root) throws WebServiceException {
 		content = root;
 		contentType = SOAPENVELOPE;
 		String ns = root.getNamespaceURI();
@@ -160,7 +160,7 @@
 		} else if (ns.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
 			protocol = Protocol.soap12;
 		} else {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
 		}
 	}
 	
@@ -169,7 +169,7 @@
 		this.contentType = contentType;
 	}
 	
-	private OMElement getContentAsOMElement() throws MessageException {
+	private OMElement getContentAsOMElement() throws WebServiceException {
 		
 		OMElement om = null;
 		switch (contentType) {
@@ -183,13 +183,13 @@
 			om = _convertSE2OM((SOAPEnvelope) content);
 			break;
 		default:
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("XMLPartImplErr2"), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("XMLPartImplErr2"));
 		}
 		setContent(om, OM);
 		return om;
 	}
 		
-	private SOAPEnvelope getContentAsSOAPEnvelope() throws MessageException {
+	private SOAPEnvelope getContentAsSOAPEnvelope() throws WebServiceException {
 		SOAPEnvelope se = null;
 		switch (contentType) {
 		case (SOAPENVELOPE):
@@ -202,13 +202,13 @@
 			se = _convertOM2SE((OMElement) content);
 			break;
 		default:
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("XMLPartImplErr2"), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("XMLPartImplErr2"));
 		}
 		setContent(se, SOAPENVELOPE);
 		return se;
 	}
 	
-	private XMLSpine getContentAsXMLSpine() throws MessageException {
+	private XMLSpine getContentAsXMLSpine() throws WebServiceException {
 		XMLSpine spine = null;
 		switch (contentType) {
 		case (SPINE):
@@ -221,7 +221,7 @@
 			spine = _convertOM2Spine((OMElement) content);
 			break;
 		default:
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("XMLPartImplErr2"), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("XMLPartImplErr2"));
 		}
         setContent(spine, SPINE);
 		return spine;
@@ -230,21 +230,21 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getAsOMElement()
 	 */
-	public OMElement getAsOMElement() throws MessageException {
+	public OMElement getAsOMElement() throws WebServiceException {
 		return getContentAsOMElement();
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getAsSOAPEnvelope()
 	 */
-	public SOAPEnvelope getAsSOAPEnvelope() throws MessageException {
+	public SOAPEnvelope getAsSOAPEnvelope() throws WebServiceException {
 		return getContentAsSOAPEnvelope();
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getAsBlock(java.lang.Object, org.apache.axis2.jaxws.message.factory.BlockFactory)
 	 */
-	public Block getAsBlock(Object context, BlockFactory blockFactory) throws MessageException, XMLStreamException {
+	public Block getAsBlock(Object context, BlockFactory blockFactory) throws WebServiceException, XMLStreamException {
 		
 		// Get the content as the specfied block.  There is some optimization here to prevent unnecessary copies.
 		// More optimization may be added later.
@@ -277,7 +277,7 @@
     /* (non-Javadoc)
      * @see org.apache.axis2.jaxws.message.XMLPart#setStyle(javax.jws.soap.SOAPBinding.Style)
      */
-    public void setStyle(Style style) throws MessageException {
+    public void setStyle(Style style) throws WebServiceException {
         if (this.style != style) {
             if (contentType == SPINE) {
                 // Must switch to something other than XMLSpine
@@ -287,7 +287,7 @@
         this.style = style;
     }
 
-    public QName getOperationElement() throws MessageException {
+    public QName getOperationElement() throws WebServiceException {
         try {
             if (style != Style.RPC) {
                 return null;
@@ -310,11 +310,11 @@
             }
             return null;
         } catch (SOAPException se) {
-            throw ExceptionFactory.makeMessageException(se);
+            throw ExceptionFactory.makeWebServiceException(se);
         }
     }
 
-    public void setOperationElement(QName operationQName) throws MessageException {
+    public void setOperationElement(QName operationQName) throws WebServiceException {
         if (this.style == Style.RPC) {
             this.getContentAsXMLSpine().setOperationElement(operationQName);
         }
@@ -339,9 +339,9 @@
     /* (non-Javadoc)
      * @see org.apache.axis2.jaxws.message.XMLPart#getXMLStreamReader(boolean)
      */
-    public XMLStreamReader getXMLStreamReader(boolean consume) throws MessageException {
+    public XMLStreamReader getXMLStreamReader(boolean consume) throws WebServiceException {
 		if (consumed) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("XMLPartImplErr1"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("XMLPartImplErr1"));
 		}
 		XMLStreamReader reader = null;
 		if (contentType == SPINE) {
@@ -361,7 +361,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getXMLFault()
 	 */
-	public XMLFault getXMLFault() throws MessageException {
+	public XMLFault getXMLFault() throws WebServiceException {
         
         XMLFault xmlFault = null;
         
@@ -381,7 +381,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#setXMLFault(org.apache.axis2.jaxws.message.XMLFault)
 	 */
-	public void setXMLFault(XMLFault xmlFault) throws MessageException {
+	public void setXMLFault(XMLFault xmlFault) throws WebServiceException {
 		// Since the XMLFault contains detail Blocks it makes sence to convert
         // to an XMLSpine first (since that is what we do in the other calls that set Blocks).
         // Of course if the XMLFault did not have detail Blocks we might be able to 
@@ -393,9 +393,9 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#isFault()
 	 */
-	public boolean isFault() throws MessageException {
+	public boolean isFault() throws WebServiceException {
         if (consumed) {
-            throw ExceptionFactory.makeMessageException(Messages.getMessage("XMLPartImplErr1"));
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("XMLPartImplErr1"));
         }
 
         try {
@@ -409,7 +409,7 @@
                 return getContentAsXMLSpine().isFault();
             }
         } catch (SOAPException se) {
-            throw ExceptionFactory.makeMessageException(se);
+            throw ExceptionFactory.makeWebServiceException(se);
         }
         return false;
 	}
@@ -424,9 +424,9 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#outputTo(javax.xml.stream.XMLStreamWriter, boolean)
 	 */
-	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException {
+	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException {
 		if (consumed) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("XMLPartImplErr1"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("XMLPartImplErr1"));
 		}
 		if (contentType == SPINE) {
 			getContentAsXMLSpine().outputTo(writer, consume);
@@ -454,56 +454,56 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getBodyBlock(int, java.lang.Object, org.apache.axis2.jaxws.message.factory.BlockFactory)
 	 */
-	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory) throws MessageException {
+	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory) throws WebServiceException {
 		return getContentAsXMLSpine().getBodyBlock(index, context, blockFactory);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getHeaderBlock(java.lang.String, java.lang.String, java.lang.Object, org.apache.axis2.jaxws.message.factory.BlockFactory)
 	 */
-	public Block getHeaderBlock(String namespace, String localPart, Object context, BlockFactory blockFactory) throws MessageException {
+	public Block getHeaderBlock(String namespace, String localPart, Object context, BlockFactory blockFactory) throws WebServiceException {
 		return getContentAsXMLSpine().getHeaderBlock(namespace, localPart, context, blockFactory);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getNumBodyBlocks()
 	 */
-	public int getNumBodyBlocks() throws MessageException {
+	public int getNumBodyBlocks() throws WebServiceException {
 		return getContentAsXMLSpine().getNumBodyBlocks();
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getNumHeaderBlocks()
 	 */
-	public int getNumHeaderBlocks() throws MessageException {
+	public int getNumHeaderBlocks() throws WebServiceException {
 		return getContentAsXMLSpine().getNumHeaderBlocks();
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#removeBodyBlock(int)
 	 */
-	public void removeBodyBlock(int index) throws MessageException {
+	public void removeBodyBlock(int index) throws WebServiceException {
 		getContentAsXMLSpine().removeBodyBlock(index);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#removeHeaderBlock(java.lang.String, java.lang.String)
 	 */
-	public void removeHeaderBlock(String namespace, String localPart) throws MessageException {
+	public void removeHeaderBlock(String namespace, String localPart) throws WebServiceException {
 		getContentAsXMLSpine().removeHeaderBlock(namespace, localPart);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#setBodyBlock(int, org.apache.axis2.jaxws.message.Block)
 	 */
-	public void setBodyBlock(int index, Block block) throws MessageException {
+	public void setBodyBlock(int index, Block block) throws WebServiceException {
 		getContentAsXMLSpine().setBodyBlock(index, block);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.XMLPart#setHeaderBlock(java.lang.String, java.lang.String, org.apache.axis2.jaxws.message.Block)
 	 */
-	public void setHeaderBlock(String namespace, String localPart, Block block) throws MessageException {
+	public void setHeaderBlock(String namespace, String localPart, Block block) throws WebServiceException {
 		getContentAsXMLSpine().setHeaderBlock(namespace, localPart, block);
 	}
     
@@ -526,57 +526,57 @@
 	 * Convert SOAPEnvelope into an OM tree
 	 * @param se SOAPEnvelope
 	 * @return OM
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract OMElement _convertSE2OM(SOAPEnvelope se) throws MessageException;
+	protected abstract OMElement _convertSE2OM(SOAPEnvelope se) throws WebServiceException;
 	
 	/**
 	 * Convert XMLSpine into an OM tree
 	 * @param spine XMLSpine
 	 * @return OM
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract OMElement _convertSpine2OM(XMLSpine spine) throws MessageException;
+	protected abstract OMElement _convertSpine2OM(XMLSpine spine) throws WebServiceException;
 	
 	/**
 	 * Convert OM tree into a SOAPEnvelope
 	 * @param om
 	 * @return SOAPEnvelope
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract SOAPEnvelope _convertOM2SE(OMElement om) throws MessageException;
+	protected abstract SOAPEnvelope _convertOM2SE(OMElement om) throws WebServiceException;
 	
 	/**
 	 * Convert XMLSpine into a SOAPEnvelope
 	 * @param spine
 	 * @return SOAPEnvelope
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract SOAPEnvelope _convertSpine2SE(XMLSpine spine) throws MessageException;
+	protected abstract SOAPEnvelope _convertSpine2SE(XMLSpine spine) throws WebServiceException;
 	
 	/**
 	 * Convert OM into XMLSpine
 	 * @param om
 	 * @return
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract XMLSpine _convertOM2Spine(OMElement om) throws MessageException;
+	protected abstract XMLSpine _convertOM2Spine(OMElement om) throws WebServiceException;
 	
 	/**
 	 * Convert SOAPEnvelope into XMLSPine
 	 * @param SOAPEnvelope
 	 * @return XMLSpine
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract XMLSpine _convertSE2Spine(SOAPEnvelope se) throws MessageException;
+	protected abstract XMLSpine _convertSE2Spine(SOAPEnvelope se) throws WebServiceException;
 	
 	/**
 	 * Create an empty, default spine for the specificed protocol
 	 * @param protocol
 	 * @return 
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected XMLSpine _createSpine(Protocol protocol) throws MessageException {
+	protected XMLSpine _createSpine(Protocol protocol) throws WebServiceException {
 		// Default implementation is to simply construct the spine. 
 		// Derived classes may wish to construct a different kind of XMLSpine
 		return new XMLSpineImpl(protocol, getStyle());
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockFactoryImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockFactoryImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockFactoryImpl.java	(working copy)
@@ -19,11 +19,11 @@
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.impl.builder.StAXOMBuilder;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 
 /**
@@ -39,7 +39,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.BlockFactory#createFrom(org.apache.axis2.jaxws.message.Block, java.lang.Object)
 	 */
-	public Block createFrom(Block other, Object context) throws XMLStreamException, MessageException {
+	public Block createFrom(Block other, Object context) throws XMLStreamException, WebServiceException {
 		// This is the default behavior.  Derived Factories may
 		// provide a more performant implementation.
 		if (other.getBlockFactory().equals(this)) {
@@ -60,7 +60,7 @@
         return newBlock;
 	}
 
-	public Block createFrom(XMLStreamReader reader, Object context, QName qName) throws XMLStreamException, MessageException {
+	public Block createFrom(XMLStreamReader reader, Object context, QName qName) throws XMLStreamException, WebServiceException {
 		StAXOMBuilder builder = new StAXOMBuilder(reader);  
 		OMElement omElement = builder.getDocumentElement();
 		return createFrom(omElement, context, qName);
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(working copy)
@@ -33,6 +33,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMNamespace;
@@ -41,7 +42,6 @@
 import org.apache.axis2.jaxws.message.Attachment;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.XMLPart;
@@ -80,7 +80,7 @@
 	 * This constructor constructs an empty message with the specified protocol
 	 * @param protocol
 	 */
-	MessageImpl(Protocol protocol) throws MessageException, XMLStreamException {
+	MessageImpl(Protocol protocol) throws WebServiceException, XMLStreamException {
 		createXMLPart(protocol);
 	}
 	
@@ -89,7 +89,7 @@
 	 * This constructor creates a message from the specified root.
 	 * @param root
 	 */
-	MessageImpl(OMElement root) throws MessageException, XMLStreamException  {
+	MessageImpl(OMElement root) throws WebServiceException, XMLStreamException  {
 		createXMLPart(root);
 	}
 	
@@ -98,17 +98,17 @@
 	 * This constructor creates a message from the specified root.
 	 * @param root
 	 */
-	MessageImpl(SOAPEnvelope root) throws MessageException, XMLStreamException  {
+	MessageImpl(SOAPEnvelope root) throws WebServiceException, XMLStreamException  {
 	    createXMLPart(root);
 	}
     
     /**
      * Create a new XMLPart and Protocol from the root
      * @param root SOAPEnvelope
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws XMLStreamException
      */
-    private void createXMLPart(SOAPEnvelope root) throws MessageException, XMLStreamException {
+    private void createXMLPart(SOAPEnvelope root) throws WebServiceException, XMLStreamException {
         XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
         xmlPart = factory.createFrom(root);
         protocol = xmlPart.getProtocol();
@@ -118,10 +118,10 @@
     /**
      * Create a new XMLPart and Protocol from the root
      * @param root OMElement
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws XMLStreamException
      */
-    private void createXMLPart(OMElement root) throws MessageException, XMLStreamException {
+    private void createXMLPart(OMElement root) throws WebServiceException, XMLStreamException {
         XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
         xmlPart = factory.createFrom(root);
         protocol = xmlPart.getProtocol();
@@ -131,16 +131,16 @@
     /**
      * Create a new empty XMLPart from the Protocol
      * @param protocol
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws XMLStreamException
      */
-    private void createXMLPart(Protocol protocol) throws MessageException, XMLStreamException {
+    private void createXMLPart(Protocol protocol) throws WebServiceException, XMLStreamException {
         this.protocol = protocol;
         if (protocol.equals(Protocol.unknown)) {
-            throw ExceptionFactory.makeMessageException(Messages.getMessage("ProtocolIsNotKnown"));
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ProtocolIsNotKnown"));
         } else if (protocol.equals(Protocol.rest)) {
             // TODO Need REST support
-            throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
         }
         XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
         xmlPart = factory.create(protocol);
@@ -150,7 +150,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.Message#getAsSOAPMessage()
 	 */
-	public SOAPMessage getAsSOAPMessage() throws MessageException {
+	public SOAPMessage getAsSOAPMessage() throws WebServiceException {
 
 		// TODO: 
 		// This is a non performant way to create SOAPMessage. I will serialize
@@ -205,7 +205,7 @@
             
             return soapMessage;
 		} catch (Exception e) {
-			throw ExceptionFactory.makeMessageException(e);
+			throw ExceptionFactory.makeWebServiceException(e);
 		}
 
 	}
@@ -216,7 +216,7 @@
 	 * @see org.apache.axis2.jaxws.message.XMLPart#getAsBlock(java.lang.Object,
 	 *      org.apache.axis2.jaxws.message.factory.BlockFactory)
 	 */
-	public Block getAsBlock(Object context, BlockFactory blockFactory) throws MessageException, XMLStreamException {
+	public Block getAsBlock(Object context, BlockFactory blockFactory) throws WebServiceException, XMLStreamException {
 		return xmlPart.getAsBlock(context, blockFactory);
 	}
 
@@ -271,31 +271,31 @@
 		return protocol;
 	}
 
-	public OMElement getAsOMElement() throws MessageException {
+	public OMElement getAsOMElement() throws WebServiceException {
 		return xmlPart.getAsOMElement();
 	}
 
-	public javax.xml.soap.SOAPEnvelope getAsSOAPEnvelope() throws MessageException {
+	public javax.xml.soap.SOAPEnvelope getAsSOAPEnvelope() throws WebServiceException {
 		return xmlPart.getAsSOAPEnvelope();
 	}
 
-	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory) throws MessageException {
+	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory) throws WebServiceException {
 		return xmlPart.getBodyBlock(index, context, blockFactory);
 	}
 
-	public Block getHeaderBlock(String namespace, String localPart, Object context, BlockFactory blockFactory) throws MessageException {
+	public Block getHeaderBlock(String namespace, String localPart, Object context, BlockFactory blockFactory) throws WebServiceException {
 		return xmlPart.getHeaderBlock(namespace, localPart, context, blockFactory);
 	}
 
-	public int getNumBodyBlocks() throws MessageException {
+	public int getNumBodyBlocks() throws WebServiceException {
 		return xmlPart.getNumBodyBlocks();
 	}
 
-	public int getNumHeaderBlocks() throws MessageException {
+	public int getNumHeaderBlocks() throws WebServiceException {
 		return xmlPart.getNumHeaderBlocks();
 	}
 
-	public XMLStreamReader getXMLStreamReader(boolean consume) throws MessageException {
+	public XMLStreamReader getXMLStreamReader(boolean consume) throws WebServiceException {
 		return xmlPart.getXMLStreamReader(consume);
 	}
 
@@ -303,23 +303,23 @@
 		return xmlPart.isConsumed();
 	}
 
-	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException {
+	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException {
 		xmlPart.outputTo(writer, consume);
 	}
 
-	public void removeBodyBlock(int index) throws MessageException {
+	public void removeBodyBlock(int index) throws WebServiceException {
 		xmlPart.removeBodyBlock(index);
 	}
 
-	public void removeHeaderBlock(String namespace, String localPart) throws MessageException {
+	public void removeHeaderBlock(String namespace, String localPart) throws WebServiceException {
 		xmlPart.removeHeaderBlock(namespace, localPart);
 	}
 
-	public void setBodyBlock(int index, Block block) throws MessageException {
+	public void setBodyBlock(int index, Block block) throws WebServiceException {
         xmlPart.setBodyBlock(index, block);
 	}
 
-	public void setHeaderBlock(String namespace, String localPart, Block block) throws MessageException {
+	public void setHeaderBlock(String namespace, String localPart, Block block) throws WebServiceException {
 		xmlPart.setHeaderBlock(namespace, localPart, block);
 	}
 
@@ -371,15 +371,15 @@
         mtomEnabled = b;
     }
 
-	public XMLFault getXMLFault() throws MessageException {
+	public XMLFault getXMLFault() throws WebServiceException {
 		return xmlPart.getXMLFault();
 	}
 
-	public void setXMLFault(XMLFault xmlFault) throws MessageException {
+	public void setXMLFault(XMLFault xmlFault) throws WebServiceException {
 		xmlPart.setXMLFault(xmlFault);
 	}
 
-	public boolean isFault() throws MessageException {
+	public boolean isFault() throws WebServiceException {
 		return xmlPart.isFault();
 	}
 
@@ -391,15 +391,15 @@
         return xmlPart.getStyle();
     }
 
-    public void setStyle(Style style) throws MessageException {
+    public void setStyle(Style style) throws WebServiceException {
         xmlPart.setStyle(style);
     }
 
-    public QName getOperationElement() throws MessageException {
+    public QName getOperationElement() throws WebServiceException {
         return xmlPart.getOperationElement();
     }
 
-    public void setOperationElement(QName operationQName) throws MessageException {
+    public void setOperationElement(QName operationQName) throws WebServiceException {
         xmlPart.setOperationElement(operationQName);
     }
 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLStreamReaderForXMLSpine.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLStreamReaderForXMLSpine.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLStreamReaderForXMLSpine.java	(working copy)
@@ -20,10 +20,10 @@
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.util.StackableReader;
 import org.apache.axis2.jaxws.message.util.XMLStreamReaderFilter;
@@ -158,7 +158,7 @@
 					sr.push(block.getXMLStreamReader(consume));
 				}
 			}
-		} catch (MessageException me) {
+		} catch (WebServiceException me) {
 			throw new XMLStreamException(me);
 		}
 	}
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartImpl.java	(working copy)
@@ -17,9 +17,9 @@
 package org.apache.axis2.jaxws.message.impl;
 
 import javax.xml.soap.SOAPEnvelope;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.SAAJConverterFactory;
 import org.apache.axis2.jaxws.message.util.SAAJConverter;
@@ -41,9 +41,9 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor constructs an empty XMLPart with the specified protocol
 	 * @param protocol
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	XMLPartImpl(Protocol protocol) throws MessageException {
+	XMLPartImpl(Protocol protocol) throws WebServiceException {
 		super(protocol);
 	}
 	
@@ -51,9 +51,9 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor creates an XMLPart from the specified root.
 	 * @param root
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	XMLPartImpl(OMElement root) throws MessageException {
+	XMLPartImpl(OMElement root) throws WebServiceException {
 		super(root);
 	}
 	
@@ -61,46 +61,46 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor creates an XMLPart from the specified root.
 	 * @param root
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	XMLPartImpl(SOAPEnvelope root) throws MessageException {
+	XMLPartImpl(SOAPEnvelope root) throws WebServiceException {
 		super(root);
 	}
 	
 	@Override
-	protected OMElement _convertSE2OM(SOAPEnvelope se) throws MessageException {
+	protected OMElement _convertSE2OM(SOAPEnvelope se) throws WebServiceException {
 		return getSAAJConverter().toOM(se);
 	}
 
 	@Override
-	protected OMElement _convertSpine2OM(XMLSpine spine) throws MessageException {
+	protected OMElement _convertSpine2OM(XMLSpine spine) throws WebServiceException {
 		
 		OMElement omEnvelope = spine.getAsOMElement();
 		return omEnvelope;
 	}
 
 	@Override
-	protected SOAPEnvelope _convertOM2SE(OMElement om) throws MessageException {
+	protected SOAPEnvelope _convertOM2SE(OMElement om) throws WebServiceException {
 		return getSAAJConverter().toSAAJ((org.apache.axiom.soap.SOAPEnvelope) om);
 	}
 
 	@Override
-	protected SOAPEnvelope _convertSpine2SE(XMLSpine spine) throws MessageException {
+	protected SOAPEnvelope _convertSpine2SE(XMLSpine spine) throws WebServiceException {
 		return _convertOM2SE(_convertSpine2OM(spine));
 	}
 
 	@Override
-	protected XMLSpine _convertOM2Spine(OMElement om) throws MessageException {
+	protected XMLSpine _convertOM2Spine(OMElement om) throws WebServiceException {
 		return new XMLSpineImpl((org.apache.axiom.soap.SOAPEnvelope) om, getStyle());
 	}
 
 	@Override
-	protected XMLSpine _convertSE2Spine(SOAPEnvelope se) throws MessageException {
+	protected XMLSpine _convertSE2Spine(SOAPEnvelope se) throws WebServiceException {
 		return _convertOM2Spine(_convertSE2OM(se));
 	}
 
 	@Override
-	protected XMLSpine _createSpine(Protocol protocol) throws MessageException {
+	protected XMLSpine _createSpine(Protocol protocol) throws WebServiceException {
 		// Use the default implementation provided in XMLPartBase
 		return super._createSpine(protocol);
 	}
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockImpl.java	(working copy)
@@ -23,6 +23,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMOutputFormat;
@@ -32,7 +33,6 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.XMLPart;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.util.Reader2Writer;
@@ -124,9 +124,9 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.Block#getBusinessObject(boolean)
 	 */
-	public Object getBusinessObject(boolean consume) throws XMLStreamException, MessageException {
+	public Object getBusinessObject(boolean consume) throws XMLStreamException, WebServiceException {
 		if (consumed) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (busObject != null) {
 			busObject =  _getBOFromBO(busObject, busContext, consume);
@@ -152,7 +152,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.Block#getQName()
 	 */
-	public QName getQName() throws MessageException {
+	public QName getQName() throws WebServiceException {
 		// If the QName is not known, find it
 		try {
 			if (qName == null) {
@@ -167,7 +167,7 @@
 			return qName;
 		} catch (Exception xse) {
             setConsumed(true);
-			throw ExceptionFactory.makeMessageException(xse);
+			throw ExceptionFactory.makeWebServiceException(xse);
 		}
 	}
 	
@@ -182,10 +182,10 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.Block#getXMLStreamReader(boolean)
 	 */
-	public XMLStreamReader getXMLStreamReader(boolean consume) throws XMLStreamException, MessageException {
+	public XMLStreamReader getXMLStreamReader(boolean consume) throws XMLStreamException, WebServiceException {
 		XMLStreamReader newReader = null;
 		if (consumed) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (omElement != null) {
 			if (consume) {
@@ -211,11 +211,7 @@
 	 * @see org.apache.axiom.om.OMDataSource#getReader()
 	 */
 	public XMLStreamReader getReader() throws XMLStreamException {
-		try {
-			return getXMLStreamReader(true);
-		} catch (MessageException e) {
-			throw ExceptionFactory.makeMessageInternalException(null, e);
-		}
+	    return getXMLStreamReader(true);
 	}
 
 	/* (non-Javadoc)
@@ -241,18 +237,14 @@
 	 * @see org.apache.axiom.om.OMDataSource#serialize(javax.xml.stream.XMLStreamWriter)
 	 */
 	public void serialize(XMLStreamWriter writer) throws XMLStreamException {
-		try {
-			outputTo(writer, true);
-		} catch (MessageException e) {
-			throw ExceptionFactory.makeMessageInternalException(null, e);
-		}
+		outputTo(writer, true);
 	}
 
-	public OMElement getOMElement() throws XMLStreamException, MessageException {
+	public OMElement getOMElement() throws XMLStreamException, WebServiceException {
 		OMElement newOMElement = null;
 		boolean consume =true;  // get the OM consumes the message
 		if (consumed) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (omElement != null) {
 			newOMElement = omElement;
@@ -299,9 +291,9 @@
 		return (qName != null);
 	}
 
-	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException {
+	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException {
 		if (consumed) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (omElement != null) {
 			if (consume) {
@@ -351,7 +343,7 @@
 	 * @param busContext
 	 * @return
 	 */
-	protected abstract Object _getBOFromReader(XMLStreamReader reader, Object busContext) throws XMLStreamException, MessageException;
+	protected abstract Object _getBOFromReader(XMLStreamReader reader, Object busContext) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * Get an XMLStreamReader for the BusinessObject
@@ -360,7 +352,7 @@
 	 * @param busContext
 	 * @return
 	 */
-	protected abstract XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, MessageException;
+	protected abstract XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * Output Reader contents to a Writer.
@@ -381,8 +373,8 @@
 	 * @param busContext
 	 * @param writer
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	protected abstract void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, MessageException;
+	protected abstract void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, WebServiceException;
 	
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageFactoryImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageFactoryImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageFactoryImpl.java	(working copy)
@@ -22,6 +22,7 @@
 import javax.xml.soap.SOAPMessage;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.soap.SOAPEnvelope;
@@ -30,7 +31,6 @@
 import org.apache.axis2.jaxws.message.Attachment;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.databinding.SOAPEnvelopeBlock;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
@@ -51,7 +51,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.MessageFactory#createFrom(javax.xml.stream.XMLStreamReader)
 	 */
-	public Message createFrom(XMLStreamReader reader) throws XMLStreamException, MessageException {
+	public Message createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException {
 		StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(reader, null);  // Pass null has the version to trigger autodetection
 		SOAPEnvelope omEnvelope = builder.getSOAPEnvelope();
 		return createFrom(omEnvelope);
@@ -60,14 +60,14 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.MessageFactory#createFrom(org.apache.axiom.om.OMElement)
 	 */
-	public Message createFrom(OMElement omElement) throws XMLStreamException, MessageException {
+	public Message createFrom(OMElement omElement) throws XMLStreamException, WebServiceException {
 		return new MessageImpl(omElement);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.MessageFactory#create(org.apache.axis2.jaxws.message.Protocol)
 	 */
-	public Message create(Protocol protocol) throws XMLStreamException, MessageException {
+	public Message create(Protocol protocol) throws XMLStreamException, WebServiceException {
 		return new MessageImpl(protocol);
 	}
 
@@ -75,7 +75,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.MessageFactory#createFrom(javax.xml.soap.SOAPMessage)
 	 */
-	public Message createFrom(SOAPMessage message) throws XMLStreamException, MessageException {
+	public Message createFrom(SOAPMessage message) throws XMLStreamException, WebServiceException {
 		try {
             // Create a Message with an XMLPart from the SOAPEnvelope
 			Message m = new MessageImpl(message.getSOAPPart().getEnvelope());
@@ -89,14 +89,14 @@
             }
 			return m;
 		} catch (Exception e) {
-			throw ExceptionFactory.makeMessageException(e);
+			throw ExceptionFactory.makeWebServiceException(e);
 		}
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.MessageFactory#createFrom(org.apache.axis2.jaxws.message.Block, java.lang.Object)
 	 */
-	public Message createFrom(Block block, Object context) throws XMLStreamException, MessageException {
+	public Message createFrom(Block block, Object context) throws XMLStreamException, WebServiceException {
 		
 		// Small optimization to quickly consider the SOAPEnvelope case
 		if (block instanceof SOAPEnvelopeBlock) {
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Protocol.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Protocol.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Protocol.java	(working copy)
@@ -18,6 +18,7 @@
  */
 package org.apache.axis2.jaxws.message;
 
+import javax.xml.ws.WebServiceException;
 import javax.xml.ws.soap.SOAPBinding;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
@@ -47,7 +48,7 @@
      * @param url
      * @return
      */
-    public static Protocol getProtocolForBinding(String url) throws MessageException {
+    public static Protocol getProtocolForBinding(String url) throws WebServiceException {
         boolean debug = log.isDebugEnabled();
         if (debug) {
             log.debug("Configuring message protocol for binding [" + url + "]");
@@ -70,7 +71,7 @@
             return Protocol.soap12;
         }
         else {
-            throw ExceptionFactory.makeMessageException(Messages.getMessage("protoNotFound00", url));
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("protoNotFound00", url));
         }
     }
     
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockImpl.java	(working copy)
@@ -28,12 +28,12 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.util.StAXUtils;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.XMLPart;
 import org.apache.axis2.jaxws.message.attachments.JAXBAttachmentMarshaller;
 import org.apache.axis2.jaxws.message.attachments.JAXBAttachmentUnmarshaller;
@@ -83,7 +83,7 @@
 	}
 
 	@Override
-	protected Object _getBOFromReader(XMLStreamReader reader, Object busContext) throws XMLStreamException, MessageException {
+	protected Object _getBOFromReader(XMLStreamReader reader, Object busContext) throws XMLStreamException, WebServiceException {
 	    // Get the JAXBBlockContext.  All of the necessry information is recorded on it
         JAXBBlockContext ctx = (JAXBBlockContext) busContext;
         try {
@@ -129,12 +129,12 @@
                 } catch (Exception e) {
                 }
             }
-			throw ExceptionFactory.makeMessageException(je);
+			throw ExceptionFactory.makeWebServiceException(je);
 		}
 	}
 
 	@Override
-	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, MessageException {
+	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, WebServiceException {
 		// TODO Review and determine if there is a better solution
 		
 		// This is hard because JAXB does not expose a reader from the business object.
@@ -158,7 +158,7 @@
 	}
 
 	@Override
-	protected void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, MessageException {
+	protected void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, WebServiceException {
         JAXBBlockContext ctx = (JAXBBlockContext) busContext;
         try {
 			// Very easy, use the Context to get the Marshaller.
@@ -197,7 +197,7 @@
                 } catch (Exception e) {
                 }
             }
-			throw ExceptionFactory.makeMessageException(je);
+			throw ExceptionFactory.makeWebServiceException(je);
 		}
 	}
 
@@ -205,7 +205,7 @@
 	 * Get the QName from the jaxb object
 	 * @param jaxb
 	 * @param jbc
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	private static QName getQName(Object jaxb, JAXBBlockContext ctx) throws JAXBException {
 		JAXBIntrospector jbi = JAXBUtils.getJAXBIntrospector(ctx.getJAXBContext());
@@ -231,12 +231,12 @@
      * @param m Marshaller
      * @param writer XMLStreamWriter
      */
-    private static void marshalByElement(Object b, Marshaller m, XMLStreamWriter writer) throws MessageException {
+    private static void marshalByElement(Object b, Marshaller m, XMLStreamWriter writer) throws WebServiceException {
         // TODO Log and trace here would be helpful
         try {
             m.marshal(b, writer);
         } catch (Exception e) {
-            throw ExceptionFactory.makeMessageException(e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
     }
     
@@ -245,14 +245,14 @@
      * @param u Unmarshaller
      * @param reader XMLStreamReader
      * @return Object that represents an element 
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    private static Object unmarshalByElement(Unmarshaller u, XMLStreamReader reader) throws MessageException {
+    private static Object unmarshalByElement(Unmarshaller u, XMLStreamReader reader) throws WebServiceException {
         // TODO Log and trace here would be helpful
         try {
             return u.unmarshal(reader);
         } catch (Exception e) {
-            throw ExceptionFactory.makeMessageException(e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
     }
     
@@ -263,7 +263,7 @@
      * @param writer XMLStreamWriter
      * @param type
      */
-    private static void marshalByType(Object b, Marshaller m, XMLStreamWriter writer, Class type) throws MessageException {
+    private static void marshalByType(Object b, Marshaller m, XMLStreamWriter writer, Class type) throws WebServiceException {
         // TODO Log and trace here would be helpful
         try {
             
@@ -299,7 +299,7 @@
             }
             m.marshal(b, writer);
         } catch (Exception e) {
-            throw ExceptionFactory.makeMessageException(e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
     }
     
@@ -311,9 +311,9 @@
      * @param reader XMLStreamReader
      * @param type Class
      * @return Object 
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    private static Object unmarshalByType(Unmarshaller u, XMLStreamReader reader, Class type) throws MessageException {
+    private static Object unmarshalByType(Unmarshaller u, XMLStreamReader reader, Class type) throws WebServiceException {
         // TODO Log and trace here would be helpful
         try {
             // Unfortunately RPC is type based.  Thus a
@@ -340,7 +340,7 @@
             } 
             return jaxb;
         } catch (Exception e) {
-            throw ExceptionFactory.makeMessageException(e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
     }
     
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockFactoryImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockFactoryImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockFactoryImpl.java	(working copy)
@@ -6,10 +6,10 @@
 import javax.xml.namespace.QName;
 import javax.xml.soap.SOAPEnvelope;
 import javax.xml.stream.XMLStreamException;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.factory.SOAPEnvelopeBlockFactory;
 import org.apache.axis2.jaxws.message.impl.BlockFactoryImpl;
 
@@ -38,7 +38,7 @@
 	 * @see org.apache.axis2.jaxws.message.factory.BlockFactory#createFrom(java.lang.Object, java.lang.Object, javax.xml.namespace.QName)
 	 */
 	public Block createFrom(Object businessObject, Object context, QName qName)
-			throws MessageException {
+			throws WebServiceException {
 		return new SOAPEnvelopeBlockImpl((SOAPEnvelope) businessObject, null, qName, this);
 	}
 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockFactoryImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockFactoryImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockFactoryImpl.java	(working copy)
@@ -19,10 +19,10 @@
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.transform.Source;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.factory.SourceBlockFactory;
 import org.apache.axis2.jaxws.message.impl.BlockFactoryImpl;
 
@@ -43,7 +43,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.BlockFactory#createFrom(java.lang.Object, java.lang.Object, javax.xml.namespace.QName)
 	 */
-	public Block createFrom(Object businessObject, Object context, QName qName) throws MessageException {
+	public Block createFrom(Object businessObject, Object context, QName qName) throws WebServiceException {
 		return new SourceBlockImpl((Source) businessObject, qName, this);
 	}
 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/OMBlockImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/OMBlockImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/OMBlockImpl.java	(working copy)
@@ -19,9 +19,9 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.databinding.OMBlock;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.impl.BlockImpl;
@@ -46,19 +46,19 @@
 	}
 	
 	@Override
-	protected Object _getBOFromReader(XMLStreamReader reader, Object busContext) throws XMLStreamException, MessageException {
+	protected Object _getBOFromReader(XMLStreamReader reader, Object busContext) throws XMLStreamException, WebServiceException {
 		// Take a shortcut and return the OMElement 
 		return this.getOMElement();
 	}
 
 	@Override
-	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, MessageException {
+	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, WebServiceException {
 		OMElement om = (OMElement) busObj;
 		return om.getXMLStreamReader();
 	}
 
 	@Override
-	protected void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, MessageException {
+	protected void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, WebServiceException {
 		OMElement om = (OMElement) busObject;
 		om.serialize(writer);
 	}
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockFactoryImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockFactoryImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockFactoryImpl.java	(working copy)
@@ -19,12 +19,12 @@
 import javax.xml.bind.JAXBException;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.databinding.JAXBBlockContext;
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
 import org.apache.axis2.jaxws.message.impl.BlockFactoryImpl;
@@ -47,7 +47,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.BlockFactory#createFrom(org.apache.axiom.om.OMElement, java.lang.Object, javax.xml.namespace.QName)
 	 */
-	public Block createFrom(OMElement omElement, Object context, QName qName) throws XMLStreamException, MessageException {
+	public Block createFrom(OMElement omElement, Object context, QName qName) throws XMLStreamException, WebServiceException {
 		// The context for a JAXBFactory must be non-null and should be a JAXBBlockContext.
 		if (context == null) {
 		    // JAXWS spec 4.3.4 conformance requires a WebServiceException whose cause is JAXBException
@@ -64,7 +64,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.BlockFactory#createFrom(java.lang.Object, java.lang.Object, javax.xml.namespace.QName)
 	 */
-	public Block createFrom(Object businessObject, Object context, QName qName) throws MessageException {
+	public Block createFrom(Object businessObject, Object context, QName qName) throws WebServiceException {
 		
 		// The context must be non-null and should be a JAXBBlockContext.
 		// For legacy reasons, a JAXBContext is also supported (and wrapped into a JAXBBlockContext)
@@ -93,7 +93,7 @@
 		try {
 			return new JAXBBlockImpl(businessObject, (JAXBBlockContext) context, qName, this);
 		} catch (JAXBException e) {
-			throw ExceptionFactory.makeMessageException(e);
+			throw ExceptionFactory.makeWebServiceException(e);
 		}
 	}
 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockImpl.java	(working copy)
@@ -9,10 +9,10 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.databinding.SOAPEnvelopeBlock;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
@@ -58,7 +58,7 @@
 	 */
 	@Override
 	protected Object _getBOFromReader(XMLStreamReader reader, Object busContext)
-			throws XMLStreamException, MessageException {
+			throws XMLStreamException, WebServiceException {
 		
 		// TODO Temporary solution.  The better way is to get an OM
 		// and convert with the SAAJConverter
@@ -74,7 +74,7 @@
 	 */
 	@Override
 	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext)
-			throws XMLStreamException, MessageException {
+			throws XMLStreamException, WebServiceException {
 		return new SOAPElementReader((SOAPElement)busObj);
 	}
 
@@ -83,7 +83,7 @@
 	 */
 	@Override
 	protected void _outputFromBO(Object busObject, Object busContext,
-			XMLStreamWriter writer) throws XMLStreamException, MessageException {
+			XMLStreamWriter writer) throws XMLStreamException, WebServiceException {
 		XMLStreamReader reader = _getReaderFromBO(busObject, busContext);
 		_outputFromReader(reader, writer);	
 	}
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java	(working copy)
@@ -36,12 +36,12 @@
 import javax.xml.transform.sax.SAXSource;
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.util.StAXUtils;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.databinding.SourceBlock;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.impl.BlockImpl;
@@ -87,7 +87,7 @@
 	 * @param qName
 	 * @param factory
 	 */
-	SourceBlockImpl(Source busObject, QName qName, BlockFactory factory) throws MessageException {
+	SourceBlockImpl(Source busObject, QName qName, BlockFactory factory) throws WebServiceException {
 		super(busObject, null, qName, factory);
 
 		// Check validity of Source
@@ -98,7 +98,7 @@
 			busObject instanceof JAXBSource) {
 			// Okay, these are supported Source objects
 		} else {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("SourceNotSupported", busObject.getClass().getName()));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SourceNotSupported", busObject.getClass().getName()));
 		}
 	}
 	
@@ -135,7 +135,7 @@
 	}
 
 	@Override
-	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, MessageException  {
+	protected XMLStreamReader _getReaderFromBO(Object busObj, Object busContext) throws XMLStreamException, WebServiceException  {
 	    try {
 	        // TODO not sure if this is always the most performant way to do this.
 	        if (busObj instanceof DOMSource) {
@@ -153,7 +153,7 @@
 	            // We had some problems with testers producing DOMSources w/o Namespaces.  
 	            // It's easy to catch this here.
 	            if (element.getLocalName() == null) {
-	                throw new XMLStreamException(ExceptionFactory.makeMessageException(Messages.getMessage("JAXBSourceNamespaceErr")));
+	                throw new XMLStreamException(ExceptionFactory.makeWebServiceException(Messages.getMessage("JAXBSourceNamespaceErr")));
 	            }
 	            
 	            return new DOMReader(element);
@@ -174,7 +174,7 @@
 	        return _slow_getReaderFromSource((Source)busObj);
 	    } catch (Exception e) {
             String className = (busObj == null) ? "none" : busObj.getClass().getName();
-	        throw ExceptionFactory.makeMessageException(Messages.getMessage("SourceReadErr", className), e);
+	        throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SourceReadErr", className), e);
 	    }
 	}
 	
@@ -196,7 +196,7 @@
    }
 
 	@Override
-	protected void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, MessageException {
+	protected void _outputFromBO(Object busObject, Object busContext, XMLStreamWriter writer) throws XMLStreamException, WebServiceException {
 		// There is no fast way to output the Source to a writer, so get the reader
 		// and pass use the default reader->writer.
 		XMLStreamReader reader = _getReaderFromBO(busObject, busContext);
@@ -210,7 +210,7 @@
 			return busObject;
 		} else {
 			// TODO Missing Impl
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("SourceMissingSupport", busObject.getClass().getName()), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SourceMissingSupport", busObject.getClass().getName()));
 		}
 	}
 	
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Message.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Message.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Message.java	(working copy)
@@ -21,6 +21,7 @@
 import javax.activation.DataHandler;
 import javax.xml.soap.MimeHeaders;
 import javax.xml.soap.SOAPMessage;
+import javax.xml.ws.WebServiceException;
 
 /**
  * Message
@@ -47,7 +48,7 @@
 	 * Get the xml part as a read/write SOAPEnvelope
 	 * @return SOAPEnvelope
 	 */
-	public SOAPMessage getAsSOAPMessage() throws MessageException;
+	public SOAPMessage getAsSOAPMessage() throws WebServiceException;
 	
     /**
      * Adds an attachment part to the message
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/XMLPartFactory.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/XMLPartFactory.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/XMLPartFactory.java	(working copy)
@@ -19,9 +19,9 @@
 import javax.xml.soap.SOAPEnvelope;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLPart;
 
@@ -41,27 +41,27 @@
 	 * @param reader XMLStreamReader
 	 * @throws MessageStreamException
 	 */
-	public XMLPart createFrom(XMLStreamReader reader) throws XMLStreamException, MessageException;
+	public XMLPart createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create XMLPart from OMElement
 	 * @param omElement OMElement
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public XMLPart createFrom(OMElement omElement) throws XMLStreamException, MessageException;
+	public XMLPart createFrom(OMElement omElement) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create XMLPart from SOAPEnvelope
 	 * @param soapEnvelope SOAPEnvelope
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public XMLPart createFrom(SOAPEnvelope soapEnvelope) throws XMLStreamException, MessageException;
+	public XMLPart createFrom(SOAPEnvelope soapEnvelope) throws XMLStreamException, WebServiceException;
 
 	/**
 	 * create empty XMLPart of the specified protocol
 	 * @param protocol
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public XMLPart create(Protocol protocol) throws XMLStreamException, MessageException;
+	public XMLPart create(Protocol protocol) throws XMLStreamException, WebServiceException;
 	
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/BlockFactory.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/BlockFactory.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/BlockFactory.java	(working copy)
@@ -19,10 +19,10 @@
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 
 /**
  * BlockFactory
@@ -46,9 +46,9 @@
 	 * @param context Associated Context or null
 	 * @param QName if known...if null the Block will determine the QName
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public Block createFrom(XMLStreamReader reader, Object context, QName qName) throws XMLStreamException, MessageException;
+	public Block createFrom(XMLStreamReader reader, Object context, QName qName) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * createBlock from XMLStreamReader
@@ -56,9 +56,9 @@
 	 * @param context Associated Context or null
 	 * @param QName if known...if null the Block will determine the QName
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public Block createFrom(OMElement omElement, Object context, QName qName) throws XMLStreamException, MessageException;
+	public Block createFrom(OMElement omElement, Object context, QName qName) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * createBlock from another Block
@@ -69,9 +69,9 @@
 	 * @param other Block
 	 * @param context Associated Context or null
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public Block createFrom(Block other, Object context) throws XMLStreamException, MessageException;
+	public Block createFrom(Block other, Object context) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * Create from business object
@@ -79,7 +79,7 @@
 	 * @param context Associated Context or null
 	 * @param QName if known...if null the Block will determine the QName
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public Block createFrom(Object businessObject, Object context, QName qName) throws MessageException;
+	public Block createFrom(Object businessObject, Object context, QName qName) throws WebServiceException;
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/MessageFactory.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/MessageFactory.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/MessageFactory.java	(working copy)
@@ -19,11 +19,11 @@
 import javax.xml.soap.SOAPMessage;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 
 /**
@@ -43,14 +43,14 @@
 	 * @param reader XMLStreamReader
 	 * @throws XMLStreamException
 	 */
-	public Message createFrom(XMLStreamReader reader) throws XMLStreamException, MessageException;
+	public Message createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create Message with the xml from the OMElement
 	 * @param omElement OMElement
 	 * @throws XMLStreamException
 	 */
-	public Message createFrom(OMElement omElement) throws XMLStreamException, MessageException;
+	public Message createFrom(OMElement omElement) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create Message from a Block
@@ -58,15 +58,15 @@
 	 * @param context Associated Context or null
 	 * @throws XMLStreamException
 	 */
-	public Message createFrom(Block other, Object context) throws XMLStreamException, MessageException;
+	public Message createFrom(Block other, Object context) throws XMLStreamException, WebServiceException;
 
 	/**
 	 * create Message from SOAPMessage
 	 * The xml and attachments from the SOAPMessage are used to populate the new Message
 	 * @param SOAPMessage
-	 * @throws XMLStreamException, MessageException
+	 * @throws XMLStreamException, WebServiceException
 	 */
-	public Message createFrom(SOAPMessage message) throws XMLStreamException, MessageException;
+	public Message createFrom(SOAPMessage message) throws XMLStreamException, WebServiceException;
 
 	
 	/**
@@ -74,5 +74,5 @@
 	 * @param protocol
 	 * @throws XMLStreamException
 	 */
-	public Message create(Protocol protocol) throws XMLStreamException, MessageException;
+	public Message create(Protocol protocol) throws XMLStreamException, WebServiceException;
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/XMLPart.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/XMLPart.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/XMLPart.java	(working copy)
@@ -22,6 +22,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
@@ -63,18 +64,18 @@
 	 * Write out the Message
 	 * @param writer XMLStreamWriter
 	 * @param consume true if this is the last request on the block.
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException;	
+	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException;	
 	
 	/**
 	 * Get the XMLStreamReader represented by this Message for the xml part
 	 * @param consume true if this is the last request on the Message
 	 * @return XMLStreamReader
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 * @throws XMLStreamException
 	 */
-	public XMLStreamReader getXMLStreamReader(boolean consume) throws MessageException;
+	public XMLStreamReader getXMLStreamReader(boolean consume) throws WebServiceException;
 	
     /**
      * @return the Style (document or rpc)
@@ -85,19 +86,19 @@
      * Set the Style. 
      * @param style Style
      */
-    public void setStyle(Style style) throws MessageException;
+    public void setStyle(Style style) throws WebServiceException;
 
     /**
      * @return the QName of the operation element if Style.rpc.  Otherwise null
      */
-    public QName getOperationElement() throws MessageException;
+    public QName getOperationElement() throws WebServiceException;
     
     /**
      * Set the operation element qname.  The operation qname is only used if
      * Style.rpc
      * @param operationQName
      */
-    public void setOperationElement(QName operationQName) throws MessageException;
+    public void setOperationElement(QName operationQName) throws WebServiceException;
     
 	/**
 	 * isConsumed
@@ -111,7 +112,7 @@
 	 * Determines whether the XMLPart represents a Fault
 	 * @return true if the message represents a fault
 	 */
-	public boolean isFault() throws MessageException;
+	public boolean isFault() throws WebServiceException;
 	
 	/**
 	 * If the XMLPart represents a fault, an XMLFault is returned
@@ -119,7 +120,7 @@
 	 * @return the XMLFault object or null
      * @see XMLFault
 	 */
-	public XMLFault getXMLFault() throws MessageException;
+	public XMLFault getXMLFault() throws WebServiceException;
 	
 	/**
 	 * Change the XMLPart so that it represents the fault described
@@ -127,7 +128,7 @@
 	 * @param xmlfault
      * @see XMLFault
 	 */
-	public void setXMLFault(XMLFault xmlFault) throws MessageException;
+	public void setXMLFault(XMLFault xmlFault) throws WebServiceException;
 	
     /**
      * getParent
@@ -148,17 +149,17 @@
 	 * getAsEnvelope
 	 * Get the xml part as a read/write SOAPEnvelope
 	 * @return SOAPEnvelope
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public SOAPEnvelope getAsSOAPEnvelope() throws MessageException;
+	public SOAPEnvelope getAsSOAPEnvelope() throws WebServiceException;
 	
 	/**
 	 * getAsOMElement
 	 * Get the xml part as a read/write OM
 	 * @return OMElement (probably OM SOAPEnvelope)
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public OMElement getAsOMElement() throws MessageException;
+	public OMElement getAsOMElement() throws WebServiceException;
 	
 	/**
 	 * getAsBlock
@@ -167,19 +168,19 @@
 	 * proper kind of block.
 	 * 
 	 * @return Block
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public Block getAsBlock(
 			Object context, 
 			BlockFactory blockFactory)  
-		throws MessageException, XMLStreamException;
+		throws WebServiceException, XMLStreamException;
 	
 	/**
 	 * getNumBodyBlocks
 	 * @return number of body blocks
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public int getNumBodyBlocks() throws MessageException;
+	public int getNumBodyBlocks() throws WebServiceException;
 	
 	/**
 	 * getBodyBlock
@@ -191,10 +192,10 @@
 	 * @param context
 	 * @param blockFactory
 	 * @return Block
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public Block getBodyBlock(int index, Object context, BlockFactory blockFactory)  
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * setBodyBlock
@@ -203,25 +204,25 @@
 	 * use the getBodyBlock method to access it.
 	 * @param index
 	 * @param block
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public void setBodyBlock(int index, Block block) throws MessageException;
+	public void setBodyBlock(int index, Block block) throws WebServiceException;
 	
 	/**
 	 * removePayload
 	 * Removes the indicated BodyBlock
 	 * @param index
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public void removeBodyBlock(int index) throws MessageException;
+	public void removeBodyBlock(int index) throws WebServiceException;
 	
 	
 	/**
 	 * getNumHeaderBlocks
 	 * @return number of header blocks
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public int getNumHeaderBlocks() throws MessageException;
+	public int getNumHeaderBlocks() throws WebServiceException;
 	
 	/**
 	 * getHeaderBlock
@@ -234,12 +235,12 @@
 	 * @param context
 	 * @param blockFactory
 	 * @return Block
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public Block getHeaderBlock(String namespace, String localPart, 
 			Object context, 
 			BlockFactory blockFactory)  
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * appendHeaderBlock
@@ -249,20 +250,20 @@
 	 * @param namespace
 	 * @param localPart
 	 * @param block
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public void setHeaderBlock(String namespace, String localPart, Block block) 
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * removePayload
 	 * Removes the indicated block
 	 * @param namespace
 	 * @param localPart
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public void removeHeaderBlock(String namespace, String localPart) 
-		throws MessageException;
+		throws WebServiceException;
 	
 	
 	/**
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Block.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Block.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/Block.java	(working copy)
@@ -20,6 +20,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMDataSource;
 import org.apache.axiom.om.OMElement;
@@ -53,9 +54,9 @@
 	 * @param consume true if this is the last request on the block.
 	 * @return Object (JAXB, String etc.)
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public Object getBusinessObject(boolean consume) throws XMLStreamException, MessageException;
+	public Object getBusinessObject(boolean consume) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * GetBusinesContext
@@ -70,25 +71,25 @@
 	 * @return XMLStreamReader
 	 * @throws XMLStreamException
 	 */
-	public XMLStreamReader getXMLStreamReader(boolean consume) throws XMLStreamException, MessageException;
+	public XMLStreamReader getXMLStreamReader(boolean consume) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * Get the OMElement represented by this Block.
 	 * This call always consumes the block because you are taking control of the underlying OM
 	 * @return
 	 * @throws XMLStreamException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
-	public OMElement getOMElement() throws XMLStreamException, MessageException;
+	public OMElement getOMElement() throws XMLStreamException, WebServiceException;
 	
     /**
      * Write out the Block
      * @param writer XMLStreamWriter
      * @param consume true if this is the last request on the block.
      * @throws XMLStreamException
-     * @trhows MessageException
+     * @trhows WebServiceException
      */
-    public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException;	
+    public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, WebServiceException;	
         
     /**
      * isConsumed
@@ -119,9 +120,9 @@
 	 * Asking for the QName can cause a performant hit.
 	 * @see isQNameAvailable
 	 * @return QName of the block
-	 * @throw MessageException
+	 * @throw WebServiceException
 	 */
-	public QName getQName() throws MessageException;
+	public QName getQName() throws WebServiceException;
     
 	/**
 	 * Get BlockFactory 
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java	(working copy)
@@ -33,6 +33,7 @@
 import javax.xml.soap.SOAPPart;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMNamespace;
@@ -40,7 +41,6 @@
 import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.util.SAAJConverter;
 import org.apache.axis2.jaxws.message.util.SOAPElementReader;
 import org.apache.axis2.jaxws.util.SAAJFactory;
@@ -62,7 +62,7 @@
 	 * @see org.apache.axis2.jaxws.message.util.SAAJConverter#toSAAJ(org.apache.axiom.soap.SOAPEnvelope)
 	 */
 	public SOAPEnvelope toSAAJ(org.apache.axiom.soap.SOAPEnvelope omEnvelope)
-			throws MessageException {
+			throws WebServiceException {
 		SOAPEnvelope soapEnvelope = null;
 		try {
 			// Build the default envelope
@@ -91,10 +91,10 @@
 			
 			NameCreator nc = new NameCreator(soapEnvelope);
 			buildSOAPTree(nc, soapEnvelope, null, reader, false);
-		} catch (MessageException e) {
+		} catch (WebServiceException e) {
 			throw e;
 		} catch (SOAPException e) {
-			throw ExceptionFactory.makeMessageException(e);
+			throw ExceptionFactory.makeWebServiceException(e);
 		}
 		return soapEnvelope;
 	}
@@ -103,7 +103,7 @@
 	 * @see org.apache.axis2.jaxws.message.util.SAAJConverter#toOM(javax.xml.soap.SOAPEnvelope)
 	 */
 	public org.apache.axiom.soap.SOAPEnvelope toOM(SOAPEnvelope saajEnvelope)
-			throws MessageException {
+			throws WebServiceException {
 		// Get a XMLStreamReader backed by a SOAPElement tree
 		XMLStreamReader reader = new SOAPElementReader(saajEnvelope);
 		// Get a SOAP OM Builder.  Passing null causes the version to be automatically triggered
@@ -118,7 +118,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.util.SAAJConverter#toOM(javax.xml.soap.SOAPElement)
 	 */
-	public OMElement toOM(SOAPElement soapElement) throws MessageException {
+	public OMElement toOM(SOAPElement soapElement) throws WebServiceException {
 		// Get a XMLStreamReader backed by a SOAPElement tree
 		XMLStreamReader reader = new SOAPElementReader(soapElement);
 		// Get a OM Builder.  Passing null causes the version to be automatically triggered
@@ -131,7 +131,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.util.SAAJConverter#toSAAJ(org.apache.axiom.om.OMElement, javax.xml.soap.SOAPElement)
 	 */
-	public SOAPElement toSAAJ(OMElement omElement, SOAPElement parent) throws MessageException {
+	public SOAPElement toSAAJ(OMElement omElement, SOAPElement parent) throws WebServiceException {
 		XMLStreamReader reader = null;
 		
 		// If the OM element is not attached to a parser (builder), then the OM
@@ -148,7 +148,7 @@
 			env = env.getParentElement();
 		}
 		if (env == null) {
-			throw ExceptionFactory.makeMessageException(Messages.getMessage("SAAJConverterErr1"));
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SAAJConverterErr1"));
 		}
 		NameCreator nc = new NameCreator((SOAPEnvelope) env);
 		return buildSOAPTree(nc, null, parent, reader, false);
@@ -158,7 +158,7 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.util.SAAJConverter#toSAAJ(org.apache.axiom.om.OMElement, javax.xml.soap.SOAPElement, javax.xml.soap.SOAPFactory)
 	 */
-	public SOAPElement toSAAJ(OMElement omElement, SOAPElement parent, SOAPFactory sf) throws MessageException {
+	public SOAPElement toSAAJ(OMElement omElement, SOAPElement parent, SOAPFactory sf) throws WebServiceException {
 		XMLStreamReader reader = null;
 		
 		// If the OM element is not attached to a parser (builder), then the OM
@@ -191,7 +191,7 @@
 					SOAPElement parent, 
 					XMLStreamReader reader, 
 					boolean quitAtBody) 
-		throws MessageException {
+		throws WebServiceException {
 		try {
 			while(reader.hasNext()) {
 				int eventID = reader.next();	
@@ -272,12 +272,12 @@
 					this._unexpectedEvent("EventID " +String.valueOf(eventID));
 				}
 			}	
-		} catch (MessageException e) {
+		} catch (WebServiceException e) {
 			throw e;
 		} catch (XMLStreamException e) {
-			throw ExceptionFactory.makeMessageException(e);
+			throw ExceptionFactory.makeWebServiceException(e);
 		} catch (SOAPException e) {
-			throw ExceptionFactory.makeMessageException(e);
+			throw ExceptionFactory.makeWebServiceException(e);
 		}
 		return root;
 	}
@@ -405,11 +405,11 @@
 		}
 	}
 	
-	private void _unexpectedEvent(String event) throws MessageException {
+	private void _unexpectedEvent(String event) throws WebServiceException {
 		// Review We need NLS for this message, but this code will probably 
 		// be added to JAX-WS.  So for now we there is no NLS.
 		// TODO NLS
-		throw ExceptionFactory.makeMessageException(Messages.getMessage("SAAJConverterErr2", event));
+		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SAAJConverterErr2", event));
 	}
 	
 	/**
@@ -447,7 +447,7 @@
 		
 	}
 
-    public MessageFactory createMessageFactory(String namespace) throws SOAPException, MessageException {
+    public MessageFactory createMessageFactory(String namespace) throws SOAPException, WebServiceException {
         return SAAJFactory.createMessageFactory(namespace);
     }
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/Reader.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/Reader.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/Reader.java	(working copy)
@@ -21,10 +21,10 @@
 import javax.xml.stream.Location;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.message.MessageInternalException;
 
 /**
  * Reader
@@ -67,9 +67,9 @@
 		return resettable;
 	}
 	
-	public void reset() throws MessageInternalException {
+	public void reset() throws WebServiceException {
 		if (!resettable) {
-			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("resetReaderErr"), null);
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("resetReaderErr"));
 		}
 		reader = newReader();
 	}
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(working copy)
@@ -29,6 +29,7 @@
 import javax.xml.soap.MimeHeaders;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPMessage;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.attachments.Attachments;
 import org.apache.axiom.om.OMAbstractFactory;
@@ -49,7 +50,6 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.message.Attachment;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.attachments.AttachmentUtils;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
@@ -148,7 +148,7 @@
      * @param msgContext
      * @return Message
      */
-    public static Message getMessageFromMessageContext(MessageContext msgContext) throws MessageException {
+    public static Message getMessageFromMessageContext(MessageContext msgContext) throws WebServiceException {
         if (log.isDebugEnabled()) {
             log.debug("Start getMessageFromMessageContext");
         }
@@ -251,7 +251,7 @@
      * @param message JAX-WS Message
      * @param msgContext Axis2MessageContext
      */
-    public static void putMessageOnMessageContext(Message message, MessageContext msgContext) throws AxisFault, MessageException {
+    public static void putMessageOnMessageContext(Message message, MessageContext msgContext) throws AxisFault, WebServiceException {
         // Put the XML message on the Axis 2 Message Context
         SOAPEnvelope envelope = (SOAPEnvelope) message.getAsOMElement();
         msgContext.setEnvelope(envelope);
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/SAAJConverter.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/SAAJConverter.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/SAAJConverter.java	(working copy)
@@ -21,9 +21,9 @@
 import javax.xml.soap.SOAPEnvelope;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPFactory;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
-import org.apache.axis2.jaxws.message.MessageException;
 
 /**
  * SAAJConverter
@@ -35,28 +35,28 @@
 	 * Convert OM SOAPEnvleope to SAAJ SOAPEnvelope
 	 * @param omElement
 	 * @return SOAPEnvelope
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public SOAPEnvelope toSAAJ(org.apache.axiom.soap.SOAPEnvelope omElement)
-		throws MessageException;
+		throws WebServiceException;
 
 	/**
 	 * Convert SAAJ SOAPEnvelope to OM SOAPEnvelope
 	 * @param saajEnvelope
 	 * @return OM Envelope
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public org.apache.axiom.soap.SOAPEnvelope toOM(SOAPEnvelope saajEnvelope)
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * Convert SOAPElement into an OMElement
 	 * @param soapElement
 	 * @return OMElement
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 */
 	public OMElement toOM(SOAPElement soapElement) 
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * Convert omElement into a SOAPElement and add it to the parent SOAPElement.
@@ -66,11 +66,11 @@
 	 * @param omElement
 	 * @param parent SOAPElement
 	 * @return SOAPElement that was added to the parent.
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 * @see toSAAJ(OMElement, SOAPElement, SOAPFactory)
 	 */
 	public SOAPElement toSAAJ(OMElement omElement, SOAPElement parent)
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * Convert omElement into a SOAPElement and add it to the parent SOAPElement.
@@ -78,19 +78,19 @@
 	 * @param parent SOAPElement
 	 * @param sf SOAPFactory that is used to create Name objects
 	 * @return SOAPElement that was added to the parent.
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 * * @see toSAAJ(OMElement, SOAPElement)
 	 */
 	public SOAPElement toSAAJ(OMElement omElement, SOAPElement parent, SOAPFactory sf)
-		throws MessageException;
+		throws WebServiceException;
 	
 	/**
 	 * Creates a MessageFactory that can support the SOAP version identified
 	 * by the specified envelope namespace. 
 	 * @param namespace
 	 * @return
-	 * @throws MessageException if the namespace is SOAP 1.2 and the SAAJ does not support
+	 * @throws WebServiceException if the namespace is SOAP 1.2 and the SAAJ does not support
 	 * SOAP 1.2 or the namespace is unknown.
 	 */
-	public MessageFactory createMessageFactory(String namespace) throws SOAPException, MessageException;
+	public MessageFactory createMessageFactory(String namespace) throws SOAPException, WebServiceException;
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/XMLFaultUtils.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/XMLFaultUtils.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/message/util/XMLFaultUtils.java	(working copy)
@@ -22,6 +22,7 @@
 
 import javax.xml.namespace.QName;
 import javax.xml.soap.SOAPException;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMNamespace;
@@ -40,7 +41,6 @@
 import org.apache.axiom.soap.SOAPFaultValue;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.XMLFaultCode;
 import org.apache.axis2.jaxws.message.XMLFaultReason;
@@ -87,7 +87,7 @@
 	 * @param detailBlocks
 	 * @return
 	 */
-	public static XMLFault createXMLFault(SOAPFault soapFault, Block[] detailBlocks) throws MessageException {
+	public static XMLFault createXMLFault(SOAPFault soapFault, Block[] detailBlocks) throws WebServiceException {
         
 	    // The SOAPFault structure is modeled after SOAP 1.2.  
         // Here is a sample comprehensive SOAP 1.2 fault which will help you understand the
@@ -188,7 +188,7 @@
      * @param detailBlocks
      * @return
      */
-    public static XMLFault createXMLFault(javax.xml.soap.SOAPFault soapFault) throws MessageException {
+    public static XMLFault createXMLFault(javax.xml.soap.SOAPFault soapFault) throws WebServiceException {
        // Convert the SOAPFault into an OM SOAPFault.  OMSOAP Fault already supports SOAP 1.2, so this makes the code easier to migrate
        SAAJConverter converter = 
            (SAAJConverter) FactoryRegistry.getFactory(SAAJConverter.class);
@@ -198,7 +198,7 @@
        return xmlFault;
     }
     
-    private static Block[] getDetailBlocks(SOAPFault soapFault) throws MessageException {
+    private static Block[] getDetailBlocks(SOAPFault soapFault) throws WebServiceException {
         try {
             Block[] blocks = null;
             SOAPFaultDetail detail = soapFault.getDetail();
@@ -216,7 +216,7 @@
             }
             return blocks;
         } catch (Exception e) {
-            throw ExceptionFactory.makeMessageException(e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
     }
         
@@ -233,7 +233,7 @@
      */
     public static SOAPFault createSOAPFault(XMLFault xmlFault, 
                 SOAPBody body, 
-                boolean ignoreDetailBlocks) throws MessageException {
+                boolean ignoreDetailBlocks) throws WebServiceException {
         
         // Get the factory and create the soapFault
         SOAPFactory factory = MessageUtils.getSOAPFactory(body);
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(working copy)
@@ -51,7 +51,6 @@
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.message.util.MessageUtils;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
@@ -362,8 +361,8 @@
             if (log.isDebugEnabled()) {
                 log.debug("Properties: " + axisRequestMsgCtx.getProperties().toString());
             }
-        } catch (MessageException e) {
-            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("prepareRequestFail"), e);
+        } catch (WebServiceException e) {
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("prepareRequestFail"));
         } catch (AxisFault e) {
             throw ExceptionFactory.makeWebServiceException(Messages.getMessage("prepareRequestFail"), e);
         }
@@ -491,7 +490,7 @@
             op.setMessageReceiver(new CallbackReceiver());
     }
     
-    private Message createMessageFromOM(OMElement om) throws MessageException {
+    private Message createMessageFromOM(OMElement om) throws WebServiceException {
         try {
             MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
             Message msg = mf.createFrom(om);
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java	(working copy)
@@ -21,13 +21,13 @@
 
 import javax.xml.namespace.QName;
 import javax.xml.ws.BindingProvider;
+import javax.xml.ws.WebServiceException;
 import javax.xml.ws.Service.Mode;
 
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.util.MessageUtils;
 
 /**
@@ -62,7 +62,7 @@
         properties = new HashMap<String, Object>();
     }
     
-    public MessageContext(org.apache.axis2.context.MessageContext mc) throws MessageException {
+    public MessageContext(org.apache.axis2.context.MessageContext mc) throws WebServiceException {
         properties = new HashMap<String, Object>();
         
         if (mc != null) {
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/util/MessageContextUtils.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/util/MessageContextUtils.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/core/util/MessageContextUtils.java	(working copy)
@@ -16,10 +16,11 @@
  */
 package org.apache.axis2.jaxws.core.util;
 
+import javax.xml.ws.WebServiceException;
+
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.util.MessageContextBuilder;
 
 /**
@@ -52,8 +53,6 @@
             return newMC;
         } catch (AxisFault e) {
             throw ExceptionFactory.makeWebServiceException(e);
-        } catch (MessageException e) {
-            throw ExceptionFactory.makeWebServiceException(e);
         }
     }
     
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitWrappedMethodMarshallerImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitWrappedMethodMarshallerImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitWrappedMethodMarshallerImpl.java	(working copy)
@@ -34,7 +34,6 @@
 import org.apache.axis2.jaxws.marshaller.MethodParameter;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.databinding.JAXBBlockContext;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
@@ -260,16 +259,16 @@
      * @param jaxbElement object representing the element to marshal (JAXBElement or object has @XmlRootElement)
      * @return
      * @throws JAXBException
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws XMLStreamException
      */
-    private Message createMessage(Object jaxbElement, OperationDescription operationDesc)throws JAXBException, MessageException, XMLStreamException{
+    private Message createMessage(Object jaxbElement, OperationDescription operationDesc)throws JAXBException, WebServiceException, XMLStreamException{
             Block bodyBlock = null;
             
             Protocol protocol = null;
             try {
                 protocol = Protocol.getProtocolForBinding(operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getBindingType()); //soap11;
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java	(working copy)
@@ -30,7 +30,6 @@
 import org.apache.axis2.jaxws.description.ParameterDescription;
 import org.apache.axis2.jaxws.marshaller.MethodMarshaller;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
@@ -139,7 +138,7 @@
         if (protocol == null) {
             try {
                 protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
@@ -203,7 +202,7 @@
         Protocol protocol = null;
         try {
             protocol = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID());
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO better handling than this?
             e.printStackTrace();
         }
@@ -259,7 +258,7 @@
         if (protocol == null) {
             try {
                 protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(working copy)
@@ -33,7 +33,6 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.marshaller.MethodMarshaller;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
@@ -55,7 +54,7 @@
         Protocol protocol = null;
         try {
             protocol = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID()); 
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO better handling than this?
             e.printStackTrace();
         }
@@ -191,7 +190,7 @@
         if (protocol == null) {
             try {
                 protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
@@ -328,7 +327,7 @@
         if (protocol == null) {
             try {
                 protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(working copy)
@@ -43,7 +43,6 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.XMLFaultReason;
 import org.apache.axis2.jaxws.message.databinding.JAXBBlockContext;
@@ -140,7 +139,7 @@
             Message message, 
             Set<String> packages, 
             boolean isInput, 
-            boolean usePartName) throws MessageException, XMLStreamException {
+            boolean usePartName) throws WebServiceException, XMLStreamException {
         
         List<PDElement> pvList = new ArrayList<PDElement>();
             
@@ -307,9 +306,9 @@
      * @param message Message
      * @param packages Packages needed to do a JAXB Marshal
      * @param isRPC 
-     * @throws MessageException
+     * @throws WebServiceException
      */
-    static void toMessage(List<PDElement> pvList, Message message, Set<String> packages, boolean isRPC) throws MessageException {
+    static void toMessage(List<PDElement> pvList, Message message, Set<String> packages, boolean isRPC) throws WebServiceException {
         
         int index = message.getNumBodyBlocks();
         for (int i=0; i<pvList.size(); i++) {
@@ -353,7 +352,7 @@
      * @param packages
      * @param message
      * @param isRPC
-     * @throws MessageException
+     * @throws WebServiceException
      */
     static void toMessage(Object returnValue, 
             Class returnType, 
@@ -362,7 +361,7 @@
             Set<String> packages, 
             Message message, 
             boolean isRPC) 
-            throws MessageException {
+            throws WebServiceException {
         
         // Create the JAXBBlockContext
         // RPC uses type marshalling, so recored the rpcType
@@ -390,11 +389,11 @@
      * @param message
      * @param rpcType RPC Declared Type class (only used for RPC processing
      * @return type enabled object
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws XMLStreamException
      */
     static Object getReturnValue(Set<String> packages, Message message, Class rpcType) 
-        throws MessageException, XMLStreamException {
+        throws WebServiceException, XMLStreamException {
         
         
         // The return object is the first block in the body
@@ -419,13 +418,13 @@
      * @param packages Packages needed to marshal the object
      * @param message Message
      * @param isRPC
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws NoSuchMethodException
      * @throws InvocationTargetException
      * @throws IllegalAccessException
      */
     static void marshalFaultResponse(Throwable throwable, OperationDescription operationDesc,  Set<String> packages, Message message, boolean isRPC)
-     throws MessageException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+     throws WebServiceException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
         
         // Get the root cause of the throwable object
         Throwable t = ClassUtils.getRootCause(throwable);
@@ -516,7 +515,7 @@
      * @param message
      * @param isRPC
      * @return Throwable
-     * @throws MessageException
+     * @throws WebServiceException
      * @throws ClassNotFoundException
      * @throws IllegalAccessException
      * @throws InstantiationException
@@ -525,7 +524,7 @@
      * @throws NoSuchMethodException
      */
     static Throwable demarshalFaultResponse(OperationDescription operationDesc, Set<String> packages,Message message, boolean isRPC) 
-        throws MessageException, ClassNotFoundException, IllegalAccessException,
+        throws WebServiceException, ClassNotFoundException, IllegalAccessException,
                InstantiationException, XMLStreamException, InvocationTargetException, NoSuchMethodException {
         
         Throwable exception = null;
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java	(working copy)
@@ -38,7 +38,6 @@
 import org.apache.axis2.jaxws.marshaller.MethodMarshaller;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.databinding.JAXBBlockContext;
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
@@ -265,7 +264,7 @@
         if (protocol == null) {
             try {
                 protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
@@ -370,7 +369,7 @@
         Protocol protocol = null;
         try {
             protocol = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID()); 
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO better handling than this?
             e.printStackTrace();
         }
@@ -463,7 +462,7 @@
         if (protocol == null) {
             try {
                 protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 // TODO better handling than this?
                 e.printStackTrace();
             }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java	(working copy)
@@ -32,7 +32,6 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.marshaller.MethodParameter;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -115,7 +114,7 @@
 		}
         
     }
-	private ArrayList<MethodParameter> createParameterForSEIMethod(Message message, OperationDescription operationDesc)throws IllegalAccessException, InstantiationException, ClassNotFoundException, MessageException, XMLStreamException, JAXBException{
+	private ArrayList<MethodParameter> createParameterForSEIMethod(Message message, OperationDescription operationDesc)throws IllegalAccessException, InstantiationException, ClassNotFoundException, WebServiceException, XMLStreamException, JAXBException{
 	    ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
 	    if(message == null){
 	        return null;
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java	(working copy)
@@ -51,7 +51,6 @@
 import org.apache.axis2.jaxws.marshaller.MethodParameter;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.message.XMLFaultReason;
@@ -609,7 +608,7 @@
 		return (objects!=null)? new ArrayList<T>(Arrays.asList(objects)):new ArrayList<T>();
 	}
 	
-	protected Block createJAXBBlock(Object jaxbObject, JAXBBlockContext context) throws MessageException{
+	protected Block createJAXBBlock(Object jaxbObject, JAXBBlockContext context) throws WebServiceException{
 		JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
 		return factory.createFrom(jaxbObject,context,null);
 		
@@ -618,7 +617,7 @@
 	protected Block createJAXBBlock(String name, 
 			Object jaxbObject, 
 			JAXBBlockContext context, 
-			String targetNamespace) throws MessageException, JAXBException {
+			String targetNamespace) throws WebServiceException, JAXBException {
 		
 		JAXBIntrospector i  = JAXBUtils.getJAXBIntrospector(context.getJAXBContext());
 		boolean isElement = i.isElement(jaxbObject);
@@ -751,7 +750,7 @@
 		return null;
 	}
 	
-	protected Message createMessage(ArrayList<MethodParameter> mps, OperationDescription operationDesc) throws JAXBException, MessageException, XMLStreamException{
+	protected Message createMessage(ArrayList<MethodParameter> mps, OperationDescription operationDesc) throws JAXBException, WebServiceException, XMLStreamException{
 		Block block = null;
 		Object object = null;
 		String objectName = null;
@@ -762,7 +761,7 @@
         Protocol protocol = null;
         try {
             protocol = Protocol.getProtocolForBinding(operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getBindingType()); //soap11;
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO better handling than this?
             e.printStackTrace();
         }
@@ -822,17 +821,17 @@
 		return m;
 	}
 	
-	protected Message createFaultMessage(OMElement element) throws XMLStreamException, MessageException {
+	protected Message createFaultMessage(OMElement element) throws XMLStreamException, WebServiceException {
 		MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
 		return mf.createFrom(element);
 	}
 	
-	protected Message createEmptyMessage(OperationDescription operationDesc) throws JAXBException, MessageException, XMLStreamException {
+	protected Message createEmptyMessage(OperationDescription operationDesc) throws JAXBException, WebServiceException, XMLStreamException {
         
         Protocol protocol = null;
         try {
             protocol = Protocol.getProtocolForBinding(operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getBindingType());
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO better handling than this?
             e.printStackTrace();
         }
@@ -842,7 +841,7 @@
 		return m;
 	}
 	
-	protected Object createBOFromHeaderBlock(Set<String> contextPackages, Message message, String targetNamespace, String localPart) throws JAXBException, MessageException, XMLStreamException{
+	protected Object createBOFromHeaderBlock(Set<String> contextPackages, Message message, String targetNamespace, String localPart) throws JAXBException, WebServiceException, XMLStreamException{
 		
 		JAXBBlockContext blockContext = createJAXBBlockContext(contextPackages);
 		
@@ -853,12 +852,12 @@
         return block.getBusinessObject(true);
 	}
 	
-	protected Object createBOFromBodyBlock(Set<String> contextPackages, Message message) throws JAXBException, MessageException, XMLStreamException{
+	protected Object createBOFromBodyBlock(Set<String> contextPackages, Message message) throws JAXBException, WebServiceException, XMLStreamException{
 		return createBusinessObject(contextPackages, message);
 	}
 
 	
-	protected Object createBusinessObject(Set<String> contextPackages, Message message) throws JAXBException, MessageException, XMLStreamException{
+	protected Object createBusinessObject(Set<String> contextPackages, Message message) throws JAXBException, WebServiceException, XMLStreamException{
 		JAXBBlockContext blockContext = createJAXBBlockContext(contextPackages);
 		
 		// Get a JAXBBlockFactory instance.  We'll need this to get the JAXBBlock
@@ -869,7 +868,7 @@
         return block.getBusinessObject(true);
 	}
 	
-	private JAXBBlockContext createJAXBBlockContext(Set<String> contextPackages) throws JAXBException, MessageException {
+	private JAXBBlockContext createJAXBBlockContext(Set<String> contextPackages) throws JAXBException, WebServiceException {
 		JAXBBlockContext blockContext = new JAXBBlockContext(contextPackages);
 		return blockContext;
 	}
@@ -879,11 +878,11 @@
 	 * @param block
 	 * @return
 	 * @throws JAXBException
-	 * @throws MessageException
+	 * @throws WebServiceException
 	 * @throws XMLStreamException
 	 */
 	protected Object createFaultBusinessObject(Block block, OperationDescription operationDesc)
-			throws JAXBException, MessageException, XMLStreamException {
+			throws JAXBException, WebServiceException, XMLStreamException {
 		JAXBBlockContext blockContext = new JAXBBlockContext(createContextPackageSet(operationDesc));		
 		// Get a JAXBBlockFactory instance. 
         JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
@@ -893,7 +892,7 @@
 	}
 	
     protected void assignHolderValues(ArrayList<MethodParameter> mps, ArrayList<Object> inputArgHolders, Message message, OperationDescription operationDesc)
-            throws JAXBException, MessageException, XMLStreamException{
+            throws JAXBException, WebServiceException, XMLStreamException{
 		Object bo = null;
 		int index = 0;
 		for(MethodParameter mp:mps){
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/impl/AsyncListener.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/impl/AsyncListener.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/impl/AsyncListener.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.util.concurrent.Callable;
 
+import javax.xml.ws.WebServiceException;
 import javax.xml.ws.Service.Mode;
 
 import org.apache.axiom.om.OMElement;
@@ -27,7 +28,6 @@
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 
 /**
  * The AsyncListener is responsible for holding the callback that was passed
@@ -100,12 +100,8 @@
      * @param msg
      */
     protected Object getResponseValueObject(MessageContext mc) {
-        try {
-            Message msg = mc.getMessage();
-            OMElement om = msg.getAsOMElement();
-            return om.toString();
-        } catch (MessageException e) {
-            throw ExceptionFactory.makeWebServiceException(e);
-        }
+        Message msg = mc.getMessage();
+        OMElement om = msg.getAsOMElement();
+        return om.toString();
     }
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/binding/SOAPBinding.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/binding/SOAPBinding.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/binding/SOAPBinding.java	(working copy)
@@ -22,8 +22,8 @@
 import javax.xml.soap.MessageFactory;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPFactory;
+import javax.xml.ws.WebServiceException;
 
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.util.SAAJFactory;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -68,10 +68,10 @@
                 bindingNamespace = SOAP11_ENV_NS;
             }
             return SAAJFactory.createMessageFactory(bindingNamespace);
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO log it and then what?
             if(log.isDebugEnabled()){
-                log.debug("MessageException calling SAAJFactory.createMessageFactory(\""+bindingNamespace+"\")");
+                log.debug("WebServiceException calling SAAJFactory.createMessageFactory(\""+bindingNamespace+"\")");
             }
         } catch (SOAPException e) {
             // TODO log it and then what?
@@ -114,10 +114,10 @@
                 bindingNamespace = SOAP11_ENV_NS;
             }
             return SAAJFactory.createSOAPFactory(bindingNamespace);
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             // TODO log it and then what?
             if(log.isDebugEnabled()){
-                log.debug("MessageException calling SAAJFactory.createSOAPFactory(\""+bindingNamespace+"\")");
+                log.debug("WebServiceException calling SAAJFactory.createSOAPFactory(\""+bindingNamespace+"\")");
             }
         } catch (SOAPException e) {
             // TODO log it and then what?
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/handler/SoapMessageContext.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/handler/SoapMessageContext.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/handler/SoapMessageContext.java	(working copy)
@@ -22,11 +22,11 @@
 import javax.xml.bind.JAXBContext;
 import javax.xml.namespace.QName;
 import javax.xml.soap.SOAPMessage;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 
 /**
  * The SOAPMessageContext is the context handed to SOAP-based application
@@ -51,12 +51,8 @@
     }
 
     public SOAPMessage getMessage(){
-    	try{
-    		Message msg = getMessageObject();
-    		return msg.getAsSOAPMessage();
-    	}catch(MessageException e){
-    		throw ExceptionFactory.makeWebServiceException(e);
-    	}
+        Message msg = getMessageObject();
+        return msg.getAsSOAPMessage();
     }
 
     public Set<URI> getRoles() {
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatch.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatch.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatch.java	(working copy)
@@ -21,6 +21,7 @@
 import javax.xml.soap.SOAPMessage;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.transform.Source;
+import javax.xml.ws.WebServiceException;
 import javax.xml.ws.Service.Mode;
 
 import org.apache.axiom.om.OMElement;
@@ -29,7 +30,6 @@
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
@@ -86,8 +86,6 @@
     			blockFactoryType = getBlockFactory();
     			return createEmptyMessage(Protocol.getProtocolForBinding(endpointDesc.getClientBindingID()));
     			
-    		}catch(MessageException e){
-    			throw ExceptionFactory.makeWebServiceException(e);
     		}catch(XMLStreamException e){
     			throw ExceptionFactory.makeWebServiceException(e);
     		}
@@ -252,7 +250,7 @@
         }
         return null;
     }
-    private Message createEmptyMessage(Protocol protocol)throws MessageException, XMLStreamException{
+    private Message createEmptyMessage(Protocol protocol)throws WebServiceException, XMLStreamException{
     	MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
     	Message m = mf.create(protocol);
     	return m;
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(working copy)
@@ -128,7 +128,7 @@
                 if (debug) {
 				    log.debug("An error occured while invoking the method: " + e.getMessage());
                 }
-                throw ExceptionFactory.makeMessageException(e);
+                throw ExceptionFactory.makeWebServiceException(e);
 			}			
 		}
 		else {
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatchAsyncListener.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatchAsyncListener.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatchAsyncListener.java	(working copy)
@@ -2,6 +2,7 @@
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
+import javax.xml.ws.WebServiceException;
 import javax.xml.ws.Service.Mode;
 
 import org.apache.axiom.om.OMElement;
@@ -9,7 +10,6 @@
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.factory.SOAPEnvelopeBlockFactory;
 import org.apache.axis2.jaxws.message.factory.XMLStringBlockFactory;
@@ -51,7 +51,7 @@
                 BlockFactory factory = (BlockFactory) FactoryRegistry.getFactory(blockFactoryType);
                 Block block = message.getBodyBlock(0, null, factory);
                 value = block.getBusinessObject(true);
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 e.printStackTrace();
             } catch (XMLStreamException e) {
                 e.printStackTrace();
@@ -76,7 +76,7 @@
 
                     value = block.getBusinessObject(true);
                 }
-            } catch (MessageException e) {
+            } catch (WebServiceException e) {
                 e.printStackTrace();
             } catch (XMLStreamException e) {
                 e.printStackTrace();
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/BaseDispatch.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/BaseDispatch.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/BaseDispatch.java	(working copy)
@@ -25,8 +25,8 @@
 import javax.xml.ws.AsyncHandler;
 import javax.xml.ws.Binding;
 import javax.xml.ws.Response;
-import javax.xml.ws.Service.Mode;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.Service.Mode;
 import javax.xml.ws.http.HTTPBinding;
 import javax.xml.ws.soap.SOAPBinding;
 
@@ -41,7 +41,6 @@
 import org.apache.axis2.jaxws.core.controller.InvocationController;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.XMLFault;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 import org.apache.commons.logging.Log;
@@ -125,19 +124,15 @@
             MessageContext responseMsgCtx = invocationContext.getResponseMessageContext();
             
             Message responseMsg = responseMsgCtx.getMessage();
-            try {
-                if (responseMsg.isFault()) {
-                    XMLFault fault = responseMsg.getXMLFault();
-                    // 4.3.2 conformance bullet 1 requires a ProtocolException here
-                    throw ExceptionFactory.makeProtocolException(fault.getReason().getText(), null);
-                }
-                else if (responseMsgCtx.getLocalException() != null) {
-                    // use the factory, it'll throw the right thing:
-                    throw ExceptionFactory.makeWebServiceException(responseMsgCtx.getLocalException());
-                }
-            } catch (MessageException e) {
-                throw ExceptionFactory.makeWebServiceException(e);
+            if (responseMsg.isFault()) {
+                XMLFault fault = responseMsg.getXMLFault();
+                // 4.3.2 conformance bullet 1 requires a ProtocolException here
+                throw ExceptionFactory.makeProtocolException(fault.getReason().getText(), null);
             }
+            else if (responseMsgCtx.getLocalException() != null) {
+                // use the factory, it'll throw the right thing:
+                throw ExceptionFactory.makeWebServiceException(responseMsgCtx.getLocalException());
+            }
             
             Object returnObj = getValueFromMessage(responseMsg);
             
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java	(working copy)
@@ -18,10 +18,11 @@
  */
 package org.apache.axis2.jaxws.client.async;
 
+import javax.xml.ws.WebServiceException;
+
 import org.apache.axis2.client.async.AsyncResult;
 import org.apache.axis2.client.async.Callback;
 import org.apache.axis2.jaxws.core.MessageContext;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -45,7 +46,7 @@
         MessageContext responseMsgCtx = null;
         try {
             responseMsgCtx = AsyncUtils.createMessageContext(result);
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             response.onError(e);
             if (debug) {
                 log.debug("An error occured while processing the async response.  " + e.getMessage());
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java	(working copy)
@@ -24,11 +24,11 @@
 import java.util.concurrent.FutureTask;
 
 import javax.xml.ws.AsyncHandler;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axis2.client.async.AsyncResult;
 import org.apache.axis2.client.async.Callback;
 import org.apache.axis2.jaxws.core.MessageContext;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -69,7 +69,7 @@
         MessageContext response = null;
         try {
             response = AsyncUtils.createMessageContext(result);
-        } catch (MessageException e) {
+        } catch (WebServiceException e) {
             cft.setError(e);
             if (debug) {
                 log.debug("An error occured while processing the async response.  " + e.getMessage());
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java	(working copy)
@@ -26,12 +26,12 @@
 import java.util.concurrent.TimeoutException;
 
 import javax.xml.ws.Response;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -167,13 +167,9 @@
         if (log.isDebugEnabled()) {
             log.debug("Demarshalling response message as a String");
         }
-        try {
-            Message msg = mc.getMessage();
-            OMElement om = msg.getAsOMElement();
-            return om.toString();
-        } catch (MessageException e) {
-            throw ExceptionFactory.makeWebServiceException(e);
-        }
+        Message msg = mc.getMessage();
+        OMElement om = msg.getAsOMElement();
+        return om.toString();
     }
 
 }
Index: C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncUtils.java
===================================================================
--- C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncUtils.java	(revision 495763)
+++ C:/eclipse/workspace_axis2/GM/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncUtils.java	(working copy)
@@ -18,10 +18,11 @@
  */
 package org.apache.axis2.jaxws.client.async;
 
+import javax.xml.ws.WebServiceException;
+
 import org.apache.axis2.client.async.AsyncResult;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
-import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.util.Constants;
 import org.apache.axis2.util.ThreadContextMigratorUtil;
 import org.apache.commons.logging.Log;
@@ -31,7 +32,7 @@
 
     private static final Log log = LogFactory.getLog(AsyncUtils.class);
     
-    public static MessageContext createMessageContext(AsyncResult result) throws MessageException {
+    public static MessageContext createMessageContext(AsyncResult result) throws WebServiceException {
         boolean debug = log.isDebugEnabled();
         MessageContext response = null;
         
