Index: oshani/src/org/sample/javascript/JavaScriptReceiver.java
===================================================================
--- oshani/src/org/sample/javascript/JavaScriptReceiver.java	(revision 0)
+++ oshani/src/org/sample/javascript/JavaScriptReceiver.java	(revision 0)
@@ -0,0 +1,140 @@
+package org.sample.javascript;
+
+import org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver;
+import org.apache.axis2.engine.MessageReceiver;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.i18n.Messages;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axiom.soap.SOAPEnvelope;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.XMLInputFactory;
+import java.io.*;
+
+/**
+ *JavaScriptReceiver processes the incoming message by sending it to the 
+ *JavaScriptEngine and composes the outgoing message.
+ *@author oshanis@gmail.com 
+ */
+
+public class JavaScriptReceiver extends AbstractInOutSyncMessageReceiver
+        implements MessageReceiver {
+
+    public void invokeBusinessLogic(MessageContext inMessage, MessageContext outMessage) throws AxisFault {
+
+        JavaScriptEngine engine = new JavaScriptEngine();
+        try {
+
+            //Get the method, arguments and the reader from the MessageContext
+            String method = getJSMethod(inMessage);
+            String args = getArgs(inMessage);
+            Reader reader = readJS(inMessage);
+
+            if ( reader == null) throw new AxisFault("Unable to load JavaScript file");
+            if ( method == null) throw new AxisFault("Unable to read the method");
+
+            //Get the result from executing the javascript file
+            Object obj = engine.call(method,reader,args);
+            if (obj == null) {
+                    throw new AxisFault(Messages.getMessage("JavaScriptNoanswer"));
+            }
+
+            //Create the out-going message
+            SOAPFactory fac;
+            if(inMessage.isSOAP11()){
+                fac = OMAbstractFactory.getSOAP11Factory();
+            }else{
+                fac = OMAbstractFactory.getSOAP12Factory();
+            }
+            SOAPEnvelope envelope = fac.getDefaultEnvelope();
+            OMNamespace ns = fac.createOMNamespace("http://soapenc/", "res");
+            OMElement responseElement = fac.createOMElement(method + "Response", ns);
+            String outMessageString = obj.toString();
+
+            responseElement.addChild(getpayLoad(outMessageString));
+            envelope.getBody().addChild(responseElement);
+            outMessage.setEnvelope(envelope);
+
+        } catch (XMLStreamException e) {
+            e.printStackTrace();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * @param str The string to embed in the OMElement
+     * @return an OMElement
+     * @throws XMLStreamException
+     */
+    private OMElement getpayLoad(String str) throws XMLStreamException {
+        XMLStreamReader xmlReader =
+            XMLInputFactory.newInstance().createXMLStreamReader(
+                new ByteArrayInputStream(str.getBytes()));
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        StAXOMBuilder staxOMBuilder =
+            new StAXOMBuilder(fac, xmlReader);
+        return staxOMBuilder.getDocumentElement();
+    }
+
+    /**
+     * @param inMessage
+     * @return the javascript message to invoke
+     * @throws AxisFault
+     * @throws XMLStreamException
+     */
+    public String getJSMethod(MessageContext inMessage) throws AxisFault, XMLStreamException {
+
+        //Look at the method name. if available this should be a javascript method
+         AxisOperation op = inMessage.getOperationContext().getAxisOperation();
+         if (op == null) {
+             throw new AxisFault(Messages.getMessage("notFound", "Operation"));
+         }
+        return op.getName().getLocalPart();
+    }
+
+    /**
+     * @param inMessage
+     * @return the javascript source file
+     * @throws AxisFault
+     */
+    public Reader readJS(MessageContext inMessage) throws AxisFault{
+
+        AxisService service = inMessage.getOperationContext().getServiceContext().getAxisService();
+        Parameter implInfoParam = service.getParameter("ServiceClass");
+        if (implInfoParam == null){
+            throw new AxisFault(Messages.getMessage("Parameter is not specified","ServiceClass"));
+        }
+        InputStream jsFileStream = service.getClassLoader().getResourceAsStream(implInfoParam.getValue().toString());
+        if (jsFileStream == null) {
+            throw new AxisFault(Messages.getMessage("javaScriptUnableToLoad", implInfoParam.getValue().toString()));
+        }
+        return new BufferedReader(new InputStreamReader(jsFileStream));
+    }
+
+    /**
+     * @param inMessage
+     * @return arguments to be sent to the javascript function
+     * @throws XMLStreamException
+     */
+    public String getArgs(MessageContext inMessage) throws XMLStreamException {
+
+        OMElement firstChild = (OMElement) inMessage.getEnvelope().getBody().getFirstElement();
+        String value = firstChild.toStringWithConsume();
+        if (value != null){
+            return value;
+        }
+        return null;
+
+    }
+}
Index: oshani/src/org/sample/javascript/JavaScriptEngine.java
===================================================================
--- oshani/src/org/sample/javascript/JavaScriptEngine.java	(revision 0)
+++ oshani/src/org/sample/javascript/JavaScriptEngine.java	(revision 0)
@@ -0,0 +1,132 @@
+package org.sample.javascript;
+
+import org.mozilla.javascript.*;
+
+import java.io.Reader;
+
+/**
+ * JavaScriptEngine processes the javascript source and evaluates a given function
+ * @author oshanis@gmail.com
+ */
+
+public class JavaScriptEngine {
+
+    private Scriptable scope;
+
+    /**
+     * Returns the evaluated XML string object from the javascript.
+     * @param method The name of the method to call.
+     * @param reader The JS script file stream.
+     * @param args The arguments to the function.
+     * @return The result after evaluating the javascript function.
+     */
+
+    public Object call(String method, Reader reader, String args) throws Exception {
+
+        Object result = null;
+
+        Context cx = Context.enter();
+        try{
+            scope = cx.initStandardObjects();
+
+            //evaluates the javascript file and returns an object
+           cx.evaluateReader(scope,reader, "<cmd>",0,null);
+
+           //get the function from the scope the javascript object is in
+           Object fObj = scope.get(method, scope);
+
+           if (!(fObj instanceof Function) || (fObj == Scriptable.NOT_FOUND)) {
+                System.out.println("Method "+method+" is undefined or not a function.");
+           } else {
+                Object functionArgs[] = { args };
+                Function f = (Function)fObj;
+                result = f.call(cx, scope, scope, functionArgs);
+           }
+
+        }
+        catch(Exception  e){
+            e.printStackTrace();
+        }
+
+        return result;
+
+    }
+
+
+    /**
+     * Redundant method : This function was used in debugging
+     * This is used by an application to evaluate a string containing
+     * some expression.
+     */
+    public Object eval(String source, int lineNo, int columnNo, Object jscript)
+        throws Exception {
+
+        String scriptText = jscript.toString();
+        Object retval = null;
+        Context cx;
+
+        try {
+            cx = Context.enter();
+            cx.setOptimizationLevel(-1);
+            cx.setGeneratingDebug(false);
+            cx.setGeneratingSource(false);
+            cx.setOptimizationLevel(0);
+            cx.setDebugger(null, null);
+
+            retval = cx.evaluateString(scope, scriptText,
+                                       source, lineNo,
+                                       null);
+
+            if (retval instanceof NativeJavaObject)
+                retval = ((NativeJavaObject) retval).unwrap();
+        }
+        catch (Throwable t) { // includes JavaScriptException, rethrows Errors
+            handleError(t);
+        }
+        finally {
+            Context.exit();
+        }
+        return retval;
+    }
+
+    private void handleError(Throwable t) throws Exception {
+        if (t instanceof WrappedException)
+            t = ((WrappedException) t).getWrappedException();
+
+        String message = null;
+        Throwable target = t;
+
+        if (t instanceof JavaScriptException) {
+            message = t.getLocalizedMessage();
+
+            // Is it an exception wrapped in a JavaScriptException?
+            Object value = ((JavaScriptException) t).getValue();
+            if (value instanceof Throwable) {
+                // likely a wrapped exception from a LiveConnect call.
+                // Display its stack trace as a diagnostic
+                target = (Throwable) value;
+            }
+        }
+        else if (t instanceof EvaluatorException ||
+                 t instanceof SecurityException) {
+            message = t.getLocalizedMessage();
+        }
+        else if (t instanceof RuntimeException) {
+            message = "Internal Error: " + t.toString();
+        }
+        else if (t instanceof StackOverflowError) {
+            message = "Stack Overflow";
+        }
+
+        if (message == null)
+            message = t.toString();
+
+        if (t instanceof Error && !(t instanceof StackOverflowError)) {
+             throw (Error) t;
+        }
+        else {
+            throw new Exception("JavaScript Error " );
+        }
+    }
+
+}
Index: oshani/client/JavaScriptClient.java
===================================================================
--- oshani/client/JavaScriptClient.java	(revision 0)
+++ oshani/client/JavaScriptClient.java	(revision 0)
@@ -0,0 +1,98 @@
+package org.sample.myclient;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.Constants;
+import org.apache.axis2.AxisFault;
+
+import javax.xml.stream.XMLOutputFactory;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.XMLInputFactory;
+import java.io.StringWriter;
+import java.io.ByteArrayInputStream;
+
+/**
+ *Simple Java client to test the functionality of the JavaScriptMessageReceiver
+ */
+public class JavaScriptClient {
+
+    final static String serviceEPR = "http://localhost:8080/axis2/services/JavaScriptService/question";
+
+    public static void main(String[] args) throws Exception {
+
+             try {
+               //Create the payload to be sent to the JavaScriptService
+               OMElement payload = getEchoOMElement();
+               StringWriter writer1 = new StringWriter();
+               payload.serialize(XMLOutputFactory.newInstance().createXMLStreamWriter(writer1));
+               writer1.flush();
+
+               System.out.println("\nWe send the following xml to the JavaScriptService:");
+               System.out.println(writer1.toString());
+
+               Options options = new Options();
+               options.setTo(new EndpointReference(serviceEPR));
+               options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+               options.setUseSeparateListener(false);
+
+               ServiceClient serviceClient = new ServiceClient();
+               serviceClient.setOptions(options);
+
+               //Invoke the question function from the JavaScriptService
+               OMElement result = serviceClient.sendReceive(payload);
+               StringWriter writer2 = new StringWriter();
+               result.serialize(XMLOutputFactory.newInstance().createXMLStreamWriter(writer2));
+               writer2.flush();
+
+               System.out.println("\nAnd this is the response from the JavaScriptService:");
+               System.out.println(writer2.toString());
+
+           } catch (AxisFault axisFault) {
+               axisFault.printStackTrace();
+           } catch (XMLStreamException e) {
+               e.printStackTrace();
+           }
+
+        }
+
+        public static OMElement getEchoOMElement() throws XMLStreamException {
+
+            String str = "<PEOPLE>" +
+                    "<PERSON>" +
+                    "<NAME>person1</NAME>" +
+                    "<OCCUPATION>student</OCCUPATION>" +
+                    "<ADDRESS>address1</ADDRESS>" +
+                    "<GENDER>male</GENDER>" +
+                    "</PERSON>" +
+                    "<PERSON>" +
+                    "<NAME>person2</NAME>" +
+                    "<OCCUPATION>student</OCCUPATION>" +
+                    "<ADDRESS>address2</ADDRESS>" +
+                    "<GENDER>female</GENDER>" +
+                    "</PERSON>" +
+                    "<PERSON>" +
+                    "<NAME>person3</NAME>" +
+                    "<OCCUPATION>student</OCCUPATION>" +
+                    "<ADDRESS>address3</ADDRESS>" +
+                    "<GENDER>male</GENDER>" +
+                    "</PERSON>" +
+                    "</PEOPLE>";
+
+            XMLStreamReader xmlReader = XMLInputFactory.newInstance().createXMLStreamReader(new
+                    ByteArrayInputStream(str.getBytes()));
+            OMFactory fac = OMAbstractFactory.getOMFactory();
+
+            StAXOMBuilder staxOMBuilder = new
+                    StAXOMBuilder(fac, xmlReader);
+            return staxOMBuilder.getDocumentElement();
+
+        }
+
+
+}
