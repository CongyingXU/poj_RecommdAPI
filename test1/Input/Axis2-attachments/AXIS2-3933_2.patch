Index: modules/transports/src/org/apache/axis2/transport/http/AbstractHTTPSender.java
===================================================================
--- modules/transports/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(revision 678674)
+++ modules/transports/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(working copy)
@@ -25,10 +25,12 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.NamedValue;
 import org.apache.axis2.context.OperationContext;
 import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.transport.MessageFormatter;
+import org.apache.axis2.transport.TransportConstants;
 import org.apache.axis2.transport.TransportUtils;
 import org.apache.axis2.util.JavaUtils;
 import org.apache.axis2.wsdl.WSDLConstants;
@@ -546,17 +548,19 @@
 
         boolean isCustomUserAgentSet = false;
         // set the custom headers, if available
-        Object httpHeadersObj = msgContext.getProperty(HTTPConstants.HTTP_HEADERS);
+        Object httpHeadersObj = msgContext.getProperty(TransportConstants.CUSTOM_HEADERS);
         if (httpHeadersObj != null) {
-            if (httpHeadersObj instanceof ArrayList) {
-                ArrayList httpHeaders = (ArrayList) httpHeadersObj;
-                Header header;
+            if (httpHeadersObj instanceof List) {
+                List httpHeaders = (List) httpHeadersObj;
                 for (int i = 0; i < httpHeaders.size(); i++) {
-                    header = (Header) httpHeaders.get(i);
-                    if (HTTPConstants.HEADER_USER_AGENT.equals(header.getName())) {
-                        isCustomUserAgentSet = true;
+                    NamedValue nv = (NamedValue) httpHeaders.get(i);
+                    if (nv != null) {
+                        Header header = new Header(nv.getName(), nv.getValue());
+                        if (HTTPConstants.HEADER_USER_AGENT.equals(header.getName())) {
+                            isCustomUserAgentSet = true;
+                        }
+                        method.addRequestHeader(header);
                     }
-                    method.addRequestHeader(header);
                 }
     
             }
Index: modules/transports/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java
===================================================================
--- modules/transports/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(revision 678674)
+++ modules/transports/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(working copy)
@@ -25,16 +25,16 @@
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.NamedValue;
 import org.apache.axis2.description.Parameter;
 import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.handlers.AbstractHandler;
 import org.apache.axis2.transport.MessageFormatter;
 import org.apache.axis2.transport.OutTransportInfo;
+import org.apache.axis2.transport.TransportConstants;
 import org.apache.axis2.transport.TransportSender;
 import org.apache.axis2.transport.TransportUtils;
-import org.apache.axis2.transport.http.server.AxisHttpResponseImpl;
 import org.apache.axis2.util.JavaUtils;
-import org.apache.commons.httpclient.Header;
 import org.apache.commons.httpclient.HttpException;
 import org.apache.commons.httpclient.HttpMethod;
 import org.apache.commons.logging.Log;
@@ -260,15 +260,15 @@
                 servletBasedOutTransportInfo.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
             }
 
-            Object customHeaders = msgContext.getProperty(HTTPConstants.HTTP_HEADERS);
+            Object customHeaders = msgContext.getProperty(TransportConstants.CUSTOM_HEADERS);
             if (customHeaders != null) {
                 if (customHeaders instanceof List) {
                     Iterator iter = ((List) customHeaders).iterator();
                     while (iter.hasNext()) {
-                        Header header = (Header) iter.next();
-                        if (header != null) {
+                        NamedValue nv = (NamedValue) iter.next();
+                        if (nv != null) {
                             servletBasedOutTransportInfo
-                                    .addHeader(header.getName(), header.getValue());
+                                    .addHeader(nv.getName(), nv.getValue());
                         }
                     }
                 } else if (customHeaders instanceof Map) {
@@ -282,29 +282,6 @@
                     }
                 }
             }
-        } else if (transportInfo instanceof AxisHttpResponseImpl) {
-            Object customHeaders = msgContext.getProperty(HTTPConstants.HTTP_HEADERS);
-            if (customHeaders != null) {
-                if (customHeaders instanceof List) {
-                    Iterator iter = ((List) customHeaders).iterator();
-                    while (iter.hasNext()) {
-                        Header header = (Header) iter.next();
-                        if (header != null) {
-                            ((AxisHttpResponseImpl) transportInfo)
-                                    .addHeader(header.getName(), header.getValue());
-                        }
-                    }
-                } else if (customHeaders instanceof Map) {
-                    Iterator iter = ((Map) customHeaders).entrySet().iterator();
-                    while (iter.hasNext()) {
-                        Map.Entry header = (Map.Entry) iter.next();
-                        if (header != null) {
-                            ((AxisHttpResponseImpl) transportInfo)
-                                    .addHeader((String) header.getKey(), (String) header.getValue());
-                        }
-                    }
-                }
-            }
         }
 
         format.setAutoCloseWriter(true);
Index: modules/kernel/src/org/apache/axis2/context/NamedValue.java
===================================================================
--- modules/kernel/src/org/apache/axis2/context/NamedValue.java	(revision 0)
+++ modules/kernel/src/org/apache/axis2/context/NamedValue.java	(revision 0)
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.apache.axis2.context;
+
+/**
+ * This is the top most level of the Context hierarchy and is a bag of properties.
+ */
+public class NamedValue {
+
+    private final String name;
+    private final String value;
+    
+    public NamedValue(final String name, final String value) {
+        super();
+        if (name == null) {
+            throw new IllegalArgumentException("Name may not be null");
+        }
+        this.name = name;
+        this.value = value;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder buffer = new StringBuilder();
+        buffer.append(this.name);
+        buffer.append("=");
+        buffer.append(this.value);
+        return buffer.toString();
+    }
+    
+}
Index: modules/kernel/src/org/apache/axis2/transport/TransportConstants.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/TransportConstants.java	(revision 0)
+++ modules/kernel/src/org/apache/axis2/transport/TransportConstants.java	(revision 0)
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.apache.axis2.transport;
+
+/**
+ * Message context constants.
+ */
+public class TransportConstants {
+
+    /**
+     * This will allow users to set any custom headers to the message context, which will be picked
+     * up by the sender while sending the request
+     */
+    public static final String CUSTOM_HEADERS = "HTTP_HEADERS";
+    
+}
Index: modules/kernel/src/org/apache/axis2/util/MessageContextBuilder.java
===================================================================
--- modules/kernel/src/org/apache/axis2/util/MessageContextBuilder.java	(revision 678703)
+++ modules/kernel/src/org/apache/axis2/util/MessageContextBuilder.java	(working copy)
@@ -19,6 +19,13 @@
 
 package org.apache.axis2.util;
 
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+
 import org.apache.axiom.om.OMAbstractFactory;
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMNamespace;
@@ -31,36 +38,36 @@
 import org.apache.axiom.soap.SOAPFault;
 import org.apache.axiom.soap.SOAPFaultCode;
 import org.apache.axiom.soap.SOAPFaultDetail;
+import org.apache.axiom.soap.SOAPFaultNode;
 import org.apache.axiom.soap.SOAPFaultReason;
 import org.apache.axiom.soap.SOAPFaultSubCode;
 import org.apache.axiom.soap.SOAPFaultValue;
 import org.apache.axiom.soap.SOAPHeader;
 import org.apache.axiom.soap.SOAPHeaderBlock;
 import org.apache.axiom.soap.SOAPProcessingException;
-import org.apache.axiom.soap.SOAPFaultNode;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
 import org.apache.axis2.addressing.AddressingConstants;
-import org.apache.axis2.addressing.AddressingConstants.Final;
 import org.apache.axis2.addressing.AddressingHelper;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.addressing.RelatesTo;
+import org.apache.axis2.addressing.AddressingConstants.Final;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.context.OperationContext;
-import org.apache.axis2.description.*;
+import org.apache.axis2.description.AxisBindingMessage;
+import org.apache.axis2.description.AxisBindingOperation;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.description.TransportOutDescription;
+import org.apache.axis2.description.WSDL2Constants;
 import org.apache.axis2.i18n.Messages;
-import org.apache.axis2.transport.http.HTTPConstants;
+import org.apache.axis2.transport.TransportConstants;
 import org.apache.axis2.wsdl.WSDLConstants;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import javax.xml.namespace.QName;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.Iterator;
-import java.util.List;
-
 public class MessageContextBuilder {
 	
 	protected static final Log log = LogFactory.getLog(MessageContextBuilder.class);
@@ -350,12 +357,9 @@
                 soapHeaderElement.addChild(soapHeaderBlock);
             }
         }
+        faultContext.setProperty(TransportConstants.CUSTOM_HEADERS,
+                                 processingContext.getProperty(TransportConstants.CUSTOM_HEADERS));
 
-        // TODO: Transport-specific stuff in here?  Why?  Is there a better way?
-        // now add HTTP Headers
-        faultContext.setProperty(HTTPConstants.HTTP_HEADERS,
-                                 processingContext.getProperty(HTTPConstants.HTTP_HEADERS));
-
         return faultContext;
     }
 
Index: modules/kernel/src/org/apache/axis2/client/Stub.java
===================================================================
--- modules/kernel/src/org/apache/axis2/client/Stub.java	(revision 678703)
+++ modules/kernel/src/org/apache/axis2/client/Stub.java	(working copy)
@@ -35,16 +35,18 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.NamedValue;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.OutInAxisOperation;
 import org.apache.axis2.description.OutOnlyAxisOperation;
 import org.apache.axis2.description.RobustOutOnlyAxisOperation;
 import org.apache.axis2.i18n.Messages;
+import org.apache.axis2.transport.TransportConstants;
 import org.apache.axis2.transport.http.HTTPConstants;
-import org.apache.commons.httpclient.Header;
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 
 /**
  * Base class for generated client stubs. This defines several client API
@@ -154,16 +156,13 @@
     protected void addHttpHeader(MessageContext messageContext,
                                  String name,
                                  String value) {
-        java.lang.Object headersObj = messageContext.getProperty(HTTPConstants.HTTP_HEADERS);
-        if (headersObj == null) {
-            headersObj = new java.util.ArrayList();
+        List headers = (List) messageContext.getProperty(TransportConstants.CUSTOM_HEADERS);
+        if (headers == null) {
+            headers = new ArrayList();
         }
-        java.util.List headers = (java.util.List) headersObj;
-        Header header = new Header();
-        header.setName(name);
-        header.setValue(value);
+        NamedValue header = new NamedValue(name, value);
         headers.add(header);
-        messageContext.setProperty(HTTPConstants.HTTP_HEADERS, headers);
+        messageContext.setProperty(TransportConstants.CUSTOM_HEADERS, headers);
     }
 
     /**
