
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/DocLitWrappedProxyImpl.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/DocLitWrappedProxyImpl.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/DocLitWrappedProxyImpl.java	(working copy)
@@ -17,8 +17,9 @@
 package org.apache.axis2.jaxws.proxy.doclitwrapped;
 
 import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
 
-
+@WebServiceProvider()
 public class DocLitWrappedProxyImpl implements Provider<String> {
 
 	public String invoke(String invoke_str) {
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/DocLitnonWrappedImpl.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/DocLitnonWrappedImpl.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/DocLitnonWrappedImpl.java	(working copy)
@@ -17,8 +17,10 @@
 package org.apache.axis2.jaxws.proxy.doclitnonwrapped;
 
 import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
 
 
+@WebServiceProvider()
 public class DocLitnonWrappedImpl implements Provider<String> {
 
 	
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java	(working copy)
@@ -38,24 +38,6 @@
  */
 public class AnnotationDescriptionTests extends TestCase {
     
-//    private static boolean setupDone = false;
-//    private static Service service;
-//    private static ServiceDelegate serviceDelegate;
-//    private static ServiceDescription serviceDescription;
-
-
-/*    
-    protected void setUp() {
-        if (!setupDone) {
-            setupDone = true;
-            String namespaceURI= "http://ws.apache.org/axis2/tests";
-            String localPart = "EchoServiceAnnotated";
-            service = Service.create(null,  new QName(namespaceURI, localPart));
-            serviceDelegate = getServiceDelegate(service);
-            serviceDescription = serviceDelegate.getServiceDescription();
-        }
-    }
-*/    
     /* 
      * ========================================================================
      * ServiceDescription Tests
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/source/SourceProvider.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/source/SourceProvider.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/source/SourceProvider.java	(working copy)
@@ -21,6 +21,7 @@
 import java.io.StringWriter;
 
 import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
 import javax.xml.transform.Result;
 import javax.xml.transform.Source;
 import javax.xml.transform.Transformer;
@@ -30,6 +31,7 @@
 
 import org.apache.axis2.jaxws.DispatchTestConstants;
 
+@WebServiceProvider()
 public class SourceProvider implements Provider<Source> {
     String responseAsString = new String("<ns2:ReturnType xmlns:ns2=\"http://test\"><return_str>some response</return_str></ns2:ReturnType>");
     public Source invoke(Source source) {
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/jaxb/JAXBProvider.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/jaxb/JAXBProvider.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/jaxb/JAXBProvider.java	(working copy)
@@ -25,6 +25,7 @@
 import javax.xml.transform.Source;
 import javax.xml.transform.stream.StreamSource;
 import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
 
 import org.test.mtom.ObjectFactory;
 import org.test.mtom.SendImage;
@@ -34,6 +35,7 @@
  * A JAXWS Source Provider implementation
  *
  */
+@WebServiceProvider
 public class JAXBProvider implements Provider<Source> {
     
     /**
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/string/StringProvider.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/string/StringProvider.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/string/StringProvider.java	(working copy)
@@ -17,7 +17,9 @@
 package org.apache.axis2.jaxws.provider.string;
 
 import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
 
+@WebServiceProvider()
 public class StringProvider implements Provider<String> {
 
     private static String responseGood = "<provider><message>request processed</message></provider>";
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -23,6 +23,7 @@
 
 import org.apache.axis2.jaxws.DispatchTestSuite;
 import org.apache.axis2.jaxws.description.AnnotationDescriptionTests;
+import org.apache.axis2.jaxws.description.AnnotationProviderImplDescriptionTests;
 import org.apache.axis2.jaxws.description.AnnotationServiceImplDescriptionTests;
 import org.apache.axis2.jaxws.description.ServiceDescriptionTests;
 import org.apache.axis2.jaxws.description.WSDLDescriptionTests;
@@ -64,6 +65,7 @@
         suite.addTestSuite(WSDLDescriptionTests.class);
         suite.addTestSuite(AnnotationDescriptionTests.class);
         suite.addTestSuite(AnnotationServiceImplDescriptionTests.class);
+        suite.addTestSuite(AnnotationProviderImplDescriptionTests.class);
         
         suite.addTestSuite(HandlerChainProcessorTests.class);
         suite.addTestSuite(JaxwsMessageBundleTests.class);
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/SOAP12Provider.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/SOAP12Provider.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/SOAP12Provider.java	(working copy)
@@ -17,11 +17,13 @@
 package org.apache.axis2.jaxws.dispatch.server;
 
 import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
 
 /**
  * A Provider&lt;String&gt; implementation used to test sending and 
  * receiving SOAP 1.2 messages.
  */
+@WebServiceProvider
 public class SOAP12Provider implements Provider<String> {
 
     private static final String sampleResponse = 
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(working copy)
@@ -25,6 +25,10 @@
 import javax.wsdl.Definition;
 import javax.wsdl.Port;
 import javax.xml.namespace.QName;
+import javax.xml.ws.Service;
+import javax.xml.ws.BindingType;
+import javax.xml.ws.ServiceMode;
+import javax.xml.ws.WebServiceProvider;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
 
@@ -64,7 +68,33 @@
 public class EndpointDescription {
     private ServiceDescription parentServiceDescription;
     private QName portQName;
+    // Note that an EndpointInterfaceDescription will ONLY be set for an Endpoint-based implementation;
+    // it will NOT be set for a Provider-based implementation
     private EndpointInterfaceDescription endpointInterfaceDescription;
+
+    // This is only set on the service-side, not the client side.  It could
+    // be either an SEI class or a service implementation class.
+    private Class implOrSEIClass;
+    // Only one of these two annotations will be set; they are mutually exclusive
+    private WebService          webServiceAnnotation;
+    private WebServiceProvider  webServiceProviderAnnotation;
+    // Information common to both WebService and WebServiceProvider annotations
+    private String              annotation_WsdlLocation;
+    private String              annotation_ServiceName;
+    private String              annotation_PortName;
+    private String              annotation_TargetNamespace;
+    // Information only set on WebService annotation
+    private String              webService_EndpointInterface;
+    private String              webService_Name;
+
+    // ServiceMode annotation (only valid on a Provider-based endpoint)
+    private ServiceMode         serviceModeAnnotation;
+    private Service.Mode        serviceModeValue;
+    
+    // BindingType annotation
+    private BindingType         bindingTypeAnnotation;
+    private String              bindingTypeValue;
+    
     // TODO: This needs to be a collection of handler descriptions; use JAX-WS Appendix B Handler Chain Configuration File Schema as a starting point
     private ArrayList<String> handlerList = new ArrayList<String>();
     
@@ -72,6 +102,7 @@
      * Create an EndpointDescription based on the WSDL port.  Note that per the JAX-WS Spec (Final Release, 4/19/2006
      * Section 4.2.3 Proxies, page 55)the "namespace component of the port is the target namespace of the WSDL 
      * definition document".
+     * Note this is currently only used on the client-side (this may change).
      * 
      * @param wsdlPort The WSDL Port tag for this EndpointDescription.
      * @param definition The WSDL Definition target namespace used to create the port QName
@@ -85,46 +116,97 @@
     }
     
     /**
-     * Create from an annotated SEI class.
-     * @param sei
+     * Create from an annotated implementation or SEI class.
+     * Note this is currently used only on the server-side (this probably won't change).
+     *
+     * @param theClass An implemntation or SEI class
      * @param portName May be null; if so the annotation is used
      * @param parent
      */
-    EndpointDescription(Class sei, QName portName, ServiceDescription parent) {
+    EndpointDescription(Class theClass, QName portName, ServiceDescription parent) {
         parentServiceDescription = parent;
+        implOrSEIClass = theClass;
 
-        // Per JSR-181, the @WebService annotation is required.
-        // TODO: Tests that do/do not include this annotation
-        WebService webServiceAnnotation = (WebService) sei.getAnnotation(WebService.class);
-        if (webServiceAnnotation == null) {
+        // The Service Implementation class could be either Provider-based or Endpoint-based.  The 
+        // annotations that are present are similar but different.  Conformance requirements 
+        // per JAX-WS
+        // - A Provider based implementation MUST carry the @WebServiceProvider annotation
+        //   per section 5.1 javax.xml.ws.Provider on page 63
+        // - An Endpoint based implementation MUST carry the @WebService annotation per JSR-181 
+        //   (reference TBD) and JAX-WS (reference TBD)
+        // - An Endpoint based implementation @WebService annotation MAY reference an endpoint
+        //   interface 
+        // - The @WebService and @WebServiceProvider annotations can not appear in the same class per 
+        //   JAX-WS section 7.7 on page 82.
+
+        // Verify that one (and only one) of the required annotations is present.
+        // TODO: Add tests to verify this error checking
+        webServiceAnnotation = (WebService) implOrSEIClass.getAnnotation(WebService.class);
+        webServiceProviderAnnotation = (WebServiceProvider) implOrSEIClass.getAnnotation(WebServiceProvider.class);
+        
+        if (webServiceAnnotation == null && webServiceProviderAnnotation == null)
             // TODO: NLS
-            ExceptionFactory.makeWebServiceException("Invalid SEI " + sei + "; must contain @WebService annotation");
-        }
+            throw ExceptionFactory.makeWebServiceException("Either WebService or WebServiceProvider annotation must be present on " + implOrSEIClass);
+        else if (webServiceAnnotation != null && webServiceProviderAnnotation != null)
+            // TODO: NLS
+            throw ExceptionFactory.makeWebServiceException("Both WebService or WebServiceProvider annotations cannot be presenton " + implOrSEIClass);
 
-        // TODO: Process other @WebService values
-
-        // If portName not specified, get it from the annotation
+        // If portName was specified, set it.  Otherwise, we will get it from the appropriate
+        // annotation when the getter is called.
         // TODO: If the portName is specified, should we verify it against the annotation?
         // TODO: Add tests: null portName, !null portName, portName != annotation value
-        if (portName == null) {
-            String name = webServiceAnnotation.name();
-            String tns = webServiceAnnotation.targetNamespace();
-            // TODO: Check for name &/| tns null or empty string and add tests for same
-            portName = new QName(tns, name);
+        if (portName != null)
+            portQName = portName;
+
+        // If this is an Endpoint-based service implementation (i.e. not a 
+        // Provider-based one), then create the EndpointInterfaceDescription to contain
+        // the operations on the endpoint.  Provider-based endpoints don't have operations
+        // associated with them, so they don't have an EndpointInterfaceDescription.
+        if (webServiceAnnotation != null) {
+            // If this impl class references an SEI, then use that SEI to create the EndpointInterfaceDesc.
+            // TODO: Add support for service impl endpoints that don't reference an SEI; remember that this is also called with just an SEI interface from svcDesc.updateWithSEI()
+            String seiClassName = getEndpointInterface();
+            Class seiClass = null;
+            if (DescriptionUtils.isEmpty(seiClassName)) {
+                // For now, just build the EndpointInterfaceDesc based on the class itself.
+                // TODO: The EID ctor doesn't correctly handle anything but an SEI at this point; e.g. it doesn't publish the correct methods of just an impl.
+                seiClass = theClass;
+            }
+            else { 
+                try {
+                    // TODO: Using Class.forName() is probably not the best long-term way to get the SEI class from the annotation
+                    seiClass = Class.forName(seiClassName, false, Thread.currentThread().getContextClassLoader());
+                } catch (ClassNotFoundException e) {
+                    // TODO: Throwing wrong exception
+                    e.printStackTrace();
+                    throw new UnsupportedOperationException("Can't create SEI class: " + e);
+                }
+            }
+            endpointInterfaceDescription = new EndpointInterfaceDescription(seiClass, this);
         }
-        portQName = portName;        
-        
-        endpointInterfaceDescription = new EndpointInterfaceDescription(sei, this);
     }
     
     public void updateWithSEI(Class sei) {
+        // Updating with an SEI is only valid for Endpoint-based implementations;
+        // it is not valid for a Provider-based implementation.
+        if (endpointInterfaceDescription == null)
+            // TODO: Correct error processing
+            throw new UnsupportedOperationException("Can not update an SEI on a Provider implementation.  Rejected SEI = " + sei);
         if (sei != null) {
             endpointInterfaceDescription.updateWithSEI(sei);
         }
         return;
     }
-    
+
     public QName getPortQName() {
+        if (portQName == null) {
+            // The name was not set by the constructors, so get it from the
+            // appropriate annotaion.
+            String name = getPortName();
+            String tns = getTargetNamespace();
+            // TODO: Check for name &/| tns null or empty string and add tests for same
+            portQName = new QName(tns, name);
+        }
         return portQName;
     }
     
@@ -136,6 +218,141 @@
         return endpointInterfaceDescription;
     }
     
+    // ==========================================
+    // Annotation-related methods
+    // ==========================================
+    
+    public boolean isProviderBased() {
+        return webServiceProviderAnnotation != null;
+    }
+    
+    public boolean isEndpointBased() {
+        return webServiceAnnotation != null;
+    }
+    
+    // ------------------------------------------
+    // Common WebService and WebServiceProvider annotation-related getters
+    // ------------------------------------------
+    
+    public String getWSDLLocation() {
+        if (annotation_WsdlLocation == null) {
+            if (webServiceAnnotation != null) {
+                annotation_WsdlLocation = webServiceAnnotation.wsdlLocation();
+            }
+            else if (webServiceProviderAnnotation != null) {
+                annotation_WsdlLocation = webServiceProviderAnnotation.wsdlLocation();
+            }
+        }
+        return annotation_WsdlLocation;
+    }
+
+    public String getServiceName() {
+        if (annotation_ServiceName == null) {
+            if (webServiceAnnotation != null) {
+                annotation_ServiceName = webServiceAnnotation.serviceName();
+            }
+            else if (webServiceProviderAnnotation != null) {
+                annotation_ServiceName = webServiceProviderAnnotation.serviceName();
+            }
+        }
+        return annotation_ServiceName;
+    }
+    
+    public String getPortName() {
+        if (annotation_PortName == null) {
+            if (webServiceAnnotation != null) {
+                // REVIEW: Should this be portName() or just name()?
+                annotation_PortName = webServiceAnnotation.portName();
+            }
+            else if (webServiceProviderAnnotation != null) {
+                annotation_PortName = webServiceProviderAnnotation.portName();
+            }
+        }
+        return annotation_PortName;
+    }
+
+    public String getTargetNamespace() {
+        if (annotation_TargetNamespace == null) {
+            if (webServiceAnnotation != null) {
+                annotation_TargetNamespace = webServiceAnnotation.targetNamespace();
+            }
+            else if (webServiceProviderAnnotation != null) {
+                annotation_TargetNamespace = webServiceProviderAnnotation.targetNamespace();
+            }
+        }
+        return annotation_TargetNamespace;
+    }
+    // ------------------------------------------
+    // WebServiceProvider annotation related getters
+    // ------------------------------------------
+
+    WebServiceProvider getWebServiceProviderAnnotation() {
+        return webServiceProviderAnnotation;
+    }
+
+    // ------------------------------------------
+    // WebService annotation related getters
+    // ------------------------------------------
+
+    WebService getWebServiceAnnotation() {
+        return webServiceAnnotation;
+    }
+    
+    public String getEndpointInterface() {
+        if (webService_EndpointInterface == null && webServiceAnnotation != null) {
+            webService_EndpointInterface = webServiceAnnotation.endpointInterface();
+        }
+        return webService_EndpointInterface;
+    }
+    
+    public String getName() {
+        if (webService_Name == null && webServiceAnnotation != null) {
+            webService_Name = webServiceAnnotation.name();
+        }
+        return webService_Name;
+    }
+    
+    // ------------------------------------------
+    // ServiceMode annotation related getters
+    // ------------------------------------------
+    // REVIEW: Should this be returning an enum other than the one defined within the annotation?
+    ServiceMode getServiceMode() {
+        if (serviceModeAnnotation == null && implOrSEIClass != null) {
+            serviceModeAnnotation = (ServiceMode) implOrSEIClass.getAnnotation(ServiceMode.class);
+        }
+        return serviceModeAnnotation;
+    }
+    
+    public Service.Mode getServiceModeValue() {
+        // This 
+        if (serviceModeValue == null && isProviderBased() && getServiceMode() != null) {
+            serviceModeValue = getServiceMode().value();
+        }
+        return serviceModeValue;
+    }
+    
+    // ------------------------------------------
+    // BindingType annotation related getters
+    // ------------------------------------------
+
+    BindingType getBindingType() {
+        if (bindingTypeAnnotation == null && implOrSEIClass != null) {
+            bindingTypeAnnotation = (BindingType) implOrSEIClass.getAnnotation(BindingType.class);
+        }
+        return bindingTypeAnnotation;
+    }
+    
+    public String getBindingTypeValue() {
+        if (bindingTypeValue == null && getBindingType() != null) {
+            bindingTypeValue = getBindingType().value();
+        }
+        return bindingTypeValue;
+    }
+
+    // ------------------------------------------
+    // HandlerChaing annotation related getters
+    // ------------------------------------------
+
     /**
      * Returns a live list describing the handlers on this port.
      * TODO: This is currently returning List<String>, but it should return a HandlerDescritpion
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(working copy)
@@ -89,6 +89,8 @@
  */
 
 /**
+ * ServiceDescription contains the metadata (e.g. WSDL, annotations) relating to a Service on both the
+ * service-requester (aka client) and service-provider (aka server) sides.
  * 
  */
 public class ServiceDescription {
@@ -100,7 +102,8 @@
     // Only ONE of the following will be set in a ServiceDescription, depending on whether this Description
     // was created from a service-requester or service-provider flow. 
     private Class serviceClass;         // A service-requester generated service or generic service class
-    private Class serviceImplClass;     // A service-provider service implementation class
+    private Class serviceImplClass;     // A service-provider service implementation class.  The impl
+                                        // could be a Provider (no SEI operations) or an Endpoint (SEI based operations) 
     
     // TODO: Possibly remove Definition and delegate to the Defn on the AxisSerivce set as a paramater by WSDLtoAxisServicBuilder?
     private WSDLWrapper wsdlWrapper; 
@@ -112,7 +115,9 @@
     public static final String AXIS_SERVICE_PARAMETER = "org.apache.axis2.jaxws.description.ServiceDescription";
     
     /**
-     * ServiceDescription contains the metadata (e.g. WSDL, annotations) relating to a Service.
+     * This is (currently) the client-side-only constructor
+     * Construct a service description hierachy based on WSDL (may be null), the Service class, and 
+     * a service QName.
      * 
      * @param wsdlURL  The WSDL file (this may be null).
      * @param serviceQName  The name of the service in the WSDL.  This can not be null since a 
@@ -132,9 +137,9 @@
         }
         
         this.wsdlURL = wsdlURL;
+        // TODO: The serviceQName needs to be verified between the argument/WSDL/Annotation
         this.serviceQName = serviceQName;
         this.serviceClass = serviceClass;
-
         
         setupWsdlDefinition();
         // TODO: Refactor this with the consideration of no WSDL/Generic Service/Annotated SEI
@@ -144,7 +149,12 @@
         addAnonymousAxisOperations();
     }
 
-    // Create the descrpiptions based on the service implementation class
+    /**
+     * This is (currently) the service-provider-side-only constructor.
+     * Create a service Description based on a service implementation class
+     * 
+     * @param serviceImplClass
+     */
     // NOTE: Taking an axisService on the call is TEMPORARY!  Eventually the AxisService should be constructed
     //       based on the annotations in the ServiceImpl class.
     // TODO: Remove axisService as paramater when the AxisService can be constructed from the annotations
@@ -165,32 +175,13 @@
                 throw new UnsupportedOperationException("Can't add AxisService param: " + e);
             }
         }
-        // Look for @WebService
-        // If @WebService.endpointInterface != null, use that
-        // Else use the public (including inherited) methods
-        WebService webServiceAnnotation = (WebService) this.serviceImplClass.getAnnotation(WebService.class);
 
-        // TODO: Initial code path requires the @WebService annotation
-        if (webServiceAnnotation == null) {
-            throw new UnsupportedOperationException("TEMPORARY CODE: ServiceImpl bean must have @WebServiceAnnotation");
-        }
-        if (webServiceAnnotation.endpointInterface() == null) {
-            throw new UnsupportedOperationException("TEMPORARY CODE: ServiceImpl bean must have @WebServiceAnnotation.endpointInterface set");
-        }
-        
-        // TODO: Using Class.forName() is probably not the best long-term way to get the SEI class from the annotation
-        Class seiClass = null;
-        try {
-            seiClass = Class.forName(webServiceAnnotation.endpointInterface(), false, Thread.currentThread().getContextClassLoader());
-        } catch (ClassNotFoundException e) {
-            // TODO: Throwing wrong exception
-            e.printStackTrace();
-            throw new UnsupportedOperationException("Can't create SEI class: " + e);
-        }
-        // Create the EndpointDescription hierachy from the SEI annotations; Since the PortQName is null, 
+        // Create the EndpointDescription hierachy from the service impl annotations; Since the PortQName is null, 
         // it will be set to the annotation value.
-        EndpointDescription endpointDescription = new EndpointDescription(seiClass, null, this);
+        EndpointDescription endpointDescription = new EndpointDescription(serviceImplClass, null, this);
         addEndpointDescription(endpointDescription);
+        
+        // TODO: (JLB) The ServiceQName instance variable should be set based on annotation or default
 
         // The anonymous AxisOperations are currently NOT added here.  The reason 
         // is that (for now) this is a SERVER-SIDE code path, and the anonymous operations
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java	(working copy)
@@ -69,6 +69,8 @@
 public class EndpointInterfaceDescription {
     private EndpointDescription parentEndpointDescription;
     private ArrayList<OperationDescription> operationDescriptions = new ArrayList<OperationDescription>();
+    // This may be an actual Service Endpoint Interface -OR- it may be a service implementation class that did not 
+    // specify an @WebService.endpointInterface.
     private Class seiClass;
     
     // Annotations and cached values
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionFactory.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(working copy)
@@ -43,6 +43,11 @@
         return new ServiceDescription(wsdlURL, serviceQName, serviceClass);
     }
     
+    // TODO: Taking an AxisService is only temporary; the AxisService should be created when creating the ServiceDesc
+    public static ServiceDescription createServiceDescriptionFromServiceImpl(Class serviceImplClass, AxisService axisService) {
+        return new ServiceDescription(serviceImplClass, axisService);
+    }
+
     /**
      * Update an existing ServiceDescription with an annotated SEI
      * @param serviceDescription
@@ -51,14 +56,7 @@
      * @return
      */
     public static ServiceDescription updateEndpointInterface(ServiceDescription serviceDescription, Class sei, QName portQName) {
-        
         serviceDescription.updateEndpointInterfaceDescription(sei, portQName);
         return serviceDescription;
     }
-    
-    // TODO: (JLB) Taking an AxisService is only temporary; the AxisService should be created when creating the ServiceDesc
-    public static ServiceDescription createServiceDescriptionFromServiceImpl(Class serviceImplClass, AxisService axisService) {
-        return new ServiceDescription(serviceImplClass, axisService);
-    }
-
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(working copy)
@@ -238,7 +238,7 @@
     	/*TODO: if portQname is null then fetch it from annotation. 
     	 * if portQname is provided then add that to the ports table.
     	 */
-        // TODO: (JLB) Move the annotation processing to the DescriptionFactory
+        // TODO: Move the annotation processing to the DescriptionFactory
         DescriptionFactory.updateEndpointInterface(serviceDescription, sei, portName);
 
         
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(working copy)
@@ -24,6 +24,9 @@
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.description.DescriptionFactory;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
+import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.server.dispatcher.EndpointDispatcher;
@@ -65,6 +68,9 @@
             Class implClass = loadServiceImplClass(implClassName, 
                     requestMsgCtx.getClassLoader());
             
+            ServiceDescription serviceDesc = getServiceDescription(requestMsgCtx, implClass);
+            requestMsgCtx.setServiceDescription(serviceDesc);
+            
             EndpointDispatcher dispatcher = getEndpointDispatcher(implClass);
             
             MessageContext responseMsgContext = dispatcher.invoke(requestMsgCtx);
@@ -83,6 +89,9 @@
 	 */
 	private EndpointDispatcher getEndpointDispatcher(Class serviceImplClass) 
         throws Exception {
+        // TODO:  This check should be based on the EndpointDescription processing of annotations
+        //        It is left this way for now because some tests have an @WebService annotation on
+        //        Provider-based endpoints as a pre-existing workaround.
         if(Provider.class.isAssignableFrom(serviceImplClass)) {
     		return new ProviderDispatcher(serviceImplClass);
     	}
@@ -126,5 +135,25 @@
         String className = ((String) param.getValue()).trim();
         return className;
     }
-	
+    
+    /*
+     * Gets the ServiceDescription associated with the request that is currently
+     * being processed. 
+     */
+    private ServiceDescription getServiceDescription(MessageContext mc, Class implClass) {
+        AxisService axisSvc = mc.getAxisMessageContext().getAxisService();
+        
+        //Check to see if we've already created a ServiceDescription for this
+        //service before trying to create a new one. 
+        if (axisSvc.getParameter("JAXWS_SERVICE_DESCRIPTION") != null) {
+            Parameter param = axisSvc.getParameter("JAXWS_SERVICE_DESCRIPTION");
+            ServiceDescription sd = (ServiceDescription) param.getValue();
+            return sd;
+        }
+        else {
+            ServiceDescription sd = DescriptionFactory.
+                createServiceDescriptionFromServiceImpl(implClass, axisSvc);
+            return sd;
+        }
+    }
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java	(working copy)
@@ -75,14 +75,10 @@
                     "class: " + serviceImplClass.getName());
         }
 
-        //FIXME: This block should be in the EndpointController.  We'll hold off on that
-        //though until this is up and running.
-        ServiceDescription serviceDesc = getServiceDescription(mc, serviceImplClass);
-        mc.setServiceDescription(serviceDesc);
         mc.setOperationName(mc.getAxisMessageContext().getAxisOperation().getName());
         OperationDescription opDesc = getOperationDescription(mc);
         mc.setOperationDescription(opDesc);
-        
+
         Method target = resolveJavaMethodForOperation(mc);
         Object[] params = getParameterData(target, mc);
 
@@ -110,9 +106,11 @@
      * Find the Java method that corresponds to the WSDL operation that was 
      * targeted by the Axis2 Dispatchers.
      */
+    // TODO: This should be done using the OperationDescriptor
     private Method resolveJavaMethodForOperation(MessageContext mc) {
         QName opName = mc.getOperationName();
         if (opName == null)
+            // TODO: NLS
             throw ExceptionFactory.makeWebServiceException("Operation name was not set");
         
         String localPart = opName.getLocalPart();
@@ -125,7 +123,7 @@
         if (log.isDebugEnabled()) {
             log.debug("No Java method found for the operation");
         }
-        
+        // TODO: NLS
         throw ExceptionFactory.makeWebServiceException("No Java method was found for the operation");
     }
     
@@ -162,50 +160,6 @@
         }
     }
     
-    /*
-     * Gets the ServiceDescription associated with the request that is currently
-     * being processed. 
-     */
-    //FIXME: This method should be in the EndpointController
-    private ServiceDescription getServiceDescription(MessageContext mc, Class implClass) {
-        AxisService axisSvc = mc.getAxisMessageContext().getAxisService();
-        
-        //Check to see if we've already created a ServiceDescription for this
-        //service before trying to create a new one. 
-        if (axisSvc.getParameter("JAXWS_SERVICE_DESCRIPTION") != null) {
-            Parameter param = axisSvc.getParameter("JAXWS_SERVICE_DESCRIPTION");
-            ServiceDescription sd = (ServiceDescription) param.getValue();
-            return sd;
-        }
-        else {
-            ServiceDescription sd = DescriptionFactory.
-                createServiceDescriptionFromServiceImpl(implClass, axisSvc);
-            return sd;
-        }
-    }
-    
-    /*
-     * Gets the OperationDescription associated with the request that is currently
-     * being processed. 
-     */
-    //FIXME: This method should be in the EndpointController
-    private OperationDescription getOperationDescription(MessageContext mc) {
-        ServiceDescription sd = mc.getServiceDescription();
-        EndpointDescription[] eds = sd.getEndpointDescriptions();
-        EndpointDescription ed = eds[0];
-        EndpointInterfaceDescription eid = ed.getEndpointInterfaceDescription();
-        
-        OperationDescription[] ops = eid.getOperation(mc.getOperationName());
-        OperationDescription op = ops[0];
-        
-        if (log.isDebugEnabled()) {
-            log.debug("wsdl operation: " + op.getName());
-            log.debug("   java method: " + op.getJavaMethodName());
-        }
-        
-        return op;        
-    }
-    
     private JAXBContext createJAXBContext(OperationDescription opDesc) {
         // This will only support Doc/Lit Wrapped params for now.
         try {
@@ -254,4 +208,28 @@
         }
     }
     
+    /*
+     * Gets the OperationDescription associated with the request that is currently
+     * being processed.
+     * 
+     *  Note that this is not done in the EndpointController since operations are only relevant
+     *  to Endpoint-based implementation (i.e. not to Proxy-based ones)s
+     */
+
+    private OperationDescription getOperationDescription(MessageContext mc) {
+        ServiceDescription sd = mc.getServiceDescription();
+        EndpointDescription[] eds = sd.getEndpointDescriptions();
+        EndpointDescription ed = eds[0];
+        EndpointInterfaceDescription eid = ed.getEndpointInterfaceDescription();
+        
+        OperationDescription[] ops = eid.getOperation(mc.getOperationName());
+        OperationDescription op = ops[0];
+        
+        if (log.isDebugEnabled()) {
+            log.debug("wsdl operation: " + op.getName());
+            log.debug("   java method: " + op.getJavaMethodName());
+        }
+        
+        return op;        
+    }
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java	(working copy)
@@ -70,7 +70,7 @@
 	public ProxyDescriptor(Class seiClazz, ServiceDescription serviceDescription){
 		this.seiClazz = seiClazz;
         this.serviceDescription = serviceDescription;
-        // TODO: (JLB) This probably needs to be more robust; can there be > 1 endpoints; if so, how choose which one?
+        // FIXME: This probably needs to be more robust; can there be > 1 endpoints; if so, how choose which one?
         this.endpointDescription = serviceDescription.getEndpointDescription(seiClazz)[0];
 	}
 	
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/ServiceMode.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/ServiceMode.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/ServiceMode.java	(working copy)
@@ -26,5 +26,5 @@
 @Inherited
 public @interface ServiceMode {
 
-    public Service.Mode value();
+    public Service.Mode value() default Service.Mode.PAYLOAD;
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/WebServiceProvider.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/WebServiceProvider.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/WebServiceProvider.java	(working copy)
@@ -25,11 +25,8 @@
 
 public @interface WebServiceProvider {
 
-    public String wsdlLocation();
-
-    public String serviceName();
-
-    public String targetNamespace();
-
-    public String portName();
+    public String wsdlLocation() default "";
+    public String serviceName() default "";
+    public String targetNamespace() default "";
+    public String portName() default "";
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/BindingType.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/BindingType.java	(revision 438950)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/javax/xml/ws/BindingType.java	(working copy)
@@ -24,5 +24,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface BindingType {
 
-    public String value();
+    public String value() default "";
 }


