Index: test/org/apache/axis2/deployment/AxisMessageTest.java
===================================================================
--- test/org/apache/axis2/deployment/AxisMessageTest.java	(revision 1347538)
+++ test/org/apache/axis2/deployment/AxisMessageTest.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.Parameter;
 import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.ws.commons.schema.XmlSchemaElement;
 
 import javax.xml.namespace.QName;
 
@@ -66,4 +67,5 @@
         assertEquals(para.getValue(), "messageOut");
 
     }
+
 }
Index: test/org/apache/axis2/description/AxisServiceTest.java
===================================================================
--- test/org/apache/axis2/description/AxisServiceTest.java	(revision 1347538)
+++ test/org/apache/axis2/description/AxisServiceTest.java	(working copy)
@@ -27,20 +27,22 @@
 import java.util.ArrayList;
 
 import javax.xml.namespace.QName;
+import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.transform.stream.StreamSource;
 
-import org.apache.axis2.AbstractTestCase;
 import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.context.ConfigurationContextFactory;
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.context.ServiceContext;
 import org.apache.axis2.context.ServiceGroupContext;
 import org.apache.axis2.deployment.DeploymentConstants;
 import org.apache.axis2.description.java2wsdl.XMLSchemaTest;
 import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.util.Utils;
 import org.apache.ws.commons.schema.XmlSchema;
 import org.apache.ws.commons.schema.XmlSchemaCollection;
 import org.apache.ws.commons.schema.XmlSchemaElement;
+import org.w3c.dom.ls.DOMImplementationLS;
+import org.w3c.dom.ls.LSSerializer;
 
 public class AxisServiceTest extends XMLSchemaTest {
     public static final String PARAM_NAME = "CustomParameter";
@@ -58,8 +60,6 @@
             }
         }
     }
-    
-    
 
     @Override
     protected void setUp() throws Exception {
@@ -67,7 +67,7 @@
         sampleSchemas = new ArrayList<XmlSchema>();
         super.setUp();
     }
-    
+
     @Override
     protected void tearDown() throws Exception {
         service = null;
@@ -75,52 +75,50 @@
         super.tearDown();
     }
 
+    public void testAddMessageElementQNameToOperationMappingBasic() {
 
-
-    public void testAddMessageElementQNameToOperationMappingBasic() {
-        
         AxisOperation op1 = new InOnlyAxisOperation();
         QName opName = new QName("foo");
-        
+
         // test registering the same operation multiple times
-        
+
         assertEquals(null, service.getOperationByMessageElementQName(opName));
-        
+
         service.addMessageElementQNameToOperationMapping(opName, op1);
-        
+
         assertEquals(op1, service.getOperationByMessageElementQName(opName));
-        
+
         service.addMessageElementQNameToOperationMapping(opName, op1);
-        
+
         assertEquals(op1, service.getOperationByMessageElementQName(opName));
-        
+
         service.addMessageElementQNameToOperationMapping(opName, op1);
-        
-        assertEquals(op1, service.getOperationByMessageElementQName(opName));        
+
+        assertEquals(op1, service.getOperationByMessageElementQName(opName));
     }
-    
+
     public void testAddMessageElementQNameToOperationMappingOverloading() {
-        
+
         AxisOperation op1 = new InOnlyAxisOperation();
         AxisOperation op2 = new InOnlyAxisOperation();
         AxisOperation op3 = new InOnlyAxisOperation();
         QName opName = new QName("foo");
-        
+
         // test registering different operations under the same opName
-        
+
         assertEquals(null, service.getOperationByMessageElementQName(opName));
-        
+
         service.addMessageElementQNameToOperationMapping(opName, op1);
-        
+
         assertEquals(op1, service.getOperationByMessageElementQName(opName));
-        
+
         service.addMessageElementQNameToOperationMapping(opName, op2);
-        
+
         assertEquals(null, service.getOperationByMessageElementQName(opName));
-        
+
         service.addMessageElementQNameToOperationMapping(opName, op3);
-        
-        assertEquals(null, service.getOperationByMessageElementQName(opName));       
+
+        assertEquals(null, service.getOperationByMessageElementQName(opName));
     }
 
     public void testParameterObserver() throws Exception {
@@ -130,30 +128,31 @@
         service.addParameter(PARAM_NAME, PARAM_VALUE);
         assertTrue("Didn't get notification", observer.gotIt);
     }
-     
+
     /**
-     * Simple test to ensure that Parameters marked as Transient
-     * are not persisted.
+     * Simple test to ensure that Parameters marked as Transient are not
+     * persisted.
+     * 
      * @throws Exception
      */
     public void testTransientParameters() throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        
+
         Parameter p1 = new Parameter("NORMAL", "Hello World");
         Parameter p2 = new Parameter("TRANSIENT", "Hello World");
         p2.setTransient(true);
-        
+
         // The header in an object output is 4 bytes
         final int HEADER_LENGTH = 4;
-        
+
         // Make sure that non-transient value is written
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         p1.writeExternal(oos);
         oos.flush();
         oos.close();
         int length1 = baos.toByteArray().length;
-        assertTrue( length1 > HEADER_LENGTH);
-        
+        assertTrue(length1 > HEADER_LENGTH);
+
         // Make sure the transient value is not written
         baos = new ByteArrayOutputStream();
         oos = new ObjectOutputStream(baos);
@@ -161,68 +160,70 @@
         oos.flush();
         oos.close();
         int length2 = baos.toByteArray().length;
-        assertTrue( length2 <= HEADER_LENGTH);
-        
-        
+        assertTrue(length2 <= HEADER_LENGTH);
+
     }
-    
+
     /**
-     * Simple test to make verify that the MessageContext listener
-     * is invoked when a ServiceContext is attached to the MessageContext
+     * Simple test to make verify that the MessageContext listener is invoked
+     * when a ServiceContext is attached to the MessageContext
+     * 
      * @throws Exception
      */
     public void testMessageContextListener() throws Exception {
-        
+
         AxisConfiguration ac = new AxisConfiguration();
         ConfigurationContext cc = new ConfigurationContext(ac);
-        
+
         // Create a dummy AxisService
         AxisService service = new AxisService();
         service.setName("dummy");
-        
+
         AxisServiceGroup asg = new AxisServiceGroup();
         asg.addService(service);
-        
+
         // Attach a ServiceContextListener
-        // The ServiceContextListener will copy sample information from 
+        // The ServiceContextListener will copy sample information from
         // the ServiceContext onto the MessageContext
         service.addMessageContextListener(new MyMessageContextListener());
-        
+
         // Create a Dummy ServiceContext
         ServiceGroupContext sgc = new ServiceGroupContext(cc, asg);
         ServiceContext sc = sgc.getServiceContext(service);
         sc.setProperty("SERVICE_PROPERTY", "SUCCESSFUL");
-        
+
         // Create a MessageContext
         MessageContext mc = new MessageContext();
-        
+
         // Attach the ServiceContext and MessageContext.
         // This will trigger the MyServiceContextListener.attachEvent
         mc.setServiceContext(sc);
-        
+
         // Verify success
         assertTrue("SUCCESSFUL".equals(mc.getProperty("MESSAGE_PROPERTY")));
     }
-    
-    public void testOperationActionMapping() throws Exception {                
+
+    public void testOperationActionMapping() throws Exception {
         AxisOperation op1 = new InOutAxisOperation();
         AxisOperation op2 = new InOutAxisOperation();
         op2.addParameter(DeploymentConstants.TAG_ALLOWOVERRIDE, "true");
         AxisOperation op3 = new InOutAxisOperation();
-        
+
         service.mapActionToOperation("testaction1", op1);
         assertEquals(service.getOperationByAction("testaction1"), op1);
-        //Test duplicate registration with same operation
+        // Test duplicate registration with same operation
         service.mapActionToOperation("testaction1", op1);
         assertEquals(service.getOperationByAction("testaction1"), op1);
-        //Test duplicate registration with different operation and allowOverride
+        // Test duplicate registration with different operation and
+        // allowOverride
         service.mapActionToOperation("testaction1", op2);
         assertEquals(service.getOperationByAction("testaction1"), op1);
-        //Test registration of new operation with allowOverride
+        // Test registration of new operation with allowOverride
         service.mapActionToOperation("testaction2", op2);
         assertEquals(service.getOperationByAction("testaction1"), op1);
         assertEquals(service.getOperationByAction("testaction2"), op2);
-        //Test duplicate registration with different operation and no allowOverride
+        // Test duplicate registration with different operation and no
+        // allowOverride
         service.mapActionToOperation("testaction1", op3);
         assertNull(service.getOperationByAction("testaction1"));
         assertEquals(service.getOperationByAction("testaction2"), op2);
@@ -262,29 +263,35 @@
         service.printXSD(stream, "");
         // service has a single schema and it is printed. The it is compared
         // with the saved file
-        assertSimilarXML(stream.toString(), readFile(SampleSchemasDirectory
+        assertSimilarXML(stream.toString(), readXMLfromSchemaFile(SampleSchemasDirectory
                 + "printXSDReference.xsd"));
     }
 
     public void testPrintWSDL() throws Exception {
-        // create a test service
-        // if MessageTestService is changed somehow printWSDLreference.wsdl file
-        // must changed according to it. Otherwise the test will fail
-        String filename = AbstractTestCase.basedir
-                + "/test-resources/deployment/AxisMessageTestRepo";
-        AxisConfiguration er = ConfigurationContextFactory
-                .createConfigurationContextFromFileSystem(filename, filename + "/axis2.xml")
-                .getAxisConfiguration();
+        service = Utils.createSimpleService(new QName("test"), "", new QName("test"));
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        service.printWSDL(stream);
 
-        assertNotNull(er);
-        service = er.getService("MessagetestService");
-        ByteArrayOutputStream stream = new ByteArrayOutputStream();
-        service.printWSDL(stream, null);
-        // printed WSDL value is compared with saved value
-        assertSimilarXML(stream.toString(), readFile("test-resources" + File.separator + "wsdl"
-                + File.separator + "printWSDLreference.wsdl"));
+        String s = readWSDLFromFile("test-resources" + File.separator + "wsdl" + File.separator
+                + "printWSDLreference.wsdl");
+        assertSimilarXML(stream.toString(), s);
     }
 
+    public String convertXMLFileToString(String fileName) {
+        try {
+            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+            InputStream inputStream = new FileInputStream(new File(fileName));
+            org.w3c.dom.Document doc = documentBuilderFactory.newDocumentBuilder().parse(
+                    inputStream);
+            DOMImplementationLS domImplementation = (DOMImplementationLS) doc.getImplementation();
+            LSSerializer lsSerializer = domImplementation.createLSSerializer();
+            return lsSerializer.writeToString(doc);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
     public void testGetSchema() throws Exception {
         loadSampleSchemaFile(sampleSchemas);
         service.addSchema(sampleSchemas);
@@ -302,20 +309,19 @@
     }
 
     /**
-     * Sameple MessageContextListener which sets a property 
-     * on the MessageContext when the SerivceContext is attached.
+     * Sameple MessageContextListener which sets a property on the
+     * MessageContext when the SerivceContext is attached.
      */
     class MyMessageContextListener implements MessageContextListener {
 
+        public void attachEnvelopeEvent(MessageContext mc) {
 
-        public void attachEnvelopeEvent(MessageContext mc) {
-            
         }
 
         public void attachServiceContextEvent(ServiceContext sc, MessageContext mc) {
             String value = (String) sc.getProperty("SERVICE_PROPERTY");
             mc.setProperty("MESSAGE_PROPERTY", value);
         }
-        
+
     }
 }
Index: test/org/apache/axis2/description/AxisService2WSDLTest.java
===================================================================
--- test/org/apache/axis2/description/AxisService2WSDLTest.java	(revision 1347538)
+++ test/org/apache/axis2/description/AxisService2WSDLTest.java	(working copy)
@@ -19,34 +19,64 @@
 
 package org.apache.axis2.description;
 
+import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.PrintWriter;
 
+import javax.xml.namespace.QName;
+
 import org.apache.axiom.om.OMElement;
+import org.apache.axis2.description.java2wsdl.XMLSchemaTest;
+import org.apache.axis2.util.Utils;
+import org.apache.axis2.util.XMLPrettyPrinter;
 
+public class AxisService2WSDLTest extends XMLSchemaTest {
 
-public class AxisService2WSDLTest extends AxisMessageTest{
-    
-    //This test implicitly test the checkStyle(axisOperation); method
-    //This test belongs to AxisService2WSDL20 class
-    public void testGenerateInterfaceOperationElement20() throws Exception{
+    private AxisService service;
+    private ByteArrayOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        service = Utils.createSimpleService(new QName("test"), "", new QName("test"));
+        stream = new ByteArrayOutputStream();
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        service = null;
+        stream = null;
+        super.tearDown();
+    }
+
+    // This test implicitly test the checkStyle(axisOperation); method
+    // This test belongs to AxisService2WSDL20 class
+    public void testGenerateInterfaceOperationElement20() throws Exception {
+        // if this not null test becomes useless
         assertNull(service.getParameterValue(WSDL2Constants.OPERATION_STYLE));
-        AxisService2WSDL20 service2wsdl20=new AxisService2WSDL20(service);
-        OMElement element=service2wsdl20.generateOM();
-        String s=readFile("test-resources"+ File.separator + "wsdl" + File.separator +"testGenerateInterfaceOperationElement_WSDL.wsdl");
-        assertSimilarXML(s, element.toString());
-        
+        AxisService2WSDL20 service2wsdl20 = new AxisService2WSDL20(service);
+        OMElement element = service2wsdl20.generateOM();
+        // writeToFile("test-resources" + File.separator + "wsdl" +
+        // File.separator
+        // + "testGenerateInterfaceOperationElement_WSDL.wsdl",
+        // element.toString());
+        XMLPrettyPrinter.prettify(element, stream);
+        assertSimilarXML(stream.toString(), readWSDLFromFile("test-resources" + File.separator
+                + "wsdl" + File.separator + "testGenerateInterfaceOperationElement_WSDL.wsdl"));
+
     }
-    
-    //This test belongs to AxisService2WSDL11 class
+
+    // This test belongs to AxisService2WSDL11 class
     public void testGenerateInterfaceOperationElement11() throws Exception {
+        // if this not null test becomes useless
         assertNull(service.getParameterValue(WSDL2Constants.OPERATION_STYLE));
-        AxisService2WSDL11 service2wsdl11=new AxisService2WSDL11(service);
-        OMElement element=service2wsdl11.generateOM();
-        String s=readFile("test-resources"+ File.separator + "wsdl" + File.separator +"testGenerateInterfaceOperationElement11_WSDL.wsdl");
-        assertSimilarXML(s, element.toString());
+        AxisService2WSDL11 service2wsdl11 = new AxisService2WSDL11(service);
+        OMElement element = service2wsdl11.generateOM();
+        // writeToFile("test-resources" + File.separator + "wsdl" +
+        // File.separator
+        // +
+        // "testGenerateInterfaceOperationElement11_WSDL.wsdl",element.toString());
+        XMLPrettyPrinter.prettify(element, stream);
+        assertSimilarXML(stream.toString(), readWSDLFromFile("test-resources" + File.separator
+                + "wsdl" + File.separator + "testGenerateInterfaceOperationElement11_WSDL.wsdl"));
     }
-    
-    
 
 }
Index: test/org/apache/axis2/description/AxisMessageTest.java
===================================================================
--- test/org/apache/axis2/description/AxisMessageTest.java	(revision 1347538)
+++ test/org/apache/axis2/description/AxisMessageTest.java	(working copy)
@@ -19,50 +19,140 @@
 
 package org.apache.axis2.description;
 
+import java.util.ArrayList;
+
 import javax.xml.namespace.QName;
 
-import org.apache.axis2.AbstractTestCase;
-import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.client.OperationClient;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.OperationContext;
+import org.apache.axis2.context.ServiceContext;
 import org.apache.axis2.description.java2wsdl.XMLSchemaTest;
-import org.apache.axis2.engine.AxisConfiguration;
-import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.ws.commons.schema.XmlSchema;
 import org.apache.ws.commons.schema.XmlSchemaElement;
 
 public class AxisMessageTest extends XMLSchemaTest {
 
     private AxisMessage axisMessage;
     protected AxisService service;
-
+    private ArrayList<XmlSchema> schemas;
     private XmlSchemaElement element;
 
     @Override
     public void setUp() throws Exception {
-        String filename = AbstractTestCase.basedir
-                + "/test-resources/deployment/AxisMessageTestRepo";
-        AxisConfiguration er = ConfigurationContextFactory
-                .createConfigurationContextFromFileSystem(filename,
-                        filename + "/axis2.xml").getAxisConfiguration();
+        service=new AxisService();
+        schemas=new ArrayList<XmlSchema>();
+        loadSampleSchemaFile(schemas);
+        service.addSchema(schemas);
+        AxisOperation axisOperation=new AxisOperation() {
+            
+            @Override
+            public void setRemainingPhasesInFlow(ArrayList list) {
+                // TODO Auto-generated method stub
+                
+            }
+            
+            @Override
+            public void setPhasesOutFlow(ArrayList list) {
+                // TODO Auto-generated method stub
+                
+            }
+            
+            @Override
+            public AxisService getAxisService() {
+                // TODO Auto-generated method stub
+                return service;
+            }
 
-        assertNotNull(er);
-        service = er.getService("MessagetestService");
-        assertNotNull(service);
-        AxisOperation op = service.getOperation(new QName("echoString"));
-        assertNotNull(op);
-        axisMessage = op.getMessage("In");
+            @Override
+            public void setPhasesOutFaultFlow(ArrayList list) {
+                // TODO Auto-generated method stub
+                
+            }
+            
+            @Override
+            public void setPhasesInFaultFlow(ArrayList list) {
+                // TODO Auto-generated method stub
+                
+            }
+            
+            @Override
+            public ArrayList getRemainingPhasesInFlow() {
+                // TODO Auto-generated method stub
+                return null;
+            }
+            
+            @Override
+            public ArrayList getPhasesOutFlow() {
+                // TODO Auto-generated method stub
+                return null;
+            }
+            
+            @Override
+            public ArrayList getPhasesOutFaultFlow() {
+                // TODO Auto-generated method stub
+                return null;
+            }
+            
+            @Override
+            public ArrayList getPhasesInFaultFlow() {
+                // TODO Auto-generated method stub
+                return null;
+            }
+            
+            @Override
+            public AxisMessage getMessage(String label) {
+                // TODO Auto-generated method stub
+                return null;
+            }
+            
+            @Override
+            public OperationClient createClient(ServiceContext sc, Options options) {
+                // TODO Auto-generated method stub
+                return null;
+            }
+            
+            @Override
+            public void addMessageContext(MessageContext msgContext, OperationContext opContext)
+                    throws AxisFault {
+                // TODO Auto-generated method stub
+                
+            }
+            
+            @Override
+            public void addMessage(AxisMessage message, String label) {
+                // TODO Auto-generated method stub
+                
+            }
+            
+            @Override
+            public void addFaultMessageContext(MessageContext msgContext, OperationContext opContext)
+                    throws AxisFault {
+                // TODO Auto-generated method stub
+                
+            }
+        };
+        axisMessage = new AxisMessage();
+        axisMessage.setParent(axisOperation);
+        axisMessage.setElementQName(new QName("http://www.w3schools.com", "note"));
         super.setUp();
     }
 
     @Override
     protected void tearDown() throws Exception {
         axisMessage = null;
+        service=null;
+        schemas=null;
         super.tearDown();
     }
 
     public void testGetSchemaElement() throws Exception {
         element = axisMessage.getSchemaElement();
-        assertEquals(element.getName(), "echoString");
-        assertEquals(element.getQName(), new QName(
-                "http://echo.sample.axis2.apache.org", "echoString"));
+        assertNotNull(element);
+        assertEquals(element.getName(), "note");
+        
     }
 
 }
Index: test/org/apache/axis2/description/java2wsdl/TypeTableTest.java
===================================================================
--- test/org/apache/axis2/description/java2wsdl/TypeTableTest.java	(revision 1347538)
+++ test/org/apache/axis2/description/java2wsdl/TypeTableTest.java	(working copy)
@@ -341,5 +341,7 @@
     class TestCalendarImpl {
 
     }
+    
+    
 
 }
Index: test/org/apache/axis2/description/java2wsdl/XMLSchemaTest.java
===================================================================
--- test/org/apache/axis2/description/java2wsdl/XMLSchemaTest.java	(revision 1347538)
+++ test/org/apache/axis2/description/java2wsdl/XMLSchemaTest.java	(working copy)
@@ -20,9 +20,11 @@
 package org.apache.axis2.description.java2wsdl;
 
 import java.io.BufferedReader;
+import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileReader;
+import java.io.FileWriter;
 import java.io.InputStream;
 import java.util.ArrayList;
 
@@ -30,6 +32,7 @@
 
 import junit.framework.TestCase;
 
+import org.apache.axis2.util.XMLPrettyPrinter;
 import org.apache.ws.commons.schema.XmlSchema;
 import org.apache.ws.commons.schema.XmlSchemaCollection;
 import org.custommonkey.xmlunit.Diff;
@@ -103,9 +106,32 @@
         int c = bufferedReader.read();
         while (c != -1) {
             buffer[i++] = (char) c;
-            c = bufferedReader.read();
+            c = bufferedReader.read(); 
         }
         return new String(buffer);
     }
 
+    public String readXMLfromSchemaFile(String path) throws Exception {
+        InputStream is = new FileInputStream(path);
+        XmlSchemaCollection schemaCol = new XmlSchemaCollection();
+        XmlSchema schema = schemaCol.read(new StreamSource(is), null);
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        schema.write(stream);
+        return stream.toString();
+    }
+    
+   
+    public String readWSDLFromFile(String path) throws Exception {
+        File file=new File(path);
+        XMLPrettyPrinter.prettify(file);    //this is used to correct unnecessary formatting in the file
+        return readFile(path);
+    }
+    
+    public void writeToFile(String path,String data) throws Exception{
+        FileWriter fileWriter=new FileWriter(new File(path));
+        fileWriter.write(data);
+        fileWriter.flush();
+        fileWriter.close();        
+    }
+
 }
Index: test-resources/schemas/custom_schemas/printXSDReference.xsd
===================================================================
--- test-resources/schemas/custom_schemas/printXSDReference.xsd	(revision 1347538)
+++ test-resources/schemas/custom_schemas/printXSDReference.xsd	(working copy)
@@ -1,31 +1,26 @@
-<!--
-  ~ Licensed to the Apache Software Foundation (ASF) under one
-  ~ or more contributor license agreements. See the NOTICE file
-  ~ distributed with this work for additional information
-  ~ regarding copyright ownership. The ASF licenses this file
-  ~ to you under the Apache License, Version 2.0 (the
-  ~ "License"); you may not use this file except in compliance
-  ~ with the License. You may obtain a copy of the License at
-  ~
-  ~ http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing,
-  ~ software distributed under the License is distributed on an
-  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~ KIND, either express or implied. See the License for the
-  ~ specific language governing permissions and limitations
-  ~ under the License.
-  -->
+<!-- ~ Licensed to the Apache Software Foundation (ASF) under one ~ or more 
+	contributor license agreements. See the NOTICE file ~ distributed with this 
+	work for additional information ~ regarding copyright ownership. The ASF 
+	licenses this file ~ to you under the Apache License, Version 2.0 (the ~ 
+	"License"); you may not use this file except in compliance ~ with the License. 
+	You may obtain a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 
+	~ ~ Unless required by applicable law or agreed to in writing, ~ software 
+	distributed under the License is distributed on an ~ "AS IS" BASIS, WITHOUT 
+	WARRANTIES OR CONDITIONS OF ANY ~ KIND, either express or implied. See the 
+	License for the ~ specific language governing permissions and limitations 
+	~ under the License. -->
 
-<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3schools.com" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.w3schools.com">
-    <xs:element name="note">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element name="to" type="xs:string"/>
-                <xs:element name="from" type="xs:string"/>
-                <xs:element name="heading" type="xs:string"/>
-                <xs:element name="body" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3schools.com"
+	attributeFormDefault="unqualified" elementFormDefault="qualified"
+	targetNamespace="http://www.w3schools.com">
+	<xs:element name="note">
+		<xs:complexType>
+			<xs:sequence>
+				<xs:element name="to" type="xs:string" />
+				<xs:element name="from" type="xs:string" />
+				<xs:element name="heading" type="xs:string" />
+				<xs:element name="body" type="xs:string" />
+			</xs:sequence>
+		</xs:complexType>
+	</xs:element>
 </xs:schema>
Index: test-resources/wsdl/testGenerateInterfaceOperationElement_WSDL.wsdl
===================================================================
--- test-resources/wsdl/testGenerateInterfaceOperationElement_WSDL.wsdl	(revision 1347538)
+++ test-resources/wsdl/testGenerateInterfaceOperationElement_WSDL.wsdl	(working copy)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <!--
   ~ Licensed to the Apache Software Foundation (ASF) under one
   ~ or more contributor license agreements. See the NOTICE file
@@ -16,34 +17,29 @@
   ~ specific language governing permissions and limitations
   ~ under the License.
   -->
-
-<wsdl2:description xmlns:wsdl2="http://www.w3.org/ns/wsdl" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:ns="http://echo.sample.axis2.apache.org" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:wrpc="http://www.w3.org/ns/wsdl/rpc" xmlns:tns="http://echo.sample.axis2.apache.org" xmlns:wsoap="http://www.w3.org/ns/wsdl/soap" xmlns:wsdlx="http://www.w3.org/ns/wsdl-extensions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:whttp="http://www.w3.org/ns/wsdl/http" targetNamespace="http://echo.sample.axis2.apache.org"><wsdl2:types><xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://echo.sample.axis2.apache.org">
-    <xs:element name="echoStringArray">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element maxOccurs="unbounded" minOccurs="0" name="in" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:element name="echoStringArrayResponse">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:element name="echoString">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element minOccurs="0" name="in" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:element name="echoStringResponse">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element minOccurs="0" name="return" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-</xs:schema></wsdl2:types><wsdl2:interface name="ServiceInterface"><wsdl2:operation name="echoStringArray" style="http://www.w3.org/ns/wsdl/style/rpc" wrpc:signature="in #in return #return " pattern="http://www.w3.org/ns/wsdl/in-out"><wsdl2:input element="ns:echoStringArray" wsaw:Action="urn:echoStringArray"/><wsdl2:output element="ns:echoStringArrayResponse" wsaw:Action="urn:echoStringArrayResponse"/></wsdl2:operation><wsdl2:operation name="echoString" style="http://www.w3.org/ns/wsdl/style/rpc" wrpc:signature="in #in return #return " pattern="http://www.w3.org/ns/wsdl/in-out"><wsdl2:input element="ns:echoString" wsaw:Action="urn:echoString"/><wsdl2:output element="ns:echoStringResponse" wsaw:Action="urn:echoStringResponse"/></wsdl2:operation></wsdl2:interface><wsdl2:binding name="MessagetestServiceSOAP11Binding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/soap" wsoap:version="1.1" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP"><wsdl2:operation ref="tns:echoStringArray" wsoap:action="urn:echoStringArray"/><wsdl2:operation ref="tns:echoString" wsoap:action="urn:echoString"/></wsdl2:binding><wsdl2:binding name="MessagetestServiceSOAP12Binding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/soap" wsoap:version="1.2" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP"><wsdl2:operation ref="tns:echoStringArray" wsoap:action="urn:echoStringArray"/><wsdl2:operation ref="tns:echoString" wsoap:action="urn:echoString"/></wsdl2:binding><wsdl2:binding name="MessagetestServiceSOAP11Binding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/soap" wsoap:version="1.1" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP"><wsdl2:operation ref="tns:echoStringArray" wsoap:action="urn:echoStringArray"/><wsdl2:operation ref="tns:echoString" wsoap:action="urn:echoString"/></wsdl2:binding><wsdl2:binding name="MessagetestServiceHttpBinding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/http"><wsdl2:operation ref="tns:creatSeq" whttp:location="creatSeq"/><wsdl2:operation ref="tns:echoStringArray" whttp:location="echoStringArray"/><wsdl2:operation ref="tns:echoString" whttp:location="echoString"/></wsdl2:binding><wsdl2:service name="MessagetestService" interface="tns:ServiceInterface"/></wsdl2:description>
+<wsdl2:description xmlns:wsdl2="http://www.w3.org/ns/wsdl" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:tns="http://ws.apache.org/axis2" xmlns:wsoap="http://www.w3.org/ns/wsdl/soap" xmlns:wrpc="http://www.w3.org/ns/wsdl/rpc" xmlns:wsdlx="http://www.w3.org/ns/wsdl-extensions" xmlns:whttp="http://www.w3.org/ns/wsdl/http" targetNamespace="http://ws.apache.org/axis2">
+    <wsdl2:types/>
+    <wsdl2:interface name="ServiceInterface">
+        <wsdl2:operation name="test" pattern="http://www.w3.org/ns/wsdl/in-out">
+            <wsdl2:input element="#none" wsaw:Action="urn:test"/>
+            <wsdl2:output element="#none" wsaw:Action="urn:testResponse"/>
+        </wsdl2:operation>
+    </wsdl2:interface>
+    <wsdl2:binding name="testSOAP11Binding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/soap" wsoap:version="1.1" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP">
+        <wsdl2:operation ref="tns:test" wsoap:action="urn:test"/>
+    </wsdl2:binding>
+    <wsdl2:binding name="testSOAP12Binding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/soap" wsoap:version="1.2" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP">
+        <wsdl2:operation ref="tns:test" wsoap:action="urn:test"/>
+    </wsdl2:binding>
+    <wsdl2:binding name="testSOAP11Binding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/soap" wsoap:version="1.1" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP">
+        <wsdl2:operation ref="tns:test" wsoap:action="urn:test"/>
+    </wsdl2:binding>
+    <wsdl2:binding name="testHttpBinding" interface="tns:ServiceInterface" type="http://www.w3.org/ns/wsdl/http">
+        <wsdl2:operation ref="tns:test" whttp:location="test"/>
+    </wsdl2:binding>
+    <wsdl2:service name="test" interface="tns:ServiceInterface">
+        <wsdl2:endpoint name="SOAP11Endpoint" binding="tns:testSOAP11Binding" address="test"/>
+        <wsdl2:endpoint name="SOAP12Endpoint" binding="tns:testSOAP12Binding" address="test"/>
+        <wsdl2:endpoint name="HTTPEndpoint" binding="tns:testHttpBinding" address="test"/>
+    </wsdl2:service>
+</wsdl2:description>
Index: test-resources/wsdl/testGenerateInterfaceOperationElement11_WSDL.wsdl
===================================================================
--- test-resources/wsdl/testGenerateInterfaceOperationElement11_WSDL.wsdl	(revision 1347538)
+++ test-resources/wsdl/testGenerateInterfaceOperationElement11_WSDL.wsdl	(working copy)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <!--
   ~ Licensed to the Apache Software Foundation (ASF) under one
   ~ or more contributor license agreements. See the NOTICE file
@@ -16,36 +17,13 @@
   ~ specific language governing permissions and limitations
   ~ under the License.
   -->
-
-
-
-<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:ns="http://echo.sample.axis2.apache.org" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://echo.sample.axis2.apache.org"><wsdl:types><xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://echo.sample.axis2.apache.org">
-    <xs:element name="echoStringArray">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element maxOccurs="unbounded" minOccurs="0" name="in" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:element name="echoStringArrayResponse">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:element name="echoString">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element minOccurs="0" name="in" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-    <xs:element name="echoStringResponse">
-        <xs:complexType>
-            <xs:sequence>
-                <xs:element minOccurs="0" name="return" nillable="true" type="xs:string"/>
-            </xs:sequence>
-        </xs:complexType>
-    </xs:element>
-</xs:schema></wsdl:types><wsdl:message name="echoStringArrayRequest"><wsdl:part name="parameters" element="ns:echoStringArray"/></wsdl:message><wsdl:message name="echoStringArrayResponse"><wsdl:part name="parameters" element="ns:echoStringArrayResponse"/></wsdl:message><wsdl:message name="echoStringRequest"><wsdl:part name="parameters" element="ns:echoString"/></wsdl:message><wsdl:message name="echoStringResponse"><wsdl:part name="parameters" element="ns:echoStringResponse"/></wsdl:message><wsdl:portType name="MessagetestServicePortType"><wsdl:operation name="echoStringArray"><wsdl:input message="ns:echoStringArrayRequest" wsaw:Action="urn:echoStringArray"/><wsdl:output message="ns:echoStringArrayResponse" wsaw:Action="urn:echoStringArrayResponse"/></wsdl:operation><wsdl:operation name="echoString"><wsdl:input message="ns:echoStringRequest" wsaw:Action="urn:echoString"/><wsdl:output message="ns:echoStringResponse" wsaw:Action="urn:echoStringResponse"/></wsdl:operation></wsdl:portType><wsdl:service name="MessagetestService"/></wsdl:definitions>
+<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:tns="http://ws.apache.org/axis2" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://ws.apache.org/axis2">
+    <wsdl:types/>
+    <wsdl:portType name="testPortType">
+        <wsdl:operation name="test">
+            <wsdl:input message="tns:null" wsaw:Action="urn:test"/>
+            <wsdl:output message="tns:null" wsaw:Action="urn:testResponse"/>
+        </wsdl:operation>
+    </wsdl:portType>
+    <wsdl:service name="test"/>
+</wsdl:definitions>
Index: test-resources/wsdl/printWSDLreference.wsdl
===================================================================
--- test-resources/wsdl/printWSDLreference.wsdl	(revision 1347538)
+++ test-resources/wsdl/printWSDLreference.wsdl	(working copy)
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
-
 <!--
   ~ Licensed to the Apache Software Foundation (ASF) under one
   ~ or more contributor license agreements. See the NOTICE file
@@ -18,62 +17,13 @@
   ~ specific language governing permissions and limitations
   ~ under the License.
   -->
-
-
-<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:ns="http://echo.sample.axis2.apache.org" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://echo.sample.axis2.apache.org">
-    <wsdl:types>
-        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://echo.sample.axis2.apache.org">
-            <xs:element name="echoStringArray">
-                <xs:complexType>
-                    <xs:sequence>
-                        <xs:element maxOccurs="unbounded" minOccurs="0" name="in" nillable="true" type="xs:string"/>
-                    </xs:sequence>
-                </xs:complexType>
-            </xs:element>
-            <xs:element name="echoStringArrayResponse">
-                <xs:complexType>
-                    <xs:sequence>
-                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
-                    </xs:sequence>
-                </xs:complexType>
-            </xs:element>
-            <xs:element name="echoString">
-                <xs:complexType>
-                    <xs:sequence>
-                        <xs:element minOccurs="0" name="in" nillable="true" type="xs:string"/>
-                    </xs:sequence>
-                </xs:complexType>
-            </xs:element>
-            <xs:element name="echoStringResponse">
-                <xs:complexType>
-                    <xs:sequence>
-                        <xs:element minOccurs="0" name="return" nillable="true" type="xs:string"/>
-                    </xs:sequence>
-                </xs:complexType>
-            </xs:element>
-        </xs:schema>
-    </wsdl:types>
-    <wsdl:message name="echoStringArrayRequest">
-        <wsdl:part name="parameters" element="ns:echoStringArray"/>
-    </wsdl:message>
-    <wsdl:message name="echoStringArrayResponse">
-        <wsdl:part name="parameters" element="ns:echoStringArrayResponse"/>
-    </wsdl:message>
-    <wsdl:message name="echoStringRequest">
-        <wsdl:part name="parameters" element="ns:echoString"/>
-    </wsdl:message>
-    <wsdl:message name="echoStringResponse">
-        <wsdl:part name="parameters" element="ns:echoStringResponse"/>
-    </wsdl:message>
-    <wsdl:portType name="MessagetestServicePortType">
-        <wsdl:operation name="echoStringArray">
-            <wsdl:input message="ns:echoStringArrayRequest" wsaw:Action="urn:echoStringArray"/>
-            <wsdl:output message="ns:echoStringArrayResponse" wsaw:Action="urn:echoStringArrayResponse"/>
+<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:tns="http://ws.apache.org/axis2" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://ws.apache.org/axis2">
+    <wsdl:types/>
+    <wsdl:portType name="testPortType">
+        <wsdl:operation name="test">
+            <wsdl:input message="tns:null" wsaw:Action="urn:test"/>
+            <wsdl:output message="tns:null" wsaw:Action="urn:testResponse"/>
         </wsdl:operation>
-        <wsdl:operation name="echoString">
-            <wsdl:input message="ns:echoStringRequest" wsaw:Action="urn:echoString"/>
-            <wsdl:output message="ns:echoStringResponse" wsaw:Action="urn:echoStringResponse"/>
-        </wsdl:operation>
     </wsdl:portType>
-    <wsdl:service name="MessagetestService"/>
+    <wsdl:service name="test"/>
 </wsdl:definitions>
