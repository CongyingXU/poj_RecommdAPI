Index: modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 521122)
+++ modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -57,8 +57,8 @@
 public class AxisConfiguration extends AxisDescription {
 
     private static final Log log = LogFactory.getLog(AxisConfiguration.class);
-    /*
-     * To store data locators configured
+    /* 
+     * To store configured data locators
      */
     private HashMap dataLocators = new HashMap();
     private HashMap dataLocatorClassNames = new HashMap();
@@ -67,10 +67,10 @@
      */
     // private final HashMap defaultModules = new HashMap();
     //
-    // to store all the availble modules (including version)
+    // To store all the available modules (including version)
     private final HashMap allModules = new HashMap();
 
-    // to store mapping between default version to module name
+    // To store mapping between default version and module name
     private final HashMap nameToversionMap = new HashMap();
 
     // private final HashMap serviceGroups = new HashMap();
@@ -134,7 +134,7 @@
 
     private ClassLoader systemClassLoader;
 
-    //to keep tarck of system start or not
+    //To keep track of whether the system has started or not
     private boolean start;
 
     private ArrayList targetResolvers;
@@ -235,11 +235,11 @@
      */
     public void removeModule(QName module) {
         allModules.remove(module);
-        // TODO dis-engage has to be done here
+        // TODO disengage has to be done here
     }
 
     /**
-     * Adds module configuration, if there is moduleConfig tag in service.
+     * Adds module configuration, if there is a moduleConfig tag in service.
      *
      * @param moduleConfiguration
      */
@@ -377,10 +377,10 @@
     }
 
     /**
-     * Engages the default module version corresponding to given module name ,
+     * Engages the default module version corresponding to the given module name,
      * or if the module name contains version number in it then it will engage
-     * the correct module. Both of the below two cases are valid 1.
-     * engageModule("addressing"); 2. engageModule("addressing-1.23");
+     * the correct module. Both the below cases are valid : -
+     * 1. engageModule("addressing"); 2. engageModule("addressing-1.23");
      *
      * @param moduleref
      * @throws AxisFault
@@ -396,7 +396,7 @@
     }
 
     /**
-     * Engages a module using give name and its version ID.
+     * Engages a module using given name and its version ID.
      *
      * @param moduleName
      * @param versionID
@@ -444,8 +444,8 @@
     }
 
     /**
-     * To dis-engage module from the system, this will remove all the handlers
-     * belongs to this module from all the handler chains
+     * To dis-engage a module from the system. This will remove all the handlers
+     * belonging to this module from all the handler chains.
      *
      * @param module
      */
@@ -479,7 +479,7 @@
                     axisObserver.serviceUpdate(event, service);
                 }
             } catch (Throwable e) {
-                // No need to stop the system due to this , So log and ignore
+                // No need to stop the system due to this, so log and ignore
                 log.debug(e);
             }
         }
@@ -494,7 +494,7 @@
             try {
                 axisObserver.moduleUpdate(event, moule);
             } catch (Throwable e) {
-                // No need to stop the system due to this , So log and ignore
+                // No need to stop the system due to this, so log and ignore
                 log.debug(e);
             }
         }
@@ -509,7 +509,7 @@
             try {
                 axisObserver.serviceGroupUpdate(event, serviceGroup);
             } catch (Throwable e) {
-                // No need to stop the system due to this , So log and ignore
+                // No need to stop the system due to this, so log and ignore
                 log.debug(e);
             }
         }
@@ -601,12 +601,12 @@
     }
 
     /**
-     * Method getModule. first it will check whether the given module is there
-     * in the hashMap , if so just return that and the name can be either with
-     * version string or without vresion string <p/> if it not found and , the
-     * nane does not have version string in it then try to check whether default
-     * vresion of module available in the sytem for the give name , if so return
-     * that
+     * Method getModule. First it will check whether the given module is there
+     * in the hashMap, if so returns that and the name, which can be either with
+     * version string or without version string. <p/> If its not found and the
+     * name does not contain the version string in it then checks whether the default
+     * version of the module is available in the sytem for the given name, then returns
+     * that.
      *
      * @param name
      * @return Returns ModuleDescription.
@@ -616,7 +616,7 @@
         if (module != null) {
             return module;
         }
-        // checking whether the version string seperator is not there in the
+        // checks whether the version string seperator is not there in the
         // module name
         String moduleName = name.getLocalPart();
         String defaultModuleVersion = getDefaultModuleVersion(moduleName);
@@ -630,7 +630,7 @@
         return null;
     }
 
-    // the class loder that become the parent of all the modules
+    // the class loader that becomes the parent of all the modules
     public ClassLoader getModuleClassLoader() {
         return this.moduleClassLoader;
     }
@@ -691,8 +691,8 @@
     }
 
     /**
-     * Service can start and stop , if once stop we can not acess that , so we
-     * need a way to get the service even if service is not active
+     * Service can start and stop, once stopped it cannot be accessed, so we
+     * need a way to get the service even if service is not active.
      *
      * @return AxisService
      */
@@ -705,7 +705,7 @@
         }
     }
 
-    // the class loder that become the parent of all the services
+    // The class loader that becomes the parent of all the services
     public ClassLoader getServiceClassLoader() {
         return this.serviceClassLoader;
     }
@@ -721,7 +721,7 @@
         return getChildren();
     }
 
-    // to get all the services in the system
+    // To get all the services in the system
     public HashMap getServices() {
         Iterator sgs = getServiceGroups();
 
@@ -739,7 +739,7 @@
         return allServices;
     }
 
-    // the class loder which become the top most parent of all the modules and
+    // The class loader which become the top most parent of all the modules and
     // services
     public ClassLoader getSystemClassLoader() {
         return this.systemClassLoader;
@@ -811,10 +811,10 @@
     }
 
     /**
-     * Adds a dafault module version , which can be done either programatically
-     * or by using axis2.xml . The default module version is important if user
-     * asks to engage a module without given version ID, in which case, we will
-     * engage the default version.
+     * Adds a default module version, which can be done either programmatically
+     * or by using axis2.xml. The default module version is important if user
+     * asks to engage a module without given version ID, in which case,
+     * the default version is engaged.
      *
      * @param moduleName
      * @param moduleVersion
@@ -922,10 +922,10 @@
     }
 
     /**
-     * getTargetResolverChain returns and instance of
+     * getTargetResolverChain returns an instance of
      * TargetResolver which iterates over the registered
      * TargetResolvers, calling each one in turn when
-     * resolveTarget is called
+     * resolveTarget is called.
      */
     public TargetResolver getTargetResolverChain() {
         if (targetResolvers.isEmpty()) {
@@ -963,7 +963,7 @@
     }
 
     /**
-     * Allow to define/configure Data Locator for specified dialect at Axis 2 Configuration.
+     * Allows to define/configure Data Locator for specified dialect at Axis 2 Configuration.
      *
      * @param dialect-  an absolute URI represents the format and version of data
      * @param classname - class name of the Data Locator configured to support retrieval
@@ -975,7 +975,7 @@
 
     /**
      * For internal used only! To store instance of DataLocator when it is first loaded. This allows to
-     * re-use DataLocator after it is initially loaded.
+     * reuse of the DataLocator after it is initially loaded.
      *
      * @param dialect-    an absolute URI represents the format and version of data
      * @param dataLocator - specified an DataLocator instance  to support retrieval
@@ -1002,8 +1002,8 @@
 
 
     /**
-     * Checks whether some one has changed the system pre-defined phases
-     * for all the flows. If they have been changed,throws a DeploymentException.
+     * Checks whether the system pre-defined phases
+     * for all the flows, have been changed. If they have been changed, throws a DeploymentException.
      *
      * @throws org.apache.axis2.deployment.DeploymentException
      *
