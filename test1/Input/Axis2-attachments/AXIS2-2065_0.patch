Index: adv-userguide.html
===================================================================
--- adv-userguide.html	(revision 501722)
+++ adv-userguide.html	(working copy)
@@ -10,30 +10,29 @@
 <body dir="ltr" lang="en-US">
 <a name="_Toc96697849" id="_Toc96697849"></a>
 
-<h1 align="center">Apache Axis2 Advance User's Guide</h1>
+<h1 align="center">Apache Axis2 Advanced User's Guide</h1>
 
 <p>This guide will help you get started with Axis2, the next generation of
-Apache Axis! It describes in detail how to write Web services and Web service
-clients using Axis2; how to write custom modules and how to use them with a
-Web service. Advanced Topics and Samples which are shipped with the binary
-distribution of Axis2, are also discussed.</p>
+Apache Axis! It gives a detail description on how to write Web services and
+Web service clients using Axis2, how to write custom modules, and how to use
+them with a Web service. Advanced Topics and Samples that are shipped with
+the binary distribution of Axis2, are also discussed.</p>
 <a name="Introduction"></a>
 
 <h2>Introduction</h2>
 
-<p>This User's Guide is written based on <a
+<p>This user guide is written based on <a
 href="../download/1_1/download.html/#std-bin">Axis2 Standard Binary
 Distribution</a>. The Standard Binary Distribution can be directly <a
 href="../download/1_1/download.html/#std-bin">downloaded</a> or built using
 the <a href="../download/1_1/download.html#src">Source Distribution</a>. If
-you choose to go for the latter, then <a
-href="installationguide.html">Installation Guide</a> will instruct you on how
-to build Axis2 Standard Binary Distribution using the Source.</p>
+you choose the latter, then the <a href="installationguide.html">Installation
+Guide</a> will instruct you on how to build Axis2 Standard Binary
+Distribution using the source.</p>
 
-<p>We hope you enjoy using Axis2. Please note that this is an open-source
-effort. If you feel the code could use some new features or fixes, please get
-involved and lend us a hand! The Axis developer community welcomes your
-participation.</p>
+<p>Please note that Axis2 is an open-source effort. If you feel the code
+could use some new features or fixes, please get involved and lend us a hand!
+The Axis developer community welcomes your participation.</p>
 
 <p>Let us know what you think! Send your feedback on Axis2 to "<a
 href="mailto:axis-user@ws.apache.org">axis-user@ws.apache.org</a>". Make sure
@@ -41,52 +40,52 @@
 
 <h2>Getting Started</h2>
 
-<p>First two sections of the user guide will walk you through writing and
-deploying a new Web Service using Axis2, and writing a Web Service client
-using Axis2. Next section - <a href="#config"> Configuring Axis2</a> -
-provides a introduction to important configuration options in Axis2. Final
-section - <a href="#advanced">Advanced Topics</a> - provides references for
+<p>The first two sections of the user guide explain how to write and deploy a
+new Web Service using Axis2, and how to write a Web Service client using
+Axis2. The next section - <a href="#config"> Configuring Axis2</a> - provides
+an introduction to important configuration options in Axis2. The final
+section - <a href="#advanced">Advanced Topics</a> - provides references to
 other features</p>
 
-<p>In this section, we will learn how to write and deploy Web services using
-Axis2. All the samples mentioned in this guide are located in the
-<b>"samples/userguide/src"</b> directory of <a
+<p>In this (first) section, we will learn how to write and deploy Web
+services using Axis2. All the samples mentioned in this guide are located in
+the <b>"samples/userguide/src"</b> directory of <a
 href="../download/1_1/download.html/#std-bin">Axis2 standard binary
 distribution</a>.</p>
 
 <p>Please deploy axis2.war in your servlet container and ensure that it works
-fine. <a href="installationguide.html" target="_blank">Installation Guide</a>
-gives you step by step instructions on just how to build axis2.war and deploy
-it in your servlet container.</p>
+fine. The <a href="installationguide.html" target="_blank">Installation
+Guide</a> gives you step-by-step instructions on just how to build axis2.war
+and deploy it in your servlet container.</p>
 <a name="ws_codegen"></a><a name="Web_Services_Using_Axis2"></a>
 
 <h2>Creating a New Web Service</h2>
 
-<p>If you are looking for "How to Write a Web Service Client using Axis2?"
-please go to the <a href="#client">next section</a>. Axis2 provides two ways
-to create new Web Services, using <strong>code generation</strong> and using
-XML based primary APIs. The following section explains how to start from a
-WSDL, and create a new Service with code generation. For the XML based
-primary API please refer to the section <a
-href="xmlbased-server.html">Writing Web Services Using Axis2's Primary
-APIs</a> for more information. However if you are a new user it is better to
-follow the code generation approach first (given below)</p>
+<p>If you are interested in how to write a Web Service client using Axis2, it
+is decribed under <a href="#client">Writing a Web Service Client</a>. Axis2
+provides two ways to create new Web Services, using <strong>code
+generation</strong> and using <strong>XML based primary APIs</strong>. The
+following section explains how to start from a WSDL, and create a new service
+with code generation. For the XML based primary API, please refer to the
+section <a href="xmlbased-server.html">Writing Web Services Using Axis2's
+Primary APIs</a> for more information. However, if you are a new user, it is
+better to follow the code generation approach first (given below)</p>
 
-<h3>Starting with WSDL, Create and Deploy a Service</h3>
+<h3>Starting with WSDL, Creating and Deploying a Service</h3>
 
 <p>We start with a WSDL, however if you do not have a WSDL and need to create
-a WSDL from a java class please try <a
+a WSDL from a java class, please use the <a
 href="reference.html#wsdl2java">Java2WSDL tool</a> and create a WSDL. As you
-might already know, a WSDL description of a Service provides precise
-definition of a Web Service. Axis2 could process the WSDL and generate java
-code that does most of work for you. At the server side we call them
-Skeletons and at the client side Stubs.</p>
+might already know, a WSDL description of a service provides a precise
+definition of a Web Service. Axis2 can process the WSDL and generate java
+code that does most of the work for you. At the server side, we call them
+Skeletons, and at the client side, Stubs.</p>
 This method of writing a Web service with Axis2 involves four steps:
 <ol>
-  <li>Generate the skeleton code</li>
-  <li>Add business logic</li>
-  <li>Create a *.aar archive (Axis Archive) for the Web service</li>
-  <li>Deploy the Web service</li>
+  <li>Generate the skeleton code.</li>
+  <li>Add business logic.</li>
+  <li>Create a *.aar archive (Axis Archive) for the Web service.</li>
+  <li>Deploy the Web service.</li>
 </ol>
 <a name="Step1_:Generate_skeleton"></a>
 
@@ -95,19 +94,19 @@
 <p>To generate the skeleton and required classes, you can use the WSDL2Java
 tool provided in Axis2. This tool is located in the bin directory of the
 distribution and can be executed using the provided scripts (.bat or .sh).
-The tool's parameter list can be found from <a
+The tool's parameter list can be found in the <a
 href="reference.html#wsdl2code">Axis2 Reference Document</a>.</p>
 
-<p>The parameters for wsdl2java tool in our example are as follows. Please
-note that we use xmlbeans as the data binding framework and generated code
-will be sent to samples directory. Other data binding tools you could use are
-adb (Axis data binding) and jaxme (<a
+<p>The parameters for the wsdl2java tool in our example are as follows.
+Please note that we use xmlbeans as the data binding framework, and generated
+code will be sent to the samples directory. Other data binding tools you can
+use are adb (Axis data binding) and jaxme (<a
 href="http://ws.apache.org/jaxme/">JaxMe data binding</a>)</p>
 <pre>wsdl2java.sh -uri ../samples/wsdl/Axis2SampleDocLit.wsdl -ss -sd -d xmlbeans 
 -o ../samples -p org.apache.axis2.userguide</pre>
 
 <p>This will generate the required classes in the <b>"sample/src"</b>
-directory, and the schema classes in
+directory, and the schema classes in the
 <strong>"samples/resources/schemaorg_apache_xmlbeans"</strong>
 directory<strong></strong>. Note that these are not source files and should
 be available in the class path in order to compile the generated classes.</p>
@@ -122,7 +121,7 @@
 fill the <code>echoString(..)</code> method in the skeleton as shown below.
 Our sample WSDL-Axis2SampleDocLit.wsdl in <strong>"samples/wsdl"</strong>
 directory has three operations: echoString, echoStringArray, echoStruct. To
-see how others will look when they are filled up see <a
+see how the others will look when they are filled up, see <a
 href="src/Axis2SampleDocLitServiceCode.html">Code Listing For
 Axis2SampleDocLitService Service</a></p>
 <source><pre>public org.apache.axis2.userguide.xsd.EchoStringReturnDocument 
@@ -139,28 +138,28 @@
 
 <p>An Axis2 service must be bundled as a service archive. The next step is to
 package the classes in an .aar (axis2 archive) and deploy it in Axis2. There
-is an ant file generated with the code, this will generate the Axis2 service
-archive for you. However if you do not want to use ant, you could create
-archive with following steps :</p>
+is an ant file generated with the code; it will generate the Axis2 service
+archive for you. However, if you do not want to use ant, you can create an
+archive with the following steps :</p>
 <ol>
-  <li>Compile the generated code</li>
+  <li>Compile the generated code.</li>
   <li>Copy <strong>"resources/schemaorg_apache_xmlbeans</strong>" xmlbeans
-    classes to your class folder</li>
-  <li>Among the generated files, there will be services.xml file, which is
+    classes to your class folder.</li>
+  <li>Among the generated files, there will be a services.xml file, which is
     the deployment descriptor for Axis2 service.[<a
     href="reference.html#servicedd">learn more about it</a>]. Copy the
     resources/service.xml to META-INF/services.xml</li>
 
-  <p>(To write your own service.xml file see sub section in <a
+  <p>(To write your own service.xml file, see the sub section in <a
   href="xmlbased-server.html#Step2_:Write_the_services_xml_file">Writing Web
-  Services Using Axis2's Primary APIs</a> section.)</p>
-  <li>Create the archive using content of the class folder. Change directory
-    to class folder and run <code>jar -cf &lt;service-name&gt;.aar</code> to
-    create the archive</li>
+  Services Using Axis2's Primary APIs</a> )</p>
+  <li>Create the archive using content of the class folder. Change the
+    directory to the class folder and run <code>jar -cf
+    &lt;service-name&gt;.aar</code> to create the archive.</li>
 </ol>
 
-<p>Once the archive is created, the content of the jar should look like
-this</p>
+<p>Once the archive is created, the content of the JAR should look like
+this.</p>
 
 <p><img src="images/userguide/DirectoryStructure.jpg" align="bottom"
 border="0"></p>
@@ -168,16 +167,16 @@
 
 <h3>Step 4: Deploy Web Service</h3>
 
-<p>The service can be deployed by simply dropping the ".aar" file into
+<p>The service can be deployed by simply dropping the ".aar" file into the
 "services" directory in "/webapps/axis2/WEB-INF" of your servlet container.
 We recommend using <a href="http://tomcat.apache.org/">Apache Tomcat</a> as
-servlet container. <strong>Please Note that the services directory is
+the servlet container. <strong>Please Note that the services directory is
 available only after axis2.war is exploded by Tomcat. However, the easiest
 way to do it is to start Tomcat after axis2.war is copied to the webapps
-directory</strong> (if you have not already started). Check the link
-"Services" on the <a href="http://localhost:8080/axis2/" target="_blank">Home
-Page of Axis2 Web Application</a> (http://localhost:8080/axis2) and see
-whether the Axis2SampleDocLitService is shown under the deployed services.</p>
+directory</strong> (if you have not already started). Check the "Services"
+link on the <a href="http://localhost:8080/axis2/" target="_blank">Home page
+of Axis2 Web Application</a> (http://localhost:8080/axis2) and see whether
+the Axis2SampleDocLitService is displayed under the deployed services.</p>
 
 <p>We recommend using the exploded configuration to deploy Axis2 WAR in
 <strong>WebLogic and WebSphere</strong> application servers to support the
@@ -186,9 +185,9 @@
 Configuration Guide</a> for details.</p>
 
 <p>Note: Axis2 provides an easy way to deploy Web Services using the "Upload
-Service" tool on Axis2 Web Application's Administration module. (See the <a
-href="webadminguide.html" target="_blank">Web Administration Guide</a> for
-more information on this)</p>
+Service" tool in the Axis2 Web Application's Administration module. (See the
+<a href="webadminguide.html" target="_blank">Web Administration Guide</a> for
+more information)</p>
 <a name="client"></a>
 
 <h2>Writing a Web Service Client</h2>
@@ -196,27 +195,27 @@
 <p>Axis2 also provides a more complex, yet powerful XML based client API
 which is intended for advanced users. Read <a href="dii.html">Writing Web
 Service Clients Using Axis2's Primary APIs</a> to learn more about it.
-However, if you are a new user we recommend using the <strong>code
+However, if you are a new user, we recommend using the <strong>code
 generation</strong> approach presented below.</p>
 
 <h3>Generate Stubs</h3>
 
 <p>Let's see how we could generate java code (Stub) to handle the client side
-Web Service invocation for you. That can be done by running the WSDL2Java
-tool using following arguments</p>
+Web Service invocation for you. This can be done by running the WSDL2Java
+tool using the following arguments</p>
 <source><pre>wsdl2java.sh -uri ../samples/wsdl/Axis2SampleDocLit.wsdl -d xmlbeans 
      -o ../samples/src -p org.apache.axis2.userguide</pre>
 </source>
 <p>This will generate client side stubs and xmlbeans types for your types.
 The Stub class that you need to use will be of the form
-<strong>&lt;service-name&gt;Stub</strong>. For our example it will be called
+<strong>&lt;service-name&gt;Stub</strong>. In our example, it will be called
 "Axis2SampleDocLitServiceStub.java"</p>
 
-<p>Axis2 clients can invoke Web Services both in blocking and non-blocking
+<p>Axis2 clients can invoke Web Services both in a blocking and non-blocking
 manner. In a blocking invocation, the client waits till the service performs
-its task without proceeding to the next step. Normally the client waits till
+its task without proceeding to the next step. Normally, the client waits till
 the response to the particular request arrives. In a non-blocking invocation,
-the client proceeds to the next step immediately and any responses (if any)
+the client proceeds to the next step immediately, and the responses (if any)
 are handled using a Callback mechanism. Please note that some explanations
 use the terms Synchronous and Asynchronous to describe the similar invocation
 strategies.</p>
@@ -246,8 +245,8 @@
 </source>
 <p>First argument of <code>Axis2SampleDocLitPortTypeStub</code> should be the
 Axis2 repository for the client. Here we use null to make the stub use
-default configurations. However you could make Axis2 use your own repository
-by providing it here. You could find more information about this from <a
+default configurations. However, you can make Axis2 use your own repository
+by providing it here. You can find more information about this from the <a
 href="#config">Axis2 Configuration section</a>. You can find code to invoke
 other operations from <a href="src/Axis2SampleDocLitServiceCode.html">Code
 Listing For Axis2SampleDocLitService Service</a></p>
@@ -255,9 +254,9 @@
 <h3>Do a Non-Blocking Invocation</h3>
 
 <p>The stubs also include a method that allows you to do a non-blocking
-innovation, for each method in the Service there will be a method
+innovation. For each method in the Service, there will be a method
 <strong>start&lt;method-name&gt;</strong>. These methods accept a callback
-object which would be called when the response is received. Sample code that
+object, which would be called when the response is received. Sample code that
 does an asynchronous interaction is given below.</p>
 <source><pre>try {
          org.apache.axis2.userguide.Axis2SampleDocLitServiceStub stub
@@ -280,12 +279,12 @@
        }</pre>
 </source>
 <p>Even though the above code does a non-blocking invocation at the client
-API, the transport connection may still operate in blocking fashion. For
-example, a single HTTP connection can be used to make the Web Service request
-and to get the response where a blocking invocation happens at the transport
-level. To perform a "true" Non-Blocking invocation in which two separate
-transport connections are used for the request and the response please add
-the following code segment after creating the stub. These will force Axis2 to
+API, the transport connection may still operate in a blocking fashion. For
+example, a single HTTP connection can be used to create a Web Service request
+and to get the response when a blocking invocation happens at the transport
+level. To perform a "true" non-blocking invocation in which two separate
+transport connections are used for the request and the response, please add
+the following code segment after creating the stub. It will force Axis2 to
 use two transport connections for the request and the response while the
 client uses a Callback to process the response.</p>
 <source><pre>stub._getServiceClient().engageModule(new QName("addressing"));
@@ -293,13 +292,13 @@
 </source>
 <p>Once those options are set, Axis2 client does the following:</p>
 <ol>
-  <li>Start a new Transport Listener(Server) at the client side</li>
-  <li>Set the address of the Transport Listener, as the ReplyTo WS-Addressing
-    Header of the request Message</li>
-  <li>According to the WS-Addressing rules, Server will process the request
-    message and send the response back to the ReplyTo address</li>
+  <li>Starts a new Transport Listener(Server) at the client side.</li>
+  <li>Sets the address of the Transport Listener, as the ReplyTo
+    WS-Addressing Header of the request message</li>
+  <li>According to the WS-Addressing rules, the Server will process the
+    request message and send the response back to the ReplyTo address.</li>
   <li>Client accepts the response, processes it and invokes the callback with
-    the response parameters</li>
+    the response parameters.</li>
 </ol>
 
 <h3>Using Your Own Repository</h3>
@@ -324,38 +323,38 @@
 
 <h3>Axis2 Repository</h3>
 
-<p>Axis2 configuration is based on a repository and standard archives
-formats. A repository is a directory in the file system and it should have
-the following:</p>
+<p>Axis2 configuration is based on a repository and standard archive format.
+A repository is a directory in the file system, and it should have the
+following:</p>
 <ol>
   <li><strong>axis2.xml</strong>, the Axis2 global deployment descriptor in
     conf/axis2.xml file</li>
-  <li><strong>services</strong> directory, which will have service
-  archives</li>
-  <li>optional <strong>modules</strong> directory, which will have module
+  <li><strong>services</strong> directory, which will have the service
     archives</li>
+  <li><strong>modules</strong> directory (optional), which will have the
+    module archives</li>
 </ol>
 
 <p>Both services and modules will be identified and deployed once their
-archives are copied to the corresponding directories. At the server side
-users should specify the repository folder at the time of starting a Axis2
+archives are copied to the corresponding directories. At the server side,
+users should specify the repository folder at the time of starting the Axis2
 Server (e.g. HTTP or TCP). In Tomcat, <code>webapps/axis2/WEB-INF</code>
-folder acts as the repository. At the client side binary distribution can
+folder acts as the repository. At the client side, binary distribution can
 itself be a repository. You can copy the conf directory which includes the
-axis2.xml file from the exploded axis2.war and edit it to change global
+axis2.xml file from the exploded axis2.war and edit it to change the global
 configurations repository.</p>
 
 <h3>Global Configurations</h3>
 
 <p>The Global configuration can be changed by editing the axis2.xml file,
-look at the <a href="axis2config.html#Global_Configuration">Axis2
-Configuration Guide</a> for more information</p>
+refer to the <a href="axis2config.html#Global_Configuration">Axis2
+Configuration Guide</a> for more information.</p>
 
-<h3>Add new Services</h3>
+<h3>Add New Services</h3>
 
-<p>New Services can be written either using WSDL based code generation as we
-did, or from the scratch as explained <a
-href="xmlbased-server.html">here</a>. Read <a
+<p>New services can be written either using WSDL based code generation as we
+did, or from scratch as explained in <a href="xmlbased-server.html">Writing
+Web Services Using Axis2's Primary APIs</a>.  Read <a
 href="xmlbased-server.html">Creating a Service from Scratch</a> for more
 information. Also refer to <a
 href="axis2config.html#Service_Configuration">Axis2 Configuration Guide</a>
@@ -364,40 +363,40 @@
 <h3 name="module_engage">Engaging Modules</h3>
 
 <p>Each module(.mar file) provides extensions to Axis2. A module can be
-deployed by copying it in to the modules directory in the repository. Then it
-becomes available and can be engaged at global, service or operation scopes.
-Once engaged it becomes active (add handlers to the execution flow) at the
+deployed by copying it to the modules directory in the repository. Then it
+becomes available and can be engaged at a global, service or operation scope.
+Once engaged, it becomes active (adds handlers to the execution flow) at the
 respective scope. Please refer to <a href="Axis2ArchitectureGuide.html">Axis2
 architecture guide</a> for detailed explanation. The following table explains
-the semantics of scope and how to engage modules in those scopes.</p>
+the semantics of scope, and how to engage modules in those scopes.</p>
 
 <table border="1">
   <tbody>
     <tr>
       <th>Scope</th>
       <th>Semantics</th>
-      <th>how to engage</th>
+      <th>How to Engage</th>
     </tr>
     <tr>
       <td>Global</td>
       <td>Add handlers in the module to all the services. Addressing Handler
         can be only engaged as global</td>
-      <td>By adding a &lt;module ref="addressing"/&gt; to Axis2 xml file or
-        calling
+      <td>By adding a &lt;module ref="addressing"/&gt; to the Axis2 xml file
+        or calling
         <pre>stub._getServiceClient().engageModule(moduleName)</pre>
         at client side</td>
     </tr>
     <tr>
       <td>Service</td>
       <td>Add handlers in the module to a specific service</td>
-      <td>By adding a &lt;module ref="addressing"/&gt; to service.xml file in
-        service archive</td>
+      <td>By adding a &lt;module ref="addressing"/&gt; to a service.xml file
+        in a service archive</td>
     </tr>
     <tr>
       <td>Operation</td>
       <td>Add handlers in the module to a specific operation</td>
-      <td>By adding a &lt;module ref="addressing"/&gt; to inside a operation
-        tag of service.xml file in service archive</td>
+      <td>By adding a &lt;module ref="addressing"/&gt; inside an operation
+        tag of a service.xml file in a service archive</td>
     </tr>
   </tbody>
 </table>
@@ -405,32 +404,32 @@
 <p>* If a handler is added to a service or an operation, it will be invoked
 for every request received by that service or operation</p>
 
-<p>Axis2 provides a number of built in Modules such as (<a
+<p>Axis2 provides a number of built in Modules (such as <a
 href="">addressing</a>,<a href="">Security</a>, <a href="">WS-Reliable
-Messaging</a> ...), and they can be engaged as shown above. Please refer to
-each module for how to use and configure them. You can also <a
+Messaging</a>), and they can be engaged as shown above. Please refer to each
+module on how to use and configure them. You can also <a
 href="modules.html">create your own modules with Axis2</a>. Also refer to <a
 href="axis2config.html#Global_Configuration">Axis2 Configuration Guide</a>
-for a reference on module.xml file.</p>
+for a reference on the module.xml file.</p>
 
 <h3>WS-Addressing Support</h3>
 
 <p>WS-Addressing support for Axis2 is implemented by the addressing module.
-To enable addressing you need to engage the addressing module in both server
-and client sides. In order to do this:</p>
+To enable addressing, you need to engage the addressing module in both server
+and client sides.</p>
 <ol>
-  <li>To <strong>enable</strong> addressing at the server side you need to
-    copy addressing.mar file to modules directory of server's axis2
-    repository. To engage the module, add a &lt;module ref="addressing"/&gt;
-    to axis2.xml. <strong>Addressing module can be engaged only at global
-    level</strong></li>
-  <li>To <strong>enable</strong> addressing at the client side you should add
-    it to the repository and provide the repository as argument to the <a
-    href="dii.html">ServiceClient</a> or <a href="#client">generated stub</a>
-    or have it in your classpath</li>
-  <li>To <strong>engage</strong> addressing module you should either add
-    &lt;module ref="addressing"/&gt; to axis2.xml file at the client side or
-    call
+  <li>To <strong>enable</strong> addressing at the server side, you need to
+    copy the addressing.mar file to the modules directory of the server's
+    axis2 repository. To engage the module, add a &lt;module
+    ref="addressing"/&gt; to axis2.xml. The <strong>Addressing module can be
+    engaged only at global level.</strong></li>
+  <li>To <strong>enable</strong> addressing at the client side, you should
+    add it to the repository and provide the repository as an argument to the
+    <a href="dii.html">ServiceClient</a> or <a href="#client">generated
+    stub</a> or have it in your classpath.</li>
+  <li>To <strong>engage</strong> the addressing module, you should either add
+    &lt;module ref="addressing"/&gt; to the axis2.xml file at the client side
+    or call
     <pre>stub._getServiceClient().engageModule(moduleName)</pre>
   </li>
 </ol>
@@ -440,11 +439,11 @@
 
 <h3>Transports</h3>
 
-<p>Axis2 is by default configured to use HTTP as the transport. However Axis2
-supports HTTP, SMTP, TCP and JMS transports. You can also write your own
-transports, and deploy them by adding new transportReceiver or
+<p>By default, Axis2 is configured to use HTTP as the transport. However,
+Axis2 supports HTTP, SMTP, TCP and JMS transports. You can also write your
+own transports, and deploy them by adding new transportReceiver or
 transportSender tags to axis2.xml. To learn how to configure and use
-different transports please refer the following documents.</p>
+different transports, please refer to the following documents.</p>
 <ol>
   <li><a href="tcp-transport.html" target="_blank">TCP Transport</a></li>
   <li><a href="mail-transport.html" target="_blank">Mail Transport</a></li>
@@ -461,23 +460,23 @@
 
 <h3>Security</h3>
 
-<p>Axis2 provides Security support using the <a
+<p>Axis2 provides Security support using <a
 href="http://ws.apache.org/axis2/modules/rampart/1_0/security-module.html">Apache
 Rampart</a>. Please refer to <a
 href="../modules/wss4j/1_0/security-module.html" target="_blank">Securing
-SOAP Messages with Apache Rampart</a> for more information</p>
+SOAP Messages with Apache Rampart</a> for more information.</p>
 
 <h3>REST Web Service</h3>
 
 <p>Please refer to <a href="rest-ws.html" target="_blank">RESTful Web
-Services</a> for more information</p>
+Services</a> for more information.</p>
 
 <h3>Pluggable Data Binding</h3>
 
 <p>Axis2 ships with Axis Data Binding(ADB) as the default data binding
-framework, however the data binding frameworks are pluggable to Axis2, and
-you could use other data binding frameworks with Axis2. Please refer the
-following documents for more information.</p>
+framework. However, data binding frameworks are pluggable to Axis2, and
+therefore you can use other data binding frameworks with Axis2. Please refer
+to the following documents for more information.</p>
 
 <h4>Axis2 Data Binding(ADB)</h4>
 <ol>
Index: app_server.html
===================================================================
--- app_server.html	(revision 501722)
+++ app_server.html	(working copy)
@@ -1,68 +1,70 @@
-<?xml version="1.0" encoding="iso-8859-1"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
-       "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
-  <title>Application Server Specific Configuration Guide</title>
-  <meta content="amaya 9.2.1, see http://www.w3.org/Amaya/" />
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
-</head>
-
-<body>
-<h1>Application Server Specific Configuration Guide</h1>
-
-<p>This document will give you that extra configuration information required
-for your Application Server to run Apache Axis2 to its fullest potential.</p>
-
-<p>Feel free to send your feedback or any learned information to our <a
-href="http://ws.apache.org/axis2/mail-lists.html">mailing lists</a>.</p>
-<a name="weblogic_websphere"></a>
-<h3>WebLogic/ WebSphere</h3>
-
-<p>We recommend using the exploded configuration to deploy Axis2 WAR in
-WebLogic and WebSphere application servers to support the hotupdate/
-hotdeployment features in Axis2. However if you do want to deploy custom
-wars say in a clustering environment, You need to add two additional 
-files into the WEB-INF named "services.list" and "modules.list" under 
-modules and services directory respectively.
-</p>
-
-<ul>
-<li><b>WEB-INF/services/services.list</b> : should list all the services (aar files) that you want to expose.</li>
-<li><b>WEB-INF/modules/modules.list</b> : should list all the modules (mar files) that you want to use.</li>
-</ul>
-NOTE: In both cases, please list one entry per line
-
-<p>WebLogic ships with jars which conflict with jars present in Axis2. So,
-kindly use &lt;prefer-web-inf-classes&gt; to ensure that jars packaged in
-Axis2 WAR are picked up from WEB-INF/lib. You can do this by setting
-&lt;prefer-web-inf-classes&gt; element in WEB-INF/weblogic.xml to true. An
-example of weblogic.xml is shown below:</p>
-<pre>&lt;weblogic-web-app&gt;
- &lt;container-descriptor&gt;
-    &lt;prefer-web-inf-classes&gt;true&lt;/prefer-web-inf-classes&gt;
-  &lt;/container-descriptor&gt;
-&lt;/weblogic-web-app&gt;</pre>
-
-<p>If set to true, the &lt;prefer-web-inf-classes&gt; element will force
-WebLogic's classloader to load classes located in the WEB-INF directory of a
-Web application in preference to application or system classes. This is a
-recommended approach since it only impacts a single Web module. </p>
-
-<p>Please look at the following documents in WebLogic/ WebSphere for more
-information:</p>
-<ul>
-  <li><a
-    href="http://e-docs.bea.com/wls/docs81/programming/classloading.html">WebLogic
-    ServerApplication Classloading</a>- For more information on how
-    WebLogic's class loader works</li>
-  <li><a
-    href="http://e-docs.bea.com/wls/docs81/webapp/deployment.html">Redeploying
-    a Web Application in Exploded Directory Format</a></li>
-  <li><a
-    href="http://publib.boulder.ibm.com/infocenter/wsiihelp/v8r3/index.jsp?topic=/com.ibm.websphere.ii.product.ce.doc/configuring/iiyviigdepwebexpl.htm">Deploying
-    the Web application in exploded form</a></li>
-</ul>
-</body>
-</html>
+<?xml version="1.0" encoding="iso-8859-1"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
+       "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
+  <title>Application Server Specific Configuration Guide</title>
+  <meta content="amaya 9.2.1, see http://www.w3.org/Amaya/" />
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all" />
+</head>
+
+<body>
+<h1>Application Server Specific Configuration Guide</h1>
+
+<p>This document provides configuration information required for your
+Application Server to run Apache Axis2 to its fullest potential.</p>
+
+<p>Feel free to send your feedback or any learned information to our <a
+href="http://ws.apache.org/axis2/mail-lists.html">mailing lists</a>.</p>
+<a></a>
+
+<h3>WebLogic/ WebSphere</h3>
+
+<p>We recommend using the exploded configuration to deploy Axis2 WAR in
+WebLogic and WebSphere application servers to support the hotupdate/
+hotdeployment features in Axis2. However, if you do want to deploy custom
+WARs, say in a clustering environment, you need to add two additional files
+into the WEB-INF named "services.list" and "modules.list" under the modules
+and services directory respectively.</p>
+<ul>
+  <li><b>WEB-INF/services/services.list</b> : should list all the services
+    (aar files) that you want to expose.</li>
+  <li><b>WEB-INF/modules/modules.list</b> : should list all the modules (mar
+    files) that you want to use.</li>
+</ul>
+NOTE: In both cases, please list one entry per line.
+
+<p>WebLogic ships with JARs that conflict with JARs present in Axis2.
+Therefore use &lt;prefer-web-inf-classes&gt; to ensure that JARs packaged in
+Axis2 WAR are picked up from WEB-INF/lib. You can do this by setting the
+&lt;prefer-web-inf-classes&gt; element in WEB-INF/weblogic.xml to true. An
+example of weblogic.xml is shown below:</p>
+<pre>&lt;weblogic-web-app&gt;
+ &lt;container-descriptor&gt;
+    &lt;prefer-web-inf-classes&gt;true&lt;/prefer-web-inf-classes&gt;
+  &lt;/container-descriptor&gt;
+&lt;/weblogic-web-app&gt;</pre>
+
+<p>If set to true, the &lt;prefer-web-inf-classes&gt; element will force
+WebLogic's classloader to load classes located in the WEB-INF directory of a
+Web application in preference to application or system classes. This is a
+recommended approach since it only impacts a single Web module.</p>
+
+<p>Please refer to the following documents in WebLogic/ WebSphere for more
+information:</p>
+<ul>
+  <li><a
+    href="http://e-docs.bea.com/wls/docs81/programming/classloading.html">WebLogic
+    ServerApplication Classloading</a>- For more information on how
+    WebLogic's class loader works</li>
+  <li><a
+    href="http://e-docs.bea.com/wls/docs81/webapp/deployment.html">Redeploying
+    a Web Application in Exploded Directory Format</a></li>
+  <li><a
+    href="http://publib.boulder.ibm.com/infocenter/wsiihelp/v8r3/index.jsp?topic=/com.ibm.websphere.ii.product.ce.doc/configuring/iiyviigdepwebexpl.htm">Deploying
+    the Web application in exploded form</a></li>
+</ul>
+</body>
+</html>
Index: Axis2-rpc-support.html
===================================================================
--- Axis2-rpc-support.html	(revision 501722)
+++ Axis2-rpc-support.html	(working copy)
@@ -5,30 +5,30 @@
 <head>
   <meta http-equiv="content-type" content="" />
   <title>Axis2 RPC Support</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all" />
 </head>
 
 <body>
 <h1>Axis2 RPC Support</h1>
 
-<p>This documents talks about the Axis2's Remote Procedure Calls support in a
-set of easy to understand implementation steps.</p>
+<p>This document describes Axis2's Remote Procedure Call support in a set of
+easy to understand implementation steps.</p>
 
 <h2>Introduction</h2>
 
-<p>Axis2 Remote Procedure Calls (RPC) support may seem somewhat tricky and
-confusing at first glance. However, Axis2 RPC strategy is based on a well
-defined set of rules and once the details are in place, it becomes clear as
-day. This document aims to drill down to the details of this strategy and
-fills up most of the fairly unknown bits and pieces. Note that Axis2
-currently does not support the rpc/encoded style fully. It's main support is
+<p>Axis2 Remote Procedure Call (RPC) support may seem somewhat tricky and
+confusing at first glance. However, Axis2 RPC strategy is based on a set of
+well defined rules. This document aims to drill down to the details of the
+strategy and resolve most of the unknown bits and pieces. Note that Axis2
+currently does not support the rpc/encoded style fully. Its main support is
 for the rpc/lit style.</p>
 
 <p>We will discuss the Axis2 RPC strategy in the following steps</p>
 
 <h2>Step 1 - Converting RPC Style WSDL's into Doc/Lit Style WSDL</h2>
 
-<p>This is probably the most confusing part of the rpc strategy. Since the
+<p>This is probably the most confusing part of the RPC strategy. Since the
 Axis2 code generator is based on pure doc/lit style, the first step of the
 code generation process is to generate a wrapper schema. This wrapper
 generation can be easily explained by using an example.</p>
@@ -66,8 +66,8 @@
 need wrapping in the following order.</p>
 <ol>
   <li>The first element needs to have the operation name as the local name
-    and the operation namespace (which happens to be the namespace of the
-    porttype - in this case the targetnamespace of the WSDL)</li>
+    and the operation namespace. (This happens to be the namespace of the
+    porttype - in this case the targetnamespace of the WSDL.)</li>
   <li>The children of this element are non namespace qualified elements with
     the part names as local names (referred to as <strong>part
     element</strong>)</li>
@@ -78,19 +78,19 @@
     binding is rpc is invalid.</li>
 </ol>
 
-<p>For example the input wire message for the echo operation mentioned in the
-above WSDL fragment would look like this:</p>
+<p>For example, the input wire message for the echo operation mentioned in
+the above WSDL fragment would look like this:</p>
 <pre> &lt;op:<strong>echo</strong> xmlns:op="porttype namespace"&gt;
   &lt;<strong>part1</strong>&gt;Hello World&lt;/part1&gt;
   &lt;<strong>part2</strong>&gt;123&lt;/part2&gt;
  &lt;/op:echo&gt;</pre>
 
 <p>Note that the element name is in bold. The first one is the operation
-name, the second and third are part names. It can be seen that it is quite
-possible to generate a schema, representing this structure and then treat the
-whole service as pure doc/lit service. In this case, following is the piece
-of schema generated to make this rpc to doc conversion. Note that in this
-case the wire message stays unchanged. It is only a different WSDL authoring
+name, the second and third are part names. It can be seen that it is possible
+to generate a schema representing this structure, and then treat the whole
+service as a pure doc/lit service. In this case, the following piece of
+schema is generated to make the rpc to doc conversion. Note that in this case
+the wire message stays unchanged. It is only a different WSDL authoring
 style</p>
 <pre> &lt;xs:element name="echo"&gt;
     &lt;xs:complexType&gt;
@@ -109,30 +109,29 @@
 
 <h2>Step 2 - Unwrapping the Schema</h2>
 
-<p>If the schema needs to be unwrapped then that brings up a few issues
+<p>If the schema needs to be unwrapped, it brings up a few issues. This is
 mainly because the only thing that the emitters rely on when generating code
-is a mapping table!</p>
+is a mapping table.</p>
 <ol>
-  <li>When the schema is unwrapped where would that unwrapping information
-    stay?
-    <p>Good question - It needs to be a store that keeps the information
-    seperated. Hmm.. What can we use here ? Why of course, the Axis *
-    hierarchy! It has nicely separated information holders and a parameter
-    store that can hold a information bean.</p>
+  <li>When the schema is unwrapped, where will the unwrapping information
+    remain?
+    <p>There has to be a store to keep the information seperated. The Axis *
+    hierarchy ca be used for this. It has nicely separated information
+    holders and a parameter store that can hold an information bean.</p>
   </li>
   <li>How do we maintain uniqueness among message part names?
-    <p>Another Good question - part names are only unique across a message
-    and not globally. But due to the fact that we have a global mapping table
-    we need a way to differentiate between parts of different messages. The
-    technique used here is to generate a QName that has the operation name as
-    a namespace and a suffix (like _input) appended to the local name</p>
+    <p>Part names are only unique across a message and not globally. However,
+    due to the fact that we have a global mapping table, we need a way to
+    differentiate between parts of different messages. The technique used
+    here is to generate a QName that has the operation name as a namespace
+    and a suffix (like _input) appended to the local name.</p>
   </li>
 </ol>
 
-<p>Given these solutions the first step in unwrapping is to walk the schema
+<p>Given these solutions, the first step in unwrapping is to walk the schema
 and figure out the unwrappable items. The key player of the unwrapping
-process is the unwrapping extension. What it does is to walk a given schema
-and figure out the unwrappable parts if there are any.</p>
+process is the unwrapping extension. It walks a given schema and figure out
+the unwrappable parts if there are any.</p>
 
 <p>The current unwrapper looks for the following patterns and fails if it is
 not found!</p>
@@ -145,12 +144,12 @@
   &lt; /element &gt;
  </pre>
 
-<p>Once this pattern is detected the unwrapper details will be added to the
-relevant AxisMessage component</p>
+<p>Once this pattern is detected, the unwrapper details will be added to the
+relevant AxisMessage component.</p>
 
-<h2>Step 3 - Populate type Information</h2>
+<h2>Step 3 - Populate Type Information</h2>
 
-<p>The next step is to populate the type information for the parts. This has
+<p>The next step is to populate the Type information for the parts. This has
 to be explicitly done by the data binding extensions, and currently the ADB
 and XMLbeans extensions populate the relevant AxisMessage by looking up their
 generated type systems. This type information goes into the AxisMessage
@@ -215,7 +214,7 @@
 
 <p>The next step is generating the actual code. The
 AxisServiceBasedMultiLanguageEmitter has a method that generates the XML
-model for the input parameters and that method includes the relevant part
+model for the input parameters, and that method includes the relevant part
 parameters inside the relavant top level input parameter element.</p>
 
 <p>The relevant part of the XML model looks like this. Note that this
@@ -229,18 +228,18 @@
   &lt;/param&gt;
 &lt;/input&gt;</pre>
 
-<p>The next part is upto the template to handle. Basically, the template
-looks after the generation of multiple parameters into the method signatures
-and then the generating of the relevant serialization and deserialization
-code for the parameters.</p>
+<p>The next part is handled by the template. Basically, the template looks
+after the generation of multiple parameters into the method signatures, and
+then the generating of the relevant serialization and deserialization code
+for the parameters.</p>
 
 <h2>Bringing the Parameters Together and Exploding Them</h2>
 
 <p>This is a somewhat controversial area. The current Axis2 code generator
-does the wrapping and unwrapping at the object level and not the XML level. In
-short the exploded parameters are only a convenience and the explosion does
-not run down to the XML level. The following example of generated source code
-makes this clear:</p>
+does the wrapping and unwrapping at the object level and not the XML level.
+In short, the exploded parameters are only a convenience and the explosion
+does not run down to the XML level. The following example of generated source
+code makes this clear:</p>
 <pre> private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
         org.apache.axiom.soap.SOAPFactory factory, java.lang.String param1,
         int param2, boolean optimizeContent) {
@@ -260,7 +259,7 @@
 
 <h2>Conclusion</h2>
 
-<p>Axis2 RPC support is a sort of misty area, but it is based on a well
+<p>Axis2 RPC support is sort of a misty area, but it is based on a well
 defined set of rules which makes it not <em>that</em> misty after all!</p>
 <hr />
 </body>
