Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(working copy)
@@ -18,19 +18,15 @@
 
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.TreeSet;
 
 import javax.jws.WebService;
 import javax.wsdl.Binding;
 import javax.wsdl.Definition;
 import javax.wsdl.Port;
-import javax.wsdl.PortType;
-import javax.wsdl.WSDLException;
 import javax.wsdl.extensions.ExtensibilityElement;
 import javax.wsdl.extensions.http.HTTPBinding;
 import javax.wsdl.extensions.soap.SOAPAddress;
@@ -1230,40 +1226,7 @@
     public String getTargetNamespace() {
         return getAnnoWebServiceTargetNamespace();
     }
-    /**
-     * Returns the packages that are needed to marshal/unmarshal the 
-     * data objects.  Example: this set of packages is used to construct a 
-     * JAXBContext.
-     * @return Set<Package>
-     */
-    public TreeSet<String> getPackages() {
-        // @REVIEW Currently the package set is stored on the
-        // EndpointDescription.  We may consider moving this to 
-        // ServiceDescription. 
-        
-        // The set of packages is calcuated once and saved
-        if (packages == null) {
-            synchronized(this) {
-                // @TODO There are two ways to get the packages.
-                // Schema Walk (prefered) and Annotation Walk.
-                // The Schema walk requires an existing or generated schema.
-                // 
-                // There are some limitations in the current schema walk
-                // And there are problems in the annotation walk.
-                // So for now we will do both.
-                boolean doSchemaWalk = true;
-                boolean doAnnotationWalk = true;
-                packages = new TreeSet<String>();
-                if (doSchemaWalk) {
-                    packages.addAll(PackageSetBuilder.getPackagesFromSchema(this.getServiceDescription()));
-                }
-                if (doAnnotationWalk) {
-                    packages.addAll(PackageSetBuilder.getPackagesFromAnnotations(this));
-                }
-            }
-        }
-        return packages;
-    }
+    
     public PortInfo getPortInfo() {
         if (portInfo == null) {
             portInfo = new PortInfoImpl(getServiceQName(), getPortQName(), getBindingType());
@@ -1522,9 +1485,6 @@
         string.append("Handler List: " + getHandlerList());
         //
         string.append(newline);
-        string.append("Packages: " + getPackages());
-        //
-        string.append(newline);
         string.append("AxisService: " + getAxisService());
         //
         string.append(newline);
Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/PackageSetBuilder.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/PackageSetBuilder.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/PackageSetBuilder.java	(working copy)
@@ -1,418 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws.description.impl;
-
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.Set;
-import java.util.TreeSet;
-
-import javax.wsdl.Definition;
-import javax.wsdl.WSDLException;
-import javax.xml.bind.JAXBElement;
-
-import org.apache.axis2.jaxws.ExceptionFactory;
-import org.apache.axis2.jaxws.description.EndpointDescription;
-import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
-import org.apache.axis2.jaxws.description.FaultDescription;
-import org.apache.axis2.jaxws.description.OperationDescription;
-import org.apache.axis2.jaxws.description.ParameterDescription;
-import org.apache.axis2.jaxws.description.ServiceDescription;
-import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
-import org.apache.axis2.jaxws.util.JavaUtils;
-import org.apache.axis2.jaxws.util.WSDL4JWrapper;
-import org.apache.axis2.jaxws.util.WSDLWrapper;
-import org.apache.axis2.jaxws.util.XMLRootElementUtil;
-import org.apache.axis2.jaxws.wsdl.SchemaReader;
-import org.apache.axis2.jaxws.wsdl.SchemaReaderException;
-import org.apache.axis2.jaxws.wsdl.impl.SchemaReaderImpl;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-/**
- * In order to marshal or unmarshal the user data, we need to know
- * the set of packages involved.  The set of packages is used to construct
- * an appropriate JAXBContext object during the marshalling/unmarshalling.
- * 
- * There are two ways to get this data.
- * 
- * Schema Walk (preferred):  Get the list of packages by walking the schemas
- * that are referenced by the wsdl (or generated wsdl).  Each schema
- * represents a different package.  The package is obtained using the
- * jaxb customization or JAXB default ns<->package rule. 
- * 
- * Annotation Walk(secondary) : Walk the list of Endpoints, Operations,
- * Parameters, etc. and build a list of packages by looking at the
- * classes involved.  
- * 
- * The Schema Walk is faster and more complete, but relies on the 
- * presence of the schema or wsdl.
- * 
- * The Annotation Walk is slower and is not complete.  For example,
- * the annotation walk may not discover the packages for derived types
- * that are defined in a different schema than the formal parameter types.
- */
-public class PackageSetBuilder {
-    
-    private static Log log = LogFactory.getLog(PackageSetBuilder.class);
-
-    /**
-     * This is a static utility class.  The constructor is intentionally private
-     */
-    private PackageSetBuilder() {}
-    
-    /**
-     * Walks the schemas of the serviceDesc's wsdl (or generated wsdl) to determine the list of 
-     * packages.
-     * This is the preferred algorithm for discovering the package set.
-     * 
-     * @param serviceDesc ServiceDescription
-     * @return Set of Packages
-     */
-    public static TreeSet<String> getPackagesFromSchema(ServiceDescription serviceDesc) {
-    	boolean annotationWalking = true;
-    	TreeSet<String> set = new TreeSet<String>();
-    	//If we are on client side we will get wsdl definition from ServiceDescription. If we are on server side we will have to 
-    	//read wsdlLocation from @WebService Annotation.
-    	ServiceDescriptionWSDL sdw = (ServiceDescriptionWSDL) serviceDesc;
-    	Definition wsdlDefinition = sdw.getWSDLDefinition(); 
-    	EndpointDescription[] endpointDescs = serviceDesc.getEndpointDescriptions();
-    	if (endpointDescs != null) {
-            for (int i=0; i< endpointDescs.length; i++) {
-            	EndpointDescriptionImpl ed = (EndpointDescriptionImpl)endpointDescs[i];
-            	if(wsdlDefinition == null){
-            		//Let see if we can get wsdl definition from endpoint @WebService annotation.
-	            	String wsdlLocation = ed.getAnnoWebServiceWSDLLocation();
-	            	wsdlDefinition = getWSDLDefinition(wsdlLocation);
-            	}
-            	//So at this point either we got wsdl definition from ServiceDescription (which means we are running this code
-            	//on client side) or we got it from the @WebService annotation (which means we are running this code on server side)
-           		if(wsdlDefinition !=null){
-           			SchemaReader sr = new SchemaReaderImpl();
-           			try{
-           				Set<String> pkgSet = sr.readPackagesFromSchema(wsdlDefinition);
-           				set.addAll(pkgSet);
-           			}catch(SchemaReaderException e){
-           				ExceptionFactory.makeWebServiceException(e);
-           			}
-           			//FIXME: For now lets read packages from Annotation too. We will remove this once we are confident that 
-           			//Schema Walk thru works.
-           			if(annotationWalking){
-           				set.addAll(getPackagesFromAnnotations(serviceDesc));
-           			}
-           		}
-           		//if on client side, there is no wsdl provided by client application. if on server side there is no WSDLLocation on @WebService. 
-           		//let read all the required package from SEI Annotation.
-           		else{
-           			set.addAll(getPackagesFromAnnotations(serviceDesc));
-           		}    
-              
-            }
-    	}
-    	return set;
-    }
-    
-    /**
-     * @param serviceDescription ServiceDescription
-     * @return Set of Packages
-     */
-    public static TreeSet<String> getPackagesFromAnnotations(ServiceDescription serviceDesc) {
-        TreeSet<String> set = new TreeSet<String>();
-        EndpointDescription[] endpointDescs = serviceDesc.getEndpointDescriptions();
-        
-        // Build a set of packages from all of the endpoints
-        if (endpointDescs != null) {
-            for (int i=0; i< endpointDescs.length; i++) {
-                set.addAll(getPackagesFromAnnotations(endpointDescs[i]));
-            }
-        }
-        return set;
-    }
-    
-    /**
-     * @param endpointDesc EndpointDescription
-     * @return Set of Packages
-     */
-    public static TreeSet<String> getPackagesFromAnnotations(EndpointDescription endpointDesc) {
-        EndpointInterfaceDescription endpointInterfaceDesc = 
-            endpointDesc.getEndpointInterfaceDescription();
-        if (endpointInterfaceDesc == null) {
-            return new TreeSet<String>(); 
-        } else {
-            return getPackagesFromAnnotations(endpointInterfaceDesc);
-        }
-    }
-    
-    /**
-     * @param endpointInterfaceDescription EndpointInterfaceDescription
-     * @return Set of Packages
-     */
-    public static TreeSet<String> getPackagesFromAnnotations(EndpointInterfaceDescription endpointInterfaceDesc) {
-        TreeSet<String> set = new TreeSet<String>();
-        OperationDescription[] opDescs = endpointInterfaceDesc.getOperations();
-        
-        // Build a set of packages from all of the opertions
-        if (opDescs != null) {
-            for (int i=0; i< opDescs.length; i++) {
-                getPackagesFromAnnotations(opDescs[i], set);
-            }
-        }
-        return set;
-    }
-    
-    /**
-     * Update the package set with the packages referenced by this OperationDesc
-     * @param opDesc OperationDescription
-     * @param set Set<Package> that is updated
-     */
-    private static void getPackagesFromAnnotations(OperationDescription opDesc, TreeSet<String> set) {
-       
-       // Walk the parameter information
-       ParameterDescription[] parameterDescs = opDesc.getParameterDescriptions();
-       if (parameterDescs != null) {
-           for (int i=0; i <parameterDescs.length; i++) {
-               getPackagesFromAnnotations(parameterDescs[i], set);
-           }
-       }
-       
-       // Walk the fault information
-       FaultDescription[] faultDescs = opDesc.getFaultDescriptions();
-       if (faultDescs != null) {
-           for (int i=0; i <faultDescs.length; i++) {
-               getPackagesFromAnnotations(faultDescs[i], set);
-           }
-       }
-       
-       // Also consider the request and response wrappers
-       String pkg = getPackageFromClassName(opDesc.getRequestWrapperClassName());
-       if(log.isDebugEnabled()){
-    	   log.debug("Package from Request Wrapper annotation = "+ pkg);
-       }
-       if (pkg != null) {
-           set.add(pkg);
-       }
-       pkg = getPackageFromClassName(opDesc.getResponseWrapperClassName());
-       if(log.isDebugEnabled()){
-    	   log.debug("Package from Response Wrapper annotation = "+ pkg);
-       }
-       if (pkg != null) {
-           set.add(pkg);
-       }
-       
-       // Finally consider the result type
-       Class cls = opDesc.getResultActualType();
-       if (cls != null && cls != void.class && cls != Void.class) {
-           Package returnTypePkg = cls.getPackage();
-           if(log.isDebugEnabled()){
-        	   log.debug("Package from Return Type = "+ pkg);
-           }
-           if (returnTypePkg != null) {
-           	   pkg = returnTypePkg.getName();
-               set.add(pkg);
-           }
-       }
-    }
-    
-    /**
-     * Update the package set with the packages referenced by this ParameterDescription
-     * @param paramDesc ParameterDesc
-     * @param set Set<Package> that is updated
-     */
-    private static void getPackagesFromAnnotations(ParameterDescription paramDesc, TreeSet<String> set) {
-       
-       // Get the type that defines the actual data.  (this is never a holder )
-       Class paramClass = paramDesc.getParameterActualType();
-       
-       if (paramClass != null) {
-           setTypeAndElementPackages(paramClass, paramDesc.getTargetNamespace(), paramDesc.getPartName(), set);
-       }
-       
-    }
-    
-    /**
-     * Update the package set with the packages referenced by this FaultDescription
-     * @param faultDesc FaultDescription
-     * @param set Set<Package> that is updated
-     */
-    private static void getPackagesFromAnnotations(FaultDescription faultDesc, TreeSet<String> set) {
-      
-      Class faultBean = loadClass(faultDesc.getFaultBean());  
-      if (faultBean != null) {
-          setTypeAndElementPackages(faultBean, faultDesc.getTargetNamespace(), faultDesc.getName(), set);
-      }
-    }
-    
-    /**
-     * For each data element, we need the package for both the element and its type.
-     * @param cls Class representing element, type or both
-     * @param namespace of the element
-     * @param localPart of the element
-     * @param set with both type and element packages set
-     */
-    private static void setTypeAndElementPackages(Class cls, String namespace, String localPart, TreeSet<String> set) {
-        
-        // Get the element and type classes
-        Class eClass = getElement(cls);
-        Class tClass = getType(cls);
-        
-        // Set the package for the type
-        if (tClass != null) {
-        	Package typePkg = tClass.getPackage();
-        	//For primitive types there is no package
-        	String pkg = (typePkg!=null) ? typePkg.getName() : null;
-        	
-            if (pkg != null) {
-                set.add(pkg);
-            }
-        }
-        
-        // Set the package for the element
-        if (tClass != eClass) {
-            if (eClass == null) {
-                // A null or empty namespace indicates that the element is
-                // unqualified.  This can occur if the parameter is represented as a child element 
-                // in doc/lit wrapped.  The package is determined from the wrapper element in such casses.
-                if (namespace != null && namespace.length() > 0) {
-                    // Use default namespace to package algorithm
-                    String pkg = makePackage(namespace);
-                    if (pkg != null) {
-                        set.add(pkg);
-                    }
-                }
-            } else {
-            	Package elementPkg = eClass.getPackage();
-                String pkg = (elementPkg!=null) ? elementPkg.getName() : null;
-                if (pkg != null) {
-                    set.add(pkg);
-                }
-            }
-        }
-    }
-    
-    /**
-     * If cls represents an xml element then cls is returned.
-     * Otherwise null is returned
-     * @param cls Class
-     * @return Class or null
-     */
-    private static Class getElement(Class cls) {
-        if (!XMLRootElementUtil.isElementEnabled(cls)) {
-            return null;
-        } 
-        return cls;
-    }
-    
-    private final static Class[] noClass = new Class[] {};
-    /** Returns the class that defines the type.
-     * @param cls
-     * @return
-     */
-    private static Class getType(Class cls) {
-        if (JAXBElement.class.isAssignableFrom(cls)) {
-            try {
-                Method m = cls.getMethod("getValue", noClass);
-                return m.getReturnType();
-            } catch (Exception e) {
-                // We should never get here
-                if (log.isDebugEnabled()) {
-                    log.debug("Cannot find JAXBElement.getValue method.");
-                }
-                return null;
-            }
-        } else {
-            return cls;
-        }
-    }
-    
-    /**
-     * Default Namespace to Package algorithm
-     * @param ns
-     * @return
-     */
-    private static String makePackage(String ns) {
-        String pkgName = JavaUtils.getPackageFromNamespace(ns);
-        return pkgName;
-    }
-    
-    /**
-     * Return the package associated with the class name.  The className may 
-     * not be specified (in which case a null Package is returned).
-     * if class has unnamed package return ""
-     * @param className String (may be null or empty)
-     * @return Package or null if problems occur
-     */
-    private static String getPackageFromClassName(String className) {
-        Class clz = loadClass(className);
-        String pkg = (clz == null) ? null :(clz.getPackage() == null) ? "" : clz.getPackage().getName();
-        return pkg;
-    }
-    
-    /**
-     * Loads the class 
-     * @param className
-     * @return Class (or null if the class cannot be loaded)
-     */
-    private static Class loadClass(String className) {
-        // Don't make this public, its a security exposure
-        if (className == null || className.length() == 0) {
-            return null;
-        }
-        try {
-            
-            return DescriptionUtils.forName(className, true, 
-                    DescriptionUtils.getContextClassLoader());
-	        //Catch Throwable as ClassLoader can throw an NoClassDefFoundError that
-	        //does not extend Exception, so lets catch everything that extends Throwable
-            //rather than just Exception.
-        } catch (Throwable e) {
-            // TODO Should the exception be swallowed ?
-            if (log.isDebugEnabled()) {
-                log.debug("PackageSetBuilder cannot load the following class:" + className);
-            }
-        }
-        return null;
-    }
-    
-   private static Definition getWSDLDefinition(String wsdlLocation){
-	   Definition wsdlDefinition = null;
-	   if(wsdlLocation !=null && wsdlLocation.trim().length()>0){
-		   try{
-	  	       	String baseDir = new File(".").getCanonicalPath();
-	  	       	wsdlLocation = new File(baseDir +File.separator+ wsdlLocation).getAbsolutePath();
-	  	       	File file = new File(wsdlLocation);
-	  	       	URL url = file.toURL();
-	  	       	if(log.isDebugEnabled()){
-	  	       		log.debug("Reading WSDL from URL:" +url.toString());
-	  	       	}
-	          	WSDLWrapper wsdlWrapper = new WSDL4JWrapper(url);
-	         	wsdlDefinition = wsdlWrapper.getDefinition();
-	          	
-		   }catch(MalformedURLException e){
-	   	   		ExceptionFactory.makeWebServiceException(e);
-		   }catch(IOException e){
-	    	  ExceptionFactory.makeWebServiceException(e);
-		   }catch(WSDLException e){
-	    	  ExceptionFactory.makeWebServiceException(e);
-		   }
-	  }
-	  	  
-      return wsdlDefinition;
-   }
-}
Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(working copy)
@@ -108,14 +108,5 @@
     public abstract List<String> getHandlerList();
     public abstract QName getPortQName();
     public abstract QName getServiceQName();
-    public abstract Service.Mode getServiceMode();
-
-    /**
-     * Returns the packages that are needed to marshal/unmarshal the 
-     * data objects.  Example: This set of packages is used to construct a 
-     * JAXBContext.
-     * @return Set<Package>
-     */
-    public TreeSet<String> getPackages();
-    
+    public abstract Service.Mode getServiceMode(); 
 }
\ No newline at end of file
Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/impl/SchemaReaderImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/impl/SchemaReaderImpl.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/impl/SchemaReaderImpl.java	(working copy)
@@ -1,245 +0,0 @@
-package org.apache.axis2.jaxws.wsdl.impl;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Vector;
-
-import javax.wsdl.Definition;
-import javax.wsdl.Types;
-import javax.wsdl.extensions.ExtensibilityElement;
-import javax.wsdl.extensions.schema.Schema;
-import javax.wsdl.extensions.schema.SchemaImport;
-
-import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.util.JavaUtils;
-import org.apache.axis2.jaxws.util.WSDLWrapper;
-import org.apache.axis2.jaxws.wsdl.SchemaReader;
-import org.apache.axis2.jaxws.wsdl.SchemaReaderException;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
-public class SchemaReaderImpl implements SchemaReader {
-
-	private static String JAXB_SCHEMA_BINDING = "schemaBindings";
-	private static String JAXB_SCHEMA_BINDING_PACKAGE = "package";
-	private static String JAXB_SCHEMA_Binding_PACKAGENAME = "name";
-	private static String SCHEMA_TARGETNAMESPACE = "targetNamespace";
-	private Definition wsdlDefinition = null;
-	private static Log log = LogFactory.getLog(SchemaReaderImpl.class);
-	
-	public Set<String> readPackagesFromSchema(Definition wsdlDefinition) throws SchemaReaderException{
-		if(wsdlDefinition == null){
-			if(log.isDebugEnabled()){
-				log.debug("Invalid wsdl definition provided, NULL");
-			}
-			throw new SchemaReaderException(Messages.getMessage("SchemaReaderErr1"));
-		}
-		this.wsdlDefinition = wsdlDefinition;
-		HashSet<String> set = new HashSet<String>();
-		//Add WSDL TargetNamespace
-		String namespace = wsdlDefinition.getTargetNamespace();
-		String packageString = JavaUtils.getPackageFromNamespace(namespace);
-		set.add(packageString);
-		
-		//Read Schema Definition in wsdl;
-		Types types = wsdlDefinition.getTypes();
-		if(types == null){
-			if(log.isDebugEnabled()){
-				log.debug("WARNING: Could not find any Scheam/Types from WSDL");
-				log.debug("no packages will derived from WSDL schema");
-			}
-			return set;
-		}
-		List extensibilityElements = types.getExtensibilityElements();
-		
-		//Read the schema defined in the wsdl
-		for(Object obj:extensibilityElements){
-			if(isSchema((ExtensibilityElement)obj)){
-				Schema schema = (Schema)obj;
-				//First Read all inline Schema packages
-				List<String> inlineSchemaPkgList = readPackagesFromInlineSchema(schema);
-				for(String pkgAsString:inlineSchemaPkgList){
-					if(pkgAsString!=null){
-						set.add(pkgAsString);
-					}
-				}
-				
-				//Then read all imported schema definitions
-				ArrayList<String> schemaImportPkgList = readPackagesFromImports(schema);
-				for(String pkgAsString : schemaImportPkgList){
-					if(pkgAsString!=null){
-						set.add(pkgAsString);
-					}
-				}
-			}
-		}
-		//Set always stores unique objects, so I dont have to worry about removing duplicates from this set.
-		return set;
-	}
-	/*
-	 * Read ShemaBinding from inline schema, if not SchemaBinding defined then read the targetnamespace.
-	 * Inline Schema - Schema defined in WSDL Types.
-	 */
-	private ArrayList<String> readPackagesFromInlineSchema(Schema schema){
-		ArrayList<String> pkgList = new ArrayList<String>();
-		
-		//check if there is any jaxb customization/binding defined namely schemaBinding.
-		String packageString = readSchemaBindingPackageName(schema);
-		if(packageString == null){
-			//no Schema Binding package name found, this means no jaxb customizations in schema, lets read wsdl 
-			//targetnamespace. Thats what will be used by RI tooling to store java Beans
-			String namespace = readSchemaTargetnamespace(schema);
-			if(namespace !=null){
-				packageString = JavaUtils.getPackageFromNamespace(namespace);
-			}
-		}
-		pkgList.add(packageString);
-		
-		return pkgList;
-	}
-	/*
-	 * Read ShemaBinding from import schema, if not SchemaBinding defined then read the targetnamespace.
-	 * import Schema - import defined in Schema section of WSDL Types.
-	 */
-	private ArrayList<String> readPackagesFromImports(Schema schema) throws SchemaReaderException{
-		ArrayList<String> schemaImportPkgList = new ArrayList<String>();
-		Map map  = schema.getImports();
-		Collection collection = map.values();
-		for(Iterator i =collection.iterator(); i.hasNext(); ){
-			Vector value = (Vector) i.next();
-			for(Object vectorObj:value){
-				SchemaImport si = (SchemaImport)vectorObj;
-				if(log.isDebugEnabled()){
-					if(si!=null)
-						log.debug("Reading import for SchemaLocation ="+si.getSchemaLocationURI());
-				}
-				
-				Schema refSchema = si.getReferencedSchema();
-				
-				//Implementing recursion for reading import within import
-
-				//First read inline schema for imported schema
-				ArrayList<String> inlineSchemaPkgList  = readPackagesFromInlineSchema(refSchema);
-				for(String packageString:inlineSchemaPkgList){
-					if(packageString!=null){
-						schemaImportPkgList.add(packageString);
-					}
-				}
-				//Before we fetch import within imports lets check for circular dependency
-				//Circular dependency is two imports calling each other in different xsd files.
-				if(isCircularDependency(this.readSchemaTargetnamespace(schema), refSchema)){
-					if(log.isDebugEnabled()){
-						log.debug("Circular Dependency Found in WSDL Schema Imports, Two Schemas are importing each other.");
-					}
-					throw new SchemaReaderException(Messages.getMessage("SchemaReaderErr2"));
-				}
-				
-				//Lets read if import has any imports by recurisvely calling readPackageFromImport again....
-				ArrayList<String> rec_ImportPkgList = readPackagesFromImports(refSchema);
-				for(String packageString:rec_ImportPkgList){
-					if(packageString!=null){
-						schemaImportPkgList.add(packageString);
-					}
-				}
-			}
-			
-		}
-		
-		return schemaImportPkgList;
-	}
-	
-	private String readSchemaTargetnamespace(Schema schema){
-		Node root = schema.getElement();
-		if(root!=null){
-			NamedNodeMap nodeMap = root.getAttributes();
-			Node attributeNode = nodeMap.getNamedItem(SCHEMA_TARGETNAMESPACE);
-			if(attributeNode!=null){
-				return attributeNode.getNodeValue();
-			}
-		}
-		return null;
-	}
-	private String readSchemaBindingPackageName(Schema schema){
-		
-		/* JAXB Specification section 7.6 have following important points
-		 * 1) <schemaBindings> binding declaration have schema scope
-		 * 2) For inline annotation  a <schemaBindings> is valid only in the annotation element of the <schema> element.
-		 * 3) There must only be a single instance of <schemaBindings> declaration in the annotation element of the <schema> element.
-		 */
-		
-		//Get root node for schema.
-		Node root = schema.getElement();
-		if(root.hasChildNodes()){
-			
-			//get all child nodes for schema
-			NodeList list = root.getChildNodes();
-			
-			//search for JAXB schemaBinding customization in schema element definitions. 
-			for(int i=0; i<list.getLength(); i++){
-				Node childNode = list.item(i);
-				if(isElementName(JAXB_SCHEMA_BINDING, childNode)){
-					
-					//SchemaBinding has been defined, so lets look for package element. 
-					NodeList schemaBindingNodeList = childNode.getChildNodes();
-					for(int j =0; j<schemaBindingNodeList.getLength(); j++){
-						Node schemaBindingNode = schemaBindingNodeList.item(j);
-						if(isElementName(JAXB_SCHEMA_BINDING_PACKAGE, schemaBindingNode)){
-							
-							//Package Element found, so lets read the package name attribute and return that.
-							NamedNodeMap nodeMap = schemaBindingNode.getAttributes();
-							Node attributeNode = nodeMap.getNamedItem(JAXB_SCHEMA_Binding_PACKAGENAME);
-							return attributeNode.getNodeValue();
-						}
-					}
-				}
-			}
-		}
-		return null;
-	}
-	private boolean  isElementName(String name, Node domNode){
-		if(domNode == null){
-			return false;
-		}
-		if(domNode.getNodeType() == Node.ELEMENT_NODE){
-			String localName = domNode.getLocalName();
-			return localName!=null && localName.equals(name);
-		}
-		return false;
-	}
-	
-	private boolean isSchema(ExtensibilityElement exElement){
-		return WSDLWrapper.SCHEMA.equals(exElement.getElementType());
-	}
-	/*
-	 * Check if Schema1 imports Schema2 and Schema2 imports Schema1
-	 */
-	private boolean isCircularDependency(String targetNamespaceSchema1, Schema Schema2){
-		//Get All imports of the schema2
-		Map map  = Schema2.getImports();
-		Collection collection =map.values();
-		for(Iterator i =collection.iterator(); i.hasNext(); ){
-			Vector value = (Vector) i.next();
-			for(Object vectorObj:value){
-				SchemaImport si = (SchemaImport)vectorObj;
-				
-				//Comparte Schema2 import targetNamespace URI with targetNamespace of Schema1 if they match its a circular
-				//dependency.
-				//TODO should we also check for Schema location here.
-				if(si.getNamespaceURI().equals(targetNamespaceSchema1)){
-					return true;
-				}
-			}
-			
-		}
-		return false;
-	}
-	
-}
Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/SchemaReaderException.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/SchemaReaderException.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/SchemaReaderException.java	(working copy)
@@ -1,25 +0,0 @@
-package org.apache.axis2.jaxws.wsdl;
-
-public class SchemaReaderException extends Exception {
-
-	public SchemaReaderException() {
-		super();
-		
-	}
-
-	public SchemaReaderException(String message, Throwable cause) {
-		super(message, cause);
-		
-	}
-
-	public SchemaReaderException(String message) {
-		super(message);
-		
-	}
-
-	public SchemaReaderException(Throwable cause) {
-		super(cause);
-		
-	}
-
-}
Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/SchemaReader.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/SchemaReader.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/wsdl/SchemaReader.java	(working copy)
@@ -1,31 +0,0 @@
-/**
- * 
- */
-package org.apache.axis2.jaxws.wsdl;
-
-import java.util.Set;
-
-import javax.wsdl.Definition;
-
-/**
- * Schema Reader interface is used to read schema from wsdl and derive appropriate package names from targetnamespace.
- * The algorithm for deriving reading packages names from schema is as follows:
- * 1) Read the inline schema defined in the wsdl
- * 2) check if there is any jaxb customization/binding defined namely schemaBinding.
- * 		if(schemaBinding defined) then
- * 			read the package name and add that to the package set.
- * 		else read the targetnamespace convert tns to package and add to pkg set.
- * 3) check if there are any xsd imports or includes then
- * 		for(each import)
- * 			read the inline schema or perfor step 1
- * 			check if there is any jaxb schemaBinding customization defined
- * 			if(schemaBinding defined) then
- * 				read the package name and add that to the package set.
- * 			else read the targetnamespace convert tns to package and add to pkg set.
- * 			Do Step 3 recursively so we cover Schema imports within import n times.
- * 
- *
- */
-public interface SchemaReader {
-	public Set<String> readPackagesFromSchema(Definition wsdlDefinition)throws SchemaReaderException;
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java	(working copy)
@@ -1,37 +0,0 @@
-package org.apache.axis2.jaxws.runtime.description.impl;
-
-import org.apache.axis2.jaxws.description.ServiceDescription;
-import org.apache.axis2.jaxws.runtime.description.ResourceInjectionServiceRuntimeDescription;
-
-public class ResourceInjectionServiceRuntimeDescriptionImpl implements
-        ResourceInjectionServiceRuntimeDescription {
-
-    private ServiceDescription serviceDesc;
-    private String key; 
-    private boolean _hasResourceAnnotation;
-    
-    protected ResourceInjectionServiceRuntimeDescriptionImpl(String key,
-                ServiceDescription serviceDesc) {
-        this.serviceDesc = serviceDesc;
-        this.key = key;
-    }
-
-    public boolean hasResourceAnnotation() {
-        return _hasResourceAnnotation;
-    }
-
-    public ServiceDescription getServiceDescription() {
-        return serviceDesc;
-    }
-
-    public String getKey() {
-        return key;
-    }
-
-    /** Called by Builder code
-     * @param value
-     */
-    void setResourceAnnotation(boolean value) {
-        _hasResourceAnnotation = value;
-    }
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java	(working copy)
@@ -1,134 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws.runtime.description.impl;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.security.PrivilegedAction;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Resource;
-
-import org.apache.axis2.java.security.AccessController;
-import org.apache.axis2.jaxws.description.ServiceDescription;
-import org.apache.axis2.jaxws.runtime.description.ResourceInjectionServiceRuntimeDescription;
-
-public class ResourceInjectionServiceRuntimeDescriptionBuilder {
-
-    /**
-     * Intentionally Private
-     */
-    private ResourceInjectionServiceRuntimeDescriptionBuilder() { }
-
-    /**
-     * create
-     * @param opDesc
-     * @param implClassName
-     * @return
-     */
-    static public ResourceInjectionServiceRuntimeDescription create(ServiceDescription serviceDesc, 
-                Class implClass) {
-        ResourceInjectionServiceRuntimeDescriptionImpl desc = 
-            new ResourceInjectionServiceRuntimeDescriptionImpl(getKey(implClass), serviceDesc);
-        boolean value = hasResourceAnnotation(implClass);
-        desc.setResourceAnnotation(value);
-        return desc;
-    }
-    
-    static public String getKey(Class implClass) {
-        return "Resource Injection:" + implClass.getCanonicalName();
-    }
-    
-    /**
-     * @param implClass
-     * @return true if Field or Method has a @Resource annotation 
-     */
-    static private boolean hasResourceAnnotation(Class implClass) {
-        // Getting this information is expensive, but fortunately is cached.
-        List<Field> fields =  getFields(implClass);
-        for (Field field:fields) {
-            if (field.getAnnotation(Resource.class) != null) {
-                return true;
-            }
-        }
-        List<Method> methods = getMethods(implClass);
-        for (Method method:methods) {
-            if (method.getAnnotation(Resource.class) != null) {
-                return true;
-            }
-        }
-        return false;
-        
-    }
-    
-    /**
-     * Gets all of the fields in this class and the super classes
-     * @param beanClass
-     * @return
-     */
-    static private List<Field> getFields(final Class beanClass) {
-        // This class must remain private due to Java 2 Security concerns
-        List<Field> fields;
-        fields = (List<Field>) AccessController.doPrivileged(
-                new PrivilegedAction() {
-                    public Object run() {
-                        List<Field> fields = new ArrayList<Field>();
-                        Class cls = beanClass;
-                        while(cls != null) {
-                            Field[] fieldArray = cls.getDeclaredFields();
-                            for (Field field:fieldArray) {
-                                fields.add(field);
-                            }
-                            cls = cls.getSuperclass();
-                        }
-                        return fields; 
-                    }
-                }
-        );
-        
-        return fields;
-    }
-    
-    /**
-     * Gets all of the fields in this class and the super classes
-     * @param beanClass
-     * @return
-     */
-    static private List<Method> getMethods(final Class beanClass) {
-        // This class must remain private due to Java 2 Security concerns
-        List<Method> methods;
-        methods = (List<Method>) AccessController.doPrivileged(
-                new PrivilegedAction() {
-                    public Object run() {
-                        List<Method> methods = new ArrayList<Method>();
-                        Class cls = beanClass;
-                        while(cls != null) {
-                            Method[] methodArray = cls.getDeclaredMethods();
-                            for (Method method:methodArray) {
-                                methods.add(method);
-                            }
-                            cls = cls.getSuperclass();
-                        }
-                        return methods; 
-                    }
-                }
-        );
-        
-        return methods;
-    }
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java	(working copy)
@@ -1,7 +1,23 @@
-package org.apache.axis2.jaxws.runtime.description.impl;
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.runtime.description.injection.impl;
 
 import org.apache.axis2.jaxws.description.ServiceDescription;
-import org.apache.axis2.jaxws.runtime.description.ResourceInjectionServiceRuntimeDescription;
+import org.apache.axis2.jaxws.runtime.description.injection.ResourceInjectionServiceRuntimeDescription;
 
 public class ResourceInjectionServiceRuntimeDescriptionImpl implements
         ResourceInjectionServiceRuntimeDescription {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java	(working copy)
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.axis2.jaxws.runtime.description.impl;
+package org.apache.axis2.jaxws.runtime.description.injection.impl;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -26,7 +26,7 @@
 
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.description.ServiceDescription;
-import org.apache.axis2.jaxws.runtime.description.ResourceInjectionServiceRuntimeDescription;
+import org.apache.axis2.jaxws.runtime.description.injection.ResourceInjectionServiceRuntimeDescription;
 
 public class ResourceInjectionServiceRuntimeDescriptionBuilder {
 
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescription.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescription.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescription.java	(working copy)
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.axis2.jaxws.runtime.description;
+package org.apache.axis2.jaxws.runtime.description.injection;
 
 import org.apache.axis2.jaxws.description.ServiceRuntimeDescription;
 
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescriptionFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescriptionFactory.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescriptionFactory.java	(revision 0)
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.runtime.description.injection;
+
+import org.apache.axis2.jaxws.description.OperationDescription;
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.runtime.description.impl.OperationRuntimeDescriptionBuilder;
+import org.apache.axis2.jaxws.runtime.description.injection.impl.ResourceInjectionServiceRuntimeDescriptionBuilder;
+
+public class ResourceInjectionServiceRuntimeDescriptionFactory {
+
+    /**
+     * intentionally private
+     */
+    private ResourceInjectionServiceRuntimeDescriptionFactory() {}
+
+    /**
+     * Get or create MarshalServiceRuntimeDescription
+     * @param serviceDesc
+     * @param implClass
+     * @return OperationRuntimeDescription
+     */
+    public static ResourceInjectionServiceRuntimeDescription get(ServiceDescription serviceDesc, Class implClass) {
+        String key = ResourceInjectionServiceRuntimeDescriptionBuilder.getKey(implClass);
+        ResourceInjectionServiceRuntimeDescription  risrDesc = 
+            (ResourceInjectionServiceRuntimeDescription ) 
+                serviceDesc.getServiceRuntimeDesc(key);
+        
+        if (risrDesc == null) {
+            risrDesc = ResourceInjectionServiceRuntimeDescriptionBuilder.create(serviceDesc, implClass);
+            serviceDesc.setServiceRuntimeDesc(risrDesc);
+        }
+        return risrDesc;
+    }
+}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/ResourceInjectionServiceRuntimeDescription.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/ResourceInjectionServiceRuntimeDescription.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/ResourceInjectionServiceRuntimeDescription.java	(working copy)
@@ -1,31 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws.runtime.description;
-
-import org.apache.axis2.jaxws.description.ServiceRuntimeDescription;
-
-
-/**
- * Used to cache @Resource injection information
- */
-public interface ResourceInjectionServiceRuntimeDescription extends ServiceRuntimeDescription {
-   /**
-    * @return true if @Resource is found on any Field or Method of the 
-    * Implementation class
-    */
-    boolean hasResourceAnnotation();
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescription.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescription.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescription.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.runtime.description.marshal;
+
+import java.util.TreeSet;
+
+import org.apache.axis2.jaxws.description.ServiceRuntimeDescription;
+
+
+/**
+ * Used to cache marshal information
+ */
+public interface MarshalServiceRuntimeDescription extends ServiceRuntimeDescription {
+   public TreeSet<String> getPackages();
+}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionImpl.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionImpl.java	(revision 0)
@@ -0,0 +1,38 @@
+package org.apache.axis2.jaxws.runtime.description.marshal.impl;
+
+import java.util.TreeSet;
+
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
+
+
+public class MarshalServiceRuntimeDescriptionImpl implements
+        MarshalServiceRuntimeDescription {
+
+    private ServiceDescription serviceDesc;
+    private String key; 
+    private TreeSet<String> packages;
+    
+    protected MarshalServiceRuntimeDescriptionImpl(String key,
+                ServiceDescription serviceDesc) {
+        this.serviceDesc = serviceDesc;
+        this.key = key;
+    }
+
+
+    public ServiceDescription getServiceDescription() {
+        return serviceDesc;
+    }
+
+    public String getKey() {
+        return key;
+    }
+
+    public TreeSet<String> getPackages() {
+        return packages;
+    }
+
+    void setPackages(TreeSet<String> packages) {
+        this.packages = packages;
+    }
+}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionBuilder.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionBuilder.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionBuilder.java	(revision 0)
@@ -0,0 +1,83 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.runtime.description.marshal.impl;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.security.PrivilegedAction;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.TreeSet;
+
+import javax.annotation.Resource;
+
+import org.apache.axis2.java.security.AccessController;
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
+
+public class MarshalServiceRuntimeDescriptionBuilder {
+
+    /**
+     * Intentionally Private
+     */
+    private MarshalServiceRuntimeDescriptionBuilder() { }
+
+    /**
+     * create
+     * @param opDesc
+     * @param implClassName
+     * @return
+     */
+    static public MarshalServiceRuntimeDescription create(ServiceDescription serviceDesc) {
+        MarshalServiceRuntimeDescriptionImpl desc = 
+            new MarshalServiceRuntimeDescriptionImpl(getKey(), serviceDesc);
+        init(desc, serviceDesc);
+        return desc;
+    }
+    
+    static public String getKey() {
+        return "JAXWS-MARSHAL";
+    }
+    
+    /**
+     * @param implClass
+     * @return true if Field or Method has a @Resource annotation 
+     */
+    static private void init(MarshalServiceRuntimeDescriptionImpl marshalDesc, 
+            ServiceDescription serviceDesc) {
+        TreeSet<String> packages = new TreeSet<String>();
+        
+        // @TODO There are two ways to get the packages.
+        // Schema Walk (prefered) and Annotation Walk.
+        // The Schema walk requires an existing or generated schema.
+        // 
+        // There are some limitations in the current schema walk
+        // And there are problems in the annotation walk.
+        // So for now we will do both.
+        boolean doSchemaWalk = true;
+        boolean doAnnotationWalk = true;
+        packages = new TreeSet<String>();
+        if (doSchemaWalk) {
+            packages.addAll(PackageSetBuilder.getPackagesFromSchema(serviceDesc));
+        }
+        if (doAnnotationWalk) {
+            packages.addAll(PackageSetBuilder.getPackagesFromAnnotations(serviceDesc));
+        }
+        marshalDesc.setPackages(packages);
+    }
+       
+}
\ No newline at end of file
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PackageSetBuilder.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PackageSetBuilder.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PackageSetBuilder.java	(working copy)
@@ -14,13 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.axis2.jaxws.description.impl;
+package org.apache.axis2.jaxws.runtime.description.marshal.impl;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.util.Set;
 import java.util.TreeSet;
 
@@ -28,8 +30,10 @@
 import javax.wsdl.WSDLException;
 import javax.xml.bind.JAXBElement;
 
+import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
 import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
 import org.apache.axis2.jaxws.description.FaultDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
@@ -96,11 +100,13 @@
     	EndpointDescription[] endpointDescs = serviceDesc.getEndpointDescriptions();
     	if (endpointDescs != null) {
             for (int i=0; i< endpointDescs.length; i++) {
-            	EndpointDescriptionImpl ed = (EndpointDescriptionImpl)endpointDescs[i];
+            	EndpointDescription ed = (EndpointDescription)endpointDescs[i];
             	if(wsdlDefinition == null){
             		//Let see if we can get wsdl definition from endpoint @WebService annotation.
-	            	String wsdlLocation = ed.getAnnoWebServiceWSDLLocation();
-	            	wsdlDefinition = getWSDLDefinition(wsdlLocation);
+                    if (ed instanceof EndpointDescriptionJava) {
+                        String wsdlLocation = ((EndpointDescriptionJava) ed).getAnnoWebServiceWSDLLocation();
+                        wsdlDefinition = getWSDLDefinition(wsdlLocation);
+                    }
             	}
             	//So at this point either we got wsdl definition from ServiceDescription (which means we are running this code
             	//on client side) or we got it from the @WebService annotation (which means we are running this code on server side)
@@ -376,8 +382,8 @@
         }
         try {
             
-            return DescriptionUtils.forName(className, true, 
-                    DescriptionUtils.getContextClassLoader());
+            return forName(className, true, 
+                   getContextClassLoader());
 	        //Catch Throwable as ClassLoader can throw an NoClassDefFoundError that
 	        //does not extend Exception, so lets catch everything that extends Throwable
             //rather than just Exception.
@@ -415,4 +421,53 @@
 	  	  
       return wsdlDefinition;
    }
+   
+   /**
+    * Return the class for this name
+    * @return Class
+    */
+   static Class forName(final String className, final boolean initialize, final ClassLoader classloader) throws ClassNotFoundException {
+       // NOTE: This method must remain protected because it uses AccessController
+       Class cl = null;
+       try {
+           cl = (Class) AccessController.doPrivileged(
+                   new PrivilegedExceptionAction() {
+                       public Object run() throws ClassNotFoundException {
+                           return Class.forName(className, initialize, classloader);    
+                       }
+                   }
+                 );  
+       } catch (PrivilegedActionException e) {
+           if (log.isDebugEnabled()) {
+               log.debug("Exception thrown from AccessController: " + e);
+           }
+           throw (ClassNotFoundException) e.getException();
+       } 
+       
+       return cl;
+   }
+   
+   /**
+    * @return ClassLoader
+    */
+   static ClassLoader getContextClassLoader() {
+       // NOTE: This method must remain private because it uses AccessController
+       ClassLoader cl = null;
+       try {
+           cl = (ClassLoader) AccessController.doPrivileged(
+                   new PrivilegedExceptionAction() {
+                       public Object run() throws ClassNotFoundException {
+                           return Thread.currentThread().getContextClassLoader();      
+                       }
+                   }
+                 );  
+       } catch (PrivilegedActionException e) {
+           if (log.isDebugEnabled()) {
+               log.debug("Exception thrown from AccessController: " + e);
+           }
+           throw (RuntimeException) e.getException();
+       }
+       
+       return cl;
+   }
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescriptionFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescriptionFactory.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescriptionFactory.java	(revision 0)
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.runtime.description.marshal;
+
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.runtime.description.marshal.impl.MarshalServiceRuntimeDescriptionBuilder;
+
+public class MarshalServiceRuntimeDescriptionFactory {
+
+    /**
+     * intentionally private
+     */
+    private MarshalServiceRuntimeDescriptionFactory() {}
+
+    /**
+     * Get or create MarshalServiceRuntimeDescription
+     * @param serviceDesc
+     * @param implClass
+     * @return MarshalServiceRuntimeDescription
+     */
+    public static MarshalServiceRuntimeDescription get(ServiceDescription serviceDesc) {
+        String key = MarshalServiceRuntimeDescriptionBuilder.getKey();
+        MarshalServiceRuntimeDescription  desc = 
+            (MarshalServiceRuntimeDescription ) 
+                serviceDesc.getServiceRuntimeDesc(key);
+        
+        if (desc == null) {
+            desc = MarshalServiceRuntimeDescriptionBuilder.create(serviceDesc);
+            serviceDesc.setServiceRuntimeDesc(desc);
+        }
+        return desc;
+    }
+}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/ResourceInjectionServiceRuntimeDescriptionFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/ResourceInjectionServiceRuntimeDescriptionFactory.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/ResourceInjectionServiceRuntimeDescriptionFactory.java	(working copy)
@@ -1,49 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws.runtime.description;
-
-import org.apache.axis2.jaxws.description.OperationDescription;
-import org.apache.axis2.jaxws.description.ServiceDescription;
-import org.apache.axis2.jaxws.runtime.description.impl.OperationRuntimeDescriptionBuilder;
-import org.apache.axis2.jaxws.runtime.description.impl.ResourceInjectionServiceRuntimeDescriptionBuilder;
-
-public class ResourceInjectionServiceRuntimeDescriptionFactory {
-
-    /**
-     * intentionally private
-     */
-    private ResourceInjectionServiceRuntimeDescriptionFactory() {}
-
-    /**
-     * Get or create ResourceInjectionServiceRuntimeDescription
-     * @param serviceDesc
-     * @param implClass
-     * @return OperationRuntimeDescription
-     */
-    public static ResourceInjectionServiceRuntimeDescription get(ServiceDescription serviceDesc, Class implClass) {
-        String key = ResourceInjectionServiceRuntimeDescriptionBuilder.getKey(implClass);
-        ResourceInjectionServiceRuntimeDescription  risrDesc = 
-            (ResourceInjectionServiceRuntimeDescription ) 
-                serviceDesc.getServiceRuntimeDesc(key);
-        
-        if (risrDesc == null) {
-            risrDesc = ResourceInjectionServiceRuntimeDescriptionBuilder.create(serviceDesc, implClass);
-            serviceDesc.setServiceRuntimeDesc(risrDesc);
-        }
-        return risrDesc;
-    }
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java	(working copy)
@@ -49,6 +49,7 @@
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
 import org.apache.axis2.jaxws.util.ConvertUtils;
 import org.apache.axis2.jaxws.util.XMLRootElementUtil;
 import org.apache.axis2.jaxws.wrapper.JAXBWrapperTool;
@@ -130,7 +131,8 @@
             //   4) The type of the data block is defined by schema; thus in most cases
             //      an xsi:type will not be present
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Determine if a returnValue is expected.
             // The return value may be an child element
@@ -270,8 +272,9 @@
             //   4) The type of the data block (data:foo) is defined by schema (and probably
             //      is not present in the message
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
-                        
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
+            
             // In usage=WRAPPED, there will be a single JAXB block inside the body.
             // Get this block
             JAXBBlockContext blockContext = new JAXBBlockContext(packages);        
@@ -381,7 +384,8 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -489,6 +493,8 @@
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
         Protocol protocol = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID()); 
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
         
         
         // Note all exceptions are caught and rethrown with a WebServiceException
@@ -569,7 +575,6 @@
             // Put the object into the message
             JAXBBlockFactory factory = 
                 (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
-            TreeSet<String> packages = endpointDesc.getPackages();
             Block block = factory.createFrom(object, 
                     new JAXBBlockContext(packages), 
                     null);  // The factory will get the qname from the value
@@ -592,6 +597,9 @@
         }
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
+        
         // We want to respond with the same protocol as the request,
         // It the protocol is null, then use the Protocol defined by the binding
         if (protocol == null) {
@@ -607,7 +615,7 @@
             // Put the fault onto the message
             MethodMarshallerUtils.marshalFaultResponse(throwable, 
                     operationDesc, 
-                    endpointDesc.getPackages(), 
+                    packages, 
                     m, 
                     false); // don't force xsi:type for doc/lit
             return m;
@@ -623,11 +631,13 @@
         }
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
         
         // Note all exceptions are caught and rethrown with a WebServiceException
         try {
             Throwable t = MethodMarshallerUtils.demarshalFaultResponse(operationDesc, 
-                    endpointDesc.getPackages(), 
+                    packages, 
                     message, 
                     false);
             return t;
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -68,7 +69,8 @@
             //   4) The type of the data block is defined by schema; thus in most cases
             //      an xsi:type will not be present
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
               
             // Get the return value.
             Class returnType = operationDesc.getResultActualType();
@@ -116,7 +118,8 @@
             //   4) The type of the data block (data:foo) is defined by schema (and probably
             //      is not present in the message
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             
             // Unmarshal the ParamValues from the message
@@ -165,7 +168,8 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -221,7 +225,8 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -249,6 +254,9 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
+        
         // We want to respond with the same protocol as the request,
         // It the protocol is null, then use the Protocol defined by the binding
         if (protocol == null) {
@@ -264,7 +272,7 @@
             // Put the fault onto the message
             MethodMarshallerUtils.marshalFaultResponse(throwable, 
                     operationDesc, 
-                    endpointDesc.getPackages(), 
+                    packages, 
                     m, 
                     false); // don't force xsi:type for doc/lit
             return m;
@@ -277,10 +285,12 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
         
         // Note all exceptions are caught and rethrown with a WebServiceException
         try {
-            Throwable t = MethodMarshallerUtils.demarshalFaultResponse(operationDesc, endpointDesc.getPackages(), message, false);
+            Throwable t = MethodMarshallerUtils.demarshalFaultResponse(operationDesc, packages, message, false);
             return t;
         } catch(Exception e) {
             throw ExceptionFactory.makeWebServiceException(e);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(working copy)
@@ -36,6 +36,7 @@
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -85,7 +86,8 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // TODO This needs more work.  We need to check inside holders of input params.  We also
             // may want to exclude header params from this check
@@ -161,7 +163,8 @@
             //   5) We always send an xsi:type, but other vendor's may not.
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Indicate that the style is RPC.  This is important so that the message understands
             // that the data blocks are underneath the operation element
@@ -236,7 +239,8 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -330,7 +334,8 @@
             //   5) We always send an xsi:type, but other vendor's may not.
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Indicate that the style is RPC.  This is important so that the message understands
             // that the data blocks are underneath the operation element
@@ -375,6 +380,9 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
+        
         // We want to respond with the same protocol as the request,
         // It the protocol is null, then use the Protocol defined by the binding
         if (protocol == null) {
@@ -395,7 +403,7 @@
             // Put the fault onto the message
             MethodMarshallerUtils.marshalFaultResponse(throwable, 
                     operationDesc, 
-                    endpointDesc.getPackages(), 
+                    packages, 
                     m, 
                     true);  // isRPC=true
             return m;
@@ -408,10 +416,12 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
         
         // Note all exceptions are caught and rethrown with a WebServiceException
         try {
-            Throwable t = MethodMarshallerUtils.demarshalFaultResponse(operationDesc, endpointDesc.getPackages(), message,  true); 
+            Throwable t = MethodMarshallerUtils.demarshalFaultResponse(operationDesc, packages, message,  true); 
             return t;
         } catch(Exception e) {
             throw ExceptionFactory.makeWebServiceException(e);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(working copy)
@@ -44,9 +44,11 @@
 
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.FaultDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ParameterDescription;
+import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
@@ -57,6 +59,8 @@
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
 import org.apache.axis2.jaxws.message.util.XMLFaultUtils;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescriptionFactory;
 import org.apache.axis2.jaxws.util.ClassUtils;
 import org.apache.axis2.jaxws.util.ConvertUtils;
 import org.apache.axis2.jaxws.util.SAAJFactory;
@@ -964,5 +968,13 @@
         return e;
     }
     
+    /**
+     * @param ed
+     * @return
+     */
+    static MarshalServiceRuntimeDescription getMarshalDesc(EndpointDescription ed) {
+        ServiceDescription sd = ed.getServiceDescription();
+        return MarshalServiceRuntimeDescriptionFactory.get(sd);
+    }
     
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java	(working copy)
@@ -42,6 +42,7 @@
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
 import org.apache.axis2.jaxws.util.ConvertUtils;
 import org.apache.axis2.jaxws.util.XMLRootElementUtil;
 import org.apache.axis2.jaxws.wrapper.JAXBWrapperTool;
@@ -82,7 +83,8 @@
             //   4) The type of the data block is defined by schema; thus in most cases
             //      an xsi:type will not be present
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
             
             // Determine if a returnValue is expected.
             // The return value may be an child element
@@ -192,8 +194,9 @@
             //   4) The type of the data block (data:foo) is defined by schema (and probably
             //      is not present in the message
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            TreeSet<String> packages = endpointDesc.getPackages();
-                        
+            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+            TreeSet<String> packages = marshalDesc.getPackages();
+            
             // In usage=WRAPPED, there will be a single JAXB block inside the body.
             // Get this block
             JAXBBlockContext blockContext = new JAXBBlockContext(packages);        
@@ -257,6 +260,9 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
+        
         // We want to respond with the same protocol as the request,
         // It the protocol is null, then use the Protocol defined by the binding
         if (protocol == null) {
@@ -344,7 +350,7 @@
                 (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
             
             Block block = factory.createFrom(object, 
-                    new JAXBBlockContext(endpointDesc.getPackages()), 
+                    new JAXBBlockContext(packages), 
                     null);  // The factory will get the qname from the value
             m.setBodyBlock(block);
             
@@ -359,6 +365,8 @@
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
         Protocol protocol = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID()); 
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
        
         
         // Note all exceptions are caught and rethrown with a WebServiceException
@@ -430,7 +438,7 @@
                 (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
             
             Block block = factory.createFrom(object, 
-                    new JAXBBlockContext(endpointDesc.getPackages()), 
+                    new JAXBBlockContext(packages), 
                     null);  // The factory will get the qname from the value
             m.setBodyBlock(block);
             
@@ -444,6 +452,9 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
+        
         // We want to respond with the same protocol as the request,
         // It the protocol is null, then use the Protocol defined by the binding
         if (protocol == null) {
@@ -459,7 +470,7 @@
             // Put the fault onto the message
             MethodMarshallerUtils.marshalFaultResponse(throwable, 
                     operationDesc, 
-                    endpointDesc.getPackages(), 
+                    packages, 
                     m, 
                     false); // don't force xsi:type for doc/lit
             return m;
@@ -472,11 +483,13 @@
         
         EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
         EndpointDescription endpointDesc = ed.getEndpointDescription();
+        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
+        TreeSet<String> packages = marshalDesc.getPackages();
         
         // Note all exceptions are caught and rethrown with a WebServiceException
         try {
             Throwable t = MethodMarshallerUtils.demarshalFaultResponse(operationDesc, 
-                    endpointDesc.getPackages(), 
+                    packages, 
                     message, 
                     false);
             return t;
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java	(revision 505113)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java	(working copy)
@@ -35,8 +35,8 @@
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.handler.SoapMessageContext;
 import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.runtime.description.ResourceInjectionServiceRuntimeDescription;
-import org.apache.axis2.jaxws.runtime.description.ResourceInjectionServiceRuntimeDescriptionFactory;
+import org.apache.axis2.jaxws.runtime.description.injection.ResourceInjectionServiceRuntimeDescription;
+import org.apache.axis2.jaxws.runtime.description.injection.ResourceInjectionServiceRuntimeDescriptionFactory;
 import org.apache.axis2.jaxws.server.endpoint.injection.ResourceInjector;
 import org.apache.axis2.jaxws.server.endpoint.injection.WebServiceContextInjector;
 import org.apache.axis2.jaxws.server.endpoint.injection.factory.ResourceInjectionFactory;
