Index: src/javax/xml/soap/MessageFactory.java
===================================================================
--- src/javax/xml/soap/MessageFactory.java	(revision 494042)
+++ src/javax/xml/soap/MessageFactory.java	(working copy)
@@ -168,9 +168,28 @@
                                               InputStream inputstream)
             throws IOException, SOAPException;
 
-    public static MessageFactory newInstance(String s)
+    public static MessageFactory newInstance(String soapVersion)
             throws SOAPException {
-        return SAAJMetaFactory.getInstance().newMessageFactory(s);
+    	
+    	if(!(SOAPConstants.SOAP_1_1_PROTOCOL.equals(soapVersion) ||
+    			SOAPConstants.SOAP_1_2_PROTOCOL.equals(soapVersion))){
+    		throw new SOAPException("Invalid SOAP Protocol Version");
+    	}
+    	
+        MessageFactory factory = newInstance();
+        if(factory.getClass().getName().equals(DEFAULT_MESSAGE_FACTORY)){
+            try {
+                Method m = factory.getClass().getMethod("setSOAPVersion", new Class[]{String.class});
+                m.invoke(factory, new Object[]{soapVersion});
+            } catch (IllegalAccessException e) {
+                throw new SOAPException(e);
+            } catch (InvocationTargetException e) {
+                throw new SOAPException(e);
+            } catch (NoSuchMethodException e) {
+                throw new SOAPException(e);
+            }
+        }
+        return factory;
     }
 
     private static final String DEFAULT_MESSAGE_FACTORY =
Index: src/javax/xml/soap/SAAJResult.java
===================================================================
--- src/javax/xml/soap/SAAJResult.java	(revision 494042)
+++ src/javax/xml/soap/SAAJResult.java	(working copy)
@@ -18,8 +18,6 @@
 
 import javax.xml.transform.dom.DOMResult;
 
-import org.w3c.dom.*;
-
 public class SAAJResult extends DOMResult {
 
     public SAAJResult()
@@ -51,4 +49,6 @@
         }
         return (javax.xml.soap.Node) node.getFirstChild();
     }
+
+    
 }
Index: src/javax/xml/soap/SOAPConnection.java
===================================================================
--- src/javax/xml/soap/SOAPConnection.java	(revision 494042)
+++ src/javax/xml/soap/SOAPConnection.java	(working copy)
@@ -61,7 +61,14 @@
      */
     public abstract void close() throws SOAPException;
 
-    public SOAPMessage get(Object obj)
+    /**
+     * Gets a message from a specific endpoint and blocks until it receives,
+     * @param to - an Object that identifies where the request should be sent. Objects of type
+     * java.lang.String and java.net.URL must be supported.
+     * @return the SOAPMessage object that is the response to the get message request
+     * @throws SOAPException - if there is a SOAP error
+     */
+    public SOAPMessage get(Object to)
             throws SOAPException {
         throw new UnsupportedOperationException();
     }
Index: src/javax/xml/soap/SOAPElement.java
===================================================================
--- src/javax/xml/soap/SOAPElement.java	(revision 494042)
+++ src/javax/xml/soap/SOAPElement.java	(working copy)
@@ -310,14 +310,13 @@
     public abstract Iterator getVisibleNamespacePrefixes();
 
     public abstract SOAPElement addAttribute(javax.xml.namespace.QName qname,
-                             java.lang.String s)
+                             java.lang.String value)
             throws SOAPException;
 
     public abstract SOAPElement addChildElement(javax.xml.namespace.QName qname)
             throws SOAPException;
 
-    public abstract javax.xml.namespace.QName createQName(java.lang.String s,
-                                          java.lang.String s1)
+    public abstract javax.xml.namespace.QName createQName(String localName, String prefix)
             throws SOAPException;
 
     public abstract java.util.Iterator getAllAttributesAsQNames();
@@ -330,6 +329,6 @@
 
     boolean removeAttribute(javax.xml.namespace.QName qname);
 
-    public abstract SOAPElement setElementQName(javax.xml.namespace.QName qname)
+    public abstract SOAPElement setElementQName(javax.xml.namespace.QName newName)
             throws SOAPException;
 }
Index: src/javax/xml/soap/SOAPFactory.java
===================================================================
--- src/javax/xml/soap/SOAPFactory.java	(revision 494042)
+++ src/javax/xml/soap/SOAPFactory.java	(working copy)
@@ -15,8 +15,6 @@
  */
 package javax.xml.soap;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.InvocationTargetException;
 
 /**
  * <code>SOAPFactory</code> is a factory for creating various objects
@@ -147,8 +145,40 @@
         }
     }
 
-    public static SOAPFactory newInstance(String s) throws SOAPException {
-        return SAAJMetaFactory.getInstance().newSOAPFactory(s);
+    
+    /**
+     * Creates a new SOAPFactory object that is an instance of the specified implementation, this
+	 * method uses the SAAJMetaFactory to locate the implementation class and create the
+	 * SOAPFactory instance.
+	 * 
+     * @param protocol - a string constant representing the protocol of the specified SOAP factory
+     * implementation. May be either DYNAMIC_SOAP_PROTOCOL, DEFAULT_SOAP_PROTOCOL
+	 * (which is the same as) SOAP_1_1_PROTOCOL, or SOAP_1_2_PROTOCOL.
+	 * Returns: a new instance of a SOAPFactory
+
+     * @return javax.xml.soap.SOAPFactory
+     * @throws SOAPException - if there is an error creating the specified SOAPFactory
+     * @see <CODE>SAAJMetaFactory</CODE>
+     */
+    public static SOAPFactory newInstance(String protocol) throws SOAPException {
+    	//TODO : check, how to load from SAAJMetaFactory
+    	//this is what was here earlier
+    	// s == protocol
+        //return (SOAPFactory) Class.forName(s).newInstance();
+    	//Is returning classes from axiom correct?
+    	//what about DYNAMIC_SOAP_PROTOCOL?
+        try {
+        	if(SOAPConstants.DEFAULT_SOAP_PROTOCOL.equals(prot