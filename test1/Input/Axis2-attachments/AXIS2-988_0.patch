Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/AxisConfigBuilder.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(working copy)
@@ -17,6 +17,15 @@
 
 package org.apache.axis2.deployment;
 
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLStreamException;
+
 import org.apache.axiom.om.OMAttribute;
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
@@ -36,18 +45,10 @@
 import org.apache.axis2.phaseresolver.PhaseException;
 import org.apache.axis2.transport.TransportListener;
 import org.apache.axis2.transport.TransportSender;
+import org.apache.axis2.util.TargetResolver;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import javax.xml.namespace.QName;
-import javax.xml.stream.XMLStreamException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-
 public class AxisConfigBuilder extends DescriptionBuilder {
 
     protected static final Log log = LogFactory.getLog(AxisConfigBuilder.class);
@@ -99,6 +100,10 @@
             // Process Observers
             Iterator obs_ittr = config_element.getChildrenWithName(new QName(TAG_LISTENER));
 
+            // Process TargetResolvers
+            OMElement targetResolvers = config_element.getFirstChildWithName(new QName(TAG_TARGET_RESOLVERS));
+            processTargetResolvers(axisConfig, targetResolvers);
+            
             processObservers(obs_ittr);
 
             // processing Phase orders
@@ -138,6 +143,26 @@
         }
     }
 
+    private void processTargetResolvers(AxisConfiguration axisConfig, OMElement targetResolvers) {
+        if(targetResolvers != null){
+           Iterator iterator = targetResolvers.getChildrenWithName(new QName(TAG_TARGET_RESOLVER));
+           while(iterator.hasNext()){
+               OMElement targetResolver = (OMElement)iterator.next();
+               OMAttribute classNameAttribute = targetResolver.getAttribute(new QName(TAG_CLASS_NAME));
+               String className = classNameAttribute.getAttributeValue();
+               try {
+                   Class classInstance = Class.forName(className);
+                   TargetResolver tr = (TargetResolver)classInstance.newInstance();
+                   axisConfig.addTargetResolver(tr);
+                } catch (Exception e) {
+                    if(log.isTraceEnabled()){
+                        log.trace("processTargetResolvers: Exception thrown initialising TargetResolver: "+e.getMessage());
+                    }
+                }
+           }
+        }
+    }
+
     protected void processModuleConfig(Iterator moduleConfigs, ParameterInclude parent,
                                        AxisConfiguration config)
             throws DeploymentException {
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/axis2_default.xml
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/axis2_default.xml	(revision 429609)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/axis2_default.xml	(working copy)
@@ -40,7 +40,19 @@
         <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
                          class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
     </messageReceivers>
+    
     <!-- ================================================= -->
+    <!-- Target Resolvers -->
+    <!-- ================================================= -->
+    <!-- Uncomment the following and specify the class name for your TargetResolver to add -->
+    <!-- a TargetResolver. TargetResolvers are used to process the To EPR for example to -->
+    <!-- choose a server in a cluster -->
+    <!--<targetResolvers>-->
+    <!--<targetResolver class="" />-->
+    <!--</targetResolvers>-->
+    
+    
+    <!-- ================================================= -->
     <!-- Transport Ins -->
     <!-- ================================================= -->
     <transportReceiver name="http"
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/DeploymentConstants.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/DeploymentConstants.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/deployment/DeploymentConstants.java	(working copy)
@@ -44,6 +44,8 @@
     String TAG_LABEL = "label";
     String TAG_HANDLER = "handler";
     String TAG_TYPE = "type";
+    String TAG_TARGET_RESOLVERS = "targetResolvers";
+    String TAG_TARGET_RESOLVER = "targetResolver";
     String TAG_TRANSPORT_SENDER = "transportSender";
     String TAG_TRANSPORT_RECEIVER = "transportReceiver";
     String TAG_SERVICE_GROUP = "serviceGroup";
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/description/OutInAxisOperation.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/description/OutInAxisOperation.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/description/OutInAxisOperation.java	(working copy)
@@ -228,6 +228,10 @@
         }
 
         mc.setOptions(options);
+        
+        // do Target Resolution
+        cc.getAxisConfiguration().getTargetResolverChain().resolveTarget(mc);
+        
         // if the transport to use for sending is not specified, try to find it
         // from the URL
         TransportOutDescription transportOut = options.getTransportOut();
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/description/OutOnlyAxisOperation.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/description/OutOnlyAxisOperation.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/description/OutOnlyAxisOperation.java	(working copy)
@@ -318,9 +318,13 @@
             throw new AxisFault(Messages.getMessage("mepiscomplted"));
         }
         ConfigurationContext cc = sc.getConfigurationContext();
-
+        
         // set options on the message context
         mc.setOptions(options);
+        
+        // do Target Resolution
+        cc.getAxisConfiguration().getTargetResolverChain().resolveTarget(mc);
+        
         // setting messge ID if it null
         // if the transport to use for sending is not specified, try to find it
         // from the URL
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/engine/AxisEngine.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/engine/AxisEngine.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/engine/AxisEngine.java	(working copy)
@@ -213,6 +213,9 @@
         } else if (processingContext.getReplyTo() != null) {
             faultContext.setTo(processingContext.getReplyTo());
         }
+        
+        // do Target Resolution
+        faultContext.getConfigurationContext().getAxisConfiguration().getTargetResolverChain().resolveTarget(faultContext);
 
         //Determine that we have the correct transport available.
         TransportOutDescription transportOut = faultContext.getTransportOut();
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -16,22 +16,35 @@
 
 package org.apache.axis2.engine;
 
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+
 import org.apache.axis2.AxisFault;
-import org.apache.axis2.Constants;
+import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.deployment.util.PhasesInfo;
-import org.apache.axis2.description.*;
+import org.apache.axis2.description.AxisDescription;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisServiceGroup;
+import org.apache.axis2.description.ModuleConfiguration;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.phaseresolver.PhaseResolver;
-import org.apache.axis2.util.SessionUtils;
+import org.apache.axis2.util.TargetResolver;
 import org.apache.axis2.util.Utils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.ws.java2wsdl.Java2WSDLConstants;
 
-import javax.xml.namespace.QName;
-import java.net.URL;
-import java.util.*;
-
 /**
  * Class AxisConfiguration
  */
@@ -107,6 +120,8 @@
     //to keep tarck of system start or not
     private boolean start;
 
+    private ArrayList targetResolvers;
+    
     /**
      * Constructor AxisConfigurationImpl.
      */
@@ -126,6 +141,7 @@
         serviceClassLoader = Thread.currentThread().getContextClassLoader();
         moduleClassLoader = Thread.currentThread().getContextClassLoader();
         this.phasesinfo = new PhasesInfo();
+        targetResolvers = new ArrayList();
     }
 
     public void addMessageReceiver(String mepURL,
@@ -819,4 +835,26 @@
     public void setStart(boolean start) {
         this.start = start;
     }
+    
+    /**
+     * getTargetResolverChain returns and instance of
+     * TargetResolver which iterates over the registered
+     * TargetResolvers, calling each one in turn when
+     * resolveTarget is called
+     */
+    public TargetResolver getTargetResolverChain(){
+        TargetResolver result = new TargetResolver(){
+            public void resolveTarget(MessageContext messageContext) {
+                Iterator iter = targetResolvers.iterator();
+                while(iter.hasNext()){
+                    TargetResolver tr = (TargetResolver)iter.next();
+                    tr.resolveTarget(messageContext);
+                }
+            }};
+        return result;
+    }
+    
+    public void addTargetResolver(TargetResolver tr) {
+        targetResolvers.add(tr);
+    }
 }
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/util/Utils.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/util/Utils.java	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/util/Utils.java	(working copy)
@@ -67,6 +67,11 @@
 
         newmsgCtx.setMessageID(UUIDGenerator.getUUID());
         newmsgCtx.setTo(oldOptions.getReplyTo());
+        
+        // do Target Resolution
+        newmsgCtx.getConfigurationContext().getAxisConfiguration().getTargetResolverChain().resolveTarget(newmsgCtx);
+
+        
         newmsgCtx.getOptions().setAction(oldOptions.getAction());
 
         // add the service group id as a reference parameter
Index: E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/util/TargetResolver.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/util/TargetResolver.java	(revision 0)
+++ E:/work/axis2/workspace/axis2/modules/core/src/org/apache/axis2/util/TargetResolver.java	(revision 0)
@@ -0,0 +1,36 @@
+/*
+* Copyright 2006 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.util;
+
+import org.apache.axis2.context.MessageContext;
+
+/**
+ * TargetResolver
+ * 
+ * Interface to be implemented by code to update the invocation target URL
+ * before the transport is selected and the engine invoked.
+ * 
+ * Examples of use:
+ * 1. wsa:To set to a URN value which needs translated to a targetable URL
+ * 2. support clustering where a single URI may repesent multiple servers and one must be selected
+ */
+public interface TargetResolver {
+    /**
+     * resolveTarget examines the MessageContext and updates the MessageContext
+     * in order to resolve the target.
+     */
+    public void resolveTarget(MessageContext messageContext);
+}