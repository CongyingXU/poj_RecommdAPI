Index: modules/java2wsdl/src/org/apache/ws/java2wsdl/SchemaGenerator.java
===================================================================
--- modules/java2wsdl/src/org/apache/ws/java2wsdl/SchemaGenerator.java	(revision 503905)
+++ modules/java2wsdl/src/org/apache/ws/java2wsdl/SchemaGenerator.java	(working copy)
@@ -279,66 +279,128 @@
             // adding this type to the table
             typeTable.addComplexSchema(name, eltOuter.getQName());
 
-	    JClass tempClass = javaType;
-	    Set propertiesSet = new HashSet();
-	    while (tempClass != null && !"java.lang.Object".equals(tempClass.getQualifiedName())) {
-		JProperty[] tempProperties = tempClass.getDeclaredProperties();
-		for (int i = 0; i < tempProperties.length; i++) {
-		    propertiesSet.add(tempProperties[i]);
-		}
-		tempClass = tempClass.getSuperclass();
-	    }
-	    JProperty[] properties = (JProperty[]) propertiesSet.toArray(new JProperty[0]);
+            JClass tempClass = javaType;
+            Set propertiesSet = new HashSet();
+            Set propertiesNames = new HashSet() ;
+            Set FieldSet = new HashSet() ;
+	    
+            while (tempClass != null && !"java.lang.Object".equals(tempClass.getQualifiedName())) {
+            		
+            	JProperty[] tempProperties = tempClass.getDeclaredProperties();
+						
+            	for (int i = 0; i < tempProperties.length; i++) {
+            		propertiesSet.add(tempProperties[i]);
+            	}
+		
+		 
+            	tempClass = tempClass.getSuperclass();
+            }
+	    
+	    
+            JProperty[] properties = (JProperty[]) propertiesSet.toArray(new JProperty[0]);
             Arrays.sort(properties);
+            
             for (int i = 0; i < properties.length; i++) {
                 JProperty property = properties[i];
                 String propertyName = property.getType().getQualifiedName();
                 boolean isArryType = property.getType().isArrayType();
-                if (isArryType) {
-                    propertyName = property.getType().getArrayComponentType().getQualifiedName();
-                }
-                if (typeTable.isSimpleType(propertyName)) {
-                    XmlSchemaElement elt1 = new XmlSchemaElement();
-                    elt1.setName(getCorrectName(property.getSimpleName()));
-                    elt1.setSchemaTypeName(typeTable.getSimpleSchemaTypeName(propertyName));
-                    sequence.getItems().add(elt1);
-                    if (isArryType) {
-                        elt1.setMaxOccurs(Long.MAX_VALUE);
-                        elt1.setMinOccurs(1);
-                    }
-                    if (String.class.getName().equals(propertyName)) {
-                        elt1.setNillable(true);
-                    }
-                } else {
-                    if (isArryType) {
-                        generateSchema(property.getType().getArrayComponentType());
-                    } else {
-                        generateSchema(property.getType());
-                    }
-                    XmlSchemaElement elt1 = new XmlSchemaElement();
-                    elt1.setName(getCorrectName(property.getSimpleName()));
-                    elt1.setSchemaTypeName(typeTable.getComplexSchemaType(propertyName));
-                    sequence.getItems().add(elt1);
-                    if (isArryType) {
-                        elt1.setMaxOccurs(Long.MAX_VALUE);
-                        elt1.setMinOccurs(1);
-                    }
-                    elt1.setNillable(true);
+               
+                String propname = getCorrectName(property.getSimpleName()) ;
+                
+                
+                propertiesNames.add(propname) ;
+                
+                this.generateSchemaforFieldsandProperties(xmlSchema,sequence,property.getType(),propname, isArryType) ;
+                
+                           
+            } 
+            
+            // getDeclaredFields returns the fields of even the parent class
+            // unlike getDeclaredProperties
+            
+            JField[] tempFields = javaType.getDeclaredFields() ;
+            
+            for (int i = 0; i < tempFields.length; i++) {
+    			// create a element for the field only if it is public 
+            	// and there is no property with the same name
+            	            	
+            	if (tempFields[i].isPublic()) {
+    			
+    				if (!propertiesNames.contains(tempFields[i].getSimpleName()))
+    					FieldSet.add(tempFields[i]);
+    			}	
+    				
+     		}
+            
+            JField[] froperties = (JField[]) FieldSet.toArray(new JField[0]);
+            Arrays.sort(froperties);
+            for (int i = 0; i < froperties.length; i++) {
+                JField field = froperties[i];
+                String propertyName = field.getType().getQualifiedName();
+                boolean isArryType = field.getType().isArrayType();
+               
+                this.generateSchemaforFieldsandProperties(xmlSchema, sequence,field.getType(),field.getSimpleName(), isArryType) ;
+            }     
+            
+            
+            
+        }
+        return schemaTypeName;
+    }
 
-                    if (!((NamespaceMap) xmlSchema.getNamespaceContext()).values().
-                            contains(typeTable.getComplexSchemaType(propertyName).getNamespaceURI())) {
-                        XmlSchemaImport importElement = new XmlSchemaImport();
-                        importElement.setNamespace(typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
-                        xmlSchema.getItems().add(importElement);
-                        ((NamespaceMap) xmlSchema.getNamespaceContext()).
-                                put(generatePrefix(), typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
-                    }
-                }
+    private void generateSchemaforFieldsandProperties(XmlSchema xmlSchema,XmlSchemaSequence sequence, JClass type, String name, boolean isArryType) 
+    																	throws Exception {
+    	String propertyName ;
+    	
+    	if (isArryType) {
+            propertyName = type.getArrayComponentType().getQualifiedName();
+        } else
+        	propertyName = type.getQualifiedName() ;
+    	
+    	
+        if (typeTable.isSimpleType(propertyName)) {
+            XmlSchemaElement elt1 = new XmlSchemaElement();
+            elt1.setName(name);
+            elt1.setSchemaTypeName(typeTable.getSimpleSchemaTypeName(propertyName));
+            sequence.getItems().add(elt1);
+            if (isArryType) {
+                elt1.setMaxOccurs(Long.MAX_VALUE);
+                elt1.setMinOccurs(1);
             }
+            if (String.class.getName().equals(propertyName)) {
+                elt1.setNillable(true);
+            }
+        } else {
+            if (isArryType) {
+                generateSchema(type.getArrayComponentType());
+            } else {
+                generateSchema(type);
+            }
+            XmlSchemaElement elt1 = new XmlSchemaElement();
+            elt1.setName(name);
+            elt1.setSchemaTypeName(typeTable.getComplexSchemaType(propertyName));
+            sequence.getItems().add(elt1);
+            if (isArryType) {
+                elt1.setMaxOccurs(Long.MAX_VALUE);
+                elt1.setMinOccurs(1);
+            }
+            elt1.setNillable(true);
+
+            if (!((NamespaceMap) xmlSchema.getNamespaceContext()).values().
+                    contains(typeTable.getComplexSchemaType(propertyName).getNamespaceURI())) {
+                XmlSchemaImport importElement = new XmlSchemaImport();
+                importElement.setNamespace(typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
+                xmlSchema.getItems().add(importElement);
+                ((NamespaceMap) xmlSchema.getNamespaceContext()).
+                        put(generatePrefix(), typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
+            }
         }
-        return schemaTypeName;
+    	
+    	 	
+    	
     }
-
+    
+    
     private QName generateSchemaForType(XmlSchemaSequence sequence, JClass type, String partName) throws Exception {
         boolean isArrayType = type.isArrayType();
         if (isArrayType) {
