Index: C:/WS2/apache/axis2/r502006.axisengine/modules/kernel/src/org/apache/axis2/engine/AxisEngine.java
===================================================================
--- C:/WS2/apache/axis2/r502006.axisengine/modules/kernel/src/org/apache/axis2/engine/AxisEngine.java	(revision 502006)
+++ C:/WS2/apache/axis2/r502006.axisengine/modules/kernel/src/org/apache/axis2/engine/AxisEngine.java	(working copy)
@@ -65,7 +65,6 @@
     }
 
     private void checkMustUnderstand(MessageContext msgContext) throws AxisFault {
-        activateMessageContext(msgContext);
 
         if (!msgContext.isHeaderPresent()) {
             return;
@@ -132,7 +131,6 @@
      */
     public MessageContext createFaultMessageContext(MessageContext processingContext, Throwable e)
             throws AxisFault {
-        activateMessageContext(processingContext);
         return MessageContextBuilder.createFaultMessageContext(processingContext, e);
     }
    
@@ -150,7 +148,6 @@
         if(log.isTraceEnabled()){
             log.trace(msgContext.getLogIDString()+" receive:"+msgContext.getMessageID());
         }
-        activateMessageContext(msgContext);
         ConfigurationContext confContext = msgContext.getConfigurationContext();
         ArrayList preCalculatedPhases =
                 confContext.getAxisConfiguration().getGlobalInFlow();
@@ -217,7 +214,6 @@
      */
     public InvocationResponse invoke(MessageContext msgContext, boolean inbound, boolean resuming) throws AxisFault {
 
-        activateMessageContext(msgContext);
         if (msgContext.getCurrentHandlerIndex() == -1) {
             msgContext.setCurrentHandlerIndex(0);
         }
@@ -324,7 +320,6 @@
         if(log.isTraceEnabled()){
             log.trace(msgContext.getLogIDString()+" resumeReceive:"+msgContext.getMessageID());
         }
-        activateMessageContext(msgContext);
 
       //REVIEW: This name is a little misleading, as it seems to indicate that there should be a resumeReceiveFault as well, when, in fact, this does both 
       //REVIEW: Unlike with receive, there is no wrapping try/catch clause which would
@@ -369,7 +364,6 @@
         if(log.isTraceEnabled()){
             log.trace(msgContext.getLogIDString()+" resumeSend:"+msgContext.getMessageID());
         }
-        activateMessageContext(msgContext);
 
       //REVIEW: This name is a little misleading, as it seems to indicate that there should be a resumeSendFault as well, when, in fact, this does both 
       //REVIEW: Unlike with send, there is no wrapping try/catch clause which would
@@ -401,7 +395,6 @@
      */
     public InvocationResponse receiveFault(MessageContext msgContext) throws AxisFault {
 
-        activateMessageContext(msgContext);
     	log.debug(msgContext.getLogIDString()+" "+Messages.getMessage("receivederrormessage",
                 msgContext.getMessageID()));
         ConfigurationContext confContext = msgContext.getConfigurationContext();
@@ -466,7 +459,6 @@
         if(log.isTraceEnabled()){
             log.trace(msgctx.getLogIDString()+" resume:"+msgctx.getMessageID());
         }
-        activateMessageContext(msgctx);
 
         msgctx.setPaused(false);
         if (msgctx.getFLOW() == MessageContext.IN_FLOW) {
@@ -491,7 +483,6 @@
         if(log.isTraceEnabled()){
             log.trace(msgContext.getLogIDString()+" send:"+msgContext.getMessageID());
         }
-        activateMessageContext(msgContext);
         // find and invoke the Phases
         OperationContext operationContext = msgContext.getOperationContext();
         ArrayList executionChain = operationContext.getAxisOperation().getPhasesOutFlow();
@@ -561,7 +552,6 @@
         if(log.isTraceEnabled()){
             log.trace(msgContext.getLogIDString()+" sendFault:"+msgContext.getMessageID());
         }
-        activateMessageContext(msgContext);
         OperationContext opContext = msgContext.getOperationContext();
 
         //FIXME: If this gets paused in the operation-specific phases, the resume is not going to function correctly as the phases will not have all been set 
@@ -641,22 +631,6 @@
 
 
     /**
-     * Make sure that the MessageContext is in an active state.
-     * This means that the MessageContext is fully usable.
-     * If a message context had been re-constituted from 
-     * persistent storage, the message context may need
-     * to complete the restoration in order to be fully
-     * usable.
-     * 
-     * @param mc     MessageContext
-     */
-    private void activateMessageContext(MessageContext mc)
-    {
-        // make sure that the message context is in an active state
-        mc.activate(engineContext);
-    }
-
-    /**
      * This class is used when someone invoke a service invocation with two transports
      * If we dont create a new thread then the main thread will block untill it gets the
      * response . In the case of HTTP transportsender will block untill it gets HTTP 200
Index: C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/engine/PausingHandlerExecutionTest.java
===================================================================
--- C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/engine/PausingHandlerExecutionTest.java	(revision 502006)
+++ C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/engine/PausingHandlerExecutionTest.java	(working copy)
@@ -454,6 +454,7 @@
 
             System.out.println("Worker thread restoring message context from file");
             reconstitutedMessageContext = (MessageContext)objectInputStream.readObject();
+            reconstitutedMessageContext.activate(configurationContext);
         }
         else if (serializedMessageContext != null)
         {
@@ -462,6 +463,7 @@
 
             System.out.println("Worker thread restoring message context from byte array");
             reconstitutedMessageContext = (MessageContext)objectInputStream.readObject();
+            reconstitutedMessageContext.activate(configurationContext);
         }
         else if (msgContext != null)
         {
Index: C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/engine/MessageSaveAndRestoreTest.java
===================================================================
--- C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/engine/MessageSaveAndRestoreTest.java	(revision 502006)
+++ C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/engine/MessageSaveAndRestoreTest.java	(working copy)
@@ -204,6 +204,7 @@
                 System.out.println("MessageSaveAndRestoreTest:Resuming processing");
                 ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(serializedMessageContext));
                 MessageContext reconstitutedMessageContext = (MessageContext)objectInputStream.readObject();
+                reconstitutedMessageContext.activate(configurationContext);
                 axisEngine.resume(reconstitutedMessageContext);
             }
             catch (Exception e)
Index: C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/mtom/MessageSaveAndRestoreWithMTOMTest.java
===================================================================
--- C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/mtom/MessageSaveAndRestoreWithMTOMTest.java	(revision 502006)
+++ C:/WS2/apache/axis2/r502006.axisengine/modules/integration/test/org/apache/axis2/mtom/MessageSaveAndRestoreWithMTOMTest.java	(working copy)
@@ -261,6 +261,7 @@
                 System.out.println("MessageSaveAndRestoreWithMTOMTest:Resuming processing");
                 ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(serializedMessageContext));
                 MessageContext reconstitutedMessageContext = (MessageContext)objectInputStream.readObject();
+                reconstitutedMessageContext.activate(configurationContext);
                 axisEngine.resume(reconstitutedMessageContext);
             }
             catch (Exception e)
