Index: E:/work/axis2/workspace/axis2/modules/integration/test/org/apache/axis2/deployment/TestTargetResolver.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/integration/test/org/apache/axis2/deployment/TestTargetResolver.java	(revision 0)
+++ E:/work/axis2/workspace/axis2/modules/integration/test/org/apache/axis2/deployment/TestTargetResolver.java	(revision 0)
@@ -0,0 +1,34 @@
+/*
+* Copyright 2006 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.deployment;
+
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.util.TargetResolver;
+
+public class TestTargetResolver implements TargetResolver{
+
+    public void resolveTarget(MessageContext messageContext) {
+        System.out.println("resolveTarget:" +messageContext.getTo().getAddress());
+        if(messageContext.getTo().getAddress().equals("http://ws.apache.org/new/anonymous/address")){
+            messageContext.getTo().setAddress(AddressingConstants.Final.WSA_ANONYMOUS_URL);
+        }else if(messageContext.getTo().getAddress().startsWith("trtest://")){
+            messageContext.getTo().setAddress("http://127.0.0.1:"+messageContext.getTo().getAddress().substring(9));
+        }
+        System.out.println("resolveTarget:" +messageContext.getTo().getAddress());
+    }
+
+}
Index: E:/work/axis2/workspace/axis2/modules/integration/test/org/apache/axis2/deployment/TargetResolverServiceTest.java
===================================================================
--- E:/work/axis2/workspace/axis2/modules/integration/test/org/apache/axis2/deployment/TargetResolverServiceTest.java	(revision 0)
+++ E:/work/axis2/workspace/axis2/modules/integration/test/org/apache/axis2/deployment/TargetResolverServiceTest.java	(revision 0)
@@ -0,0 +1,156 @@
+/*
+* Copyright 2004,2005,2006 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*
+*
+*/
+
+package org.apache.axis2.deployment;
+
+import javax.xml.namespace.QName;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.OutInAxisOperation;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.engine.Echo;
+import org.apache.axis2.engine.util.TestConstants;
+import org.apache.axis2.integration.UtilServer;
+import org.apache.axis2.integration.UtilServerBasedTestCase;
+import org.apache.axis2.receivers.AbstractMessageReceiver;
+import org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver;
+import org.apache.axis2.receivers.RawXMLINOutMessageReceiver;
+import org.apache.axis2.util.Utils;
+import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+
+public class TargetResolverServiceTest extends UtilServerBasedTestCase implements TestConstants {
+
+	private static final Log log = LogFactory.getLog(TargetResolverServiceTest.class);
+    protected QName transportName = new QName("http://localhost/my",
+            "NullTransport");
+    
+    // 2 special urls that the TestTargetResolver will modify into ones that can be targeted
+    EndpointReference targetEPR = new EndpointReference(
+            "trtest://" + (UtilServer.TESTING_PORT) + "/axis2/services/EchoXMLService/echoOMElement");
+
+    EndpointReference replyTo = new EndpointReference(
+            "http://ws.apache.org/new/anonymous/address");
+    
+    protected AxisConfiguration engineRegistry;
+    protected MessageContext mc;
+    protected ServiceContext serviceContext;
+    protected AxisService echoService;
+    protected AxisService rrService;
+
+    public static Test suite() {
+        return getTestSetup2(new TestSuite(TargetResolverServiceTest.class),Constants.TESTING_PATH+"deployment_repo");
+    }
+
+    protected void setUp() throws Exception {
+        echoService = Utils.createSimpleService(serviceName,
+                new RawXMLINOutMessageReceiver(),
+                Echo.class.getName(),
+                operationName);
+        UtilServer.deployService(echoService);
+    }
+    
+    protected void tearDown() throws Exception {
+        UtilServer.unDeployService(serviceName);
+        UtilServer.unDeployClientService();
+    }
+    
+    public static AxisService createSimpleServiceforClient(QName serviceName,
+            String className,
+            QName opName)
+    throws AxisFault {
+        AxisService service = new AxisService(serviceName.getLocalPart());
+        
+        service.setClassLoader(Thread.currentThread().getContextClassLoader());
+        service.addParameter(new Parameter(AbstractMessageReceiver.SERVICE_CLASS, className));
+        
+        AxisOperation axisOp = new OutInAxisOperation(opName);
+        
+        axisOp.setMessageReceiver(new RawXMLINOnlyMessageReceiver());
+        axisOp.setStyle(WSDLConstants.STYLE_RPC);
+        service.addOperation(axisOp);
+        
+        return service;
+    }
+    
+    public void testEchoToReplyTo() throws Exception {
+        OMElement method = createEchoOMElement("this message should not cause a fault.");
+        ServiceClient sender = null;
+        try {
+            sender = createServiceClient();
+            OMElement result = sender.sendReceive(operationName, method);
+            assertEquals("echoOMElementResponse", result.getLocalName());
+        } finally {
+            if (sender != null)
+                sender.finalizeInvoke();
+        }
+    }
+    
+    private OMElement createEchoOMElement(String text){
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+
+        OMNamespace omNs = fac.createOMNamespace("http://localhost/my", "my");
+        OMElement method = fac.createOMElement("echoOMElement", omNs);
+        OMElement value = fac.createOMElement("myValue", omNs);
+        value.setText(text);
+        method.addChild(value);
+        
+        return method;
+    }
+    
+    private ServiceClient createServiceClient() throws AxisFault{
+        AxisService service =
+            createSimpleServiceforClient(serviceName,
+                        Echo.class.getName(),
+                        operationName);
+
+        ConfigurationContext configcontext = UtilServer.createClientConfigurationContext(Constants.TESTING_PATH+"deployment_repo");
+        ServiceClient sender = null;
+        
+        Options options = new Options();
+        options.setTo(targetEPR);
+        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+        options.setAction(operationName.getLocalPart());
+        options.setReplyTo(replyTo);
+
+        sender = new ServiceClient(configcontext, service);
+        sender.setOptions(options);
+        sender.engageModule(new QName("addressing"));
+        
+        return sender;
+    }
+}
Index: E:/work/axis2/workspace/axis2/modules/integration/maven.xml
===================================================================
--- E:/work/axis2/workspace/axis2/modules/integration/maven.xml	(revision 428288)
+++ E:/work/axis2/workspace/axis2/modules/integration/maven.xml	(working copy)
@@ -821,8 +821,19 @@
             <jar jarfile="target/test-resources/mtom_sec_service_repo/services/PingPort.aar"
                  basedir="../security/target/interop/classes"/>
 
-
-            <!-- Test with addressing and MTOM  -->
+        	<!-- Test with target resolver  -->
+			<mkdir dir="target/test-resources/deployment_repo"/>
+        	<mkdir dir="target/test-resources/deployment_repo/conf"/>
+       		<mkdir dir="target/test-resources/deployment_repo/services"/>
+       		<mkdir dir="target/test-resources/deployment_repo/modules"/>
+        	
+        	<copy file="test-resources/deployment/deployment.both.axis2.xml"
+        	                  tofile="target/test-resources/deployment_repo/conf/axis2.xml"/>
+        	<copy file="../addressing/target/addressing-${addressing_version}.mar"
+        	                  tofile="target/test-resources/deployment_repo/modules/addressing-${addressing_version}.mar"/>
+        	
+       			
+        	<!-- Test with addressing and MTOM  -->
             <mkdir dir="target/test-resources/complete_client_repo"/>
             <mkdir dir="target/test-resources/complete_client_repo/conf"/>
             <mkdir dir="target/test-resources/complete_client_repo/modules"/>
Index: E:/work/axis2/workspace/axis2/modules/integration/test-resources/deployment/deployment.both.axis2.xml
===================================================================
--- E:/work/axis2/workspace/axis2/modules/integration/test-resources/deployment/deployment.both.axis2.xml	(revision 0)
+++ E:/work/axis2/workspace/axis2/modules/integration/test-resources/deployment/deployment.both.axis2.xml	(revision 0)
@@ -0,0 +1,137 @@
+<axisconfig name="AxisJava2.0">
+    <parameter name="hotdeployment" locked="false">true</parameter>
+    <parameter name="hotupdate" locked="false">true</parameter>
+    <parameter name="enableMTOM" locked="false">true</parameter>
+
+    <messageReceiver mep="INOUT" class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+
+    <!-- Engage the addressing module -->
+    <module ref="addressing"/>
+
+    <!-- Target Resolver for TargetResolverTest -->
+    <targetResolvers>
+    	<targetResolver class="org.apache.axis2.deployment.TestTargetResolver" />
+    </targetResolvers>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http" class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port" locked="false">6060</parameter>
+    </transportReceiver>
+
+    <!-- Uncomment this one with the appropriate papameters to enable the SMTP transport Receiver
+    <transportReceiver name="mail" class="org.apache.axis2.transport.mail.SimpleMailListener">
+          <parameter name="transport.mail.pop3.host" locked="false">127.0.0.1</parameter>
+          <parameter name="transport.mail.pop3.user" locked="false">axis2</parameter>
+          <parameter name="transport.mail.pop3.password" locked="false">axis2</parameter>
+          <parameter name="transport.mail.pop3.port" locked="false">110</parameter>
+          <parameter name="transport.mail.replyToAddress" locked="false">axis2@127.0.0.1</parameter>
+      </transportReceiver> -->
+
+    <transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port" locked="false">6060</parameter>
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="local" class="org.apache.axis2.transport.local.LocalTransportSender"/>
+    <transportSender name="jms" class="org.apache.axis2.transport.jms.JMSSender"/>
+    <transportSender name="http" class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.0</parameter>
+    </transportSender>
+    <transportSender name="https" class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+    </transportSender>
+
+    <!-- Uncomment this one with the appropriate papameters to enable the SMTP transport Receiver
+   <transportSender name="mail" class="org.apache.axis2.transport.mail.MailTransportSender">
+       <parameter name="transport.mail.smtp.host" locked="false">127.0.0.1</parameter>
+       <parameter name="transport.mail.smtp.user" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.password" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.port" locked="false">25</parameter>
+   </transportSender>
+   -->
+  <phaseOrder type="inflow">
+        <!--  System pre defined phases       -->
+         <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="PostDispatch"/>
+            </handler>
+        </phase>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+    </phaseOrder>
+    <phaseOrder type="outflow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+    <phaseOrder type="INfaultflow">
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="PostDispatch"/>
+            </handler>
+        </phase>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+    </phaseOrder>
+    <phaseOrder type="Outfaultflow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+
+</axisconfig>
+