Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/CEmitter.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/CEmitter.java	(revision 479883)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/CEmitter.java	(working copy)
@@ -18,6 +18,7 @@
 import org.apache.axis2.wsdl.codegen.CodeGenerationException;
 import org.apache.axis2.wsdl.codegen.writer.*;
 import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.axis2.wsdl.util.CUtils;
 import org.apache.axis2.util.JavaUtils;
 import org.apache.axis2.util.Utils;
 import org.apache.axis2.util.PolicyUtil;
@@ -317,8 +318,8 @@
     protected String makeCClassName(String word) {
         //currently avoid only java key words and service names with '.' characters
 
-        if (JavaUtils.isJavaKeyword(word)) {
-            return JavaUtils.makeNonJavaKeyword(word);
+        if (CUtils.isCKeyword(word)) {
+            return CUtils.makeNonCKeyword(word);
         }
         return word.replace('.', '_');
     }
@@ -333,7 +334,7 @@
      */
     protected boolean loadOperations(Document doc, Element rootElement, String mep) {
         Element methodElement;
-        String portTypeName = makeJavaClassName(axisService.getName());
+        String portTypeName = makeCClassName(axisService.getName());
 
         Iterator operations = axisService.getOperations();
         boolean opsFound = false;
Index: modules/codegen/src/org/apache/axis2/wsdl/util/CUtils.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/util/CUtils.java	(revision 0)
+++ modules/codegen/src/org/apache/axis2/wsdl/util/CUtils.java	(revision 0)
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.wsdl.util;
+
+import java.util.Arrays;
+import java.util.Locale;
+import java.text.Collator;
+
+public class CUtils {
+    /**
+     * These are C keywords as specified at the following URL (sorted alphabetically).
+     * http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#229308
+     * Note that false, true, and null are not strictly keywords; they are literal values,
+     * but for the purposes of this array, they can be treated as literals.
+     * ****** PLEASE KEEP THIS LIST SORTED IN ASCENDING ORDER ******
+     */
+    static final String keywords[] =
+            {
+                    "auto", "double", "int", "struct",
+                    "break", "else", "long", "switch",
+                    "case", "enum", "register", "typedef",
+                    "char", "extern", "return", "union",
+                    "const", "float", "short", "unsigned",
+                    "continue", "for", "signed", "void",
+                    "default", "goto", "sizeof", "volatile",
+                    "do", "if", "static", "while"
+            };
+
+    /**
+     * Collator for comparing the strings
+     */
+    static final Collator englishCollator = Collator.getInstance(Locale.ENGLISH);
+
+    /**
+     * Use this character as suffix
+     */
+    static final char keywordPrefix = '_';
+
+
+    /**
+     * Checks if the input string is a valid C keyword.
+     *
+     * @return Returns boolean.
+     */
+    public static boolean isCKeyword(String keyword) {
+        return (Arrays.binarySearch(keywords, keyword, englishCollator) >= 0);
+    }
+
+    /**
+     * Turns a C keyword string into a non-C keyword string.  (Right now
+     * this simply means appending an underscore.)
+     */
+    public static String makeNonCKeyword(String keyword) {
+        return keywordPrefix + keyword;
+    }
+
+
+}
