Index: src/org/apache/axis2/addressing/ServiceName.java
===================================================================
--- src/org/apache/axis2/addressing/ServiceName.java	(.../trunk/java/modules/kernel)	(revision 614841)
+++ src/org/apache/axis2/addressing/ServiceName.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -1,88 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements. See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership. The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-
-package org.apache.axis2.addressing;
-
-import javax.xml.namespace.QName;
-
-/**
- * @deprecated I don't think this class is used anywhere. Shout if this is not the case.
- *             Class ServiceName
- */
-public class ServiceName {
-
-    /**
-     * Field name
-     */
-    private QName name;
-
-    /**
-     * Field portName
-     */
-    private String portName;
-
-    /**
-     * @param name
-     */
-    public ServiceName(QName name) {
-        this.name = name;
-    }
-
-    /**
-     * @param name
-     * @param portName
-     */
-    public ServiceName(QName name, String portName) {
-        this.name = name;
-        this.portName = portName;
-    }
-
-    /**
-     * Method getName
-     */
-    public QName getName() {
-        return name;
-    }
-
-    /**
-     * Method getPortName
-     */
-    public String getPortName() {
-        return portName;
-    }
-
-    /**
-     * Method setName
-     *
-     * @param name
-     */
-    public void setName(QName name) {
-        this.name = name;
-    }
-
-    /**
-     * Method setPortName
-     *
-     * @param portName
-     */
-    public void setPortName(String portName) {
-        this.portName = portName;
-    }
-}
Index: src/org/apache/axis2/addressing/EndpointReferenceHelper.java
===================================================================
--- src/org/apache/axis2/addressing/EndpointReferenceHelper.java	(.../trunk/java/modules/kernel)	(revision 614841)
+++ src/org/apache/axis2/addressing/EndpointReferenceHelper.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -28,6 +28,8 @@
 import org.apache.axiom.om.util.ElementHelper;
 import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.metadata.ServiceName;
+import org.apache.axis2.addressing.metadata.WSDLLocation;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -54,24 +56,51 @@
 
     /**
      * Populates an endpoint reference based on the <code>OMElement</code> and
-     * WS-Addressing namespace that is passed in. If the string passed in is not
-     * recognized as a valid WS-Addressing namespace then this method behaves as
-     * if http://www.w3.org/2005/08/addressing has been passed in.
+     * WS-Addressing namespace that is passed in.
      *
      * @param epr                 an endpoint reference instance to hold the info.
      * @param eprOMElement        an element of endpoint reference type
      * @param addressingNamespace the namespace of the WS-Addressing spec to comply with.
-     * @throws AxisFault if unable to locate an address element
+     * @throws AxisFault if unable to locate an address element, or if the specified namespace
+     * is different to the actual namespace.
      * @see #fromOM(OMElement)
      */
     public static void fromOM(EndpointReference epr, OMElement eprOMElement,
                               String addressingNamespace) throws AxisFault {
+        String namespace = fromOM(epr, eprOMElement);
+        
+        if (!namespace.equals(addressingNamespace))
+            throw new AxisFault("The endpoint reference does not match the specified namespace.");
+    }
+
+    /**
+     * Populates an endpoint reference based on the <code>OMElement</code>. Returns the
+     * WS-Addressing namespace that the endpoint reference is in compliance with.
+     * 
+     * @param epr          an endpoint reference instance to hold the info.
+     * @param eprOMElement an element of endpoint reference type
+     * @return a string representing the namespace of the endpoint reference.
+     * @throws AxisFault if unable to locate an address element.
+     */
+    public static String fromOM(EndpointReference epr, OMElement eprOMElement)
+    throws AxisFault {
         boolean isFinalAddressingNamespace = false;
         Map map = null;
 
         //First pass, identify the addressing namespace.
-        if (AddressingConstants.Submission.WSA_NAMESPACE.equals(addressingNamespace)) {
-            OMElement address = eprOMElement.getFirstChildWithName(
+        OMElement address = eprOMElement
+                .getFirstChildWithName((QName) finalQNames.get(AddressingConstants.EPR_ADDRESS));
+
+        if (address != null) {
+            map = finalQNames;
+            isFinalAddressingNamespace = true;
+
+            if (log.isDebugEnabled()) {
+                log.debug("fromOM: Found address element for namespace, " +
+                        AddressingConstants.Final.WSA_NAMESPACE);
+            }
+        } else {
+            address = eprOMElement.getFirstChildWithName(
                     (QName) submissionQNames.get(AddressingConstants.EPR_ADDRESS));
 
             if (address != null) {
@@ -86,26 +115,12 @@
                 throw new AxisFault(
                         "Unable to locate an address element for the endpoint reference type.");
             }
-        } else {
-            OMElement address = eprOMElement.getFirstChildWithName(
-                    (QName) finalQNames.get(AddressingConstants.EPR_ADDRESS));
-
-            if (address != null) {
-                map = finalQNames;
-                isFinalAddressingNamespace = true;
-
-                if (log.isDebugEnabled()) {
-                    log.debug("fromOM: Found address element for namespace, " +
-                            AddressingConstants.Final.WSA_NAMESPACE);
-                }
-            } else {
-                throw new AxisFault(
-                        "Unable to locate an address element for the endpoint reference type.");
-            }
         }
 
         //Second pass, identify the properties.
         fromOM(epr, eprOMElement, map, isFinalAddressingNamespace);
+
+        return ((QName) map.get(AddressingConstants.EPR_ADDRESS)).getNamespaceURI();
     }
 
     /**
@@ -117,6 +132,7 @@
      *
      * @param eprString string from the element of endpoint reference type
      * @throws AxisFault if unable to locate an address element
+     * @deprecated use {@link #fromString(String)} instead.
      */
     public static EndpointReference fromOM(String eprString) throws AxisFault {
         try {
@@ -128,6 +144,25 @@
     }
 
     /**
+     * Populates an endpoint reference based on the <code>String</code> that is
+     * passed in. If the http://schemas.xmlsoap.org/ws/2004/08/addressing namespace
+     * is in effect then any reference properties will be saved as reference parameters.
+     * Regardless of the addressing namespace in effect, any elements present in the
+     * <code>String</code> that are not recognised are saved as extensibility elements.
+     *
+     * @param eprString string from the element of endpoint reference type
+     * @throws AxisFault if unable to locate an address element
+     */
+    public static EndpointReference fromString(String eprString) throws AxisFault {
+        try {
+            return fromOM(new StAXOMBuilder(
+                    new ByteArrayInputStream(eprString.getBytes())).getDocumentElement());
+        } catch (XMLStreamException e) {
+            throw AxisFault.makeFault(e);
+        }
+    }
+
+    /**
      * Populates an endpoint reference based on the <code>OMElement</code> that is
      * passed in. If the http://schemas.xmlsoap.org/ws/2004/08/addressing namespace
      * is in effect then any reference properties will be saved as reference parameters.
@@ -139,42 +174,8 @@
      */
     public static EndpointReference fromOM(OMElement eprOMElement) throws AxisFault {
         EndpointReference epr = new EndpointReference("");
-        boolean isFinalAddressingNamespace = false;
-        Map map = null;
+        fromOM(epr, eprOMElement);
 
-        //First pass, identify the addressing namespace.
-        OMElement address = eprOMElement
-                .getFirstChildWithName((QName) finalQNames.get(AddressingConstants.EPR_ADDRESS));
-
-        if (address != null) {
-            map = finalQNames;
-            isFinalAddressingNamespace = true;
-
-            if (log.isDebugEnabled()) {
-                log.debug("fromOM: Found address element for namespace, " +
-                        AddressingConstants.Final.WSA_NAMESPACE);
-            }
-        } else {
-            address = eprOMElement.getFirstChildWithName(
-                    (QName) submissionQNames.get(AddressingConstants.EPR_ADDRESS));
-
-            if (address != null) {
-                map = submissionQNames;
-                isFinalAddressingNamespace = false;
-
-                if (log.isDebugEnabled()) {
-                    log.debug("fromOM: Found address element for namespace, " +
-                            AddressingConstants.Submission.WSA_NAMESPACE);
-                }
-            } else {
-                throw new AxisFault(
-                        "Unable to locate an address element for the endpoint reference type.");
-            }
-        }
-
-        //Second pass, identify the properties.
-        fromOM(epr, eprOMElement, map, isFinalAddressingNamespace);
-
         return epr;
     }
 
@@ -231,8 +232,8 @@
             if (addressAttributes != null) {
                 Iterator attrIter = addressAttributes.iterator();
                 while (attrIter.hasNext()) {
-                    OMAttribute omAttributes = (OMAttribute) attrIter.next();
-                    addressE.addAttribute(omAttributes);
+                    OMAttribute omAttribute = (OMAttribute) attrIter.next();
+                    AttributeHelper.importOMAttribute(omAttribute, addressE);
                 }
             }
 
@@ -250,8 +251,8 @@
                 if (metadataAttributes != null) {
                     Iterator attrIter = metadataAttributes.iterator();
                     while (attrIter.hasNext()) {
-                        OMAttribute omAttributes = (OMAttribute) attrIter.next();
-                        metadataE.addAttribute(omAttributes);
+                        OMAttribute omAttribute = (OMAttribute) attrIter.next();
+                        AttributeHelper.importOMAttribute(omAttribute, metadataE);
                     }
                 }
             }
@@ -355,7 +356,117 @@
             log.debug("fromOM: Endpoint reference, " + epr);
         }
     }
+    
+    /**
+     * 
+     * @param epr
+     * @param addressingNamespace
+     * @return
+     * @throws AxisFault
+     */
+    public static ServiceName getServiceNameMetadata(EndpointReference epr, String addressingNamespace) throws AxisFault {
+        ServiceName serviceName = new ServiceName();
+        List elements = null;
+        
+        if (AddressingConstants.Submission.WSA_NAMESPACE.equals(addressingNamespace))
+            elements = epr.getExtensibleElements();
+        else
+            elements = epr.getMetaData();
+        
+        if (elements != null) {
+            //Retrieve the service name and endpoint name.
+            for (int i = 0, size = elements.size(); i < size; i++) {
+                OMElement omElement = (OMElement) elements.get(i);
+                if (ServiceName.isServiceNameElement(omElement)) {
+                    try {
+                        serviceName.fromOM(omElement);
+                        break;
+                    }
+                    catch (Exception e) {
+                        //TODO NLS enable.
+                        throw new AxisFault("Metadata conversion error.", e);
+                    }
+                }
+            }
+        }
+        
+        return serviceName;
+    }
+    
+    /**
+     * 
+     * @param epr
+     * @param addressingNamespace
+     * @return
+     * @throws AxisFault
+     */
+    public static WSDLLocation getWSDLLocationMetadata(EndpointReference epr, String addressingNamespace) throws AxisFault {
+        WSDLLocation wsdlLocation = new WSDLLocation();
+        List attributes = null;
 
+        if (AddressingConstants.Submission.WSA_NAMESPACE.equals(addressingNamespace))
+            attributes = epr.getAttributes();
+        else
+            attributes = epr.getMetadataAttributes();
+        
+        if (attributes != null) {
+            //Retrieve the wsdl location.
+            for (int i = 0, size = attributes.size(); i < size; i++) {
+                OMAttribute omAttribute = (OMAttribute) attributes.get(i);
+                if (WSDLLocation.isWSDLLocationAttribute(omAttribute)) {
+                    try {
+                        wsdlLocation.fromOM(omAttribute);
+                        break;
+                    }
+                    catch (Exception e) {
+                        //TODO NLS enable.
+                        throw new AxisFault("Metadata conversion error.", e);
+                    }
+                }
+            }
+        }
+        
+        return wsdlLocation;
+    }
+
+    /**
+     * 
+     * @param epr
+     * @param addressingNamespace
+     * @param serviceName
+     * @throws AxisFault
+     */
+    public static void setServiceNameMetadata(EndpointReference epr, String addressingNamespace, ServiceName serviceName) throws AxisFault {
+        if (AddressingConstants.Submission.WSA_NAMESPACE.equals(addressingNamespace)) {
+            OMElement omElement = serviceName.toOM(ServiceName.subQName);
+            epr.addExtensibleElement(omElement);
+        }
+        else {
+            OMElement omElement = serviceName.toOM(ServiceName.finalQName);
+            epr.addMetaData(omElement);
+        }
+    }
+    
+    /**
+     * 
+     * @param epr
+     * @param addressingNamespace
+     * @return
+     * @throws AxisFault
+     */
+    public static void setWSDLLocationMetadata(EndpointReference epr, String addressingNamespace, WSDLLocation wsdlLocation) throws AxisFault {
+        OMAttribute attribute = wsdlLocation.toOM();
+
+        if (AddressingConstants.Submission.WSA_NAMESPACE.equals(addressingNamespace)) {
+            epr.addAttribute(attribute);
+        }
+        else {
+            ArrayList list = new ArrayList();
+            list.add(attribute);
+            epr.setMetadataAttributes(list);
+        }
+    }
+    
     static {
         finalQNames.put(AddressingConstants.EPR_ADDRESS, new QName(
                 AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.EPR_ADDRESS));
Index: src/org/apache/axis2/addressing/AddressingConstants.java
===================================================================
--- src/org/apache/axis2/addressing/AddressingConstants.java	(.../trunk/java/modules/kernel)	(revision 614841)
+++ src/org/apache/axis2/addressing/AddressingConstants.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -16,8 +16,6 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-
-
 package org.apache.axis2.addressing;
 
 import javax.xml.namespace.QName;
@@ -46,6 +44,7 @@
     static final String PARAM_SERVICE_GROUP_CONTEXT_ID =
             "ServiceGroupContextIdFromAddressing";
     static final String IS_ADDR_INFO_ALREADY_PROCESSED = "IsAddressingProcessed";
+    static final String DISABLE_ADDRESSING_HANDLERS = "disableAddressingHandlers";
     static final String ADDR_VALIDATE_ACTION = "addressing.validateAction";
 
     // ====================== WSDL Binding Constants ========================
@@ -135,9 +134,9 @@
         static final String WSA_NAMESPACE =
                 "http://www.w3.org/2005/08/addressing";
         static final String WSAW_NAMESPACE =
-                "http://www.w3.org/2006/05/addressing/wsdl";
+            "http://www.w3.org/2006/05/addressing/wsdl";
         static final String WSAM_NAMESPACE = 
-        		"http://www.w3.org/2007/05/addressing/metadata";
+        	"http://www.w3.org/2007/05/addressing/metadata";
         /**
          * @deprecated use {@link #WSA_DEFAULT_RELATIONSHIP_TYPE} instead.
          */
@@ -156,6 +155,7 @@
         static final String WSA_SERVICE_NAME_ENDPOINT_NAME = "EndpointName";
         static final String WSA_POLICIES = "Policies";
         static final String WSA_METADATA = "Metadata";
+        static final String WSA_DEFAULT_METADATA_PREFIX = "wsam";
 
         static final String WSA_INTERFACE_NAME = "InterfaceName";
 
@@ -215,6 +215,8 @@
         static final String EPR_REFERENCE_PROPERTIES = "ReferenceProperties";
         static final String WSA_FAULT_ACTION =
                 "http://schemas.xmlsoap.org/ws/2004/08/addressing/fault";
+        static final String WSA_SERVICE_NAME_ENDPOINT_NAME = "PortName";
+        static final String WSA_INTERFACE_NAME = "PortType";
 
         // fault information
         static final String FAULT_INVALID_HEADER = "InvalidMessageInformationHeader";
Index: src/org/apache/axis2/addressing/metadata/InterfaceName.java
===================================================================
--- src/org/apache/axis2/addressing/metadata/InterfaceName.java	(.../trunk/java/modules/kernel)	(revision 0)
+++ src/org/apache/axis2/addressing/metadata/InterfaceName.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -0,0 +1,157 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.addressing.metadata;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.AddressingConstants.Submission;
+import org.apache.axis2.addressing.AddressingConstants.Final;
+
+public class InterfaceName {
+    public static final QName subQName = new QName(Submission.WSA_NAMESPACE, Submission.WSA_INTERFACE_NAME, AddressingConstants.WSA_DEFAULT_PREFIX);
+    public static final QName finalQName = new QName(Final.WSAM_NAMESPACE, Final.WSA_INTERFACE_NAME, Final.WSA_DEFAULT_METADATA_PREFIX);
+    
+    /**
+     * Field name
+     */
+    private QName name;
+
+    /**
+     * 
+     */
+    public InterfaceName() {
+    }
+
+    /**
+     * @param name
+     */
+    public InterfaceName(QName name) {
+        this.name = name;
+    }
+
+    /**
+     * Method getName
+     */
+    public QName getName() {
+        return name;
+    }
+
+    /**
+     * Method setName
+     *
+     * @param name
+     */
+    public void setName(QName name) {
+        this.name = name;
+    }
+    
+    /**
+     * Convenience method to convert objects of this type to an {@link OMElement} so that it
+     * can be added to an {@link org.apache.axis2.addressing.EndpointReference}
+     * 
+     * <p>Use:</p>
+     * <p>
+     * OMElement omElement =
+     * serviceName.toOM(new QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "PortType", "wsa"));
+     * </p>
+     * <p>or</p>
+     * <p>
+     * OMElement omElement =
+     * serviceName.toOM(new QName("http://www.w3.org/2007/02/addressing/metadata", "InterfaceName", "wsam"));
+     * </p>
+     * <p>
+     * the difference being whether the EndpointReference is meant to represent a 2004/08
+     * (Submission) or 2005/08 (Final) EndpointReference, respectively.
+     * </p>
+     * 
+     * @param qname the <code>QName</code> that carries the namespace of the metadata element.
+     * @return an OMElement that can be added to the metadata of an EndpointReference.
+     */
+    public OMElement toOM(QName qname) throws AxisFault {
+        String prefix = qname.getPrefix();
+        if (prefix == null) {
+            throw new AxisFault("The prefix cannot be null.");
+        }
+        
+        String localName = qname.getLocalPart();
+        if (!Final.WSA_INTERFACE_NAME.equals(localName) && !Submission.WSA_INTERFACE_NAME.equals(localName)) {
+            throw new AxisFault("The local name must be 'InterfaceName' or 'PortType'.");
+        }
+        
+        String namespace = qname.getNamespaceURI();
+        if (namespace == null) {
+            throw new AxisFault("The namespace canot be null.");
+        }
+            
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace metadataNs = fac.createOMNamespace(namespace, prefix);
+        OMElement element = fac.createOMElement(localName, metadataNs);
+        element.setText(name);
+
+        return element;
+    }
+    
+    /**
+     * Convenience method to extract metadata from an element.
+     * 
+     * <p>
+     * &lt;wsam:InterfaceName xmlns:wsam="http://www.w3.org/2007/02/addressing/metadata"&gt;...&lt;/wsam:ServiceName&gt;
+     * </p>
+     * <p>or</p>
+     * <p>
+     * &lt;wsa:PortType xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"&gt;...&lt;/wsa:ServiceName&gt;
+     * </p>
+     * 
+     * @param omElement the <code>OMElement</code> that holds the metadata.
+     */
+    public void fromOM(OMElement omElement) throws AxisFault {
+        QName qname = omElement.getQName();
+        
+        if (!finalQName.equals(qname) && !subQName.equals(qname)) {
+            throw new AxisFault("Unrecognized element.");
+        }
+
+        name = omElement.getTextAsQName();
+    }
+    
+    /**
+     * Static method to test whether an <code>OMElement</code> is recognized
+     * as a ServiceName element. If this method returns <code>true</code> then
+     * {@link #fromOM(OMElement)} is guaranteed not to fail.
+     * 
+     * @param omElement the <code>OMElement</code> to test.
+     * @return <code>true</code> if the element is a ServiceName element,
+     * <code>false</code> otherwise.
+     */
+    public static boolean isInterfaceNameElement(OMElement omElement) {
+        boolean result = false;
+        QName qname = omElement.getQName();
+        
+        if (finalQName.equals(qname) || subQName.equals(qname))
+            result = true;
+        
+        return result;
+    }
+}
Index: src/org/apache/axis2/addressing/metadata/ServiceName.java
===================================================================
--- src/org/apache/axis2/addressing/metadata/ServiceName.java	(.../trunk/java/modules/kernel)	(revision 0)
+++ src/org/apache/axis2/addressing/metadata/ServiceName.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -0,0 +1,202 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.addressing.metadata;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.AddressingConstants.Submission;
+import org.apache.axis2.addressing.AddressingConstants.Final;
+
+public class ServiceName {
+    public static final QName subQName = new QName(Submission.WSA_NAMESPACE, AddressingConstants.EPR_SERVICE_NAME, AddressingConstants.WSA_DEFAULT_PREFIX);
+    public static final QName finalQName = new QName(Final.WSAM_NAMESPACE, AddressingConstants.EPR_SERVICE_NAME, Final.WSA_DEFAULT_METADATA_PREFIX);
+    
+    /**
+     * Field name
+     */
+    private QName name;
+
+    /**
+     * Field portName
+     */
+    private String endpointName;
+    
+    /**
+     * 
+     *
+     */
+    public ServiceName() {
+    }
+
+    /**
+     * @param name
+     */
+    public ServiceName(QName name) {
+        this.name = name;
+    }
+
+    /**
+     * @param name
+     * @param endpointName
+     */
+    public ServiceName(QName name, String endpointName) {
+        this.name = name;
+        this.endpointName = endpointName;
+    }
+
+    /**
+     * Method getName
+     */
+    public QName getName() {
+        return name;
+    }
+
+    /**
+     * Method getPortName
+     */
+    public String getEndpointName() {
+        return endpointName;
+    }
+
+    /**
+     * Method setName
+     *
+     * @param name
+     */
+    public void setName(QName name) {
+        this.name = name;
+    }
+
+    /**
+     * Method setPortName
+     *
+     * @param endpointName
+     */
+    public void setEndpointName(String endpointName) {
+        this.endpointName = endpointName;
+    }
+    
+    /**
+     * Convenience method to convert objects of this type to an {@link OMElement} so that it
+     * can be added to an {@link org.apache.axis2.addressing.EndpointReference}
+     * 
+     * <p>Use:</p>
+     * <p>
+     * OMElement omElement =
+     * serviceName.toOM(new QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "ServiceName", "wsa"));
+     * </p>
+     * <p>or</p>
+     * <p>
+     * OMElement omElement =
+     * serviceName.toOM(new QName("http://www.w3.org/2007/02/addressing/metadata", "ServiceName", "wsam"));
+     * </p>
+     * <p>
+     * the difference being whether the EndpointReference is meant to represent a 2004/08
+     * (Submission) or 2005/08 (Final) EndpointReference, respectively.
+     * </p>
+     * 
+     * @param qname the <code>QName</code> that carries the namespace of the metadata element.
+     * @return an OMElement that can be added to the metadata of an EndpointReference.
+     */
+    public OMElement toOM(QName qname) throws AxisFault {
+        String localName = qname.getLocalPart();
+        if (!AddressingConstants.EPR_SERVICE_NAME.equals(localName)) {
+            throw new AxisFault("The local name must be 'ServiceName'.");
+        }
+        
+        String prefix = qname.getPrefix();
+        if (prefix == null) {
+            throw new AxisFault("The prefix cannot be null.");
+        }
+        
+        String namespace = qname.getNamespaceURI();
+        if (namespace == null) {
+            throw new AxisFault("The namespace canot be null.");
+        }
+            
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace metadataNs = fac.createOMNamespace(namespace, prefix);
+        OMElement element = fac.createOMElement(localName, metadataNs);
+        element.setText(name);
+        
+        if (endpointName != null) {
+            String attributeName =
+                Submission.WSA_NAMESPACE.equals(namespace) ?
+                        Submission.WSA_SERVICE_NAME_ENDPOINT_NAME : Final.WSA_SERVICE_NAME_ENDPOINT_NAME;
+            element.addAttribute(attributeName, endpointName, null);
+        }
+
+        return element;
+    }
+    
+    /**
+     * Convenience method to extract metadata from the ServiceName element.
+     * 
+     * <p>
+     * &lt;wsam:ServiceName xmlns:wsam="http://www.w3.org/2007/02/addressing/metadata" EndpointName="..."&gt;...&lt;/wsam:ServiceName&gt;
+     * </p>
+     * <p>or</p>
+     * <p>
+     * &lt;wsa:ServiceName xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing" PortName="..."&gt;...&lt;/wsa:ServiceName&gt;
+     * </p>
+     * 
+     * @param omElement the <code>OMElement</code> that holds the metadata.
+     */
+    public void fromOM(OMElement omElement) throws AxisFault {
+        QName qname = omElement.getQName();
+        String attributeName = null;
+        if (finalQName.equals(qname)) {
+            attributeName = Final.WSA_SERVICE_NAME_ENDPOINT_NAME;
+        }
+        else if (subQName.equals(qname)) {
+            attributeName = Submission.WSA_SERVICE_NAME_ENDPOINT_NAME;
+        }
+        else {
+            throw new AxisFault("Unrecognized element.");
+        }
+
+        name = omElement.getTextAsQName();
+        endpointName = omElement.getAttributeValue(new QName(attributeName));
+    }
+    
+    /**
+     * Static method to test whether an <code>OMElement</code> is recognized
+     * as a ServiceName element. If this method returns <code>true</code> then
+     * {@link #fromOM(OMElement)} is guaranteed not to fail.
+     * 
+     * @param omElement the <code>OMElement</code> to test.
+     * @return <code>true</code> if the element is a ServiceName element,
+     * <code>false</code> otherwise.
+     */
+    public static boolean isServiceNameElement(OMElement omElement) {
+        boolean result = false;
+        QName qname = omElement.getQName();
+        
+        if (finalQName.equals(qname) || subQName.equals(qname))
+            result = true;
+        
+        return result;
+    }
+}
Index: src/org/apache/axis2/addressing/metadata/WSDLLocation.java
===================================================================
--- src/org/apache/axis2/addressing/metadata/WSDLLocation.java	(.../trunk/java/modules/kernel)	(revision 0)
+++ src/org/apache/axis2/addressing/metadata/WSDLLocation.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.addressing.metadata;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.AxisFault;
+
+public class WSDLLocation {
+    private static final QName WSDLI = new QName("http://www.w3.org/2006/01/wsdl-instance", "wsdlLocation", "wsdli");
+    
+    private String targetNamespace;
+    private String wsdlURL;
+    
+    public WSDLLocation() {
+    }
+    
+    public WSDLLocation(String targetNamespace, String wsdlURL) {
+        this.targetNamespace = targetNamespace;
+        this.wsdlURL = wsdlURL;
+    }
+    
+    public String getTargetNamespace() {
+        return targetNamespace;
+    }
+    public void setTargetNamespace(String targetNamespace) {
+        this.targetNamespace = targetNamespace;
+    }
+    public String getLocation() {
+        return wsdlURL;
+    }
+    public void setLocation(String wsdlURL) {
+        this.wsdlURL = wsdlURL;
+    }
+    
+    /**
+     * Convenience method to convert an object of this type to an <code>OMAttribute</code>
+     * 
+     * @return an <code>OMAttribute</code> that can be added to an <code>EndpointReference</code>
+     */
+    public OMAttribute toOM() {
+        String value = new StringBuffer(targetNamespace).append(" ").append(wsdlURL).toString();
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace wsdliNs = fac.createOMNamespace(WSDLI.getNamespaceURI(), WSDLI.getPrefix());
+        OMAttribute omAttribute = fac.createOMAttribute(WSDLI.getLocalPart(), wsdliNs, value);
+        
+        return omAttribute;
+    }
+    
+    /**
+     * Convenience method for converting an OMAttribute to an instance of this type.
+     * <p>
+     * &lt;... xmlns:wsdli="http://www.w3.org/2006/01/wsdl-instance" wsdli:wsdlLocation="targetNamespace wsdlURL" ...&gt
+     * </p>
+     * @param omAttribute the <code>OMAttribute</code> that holds the wsdl location.
+     * @throws AxisFault
+     */
+    public void fromOM(OMAttribute omAttribute) throws AxisFault {
+        QName qname = omAttribute.getQName();
+        if (WSDLI.equals(qname)) {
+           String value = omAttribute.getAttributeValue().trim();
+           String[] values = value.split("\\s", 2);
+           
+           //Don't set any values if split doesn't
+           //give us the correct number of elements.
+           if (values.length != 2)
+               return;
+           
+           targetNamespace = values[0];
+           wsdlURL = values[1];
+        }
+        else {
+            throw new AxisFault("Unrecognized element.");
+        }
+    }
+    
+    
+    /**
+     * Static method to test whether an <code>OMElement</code> is recognized
+     * as a ServiceName element. If this method returns <code>true</code> then
+     * {@link #fromOM(OMAttribute)} is guaranteed not to throw an exception.
+     * 
+     * @param omAttribute the <code>OMElement</code> to test.
+     * @return <code>true</code> if the element is a ServiceName element,
+     * <code>false</code> otherwise.
+     */
+    public static boolean isWSDLLocationAttribute(OMAttribute omAttribute) {
+        boolean result = false;
+        QName qname = omAttribute.getQName();
+        
+        if (WSDLI.equals(qname))
+            result = true;
+        
+        return result;
+    }
+}
Index: src/org/apache/axis2/Constants.java
===================================================================
--- src/org/apache/axis2/Constants.java	(.../trunk/java/modules/kernel)	(revision 614841)
+++ src/org/apache/axis2/Constants.java	(.../branches/java/jaxws21/modules/kernel)	(revision 614881)
@@ -265,6 +265,7 @@
 
         //Attachment configurations
         public static final String ENABLE_MTOM = "enableMTOM";
+        public static final String MTOM_THRESHOLD = "mtomThreshold";
         public static final String CACHE_ATTACHMENTS = "cacheAttachments";
         public static final String ATTACHMENT_TEMP_DIR = "attachmentDIR";
         public static final String FILE_SIZE_THRESHOLD = "sizeThreshold";
