Index: modules/core/test/org/apache/axis2/addressing/EndpointReferenceTypeTest.java
===================================================================
--- modules/core/test/org/apache/axis2/addressing/EndpointReferenceTypeTest.java	(revision 430102)
+++ modules/core/test/org/apache/axis2/addressing/EndpointReferenceTypeTest.java	(working copy)
@@ -91,7 +91,7 @@
         assertTrue(epr200408anon.hasAnonymousAddress());
     }
     
-    public void testToAndFromOM() throws Exception{
+    public void testToAndFromOMForFinalSpecEPR() throws Exception{
         OMFactory omf = OMAbstractFactory.getOMFactory();
         OMNamespace ns1 = omf.createOMNamespace("http://uri1","prefix1");
         OMAttribute attr1 = omf.createOMAttribute("attr1",ns1,"attr1value");
@@ -117,6 +117,7 @@
         EndpointReference deser = new EndpointReference("");
         deser.fromOM(om);
         
+        assertEquals(AddressingConstants.Final.WSA_NAMESPACE, deser.getAddressingNamespace());
         assertEquals(endpointReference.getAddress(),deser.getAddress());
         ArrayList attrs = deser.getAttributes();
         assertEquals(attr1,attrs.get(0));
@@ -134,4 +135,64 @@
         assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
         assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
     }
+    
+    public void testToAndFromOMForSubmissionSpecEPR() throws Exception{
+        OMFactory omf = OMAbstractFactory.getOMFactory();
+        OMNamespace ns1 = omf.createOMNamespace("http://uri1","prefix1");
+        OMAttribute attr1 = omf.createOMAttribute("attr1",ns1,"attr1value");
+        OMNamespace ns2 = omf.createOMNamespace("http://uri2","prefix2");
+        OMAttribute attr2 = omf.createOMAttribute("attr2",ns2,"attr2value");
+        endpointReference.addAttribute(attr1);
+        endpointReference.addAttribute(attr2);
+        OMElement md1 = omf.createOMElement("md1", "http://mduri1", "md1prefix"); 
+        OMElement md2 = omf.createOMElement("md2", "http://mduri2", "md2prefix");
+        endpointReference.addMetaData(md1);
+        endpointReference.addMetaData(md2);
+        OMElement ext1 = omf.createOMElement("ext1", "http://exturi1", "ext1prefix"); 
+        OMElement ext2 = omf.createOMElement("ext2", "http://exturi2", "ext2prefix");
+        endpointReference.addExtensibleElement(ext1);
+        endpointReference.addExtensibleElement(ext2);
+        QName rp1Qname = new QName("http://rp1uri","refParm1","rp1prefix");
+        QName rp2Qname = new QName("http://rp2uri","refParm2","rp2prefix");
+        endpointReference.addReferenceParameter(rp1Qname,"rp1");
+        endpointReference.addReferenceParameter(rp2Qname,"rp2");
+        
+        endpointReference.setAddressingNamespace(AddressingConstants.Submission.WSA_NAMESPACE);
+        OMElement om = endpointReference.toOM("http://nsurl","localName","prefix");
+        
+        //Add some reference properties.
+        QName p1Qname = new QName("http://p1uri","refProp1","p1prefix");
+        QName p2Qname = new QName("http://p2uri","refProp2","p2prefix");
+        QName qname = new QName(AddressingConstants.Submission.WSA_NAMESPACE, "ReferenceProperties", AddressingConstants.WSA_DEFAULT_PREFIX);
+        OMElement referenceProperties = omf.createOMElement(qname, om);
+        OMElement prop1 = omf.createOMElement(p1Qname, referenceProperties);
+        OMElement prop2 = omf.createOMElement(p2Qname, referenceProperties);
+        prop1.setText("p1");
+        prop2.setText("p2");
+        
+        EndpointReference deser = new EndpointReference("");
+        deser.fromOM(om);
+        
+        assertEquals(AddressingConstants.Submission.WSA_NAMESPACE, deser.getAddressingNamespace());
+        assertEquals(endpointReference.getAddress(),deser.getAddress());
+        ArrayList attrs = deser.getAttributes();
+        assertEquals(attr1,attrs.get(0));
+        assertEquals(attr2,attrs.get(1));
+        
+        //Metadata will be lost unless it is saved as an extensibility element.
+        ArrayList metadata = deser.getMetaData();
+        assertNull(metadata);
+        
+        ArrayList extelts = deser.getExtensibleElements();
+        assertEquals(ext1,extelts.get(0));
+        assertEquals(ext2,extelts.get(1));
+        
+        //All reference properties are returned as reference parameters.
+        Map m = deser.getAllReferenceParameters();
+        assertEquals(4, m.size());
+        assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
+        assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
+        assertEquals("p1", ((OMElement)m.get(p1Qname)).getText());
+        assertEquals("p2", ((OMElement)m.get(p2Qname)).getText());
+    }
 }
Index: modules/core/src/org/apache/axis2/addressing/EndpointReference.java
===================================================================
--- modules/core/src/org/apache/axis2/addressing/EndpointReference.java	(revision 430102)
+++ modules/core/src/org/apache/axis2/addressing/EndpointReference.java	(working copy)
@@ -31,6 +31,7 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.IdentityHashMap;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -46,6 +47,9 @@
 
     private static final Log log = LogFactory.getLog(EndpointReference.class);
     
+    private final static Map finalQNames      = new IdentityHashMap();
+    private final static Map submissionQNames = new IdentityHashMap();
+    
     /**
      * <EndpointReference>
      *    <Address>xs:anyURI</Address>
@@ -57,6 +61,7 @@
 
     private String name;
     private String address;
+    private String addressingNamespace;
     private ArrayList metaData;
     private Map referenceParameters;
     private ArrayList extensibleElements;
@@ -67,7 +72,17 @@
      * @param address
      */
     public EndpointReference(String address) {
+        this(address, AddressingConstants.Final.WSA_NAMESPACE);
+    }
+    
+    /**
+     * 
+     * @param address
+     * @param addressingNamespace
+     */
+    public EndpointReference(String address, String addressingNamespace) {
         this.address = address;
+        this.addressingNamespace = addressingNamespace;        
     }
 
     /**
@@ -193,7 +208,6 @@
             }
             this.metaData.add(metaData);
         }
-
     }
 
     public String getName() {
@@ -203,6 +217,24 @@
     public void setName(String name) {
         this.name = name;
     }
+    
+    /**
+     * Set the namespace to either http://www.w3.org/2005/08/addressing or
+     * http://schemas.xmlsoap.org/ws/2004/08/addressing
+     * 
+     * @param namespace
+     */
+    public void setAddressingNamespace(String addressingNamespace) {
+        this.addressingNamespace = addressingNamespace;
+    }
+    
+    /**
+     * 
+     * @return the namespace that this endpoint reference represents.
+     */
+    public String getAddressingNamespace() {
+        return addressingNamespace;
+    }
 
     /**
      * Set a Map with QName as the key and an OMElement
@@ -214,62 +246,120 @@
         this.referenceParameters = referenceParameters;
     }
 
-    public void fromOM(OMElement eprOMElement) {
-        setAddress(eprOMElement.getFirstChildWithName(new QName("Address")).getText());
-        OMElement refParamElement = eprOMElement.getFirstChildWithName(new QName(AddressingConstants.EPR_REFERENCE_PARAMETERS));
-
-        if (refParamElement != null) {
-            Iterator refParams = refParamElement.getChildElements();
-            while (refParams.hasNext()) {
-                OMElement omElement = (OMElement) refParams.next();
-                addReferenceParameter(omElement);
+    /**
+     * Populates this endpoint reference based on the <code>OMElement</code> that is
+     * passed in. If the http://schemas.xmlsoap.org/ws/2004/08/addressing namespace
+     * is in effect then any reference properties will be saved as reference parameters.
+     * Any elements that are not recognised are saved as extensibility elements.
+     * 
+     * @param eprOMElement an element of endpoint reference type 
+     * @throws AxisFault if unable to locate an address element
+     */
+    public void fromOM(OMElement eprOMElement) throws AxisFault {
+        boolean isFinalAddressingNamespace = false;
+        Map map = null;
+        
+        //First pass, identify the addressing namespace.
+        OMElement address = eprOMElement.getFirstChildWithName((QName) finalQNames.get(AddressingConstants.EPR_ADDRESS));
+        
+        if (address != null) {
+            setAddressingNamespace(AddressingConstants.Final.WSA_NAMESPACE);
+            map = finalQNames;
+            isFinalAddressingNamespace = true;
+        }
+        else {
+            address = eprOMElement.getFirstChildWithName((QName) submissionQNames.get(AddressingConstants.EPR_ADDRESS));
+            
+            if (address != null) {
+                setAddressingNamespace(AddressingConstants.Submission.WSA_NAMESPACE);
+                map = submissionQNames;
+                isFinalAddressingNamespace = false;
             }
+            else {
+                throw new AxisFault("Unable to locate an address element for the endpoint reference type.");
+            }
         }
-
-
-        OMElement metaDataElement = eprOMElement.getFirstChildWithName(new QName(AddressingConstants.Final.WSA_METADATA));
-        if (metaDataElement != null) {
-            Iterator children = metaDataElement.getChildren();
-            while (children.hasNext()) {
-                OMNode omNode = (OMNode) children.next();
-                addMetaData(omNode);
+        
+        //Second pass, identify the properties.
+        Iterator childElements = eprOMElement.getChildElements();
+        
+        while (childElements.hasNext()) {
+            OMElement eprChildElement = (OMElement) childElements.next();
+            QName qname = eprChildElement.getQName();
+            
+            if (map.get(AddressingConstants.EPR_ADDRESS).equals(qname)) {
+                //We need to identify the address element again in order to ensure
+                //that it is not included with the extensibility elements.
+                setAddress(eprChildElement.getText());
             }
+            else if (map.get(AddressingConstants.EPR_REFERENCE_PARAMETERS).equals(qname)) {
+                Iterator referenceParameters = eprChildElement.getChildElements();
+                while (referenceParameters.hasNext()) {
+                    OMElement element = (OMElement) referenceParameters.next();
+                    addReferenceParameter(element);
+                }
+            }
+            else if (isFinalAddressingNamespace &&
+                    map.get(AddressingConstants.Final.WSA_METADATA).equals(qname)) {
+                Iterator referenceParameters = eprChildElement.getChildElements();
+                while (referenceParameters.hasNext()) {
+                    OMNode node = (OMNode) referenceParameters.next();
+                    addMetaData(node);
+                }
+            }
+            else if (!isFinalAddressingNamespace &&
+                    map.get(AddressingConstants.Submission.EPR_REFERENCE_PROPERTIES).equals(qname)) {
+                // since we have the model for WS-Final, we don't have a place to keep this reference properties.
+                // The only compatible place is reference properties
+                Iterator referenceParameters = eprChildElement.getChildElements();
+                while (referenceParameters.hasNext()) {
+                    OMElement element = (OMElement) referenceParameters.next();
+                    addReferenceParameter(element);
+                }
+            }
+            else {
+                addExtensibleElement(eprChildElement);
+            }
         }
 
+        //Finally, capture the properties of the containing element.
         setName(eprOMElement.getLocalName());
 
         Iterator allAttributes = eprOMElement.getAllAttributes();
-        if (attributes == null) {
-            attributes = new ArrayList();
-        }
-
         while (allAttributes.hasNext()) {
             OMAttribute attribute = (OMAttribute) allAttributes.next();
-            attributes.add(attribute);
+            addAttribute(attribute);
         }
-        
-        Iterator childElements = eprOMElement.getChildElements();
-        while (childElements.hasNext()) {
-            OMElement eprChildElement = (OMElement) childElements.next();
-            String localName = eprChildElement.getLocalName();
-            if(!localName.equals("Address") &&
-               !localName.equals(AddressingConstants.EPR_REFERENCE_PARAMETERS) &&
-               !localName.equals(AddressingConstants.Final.WSA_METADATA)){
-                addExtensibleElement(eprChildElement);
-            }
-        }
     }
 
+    /**
+     * Creates an <code>OMElement</code> based on the properties of this endpoint
+     * reference. The output may differ based on the addressing namespace that is
+     * in effect when this method is called. If the http://www.w3.org/2005/08/addressing
+     * namespace is in effect, and a metadata property has been defined for the
+     * endpoint reference, then there will be a metadata element to contain the
+     * property in the output. If the http://schemas.xmlsoap.org/ws/2004/08/addressing
+     * namespace is in effect, however, then no metadata element will be included
+     * in the output, even if a metadata property element has been defined.
+     * 
+     * @param nsurl the namespace of the element
+     * @param localName the local name of the element
+     * @param prefix the prefix associated with the <code>nsurl</code>
+     * @return
+     * @throws AxisFault if the prefix is null.
+     * @see #setAddressingNamespace(String)
+     */
     public OMElement toOM(String nsurl, String localName, String prefix) throws AxisFault {
         OMFactory fac = OMAbstractFactory.getOMFactory();
         if (prefix != null) {
             OMNamespace wrapNs = fac.createOMNamespace(nsurl, prefix);
             OMElement epr = fac.createOMElement(localName, wrapNs);
-            OMNamespace wsaNS = fac.createOMNamespace(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.WSA_DEFAULT_PREFIX);
+            OMNamespace wsaNS = fac.createOMNamespace(addressingNamespace, AddressingConstants.WSA_DEFAULT_PREFIX);
             OMElement addressE = fac.createOMElement(AddressingConstants.EPR_ADDRESS, wsaNS, epr);
             addressE.setText(address);
             
-            if (this.metaData != null) {
+            if (AddressingConstants.Final.WSA_NAMESPACE.equals(addressingNamespace) &&
+                    this.metaData != null) {
                 OMElement metadataE = fac.createOMElement(AddressingConstants.Final.WSA_METADATA, wsaNS, epr);
                 Iterator metadata = this.metaData.iterator();
                 while (metadata.hasNext()) {
@@ -297,7 +387,7 @@
             ArrayList omElements = extensibleElements;
             if (omElements != null) {
                 for (int i = 0; i < omElements.size(); i++) {
-                    epr.addChild((OMElement) omElements.get(i));
+                    epr.addChild((OMNode) omElements.get(i));
                 }
             }
             
@@ -307,5 +397,13 @@
         }
     }
 
-
+    static {
+        finalQNames.put(AddressingConstants.EPR_ADDRESS, new QName(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.EPR_ADDRESS));
+        finalQNames.put(AddressingConstants.EPR_REFERENCE_PARAMETERS, new QName(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.EPR_REFERENCE_PARAMETERS));
+        finalQNames.put(AddressingConstants.Final.WSA_METADATA, new QName(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.Final.WSA_METADATA));
+        
+        submissionQNames.put(AddressingConstants.EPR_ADDRESS, new QName(AddressingConstants.Submission.WSA_NAMESPACE, AddressingConstants.EPR_ADDRESS));
+        submissionQNames.put(AddressingConstants.EPR_REFERENCE_PARAMETERS, new QName(AddressingConstants.Submission.WSA_NAMESPACE, AddressingConstants.EPR_REFERENCE_PARAMETERS));
+        submissionQNames.put(AddressingConstants.Submission.EPR_REFERENCE_PROPERTIES, new QName(AddressingConstants.Submission.WSA_NAMESPACE, AddressingConstants.Submission.EPR_REFERENCE_PROPERTIES));
+    }
 }
Index: modules/savan/src/org/apache/savan/eventing/EventingSubscriptionProcessor.java
===================================================================
--- modules/savan/src/org/apache/savan/eventing/EventingSubscriptionProcessor.java	(revision 430102)
+++ modules/savan/src/org/apache/savan/eventing/EventingSubscriptionProcessor.java	(working copy)
@@ -105,7 +105,12 @@
 		OMElement endToElement = subscribeElement.getFirstChildWithName(new QName (EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.EndTo));
 		if (endToElement!=null) {
 			EndpointReference endToEPR = new EndpointReference ("");
-			endToEPR.fromOM(endToElement);
+            try {
+                endToEPR.fromOM(endToElement);
+            }
+            catch (Exception e) {
+                throw new SavanException(e);
+            }
 			
 			eventingSubscriber.setEndToEPr(endToEPR);
 		}
@@ -119,8 +124,13 @@
 			throw new SavanException ("NotifyTo element is null");
 		
 		EndpointReference notifyToEPr = new EndpointReference ("");
-		notifyToEPr.fromOM(notifyToElement);
-		
+        try {
+            notifyToEPr.fromOM(notifyToElement);
+        }
+        catch (Exception e) {
+            throw new SavanException(e);
+        }
+        
 		OMAttribute deliveryModeAttr = deliveryElement.getAttribute(new QName (EventingConstants.ElementNames.Mode));
 		String deliveryMode = null;
 		if (deliveryModeAttr!=null) {
