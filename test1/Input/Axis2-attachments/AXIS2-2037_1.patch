Index: modules/json/test/org/apache/axis2/json/JSONIntegrationTest.java
===================================================================
--- modules/json/test/org/apache/axis2/json/JSONIntegrationTest.java	(revision 500158)
+++ modules/json/test/org/apache/axis2/json/JSONIntegrationTest.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axiom.om.OMFactory;
 import org.apache.axiom.om.OMNamespace;
 import org.apache.axis2.Constants;
+import org.apache.axis2.JScriptConstants;
 import org.apache.axis2.client.Options;
 import org.apache.axis2.client.ServiceClient;
 import org.apache.axis2.context.ConfigurationContext;
@@ -35,71 +36,75 @@
 
 public class JSONIntegrationTest extends TestCase implements JSONTestConstants {
 
-	private AxisService service;
+    private AxisService service;
 
-	private String expectedString;
+    private String expectedString;
 
-	private SimpleHTTPServer server;
-	
-	private ConfigurationContext configurationContext;
+    private SimpleHTTPServer server;
 
-	public JSONIntegrationTest() {
-	}
+    private ConfigurationContext configurationContext;
 
-	protected void setUp() throws Exception {
+    public JSONIntegrationTest() {
+    }
 
-//		File configFile = new File("test-resources/axis2.xml");
-//		configurationContext = ConfigurationContextFactory
-//				.createConfigurationContextFromFileSystem(null, configFile
-//						.getAbsolutePath());
-//		server = new SimpleHTTPServer(configurationContext, TESTING_PORT);
-//		try {
-//			server.start();
-//		} finally {
-//
-//		}
-//		service = Utils.createSimpleService(serviceName, org.apache.axis2.json.Echo.class.getName(),
-//				operationName);
-//		server.getConfigurationContext().getAxisConfiguration().addService(
-//				service);
-	}
+    protected void setUp() throws Exception {
 
-	protected void tearDown() throws Exception {
-//		server.stop();
-	}
+        File configFile = new File("test-resources/axis2.xml");
+        configurationContext = ConfigurationContextFactory
+                .createConfigurationContextFromFileSystem(null, configFile
+                        .getAbsolutePath());
+        server = new SimpleHTTPServer(configurationContext, TESTING_PORT);
+        try {
+            server.start();
+        } finally {
 
-	protected OMElement createEnvelope() throws Exception {
-		OMFactory fac = OMAbstractFactory.getOMFactory();
-		OMNamespace omNs = fac.createOMNamespace("", "");
-		OMElement rpcWrapEle = fac.createOMElement("echoOM", omNs);
-		OMElement data = fac.createOMElement("data", omNs);
-		expectedString = "my json string";
-		data.setText(expectedString);
-		rpcWrapEle.addChild(data);
-		return rpcWrapEle;
-	}
+        }
+        service = Utils.createSimpleService(serviceName, org.apache.axis2.json.Echo.class.getName(),
+                operationName);
+        server.getConfigurationContext().getAxisConfiguration().addService(
+                service);
+    }
 
-	public void testEchoOMWithJSON() throws Exception {
-//		OMElement payload = createEnvelope();
-//		Options options = new Options();
-//		options.setTo(targetEPR);
-//
-//		options.setProperty(Constants.Configuration.MESSAGE_TYPE,
-//				"application/json");
-//		options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-////		options.setTimeOutInMilliSeconds(1000);
-//		
-//		ServiceClient sender = new ServiceClient(configurationContext, null);
-//		options.setAction(null);
-//		sender.setOptions(options);
-//		options.setTo(targetEPR);
-//		OMElement result = sender.sendReceive(payload);
-//		OMElement ele = (OMElement) result.getFirstOMChild();
-//		compareWithCreatedOMText(ele.getText());
-	}
+    protected void tearDown() throws Exception {
+        server.stop();
+    }
 
-	protected void compareWithCreatedOMText(String response) {
-		TestCase.assertEquals(response, expectedString);
-	}
+    protected OMElement createEnvelope() throws Exception {
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace omNs = fac.createOMNamespace("", "");
+        OMElement rpcWrapEle = fac.createOMElement("echoOM", omNs);
+        OMElement data = fac.createOMElement("data", omNs);
+        expectedString = "my json string";
+        data.setText(expectedString);
+        rpcWrapEle.addChild(data);
+        return rpcWrapEle;
+    }
 
+    public void testEchoOMWithJSON() throws Exception {
+        OMElement payload = createEnvelope();
+        Options options = new Options();
+        options.setTo(targetEPR);
+        setMessageType(options);
+        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+//		options.setTimeOutInMilliSeconds(1000);
+
+        ServiceClient sender = new ServiceClient(configurationContext, null);
+//		ServiceClient sender = new ServiceClient();
+        options.setAction(null);
+        sender.setOptions(options);
+        options.setTo(targetEPR);
+        OMElement result = sender.sendReceive(payload);
+        OMElement ele = (OMElement) result.getFirstOMChild();
+        compareWithCreatedOMText(ele.getText());
+    }
+
+    protected void setMessageType(Options options) {
+        options.setProperty(Constants.Configuration.MESSAGE_TYPE,
+                "application/json");
+    }
+
+    protected void compareWithCreatedOMText(String response) {
+        TestCase.assertEquals(response, expectedString);
+    }
+
 }
\ No newline at end of file
Index: modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java	(revision 500158)
+++ modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java	(working copy)
@@ -23,6 +23,7 @@
 
 import javax.xml.stream.FactoryConfigurationError;
 import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamWriter;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMOutputFormat;
@@ -33,30 +34,46 @@
 import org.apache.axis2.transport.MessageFormatter;
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.codehaus.jettison.badgerfish.BadgerFishXMLStreamWriter;
+import org.codehaus.jettison.mapped.MappedXMLStreamWriter;
+import org.codehaus.jettison.mapped.MappedNamespaceConvention;
 
 
 public class JSONMessageFormatter implements MessageFormatter {
 
     public String getContentType(MessageContext msgCtxt, OMOutputFormat format, String soapActionString) {
-            String contentType;
-            String encoding = format.getCharSetEncoding();
-            if (msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE) != null) {
-                contentType = (String) msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE);
+        String contentType;
+        String encoding = format.getCharSetEncoding();
+        if (msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE) != null) {
+            contentType = (String) msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE);
+        } else {
+            if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
+                contentType = JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH;
             } else {
                 contentType = JScriptConstants.MEDIA_TYPE_APPLICATION_JSON;
             }
 
-            if (encoding != null) {
-                contentType += "; charset=" + encoding;
-            }
-            return contentType;
+        }
+
+        if (encoding != null) {
+            contentType += "; charset=" + encoding;
+        }
+        return contentType;
     }
 
     public byte[] getBytes(MessageContext msgCtxt, OMOutputFormat format) throws AxisFault {
-    	OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
+        OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
         try {
             ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-            BadgerFishXMLStreamWriter jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(bytesOut));
+            XMLStreamWriter jsonWriter;
+
+//            if (msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION) != null && msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION).equals(JScriptConstants.BADGERFISH)) {
+            if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
+                jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(bytesOut));
+            } else {
+                MappedNamespaceConvention mnc = new MappedNamespaceConvention();
+                jsonWriter = new MappedXMLStreamWriter(mnc, new OutputStreamWriter(bytesOut));
+            }
+
             element.serializeAndConsume(jsonWriter);
             jsonWriter.writeEndDocument();
 
@@ -74,12 +91,25 @@
     }
 
     public void writeTo(MessageContext msgCtxt, OMOutputFormat format,
-			OutputStream out, boolean preserve) throws AxisFault {
-    	OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
-    	BadgerFishXMLStreamWriter jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(out));
+                        OutputStream out, boolean preserve) throws AxisFault {
+        OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
+
+        XMLStreamWriter jsonWriter;
+
+//        if (msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION) != null && msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION).equals(JScriptConstants.BADGERFISH)) {
+        if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
+            jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(out));
+        } else {
+            MappedNamespaceConvention mnc = new MappedNamespaceConvention();
+            jsonWriter = new MappedXMLStreamWriter(mnc, new OutputStreamWriter(out));
+        }
+
         try {
             element.serializeAndConsume(jsonWriter);
             jsonWriter.writeEndDocument();
+
+//            jsonWriter.close();
+
         } catch (XMLStreamException e) {
             throw new AxisFault(e);
         }
Index: modules/json/src/org/apache/axis2/json/JSONBadgerfishDataSource.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONBadgerfishDataSource.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/JSONBadgerfishDataSource.java	(revision 0)
@@ -0,0 +1,47 @@
+package org.apache.axis2.json;
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.axiom.om.OMDataSource;
+import org.apache.axiom.om.OMOutputFormat;
+import org.apache.axiom.om.OMException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+import org.json.JSONException;
+import org.codehaus.jettison.badgerfish.BadgerFishXMLInputFactory;
+import org.codehaus.jettison.mapped.MappedXMLInputFactory;
+
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.XMLStreamConstants;
+import java.io.*;
+import java.util.HashMap;
+
+public class JSONBadgerfishDataSource extends JSONDataSource{
+
+    public JSONBadgerfishDataSource(InputStream jsonInputStream, String localName){
+        super(jsonInputStream, localName);
+    }
+
+
+    public javax.xml.stream.XMLStreamReader getReader() throws javax.xml.stream.XMLStreamException {
+
+        BadgerFishXMLInputFactory inputFactory = new BadgerFishXMLInputFactory();
+        return inputFactory.createXMLStreamReader(new JSONTokener("{" + localName + ":" + this.getJSONString()));
+
+    }
+
+
+}
Index: modules/json/src/org/apache/axis2/json/JSONDataSource.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONDataSource.java	(revision 500158)
+++ modules/json/src/org/apache/axis2/json/JSONDataSource.java	(working copy)
@@ -22,17 +22,19 @@
 import org.json.JSONTokener;
 import org.json.JSONException;
 import org.codehaus.jettison.badgerfish.BadgerFishXMLInputFactory;
+import org.codehaus.jettison.mapped.MappedXMLInputFactory;
 
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamConstants;
 import java.io.*;
+import java.util.HashMap;
 
 public class JSONDataSource implements OMDataSource {
 
     private InputStream jsonInputStream;
     private String jsonString;
     private boolean isRead = false;
-    private String localName;
+    protected String localName;
 
     public JSONDataSource(InputStream jsonInputStream, String localName) {
         this.jsonInputStream = jsonInputStream;
@@ -117,11 +119,27 @@
     }
 
     public javax.xml.stream.XMLStreamReader getReader() throws javax.xml.stream.XMLStreamException {
-        BadgerFishXMLInputFactory inputFactory = new BadgerFishXMLInputFactory();
-        return inputFactory.createXMLStreamReader(new JSONTokener("{" + localName + ":" + this.getJSONString()));
+
+        //todo-badgerfish
+
+//        BadgerFishXMLInputFactory inputFactory = new BadgerFishXMLInputFactory();
+//        return inputFactory.createXMLStreamReader(new JSONTokener("{" + localName + ":" + this.getJSONString()));
+
+        //todo-end
+
+        //todo-mapped
+
+        HashMap nstojns = new HashMap();
+        nstojns.put("", "");
+
+        MappedXMLInputFactory inputFactory = new MappedXMLInputFactory(nstojns);
+        String jsonString = "{" + localName + ":" + this.getJSONString();          
+        return inputFactory.createXMLStreamReader(new JSONTokener(jsonString));
+
+        //todo-end
     }
 
-    private String getJSONString() {
+    protected String getJSONString() {
         if (isRead) {
             return jsonString;
         } else {
@@ -139,4 +157,8 @@
             return jsonString;
         }
     }
+
+    public String getCompleteJOSNString(){
+        return localName + getJSONString();
+    }
 }
Index: modules/json/src/org/apache/axis2/json/JSONBadgerfishOMBuilder.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONBadgerfishOMBuilder.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/JSONBadgerfishOMBuilder.java	(revision 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.json;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.impl.OMNamespaceImpl;
+import org.apache.axiom.om.impl.builder.OMBuilder;
+import org.apache.axiom.om.impl.llom.OMSourcedElementImpl;
+import org.apache.axiom.om.impl.llom.factory.OMLinkedListImplFactory;
+import org.apache.axis2.JScriptConstants;
+
+public class JSONBadgerfishOMBuilder extends JSONOMBuilder{
+
+    protected JSONDataSource getDataSource(){
+        return new JSONBadgerfishDataSource(this.jsonInputStream, localName);
+    }
+
+
+}
Index: modules/json/src/org/apache/axis2/json/JSONOMBuilder.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONOMBuilder.java	(revision 500158)
+++ modules/json/src/org/apache/axis2/json/JSONOMBuilder.java	(working copy)
@@ -46,10 +46,14 @@
         if (localName == null) {
             localName = getLocalName();
         }
-        JSONDataSource jsonDataSource = new JSONDataSource(this.jsonInputStream, localName);
+        JSONDataSource jsonDataSource = getDataSource();
         return new OMSourcedElementImpl(localName.substring(1, localName.length() - 1), ns, factory, jsonDataSource);
     }
 
+    protected JSONDataSource getDataSource(){
+        return new JSONDataSource(this.jsonInputStream, localName);
+    }
+
     private String getLocalName() {
         String localName = "";
         try {
Index: modules/json/src/org/apache/axis2/JScriptConstants.java
===================================================================
--- modules/json/src/org/apache/axis2/JScriptConstants.java	(revision 500158)
+++ modules/json/src/org/apache/axis2/JScriptConstants.java	(working copy)
@@ -17,4 +17,13 @@
 
 public class JScriptConstants {
 	public static final String MEDIA_TYPE_APPLICATION_JSON = "application/json";
+
+    public static final String MEDIA_TYPE_APPLICATION_JSON_BADGERFISH = "application/json/badgerfish";
+
+//    public static final String JSON_CONVENTION = "convention";
+//
+//    public static final String BADGERFISH = "badgerfish";
+//
+//    public static final String MAPPED = "mapped";
+    
 }
Index: modules/json/test-resources/axis2.xml
===================================================================
--- modules/json/test-resources/axis2.xml	(revision 500158)
+++ modules/json/test-resources/axis2.xml	(working copy)
@@ -102,33 +102,41 @@
                          class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
         <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
                          class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
-    </messageReceivers>
-    
-    <!-- ================================================= -->
-    <!-- Message Formatter -->
-    <!-- ================================================= -->
-    <!--Following content type to message formatter mapping can be used to implement support for different message -->
-    <!--formats  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
-    <messageFormatters>
-        <messageFormatter contentType="application/soap+xml"
-                         class="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
-        <messageFormatter contentType="application/json"
-                         class="org.apache.axis2.json.JSONMessageFormatter"/>
-    </messageFormatters>
-    
-    <!-- ================================================= -->
-    <!-- Message Builders -->
-    <!-- ================================================= -->
-    <!--Following content type to builder mapping can be used to implement support for different message -->
-    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
-    <messageBuilders>
-        <messageBuilder contentType="application/json"
-                         class="org.apache.axis2.json.JSONOMBuilder"/>
-        <messageBuilder contentType="application/soap+xml"
-                         class="org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder"/>
-    </messageBuilders>
+    </messageReceivers>
     
     <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--formats  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/soap+xml"
+                         class="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
+        <messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>
+        <messageFormatter contentType="application/json/badgerfish"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>
+        <messageFormatter contentType="text/javascript"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>
+    </messageFormatters>
+    
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/json"
+                         class="org.apache.axis2.json.JSONOMBuilder"/>
+        <messageBuilder contentType="application/json/badgerfish"
+                         class="org.apache.axis2.json.JSONBadgerfishOMBuilder"/>
+        <messageBuilder contentType="text/javascript"
+                         class="org.apache.axis2.json.JSONOMBuilder"/>
+        <messageBuilder contentType="application/soap+xml"
+                         class="org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder"/>
+    </messageBuilders>
+    
+    <!-- ================================================= -->
     <!-- Transport Ins -->
     <!-- ================================================= -->
     <transportReceiver name="http"
Index: etc/project.properties
===================================================================
--- etc/project.properties	(revision 500158)
+++ etc/project.properties	(working copy)
@@ -68,6 +68,7 @@
 modules/rahas/project.xml,\
 modules/secpolicy/project.xml,\
 modules/mtompolicy/project.xml,\
+modules/json/project.xml,\
 ${optional.includes}
 
 #maven.multiproject.excludes=modules/tool/project.xml
