Index: src/org/apache/axis2/transport/tcp/TCPTransportSender.java
===================================================================
--- src/org/apache/axis2/transport/tcp/TCPTransportSender.java	(revision 982121)
+++ src/org/apache/axis2/transport/tcp/TCPTransportSender.java	(working copy)
@@ -26,10 +26,14 @@
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.transport.OutTransportInfo;
 import org.apache.axis2.transport.TransportUtils;
+import org.apache.axis2.transport.MessageFormatter;
 import org.apache.axis2.transport.base.AbstractTransportSender;
+import org.apache.axis2.transport.base.BaseUtils;
 import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.om.OMOutputFormat;
 
 import java.io.IOException;
+import java.io.OutputStream;
 import java.net.*;
 import java.util.Map;
 import java.util.HashMap;
@@ -48,10 +52,15 @@
             Socket socket = openTCPConnection(targetEPR, timeout);
             msgContext.setProperty(TCPConstants.TCP_OUTPUT_SOCKET, socket);
 
+            String contentType = params.get("contentType");
+            if (contentType == null) {
+                contentType = TCPConstants.TCP_DEFAULT_CONTENT_TYPE;
+            }
+
             try {
-                TransportUtils.writeMessage(msgContext, socket.getOutputStream());
+                writeOut(msgContext, socket, contentType);
                 if (!msgContext.getOptions().isUseSeparateListener() && !msgContext.isServerSide()){
-                    waitForReply(msgContext, socket, params.get("contentType"));
+                    waitForReply(msgContext, socket, contentType);
                 }
             } catch (IOException e) {
                 handleException("Error while sending a TCP request", e);
@@ -60,7 +69,7 @@
         } else if (outTransportInfo != null && (outTransportInfo instanceof TCPOutTransportInfo)) {
             TCPOutTransportInfo outInfo = (TCPOutTransportInfo) outTransportInfo;
             try {
-                TransportUtils.writeMessage(msgContext, outInfo.getSocket().getOutputStream());
+                writeOut(msgContext, outInfo.getSocket(), outInfo.getContentType());
             } catch (IOException e) {
                 handleException("Error while sending a TCP response", e);
             } finally {
@@ -69,6 +78,17 @@
         }
     }
 
+    private void writeOut(MessageContext msgContext, Socket socket,
+                          String contentType) throws IOException {
+        MessageFormatter messageFormatter = TransportUtils.getMessageFormatter(msgContext);
+        OMOutputFormat format = BaseUtils.getOMOutputFormat(msgContext);
+        format.setContentType(contentType);
+        byte[] payload = messageFormatter.getBytes(msgContext, format);
+        OutputStream out = socket.getOutputStream();
+        out.write(payload);
+        out.flush();
+    }
+
     @Override
     public void cleanup(MessageContext msgContext) throws AxisFault {
         Object socketObj = msgContext.getProperty(TCPConstants.TCP_OUTPUT_SOCKET);
@@ -85,10 +105,6 @@
             return;
         }
 
-        if (contentType == null) {
-            contentType = TCPConstants.TCP_DEFAULT_CONTENT_TYPE;
-        }
-
         try {
             MessageContext responseMsgCtx = createResponseMessageContext(msgContext);
             SOAPEnvelope envelope = TransportUtils.createSOAPMessage(msgContext,
