package org.apache.axis2.wsdl.util;

import junit.framework.TestCase;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringBufferInputStream;
import java.util.Iterator;
import java.util.Map;

import org.apache.axis2.util.CommandLineOptionParser;
import org.apache.axis2.wsdl.codegen.CodeGenConfiguration;

public class XSLTIncludeResolverTest extends TestCase {

	static private final String NEWLINE = System.getProperty("line.separator");

	static private final String TEST_TEMPLATE_NAME = 
		"/org/apache/axis2/wsdl/util/resources/XSLTIncludeResolverTestTemplate.xsl";

	private String streamToString(InputStream inputStream) throws IOException {
		StringBuffer result = new StringBuffer();
		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
		String line = null;
		while ((line = reader.readLine()) != null) {
			if (result.length() > 0) {
				result.append(NEWLINE);
			}
			result.append(line);
		}
		return result.toString();
	}

	public void testResolveKnownDataBinding() {
		String[] args = new String[]{};
		CodeGenConfiguration configuration = new CodeGenConfiguration(new CommandLineOptionParser(args).getAllOptions());
		XSLTIncludeResolver resolver = new XSLTIncludeResolver(configuration);
		Map dbSupporterMap = ConfigPropertyFileLoader.getDbSupporterTemplatesMap();
		try {
			for (Iterator keys = dbSupporterMap.keySet().iterator(); keys.hasNext();) {
				String key = (String)keys.next();
				configuration.setDatabindingType(key);
				Source source = resolver.resolve(Constants.XSLT_INCLUDE_DATABIND_SUPPORTER_HREF_KEY, null);
				assertTrue(source instanceof StreamSource);
				String resolvedContent = streamToString(((StreamSource)source).getInputStream());
				String expectedContent = streamToString(getClass().getResourceAsStream((String)dbSupporterMap.get(key)));
				assertEquals("key='"+key+"'", expectedContent, resolvedContent);
			}	
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

	public void testResolveUnknownDataBinding() {
		String[] args = new String[]{};
		CodeGenConfiguration configuration = new CodeGenConfiguration(new CommandLineOptionParser(args).getAllOptions());
		XSLTIncludeResolver resolver = new XSLTIncludeResolver(configuration);
		Map dbSupporterMap = ConfigPropertyFileLoader.getDbSupporterTemplatesMap();
		try {
			configuration.setDatabindingType("xyzzy");
			Source source = resolver.resolve(Constants.XSLT_INCLUDE_DATABIND_SUPPORTER_HREF_KEY, null);
			assertTrue(source instanceof StreamSource);
			String resolvedContent = streamToString(((StreamSource)source).getInputStream());
			String expectedContent = streamToString(new StringBufferInputStream(XSLTIncludeResolver.EMPTY_TEMPLATE));
			assertEquals(expectedContent, resolvedContent);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	public void testResolveTestObject() {
		String[] args = new String[]{};
		CodeGenConfiguration configuration = new CodeGenConfiguration(new CommandLineOptionParser(args).getAllOptions());
		XSLTIncludeResolver resolver = new XSLTIncludeResolver(configuration);
		try {
			Source source = resolver.resolve(Constants.XSLT_INCLUDE_TEST_OBJECT_HREF_KEY, null);
			assertTrue(source instanceof StreamSource);
			String resolvedContent = streamToString(((StreamSource)source).getInputStream());
			String expectedContent = streamToString(getClass().getResourceAsStream(ConfigPropertyFileLoader.getTestObjectTemplateName()));
			assertEquals(expectedContent, resolvedContent);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

	public void testResolveUnknownProperty() {
		String[] args = new String[]{};
		CodeGenConfiguration configuration = new CodeGenConfiguration(new CommandLineOptionParser(args).getAllOptions());
		XSLTIncludeResolver resolver = new XSLTIncludeResolver(configuration);
		try {
			Source source = resolver.resolve("unknownProperty", null);
			assertTrue(source instanceof StreamSource);
			String resolvedContent = streamToString(((StreamSource)source).getInputStream());
			String expectedContent = streamToString(new StringBufferInputStream(XSLTIncludeResolver.EMPTY_TEMPLATE));
			assertEquals(expectedContent, resolvedContent);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

	public void testResolveKnownProperty() {
		String[] args = new String[]{};
		CodeGenConfiguration configuration = new CodeGenConfiguration(new CommandLineOptionParser(args).getAllOptions());
		XSLTIncludeResolver resolver = new XSLTIncludeResolver(configuration);
		try {
			configuration.putProperty("testProperty", TEST_TEMPLATE_NAME);
			Source source = resolver.resolve("testProperty", null);
			assertTrue(source instanceof StreamSource);
			String resolvedContent = streamToString(((StreamSource)source).getInputStream());
			String expectedContent = streamToString(getClass().getResourceAsStream(TEST_TEMPLATE_NAME));
			assertEquals(expectedContent, resolvedContent);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

	public void testResolveTemplateName() {
		String[] args = new String[]{};
		CodeGenConfiguration configuration = new CodeGenConfiguration(new CommandLineOptionParser(args).getAllOptions());
		XSLTIncludeResolver resolver = new XSLTIncludeResolver(configuration);
		try {
			Source source = resolver.resolve(TEST_TEMPLATE_NAME, null);
			assertTrue(source instanceof StreamSource);
			String resolvedContent = streamToString(((StreamSource)source).getInputStream());
			String expectedContent = streamToString(getClass().getResourceAsStream(TEST_TEMPLATE_NAME));
			assertEquals(expectedContent, resolvedContent);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}
}
