Index: management/maven.xml
===================================================================
--- management/maven.xml	(revision 405641)
+++ management/maven.xml	(working copy)
@@ -1,44 +1,61 @@
-<project xmlns:j="jelly:core" xmlns:ant="jelly:ant" xmlns:u="jelly:util">
-  <goal name="all" prereqs="java:compile">
-
-	<jar jarfile="target/management.jar" basedir="target/classes">
-		<include name="org/apache/axis2/management/core/**/*" /> 
-		<include name="org/apache/axis2/management/interfaces/jmx/**/*" />
-	</jar>
-
-
-	<mkdir dir="target/classes/META-INF" />
-	<copy file="resources/management-services/services.xml" tofile="target/classes/META-INF/services.xml" />
-	<jar jarfile="target/management.aar" basedir="target/classes"> 
-		<include name="org/apache/axis2/management/interfaces/ws/**/*" /> 
-		<include name="META-INF/services.xml" />
-	</jar>
-
-	<copy file="resources/management-module/module.xml" tofile="target/classes/META-INF/module.xml" />
-	<jar jarfile="target/management.mar" basedir="target/classes">
-		<include name="org/apache/axis2/management/invoker/**/*" />  
-		<include name="META-INF/module.xml" />
-	</jar>
-
-	<mkdir dir="target/temp-war/WEB-INF/lib" />
-	<mkdir dir="target/temp-war/images" />
-	<mkdir dir="target/temp-war/css" />
-	<copy file="resources/management-console/web.xml" tofile="target/temp-war/WEB-INF/web.xml" />
-	<copy todir="target/temp-war/images">
-		<fileset dir="resources/management-console/images" />
-	</copy>
-	<copy todir="target/temp-war/css">
-		<fileset dir="resources/management-console/css" />
-	</copy>
-	<jar jarfile="target/temp-war/WEB-INF/lib/axis2console.jar" basedir="target/classes">
-		<include name="org/apache/axis2/management/console/web/**/*" /> 
-	</jar>
-	<jar jarfile="target/axis2console.war" basedir="target/temp-war">
-		<include name="**/*" /> 
-	</jar>
-	<delete includeEmptyDirs="true">
-		<fileset dir="target/temp-war" />
-	</delete>
-
- </goal>
-</project>
+<project xmlns:j="jelly:core" xmlns:ant="jelly:ant" xmlns:u="jelly:util">
+  <goal name="all" prereqs="java:compile">
+
+	<jar jarfile="target/management.jar" basedir="target/classes">
+		<include name="org/apache/axis2/management/core/**/*" /> 
+		<include name="org/apache/axis2/management/interfaces/jmx/**/*" />
+	</jar>
+
+
+	<mkdir dir="target/classes/META-INF" />
+	<copy file="resources/management-services/services.xml" tofile="target/classes/META-INF/services.xml" />
+	<jar jarfile="target/management.aar" basedir="target/classes"> 
+		<include name="org/apache/axis2/management/interfaces/ws/*.class" /> 
+		<include name="META-INF/services.xml" />
+	</jar>
+
+	<jar jarfile="target/management-ws-stubs.jar" basedir="target/classes">
+		<include name="org/apache/axis2/management/interfaces/ws/stubs/**/*" /> 
+	</jar>
+
+	<copy file="resources/management-module/module.xml" tofile="target/classes/META-INF/module.xml" />
+	<jar jarfile="target/management.mar" basedir="target/classes">
+		<include name="org/apache/axis2/management/invoker/**/*" />  
+		<include name="META-INF/module.xml" />
+	</jar>
+
+	<mkdir dir="target/temp-war/WEB-INF/lib" />
+	<mkdir dir="target/temp-war/images" />
+	<mkdir dir="target/temp-war/css" />
+	<copy file="resources/management-console/web.xml" tofile="target/temp-war/WEB-INF/web.xml" />
+	<copy todir="target/temp-war/images">
+		<fileset dir="resources/management-console/images" />
+	</copy>
+	<copy todir="target/temp-war/css">
+		<fileset dir="resources/management-console/css" />
+	</copy>
+	<copy file="target/management-ws-stubs.jar" tofile="target/temp-war/WEB-INF/lib/management-ws-stubs.jar" />
+	<jar jarfile="target/temp-war/WEB-INF/lib/axis2console.jar" basedir="target/classes">
+		<include name="org/apache/axis2/management/console/web/**/*" /> 
+	</jar>
+	<jar jarfile="target/axis2console.war" basedir="target/temp-war">
+		<include name="**/*" /> 
+	</jar>
+	<delete includeEmptyDirs="true">
+		<fileset dir="target/temp-war" />
+	</delete>
+
+ </goal>
+
+ <goal name="src-dist">
+	<jar jarfile="target/management-src.jar" basedir=".">
+		<include name="src/**/*" />
+		<include name="etc/*.*" />
+		<include name="resources/**/*" />
+		<include name="src/**/*" />
+		<include name="project.xml" />
+		<include name="maven.xml" />
+		<include name="target" /> 
+	</jar>
+ </goal>
+</project>
Index: management/project.xml
===================================================================
--- management/project.xml	(revision 405641)
+++ management/project.xml	(working copy)
@@ -8,7 +8,7 @@
   <name>Apache Axis2 - Management</name>
   <inceptionYear>2006</inceptionYear>
   <dependencies>
-       <dependency>
+        <dependency>
             <groupId>ws-commons</groupId>
             <artifactId>axiom-api</artifactId>
             <version>${axiom.version}</version>
@@ -21,19 +21,24 @@
         <dependency>
             <groupId>axis2</groupId>
             <artifactId>axis2-common</artifactId>
-            <version>${axis2.version}</version>
+            <version>${pom.currentVersion}</version>
         </dependency>
         <dependency>
             <groupId>axis2</groupId>
+            <artifactId>axis2-wsdl</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+        <dependency>
+            <groupId>axis2</groupId>
             <artifactId>axis2-codegen</artifactId>
-            <version>${axis2.version}</version>
+            <version>${pom.currentVersion}</version>
         </dependency>
 
         <dependency>
             <groupId>axis2</groupId>
             <artifactId>axis2-core</artifactId>
-            <version>${axis2.version}</version>
-        </dependency>        
+            <version>${pom.currentVersion}</version>
+        </dependency>              
         <!-- external JARs -->
         <dependency>
             <groupId>axis</groupId>
Index: management/src/org/apache/axis2/management/console/web/stubs/AbstractStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AbstractStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AbstractStub.java	(working copy)
@@ -1,83 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.om.OMNamespace;
-import org.apache.axis2.Constants;
-import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.client.Options;
-import org.apache.axis2.client.ServiceClient;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-
-public class AbstractStub {
-
-
-	public OMElement getMethod(String name, String[] args) {
-
-		OMFactory fac = OMAbstractFactory.getOMFactory();
-		OMNamespace omNs = fac.createOMNamespace("management.console.web", "management");
-		OMElement method = fac.createOMElement(name, omNs);
-
-		for(int i = 0; i<args.length; i++) {
-			OMElement argument = fac.createOMElement("Argument", omNs);
-			argument.addChild(fac.createOMText(argument, args[i]));
-			method.addChild(argument);
-		}
-
-		return method;
-	}
-
-
-	public String unpackValue(OMElement element) {
-
-		element.build();
-		element.detach();
-
-		ArrayList resultList = new ArrayList();
-		OMElement value = element.getFirstElement();
-
-		return value.getText();
-	}	
-
-
-	public String[] unpackValues(OMElement element) {
-
-		element.build();
-		element.detach();
-
-		ArrayList resultList = new ArrayList();
-		Iterator iterator = element.getChildren();
-
-		while(iterator.hasNext()) {
-			OMElement value = (OMElement)iterator.next();
-			resultList.add(value.getText());
-		}
-
-		String[] results = (String[])resultList.toArray(new String[resultList.size()]);
-		return results;
-	}
-	
-	
-	public OMElement invoke(EndpointReference targetEPR, OMElement method) {
-		
-		OMElement result = null;
-		
-		try {
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-	
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-		
-		return result;
-	}
-
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisOperationStatsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisOperationStatsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisOperationStatsStub.java	(working copy)
@@ -1,39 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.addressing.EndpointReference;
-
-public class AxisOperationStatsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisOperationStatsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisOperationStats");
-	}
-	
-	
-	public void setOperationToMonitor(String serviceName, String operationName) {
-		
-		OMElement method = getMethod("setOperationToMonitor", new String[]{serviceName, operationName});
-		invoke(targetEPR, method);
-	}
-
-	
-	public String getInMessages() {
-		
-		OMElement method = getMethod("getInMessages", new String[]{});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValue(result);
-	}	
-	
-	
-	public void clearInMessages() {
-		
-		OMElement method = getMethod("clearInMessages", new String[]{});
-		invoke(targetEPR, method);
-	}
-	
-	
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisServiceStatsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisServiceStatsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisServiceStatsStub.java	(working copy)
@@ -1,38 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.addressing.EndpointReference;
-
-public class AxisServiceStatsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisServiceStatsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisServiceStats");
-	}
-	
-	
-	public void setServiceToMonitor(String serviceName) {
-		
-		System.out.println("INFO: stub setServiceToMonitor invoked.");
-		OMElement method = getMethod("setServiceToMonitor", new String[]{serviceName});
-		invoke(targetEPR, method);
-	}
-
-	
-	public String getInMessages() {
-		
-		OMElement method = getMethod("getInMessages", new String[]{});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValue(result);
-	}	
-	
-	
-	public void clearInMessages() {
-		
-		OMElement method = getMethod("clearInMessages", new String[]{});
-		invoke(targetEPR, method);
-	}
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisTransportsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisTransportsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisTransportsStub.java	(working copy)
@@ -1,51 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.addressing.EndpointReference;
-
-public class AxisTransportsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisTransportsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisTransports");
-	}
-	
-	
-	public String[] getTransportInParameters(String name) {
-		
-		OMElement method = getMethod("getTransportInParameters", new String[]{name});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValues(result);
-	}
-	
-	
-	public String editTransportInParameter(String transportInName, String parameterName, String parameterValue) {
-		
-		OMElement method = getMethod("editTransportInParameter", new String[]{transportInName, parameterName, parameterValue});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValue(result);
-	}
-		
-	
-	public String[] getTransportOutParameters(String name) {
-		
-		OMElement method = getMethod("getTransportOutParameters", new String[]{name});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValues(result);
-	}
-	
-	
-	public String editTransportOutParameter(String transportOutName, String parameterName, String parameterValue) {
-		
-		OMElement method = getMethod("editTransportOutParameter", new String[]{transportOutName, parameterName, parameterValue});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValue(result);
-	}
-	
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisServiceGroupsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisServiceGroupsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisServiceGroupsStub.java	(working copy)
@@ -1,41 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.addressing.EndpointReference;
-
-public class AxisServiceGroupsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisServiceGroupsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisServiceGroups");
-	}
-	
-	
-	public String[] getServices(String name) {
-		
-		OMElement method = getMethod("getServices", new String[]{name});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getServiceGroupEngagedModules(String serviceGroupName) {
-		
-		OMElement method = getMethod("getServiceGroupEngagedModules", new String[]{serviceGroupName});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValues(result);
-	}
-		
-	
-	public String engageModuleToServiceGroup(String moduleName, String serviceGroupName) {
-		
-		OMElement method = getMethod("engageModuleToServiceGroup", new String[]{moduleName, serviceGroupName});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValue(result);
-	}
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisDynamicStatsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisDynamicStatsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisDynamicStatsStub.java	(working copy)
@@ -1,23 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.addressing.EndpointReference;
-
-public class AxisDynamicStatsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisDynamicStatsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisDynamicStats");
-	}
-
-	
-	public String[] getMonitoredData() {
-		
-		OMElement method = getMethod("getMonitoredData", new String[]{});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValues(result);
-	}		
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisGlobalsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisGlobalsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisGlobalsStub.java	(working copy)
@@ -1,253 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.Constants;
-import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.client.Options;
-import org.apache.axis2.client.ServiceClient;
-
-public class AxisGlobalsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisGlobalsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisGlobals");
-	}
-
-
-	public String[] getGlobalParameters() {
-
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getGlobalParameters", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-
-
-	public String editGlobalParameter(String name, String value) {
-	
-		OMElement result = null;
-
-		try {
-			OMElement method = getMethod("editGlobalParameter", new String[]{name, value});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-
-	}
-	
-	
-	// Services
-	
-	public String[] getServices() {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getServices", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getServiceGroups() {
-		
-		OMElement method = getMethod("getServiceGroups", new String[]{});
-		OMElement result = invoke(targetEPR, method);
-			
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getFaultyServices() {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getFaultyServices", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String removeService(String name) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("removeService", new String[]{name});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-	
-	// Modules
-	
-	public String[] getModules() {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getModules", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getGloballyEngagedModules() {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getGloballyEngagedModules", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String engageModuleGlobally(String module) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("engageModuleGlabally", new String[]{module});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-	
-	// Transports
-	
-	public String[] getTransportIns() {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getTransportIns", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getTransportOuts() {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getTransportOuts", new String[]{});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisOperationsStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisOperationsStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisOperationsStub.java	(working copy)
@@ -1,108 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.Constants;
-import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.client.Options;
-import org.apache.axis2.client.ServiceClient;
-
-public class AxisOperationsStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisOperationsStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisOperations");
-	}
-		
-	
-	public String[] getOperationParameters(String service, String operation) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getOperationParameters", new String[]{service, operation});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-
-	
-	public String editOperationParameter(String serviceName, String opName, String parameterName, String parameterValue) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("editOperationParameter", new String[]{serviceName, opName, parameterName, parameterValue});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-	
-	// Modules
-	
-	public String[] getOperationEngagedModules(String serviceName, String opName) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getOperationEngagedModules", new String[]{serviceName, opName});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String engageModuleToOperation(String module, String service, String operation) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("engageModuleToOperation", new String[]{module, service, operation});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisServicesStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisServicesStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisServicesStub.java	(working copy)
@@ -1,132 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.Constants;
-import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.client.Options;
-import org.apache.axis2.client.ServiceClient;
-
-public class AxisServicesStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisServicesStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisServices");
-	}
-
-	
-	public String[] getServiceParameters(String name) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getServiceParameters", new String[]{name});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-
-	
-	public String editServiceParameter(String serviceName, String parameterName, String parameterValue) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("editServiceParameter", new String[]{serviceName, parameterName, parameterValue});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-	
-	// Operations
-	
-	public String[] getOperations(String service) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getOperations", new String[]{service});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	// Modules
-	
-	public String[] getServiceEngagedModules(String serviceName) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getServiceEngagedModules", new String[]{serviceName});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String engageModuleToService(String module, String service) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("engageModuleToService", new String[]{module, service});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/stubs/AxisModulesStub.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/stubs/AxisModulesStub.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/stubs/AxisModulesStub.java	(working copy)
@@ -1,128 +0,0 @@
-package org.apache.axis2.management.console.web.stubs;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.Constants;
-import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.client.Options;
-import org.apache.axis2.client.ServiceClient;
-
-public class AxisModulesStub extends AbstractStub {
-
-	private EndpointReference targetEPR = null;
-
-
-	public AxisModulesStub(String host) {
-		targetEPR = new EndpointReference(host+"/services/AxisModules");
-	}
-	
-	
-	public String isEngagedGlobally(String moduleName) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("isEngagedGlobally", new String[]{moduleName});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-	
-	public String[] getEngagedServices(String moduleName) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getEngagedServices", new String[]{moduleName});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getEngagedOperations(String moduleName) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getEngagedOperations", new String[]{moduleName});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-	
-	
-	public String[] getModuleParameters(String name) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("getModuleParameters", new String[]{name});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValues(result);
-	}
-
-	
-	public String editModuleParameter(String moduleName, String parameterName, String parameterValue) {
-		
-		OMElement result = null;
-		
-		try {
-			OMElement method = getMethod("editModuleParameter", new String[]{moduleName, parameterName, parameterValue});
-
-			Options options = new Options();
-			options.setTo(targetEPR);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-			ServiceClient client = new ServiceClient();
-			client.setOptions(options);
-			result = client.sendReceive(method);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		return unpackValue(result);
-	}
-	
-}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/Axis2ModulesConsole.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2ModulesConsole.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2ModulesConsole.java	(working copy)
@@ -1,19 +1,19 @@
 package org.apache.axis2.management.console.web;
 
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
-import org.apache.axis2.management.console.web.stubs.AxisModulesStub;
-import org.apache.axis2.management.console.web.stubs.AxisOperationsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServicesStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServicesStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisOperationsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisModulesStub;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.StringTokenizer;
 
 public class Axis2ModulesConsole extends HttpServlet{
 
@@ -71,13 +71,13 @@
 			axisModulesStub = new AxisModulesStub(host);
 
 			processModules(request);
-			
+
 			if(request.getParameter("level") != null) {
 				engageGlobally(request);
 				engageToService(request);
 				engageToOperation(request);
 			}
-			
+
 			echo("<tr><td bgcolor=\"#000080\" colspan=\"2\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
 					"<a href=\"modules\">Modules</a> | " +
 					"<a href=\"transports\">Transports</a> | " +
@@ -114,9 +114,9 @@
 
 	}
 
-	  
+
 	private void processModules(HttpServletRequest request) throws Exception {
-		
+
 		String moduleToUpdate = request.getParameter("update");
 		if(moduleToUpdate != null) {
 			String[] parameters =axisModulesStub.getModuleParameters(moduleToUpdate);
@@ -124,15 +124,15 @@
 				StringTokenizer tokens = new StringTokenizer(parameters[i], ":");
 				String name = tokens.nextToken();
 				String value = request.getParameter(name);
-				
+
 				axisModulesStub.editModuleParameter(moduleToUpdate, name, value);
 			}
 		}
 	}
-	
-	  
+
+
 	private void displayModules() throws Exception {
-		
+
 		String[] modules = axisGlobalsStub.getModules();
 		if(modules != null) {
 			echo("<b>Modules</b>");
@@ -143,13 +143,13 @@
 			echo("No modules are deployed");
 		}
 	}
-	
-	
+
+
 	private void displayModuleInformation(String moduleName) {
-		
+
 		echo("<h2>Module: " + moduleName + "</h2>");
 		echo("<h3>Module parameters</h3>");
-		
+
 		String[] params = axisModulesStub.getModuleParameters(moduleName);
 		if(params.length == 0) {
 			echo("No parameters are available for this module.");
@@ -167,19 +167,19 @@
 			echo("</table></form><br />");
 		}
 	}
-	
-	
+
+
 	private void displayEngagedLevels(String moduleName) {
-		
+
 		echo("<hr /><h2>Engagement details</h2>");
-		
+
 		echo("<h3>Global engagement</h3>");
 		if(axisModulesStub.isEngagedGlobally(moduleName).equals("TRUE")) {
 			echo("This module is engaged globally.");
 		} else {
 			echo("This module is not engaged globally.");
 		}
-		
+
 		echo("<h3>Service level engagement</h3>");
 		String[] engagedServices = axisModulesStub.getEngagedServices(moduleName);
 		if(engagedServices.length == 0) {
@@ -191,7 +191,7 @@
 			}
 			echo("</ul>");
 		}
-		
+
 		echo("<h3>Operation level engagement</h3>");
 		String[] engagedOperations = axisModulesStub.getEngagedOperations(moduleName);
 		if(engagedOperations.length == 0) {
@@ -204,23 +204,23 @@
 			echo("</ul>");
 		}
 	}
-	
-	
+
+
 	private void displayGlobalEngageInformation(String moduleName) {
-		
+
 		echo("<hr /><h2>Engage module globally</h2>");
-		
+
 		echo("<form action=\"modules\" method=\"get\">" +
 				"<input type=\"hidden\" name=\"module\" value=\""+moduleName+"\" />" +
 				"<input type=\"hidden\" name=\"level\" value=\"global\" />" +
 				"<input type=\"submit\" value=\"Engage\" /></form>");
 	}
-	
-	
+
+
 	private void displayServiceEngageInformation(String moduleName) {
-		
+
 		echo("<h2>Engage module to service</h2>");
-		
+
 		echo("<form action=\"modules\" method=\"get\">" +
 				"<input type=\"hidden\" name=\"module\" value=\""+moduleName+"\" />" +
 				"<input type=\"hidden\" name=\"level\" value=\"service\" />" +
@@ -232,12 +232,12 @@
 		echo("</select>" +
 		"<input type=\"submit\" value=\"Engage\" /></form>");
 	}
-	
-	
+
+
 	private void displayOperationEngageInformation(String moduleName, String serviceName) {
-		
+
 		echo("<h2>Engage module to operation</h2>");
-		
+
 		echo("<form action=\"modules\" method=\"get\" name=\"operationEngageForm\">" +
 				"<input type=\"hidden\" name=\"module\" value=\""+moduleName+"\" />" +
 				"<input type=\"hidden\" name=\"level\" value=\"operation\" />" +
@@ -253,67 +253,67 @@
 		}
 		echo("</select>" +
 				"<select name=\"operation\">");
-		
+
 		if(serviceName == null) {
 			String[] deployedServices = axisGlobalsStub.getServices();
 			if(deployedServices.length == 0)
 				echo("<option>-No services are deployed-</option>");
 			else
 				serviceName = deployedServices[0];
-		} 
-		
+		}
+
 		String[] operations = axisServicesStub.getOperations(serviceName);
 		for(int i=0; i<operations.length; i++) {
 			echo("<option align=\"left\" value=\""+operations[i]+"\">"+operations[i]+"</option>");
 		}
-		
+
 		echo("</select>" +
 				"<input type=\"submit\" value=\"Engage\" /></form>");
 	}
-	
-	
+
+
 	private void engageGlobally(HttpServletRequest request) {
-		
+
 		if(request.getParameter("level").equals("global")) {
 			String module = request.getParameter("module");
-			
+
 			if(module != null) {
 				axisGlobalsStub.engageModuleGlobally(module);
 				info = "Module "+module+" globally engaged successfully.";
 			}
 		}
 	}
-	
-	
+
+
 	private void engageToService(HttpServletRequest request) {
-		
+
 		if(request.getParameter("level").equals("service")) {
 			String module = request.getParameter("module");
 			String service = request.getParameter("service");
-			
+
 			if(module != null && service != null) {
 				axisServicesStub.engageModuleToService(module, service);
 				info = "Module "+module+" engaged successfully to service "+service+".";
 			}
 		}
 	}
-	
-	
+
+
 	private void engageToOperation(HttpServletRequest request) {
-		
+
 		if(request.getParameter("level").equals("operation")) {
 			String module = request.getParameter("module");
 			String service = request.getParameter("service");
 			String operation = request.getParameter("operation");
-			
+
 			if(module != null && service != null && operation != null && !request.getParameter("serviceChanged").equals("true")) {
 				axisOperationsStub.engageModuleToOperation(module, service, operation);
 				info = "Module "+module+" engaged successfully to operation "+operation+" of service "+service+".";
 			}
 		}
 	}
-	  
 
+
 	private void echo(String info){
 		writer.println("<p>" + info + "</p>");
 	}
Index: management/src/org/apache/axis2/management/console/web/Login.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Login.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Login.java	(working copy)
@@ -1,13 +1,14 @@
 package org.apache.axis2.management.console.web;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
 
 public class Login extends HttpServlet{
 
Index: management/src/org/apache/axis2/management/console/web/Axis2Console.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2Console.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2Console.java	(working copy)
@@ -1,16 +1,16 @@
 package org.apache.axis2.management.console.web;
 
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.StringTokenizer;
 
 public class Axis2Console extends HttpServlet{
 
@@ -101,8 +101,8 @@
 		echo("<tr><td></td><td><input type=\"submit\" value=\"Update\" /></td></tr>");
 		echo("</table></form>");
 	}
-	
-	
+
+
 	private void displayModuleConfig() {
 		echo("<h3>Modules engaged globally</h3>");
 		String[] globalModules = axisGlobalsStub.getGloballyEngagedModules();
@@ -115,21 +115,21 @@
 			}
 			echo("</ul>");
 		}
-		
+
 		echo("<h3>Engage module globally</h3>");
 		echo("<form action=\"axis2console\" method=\"get\">" +
 				"<select name=\"module\">");
-		
+
 		String[] modules = axisGlobalsStub.getModules();
 		for(int i=0; i<modules.length; i++) {
 			echo("<option align=\"left\" value=\""+modules[i]+"\">"+modules[i]+"</option>");
 		}
 		echo("</select>" +
 				"<input type=\"hidden\" name=\"modules\" value=\"modules\" />" +
-				"<input type=\"submit\" value=\"Engage\" /></form>");		
+				"<input type=\"submit\" value=\"Engage\" /></form>");
 	}
 
-	  
+
 	private void processParameters(HttpServletRequest request) throws Exception {
 		String param = request.getParameter("parameter");
 		if(param != null) {
@@ -138,12 +138,12 @@
 				StringTokenizer tokens = new StringTokenizer(parameters[i], ":");
 				String name = tokens.nextToken();
 				String value = request.getParameter(name);
-	
+
 				axisGlobalsStub.editGlobalParameter(name, value);
 			}
 		}
 	}
-	
+
 	private void processModules(HttpServletRequest request) throws Exception {
 		String modules = request.getParameter("modules");
 		if(modules != null) {
Index: management/src/org/apache/axis2/management/console/web/Axis2TransportsConsole.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2TransportsConsole.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2TransportsConsole.java	(working copy)
@@ -1,17 +1,17 @@
 package org.apache.axis2.management.console.web;
 
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
-import org.apache.axis2.management.console.web.stubs.AxisTransportsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisTransportsStub;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.StringTokenizer;
 
 public class Axis2TransportsConsole extends HttpServlet{
 
@@ -63,7 +63,7 @@
 
 			processTransportIns(request);
 			processTransportOuts(request);
-			
+
 			echo("<tr><td bgcolor=\"#000080\" colspan=\"2\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
 					"<a href=\"modules\">Modules</a> | " +
 					"<a href=\"transports\">Transports</a> | " +
@@ -97,9 +97,9 @@
 
 	}
 
-	  
+
 	private void processTransportIns(HttpServletRequest request) throws Exception {
-		
+
 		String transportInToUpdate = request.getParameter("update_in");
 		if(transportInToUpdate != null) {
 			String[] parameters =axisTransportsStub.getTransportInParameters(transportInToUpdate);
@@ -107,15 +107,15 @@
 				StringTokenizer tokens = new StringTokenizer(parameters[i], ":");
 				String name = tokens.nextToken();
 				String value = request.getParameter(name);
-				
+
 				axisTransportsStub.editTransportInParameter(transportInToUpdate, name, value);
 			}
 		}
 	}
-	
-	
+
+
 	private void processTransportOuts(HttpServletRequest request) throws Exception {
-		
+
 		String transportOutToUpdate = request.getParameter("update_out");
 		if(transportOutToUpdate != null) {
 			String[] parameters =axisTransportsStub.getTransportOutParameters(transportOutToUpdate);
@@ -123,18 +123,18 @@
 				StringTokenizer tokens = new StringTokenizer(parameters[i], ":");
 				String name = tokens.nextToken();
 				String value = request.getParameter(name);
-				
+
 				axisTransportsStub.editTransportOutParameter(transportOutToUpdate, name, value);
 			}
 		}
 	}
-	
-	  
+
+
 	private void displayTransports() throws Exception {
-		
+
 		String[] transportIns = axisGlobalsStub.getTransportIns();
 		String[] transportOuts = axisGlobalsStub.getTransportOuts();
-		
+
 		if(transportIns != null) {
 			echo("<b>TransportIns</b>");
 			for(int i=0; i<transportIns.length; i++) {
@@ -143,7 +143,7 @@
 		} else {
 			echo("No transportIns are deployed");
 		}
-		
+
 		if(transportOuts != null) {
 			echo("<b>TransportOuts</b>");
 			for(int i=0; i<transportOuts.length; i++) {
@@ -153,13 +153,13 @@
 			echo("No transportOuts are deployed");
 		}
 	}
-	
-	
+
+
 	private void displayTransportInInformation(String transportName) {
-		
+
 		echo("<h2>Transport: " + transportName + "</h2>");
 		echo("<h3>Transport parameters</h3>");
-		
+
 		String[] params = axisTransportsStub.getTransportInParameters(transportName);
 		if(params.length == 0) {
 			echo("No parameters are available for this transport.");
@@ -177,13 +177,13 @@
 			echo("</table></form><br />");
 		}
 	}
-	
-	
+
+
 	private void displayTransportOutInformation(String transportName) {
-		
+
 		echo("<h2>Transport: " + transportName + "</h2>");
 		echo("<h3>Transport parameters</h3>");
-		
+
 		String[] params = axisTransportsStub.getTransportOutParameters(transportName);
 		if(params.length == 0) {
 			echo("No parameters are available for this transport.");
@@ -201,8 +201,8 @@
 			echo("</table></form><br />");
 		}
 	}
-	  
 
+
 	private void echo(String info){
 		writer.println("<p>" + info + "</p>");
 	}
Index: management/src/org/apache/axis2/management/console/web/Error.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Error.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Error.java	(working copy)
@@ -1,62 +1,63 @@
-package org.apache.axis2.management.console.web;
-
-import javax.servlet.ServletConfig;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-
-public class Error extends HttpServlet{
-
-	PrintWriter writer = null;
-
-	public void init(ServletConfig config) throws ServletException{
-
-	}
-
-	public void doGet(HttpServletRequest request, HttpServletResponse response)
-		throws ServletException, IOException{
-
-			writer = response.getWriter();
-
-			response.setContentType("text/html");
-			response.setHeader("Cache-Control", "no-store");
-
-			String docType = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 " + "Transitional//EN\">\n";
-
-			writer.println(docType +
-						"<html>\n" +
-						"<head><title>Axis2Console</title><link href=\"css/axis-style.css\" rel=\"stylesheet\" type=\"text/css\"/></head>\n" +
-						"<body>");
-
-
-
-			process(request, response);
-
-			writer.println("</body></html>");
-	}
-
-	private void echo(String info){
-		writer.println("<p>" + info + "</p>");
-	}
-
-	private void process(HttpServletRequest request, HttpServletResponse response) {
-
-		echo("<table width=\"100%\"><tr><td><table width=\"100%\"><tr><td align=\"left\"><img src= \"images/asf-logo.gif\" /></td><td align=\"right\"><img src = \"images/axis.jpg\" /></td></table></tr><tr><td align=\"center\"><h1>Management Console</h1></tr>");
-		echo("<tr><td><h1>Error</h1>" +
-				"<p>An error was occured while performing the operation. Please check if you have performed following steps." +
-				"<ul>" +
-					"<li>management.mar module is deployed in the \"axis2\\WEB-INF\\modules\" directory.</li><br /><br />" +
-					"<li>management.aar is deployed in the \"axis2\\WEB-INF\\services\" directory.</li><br /><br />" +
-					"<li>management.jar is deployed in the \"axis2\\WEB-INF\\lib\" directory.</li><br /><br />" +
-					"<li>Axis2 jars are accessible from the Axis2Console servlet. Axis2Console uses Axis2 jars as a web services client. Therefore those jars should be placed in \"shared\\lib\" directory or \"webapps\\axis2console\\WEB-INF\\lib\" directory if you are using Tomcat. Consult the documentation for other servlet containers.</li><br /><br />" +
-					"<li>The host address is supplied correctly in the Login screen. Host address is the URL of Axis2 directory in the format \"http://&ltip-address&gt:&ltport&gt/axis2\". For example if you are running Tomcat on port 8080 in localhost, the host address is \"http://localhost:8080/axis2\".</li><br /><br />" +
-				"</ul>" +
-				"<br />" +
-				"Send a mail to Axis2 mailing list if you still get errors." +
-				"</p>");
-	}
+package org.apache.axis2.management.console.web;
+
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+public class Error extends HttpServlet{
+
+	PrintWriter writer = null;
+
+	public void init(ServletConfig config) throws ServletException{
+
+	}
+
+	public void doGet(HttpServletRequest request, HttpServletResponse response)
+		throws ServletException, IOException{
+
+			writer = response.getWriter();
+
+			response.setContentType("text/html");
+			response.setHeader("Cache-Control", "no-store");
+
+			String docType = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 " + "Transitional//EN\">\n";
+
+			writer.println(docType +
+						"<html>\n" +
+						"<head><title>Axis2Console</title><link href=\"css/axis-style.css\" rel=\"stylesheet\" type=\"text/css\"/></head>\n" +
+						"<body>");
+
+
+
+			process(request, response);
+
+			writer.println("</body></html>");
+	}
+
+	private void echo(String info){
+		writer.println("<p>" + info + "</p>");
+	}
+
+	private void process(HttpServletRequest request, HttpServletResponse response) {
+
+		echo("<table width=\"100%\"><tr><td><table width=\"100%\"><tr><td align=\"left\"><img src= \"images/asf-logo.gif\" /></td><td align=\"right\"><img src = \"images/axis.jpg\" /></td></table></tr><tr><td align=\"center\"><h1>Management Console</h1></tr>");
+		echo("<tr><td><h1>Error</h1>" +
+				"<p>An error was occured while performing the operation. Please check if you have performed following steps." +
+				"<ul>" +
+					"<li>management.mar module is deployed in the \"axis2\\WEB-INF\\modules\" directory.</li><br /><br />" +
+					"<li>management.aar is deployed in the \"axis2\\WEB-INF\\services\" directory.</li><br /><br />" +
+					"<li>management.jar is deployed in the \"axis2\\WEB-INF\\lib\" directory.</li><br /><br />" +
+					"<li>Axis2 jars are accessible from the Axis2Console servlet. Axis2Console uses Axis2 jars as a web services client. Therefore those jars should be placed in \"shared\\lib\" directory or \"webapps\\axis2console\\WEB-INF\\lib\" directory if you are using Tomcat. Consult the documentation for other servlet containers.</li><br /><br />" +
+					"<li>The host address is supplied correctly in the Login screen. Host address is the URL of Axis2 directory in the format \"http://&ltip-address&gt:&ltport&gt/axis2\". For example if you are running Tomcat on port 8080 in localhost, the host address is \"http://localhost:8080/axis2\".</li><br /><br />" +
+				"</ul>" +
+				"<br />" +
+				"Send a mail to Axis2 mailing list if you still get errors." +
+				"</p>");
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/console/web/Axis2ServiceGroupsConsole.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2ServiceGroupsConsole.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2ServiceGroupsConsole.java	(working copy)
@@ -1,16 +1,17 @@
 package org.apache.axis2.management.console.web;
 
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServiceGroupsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServiceGroupsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
 
 public class Axis2ServiceGroupsConsole extends HttpServlet{
 
@@ -61,7 +62,7 @@
 			axisGlobalsStub = new AxisGlobalsStub(host);
 
 			processModules(request);
-			
+
 			echo("<tr><td bgcolor=\"#000080\" colspan=\"2\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
 					"<a href=\"modules\">Modules</a> | " +
 					"<a href=\"transports\">Transports</a> | " +
@@ -87,10 +88,10 @@
 		}
 
 	}
-	
-	  
+
+
 	private void displayServiceGroups() throws Exception {
-		
+
 		String[] serviceGroups = axisGlobalsStub.getServiceGroups();
 		if(serviceGroups != null) {
 			echo("<b>ServiceGroups</b>");
@@ -101,17 +102,17 @@
 			echo("No ServiceGroups are deployed");
 		}
 	}
-	
-	
+
+
 	private void displayServiceGroupInformation(String serviceGroupName) {
-		
+
 		if(serviceGroupName == null) {
 			echo("Select a ServiceGroup to display configuration.");
 			return;
 		}
-		
+
 		echo("<h2>ServiceGroup: " + serviceGroupName + "</h2>");
-		
+
 		echo("<h3>Engaged modules for this ServiceGroup</h3>");
 		String[] serviceGroupModules = axisServiceGroupsStub.getServiceGroupEngagedModules(serviceGroupName);
 		if(serviceGroupModules.length == 0) {
@@ -123,11 +124,11 @@
 			}
 			echo("</ul>");
 		}
-		
+
 		echo("<h3>Engage module to ServiceGroup</h3>");
 		echo("<form action=\"service_groups\" method=\"get\">" +
 				"<select name=\"module\">");
-		
+
 		String[] modules = axisGlobalsStub.getModules();
 		for(int i=0; i<modules.length; i++) {
 			echo("<option align=\"left\" value=\""+modules[i]+"\">"+modules[i]+"</option>");
@@ -135,15 +136,15 @@
 		echo("</select>" +
 				"<input type=\"hidden\" name=\"service_group\" value=\""+serviceGroupName+"\" />" +
 				"<input type=\"hidden\" name=\"modules\" value=\"modules\" />" +
-				"<input type=\"submit\" value=\"Engage\" /></form>");	
-		
+				"<input type=\"submit\" value=\"Engage\" /></form>");
+
 		echo("<p>Click the button below to display operations of this service.");
 		echo("<form action=\"services\" method=\"get\">" +
 				"<input type=\"hidden\" name=\"service_group\" value=\""+serviceGroupName+"\" />" +
 				"<input type=\"submit\" value=\"Services\" /></form></p><br />");
 	}
-	
-	
+
+
 	private void processModules(HttpServletRequest request) throws Exception {
 		String modules = request.getParameter("modules");
 		if(modules != null) {
@@ -152,8 +153,8 @@
 			axisServiceGroupsStub.engageModuleToServiceGroup(module, serviceGroup);
 		}
 	}
-	  
 
+
 	private void echo(String info){
 		writer.println("<p>" + info + "</p>");
 	}
Index: management/src/org/apache/axis2/management/console/web/Axis2DynamicStatsConsole.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2DynamicStatsConsole.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2DynamicStatsConsole.java	(working copy)
@@ -1,211 +1,210 @@
-package org.apache.axis2.management.console.web;
-
-import org.apache.axis2.management.console.web.stubs.AxisDynamicStatsStub;
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
-import org.apache.axis2.management.console.web.stubs.AxisOperationStatsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServiceStatsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServicesStub;
-
-import javax.servlet.ServletConfig;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.StringTokenizer;
-
-public class Axis2DynamicStatsConsole extends HttpServlet{
-
-	PrintWriter writer = null;
-
-	AxisDynamicStatsStub axisDynamicStatsStub = null;
-	AxisServiceStatsStub axisServiceStatsStub = null;
-	AxisOperationStatsStub axisOperationStatsStub = null;
-	AxisGlobalsStub axisGlobalsStub = null;
-	AxisServicesStub axisServicesStub = null;
-
-	public void init(ServletConfig config) throws ServletException{
-
-	}
-
-	public void doGet(HttpServletRequest request, HttpServletResponse response)
-		throws ServletException, IOException{
-
-			writer = response.getWriter();
-
-			response.setContentType("text/html");
-			response.setHeader("Cache-Control", "no-store");
-
-			PrintWriter out = response.getWriter();
-
-			String docType = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 " + "Transitional//EN\">\n";
-
-			out.println(docType +
-						"<html>\n" +
-						"<head><title>Axis2Console</title><link href=\"css/axis-style.css\" rel=\"stylesheet\" type=\"text/css\"/></head>\n" +
-						"<body>");
-
-
-
-			process(request, response);
-
-			out.println("</body></html>");
-
-	}
-
-
-	public void process(HttpServletRequest request, HttpServletResponse response){
-
-		echo("<table width=\"100%\" height=\"100%\"><tr><td><table width=\"100%\"><tr><td aligns=\"left\"><img src= \"images/asf-logo.gif\" /></td><td align=\"right\"><img src = \"images/axis.jpg\" /></td></table></tr><tr><td align=\"center\"><h1>Management Console</h1></tr>");
-
-		try {
-
-			HttpSession session = request.getSession(false);
-			String host = session.getAttribute("host").toString();
-			axisDynamicStatsStub = new AxisDynamicStatsStub(host);
-			axisServiceStatsStub = new AxisServiceStatsStub(host);
-			axisOperationStatsStub = new AxisOperationStatsStub(host);
-			axisGlobalsStub = new AxisGlobalsStub(host);
-			axisServicesStub = new AxisServicesStub(host);
-			
-			if(request.getParameter("level") != null) {
-				monitorService(request);
-				monitorOperation(request);
-			}
-
-			echo("<tr><td bgcolor=\"#000080\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
-					"<a href=\"modules\">Modules</a> | " +
-					"<a href=\"transports\">Transports</a> | " +
-					"<a href=\"service_groups\">ServiceGroups</a> | " +
-					"<a href=\"services\">Services</a> | " +
-					"<a href=\"operations\">Operations</a> | " +
-					"<a href=\"dynamicstats\">Statistics</a> | " +
-					"<a href=\"login\">Log out</a></td></tr>" +
-					"<tr><td colspan=\"2\"></font></td></tr>");
-
-			echo("<tr><td width=\"100%\" align=\"left\" valign=\"top\">");
-			displayServiceMonitorPanel();
-			displayOperationMonitorPanel(request.getParameter("service"));
-			echo("</td></tr>");
-			echo("<tr><td height=\"100%\" width=\"100%\" align=\"left\" valign=\"top\">");
-			displayDynamicStats();
-			echo("</td></tr></table>");
-
-		} catch(Exception e) {
-			try {
-				response.sendRedirect("error");
-			} catch(Exception error) {
-				echo("<tr><td><hr />Exception occured.\n" + error.getMessage() + "</td></tr>");
-			}
-		}
-
-	}
-	
-	private void displayMonitorPanel() throws Exception {
-		
-	}
-	
-	private void displayServiceMonitorPanel() {
-		
-		echo("<h2>Monitor service</h2>");
-		
-		echo("<form action=\"dynamicstats\" method=\"get\">" +
-				"<input type=\"hidden\" name=\"level\" value=\"service\" />" +
-				"<select name=\"service\">");
-		String[] services = axisGlobalsStub.getServices();
-		for(int i=0; i<services.length; i++) {
-			echo("<option align=\"left\" value=\""+services[i]+"\">"+services[i]+"</option>");
-		}
-		echo("</select>" +
-		"<input type=\"submit\" value=\"Monitor\" /></form>");
-	}
-	
-	private void displayOperationMonitorPanel(String serviceName) {
-		
-		echo("<h2>Monitor operation</h2>");
-		
-		echo("<form action=\"dynamicstats\" method=\"get\" name=\"operationMonitorForm\">" +
-				"<input type=\"hidden\" name=\"level\" value=\"operation\" />" +
-				"<input type=\"hidden\" name=\"serviceChanged\"/>" +
-				"<select name=\"service\" onChange=\"document.operationMonitorForm.serviceChanged.value=true;document.operationMonitorForm.submit()\">");
-		String[] services = axisGlobalsStub.getServices();
-		for(int i=0; i<services.length; i++) {
-			String selected = "";
-			if(services[i].equals(serviceName)) {
-				selected = "selected=\"true\"";
-			}
-			echo("<option "+selected+"align=\"left\" value=\""+services[i]+"\">"+services[i]+"</option>");
-		}
-		echo("</select>" +
-				"<select name=\"operation\">");
-		
-		if(serviceName == null) {
-			String[] deployedServices = axisGlobalsStub.getServices();
-			if(deployedServices.length == 0)
-				echo("<option>-No services are deployed-</option>");
-			else
-				serviceName = deployedServices[0];
-		} 
-		
-		String[] operations = axisServicesStub.getOperations(serviceName);
-		for(int i=0; i<operations.length; i++) {
-			echo("<option align=\"left\" value=\""+operations[i]+"\">"+operations[i]+"</option>");
-		}
-		
-		echo("</select>" +
-				"<input type=\"submit\" value=\"Monitor\" /></form>");
-	}
-
-	private void displayDynamicStats() throws Exception {
-		// display dynamic statistics
-		echo("<h3>Axis2 Dynamic Statistics</h3>");
-		echo("<table width=\"100%\">" +
-				"<tr><td></td><td></td><td align=\"center\">In messages</td><td align=\"center\">Out messages</td><td align=\"center\">Fault in messages</td><td align=\"center\">Fault out messages</td></tr>");
-		String[] data = axisDynamicStatsStub.getMonitoredData();
-		for(int i=0; i<data.length; i++) {
-			StringTokenizer tokens = new StringTokenizer(data[i], ":");
-			String ID = tokens.nextToken();
-			if(ID.equals("All")) {
-				echo("<tr bgcolor=\"#99CCFF\"><td>"+ID+"</td><td>"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td></tr>");
-			} else if(ID.equals("Service")) {
-				echo("<tr bgcolor=\"#CCCCFF\"><td>"+ID+"</td><td>"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td></tr>");
-			} else if(ID.equals("Operation")) {
-				echo("<tr bgcolor=\"#CCFFFF\"><td>"+ID+"</td><td>"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td></tr>");
-			}
-		}
-		echo("</table>");
-	}
-	
-	private void monitorService(HttpServletRequest request) {
-		
-		System.out.println("INFO: monitor service invoked.");
-		if(request.getParameter("level").equals("service")) {
-			String service = request.getParameter("service");
-			
-			System.out.println("INFO: Service monitor setting..");
-			if(service != null) {
-				axisServiceStatsStub.setServiceToMonitor(service);
-			}
-		}
-	}
-	
-	private void monitorOperation(HttpServletRequest request) {
-		
-		if(request.getParameter("level").equals("operation")) {
-			String service = request.getParameter("service");
-			String operation = request.getParameter("operation");
-			
-			if(service != null && operation != null && !request.getParameter("serviceChanged").equals("true")) {
-				axisOperationStatsStub.setOperationToMonitor(service, operation);
-			}
-		}
-	}
-	
-	private void echo(String info){
-		writer.println("<p>" + info + "</p>");
-	}
-}
-	
-	
\ No newline at end of file
+package org.apache.axis2.management.console.web;
+
+import org.apache.axis2.management.interfaces.ws.stubs.AxisDynamicStatsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServiceStatsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisOperationStatsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServicesStub;
+
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+public class Axis2DynamicStatsConsole extends HttpServlet{
+
+	PrintWriter writer = null;
+
+	AxisDynamicStatsStub axisDynamicStatsStub = null;
+	AxisServiceStatsStub axisServiceStatsStub = null;
+	AxisOperationStatsStub axisOperationStatsStub = null;
+	AxisGlobalsStub axisGlobalsStub = null;
+	AxisServicesStub axisServicesStub = null;
+
+	public void init(ServletConfig config) throws ServletException{
+
+	}
+
+	public void doGet(HttpServletRequest request, HttpServletResponse response)
+		throws ServletException, IOException{
+
+			writer = response.getWriter();
+
+			response.setContentType("text/html");
+			response.setHeader("Cache-Control", "no-store");
+
+			PrintWriter out = response.getWriter();
+
+			String docType = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 " + "Transitional//EN\">\n";
+
+			out.println(docType +
+						"<html>\n" +
+						"<head><title>Axis2Console</title><link href=\"css/axis-style.css\" rel=\"stylesheet\" type=\"text/css\"/></head>\n" +
+						"<body>");
+
+
+
+			process(request, response);
+
+			out.println("</body></html>");
+
+	}
+
+
+	public void process(HttpServletRequest request, HttpServletResponse response){
+
+		echo("<table width=\"100%\" height=\"100%\"><tr><td><table width=\"100%\"><tr><td aligns=\"left\"><img src= \"images/asf-logo.gif\" /></td><td align=\"right\"><img src = \"images/axis.jpg\" /></td></table></tr><tr><td align=\"center\"><h1>Management Console</h1></tr>");
+
+		try {
+
+			HttpSession session = request.getSession(false);
+			String host = session.getAttribute("host").toString();
+			axisDynamicStatsStub = new AxisDynamicStatsStub(host);
+			axisServiceStatsStub = new AxisServiceStatsStub(host);
+			axisOperationStatsStub = new AxisOperationStatsStub(host);
+			axisGlobalsStub = new AxisGlobalsStub(host);
+			axisServicesStub = new AxisServicesStub(host);
+
+			if(request.getParameter("level") != null) {
+				monitorService(request);
+				monitorOperation(request);
+			}
+
+			echo("<tr><td bgcolor=\"#000080\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
+					"<a href=\"modules\">Modules</a> | " +
+					"<a href=\"transports\">Transports</a> | " +
+					"<a href=\"service_groups\">ServiceGroups</a> | " +
+					"<a href=\"services\">Services</a> | " +
+					"<a href=\"operations\">Operations</a> | " +
+					"<a href=\"dynamicstats\">Statistics</a> | " +
+					"<a href=\"login\">Log out</a></td></tr>" +
+					"<tr><td colspan=\"2\"></font></td></tr>");
+
+			echo("<tr><td width=\"100%\" align=\"left\" valign=\"top\">");
+			displayServiceMonitorPanel();
+			displayOperationMonitorPanel(request.getParameter("service"));
+			echo("</td></tr>");
+			echo("<tr><td height=\"100%\" width=\"100%\" align=\"left\" valign=\"top\">");
+			displayDynamicStats();
+			echo("</td></tr></table>");
+
+		} catch(Exception e) {
+			try {
+				response.sendRedirect("error");
+			} catch(Exception error) {
+				echo("<tr><td><hr />Exception occured.\n" + error.getMessage() + "</td></tr>");
+			}
+		}
+
+	}
+
+	private void displayMonitorPanel() throws Exception {
+
+	}
+
+	private void displayServiceMonitorPanel() {
+
+		echo("<h2>Monitor service</h2>");
+
+		echo("<form action=\"dynamicstats\" method=\"get\">" +
+				"<input type=\"hidden\" name=\"level\" value=\"service\" />" +
+				"<select name=\"service\">");
+		String[] services = axisGlobalsStub.getServices();
+		for(int i=0; i<services.length; i++) {
+			echo("<option align=\"left\" value=\""+services[i]+"\">"+services[i]+"</option>");
+		}
+		echo("</select>" +
+		"<input type=\"submit\" value=\"Monitor\" /></form>");
+	}
+
+	private void displayOperationMonitorPanel(String serviceName) {
+
+		echo("<h2>Monitor operation</h2>");
+
+		echo("<form action=\"dynamicstats\" method=\"get\" name=\"operationMonitorForm\">" +
+				"<input type=\"hidden\" name=\"level\" value=\"operation\" />" +
+				"<input type=\"hidden\" name=\"serviceChanged\"/>" +
+				"<select name=\"service\" onChange=\"document.operationMonitorForm.serviceChanged.value=true;document.operationMonitorForm.submit()\">");
+		String[] services = axisGlobalsStub.getServices();
+		for(int i=0; i<services.length; i++) {
+			String selected = "";
+			if(services[i].equals(serviceName)) {
+				selected = "selected=\"true\"";
+			}
+			echo("<option "+selected+"align=\"left\" value=\""+services[i]+"\">"+services[i]+"</option>");
+		}
+		echo("</select>" +
+				"<select name=\"operation\">");
+
+		if(serviceName == null) {
+			String[] deployedServices = axisGlobalsStub.getServices();
+			if(deployedServices.length == 0)
+				echo("<option>-No services are deployed-</option>");
+			else
+				serviceName = deployedServices[0];
+		}
+
+		String[] operations = axisServicesStub.getOperations(serviceName);
+		for(int i=0; i<operations.length; i++) {
+			echo("<option align=\"left\" value=\""+operations[i]+"\">"+operations[i]+"</option>");
+		}
+
+		echo("</select>" +
+				"<input type=\"submit\" value=\"Monitor\" /></form>");
+	}
+
+	private void displayDynamicStats() throws Exception {
+		// display dynamic statistics
+		echo("<h3>Axis2 Dynamic Statistics</h3>");
+		echo("<table width=\"100%\">" +
+				"<tr><td></td><td></td><td align=\"center\">In messages</td><td align=\"center\">Out messages</td><td align=\"center\">Fault in messages</td><td align=\"center\">Fault out messages</td></tr>");
+		String[] data = axisDynamicStatsStub.getMonitoredData();
+		for(int i=0; i<data.length; i++) {
+			StringTokenizer tokens = new StringTokenizer(data[i], ":");
+			String ID = tokens.nextToken();
+			if(ID.equals("All")) {
+				echo("<tr bgcolor=\"#99CCFF\"><td>"+ID+"</td><td>"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td></tr>");
+			} else if(ID.equals("Service")) {
+				echo("<tr bgcolor=\"#CCCCFF\"><td>"+ID+"</td><td>"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td></tr>");
+			} else if(ID.equals("Operation")) {
+				echo("<tr bgcolor=\"#CCFFFF\"><td>"+ID+"</td><td>"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\">"+tokens.nextToken()+"</td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td><td align=\"right\"><font color=\"#FF0000\">"+tokens.nextToken()+"</font></td></tr>");
+			}
+		}
+		echo("</table>");
+	}
+
+	private void monitorService(HttpServletRequest request) {
+
+		System.out.println("INFO: monitor service invoked.");
+		if(request.getParameter("level").equals("service")) {
+			String service = request.getParameter("service");
+
+			System.out.println("INFO: Service monitor setting..");
+			if(service != null) {
+				axisServiceStatsStub.setServiceToMonitor(service);
+			}
+		}
+	}
+
+	private void monitorOperation(HttpServletRequest request) {
+
+		if(request.getParameter("level").equals("operation")) {
+			String service = request.getParameter("service");
+			String operation = request.getParameter("operation");
+
+			if(service != null && operation != null && !request.getParameter("serviceChanged").equals("true")) {
+				axisOperationStatsStub.setOperationToMonitor(service, operation);
+			}
+		}
+	}
+
+	private void echo(String info){
+		writer.println("<p>" + info + "</p>");
+	}
+}
+
Index: management/src/org/apache/axis2/management/console/web/Axis2OperationsConsole.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2OperationsConsole.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2OperationsConsole.java	(working copy)
@@ -1,18 +1,18 @@
 package org.apache.axis2.management.console.web;
 
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
-import org.apache.axis2.management.console.web.stubs.AxisOperationsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServicesStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServicesStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisOperationsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.StringTokenizer;
 
 public class Axis2OperationsConsole extends HttpServlet{
 
@@ -66,7 +66,7 @@
 
 			processOperations(request);
 			processModules(request);
-			
+
 			echo("<tr><td bgcolor=\"#000080\" colspan=\"2\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
 					"<a href=\"modules\">Modules</a> | " +
 					"<a href=\"transports\">Transports</a> | " +
@@ -93,9 +93,9 @@
 
 	}
 
-	  
+
 	private void processOperations(HttpServletRequest request) throws Exception {
-		
+
 		String operationToUpdate = request.getParameter("update");
 		if(operationToUpdate != null) {
 			String service = request.getParameter("service");
@@ -104,15 +104,15 @@
 				StringTokenizer tokens = new StringTokenizer(parameters[i], ":");
 				String name = tokens.nextToken();
 				String value = request.getParameter(name);
-				
+
 				axisOperationsStub.editOperationParameter(service, operationToUpdate, name, value);
 			}
 		}
 	}
-	
-	  
+
+
 	private void displayOperations(String service) throws Exception {
-		
+
 		String[] services = axisGlobalsStub.getServices();
 		echo("<form action=\"operations\" method=\"get\">" +
 				"<select name=\"service\">");
@@ -125,12 +125,12 @@
 		}
 		echo("</select><br />" +
 				"<input type=\"submit\" value=\"Select service\" /></form>");
-		
+
 		if(service == null) {
 			echo("No services are selected.");
 			return;
 		}
-		
+
 		String[] ops = axisServicesStub.getOperations(service);
 		if(ops != null) {
 			echo("<b>Operations</b>");
@@ -141,17 +141,17 @@
 			echo("No operations are available.");
 		}
 	}
-	
-	
+
+
 	private void displayOperationInformation(String serviceName, String opName) {
-		
+
 		if(serviceName == null || opName == null) {
 			echo("Select a service and an operation to display operation configuration.");
 			return;
 		}
-	
+
 		echo("<h2>Operation: " + opName + "</h2>");
-		
+
 		echo("<h3>Operation parameters</h3>");
 		String[] params = axisOperationsStub.getOperationParameters(serviceName, opName);
 		if(params.length == 0) {
@@ -170,7 +170,7 @@
 					"<input type=\"submit\" value=\"Update\" /></td></tr>");
 			echo("</table></form><br />");
 		}
-		
+
 		echo("<hr /><h3>Engaged modules for this operation</h3>");
 		String[] operationModules = axisOperationsStub.getOperationEngagedModules(serviceName, opName);
 		if(operationModules.length == 0) {
@@ -182,11 +182,11 @@
 			}
 			echo("</ul>");
 		}
-		
+
 		echo("<hr /><h3>Engage module to operation</h3>");
 		echo("<form action=\"operations\" method=\"get\">" +
 				"<select name=\"module\">");
-		
+
 		String[] modules = axisGlobalsStub.getModules();
 		for(int i=0; i<modules.length; i++) {
 			echo("<option align=\"left\" value=\""+modules[i]+"\">"+modules[i]+"</option>");
@@ -195,10 +195,10 @@
 				"<input type=\"hidden\" name=\"service\" value=\""+serviceName+"\" />" +
 				"<input type=\"hidden\" name=\"operation\" value=\""+opName+"\" />" +
 				"<input type=\"hidden\" name=\"modules\" value=\"modules\" />" +
-				"<input type=\"submit\" value=\"Engage\" /></form>");	
+				"<input type=\"submit\" value=\"Engage\" /></form>");
 	}
-	
-	
+
+
 	private void processModules(HttpServletRequest request) throws Exception {
 		String modules = request.getParameter("modules");
 		if(modules != null) {
@@ -208,8 +208,8 @@
 			axisOperationsStub.engageModuleToOperation(module, service, operation);
 		}
 	}
-	  
 
+
 	private void echo(String info){
 		writer.println("<p>" + info + "</p>");
 	}
Index: management/src/org/apache/axis2/management/console/web/Axis2ServicesConsole.java
===================================================================
--- management/src/org/apache/axis2/management/console/web/Axis2ServicesConsole.java	(revision 405641)
+++ management/src/org/apache/axis2/management/console/web/Axis2ServicesConsole.java	(working copy)
@@ -1,18 +1,18 @@
 package org.apache.axis2.management.console.web;
 
-import org.apache.axis2.management.console.web.stubs.AxisGlobalsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServiceGroupsStub;
-import org.apache.axis2.management.console.web.stubs.AxisServicesStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServicesStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisServiceGroupsStub;
+import org.apache.axis2.management.interfaces.ws.stubs.AxisGlobalsStub;
 
+import java.io.PrintWriter;
+import java.io.IOException;
+import java.util.StringTokenizer;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.StringTokenizer;
 
 public class Axis2ServicesConsole extends HttpServlet{
 
@@ -66,7 +66,7 @@
 
 			processServices(request);
 			processModules(request);
-			
+
 			echo("<tr><td bgcolor=\"#000080\" colspan=\"2\"><font color=\"#FFFFFF\"><a href=\"axis2console\">Axis2 Globals</a> | " +
 					"<a href=\"modules\">Modules</a> | " +
 					"<a href=\"transports\">Transports</a> | " +
@@ -93,14 +93,14 @@
 
 	}
 
-	  
+
 	private void processServices(HttpServletRequest request) throws Exception {
-		
+
 		String serviceToRemove = request.getParameter("remove");
 		if(serviceToRemove != null){
 			String result = axisGlobalsStub.removeService(serviceToRemove);
 		}
-		
+
 		String serviceToUpdate = request.getParameter("update");
 		if(serviceToUpdate != null) {
 			String[] parameters =axisServicesStub.getServiceParameters(serviceToUpdate);
@@ -108,15 +108,15 @@
 				StringTokenizer tokens = new StringTokenizer(parameters[i], ":");
 				String name = tokens.nextToken();
 				String value = request.getParameter(name);
-				
+
 				axisServicesStub.editServiceParameter(serviceToUpdate, name, value);
 			}
 		}
 	}
-	
-	  
+
+
 	private void displayServices(String serviceGroupName) throws Exception {
-		
+
 		String[] services = null;
 		if(serviceGroupName == null) {
 			serviceGroupName = "all";
@@ -126,7 +126,7 @@
 		} else {
 			services = axisServiceGroupsStub.getServices(serviceGroupName);
 		}
-		
+
 		if(services != null) {
 			echo("<b>Services</b>");
 			for(int i=0; i<services.length; i++) {
@@ -136,18 +136,18 @@
 			echo("No services available.");
 		}
 	}
-	
-	
+
+
 	private void displayServiceInformation(String serviceName) {
-		
+
 		if(serviceName == null) {
 			echo("Select a service to display service configuration.");
 			return;
 		}
-		
+
 		echo("<h2>Service: " + serviceName + "</h2>");
 		echo("<h3>Service parameters</h3>");
-		
+
 		String[] params = axisServicesStub.getServiceParameters(serviceName);
 		if(params.length == 0) {
 			echo("No parameters are available for this service.");
@@ -164,7 +164,7 @@
 					"<input type=\"submit\" value=\"Update\" /></td></tr>");
 			echo("</table></form><br />");
 		}
-		
+
 		echo("<hr /><h3>Engaged modules for this service</h3>");
 		String[] serviceModules = axisServicesStub.getServiceEngagedModules(serviceName);
 		if(serviceModules.length == 0) {
@@ -176,11 +176,11 @@
 			}
 			echo("</ul>");
 		}
-		
+
 		echo("<hr /><h3>Engage module to service</h3>");
 		echo("<form action=\"services\" method=\"get\">" +
 				"<select name=\"module\">");
-		
+
 		String[] modules = axisGlobalsStub.getModules();
 		for(int i=0; i<modules.length; i++) {
 			echo("<option align=\"left\" value=\""+modules[i]+"\">"+modules[i]+"</option>");
@@ -188,20 +188,20 @@
 		echo("</select>" +
 				"<input type=\"hidden\" name=\"service\" value=\""+serviceName+"\" />" +
 				"<input type=\"hidden\" name=\"modules\" value=\"modules\" />" +
-				"<input type=\"submit\" value=\"Engage\" /></form>");	
-		
+				"<input type=\"submit\" value=\"Engage\" /></form>");
+
 		echo("<hr /><p>Click the button below to remove this service from Axis2. Note that you can't undo this operation.");
 		echo("<form action=\"services\" method=\"get\">" +
 				"<input type=\"hidden\" name=\"remove\" value=\""+serviceName+"\" />" +
 				"<input type=\"submit\" value=\"Remove service\" /></form></p><br />");
-		
+
 		echo("<p>Click the button below to display operations of this service.");
 		echo("<form action=\"operations\" method=\"get\">" +
 				"<input type=\"hidden\" name=\"service\" value=\""+serviceName+"\" />" +
 				"<input type=\"submit\" value=\"Operations\" /></form></p><br />");
 	}
-	
-	
+
+
 	private void processModules(HttpServletRequest request) throws Exception {
 		String modules = request.getParameter("modules");
 		if(modules != null) {
@@ -210,8 +210,8 @@
 			axisServicesStub.engageModuleToService(module, service);
 		}
 	}
-	  
 
+
 	private void echo(String info){
 		writer.println("<p>" + info + "</p>");
 	}
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisConfigurations.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisConfigurations.java	(revision 0)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisConfigurations.java	(revision 0)
@@ -0,0 +1,63 @@
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+import org.apache.axis2.management.core.utils.ManagementFactory;
+import org.apache.axis2.management.core.utils.ConfigurationEncoder;
+import org.apache.axis2.management.core.utils.OMBasedConfigurator;
+
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.io.*;
+import java.security.AccessController;
+import java.util.StringTokenizer;
+import java.util.Iterator;
+import java.util.ArrayList;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLOutputFactory;
+
+public class AxisConfigurations extends AbstractDMService {
+	
+	private ManagementFactory managementFactory = null;
+	
+	private OMFactory fac = null;
+	private OMNamespace omNs = null;
+	
+	public void init(ServiceContext context) {
+		managementFactory = new ManagementFactory(context.getConfigurationContext());
+	}
+	
+	public OMElement getInfo() throws XMLStreamException {
+		return packValue("This is the AxisConfigurations service.");
+	}
+	
+	
+	public OMElement getConfiguration() {
+		
+		ConfigurationEncoder encoder = new ConfigurationEncoder(managementFactory);
+		return encoder.encodeConfiguration();
+	}
+	
+	
+	public OMElement setConfiguration(OMElement msgElement) throws Exception {
+		
+		OMBasedConfigurator configurator = new OMBasedConfigurator(managementFactory);
+		OMElement configElement = msgElement.getFirstElement();
+		configurator.setConfigurationFromOMElement(configElement);
+		return packValue("Configuration applied successfully.");
+	}
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisModuleArchives.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisModuleArchives.java	(revision 0)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisModuleArchives.java	(revision 0)
@@ -0,0 +1,119 @@
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.i18n.Messages;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMText;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.soap.*;
+
+import java.io.*;
+
+import javax.activation.DataHandler;
+import javax.activation.FileDataSource;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLStreamException;
+
+public class AxisModuleArchives extends AbstractDMService {
+
+
+	public OMElement getInfo() throws XMLStreamException {
+
+		System.out.println("Inside getInfo() method.");
+
+		return packValue("This is the AxisArchives archive management web service.");
+	}
+
+
+	public OMElement getModuleArchiveNames() throws AxisFault {
+
+		/*
+		if(true) {
+			AxisFault fault = new AxisFault("Testing exceptions...", "Testing fault code...");
+			fault.addReason("Testing reason...");
+			System.out.println(fault.getReason());
+			throw new AxisFault(Messages.getMessage(
+			                                "mustunderstandfaild",
+                                SOAPConstants.SOAPFAULT_NAMESPACE_PREFIX, SOAP12Constants.FAULT_CODE_MUST_UNDERSTAND));
+		}
+		*/
+
+		ModuleArchiveManager archiveManager = getModuleArchiveManager();
+		String[] moduleArchives = archiveManager.getModuleArchiveNames();
+
+		return packValues(moduleArchives);
+	}
+
+
+	public OMElement getArchiveData(OMElement moduleArchiveName) throws AxisFault {
+
+		String[] params = getParameters(moduleArchiveName);
+
+		ModuleArchiveManager archiveManager = getModuleArchiveManager();
+		long modTime = archiveManager.getLastModified(params[0]);
+		long length = archiveManager.getSize(params[0]);
+
+		return packValues(new String[]{new Long(modTime).toString(), new Long(length).toString()});
+	}
+
+
+	public OMElement setArchiveData(OMElement data) throws AxisFault {
+
+		String[] params = getParameters(data);
+
+		ModuleArchiveManager archiveManager = getModuleArchiveManager();
+		archiveManager.setLastModified(params[0], Long.parseLong(params[1]));
+
+		return packValue("Archive modified time set successfully.");
+	}
+
+
+	public OMElement getModuleArchive(OMElement moduleArchiveName)  throws Exception {
+
+		String[] params = getParameters(moduleArchiveName);
+
+		ModuleArchiveManager archiveManager = getModuleArchiveManager();
+		File moduleArchive = archiveManager.getModuleArchive(params[0]);
+
+		return createMTOMEnvelope(moduleArchive);
+	}
+
+
+	public OMElement setModuleArchive(OMElement moduleArchive)  throws Exception {
+
+		OMElement nameElement = moduleArchive.getFirstChildWithName(new QName("Name"));
+		String name = nameElement.getText();
+
+		OMElement marElement = moduleArchive.getFirstChildWithName(new QName("Data"));
+		OMText binaryNode = (OMText)marElement.getFirstOMChild();
+		binaryNode.setOptimize(!binaryNode.isOptimized());
+
+        DataHandler dataHandler = (DataHandler)binaryNode.getDataHandler();
+        InputStream input = dataHandler.getDataSource().getInputStream();
+
+        ModuleArchiveManager archiveManager = getModuleArchiveManager();
+		archiveManager.setModuleArchive(name, new BufferedInputStream(input));
+
+		return packValue("Service archive set successfully.");
+	}
+
+
+	private OMElement createMTOMEnvelope(File dataFile) throws AxisFault {
+
+        DataHandler expectedDH;
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisarchives", "axisarchives");
+        OMElement data = fac.createOMElement("Data", omNs);
+
+        FileDataSource dataSource = new FileDataSource(dataFile);
+        expectedDH = new DataHandler(dataSource);
+        OMText textData = fac.createOMText(expectedDH, true);
+        data.addChild(textData);
+        return data;
+    }
+}
Index: management/src/org/apache/axis2/management/interfaces/ws/AbstractManagementInterface.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AbstractManagementInterface.java	(revision 0)
+++ management/src/org/apache/axis2/management/interfaces/ws/AbstractManagementInterface.java	(revision 0)
@@ -0,0 +1,71 @@
+
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+public class AbstractManagementInterface {
+	
+	private ConfigurationContext configContext = null;
+
+	
+	public void init(ConfigurationContext configContext) {
+		this.configContext = configContext;
+	}
+	
+	
+	public GlobalManager getGlobalManager() {
+		return (GlobalManager)configContext.getProperty("global_manager");
+	}
+	
+	
+	public ModuleManager getModuleManager() {
+		return (ModuleManager)configContext.getProperty("module_manager");
+	}
+	
+	
+	public TransportManager getTransportManager() {
+		return (TransportManager)configContext.getProperty("transport_manager");
+	}
+	
+	
+	public ServiceGroupManager getServiceGroupManager() {
+		return (ServiceGroupManager)configContext.getProperty("servicegroup_manager");
+	}
+	
+	
+	public ServiceManager getServiceManager() {
+		return (ServiceManager)configContext.getProperty("service_manager");
+	}
+	
+	
+	public ServiceArchiveManager getServiceArchiveManager() {
+		return (ServiceArchiveManager)configContext.getProperty("service_archive_manager");
+	}
+	
+	
+	public ModuleArchiveManager getModuleArchiveManager() {
+		return (ModuleArchiveManager)configContext.getProperty("module_archive_manager");
+	}
+	
+	
+	public OperationManager getOperationManager() {
+		return (OperationManager)configContext.getProperty("operation_manager");
+	}
+	
+	
+	public DynamicStatsManager getDynamicStatsManager() {
+		return (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+	}
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisOperationStats.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisOperationStats.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisOperationStats.java	(working copy)
@@ -1,74 +1,76 @@
-package org.apache.axis2.management.interfaces.ws;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.context.MessageContext;
-import org.apache.axis2.management.core.managers.DynamicStatsManager;
-
-import javax.xml.stream.XMLStreamException;
-
-public class AxisOperationStats extends AbstractDMService {
-
-	private MessageContext msgContext = null;
-	private ConfigurationContext configContext = null;
-
-	public void init(MessageContext context) {
-		msgContext = context;
-		configContext = context.getConfigurationContext();
-	}
-
-
-	public OMElement getInfo() throws XMLStreamException {
-
-		System.out.println("INFO: " + msgContext.getAxisService().getName());
-
-		return packValue("This is the AxisOperationStats service.");
-	}
-	
-
-	public OMElement setOperationToMonitor(OMElement element) throws XMLStreamException {
-		
-		String[] params = getParameters(element);
-		
-		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-		
-		if(!dynamicStatsManager.isServiceMonitoring(params[0])) {
-			dynamicStatsManager.setServiceToMonitor(params[0]);
-		}
-		
-		try {
-			dynamicStatsManager.getMonitoredService(params[0]).setOperationToMonitor(params[1]);
-		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
-		
-		return packValue("Successfully completed the operation.");
-	}
-	
-	
-	public OMElement getInMessages(OMElement element) throws XMLStreamException {
-		
-		String[] params = getParameters(element);
-		
-		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-		
-		int totalRequests = 0;
-		try {
-			totalRequests = dynamicStatsManager.getMonitoredService(params[0]).getMonitoredOperation(params[1]).getInMessages();
-		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
-
-		return packValue(new Integer(totalRequests).toString());
-	}
-	
-	
-	public void clearInMessages(OMElement element) throws XMLStreamException {
-		
-		String[] params = getParameters(element);
-		int totalRequests = 0;
-		
-		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-		
-		try {
-			dynamicStatsManager.getMonitoredService(params[0]).getMonitoredOperation(params[1]).clearInMessages();
-		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
-	}
-}
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import javax.xml.stream.XMLStreamException;
+
+public class AxisOperationStats extends AbstractDMService {
+
+	private ServiceContext serviceContext = null;
+	private ConfigurationContext configContext = null;
+
+	public void init(ServiceContext context) {
+		serviceContext = context;
+		configContext = context.getConfigurationContext();
+	}
+
+
+	public OMElement getInfo() throws XMLStreamException {
+		return packValue("This is the AxisOperationStats service.");
+	}
+	
+
+	public OMElement setOperationToMonitor(OMElement element) throws XMLStreamException {
+		
+		String[] params = getParameters(element);
+		
+		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+		
+		if(!dynamicStatsManager.isServiceMonitoring(params[0])) {
+			dynamicStatsManager.setServiceToMonitor(params[0]);
+		}
+		
+		try {
+			dynamicStatsManager.getMonitoredService(params[0]).setOperationToMonitor(params[1]);
+		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
+		
+		return packValue("Successfully completed the operation.");
+	}
+	
+	
+	public OMElement getInMessages(OMElement element) throws XMLStreamException {
+		
+		String[] params = getParameters(element);
+		
+		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+		
+		int totalRequests = 0;
+		try {
+			totalRequests = dynamicStatsManager.getMonitoredService(params[0]).getMonitoredOperation(params[1]).getInMessages();
+		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
+
+		return packValue(new Integer(totalRequests).toString());
+	}
+	
+	
+	public void clearInMessages(OMElement element) throws XMLStreamException {
+		
+		String[] params = getParameters(element);
+		int totalRequests = 0;
+		
+		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+		
+		try {
+			dynamicStatsManager.getMonitoredService(params[0]).getMonitoredOperation(params[1]).clearInMessages();
+		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
+	}
+}
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisServiceStats.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisServiceStats.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisServiceStats.java	(working copy)
@@ -1,67 +1,69 @@
-package org.apache.axis2.management.interfaces.ws;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.context.MessageContext;
-import org.apache.axis2.management.core.managers.DynamicStatsManager;
-
-import javax.xml.stream.XMLStreamException;
-
-public class AxisServiceStats extends AbstractDMService {
-
-	private MessageContext msgContext = null;
-	private ConfigurationContext configContext = null;
-
-	public void init(MessageContext context) {
-		msgContext = context;
-		configContext = context.getConfigurationContext();
-	}
-
-
-	public OMElement getInfo() throws XMLStreamException {
-
-		System.out.println("INFO: " + msgContext.getAxisService().getName());
-
-		return packValue("This is the AxisServiceStats service.");
-	}
-	
-	
-	public OMElement setServiceToMonitor(OMElement element) throws XMLStreamException {
-		
-		System.out.println("INFO: AxisServiceStats.setServiceToMonitor invoked.");
-		String[] params = getParameters(element);
-		
-		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-		dynamicStatsManager.setServiceToMonitor(params[0]);
-		
-		return packValue("Successfully completed the operation.");
-	}
-		
-	
-	public OMElement getInMessages(OMElement element) throws XMLStreamException {
-		
-		String[] params = getParameters(element);
-		
-		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-		
-		int totalRequests = 0;
-		try {
-			totalRequests = dynamicStatsManager.getMonitoredService(params[0]).getInMessages();
-		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
-
-		return packValue(new Integer(totalRequests).toString());
-	}
-	
-	
-	public void clearInMessages(OMElement element) throws XMLStreamException {
-		
-		String[] params = getParameters(element);
-		
-		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-		
-		try {
-			dynamicStatsManager.getMonitoredService(params[0]).clearInMessages();
-		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
-	}
-}
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import javax.xml.stream.XMLStreamException;
+
+public class AxisServiceStats extends AbstractDMService {
+
+	private ServiceContext serviceContext = null;
+	private ConfigurationContext configContext = null;
+
+	public void init(ServiceContext context) {
+		serviceContext = context;
+		configContext = context.getConfigurationContext();
+	}
+
+
+	public OMElement getInfo() throws XMLStreamException {
+		return packValue("This is the AxisServiceStats service.");
+	}
+	
+	
+	public OMElement setServiceToMonitor(OMElement element) throws XMLStreamException {
+		
+		System.out.println("INFO: AxisServiceStats.setServiceToMonitor invoked.");
+		String[] params = getParameters(element);
+		
+		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+		dynamicStatsManager.setServiceToMonitor(params[0]);
+		
+		return packValue("Successfully completed the operation.");
+	}
+		
+	
+	public OMElement getInMessages(OMElement element) throws XMLStreamException {
+		
+		String[] params = getParameters(element);
+		
+		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+		
+		int totalRequests = 0;
+		try {
+			totalRequests = dynamicStatsManager.getMonitoredService(params[0]).getInMessages();
+		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
+
+		return packValue(new Integer(totalRequests).toString());
+	}
+	
+	
+	public void clearInMessages(OMElement element) throws XMLStreamException {
+		
+		String[] params = getParameters(element);
+		
+		DynamicStatsManager dynamicStatsManager = (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+		
+		try {
+			dynamicStatsManager.getMonitoredService(params[0]).clearInMessages();
+		} catch(AxisFault af) {System.out.println("===== EXCEPTION: " + af.getMessage() + "=====");}
+	}
+}
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisTransports.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisTransports.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisTransports.java	(working copy)
@@ -1,8 +1,12 @@
 package org.apache.axis2.management.interfaces.ws;
 
-import org.apache.axiom.om.OMElement;
 import org.apache.axis2.management.core.managers.TransportManager;
 
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
 import javax.xml.stream.XMLStreamException;
 
 public class AxisTransports extends AbstractDMService {
Index: management/src/org/apache/axis2/management/interfaces/ws/AbstractDMService.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AbstractDMService.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AbstractDMService.java	(working copy)
@@ -1,76 +1,89 @@
-package org.apache.axis2.management.interfaces.ws;
-
-//import org.apache.axis2.management.interfaces.AbstractManagemetInterface;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.om.OMNamespace;
-import org.apache.axis2.context.MessageContext;
-import org.apache.axis2.management.interfaces.jmx.AbstractManagementInterface;
-
-import javax.xml.stream.XMLStreamException;
-import java.util.ArrayList;
-import java.util.Iterator;
-
-public class AbstractDMService extends AbstractManagementInterface {
-	
-	
-	public void init(MessageContext context) {
-		super.init(context.getConfigurationContext());
-	}
-	
-
-	public String[] getParameters(OMElement element) {
-
-		element.build();
-		element.detach();
-
-		ArrayList parameterList = new ArrayList();
-		Iterator iterator = element.getChildren();
-		
-		while(iterator.hasNext()) {
-			OMElement value = (OMElement)iterator.next();
-			parameterList.add(value.getText());
-		}
-
-		String[] parameters = (String[])parameterList.toArray(new String[parameterList.size()]);
-		return parameters;
-	}
-
-
-	public OMElement packValues(String[] values) {
-
-		OMElement element = null;
-		if(values != null) {
-			OMFactory fac = OMAbstractFactory.getOMFactory();
-			OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisservices", "axisservices");
-			element = fac.createOMElement("AxisServices", omNs);
-	
-			for(int i=0; i< values.length; i++) {
-				OMElement value = fac.createOMElement("value", omNs);
-				value.addChild(fac.createOMText(value, values[i]));
-	
-				element.addChild(value);
-			}
-		} else {
-			element = packValues(new String[]{});
-		}
-
-		return element;
-	}
-
-
-	public OMElement packValue(String value) {
-
-		OMFactory fac = OMAbstractFactory.getOMFactory();
-		OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisservices", "axisservices");
-		OMElement element = fac.createOMElement("AxisServices", omNs);
-
-		OMElement valueElement = fac.createOMElement("value", omNs);
-		valueElement.addChild(fac.createOMText(valueElement, value));
-		element.addChild(valueElement);
-
-		return element;
-	}
-
+package org.apache.axis2.management.interfaces.ws;
+
+//import org.apache.axis2.management.interfaces.AbstractManagemetInterface;
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import javax.xml.stream.XMLStreamException;
+
+public class AbstractDMService extends AbstractManagementInterface {
+	
+	
+	public void init(ServiceContext context) {
+		super.init(context.getConfigurationContext());
+		
+		System.out.println("INIT CALLED.");
+	}
+	
+
+	public String[] getParameters(OMElement element) {
+
+		element.build();
+		element.detach();
+
+		ArrayList parameterList = new ArrayList();
+		Iterator iterator = element.getChildren();
+		
+		while(iterator.hasNext()) {
+			OMElement value = (OMElement)iterator.next();
+			parameterList.add(value.getText());
+		}
+
+		String[] parameters = (String[])parameterList.toArray(new String[parameterList.size()]);
+		return parameters;
+	}
+
+
+	public OMElement packValues(String[] values) {
+
+		OMElement element = null;
+		if(values != null) {
+			OMFactory fac = OMAbstractFactory.getOMFactory();
+			OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisservices", "axisservices");
+			element = fac.createOMElement("AxisServices", omNs);
+	
+			for(int i=0; i< values.length; i++) {
+				OMElement value = fac.createOMElement("value", omNs);
+				value.addChild(fac.createOMText(value, values[i]));
+	
+				element.addChild(value);
+			}
+		} else {
+			element = packValues(new String[]{});
+		}
+
+		return element;
+	}
+
+
+	public OMElement packValue(String value) {
+
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+		OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisservices", "axisservices");
+		OMElement element = fac.createOMElement("AxisServices", omNs);
+
+		OMElement valueElement = fac.createOMElement("value", omNs);
+		valueElement.addChild(fac.createOMText(valueElement, value));
+		element.addChild(valueElement);
+
+		return element;
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisServiceGroups.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisServiceGroups.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisServiceGroups.java	(working copy)
@@ -1,8 +1,12 @@
 package org.apache.axis2.management.interfaces.ws;
 
-import org.apache.axiom.om.OMElement;
 import org.apache.axis2.management.core.managers.ServiceGroupManager;
 
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
 import javax.xml.stream.XMLStreamException;
 
 public class AxisServiceGroups extends AbstractDMService {
@@ -14,37 +18,70 @@
 
 		return packValue("This is the AxisServiceGroups service group management web service.");
 	}
-	
-	
+
+
+	public OMElement getServicesGroupParameters(OMElement element) throws XMLStreamException {
+
+			String[] params = getParameters(element);
+
+			ServiceGroupManager serviceGroupManager = getServiceGroupManager();
+			String[] parameters = serviceGroupManager.getServiceGroupParameters(params[0]);
+
+			return packValues(parameters);
+	}
+
+
+	public OMElement editServiceGroupParameter(OMElement element) throws XMLStreamException {
+
+			String[] params = getParameters(element);
+
+			ServiceGroupManager serviceGroupManager = getServiceGroupManager();
+			String info = serviceGroupManager.editServiceGroupParameter(params[0], params[1], params[2]);
+
+			return packValue(info);
+	}
+
+
 	public OMElement getServices(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceGroupManager serviceGroupManager = getServiceGroupManager();
 		String[] services = serviceGroupManager.getServices(params[0]);
 
 		return packValues(services);
 	}
-	
-	
+
+
 	public OMElement getServiceGroupEngagedModules(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceGroupManager serviceGroupManager = getServiceGroupManager();
 		String[] engagedModules = serviceGroupManager.getServiceGroupEngagedModules(params[0]);
 
 		return packValues(engagedModules);
 	}
-	
-	
+
+
 	public OMElement engageModuleToServiceGroup(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceGroupManager serviceGroupManager = getServiceGroupManager();
 		String info = serviceGroupManager.engageModuleToServiceGroup(params[0], params[1]);
 
 		return packValue(info);
 	}
+
+
+	public OMElement disengageModuleFromServiceGroup(OMElement element) throws XMLStreamException {
+
+			String[] params = getParameters(element);
+
+			ServiceGroupManager serviceGroupManager = getServiceGroupManager();
+			String info = serviceGroupManager.disengageModuleFromServiceGroup(params[0], params[1]);
+
+			return packValue(info);
+	}
 }
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisDynamicStats.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisDynamicStats.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisDynamicStats.java	(working copy)
@@ -1,32 +1,35 @@
 package org.apache.axis2.management.interfaces.ws;
 
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.management.core.managers.DynamicStatsManager;
+import org.apache.axis2.management.core.utils.ServiceStats;
 import org.apache.axis2.management.core.utils.OperationStats;
-import org.apache.axis2.management.core.utils.ServiceStats;
 
-import javax.xml.stream.XMLStreamException;
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.util.Iterator;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 
+import javax.xml.stream.XMLStreamException;
+
 public class AxisDynamicStats extends AbstractDMService {
 
-	private MessageContext msgContext = null;
+	private ServiceContext serviceContext = null;
 	private ConfigurationContext configContext = null;
 
-	public void init(MessageContext context) {
-		msgContext = context;
+	public void init(ServiceContext context) {
+		serviceContext = context;
 		configContext = context.getConfigurationContext();
 	}
 
 
 	public OMElement getInfo() throws XMLStreamException {
-
-		System.out.println("INFO: " + msgContext.getAxisService().getName());
-
 		return packValue("This is the AxisDynamicStats service.");
 	}
 	
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisGlobals.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisGlobals.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisGlobals.java	(working copy)
@@ -1,20 +1,53 @@
 package org.apache.axis2.management.interfaces.ws;
 
-import org.apache.axiom.om.OMElement;
 import org.apache.axis2.management.core.managers.GlobalManager;
 
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.util.ArrayList;
 import javax.xml.stream.XMLStreamException;
 
 public class AxisGlobals extends AbstractDMService {
 
 
 	public OMElement getInfo() throws XMLStreamException {
-		return packValue("This is the AxisGlobals global management web global.");
+		return packValue("This is the AxisGlobals global management web service.");
 	}
 
-	
+
+	public OMElement getFilePaths() throws XMLStreamException {
+
+			GlobalManager globalManager = getGlobalManager();
+			ArrayList filePathsList = globalManager.getFilePaths();
+			String[] filePaths = (String[])filePathsList.toArray(new String[filePathsList.size()]);
+
+			return packValues(filePaths);
+	}
+
+
+	public OMElement setFilePaths(OMElement element) throws XMLStreamException {
+
+		  String[] filePaths = getParameters(element);
+
+		  GlobalManager globalManager = getGlobalManager();
+
+		  ArrayList filePathsList = new ArrayList();
+		  for(int i=0; i<filePaths.length; i++) {
+			filePathsList.add(filePaths[i]);
+		  }
+
+		  globalManager.setFilePaths(filePathsList);
+
+		  return packValue("File paths updated.");
+	  }
+
+
+
 	public OMElement getGlobalParameters() throws XMLStreamException {
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		String[] globalParameters = globalManager.getGlobalParameters();
 
@@ -42,7 +75,7 @@
 	public OMElement addGlobalParameter(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		globalManager.addGlobalParameter(params[0], params[1]);
 
@@ -53,16 +86,16 @@
 	public OMElement editGlobalParameter(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		String result = globalManager.editGlobalParameter(params[0], params[1]);
 
 		return packValue(result);
 	}
-	
-	
+
+
 	// Services
-	
+
 	public OMElement getServices() throws XMLStreamException {
 
 		GlobalManager globalManager = getGlobalManager();
@@ -80,7 +113,7 @@
 		return packValues(faultyServices);
 	}
 
-	
+
 	public OMElement isServiceAvailable(OMElement pElement) {
 
 		String[] params = getParameters(pElement);
@@ -99,29 +132,29 @@
 
 
 	public OMElement removeService(OMElement pElement) throws XMLStreamException {
-		
+
 		String[] params = getParameters(pElement);
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		String result = globalManager.removeService(params[0]);
 
 		return packValue(result);
 	}
-	
-	
+
+
 	// ServiceGroups
-	
+
 	public OMElement getServiceGroups() throws XMLStreamException {
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		String[] serviceGroups = globalManager.getServiceGroups();
 
 		return packValues(serviceGroups);
 	}
-	
-	
+
+
 	// Modules
-	
+
 	public OMElement getModules() throws XMLStreamException {
 
 		GlobalManager globalManager = getGlobalManager();
@@ -139,7 +172,7 @@
 		return packValues(faultyModules);
 	}
 
-	
+
 	public OMElement isModuleAvailable(OMElement pElement) {
 
 		String[] params = getParameters(pElement);
@@ -155,30 +188,41 @@
 
 		return result;
 	}
-	
-	
+
+
 	public OMElement getGloballyEngagedModules() throws XMLStreamException {
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		String[] glaballyEngagedModules = globalManager.getGloballyEngagedModules();
 
 		return packValues(glaballyEngagedModules);
 	}
-	
-	
-	public OMElement engageModuleGlabally(OMElement element) throws XMLStreamException {
 
+
+	public OMElement engageModuleGlobally(OMElement element) throws XMLStreamException {
+
 		String[] params = getParameters(element);
-		
+
 		GlobalManager globalManager = getGlobalManager();
 		String result = globalManager.engageModuleGlobally(params[0]);
 
 		return packValue(result);
 	}
-	
-	
+
+
+	public OMElement disengageModuleGlobally(OMElement element) throws XMLStreamException {
+
+			String[] params = getParameters(element);
+
+			GlobalManager globalManager = getGlobalManager();
+			String result = globalManager.disengageModuleGlobally(params[0]);
+
+			return packValue(result);
+	}
+
+
 	// Transports
-	
+
 	public OMElement getTransportIns() throws XMLStreamException {
 
 		GlobalManager globalManager = getGlobalManager();
@@ -187,7 +231,7 @@
 		return packValues(transports);
 	}
 
-		
+
 	public OMElement isTransportInAvailable(OMElement pElement) {
 
 		String[] params = getParameters(pElement);
@@ -203,8 +247,8 @@
 
 		return result;
 	}
-	
-	
+
+
 	public OMElement getTransportOuts() throws XMLStreamException {
 
 		GlobalManager globalManager = getGlobalManager();
@@ -212,8 +256,8 @@
 
 		return packValues(transports);
 	}
-	
 
+
 	public OMElement isTransportOutAvailable(OMElement pElement) {
 
 		String[] params = getParameters(pElement);
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisOperations.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisOperations.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisOperations.java	(working copy)
@@ -1,22 +1,29 @@
 package org.apache.axis2.management.interfaces.ws;
 
-import org.apache.axiom.om.OMElement;
 import org.apache.axis2.management.core.managers.OperationManager;
 
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
 import javax.xml.stream.XMLStreamException;
 
 public class AxisOperations extends AbstractDMService {
 
 
 	public OMElement getInfo() throws XMLStreamException {
+
+		System.out.println("NEW VERSION.");
+
 		return packValue("This is the AxisOperations operation management web operation.");
 	}
 
-	
+
 	public OMElement getOperationParameters(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		OperationManager operationManager = getOperationManager();
 		String[] operationParameters = operationManager.getOperationParameters(params[0], params[1]);
 
@@ -44,7 +51,7 @@
 	public OMElement addOperationParameter(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		OperationManager operationManager = getOperationManager();
 		operationManager.addOperationParameter(params[0], params[1], params[2], params[3]);
 
@@ -55,34 +62,45 @@
 	public OMElement editOperationParameter(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		OperationManager operationManager = getOperationManager();
 		String result = operationManager.editOperationParameter(params[0], params[1], params[2], params[3]);
 
 		return packValue(result);
 	}
-	
-	
+
+
 	// Modules
-	
+
 	public OMElement getOperationEngagedModules(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		OperationManager operationManager = getOperationManager();
 		String[] operationEngagedModules = operationManager.getOperationEngagedModules(params[0], params[1]);
 
 		return packValues(operationEngagedModules);
 	}
-	
-	
+
+
 	public OMElement engageModuleToOperation(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		OperationManager operationManager = getOperationManager();
 		String result = operationManager.engageModuleToOperation(params[0], params[1], params[2]);
 
 		return packValue(result);
 	}
+
+
+	public OMElement disengageModuleFromOperation(OMElement element) throws XMLStreamException {
+
+			String[] params = getParameters(element);
+
+			OperationManager operationManager = getOperationManager();
+			String result = operationManager.disengageModuleFromOperation(params[0], params[1], params[2]);
+
+			return packValue(result);
+	}
 }
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisServices.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisServices.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisServices.java	(working copy)
@@ -1,8 +1,12 @@
 package org.apache.axis2.management.interfaces.ws;
 
-import org.apache.axiom.om.OMElement;
 import org.apache.axis2.management.core.managers.ServiceManager;
 
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
 import javax.xml.stream.XMLStreamException;
 
 public class AxisServices extends AbstractDMService {
@@ -14,12 +18,12 @@
 
 		return packValue("This is the AxisServices service management web service.");
 	}
-	
-	
+
+
 	public OMElement getServiceParameters(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceManager serviceManager = getServiceManager();
 		String[] serviceParameters = serviceManager.getServiceParameters(params[0]);
 
@@ -47,7 +51,7 @@
 	public OMElement addServiceParameter(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceManager serviceManager = getServiceManager();
 		serviceManager.addServiceParameter(params[0], params[1], params[2]);
 
@@ -58,42 +62,53 @@
 	public OMElement editServiceParameter(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceManager serviceManager = getServiceManager();
 		String result = serviceManager.editServiceParameter(params[0], params[1], params[2]);
 
 		return packValue(result);
 	}
-	
-	
+
+
 	// Modules
-	
+
 	public OMElement getServiceEngagedModules(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceManager serviceManager = getServiceManager();
 		String[] serviceEngagedModules = serviceManager.getServiceEngagedModules(params[0]);
 
 		return packValues(serviceEngagedModules);
 	}
-	
-	
+
+
 	public OMElement engageModuleToService(OMElement element) throws XMLStreamException {
 
 		String[] params = getParameters(element);
-		
+
 		ServiceManager serviceManager = getServiceManager();
 		String result = serviceManager.engageModuleToService(params[0], params[1]);
 
 		return packValue(result);
 	}
-	
-	
+
+
+	public OMElement disengageModuleFromService(OMElement element) throws XMLStreamException {
+
+			String[] params = getParameters(element);
+
+			ServiceManager serviceManager = getServiceManager();
+			String result = serviceManager.disengageModuleFromService(params[0], params[1]);
+
+			return packValue(result);
+	}
+
+
 	// Operations
-	
+
 	public OMElement getOperations(OMElement element) throws XMLStreamException {
-		
+
 		String[] params = getParameters(element);
 
 		ServiceManager serviceManager = getServiceManager();
@@ -102,7 +117,7 @@
 		return packValues(operations);
 	}
 
-	
+
 	public OMElement isOperationAvailable(OMElement pElement) {
 
 		String[] params = getParameters(pElement);
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisServiceArchives.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisServiceArchives.java	(revision 0)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisServiceArchives.java	(revision 0)
@@ -0,0 +1,108 @@
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMText;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.io.*;
+
+import javax.activation.DataHandler;
+import javax.activation.FileDataSource;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLStreamException;
+
+public class AxisServiceArchives extends AbstractDMService {
+
+
+	public OMElement getInfo() throws XMLStreamException {
+
+		System.out.println("Inside getInfo() method.");
+
+		return packValue("This is the AxisArchives archive management web service.");
+	}
+	
+	
+	public OMElement getServiceArchiveNames() {
+		
+		System.out.println("Inside getServiceArchiveNames() method...");
+		ServiceArchiveManager archiveManager = getServiceArchiveManager();
+		String[] serviceArchives = archiveManager.getServiceArchiveNames();
+		
+		System.out.println("About to return value...");
+		
+		return packValues(serviceArchives);
+	}
+	
+	
+	public OMElement getArchiveData(OMElement serviceArchiveName) {
+		
+		String[] params = getParameters(serviceArchiveName);
+		
+		ServiceArchiveManager archiveManager = getServiceArchiveManager();
+		long modTime = archiveManager.getLastModified(params[0]);
+		long length = archiveManager.getSize(params[0]);
+		
+		return packValues(new String[]{new Long(modTime).toString(), new Long(length).toString()});
+	}
+	
+	
+	public OMElement setArchiveData(OMElement data) throws Exception {
+		
+		String[] params = getParameters(data);
+		
+		ServiceArchiveManager archiveManager = getServiceArchiveManager();
+		archiveManager.setLastModified(params[0], Long.parseLong(params[1]));
+		
+		return packValue("Archive modified time set successfully.");
+	}
+	
+	
+	public OMElement getServiceArchive(OMElement serviceArchiveName) throws Exception {
+		
+		String[] params = getParameters(serviceArchiveName);
+		
+		ServiceArchiveManager archiveManager = getServiceArchiveManager();
+		File serviceArchive = archiveManager.getServiceArchive(params[0]);
+		
+		return createMTOMEnvelope(serviceArchive);
+	}
+	
+	
+	public OMElement setServiceArchive(OMElement serviceArchive) throws Exception {
+		
+		System.out.println("Inside AxisServiceArchives.setServiceArchive.");
+		OMElement nameElement = serviceArchive.getFirstChildWithName(new QName("Name"));
+		String name = nameElement.getText();
+		
+		OMElement aarElement = serviceArchive.getFirstChildWithName(new QName("Data"));
+		OMText binaryNode = (OMText)aarElement.getFirstOMChild();
+		binaryNode.setOptimize(!binaryNode.isOptimized());
+        
+        DataHandler dataHandler = (DataHandler)binaryNode.getDataHandler();
+        InputStream input = dataHandler.getDataSource().getInputStream();
+        
+        ServiceArchiveManager archiveManager = getServiceArchiveManager();
+		archiveManager.setServiceArchive(name, new BufferedInputStream(input));
+		
+		return packValue("Service archive set successfully.");
+	}
+	
+	
+	private OMElement createMTOMEnvelope(File dataFile) throws Exception {
+
+        DataHandler expectedDH;
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisarchives", "axisarchives");
+        OMElement data = fac.createOMElement("Data", omNs);
+
+        FileDataSource dataSource = new FileDataSource(dataFile);
+        expectedDH = new DataHandler(dataSource);
+        OMText textData = fac.createOMText(expectedDH, true);
+        data.addChild(textData);
+        return data;
+    }
+}
Index: management/src/org/apache/axis2/management/interfaces/ws/AxisModules.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/ws/AxisModules.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/ws/AxisModules.java	(working copy)
@@ -1,104 +1,108 @@
-package org.apache.axis2.management.interfaces.ws;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.management.core.managers.ModuleManager;
-
-import javax.xml.stream.XMLStreamException;
-
-public class AxisModules extends AbstractDMService {
-
-
-	public OMElement getInfo() throws XMLStreamException {
-		return packValue("This is the AxisModules module management web module.");
-	}
-
-	
-	public OMElement getModuleParameters(OMElement element) throws XMLStreamException {
-
-		String[] params = getParameters(element);
-		
-		ModuleManager moduleManager = getModuleManager();
-		String[] moduleParameters = moduleManager.getModuleParameters(params[0]);
-
-		return packValues(moduleParameters);
-	}
-
-
-	public OMElement isModuleParameter(OMElement element) {
-
-		String[] params = getParameters(element);
-
-		ModuleManager moduleManager = getModuleManager();
-		boolean available = moduleManager.isModuleParameter(params[0], params[1]);
-
-		OMElement result;
-		if(available)
-			result = packValue("TRUE");
-		else
-			result = packValue("FALSE");
-
-		return result;
-	}
-
-
-	public OMElement addModuleParameter(OMElement element) throws XMLStreamException {
-
-		String[] params = getParameters(element);
-		
-		ModuleManager moduleManager = getModuleManager();
-		moduleManager.addModuleParameter(params[0], params[1], params[2]);
-
-		return packValue("OUT NOT AVAILABLE");
-	}
-
-
-	public OMElement editModuleParameter(OMElement element) throws XMLStreamException {
-
-		String[] params = getParameters(element);
-		
-		ModuleManager moduleManager = getModuleManager();
-		String result = moduleManager.editModuleParameter(params[0], params[1], params[2]);
-
-		return packValue(result);
-	}
-	
-	
-	public OMElement isEngagedGlobally(OMElement element) throws XMLStreamException {
-
-		String[] params = getParameters(element);
-		
-		ModuleManager moduleManager = getModuleManager();
-		boolean engaged = moduleManager.isEngagedGlobally(params[0]);
-
-		OMElement result;
-		if(engaged)
-			result = packValue("TRUE");
-		else
-			result = packValue("FALSE");
-
-		return result;
-	}
-	
-	
-	public OMElement getEngagedServices(OMElement element) throws XMLStreamException {
-
-		String[] params = getParameters(element);
-		
-		ModuleManager moduleManager = getModuleManager();
-		String[] engagedServices = moduleManager.getEngagedServices(params[0]);
-
-		return packValues(engagedServices);
-	}
-	
-	
-	public OMElement getEngagedOperations(OMElement element) throws XMLStreamException {
-
-		String[] params = getParameters(element);
-		
-		ModuleManager moduleManager = getModuleManager();
-		String[] engagedOperations = moduleManager.getEngagedOperations(params[0]);
-
-		return packValues(engagedOperations);
-	}
-
-}
+package org.apache.axis2.management.interfaces.ws;
+
+import org.apache.axis2.management.core.managers.ModuleManager;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import javax.xml.stream.XMLStreamException;
+
+public class AxisModules extends AbstractDMService {
+
+
+	public OMElement getInfo() throws XMLStreamException {
+		return packValue("This is the AxisModules module management web module.");
+	}
+
+	
+	public OMElement getModuleParameters(OMElement element) throws XMLStreamException {
+
+		String[] params = getParameters(element);
+		
+		ModuleManager moduleManager = getModuleManager();
+		String[] moduleParameters = moduleManager.getModuleParameters(params[0]);
+
+		return packValues(moduleParameters);
+	}
+
+
+	public OMElement isModuleParameter(OMElement element) {
+
+		String[] params = getParameters(element);
+
+		ModuleManager moduleManager = getModuleManager();
+		boolean available = moduleManager.isModuleParameter(params[0], params[1]);
+
+		OMElement result;
+		if(available)
+			result = packValue("TRUE");
+		else
+			result = packValue("FALSE");
+
+		return result;
+	}
+
+
+	public OMElement addModuleParameter(OMElement element) throws XMLStreamException {
+
+		String[] params = getParameters(element);
+		
+		ModuleManager moduleManager = getModuleManager();
+		moduleManager.addModuleParameter(params[0], params[1], params[2]);
+
+		return packValue("OUT NOT AVAILABLE");
+	}
+
+
+	public OMElement editModuleParameter(OMElement element) throws XMLStreamException {
+
+		String[] params = getParameters(element);
+		
+		ModuleManager moduleManager = getModuleManager();
+		String result = moduleManager.editModuleParameter(params[0], params[1], params[2]);
+
+		return packValue(result);
+	}
+	
+	
+	public OMElement isEngagedGlobally(OMElement element) throws XMLStreamException {
+
+		String[] params = getParameters(element);
+		
+		ModuleManager moduleManager = getModuleManager();
+		boolean engaged = moduleManager.isEngagedGlobally(params[0]);
+
+		OMElement result;
+		if(engaged)
+			result = packValue("TRUE");
+		else
+			result = packValue("FALSE");
+
+		return result;
+	}
+	
+	
+	public OMElement getEngagedServices(OMElement element) throws XMLStreamException {
+
+		String[] params = getParameters(element);
+		
+		ModuleManager moduleManager = getModuleManager();
+		String[] engagedServices = moduleManager.getEngagedServices(params[0]);
+
+		return packValues(engagedServices);
+	}
+	
+	
+	public OMElement getEngagedOperations(OMElement element) throws XMLStreamException {
+
+		String[] params = getParameters(element);
+		
+		ModuleManager moduleManager = getModuleManager();
+		String[] engagedOperations = moduleManager.getEngagedOperations(params[0]);
+
+		return packValues(engagedOperations);
+	}
+
+}
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisModulesMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisModulesMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisModulesMBean.java	(working copy)
@@ -1,42 +1,42 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-
-public class AxisModulesMBean extends AbstractManagementInterface {
-
-	
-	public boolean isEngagedGlobally(String moduleName) {
-		return getModuleManager().isEngagedGlobally(moduleName);
-	}
-	
-	
-	public String[] getEngagedServices(String moduleName) {
-		return getModuleManager().getEngagedServices(moduleName);
-	}
-	
-	
-	public String[] getEngagedOperations(String moduleName) {
-		return getModuleManager().getEngagedOperations(moduleName);
-	}	
-
-
-	public String[] getModuleParameters(String moduleName) {
-		return getModuleManager().getModuleParameters(moduleName);
-	}
-
-
-	public boolean isModuleParameter(String moduleName, String paramName) {
-		return getModuleManager().isModuleParameter(moduleName, paramName);
-	}
-
-
-	public void addModuleParameter(String moduleName, String name, String value) {
-		getModuleManager().addModuleParameter(moduleName, name, value);
-	}
-
-
-	public String editModuleParameter(String moduleName, String parameterName, String value) {
-		return getModuleManager().editModuleParameter(moduleName, parameterName, value);
-	}
-
+
+package org.apache.axis2.management.interfaces.jmx;
+
+
+public class AxisModulesMBean extends AbstractManagementInterface {
+
+	
+	public boolean isEngagedGlobally(String moduleName) {
+		return getModuleManager().isEngagedGlobally(moduleName);
+	}
+	
+	
+	public String[] getEngagedServices(String moduleName) {
+		return getModuleManager().getEngagedServices(moduleName);
+	}
+	
+	
+	public String[] getEngagedOperations(String moduleName) {
+		return getModuleManager().getEngagedOperations(moduleName);
+	}	
+
+
+	public String[] getModuleParameters(String moduleName) {
+		return getModuleManager().getModuleParameters(moduleName);
+	}
+
+
+	public boolean isModuleParameter(String moduleName, String paramName) {
+		return getModuleManager().isModuleParameter(moduleName, paramName);
+	}
+
+
+	public void addModuleParameter(String moduleName, String name, String value) {
+		getModuleManager().addModuleParameter(moduleName, name, value);
+	}
+
+
+	public String editModuleParameter(String moduleName, String parameterName, String value) {
+		return getModuleManager().editModuleParameter(moduleName, parameterName, value);
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AbstractManagementInterface.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AbstractManagementInterface.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AbstractManagementInterface.java	(working copy)
@@ -1,57 +1,59 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.management.core.managers.DynamicStatsManager;
-import org.apache.axis2.management.core.managers.GlobalManager;
-import org.apache.axis2.management.core.managers.ModuleManager;
-import org.apache.axis2.management.core.managers.OperationManager;
-import org.apache.axis2.management.core.managers.ServiceGroupManager;
-import org.apache.axis2.management.core.managers.ServiceManager;
-import org.apache.axis2.management.core.managers.TransportManager;
-
-public class AbstractManagementInterface {
-	
-	private ConfigurationContext configContext = null;
-
-	
-	public void init(ConfigurationContext configContext) {
-		this.configContext = configContext;
-	}
-	
-	
-	public GlobalManager getGlobalManager() {
-		return (GlobalManager)configContext.getProperty("global_manager");
-	}
-	
-	
-	public ModuleManager getModuleManager() {
-		return (ModuleManager)configContext.getProperty("module_manager");
-	}
-	
-	
-	public TransportManager getTransportManager() {
-		return (TransportManager)configContext.getProperty("transport_manager");
-	}
-	
-	
-	public ServiceGroupManager getServiceGroupManager() {
-		return (ServiceGroupManager)configContext.getProperty("servicegroup_manager");
-	}
-	
-	
-	public ServiceManager getServiceManager() {
-		return (ServiceManager)configContext.getProperty("service_manager");
-	}
-	
-	
-	public OperationManager getOperationManager() {
-		return (OperationManager)configContext.getProperty("operation_manager");
-	}
-	
-	
-	public DynamicStatsManager getDynamicStatsManager() {
-		return (DynamicStatsManager)configContext.getProperty("dynamic_stats");
-	}
-	
+
+package org.apache.axis2.management.interfaces.jmx;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+public class AbstractManagementInterface {
+	
+	private ConfigurationContext configContext = null;
+
+	
+	public void init(ConfigurationContext configContext) {
+		this.configContext = configContext;
+	}
+	
+	
+	public GlobalManager getGlobalManager() {
+		return (GlobalManager)configContext.getProperty("global_manager");
+	}
+	
+	
+	public ModuleManager getModuleManager() {
+		return (ModuleManager)configContext.getProperty("module_manager");
+	}
+	
+	
+	public TransportManager getTransportManager() {
+		return (TransportManager)configContext.getProperty("transport_manager");
+	}
+	
+	
+	public ServiceGroupManager getServiceGroupManager() {
+		return (ServiceGroupManager)configContext.getProperty("servicegroup_manager");
+	}
+	
+	
+	public ServiceManager getServiceManager() {
+		return (ServiceManager)configContext.getProperty("service_manager");
+	}
+	
+	
+	public OperationManager getOperationManager() {
+		return (OperationManager)configContext.getProperty("operation_manager");
+	}
+	
+	
+	public DynamicStatsManager getDynamicStatsManager() {
+		return (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+	}
+	
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/DynamicStatsManagerMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/DynamicStatsManagerMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/DynamicStatsManagerMBean.java	(working copy)
@@ -1,62 +1,62 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-public class DynamicStatsManagerMBean extends AbstractManagementInterface {
-
-
-	public int getInMessages() {
-		return getDynamicStatsManager().getInMessages();
-	}
-	
-
-	public void clearInMessages() {
-		getDynamicStatsManager().clearInMessages();
-	}
-	
-	
-	public int getOutMessages() {
-		return getDynamicStatsManager().getOutMessages();
-	}
-	
-
-	public void clearOutMessages() {
-		getDynamicStatsManager().clearOutMessages();
-	}
-	
-	
-	public int getFaultInMessages() {
-		return getDynamicStatsManager().getFaultInMessages();
-	}
-	
-
-	public void clearFaultInMessages() {
-		getDynamicStatsManager().clearFaultInMessages();
-	}
-	
-	
-	public int getFaultOutMessages() {
-		return getDynamicStatsManager().getFaultOutMessages();
-	}
-	
-
-	public void clearFaultOutMessages() {
-		getDynamicStatsManager().clearFaultOutMessages();
-	}
-	
-	
-	/*
-	public HashMap getMonitoredServices() {
-		return serviceStatsMap;
-	}
-	*/
-
-
-	public void setServiceToMonitor(String serviceName) {
-		getDynamicStatsManager().setServiceToMonitor(serviceName);	
-	}
-	
-	
-	public boolean isServiceMonitoring(String serviceName) {
-		return getDynamicStatsManager().isServiceMonitoring(serviceName);
-	}
+
+package org.apache.axis2.management.interfaces.jmx;
+
+public class DynamicStatsManagerMBean extends AbstractManagementInterface {
+
+
+	public int getInMessages() {
+		return getDynamicStatsManager().getInMessages();
+	}
+	
+
+	public void clearInMessages() {
+		getDynamicStatsManager().clearInMessages();
+	}
+	
+	
+	public int getOutMessages() {
+		return getDynamicStatsManager().getOutMessages();
+	}
+	
+
+	public void clearOutMessages() {
+		getDynamicStatsManager().clearOutMessages();
+	}
+	
+	
+	public int getFaultInMessages() {
+		return getDynamicStatsManager().getFaultInMessages();
+	}
+	
+
+	public void clearFaultInMessages() {
+		getDynamicStatsManager().clearFaultInMessages();
+	}
+	
+	
+	public int getFaultOutMessages() {
+		return getDynamicStatsManager().getFaultOutMessages();
+	}
+	
+
+	public void clearFaultOutMessages() {
+		getDynamicStatsManager().clearFaultOutMessages();
+	}
+	
+	
+	/*
+	public HashMap getMonitoredServices() {
+		return serviceStatsMap;
+	}
+	*/
+
+
+	public void setServiceToMonitor(String serviceName) {
+		getDynamicStatsManager().setServiceToMonitor(serviceName);	
+	}
+	
+	
+	public boolean isServiceMonitoring(String serviceName) {
+		return getDynamicStatsManager().isServiceMonitoring(serviceName);
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisOperationStatsMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisOperationStatsMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisOperationStatsMBean.java	(working copy)
@@ -1,66 +1,67 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.management.core.utils.OperationStats;
-import org.apache.axis2.management.core.utils.ServiceStats;
-
-
-public class AxisOperationStatsMBean extends AbstractManagementInterface {
-	
-	
-	public int getInMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		return operationStats.getInMessages();
-	}
-	
-
-	public void clearInMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		operationStats.clearInMessages();
-	}
-	
-	
-	public int getOutMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		return operationStats.getOutMessages();
-	}
-	
-
-	public void clearOutMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		operationStats.clearOutMessages();
-	}
-	
-	
-	public int getFaultInMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		return operationStats.getFaultInMessages();
-	}
-	
-
-	public void clearFaultInMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		operationStats.clearFaultInMessages();
-	}
-	
-	
-	public int getFaultOutMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		return operationStats.getFaultOutMessages();
-	}
-	
-
-	public void clearFaultOutMessages(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
-		operationStats.clearFaultOutMessages();
-	}
+
+package org.apache.axis2.management.interfaces.jmx;
+
+import org.apache.axis2.management.core.utils.ServiceStats;
+import org.apache.axis2.management.core.utils.OperationStats;
+
+import org.apache.axis2.AxisFault;
+
+
+public class AxisOperationStatsMBean extends AbstractManagementInterface {
+	
+	
+	public int getInMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		return operationStats.getInMessages();
+	}
+	
+
+	public void clearInMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		operationStats.clearInMessages();
+	}
+	
+	
+	public int getOutMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		return operationStats.getOutMessages();
+	}
+	
+
+	public void clearOutMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		operationStats.clearOutMessages();
+	}
+	
+	
+	public int getFaultInMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		return operationStats.getFaultInMessages();
+	}
+	
+
+	public void clearFaultInMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		operationStats.clearFaultInMessages();
+	}
+	
+	
+	public int getFaultOutMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		return operationStats.getFaultOutMessages();
+	}
+	
+
+	public void clearFaultOutMessages(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		OperationStats operationStats = serviceStats.getMonitoredOperation(operationName);
+		operationStats.clearFaultOutMessages();
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisServiceStatsMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisServiceStatsMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisServiceStatsMBean.java	(working copy)
@@ -1,63 +1,64 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.management.core.utils.ServiceStats;
-
-
-public class AxisServiceStatsMBean extends AbstractManagementInterface {
-	
-	
-	public int getInMessages(String serviceName) throws AxisFault {		
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		return serviceStats.getInMessages();
-	}
-	
-
-	public void clearInMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		serviceStats.clearInMessages();
-	}
-	
-	
-	public int getOutMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		return serviceStats.getOutMessages();
-	}
-	
-
-	public void clearOutMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		serviceStats.clearOutMessages();
-	}
-	
-	
-	public int getFaultInMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		return serviceStats.getFaultInMessages();
-	}
-	
-
-	public void clearFaultInMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		serviceStats.clearFaultInMessages();
-	}
-	
-	
-	public int getFaultOutMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		return serviceStats.getFaultOutMessages();
-	}
-	
-
-	public void clearFaultOutMessages(String serviceName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		serviceStats.clearFaultOutMessages();
-	}
-	
-	
-	public void setOperationToMonitor(String serviceName, String operationName) throws AxisFault {
-		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
-		serviceStats.setOperationToMonitor(operationName);
-	}
+
+package org.apache.axis2.management.interfaces.jmx;
+
+import org.apache.axis2.management.core.utils.ServiceStats;
+
+import org.apache.axis2.AxisFault;
+
+
+public class AxisServiceStatsMBean extends AbstractManagementInterface {
+	
+	
+	public int getInMessages(String serviceName) throws AxisFault {		
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		return serviceStats.getInMessages();
+	}
+	
+
+	public void clearInMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		serviceStats.clearInMessages();
+	}
+	
+	
+	public int getOutMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		return serviceStats.getOutMessages();
+	}
+	
+
+	public void clearOutMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		serviceStats.clearOutMessages();
+	}
+	
+	
+	public int getFaultInMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		return serviceStats.getFaultInMessages();
+	}
+	
+
+	public void clearFaultInMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		serviceStats.clearFaultInMessages();
+	}
+	
+	
+	public int getFaultOutMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		return serviceStats.getFaultOutMessages();
+	}
+	
+
+	public void clearFaultOutMessages(String serviceName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		serviceStats.clearFaultOutMessages();
+	}
+	
+	
+	public void setOperationToMonitor(String serviceName, String operationName) throws AxisFault {
+		ServiceStats serviceStats = getDynamicStatsManager().getMonitoredService(serviceName);
+		serviceStats.setOperationToMonitor(operationName);
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisTransportsMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisTransportsMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisTransportsMBean.java	(working copy)
@@ -1,48 +1,48 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-
-public class AxisTransportsMBean extends AbstractManagementInterface {
-
-
-	public String[] getTransportInParameters(String transportInName) {
-		return getTransportManager().getTransportInParameters(transportInName);
-	}
-
-
-	public boolean isTransportInParameter(String transportInName, String paramName) {
-		return getTransportManager().isTransportInParameter(transportInName, paramName);
-	}
-
-
-	public void addTransportInParameter(String transportInName, String name, String value) {
-		getTransportManager().addTransportInParameter(transportInName, name, value);
-	}
-
-
-	public String editTransportInParameter(String transportInName, String parameterName, String value) {
-		return getTransportManager().editTransportInParameter(transportInName, parameterName, value);
-	}
-
-
-	public String[] getTransportOutParameters(String transportOutName) {
-		return getTransportManager().getTransportOutParameters(transportOutName);
-	}
-
-
-	public boolean isTransportOutParameter(String transportOutName, String paramName) {
-		return getTransportManager().isTransportOutParameter(transportOutName, paramName);
-	}
-
-
-	public void addTransportOutParameter(String transportOutName, String name, String value) {
-		getTransportManager().addTransportOutParameter(transportOutName, name, value);
-	}
-
-
-	public String editTransportOutParameter(String transportOutName, String parameterName, String value) {
-		return getTransportManager().editTransportOutParameter(transportOutName, parameterName, value);
-	}
-
-
+
+package org.apache.axis2.management.interfaces.jmx;
+
+
+public class AxisTransportsMBean extends AbstractManagementInterface {
+
+
+	public String[] getTransportInParameters(String transportInName) {
+		return getTransportManager().getTransportInParameters(transportInName);
+	}
+
+
+	public boolean isTransportInParameter(String transportInName, String paramName) {
+		return getTransportManager().isTransportInParameter(transportInName, paramName);
+	}
+
+
+	public void addTransportInParameter(String transportInName, String name, String value) {
+		getTransportManager().addTransportInParameter(transportInName, name, value);
+	}
+
+
+	public String editTransportInParameter(String transportInName, String parameterName, String value) {
+		return getTransportManager().editTransportInParameter(transportInName, parameterName, value);
+	}
+
+
+	public String[] getTransportOutParameters(String transportOutName) {
+		return getTransportManager().getTransportOutParameters(transportOutName);
+	}
+
+
+	public boolean isTransportOutParameter(String transportOutName, String paramName) {
+		return getTransportManager().isTransportOutParameter(transportOutName, paramName);
+	}
+
+
+	public void addTransportOutParameter(String transportOutName, String name, String value) {
+		getTransportManager().addTransportOutParameter(transportOutName, name, value);
+	}
+
+
+	public String editTransportOutParameter(String transportOutName, String parameterName, String value) {
+		return getTransportManager().editTransportOutParameter(transportOutName, parameterName, value);
+	}
+
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisServiceGroupsMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisServiceGroupsMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisServiceGroupsMBean.java	(working copy)
@@ -1,23 +1,64 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-
-public class AxisServiceGroupsMBean extends AbstractManagementInterface {
-	
-	
-	public String[] getServices(String serviceGroupName) {
-		return getServiceGroupManager().getServices(serviceGroupName);
-	}
-
-	
-	// Modules
-	
-	public String[] getServiceGroupEngagedModules(String serviceGroupName) {
-		return getServiceGroupManager().getServiceGroupEngagedModules(serviceGroupName);
-	}
-	
-	
-	public String engageModuleToServiceGroup(String moduleName, String serviceGroupName) {
-		return getServiceGroupManager().engageModuleToServiceGroup(moduleName, serviceGroupName);
-	}
+
+package org.apache.axis2.management.interfaces.jmx;
+
+import org.apache.axis2.management.core.utils.ManagementFactory;
+
+import org.apache.axis2.context.ConfigurationContext;
+
+import javax.management.*;
+
+
+public class AxisServiceGroupsMBean extends NotificationBroadcasterSupport {
+	
+	ManagementFactory managementFactory = null;
+	
+	public void init(ConfigurationContext configContext) {
+		managementFactory = new ManagementFactory(configContext);
+	}
+	
+	public String[] getServices(String serviceGroupName) {
+		
+		Notification notification = new AttributeChangeNotification(this, 
+			    0, 
+			    System.currentTimeMillis(), 
+			    "CacheSize changed", 
+			    "CacheSize", 
+			    "int", 
+			    new Integer(10), 
+			    new Integer(12)); 
+ 
+		sendNotification(notification);
+		System.out.println("Notification sent.");
+		
+		return managementFactory.getServiceGroupManager().getServices(serviceGroupName);
+	}
+
+	
+	// Modules
+	
+	public String[] getServiceGroupEngagedModules(String serviceGroupName) {
+		return managementFactory.getServiceGroupManager().getServiceGroupEngagedModules(serviceGroupName);
+	}
+	
+	
+	public String engageModuleToServiceGroup(String moduleName, String serviceGroupName) {
+		
+		Notification notification = new Notification("org.apache.axis2.management", this, -1, System.currentTimeMillis(), "Module engaged.");
+		sendNotification(notification);
+		
+		return managementFactory.getServiceGroupManager().engageModuleToServiceGroup(moduleName, serviceGroupName);
+	}
+	
+	
+	public MBeanNotificationInfo[] getNotificationInfo() { 
+        String[] types = new String[] { 
+            AttributeChangeNotification.ATTRIBUTE_CHANGE 
+        }; 
+        String name = AttributeChangeNotification.class.getName(); 
+        String description = "An attribute of this MBean has changed"; 
+        MBeanNotificationInfo info = 
+            new MBeanNotificationInfo(types, name, description); 
+        return new MBeanNotificationInfo[] {info}; 
+    } 
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisGlobalsMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisGlobalsMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisGlobalsMBean.java	(working copy)
@@ -1,106 +1,111 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-//import org.apache.axis2.management.interfaces.AbstractManagemetInterface;
-
-public class AxisGlobalsMBean extends AbstractManagementInterface {
-
-
-    public boolean isGlobalParameter(String paramName) {
-        return getGlobalManager().isGlobalParameter(paramName);
-    }
-
-
-    public String[] getGlobalParameters(){
-        return getGlobalManager().getGlobalParameters();
-    }
-
-
-    public String addGlobalParameter(String name, String value) {
-        return getGlobalManager().addGlobalParameter(name, value);
-    }
-
-
-    public String editGlobalParameter(String name, String value) {
-        return getGlobalManager().editGlobalParameter(name, value);
-    }
-
-
-    // Services
-
-    public String[] getServices() {
-        return getGlobalManager().getServices();
-    }
-
-
-    public String[] getFaultyServices() {
-        return getGlobalManager().getFaultyServices();
-    }
-
-
-    public boolean isServiceAvailable(String serviceName) {
-        return getGlobalManager().isServiceAvailable(serviceName);
-    }
-
-
-    public String removeService(String serviceName) {
-        return getGlobalManager().removeService(serviceName);
-    }
-
-
-    // ServiceGroups
-
-    public String[] getServiceGroups() {
-        return getGlobalManager().getServiceGroups();
-    }
-
-
-    // Modules
-
-    public boolean isModuleAvailable(String moduleName) {
-        return getGlobalManager().isModuleAvailable(moduleName);
-    }
-
-
-    public String[] getModules() {
-        return getGlobalManager().getModules();
-    }
-
-
-    public String[] getFaultyModules() {
-        return getGlobalManager().getFaultyModules();
-    }
-
-
-    public String[] getGloballyEngagedModules() {
-        return getGlobalManager().getGloballyEngagedModules();
-    }
-
-
-    public String engageModuleGlobally(String moduleName) {
-        return getGlobalManager().engageModuleGlobally(moduleName);
-    }
-
-
-    // Transports
-
-    public String[] getTransportIns(){
-        return getGlobalManager().getTransportIns();
-    }
-
-
-    public String[] getTransportOuts(){
-        return getGlobalManager().getTransportOuts();
-    }
-
-
-    public boolean isTransportInAvailable(String transportInName) {
-        return getGlobalManager().isTransportInAvailable(transportInName);
-    }
-
-
-    public boolean isTransportOutAvailable(String transportOutName) {
-        return getGlobalManager().isTransportOutAvailable(transportOutName);
-    }
-
+
+package org.apache.axis2.management.interfaces.jmx;
+
+//import org.apache.axis2.management.interfaces.AbstractManagemetInterface;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
+
+
+public class AxisGlobalsMBean extends AbstractManagementInterface {
+
+
+	public boolean isGlobalParameter(String paramName) {
+		return getGlobalManager().isGlobalParameter(paramName);
+	}
+
+
+	public String[] getGlobalParameters(){
+		return getGlobalManager().getGlobalParameters();
+	}
+
+
+	public String addGlobalParameter(String name, String value) {
+		return getGlobalManager().addGlobalParameter(name, value);
+	}
+
+
+	public String editGlobalParameter(String name, String value) {
+		return getGlobalManager().editGlobalParameter(name, value);
+	}
+	
+	
+	// Services
+	
+	public String[] getServices() {
+		return getGlobalManager().getServices();
+	}
+
+	
+	public String[] getFaultyServices() {
+		return getGlobalManager().getFaultyServices();
+	}
+
+
+	public boolean isServiceAvailable(String serviceName) {
+		return getGlobalManager().isServiceAvailable(serviceName);
+	}
+
+
+	public String removeService(String serviceName) {
+		return getGlobalManager().removeService(serviceName);
+	}
+	
+	
+	// ServiceGroups
+	
+	public String[] getServiceGroups() {
+		return getGlobalManager().getServiceGroups();
+	}
+	
+	
+	// Modules
+	
+	public boolean isModuleAvailable(String moduleName) {
+		return getGlobalManager().isModuleAvailable(moduleName);
+	}
+
+
+	public String[] getModules() {
+		return getGlobalManager().getModules();
+	}
+
+
+	public String[] getFaultyModules() {
+		return getGlobalManager().getFaultyModules();
+	}
+
+
+	public String[] getGloballyEngagedModules() {
+		return getGlobalManager().getGloballyEngagedModules();
+	}
+	
+	
+	public String engageModuleGlobally(String moduleName) {
+		return getGlobalManager().engageModuleGlobally(moduleName);
+	}
+
+	
+	// Transports
+	
+	public String[] getTransportIns(){
+		return getGlobalManager().getTransportIns();
+	}
+
+
+	public String[] getTransportOuts(){
+		return getGlobalManager().getTransportOuts();
+	}
+
+
+	public boolean isTransportInAvailable(String transportInName) {
+		return getGlobalManager().isTransportInAvailable(transportInName);
+	}
+
+
+	public boolean isTransportOutAvailable(String transportOutName) {
+		return getGlobalManager().isTransportOutAvailable(transportOutName);
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisOperationsMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisOperationsMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisOperationsMBean.java	(working copy)
@@ -1,42 +1,42 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-
-public class AxisOperationsMBean extends AbstractManagementInterface {
-	
-
-	public String[] getOperationParameters(String serviceName, String operationName){
-		return getOperationManager().getOperationParameters(serviceName, operationName);
-	}
-
-
-	public boolean isOperationParameter(String serviceName, String operationName, String paramName) {
-		return getOperationManager().isOperationParameter(serviceName, operationName, paramName);
-	}
-
-
-	public void addOperationParameter(String serviceName, String operationName, String name, String value) {
-		getOperationManager().addOperationParameter(serviceName, operationName, name, value);
-	}
-
-
-	public String editOperationParameter(String serviceName, String operationName, String parameterName, String value) {
-		return getOperationManager().editOperationParameter(serviceName, operationName, parameterName, value);
-	}
-
-	
-	// Modules
-	
-	public String[] getOperationEngagedModules(String serviceName, String opName) {
-		return getOperationManager().getOperationEngagedModules(serviceName, opName);
-	}
-	
-	
-	public String engageModuleToOperation(String moduleName, String serviceName, String operationName) {
-		return getOperationManager().engageModuleToOperation(moduleName, serviceName, operationName);
-	}
-
-}
-
-
+
+package org.apache.axis2.management.interfaces.jmx;
+
+
+public class AxisOperationsMBean extends AbstractManagementInterface {
+	
+
+	public String[] getOperationParameters(String serviceName, String operationName){
+		return getOperationManager().getOperationParameters(serviceName, operationName);
+	}
+
+
+	public boolean isOperationParameter(String serviceName, String operationName, String paramName) {
+		return getOperationManager().isOperationParameter(serviceName, operationName, paramName);
+	}
+
+
+	public void addOperationParameter(String serviceName, String operationName, String name, String value) {
+		getOperationManager().addOperationParameter(serviceName, operationName, name, value);
+	}
+
+
+	public String editOperationParameter(String serviceName, String operationName, String parameterName, String value) {
+		return getOperationManager().editOperationParameter(serviceName, operationName, parameterName, value);
+	}
+
+	
+	// Modules
+	
+	public String[] getOperationEngagedModules(String serviceName, String opName) {
+		return getOperationManager().getOperationEngagedModules(serviceName, opName);
+	}
+	
+	
+	public String engageModuleToOperation(String moduleName, String serviceName, String operationName) {
+		return getOperationManager().engageModuleToOperation(moduleName, serviceName, operationName);
+	}
+
+}
+
+
 	
\ No newline at end of file
Index: management/src/org/apache/axis2/management/interfaces/jmx/AxisServicesMBean.java
===================================================================
--- management/src/org/apache/axis2/management/interfaces/jmx/AxisServicesMBean.java	(revision 405641)
+++ management/src/org/apache/axis2/management/interfaces/jmx/AxisServicesMBean.java	(working copy)
@@ -1,51 +1,51 @@
-
-package org.apache.axis2.management.interfaces.jmx;
-
-
-public class AxisServicesMBean extends AbstractManagementInterface {
-
-
-	public String[] getServiceParameters(String serviceName) {
-		return getServiceManager().getServiceParameters(serviceName);
-	}
-
-
-	public boolean isServiceParameter(String serviceName, String paramName) {
-		return getServiceManager().isServiceParameter(serviceName, paramName);
-	}
-
-
-	public void addServiceParameter(String serviceName, String name, String value) {
-		getServiceManager().addServiceParameter(serviceName, name, value);
-	}
-
-
-	public String editServiceParameter(String serviceName, String parameterName, String value) {
-		return getServiceManager().editServiceParameter(serviceName, parameterName, value);
-	}
-	
-	
-	// Operations
-	
-	public String[] getOperations(String serviceName) {
-		return getServiceManager().getOperations(serviceName);
-	}
-	
-	
-	public boolean isOperationAvailable(String serviceName, String operationName) {
-		return getServiceManager().isOperationAvailable(serviceName, operationName);
-	}
-	
-	
-	// Modules
-	
-	public String[] getServiceEngagedModules(String serviceName) {
-		return getServiceManager().getServiceEngagedModules(serviceName);
-	}
-	
-	
-	public String engageModuleToService(String moduleName, String serviceName) {
-		return getServiceManager().engageModuleToService(moduleName, serviceName);
-	}
-
+
+package org.apache.axis2.management.interfaces.jmx;
+
+
+public class AxisServicesMBean extends AbstractManagementInterface {
+
+
+	public String[] getServiceParameters(String serviceName) {
+		return getServiceManager().getServiceParameters(serviceName);
+	}
+
+
+	public boolean isServiceParameter(String serviceName, String paramName) {
+		return getServiceManager().isServiceParameter(serviceName, paramName);
+	}
+
+
+	public void addServiceParameter(String serviceName, String name, String value) {
+		getServiceManager().addServiceParameter(serviceName, name, value);
+	}
+
+
+	public String editServiceParameter(String serviceName, String parameterName, String value) {
+		return getServiceManager().editServiceParameter(serviceName, parameterName, value);
+	}
+	
+	
+	// Operations
+	
+	public String[] getOperations(String serviceName) {
+		return getServiceManager().getOperations(serviceName);
+	}
+	
+	
+	public boolean isOperationAvailable(String serviceName, String operationName) {
+		return getServiceManager().isOperationAvailable(serviceName, operationName);
+	}
+	
+	
+	// Modules
+	
+	public String[] getServiceEngagedModules(String serviceName) {
+		return getServiceManager().getServiceEngagedModules(serviceName);
+	}
+	
+	
+	public String engageModuleToService(String moduleName, String serviceName) {
+		return getServiceManager().engageModuleToService(moduleName, serviceName);
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/utils/OperationStats.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/OperationStats.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/utils/OperationStats.java	(working copy)
@@ -1,6 +1,8 @@
 
 package org.apache.axis2.management.core.utils;
 
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.MessageContext;
 
 public class OperationStats {
Index: management/src/org/apache/axis2/management/core/utils/ServiceStats.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/ServiceStats.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/utils/ServiceStats.java	(working copy)
@@ -1,116 +1,117 @@
-
-package org.apache.axis2.management.core.utils;
-
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.context.MessageContext;
-
-import java.util.HashMap;
-
-
-public class ServiceStats {
-
-	private HashMap operationStatsMap = null;
-	private int inMessages = 0;
-	private int outMessages = 0;
-	private int inFaultMessages = 0;
-	private int outFaultMessages = 0;
-	
-	
-	public ServiceStats() {
-		operationStatsMap = new HashMap();
-	}
-	
-	
-	public int getInMessages() {
-		System.out.println("INFO: Returning in messages.");
-		return inMessages;
-	}
-	
-
-	public void clearInMessages() { 
-		inMessages = 0;
-	}
-	
-	
-	public int getOutMessages() {
-		return outMessages;
-	}
-	
-
-	public void clearOutMessages() {
-		outMessages = 0;
-	}
-	
-	
-	public int getFaultInMessages() {
-		return inFaultMessages;
-	}
-	
-	public void clearFaultInMessages() {
-		inFaultMessages = 0;
-	}
-	
-	
-	public int getFaultOutMessages() {
-		return outFaultMessages;
-	}
-	
-
-	public void clearFaultOutMessages() {
-		outFaultMessages = 0;
-	}
-	
-	
-	public HashMap getMonitoredOperations() {
-		return operationStatsMap;
-	}
-	
-	
-	public void updateStats(MessageContext msgContext) {
-		
-		System.out.println("INFO: Updating service stats.");
-		// monitor service level requests
-		if(msgContext.getFLOW() == MessageContext.IN_FLOW) {
-			inMessages++;
-			
-			if(msgContext.isProcessingFault()) {
-				inFaultMessages++;
-			}
-		} else if(msgContext.getFLOW() == MessageContext.OUT_FLOW) {
-			outMessages++;
-			
-			if(msgContext.isProcessingFault()) {
-				outFaultMessages++;
-			}
-		}
-
-		// monitor operation level requests
-		String operationName = msgContext.getAxisOperation().getName().getLocalPart();
-		OperationStats operationStats = (OperationStats)operationStatsMap.get(operationName);
-		if(operationStats != null) {
-			operationStats.updateStats(msgContext);
-		}
-	}
-	
-	
-	public void setOperationToMonitor(String operationName) {
-
-		if(!operationStatsMap.containsKey(operationName)) {
-			OperationStats operationStats = new OperationStats();
-			operationStatsMap.put(operationName, operationStats);
-		}	
-	}
-	
-	
-	public OperationStats getMonitoredOperation(String operationName) throws AxisFault {
-
-		OperationStats operationStats = (OperationStats)operationStatsMap.get(operationName);
-		
-		if(operationStats == null) {
-			throw new AxisFault("Operation not monitored.");
-		}
-
-		return operationStats;
-	}
-
+
+package org.apache.axis2.management.core.utils;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+
+import java.util.HashMap;
+
+
+public class ServiceStats {
+
+	private HashMap operationStatsMap = null;
+	private int inMessages = 0;
+	private int outMessages = 0;
+	private int inFaultMessages = 0;
+	private int outFaultMessages = 0;
+	
+	
+	public ServiceStats() {
+		operationStatsMap = new HashMap();
+	}
+	
+	
+	public int getInMessages() {
+		System.out.println("INFO: Returning in messages.");
+		return inMessages;
+	}
+	
+
+	public void clearInMessages() { 
+		inMessages = 0;
+	}
+	
+	
+	public int getOutMessages() {
+		return outMessages;
+	}
+	
+
+	public void clearOutMessages() {
+		outMessages = 0;
+	}
+	
+	
+	public int getFaultInMessages() {
+		return inFaultMessages;
+	}
+	
+	public void clearFaultInMessages() {
+		inFaultMessages = 0;
+	}
+	
+	
+	public int getFaultOutMessages() {
+		return outFaultMessages;
+	}
+	
+
+	public void clearFaultOutMessages() {
+		outFaultMessages = 0;
+	}
+	
+	
+	public HashMap getMonitoredOperations() {
+		return operationStatsMap;
+	}
+	
+	
+	public void updateStats(MessageContext msgContext) {
+		
+		System.out.println("INFO: Updating service stats.");
+		// monitor service level requests
+		if(msgContext.getFLOW() == MessageContext.IN_FLOW) {
+			inMessages++;
+			
+			if(msgContext.isProcessingFault()) {
+				inFaultMessages++;
+			}
+		} else if(msgContext.getFLOW() == MessageContext.OUT_FLOW) {
+			outMessages++;
+			
+			if(msgContext.isProcessingFault()) {
+				outFaultMessages++;
+			}
+		}
+
+		// monitor operation level requests
+		String operationName = msgContext.getAxisOperation().getName().getLocalPart();
+		OperationStats operationStats = (OperationStats)operationStatsMap.get(operationName);
+		if(operationStats != null) {
+			operationStats.updateStats(msgContext);
+		}
+	}
+	
+	
+	public void setOperationToMonitor(String operationName) {
+
+		if(!operationStatsMap.containsKey(operationName)) {
+			OperationStats operationStats = new OperationStats();
+			operationStatsMap.put(operationName, operationStats);
+		}	
+	}
+	
+	
+	public OperationStats getMonitoredOperation(String operationName) throws AxisFault {
+
+		OperationStats operationStats = (OperationStats)operationStatsMap.get(operationName);
+		
+		if(operationStats == null) {
+			throw new AxisFault("Operation not monitored.");
+		}
+
+		return operationStats;
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/utils/ManagementFactory.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/ManagementFactory.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/utils/ManagementFactory.java	(revision 0)
@@ -0,0 +1,72 @@
+
+
+package org.apache.axis2.management.core.utils;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+public class ManagementFactory {
+
+	private ConfigurationContext configContext = null;
+
+
+	public ManagementFactory(ConfigurationContext configContext) {
+		this.configContext = configContext;
+	}
+
+
+	public GlobalManager getGlobalManager() {
+		return (GlobalManager)configContext.getProperty("global_manager");
+	}
+
+
+	public ModuleManager getModuleManager() {
+		return (ModuleManager)configContext.getProperty("module_manager");
+	}
+
+
+	public TransportManager getTransportManager() {
+		return (TransportManager)configContext.getProperty("transport_manager");
+	}
+
+
+	public ServiceGroupManager getServiceGroupManager() {
+		return (ServiceGroupManager)configContext.getProperty("servicegroup_manager");
+	}
+
+
+	public ServiceManager getServiceManager() {
+		return (ServiceManager)configContext.getProperty("service_manager");
+	}
+
+
+	public ServiceArchiveManager getServiceArchiveManager() {
+		return (ServiceArchiveManager)configContext.getProperty("service_archive_manager");
+	}
+
+
+	public ModuleArchiveManager getModuleArchiveManager() {
+		return (ModuleArchiveManager)configContext.getProperty("module_archive_manager");
+	}
+
+
+	public OperationManager getOperationManager() {
+		return (OperationManager)configContext.getProperty("operation_manager");
+	}
+
+
+	public DynamicStatsManager getDynamicStatsManager() {
+		return (DynamicStatsManager)configContext.getProperty("dynamic_stats");
+	}
+
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/utils/ConfigurationEncoder.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/ConfigurationEncoder.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/utils/ConfigurationEncoder.java	(revision 0)
@@ -0,0 +1,332 @@
+package org.apache.axis2.management.core.utils;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+import org.apache.axis2.management.core.utils.ManagementFactory;
+import org.apache.axis2.management.core.utils.ResourceResolver;
+
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.io.*;
+import java.security.AccessController;
+import java.util.StringTokenizer;
+import java.util.Iterator;
+import java.util.ArrayList;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLOutputFactory;
+
+public class ConfigurationEncoder {
+	
+	private ManagementFactory managementFactory = null;
+	private GlobalManager globalManager = null;
+	private ModuleManager moduleManager = null;
+	private TransportManager transportManager = null;
+	private ServiceGroupManager serviceGroupManager = null;
+	private ServiceManager serviceManager = null;
+	private OperationManager operationManager = null;
+	private ModuleArchiveManager moduleArchiveManager = null;
+	private ServiceArchiveManager serviceArchiveManager = null;
+	
+	private OMFactory fac = null;
+	private OMNamespace omNs = null;
+	
+	public ConfigurationEncoder(ManagementFactory mf) {
+		managementFactory = mf;
+	}
+	
+	
+	
+	public OMElement encodeConfiguration() {
+		
+		globalManager = managementFactory.getGlobalManager();
+		moduleManager = managementFactory.getModuleManager();
+		transportManager = managementFactory.getTransportManager();
+		serviceGroupManager = managementFactory.getServiceGroupManager();
+		serviceManager = managementFactory.getServiceManager();
+		operationManager = managementFactory.getOperationManager();
+		moduleArchiveManager = managementFactory.getModuleArchiveManager();
+		serviceArchiveManager = managementFactory.getServiceArchiveManager();
+		
+		fac = OMAbstractFactory.getOMFactory();
+		omNs = fac.createOMNamespace("http://org.apache.axis2.management.axisconfiguration", "axis2");
+		OMElement configElement = fac.createOMElement("AxisConfiguration", omNs);
+		
+		// pack global parameters
+		configElement.addChild(encodeGlobalParameters());
+		
+		// pack module data
+		configElement.addChild(encodeModulesConfiguration());
+		
+		// pack transports data
+		configElement.addChild(encodeTransportsConfiguration());
+		
+		// pack service group data
+		configElement.addChild(encodeServiceGroupsConfiguration());
+		
+		// pack service data
+		configElement.addChild(encodeServicesConfiguration());
+		
+		// pack resource paths
+		configElement.addChild(encodeResourcePaths());
+		
+		return configElement;
+	}
+	
+	
+	private OMElement encodeGlobalParameters() {
+		
+		String[] globalParams = globalManager.getGlobalParameters();
+		OMElement global = fac.createOMElement("global", omNs);
+		
+		for(int i=0; i<globalParams.length; i++) {
+			StringTokenizer tokens = new StringTokenizer(globalParams[i], ":");
+			String name = tokens.nextToken();
+			String value = tokens.nextToken();
+			OMElement param = fac.createOMElement("parameter", omNs);
+			param.addAttribute("name", name, omNs);
+			param.addChild(fac.createOMText(param, value));
+			
+			global.addChild(param);
+		}
+		
+		return global;
+	}
+	
+	
+	private OMElement encodeModulesConfiguration() {
+		
+		OMElement modulesElement = fac.createOMElement("modules", omNs);
+		
+		String[] modules = globalManager.getModules();
+		for(int i=0; i<modules.length; i++) {
+			OMElement module = fac.createOMElement("module", omNs);
+			module.addAttribute("name", modules[i], omNs);
+			
+			// pack module parameters
+			String[] moduleParameters = moduleManager.getModuleParameters(modules[i]);
+			for(int j=0; j<moduleParameters.length; j++) {
+				StringTokenizer tokens = new StringTokenizer(moduleParameters[j], ":");
+				String name = tokens.nextToken();
+				String value = tokens.nextToken();
+				OMElement param = fac.createOMElement("parameter", omNs);
+				param.addAttribute("name", name, omNs);
+				param.addChild(fac.createOMText(param, value));
+				
+				module.addChild(param);
+			}
+			
+			if(moduleManager.isEngagedGlobally(modules[i])) {
+				OMElement engagedGlobally = fac.createOMElement("engagedGlobally", omNs);
+				engagedGlobally.addChild(fac.createOMText(engagedGlobally, "true"));
+				module.addChild(engagedGlobally);
+			} else {
+				OMElement engagedGlobally = fac.createOMElement("engagedGlobally", omNs);
+				engagedGlobally.addChild(fac.createOMText(engagedGlobally, "false"));
+				module.addChild(engagedGlobally);
+				
+				String[] engagedServices = moduleManager.getEngagedServices(modules[i]);
+				if(engagedServices.length > 0) {
+					OMElement engagedServicesElement = fac.createOMElement("engagedServices", omNs);
+					
+					for(int j=0; j<engagedServices.length; j++) {
+						OMElement service = fac.createOMElement("service", omNs);
+						service.addChild(fac.createOMText(service, engagedServices[j]));
+						
+						engagedServicesElement.addChild(service);
+					}
+					
+					module.addChild(engagedServicesElement);
+				}
+				
+				String[] engagedOperations = moduleManager.getEngagedOperations(modules[i]);
+				if(engagedOperations.length > 0) {
+					OMElement engagedOperationsElement = fac.createOMElement("engagedOperations", omNs);
+					
+					for(int j=0; j<engagedOperations.length; j++) {
+						OMElement operation = fac.createOMElement("operation", omNs);
+						
+						StringTokenizer tokens = new StringTokenizer(engagedOperations[j], ".");
+						String serviceName = tokens.nextToken();
+						String operationName = tokens.nextToken();
+						operation.addAttribute("service", serviceName, omNs);
+						operation.addChild(fac.createOMText(operation, operationName));
+						
+						engagedOperationsElement.addChild(operation);
+					}
+					module.addChild(engagedOperationsElement);
+				}
+			}
+			modulesElement.addChild(module);
+		}
+		
+		return modulesElement;
+	}
+	
+	
+	private OMElement encodeTransportsConfiguration() {
+		
+		OMElement transportsElement = fac.createOMElement("transports", omNs);
+		
+		String[] transportIns = globalManager.getTransportIns();
+		for(int i=0; i<transportIns.length; i++) {
+			
+			OMElement transportIn = fac.createOMElement("transportIn", omNs);
+			transportIn.addAttribute("name", transportIns[i], omNs);
+			
+			String[] transportParams = transportManager.getTransportInParameters(transportIns[i]);
+			for(int j=0; j<transportParams.length; j++) {
+				StringTokenizer tokens = new StringTokenizer(transportParams[j], ":");
+				String name = tokens.nextToken();
+				String value = tokens.nextToken();
+				OMElement param = fac.createOMElement("parameter", omNs);
+				param.addAttribute("name", name, omNs);
+				param.addChild(fac.createOMText(param, value));
+				
+				transportIn.addChild(param);
+			}
+			
+			transportsElement.addChild(transportIn);
+		}
+		
+		String[] transportOuts = globalManager.getTransportOuts();
+		for(int i=0; i<transportOuts.length; i++) {
+			
+			OMElement transportOut = fac.createOMElement("transportOut", omNs);
+			transportOut.addAttribute("name", transportOuts[i], omNs);
+			
+			String[] transportParams = transportManager.getTransportOutParameters(transportOuts[i]);
+			for(int j=0; j<transportParams.length; j++) {
+				StringTokenizer tokens = new StringTokenizer(transportParams[j], ":");
+				String name = tokens.nextToken();
+				String value = tokens.nextToken();
+				OMElement param = fac.createOMElement("parameter", omNs);
+				param.addAttribute("name", name, omNs);
+				param.addChild(fac.createOMText(param, value));
+				
+				transportOut.addChild(param);
+			}
+			
+			transportsElement.addChild(transportOut);
+		}
+		
+		return transportsElement;
+		
+	}
+	
+	
+	private OMElement encodeServiceGroupsConfiguration() {
+		
+		OMElement serviceGroupsElement = fac.createOMElement("serviceGroups", omNs);
+		String[] serviceGroups = globalManager.getServiceGroups();
+		
+		for(int i=0; i<serviceGroups.length; i++) {
+			
+			OMElement serviceGroup = fac.createOMElement("serviceGroup", omNs);
+			serviceGroup.addAttribute("name", serviceGroups[i], omNs);
+			
+			/*
+			 String[] serviceGroupParameters = serviceGroupManager.getServices(serviceGroups[i]);
+			 for(int j=0; j<serviceGroupParameters.length; j++) {
+			 StringTokenizer tokens = new StringTokenizer(serviceGroupParameters[j], ":");
+			 String name = tokens.nextToken();
+			 String value = tokens.nextToken();
+			 OMElement parameter = fac.createOMElement("parameter", omNs);
+			 parameter.addAttribute("name", name, omNs);
+			 parameter.addChild(fac.createOMText(parameter, value));
+			 serviceGroup.addChild(parameter);
+			 }
+			 */
+			
+			String[] services = serviceGroupManager.getServices(serviceGroups[i]);
+			for(int j=0; j<services.length; j++) {
+				OMElement service = fac.createOMElement("service", omNs);
+				service.addChild(fac.createOMText(service, services[j]));
+				serviceGroup.addChild(service);
+			}
+			
+			serviceGroupsElement.addChild(serviceGroup);
+		}
+		
+		return serviceGroupsElement;
+	}
+	
+	
+	private OMElement encodeServicesConfiguration() {
+		
+		OMElement servicesElement = fac.createOMElement("services", omNs);
+		String[] services = globalManager.getServices();
+		for(int i=0; i<services.length; i++) {
+			OMElement service = fac.createOMElement("service", omNs);
+			service.addAttribute("name", services[i], omNs);
+			
+			String[] serviceParameters = serviceManager.getServiceParameters(services[i]);
+			for(int j=0; j<serviceParameters.length; j++) {
+				StringTokenizer tokens = new StringTokenizer(serviceParameters[j], ":");
+				String name = tokens.nextToken();
+				String value = tokens.nextToken();
+				OMElement parameter = fac.createOMElement("parameter", omNs);
+				parameter.addAttribute("name", name, omNs);
+				parameter.addChild(fac.createOMText(parameter, value));
+				service.addChild(parameter);
+			}
+			
+			String[] operations = serviceManager.getOperations(services[i]);
+			for(int j=0; j<operations.length; j++) {
+				service.addChild(getOperationData(services[i], operations[j]));
+			}
+			
+			servicesElement.addChild(service);
+		}
+		
+		return servicesElement;
+	}
+	
+	
+	private OMElement getOperationData(String serviceName, String operationName) {
+		
+		OMElement operation = fac.createOMElement("operation", omNs);
+		operation.addAttribute("name", operationName, omNs);
+		
+		String[] operationParameters = operationManager.getOperationParameters(serviceName, operationName);
+		for(int j=0; j<operationParameters.length; j++) {
+			StringTokenizer tokens = new StringTokenizer(operationParameters[j], ":");
+			String name = tokens.nextToken();
+			String value = tokens.nextToken();
+			OMElement parameter = fac.createOMElement("parameter", omNs);
+			parameter.addAttribute("name", name, omNs);
+			parameter.addChild(fac.createOMText(parameter, value));
+			operation.addChild(parameter);
+		}
+		
+		return operation;
+	}
+	
+	
+	private OMElement encodeResourcePaths() {
+		
+		OMElement resourcePathsElement = fac.createOMElement("resourcePaths", omNs);
+		ArrayList filePathsList = globalManager.getFilePaths();
+		if(filePathsList != null) {
+			for(int i=0; i<filePathsList.size(); i++) {
+				OMElement filePath = fac.createOMElement("filePath", omNs);
+				filePath.setText((String)filePathsList.get(i));
+				resourcePathsElement.addChild(filePath);
+			}
+		}
+		return resourcePathsElement;
+	}
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/utils/ResourceResolver.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/ResourceResolver.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/utils/ResourceResolver.java	(revision 0)
@@ -0,0 +1,170 @@
+
+
+package org.apache.axis2.management.core.utils;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+import org.apache.axis2.management.core.utils.ManagementFactory;
+
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.io.*;
+import java.security.AccessController;
+import java.util.StringTokenizer;
+import java.util.Iterator;
+import java.util.ArrayList;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLOutputFactory;
+
+
+
+public class ResourceResolver {
+	
+	private ConfigurationContext configContext = null;
+	
+	private ManagementFactory managementFactory = null;
+	private GlobalManager globalManager = null;
+	private ModuleManager moduleManager = null;
+	private TransportManager transportManager = null;
+	private ServiceGroupManager serviceGroupManager = null;
+	private ServiceManager serviceManager = null;
+	private OperationManager operationManager = null;
+	private ModuleArchiveManager moduleArchiveManager = null;
+	private ServiceArchiveManager serviceArchiveManager = null;
+	
+	
+	public ResourceResolver(ManagementFactory mf) {
+		//this.configContext = configContext;
+		//managementFactory = new ManagementFactory(configContext);
+		managementFactory = mf;
+		
+		globalManager = managementFactory.getGlobalManager();
+		moduleManager = managementFactory.getModuleManager();
+		transportManager = managementFactory.getTransportManager();
+		serviceGroupManager = managementFactory.getServiceGroupManager();
+		serviceManager = managementFactory.getServiceManager();
+		operationManager = managementFactory.getOperationManager();
+		moduleArchiveManager = managementFactory.getModuleArchiveManager();
+		serviceArchiveManager = managementFactory.getServiceArchiveManager();
+	}
+	
+	
+	public void resolveResources(OMElement configElement) throws Exception {
+		
+		ArrayList filePaths = new ArrayList();
+		ArrayList resourceEPRs = new ArrayList();
+		
+		OMElement resourcePathsElement = configElement.getFirstChildWithName(new QName("resourcePaths"));
+		if(resourcePathsElement != null) {
+			
+			// get file paths
+			Iterator iFilePaths = resourcePathsElement.getChildrenWithName(new QName("filePath"));
+			while(iFilePaths.hasNext()) {
+				OMElement filePath = (OMElement)iFilePaths.next();
+				String path = filePath.getText();
+				filePaths.add(path);
+			}
+			
+			// get resourceEPRs
+			Iterator iResourceEPRs = resourcePathsElement.getChildrenWithName(new QName("resourceEPR"));
+			while(iResourceEPRs.hasNext()) {
+				OMElement resourceEPR = (OMElement)iResourceEPRs.next();
+				String epr = resourceEPR.getText();
+				resourceEPRs.add(epr);
+			}
+		}
+		
+		System.out.println("Checking modules...");
+		// check modules
+		OMElement modulesElement = configElement.getFirstChildWithName(new QName("modules"));
+		
+		String[] sysModules = globalManager.getModules();
+		for(int i=0; i<sysModules.length; i++) {
+			System.out.println("MODULE: " + sysModules[i]);
+		}
+		
+		if(modulesElement != null) {
+			Iterator modules = modulesElement.getChildrenWithName(new QName("module"));
+			while(modules.hasNext()) {
+				OMElement module = (OMElement)modules.next();
+				String moduleName = module.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+				if(!globalManager.isModuleAvailable(moduleName)) {
+					
+					System.out.println("Module: " + moduleName + " not available.");
+					// module is not available in the local repository
+					try {
+						System.out.println("Searching for file...");
+						String fileName = searchFile(moduleName + ".mar", filePaths, resourceEPRs);
+						moduleArchiveManager.setModuleArchive(moduleName+".mar", fileName);
+					} catch(Exception e) {
+						throw new Exception("Required resource not found.\n Resource name: " + moduleName);
+					}
+					
+				}
+			}
+		}
+		
+		// check service groups (assume that service group name = service archive name)
+		OMElement serviceGroupsElement = configElement.getFirstChildWithName(new QName("serviceGroups"));
+		if(serviceGroupsElement != null) {
+			Iterator serviceGroups = serviceGroupsElement.getChildrenWithName(new QName("serviceGroup"));
+			while(serviceGroups.hasNext()) {
+				OMElement serviceGroup = (OMElement)serviceGroups.next();
+				String serviceGroupName = serviceGroup.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+				if(!globalManager.isServiceGroupAvailable(serviceGroupName)) {
+					
+					// service group is not available in the local repository
+					try {
+						String fileName = searchFile(serviceGroupName + ".aar", filePaths, resourceEPRs);
+						System.out.println("File found: " + fileName);
+						serviceArchiveManager.setServiceArchive(serviceGroupName+".aar", fileName);
+					} catch(Exception e) {
+						throw new Exception("Required resource not found.\n Resource name: " + serviceGroupName);
+					}
+					
+				}
+			}
+		}
+	}
+	
+	
+	private String searchFile(String fileName, ArrayList filePaths, ArrayList resourceEPRs) throws Exception {
+		
+		boolean found = false;
+		
+		// first check in file paths
+		for(int i=0; i<filePaths.size() && found==false; i++) {
+			
+			System.out.println("File path: " + (String)filePaths.get(i));
+			System.out.println("Trying to open file: " + (String)filePaths.get(i) + "\\" + fileName);
+			File file = new File((String)filePaths.get(i) + "\\" + fileName);
+			if(file == null)
+				System.out.println("File is null.");
+			
+			if(file.exists()) {
+				return file.getPath();
+			}
+		}
+		
+		// then check in remote EPRs
+		//for(int i=0; i<resourceEPRs.size() && found==false; i++) {
+		
+		//}
+		
+		return "FILE NOT FOUND";
+	}
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/utils/JMXUtil.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/JMXUtil.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/utils/JMXUtil.java	(working copy)
@@ -1,100 +1,106 @@
-package org.apache.axis2.management.core.utils;
-
-import org.apache.axis2.AxisFault;
-
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-
-/**
- * JMXManager manages everything related to registering and publishing MBeans. It is not aware about
- * the MBeans it is going to publish. Instead it provides a set of methods to register and publish any
- * object as an MBean. Currently only JMXAdmin uses this to publish MBeans. But this can be used by any module
- * to publish objects for management. This is a singleton class and the users should use the "getJMXManager"
- * factory method to obtain an instance of this.
- *
- */
-public class JMXUtil {
-
-	private Object registry = null;
-	private Method registerComponent = null;
-
-	
-	public JMXUtil() throws AxisFault{
-
-		try{
-			System.out.println("Initializing MBeanServer...");
-			initModeler();
-
-		}catch(Exception e){
-			throw AxisFault.makeFault(e);
-		}
-
-	}
-
-
-	/**
-	 * This method initializes the modeler registry. An MBeanServer is created if it was not alrady
-	 * created.
-	 *
-	 * @throws AxisFault
-     */
-	public boolean initModeler() throws Exception{
-
-		Class registryClass = null;
-		
-		try {
-			registryClass = Class.forName("org.apache.commons.modeler.Registry");
-		} catch (ClassNotFoundException e) {
-			System.out.println("Couldn't find Apache commons.modeler package.\nJMX support is not activated.");
-			registry = null;
-			throw new Exception("Couldn't find Apache commons.modeler package.");
-		}
-
-		try {
-			Class[] getRegistryArgs = new Class[]{Object.class, Object.class,};
-			Method getRegistry = registryClass.getMethod("getRegistry", getRegistryArgs);
-			Object[] getRegistryOptions = new Object[]{null, null};
-			registry = getRegistry.invoke(null, getRegistryOptions);
-
-			Class[] registerComponentArgs = new Class[]{Object.class, String.class, String.class};
-			registerComponent = registryClass.getMethod("registerComponent", registerComponentArgs);
-
-		} catch (IllegalAccessException e) {
-			throw e;
-		} catch (IllegalArgumentException e) {
-			throw e;
-		} catch (InvocationTargetException e) {
-			throw e;
-		} catch (NoSuchMethodException e) {
-			throw e;
-		}
-
-		return true;
-	}
-
-
-	/**
-	 * This method is used to register MBeans. It registers any object provided to it as an MBean.
-	 * All public fields and methods of the object will be exposed for management.
-	 *
-	 * @param mbean
-	 * @param mbeanName
-	 * @throws AxisFault
-     */
-	public boolean registerMBean(Object mbean, String mbeanName, String context) throws Exception{
-
-			if (registry != null) {
-				Object args[] = new Object[]{mbean, mbeanName, context};
-				try {
-					registerComponent.invoke(registry, args);
-				} catch (Exception e) {
-					throw new Exception("Couldn't register MBean.");
-				} 
-				
-				return true;
-			} else {
-				return false;
-			}
-	}
+package org.apache.axis2.management.core.utils;
+
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.AxisFault;
+
+import java.rmi.registry.LocateRegistry;
+import java.util.Map;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+
+
+/**
+ * JMXManager manages everything related to registering and publishing MBeans. It is not aware about
+ * the MBeans it is going to publish. Instead it provides a set of methods to register and publish any
+ * object as an MBean. Currently only JMXAdmin uses this to publish MBeans. But this can be used by any module
+ * to publish objects for management. This is a singleton class and the users should use the "getJMXManager"
+ * factory method to obtain an instance of this.
+ *
+ */
+public class JMXUtil {
+
+	private Object registry = null;
+	private Method registerComponent = null;
+
+	
+	public JMXUtil() throws AxisFault{
+
+		try{
+			System.out.println("Initializing MBeanServer...");
+			initModeler();
+
+		}catch(Exception e){
+			throw AxisFault.makeFault(e);
+		}
+
+	}
+
+
+	/**
+	 * This method initializes the modeler registry. An MBeanServer is created if it was not alrady
+	 * created.
+	 *
+	 * @throws AxisFault
+     */
+	public boolean initModeler() throws Exception{
+
+		Class registryClass = null;
+		
+		try {
+			registryClass = Class.forName("org.apache.commons.modeler.Registry");
+		} catch (ClassNotFoundException e) {
+			System.out.println("Couldn't find Apache commons.modeler package.\nJMX support is not activated.");
+			registry = null;
+			throw new Exception("Couldn't find Apache commons.modeler package.");
+		}
+
+		try {
+			Class[] getRegistryArgs = new Class[]{Object.class, Object.class,};
+			Method getRegistry = registryClass.getMethod("getRegistry", getRegistryArgs);
+			Object[] getRegistryOptions = new Object[]{null, null};
+			registry = getRegistry.invoke(null, getRegistryOptions);
+
+			Class[] registerComponentArgs = new Class[]{Object.class, String.class, String.class};
+			registerComponent = registryClass.getMethod("registerComponent", registerComponentArgs);
+
+		} catch (IllegalAccessException e) {
+			throw e;
+		} catch (IllegalArgumentException e) {
+			throw e;
+		} catch (InvocationTargetException e) {
+			throw e;
+		} catch (NoSuchMethodException e) {
+			throw e;
+		}
+
+		return true;
+	}
+
+
+	/**
+	 * This method is used to register MBeans. It registers any object provided to it as an MBean.
+	 * All public fields and methods of the object will be exposed for management.
+	 *
+	 * @param mbean
+	 * @param mbeanName
+	 * @throws AxisFault
+     */
+	public boolean registerMBean(Object mbean, String mbeanName, String context) throws Exception{
+
+			if (registry != null) {
+				Object args[] = new Object[]{mbean, mbeanName, context};
+				try {
+					registerComponent.invoke(registry, args);
+				} catch (Exception e) {
+					throw new Exception("Couldn't register MBean.");
+				} 
+				
+				return true;
+			} else {
+				return false;
+			}
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/utils/OMBasedConfigurator.java
===================================================================
--- management/src/org/apache/axis2/management/core/utils/OMBasedConfigurator.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/utils/OMBasedConfigurator.java	(revision 0)
@@ -0,0 +1,317 @@
+package org.apache.axis2.management.core.utils;
+
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+
+import org.apache.axis2.context.ConfigurationContext;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+import java.io.*;
+import java.security.AccessController;
+import java.util.StringTokenizer;
+import java.util.Iterator;
+import java.util.ArrayList;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLOutputFactory;
+
+public class OMBasedConfigurator {
+	
+	private ManagementFactory managementFactory = null;
+	private GlobalManager globalManager = null;
+	private ModuleManager moduleManager = null;
+	private TransportManager transportManager = null;
+	private ServiceGroupManager serviceGroupManager = null;
+	private ServiceManager serviceManager = null;
+	private OperationManager operationManager = null;
+	private ModuleArchiveManager moduleArchiveManager = null;
+	private ServiceArchiveManager serviceArchiveManager = null;
+	
+	private OMFactory fac = null;
+	private OMNamespace omNs = null;
+	
+	public OMBasedConfigurator(ManagementFactory mf) {
+		managementFactory = mf;
+	}
+	
+	
+	public void setConfigurationFromOMElement(OMElement configElement) throws Exception {
+		
+		globalManager = managementFactory.getGlobalManager();
+		moduleManager = managementFactory.getModuleManager();
+		transportManager = managementFactory.getTransportManager();
+		serviceGroupManager = managementFactory.getServiceGroupManager();
+		serviceManager = managementFactory.getServiceManager();
+		operationManager = managementFactory.getOperationManager();
+		moduleArchiveManager = managementFactory.getModuleArchiveManager();
+		serviceArchiveManager = managementFactory.getServiceArchiveManager();
+		
+		System.out.println("Inside setConfiguration.");
+		StringWriter writer = new StringWriter();
+		configElement.serialize(XMLOutputFactory.newInstance().createXMLStreamWriter(writer));
+		writer.flush();
+		
+		System.out.println(writer.toString());
+		
+		//initResources(configElement);
+		
+		try {
+			ResourceResolver resolver = new ResourceResolver(managementFactory);
+			resolver.resolveResources(configElement);
+		} catch(Exception e) {
+			
+		}
+		
+		OMElement globalsElement = configElement.getFirstChildWithName(new QName("http://org.apache.axis2.management.axisconfiguration", "global", "axis2"));
+		processGlobals(globalsElement);
+		
+		OMElement modulesElement = configElement.getFirstChildWithName(new QName("modules"));
+		if(modulesElement != null) {
+			Iterator modules = modulesElement.getChildrenWithName(new QName("module"));
+			while(modules.hasNext()) {
+				OMElement module = (OMElement)modules.next();
+				processModule(module);
+			}
+		}
+		
+		OMElement transportsElement = configElement.getFirstChildWithName(new QName("transports"));
+		if(transportsElement != null) {
+			Iterator transportIns = transportsElement.getChildrenWithName(new QName("transportIn"));
+			while(transportIns.hasNext()) {
+				OMElement transportIn = (OMElement)transportIns.next();
+				processTransportIn(transportIn);
+			}
+			
+			Iterator transportOuts = transportsElement.getChildrenWithName(new QName("transportOut"));
+			while(transportOuts.hasNext()) {
+				OMElement transportOut = (OMElement)transportOuts.next();
+				processTransportOut(transportOut);
+			}
+		}
+		
+		OMElement serviceGroupsElement = configElement.getFirstChildWithName(new QName("serviceGroups"));
+		if(serviceGroupsElement != null) {
+			Iterator serviceGroups = serviceGroupsElement.getChildrenWithName(new QName("serviceGroup"));
+			while(serviceGroups.hasNext()) {
+				OMElement serviceGroup = (OMElement)serviceGroups.next();
+				processServiceGroup(serviceGroup);
+			}
+		}
+		
+		OMElement servicesElement = configElement.getFirstChildWithName(new QName("services"));
+		if(servicesElement != null) {
+			Iterator services = servicesElement.getChildrenWithName(new QName("service"));
+			while(services.hasNext()) {
+				OMElement service = (OMElement)services.next();
+				processService(service);
+			}
+		}
+	}
+	
+	
+	private void processGlobals(OMElement globalsElement) {
+		
+		if(globalsElement != null) {
+			System.out.println("processing globals...");
+			
+			Iterator globals = globalsElement.getChildrenWithName(new QName("parameter"));
+			while(globals.hasNext()) {
+				
+				OMElement param = (OMElement)globals.next();
+				
+				String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+				String value = param.getText();
+				
+				System.out.println(globalManager.getGlobalParameters());
+				System.out.println("editing global parameter " + name + " : " + value);
+				globalManager.editGlobalParameter(name, value);
+				System.out.println("Global parameter changed successfully.");
+			}
+		}
+	}
+	
+	
+	private void processModule(OMElement moduleElement) {
+		
+		String moduleName = moduleElement.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		
+		Iterator params = moduleElement.getChildrenWithName(new QName("parameter"));
+		while(params.hasNext()) {
+			
+			OMElement param = (OMElement)params.next();
+			
+			String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+			String value = param.getText();
+			
+			moduleManager.editModuleParameter(moduleName, name, value);
+		}
+		
+		OMElement engagedGlobally = moduleElement.getFirstChildWithName(new QName("engagedGlobally"));
+		if(engagedGlobally != null && engagedGlobally.getText().equals("true")) {
+			globalManager.engageModuleGlobally(moduleName);
+		} else {
+			
+			// module is not engaged globally. so disengage it, if engaged.
+			globalManager.disengageModuleGlobally(moduleName);
+			
+			// process engaged service groups
+			OMElement engagedServiceGroupsElement = moduleElement.getFirstChildWithName(new QName("engagedServiceGroups"));
+			if(engagedServiceGroupsElement != null) {
+				Iterator engagedServiceGroups = engagedServiceGroupsElement.getChildrenWithName(new QName("serviceGroup"));
+				while(engagedServiceGroups.hasNext()) {
+					OMElement serviceGroup = (OMElement)engagedServiceGroups.next();
+					serviceGroupManager.engageModuleToServiceGroup(moduleName, serviceGroup.getText());
+				}
+			}
+			
+			// process engaged services
+			ArrayList engagedServicesList = new ArrayList();
+			OMElement engagedServicesElement = moduleElement.getFirstChildWithName(new QName("engagedServices"));
+			if(engagedServicesElement != null) {
+				Iterator engagedServices = engagedServicesElement.getChildrenWithName(new QName("service"));
+				while(engagedServices.hasNext()) {
+					OMElement service = (OMElement)engagedServices.next();
+					serviceManager.engageModuleToService(moduleName, service.getText());
+					engagedServicesList.add(service.getText());
+				}
+			}
+			
+			// disengage this module from currently engaged but not specified services
+			String[] currentlyEngagedServices = moduleManager.getEngagedServices(moduleName);
+			for(int i=0; i<currentlyEngagedServices.length; i++) {
+				if(!engagedServicesList.contains(currentlyEngagedServices[i]))
+					serviceManager.disengageModuleFromService(moduleName, currentlyEngagedServices[i]);
+			}
+			
+			
+			// process engaged operations
+			ArrayList engagedOperationsList = new ArrayList();
+			OMElement engagedOperationsElement = moduleElement.getFirstChildWithName(new QName("engagedOperations"));
+			if(engagedOperationsElement != null) {
+				Iterator engagedOperations = engagedOperationsElement.getChildrenWithName(new QName("operation"));
+				while(engagedOperations.hasNext()) {
+					OMElement operation = (OMElement)engagedOperations.next();
+					String serviceName = operation.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "service", "axis2"));
+					operationManager.engageModuleToOperation(moduleName, serviceName, operation.getText());
+					engagedOperationsList.add(serviceName+"."+operation.getText());
+				}
+			}
+			
+			// disengage this module from currently engaged but not specified operations
+			String[] currentlyEngagedOperations = moduleManager.getEngagedOperations(moduleName);
+			for(int i=0; i<currentlyEngagedOperations.length; i++) {
+				if(!engagedOperationsList.contains(currentlyEngagedOperations[i])) {
+					StringTokenizer st = new StringTokenizer(currentlyEngagedOperations[i], ".");
+					String service = st.nextToken();
+					String operation = st.nextToken();
+					operationManager.disengageModuleFromOperation(moduleName, service, operation);
+				}
+			}
+			
+		}
+	}
+	
+	
+	private void processTransportIn(OMElement transportInElement) {
+		
+		String transportInName = transportInElement.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		
+		Iterator params = transportInElement.getChildrenWithName(new QName("parameter"));
+		while(params.hasNext()) {
+			
+			OMElement param = (OMElement)params.next();
+			
+			String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+			String value = param.getText();
+			
+			transportManager.editTransportInParameter(transportInName, name, value);
+		}
+	}
+	
+	
+	private void processTransportOut(OMElement transportOutElement) {
+		
+		String transportOutName = transportOutElement.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		
+		Iterator params = transportOutElement.getChildrenWithName(new QName("parameter"));
+		while(params.hasNext()) {
+			
+			OMElement param = (OMElement)params.next();
+			
+			String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+			String value = param.getText();
+			
+			transportManager.editTransportOutParameter(transportOutName, name, value);
+		}
+	}
+	
+	
+	private void processServiceGroup(OMElement serviceGroupElement) {
+		
+		/*
+		 String serviceGroupName = serviceGroupElement.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		 
+		 Iterator params = serviceGroupElement.getChildrenWithName(new QName("parameter"));
+		 while(params.hasNext()) {
+		 
+		 OMElement param = (OMElement)params.next();
+		 
+		 String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		 String value = param.getText();
+		 
+		 serviceGroupManager.editserviceGroupParameter(name, value);
+		 }
+		 */
+	}
+	
+	
+	private void processService(OMElement serviceElement) {
+		
+		String serviceName = serviceElement.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		
+		Iterator params = serviceElement.getChildrenWithName(new QName("parameter"));
+		while(params.hasNext()) {
+			
+			OMElement param = (OMElement)params.next();
+			
+			String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+			String value = param.getText();
+			
+			serviceManager.editServiceParameter(serviceName, name, value);
+		}
+		
+		// process operation of this service
+		Iterator operations = serviceElement.getChildrenWithName(new QName("operation"));
+		while(operations.hasNext()) {
+			OMElement operation = (OMElement)operations.next();
+			processOperation(serviceName, operation);
+		}
+	}
+	
+	
+	private void processOperation(String serviceName, OMElement operationElement) {
+		
+		String operationName = operationElement.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+		
+		Iterator params = operationElement.getChildrenWithName(new QName("parameter"));
+		while(params.hasNext()) {
+			
+			OMElement param = (OMElement)params.next();
+			
+			String name = param.getAttributeValue(new QName("http://org.apache.axis2.management.axisconfiguration", "name", "axis2"));
+			String value = param.getText();
+			
+			operationManager.editOperationParameter(serviceName, operationName, name, value);
+		}
+	}
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/admin/DMAdmin.java
===================================================================
--- management/src/org/apache/axis2/management/core/admin/DMAdmin.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/admin/DMAdmin.java	(working copy)
@@ -1,101 +1,104 @@
-package org.apache.axis2.management.core.admin;
-
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.management.core.managers.DynamicStatsManager;
-import org.apache.axis2.management.core.managers.GlobalManager;
-import org.apache.axis2.management.core.managers.ModuleManager;
-import org.apache.axis2.management.core.managers.OperationManager;
-import org.apache.axis2.management.core.managers.ServiceGroupManager;
-import org.apache.axis2.management.core.managers.ServiceManager;
-import org.apache.axis2.management.core.managers.TransportManager;
-import org.apache.axis2.management.core.utils.JMXUtil;
-import org.apache.axis2.management.interfaces.jmx.AxisGlobalsMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisModulesMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisOperationStatsMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisOperationsMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisServiceGroupsMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisServiceStatsMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisServicesMBean;
-import org.apache.axis2.management.interfaces.jmx.AxisTransportsMBean;
-import org.apache.axis2.management.interfaces.jmx.DynamicStatsManagerMBean;
-
-public class DMAdmin {
-
-	public void initManagement(ConfigurationContext configContext) {
-
-		System.out.println("Initiating management objects...");
-		
-		GlobalManager globalManager = new GlobalManager(configContext);
-		configContext.setProperty("global_manager", globalManager);
-		
-		ModuleManager moduleManager = new ModuleManager(configContext);
-		configContext.setProperty("module_manager", moduleManager);
-		
-		TransportManager transportManager = new TransportManager(configContext);
-		configContext.setProperty("transport_manager", transportManager);
-		
-		ServiceGroupManager serviceGroupManager = new ServiceGroupManager(configContext);
-		configContext.setProperty("servicegroup_manager", serviceGroupManager);
-		
-		ServiceManager serviceManager = new ServiceManager(configContext);
-		configContext.setProperty("service_manager", serviceManager);
-		
-		OperationManager operationManager = new OperationManager(configContext);
-		configContext.setProperty("operation_manager", operationManager);
-
-		DynamicStatsManager dynamicStatsManager = new DynamicStatsManager(configContext);
-		configContext.setProperty("dynamic_stats", dynamicStatsManager);
-		
-		System.out.println("Initiating management objects completed.");
-		
-		try {
-			initJMX(configContext);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	
-	public void initJMX(ConfigurationContext configContext) throws Exception {
-		
-		System.out.println("Initializing JMX interface...");
-		
-		JMXUtil jmxUtil = new JMXUtil();
-		
-		AxisGlobalsMBean axisGlobalsMBean = new AxisGlobalsMBean();
-		axisGlobalsMBean.init(configContext);
-		jmxUtil.registerMBean(axisGlobalsMBean, "Axis2:name=org.apache.axis2.management.AxisGlobalsMBean", "AxisGlobals");
-		
-		AxisModulesMBean axisModulesMBean = new AxisModulesMBean();
-		axisModulesMBean.init(configContext);
-		jmxUtil.registerMBean(axisModulesMBean, "Axis2:name=org.apache.axis2.management.AxisModulesMBean", "AxisModules");
-		
-		AxisTransportsMBean axisTransportsMBean = new AxisTransportsMBean();
-		axisTransportsMBean.init(configContext);
-		jmxUtil.registerMBean(axisTransportsMBean, "Axis2:name=org.apache.axis2.management.AxisTransportsMBean", "AxisTransports");
-		
-		AxisServiceGroupsMBean axisServiceGroupsMBean = new AxisServiceGroupsMBean();
-		axisServiceGroupsMBean.init(configContext);
-		jmxUtil.registerMBean(axisServiceGroupsMBean, "Axis2:name=org.apache.axis2.management.AxisServiceGroupsMBean", "AxisServiceGroups");
-		
-		AxisServicesMBean axisServicesMBean = new AxisServicesMBean();
-		axisServicesMBean.init(configContext);
-		jmxUtil.registerMBean(axisServicesMBean, "Axis2:name=org.apache.axis2.management.AxisServicesMBean", "AxisServices");
-		
-		AxisOperationsMBean axisOperationsMBean = new AxisOperationsMBean();
-		axisOperationsMBean.init(configContext);
-		jmxUtil.registerMBean(axisOperationsMBean, "Axis2:name=org.apache.axis2.management.AxisOperationsMBean", "AxisOperations");
-		
-		DynamicStatsManagerMBean dynamicStatsManagerMBean = new DynamicStatsManagerMBean();
-		dynamicStatsManagerMBean.init(configContext);
-		jmxUtil.registerMBean(dynamicStatsManagerMBean, "Axis2:name=org.apache.axis2.management.AxisGlbalStatsMBean", "AxisGlobalStats");
-		
-		AxisServiceStatsMBean axisServiceStatsMBean = new AxisServiceStatsMBean();
-		axisServiceStatsMBean.init(configContext);
-		jmxUtil.registerMBean(axisServiceStatsMBean, "Axis2:name=org.apache.axis2.management.AxisServiceStatsMBean", "AxisServiceStats");
-		
-		AxisOperationStatsMBean axisOperationStatsMBean = new AxisOperationStatsMBean();
-		axisOperationStatsMBean.init(configContext);
-		jmxUtil.registerMBean(axisOperationStatsMBean, "Axis2:name=org.apache.axis2.management.AxisOperationStatsMBean", "AxisOperationStats");	
-	}
+package org.apache.axis2.management.core.admin;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.AxisFault;
+
+import org.apache.axis2.management.core.utils.JMXUtil;
+import org.apache.axis2.management.core.managers.GlobalManager;
+import org.apache.axis2.management.core.managers.ModuleManager;
+import org.apache.axis2.management.core.managers.TransportManager;
+import org.apache.axis2.management.core.managers.ServiceGroupManager;
+import org.apache.axis2.management.core.managers.ServiceArchiveManager;
+import org.apache.axis2.management.core.managers.ModuleArchiveManager;
+import org.apache.axis2.management.core.managers.ServiceManager;
+import org.apache.axis2.management.core.managers.OperationManager;
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
+import org.apache.axis2.management.interfaces.jmx.*;
+
+public class DMAdmin {
+
+	public void initManagement(ConfigurationContext configContext) {
+
+		System.out.println("Initiating management objects...");
+		
+		GlobalManager globalManager = new GlobalManager(configContext);
+		configContext.setProperty("global_manager", globalManager);
+		
+		ModuleManager moduleManager = new ModuleManager(configContext);
+		configContext.setProperty("module_manager", moduleManager);
+		
+		TransportManager transportManager = new TransportManager(configContext);
+		configContext.setProperty("transport_manager", transportManager);
+		
+		ServiceGroupManager serviceGroupManager = new ServiceGroupManager(configContext);
+		configContext.setProperty("servicegroup_manager", serviceGroupManager);
+		
+		ServiceArchiveManager serviceArchiveManager = new ServiceArchiveManager(configContext);
+		configContext.setProperty("service_archive_manager", serviceArchiveManager);
+		
+		ModuleArchiveManager moduleArchiveManager = new ModuleArchiveManager(configContext);
+		configContext.setProperty("module_archive_manager", moduleArchiveManager);
+		
+		ServiceManager serviceManager = new ServiceManager(configContext);
+		configContext.setProperty("service_manager", serviceManager);
+		
+		OperationManager operationManager = new OperationManager(configContext);
+		configContext.setProperty("operation_manager", operationManager);
+
+		DynamicStatsManager dynamicStatsManager = new DynamicStatsManager(configContext);
+		configContext.setProperty("dynamic_stats", dynamicStatsManager);
+		
+		System.out.println("Initiating management objects completed.");
+		
+		try {
+			initJMX(configContext);
+		} catch(Exception e) {
+			e.printStackTrace();
+		}
+	}
+	
+	
+	public void initJMX(ConfigurationContext configContext) throws Exception {
+		
+		System.out.println("Initializing JMX interface...");
+		
+		JMXUtil jmxUtil = new JMXUtil();
+		
+		AxisGlobalsMBean axisGlobalsMBean = new AxisGlobalsMBean();
+		axisGlobalsMBean.init(configContext);
+		jmxUtil.registerMBean(axisGlobalsMBean, "Axis2:name=org.apache.axis2.management.AxisGlobalsMBean", "AxisGlobals");
+		
+		AxisModulesMBean axisModulesMBean = new AxisModulesMBean();
+		axisModulesMBean.init(configContext);
+		jmxUtil.registerMBean(axisModulesMBean, "Axis2:name=org.apache.axis2.management.AxisModulesMBean", "AxisModules");
+		
+		AxisTransportsMBean axisTransportsMBean = new AxisTransportsMBean();
+		axisTransportsMBean.init(configContext);
+		jmxUtil.registerMBean(axisTransportsMBean, "Axis2:name=org.apache.axis2.management.AxisTransportsMBean", "AxisTransports");
+		
+		AxisServiceGroupsMBean axisServiceGroupsMBean = new AxisServiceGroupsMBean();
+		axisServiceGroupsMBean.init(configContext);
+		jmxUtil.registerMBean(axisServiceGroupsMBean, "Axis2:name=org.apache.axis2.management.AxisServiceGroupsMBean", "AxisServiceGroups");
+		
+		AxisServicesMBean axisServicesMBean = new AxisServicesMBean();
+		axisServicesMBean.init(configContext);
+		jmxUtil.registerMBean(axisServicesMBean, "Axis2:name=org.apache.axis2.management.AxisServicesMBean", "AxisServices");
+		
+		AxisOperationsMBean axisOperationsMBean = new AxisOperationsMBean();
+		axisOperationsMBean.init(configContext);
+		jmxUtil.registerMBean(axisOperationsMBean, "Axis2:name=org.apache.axis2.management.AxisOperationsMBean", "AxisOperations");
+		
+		DynamicStatsManagerMBean dynamicStatsManagerMBean = new DynamicStatsManagerMBean();
+		dynamicStatsManagerMBean.init(configContext);
+		jmxUtil.registerMBean(dynamicStatsManagerMBean, "Axis2:name=org.apache.axis2.management.AxisGlbalStatsMBean", "AxisGlobalStats");
+		
+		AxisServiceStatsMBean axisServiceStatsMBean = new AxisServiceStatsMBean();
+		axisServiceStatsMBean.init(configContext);
+		jmxUtil.registerMBean(axisServiceStatsMBean, "Axis2:name=org.apache.axis2.management.AxisServiceStatsMBean", "AxisServiceStats");
+		
+		AxisOperationStatsMBean axisOperationStatsMBean = new AxisOperationStatsMBean();
+		axisOperationStatsMBean.init(configContext);
+		jmxUtil.registerMBean(axisOperationStatsMBean, "Axis2:name=org.apache.axis2.management.AxisOperationStatsMBean", "AxisOperationStats");	
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/ModuleManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/ModuleManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/ModuleManager.java	(working copy)
@@ -1,207 +1,211 @@
-package org.apache.axis2.management.core.managers;
-
-
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.description.AxisModule;
-import org.apache.axis2.description.AxisOperation;
-import org.apache.axis2.description.AxisService;
-import org.apache.axis2.description.Parameter;
-import org.apache.axis2.engine.AxisConfiguration;
-
-import javax.xml.namespace.QName;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-
-
-public class ModuleManager {
-
-
-	private ConfigurationContext configContext = null;
-	private AxisConfiguration axisConfig = null;	
-
-
-	public ModuleManager(ConfigurationContext configContext) {
-		this.configContext = configContext;
-		this.axisConfig = configContext.getAxisConfiguration();
-
-		System.out.println("BasicManager instantaited.");
-	}
-	
-	
-	public boolean isEngagedGlobally(String moduleName) {
-		
-		boolean result = false;
-		Collection engagedModuleCollection = axisConfig.getEngagedModules();
-		if(engagedModuleCollection.contains(new QName(moduleName))) {
-			result = true;
-		}
-		
-		return result;
-	}
-	
-	
-	public String[] getEngagedServices(String moduleName) {
-		
-		ArrayList engagedServicesList = new ArrayList();
-		
-		if(isEngagedGlobally(moduleName)) {
-			HashMap serviceMap = axisConfig.getServices();
-			if(serviceMap!=null && !serviceMap.isEmpty()) {
-				Collection serviceCollection = serviceMap.values();
-				
-				for(Iterator iterator=serviceCollection.iterator(); iterator.hasNext();) {
-					AxisService axisService = (AxisService)iterator.next();
-					Collection engagedModuleCollection = axisService.getEngagedModules();
-					for(Iterator serviceModuleIterator=engagedModuleCollection.iterator(); serviceModuleIterator.hasNext();){
-						AxisModule moduleDesc = (AxisModule)serviceModuleIterator.next();
-						QName axisModule = moduleDesc.getName();
-						if(axisModule.getLocalPart().equals(moduleName)) {
-							engagedServicesList.add(axisService.getName());
-						}
-					}
-				}
-			}
-		}
-		
-		String[] engagedServices = (String[])engagedServicesList.toArray(new String[engagedServicesList.size()]);
-		return engagedServices;
-	}
-	
-	
-	public String[] getEngagedOperations(String moduleName) {
-		
-		ArrayList engagedOperationsList = new ArrayList();
-		
-		HashMap serviceMap = axisConfig.getServices();
-		if(serviceMap!=null && !serviceMap.isEmpty()) {
-			Collection serviceCollection = serviceMap.values();
-			
-			for(Iterator iterator=serviceCollection.iterator(); iterator.hasNext();) {
-				AxisService axisService = (AxisService)iterator.next();
-				Collection engagedModuleCollection = axisService.getEngagedModules();
-				
-				boolean serviceLevel = false;
-				for(Iterator serviceModuleIterator=engagedModuleCollection.iterator(); serviceModuleIterator.hasNext();){
-					AxisModule moduleDesc = (AxisModule)serviceModuleIterator.next();
-					QName axisModule = moduleDesc.getName();
-					if(axisModule.getLocalPart().equals(moduleName)) {
-						serviceLevel = true;
-						break;
-					}
-				}
-				
-				if(!serviceLevel) {
-					// module is not engaged to this service.
-					// so find out if it is engaged to any operations
-					
-					Iterator operations = null;
-					
-					try {
-						operations = axisService.getOperations();
-					} catch(Exception e) {
-						e.printStackTrace();
-					}
-
-					if(operations != null) {
-
-						//Collection operationsCollection = operationsMap.values();
-
-						while(operations.hasNext()){
-							AxisOperation axisOperation = (AxisOperation)operations.next();
-							
-							Collection operationEngagedModules = axisOperation.getEngagedModules();
-							for(Iterator operationModuleIterator=operationEngagedModules.iterator(); operationModuleIterator.hasNext();){
-								AxisModule operationModuleDesc = (AxisModule)operationModuleIterator.next();
-								QName axisOperationModule = operationModuleDesc.getName();
-								if(axisOperationModule.getLocalPart().equals(moduleName)) {
-									engagedOperationsList.add(axisService.getName()+"."+axisOperation.getName().getLocalPart());
-								}
-							}
-						}
-					
-					}
-				}
-			}
-		}
-		
-		String[] engagedOperations = (String[])engagedOperationsList.toArray(new String[engagedOperationsList.size()]);
-		return engagedOperations;
-	}	
-
-
-	public String[] getModuleParameters(String moduleName) {
-
-		String[] paramters = null;
-
-		try{
-			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
-			ArrayList paramList = moduleDesc.getParameters();
-			paramters = new String[paramList.size()];
-
-			for (int i = 0; i < paramList.size(); i++) {
-				 Parameter parameter = (Parameter)paramList.get(i);
-				 paramters[i] = parameter.getName() + ":" + parameter.getValue();
-			 }
-
-		}catch(Exception e){
-			e.printStackTrace();
-		}
-
-		return paramters;
-	}
-
-
-	public boolean isModuleParameter(String moduleName, String paramName) {
-
-		Parameter parameter = null;
-
-		try {
-			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
-			parameter = moduleDesc.getParameter(paramName);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-
-		if(parameter == null)
-			return false;
-
-		return true;
-	}
-
-
-	public void addModuleParameter(String moduleName, String name, String value) {
-
-		try {
-			Parameter param = new Parameter(name, value);
-			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
-			moduleDesc.addParameter(param);
-		} catch(Exception e) {
-			e.printStackTrace();
-		}
-	}
-
-
-	public String editModuleParameter(String moduleName, String parameterName, String value) {
-
-		String info = "";
-
-		try{
-
-			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
-			Parameter parameter = moduleDesc.getParameter(parameterName);
-			if(parameter == null)
-				throw new Exception("Parameter: " + parameterName + " not found.");
-
-			parameter.setValue(value);
-			info = "Paramter changed successfully.";
-
-		}catch(Exception e){
-			info = e.getMessage();
-		}
-
-		return info;
-	}
-
+package org.apache.axis2.management.core.managers;
+
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.AxisFault;
+
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import javax.xml.namespace.QName;
+
+
+public class ModuleManager {
+
+
+	private ConfigurationContext configContext = null;
+	private AxisConfiguration axisConfig = null;
+
+
+	public ModuleManager(ConfigurationContext configContext) {
+		this.configContext = configContext;
+		this.axisConfig = configContext.getAxisConfiguration();
+
+		System.out.println("ModuleManager instantaited.");
+	}
+
+
+	public boolean isEngagedGlobally(String moduleName) {
+
+		boolean result = false;
+		Collection engagedModuleCollection = axisConfig.getEngagedModules();
+		if(engagedModuleCollection.contains(new QName(moduleName))) {
+			result = true;
+		}
+
+		return result;
+	}
+
+
+	public String[] getEngagedServices(String moduleName) {
+
+		ArrayList engagedServicesList = new ArrayList();
+
+		if(!isEngagedGlobally(moduleName)) {
+			HashMap serviceMap = axisConfig.getServices();
+			if(serviceMap!=null && !serviceMap.isEmpty()) {
+				Collection serviceCollection = serviceMap.values();
+
+				for(Iterator iterator=serviceCollection.iterator(); iterator.hasNext();) {
+					AxisService axisService = (AxisService)iterator.next();
+					Collection engagedModuleCollection = axisService.getEngagedModules();
+					for(Iterator serviceModuleIterator=engagedModuleCollection.iterator(); serviceModuleIterator.hasNext();){
+						AxisModule moduleDesc = (AxisModule)serviceModuleIterator.next();
+						QName axisModule = moduleDesc.getName();
+						if(axisModule.getLocalPart().equals(moduleName)) {
+							engagedServicesList.add(axisService.getName());
+						}
+					}
+				}
+			}
+		}
+
+		String[] engagedServices = (String[])engagedServicesList.toArray(new String[engagedServicesList.size()]);
+		return engagedServices;
+	}
+
+
+	public String[] getEngagedOperations(String moduleName) {
+
+		ArrayList engagedOperationsList = new ArrayList();
+
+		HashMap serviceMap = axisConfig.getServices();
+		if(serviceMap!=null && !serviceMap.isEmpty()) {
+			Collection serviceCollection = serviceMap.values();
+
+			for(Iterator iterator=serviceCollection.iterator(); iterator.hasNext();) {
+				AxisService axisService = (AxisService)iterator.next();
+				Collection engagedModuleCollection = axisService.getEngagedModules();
+
+				boolean serviceLevel = false;
+				for(Iterator serviceModuleIterator=engagedModuleCollection.iterator(); serviceModuleIterator.hasNext();){
+					AxisModule moduleDesc = (AxisModule)serviceModuleIterator.next();
+					QName axisModule = moduleDesc.getName();
+					if(axisModule.getLocalPart().equals(moduleName)) {
+						serviceLevel = true;
+						break;
+					}
+				}
+
+				if(!serviceLevel) {
+					// module is not engaged to this service.
+					// so find out if it is engaged to any operations
+
+					Iterator operations = null;
+
+					try {
+						operations = axisService.getOperations();
+					} catch(Exception e) {
+						e.printStackTrace();
+					}
+
+					if(operations != null) {
+
+						//Collection operationsCollection = operationsMap.values();
+
+						while(operations.hasNext()){
+							AxisOperation axisOperation = (AxisOperation)operations.next();
+
+							Collection operationEngagedModules = axisOperation.getEngagedModules();
+							for(Iterator operationModuleIterator=operationEngagedModules.iterator(); operationModuleIterator.hasNext();){
+								AxisModule operationModuleDesc = (AxisModule)operationModuleIterator.next();
+								QName axisOperationModule = operationModuleDesc.getName();
+								if(axisOperationModule.getLocalPart().equals(moduleName)) {
+									engagedOperationsList.add(axisService.getName()+"."+axisOperation.getName().getLocalPart());
+								}
+							}
+						}
+
+					}
+				}
+			}
+		}
+
+		String[] engagedOperations = (String[])engagedOperationsList.toArray(new String[engagedOperationsList.size()]);
+		return engagedOperations;
+	}
+
+
+	public String[] getModuleParameters(String moduleName) {
+
+		String[] paramters = null;
+
+		try{
+			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
+			ArrayList paramList = moduleDesc.getParameters();
+			paramters = new String[paramList.size()];
+
+			for (int i = 0; i < paramList.size(); i++) {
+				 Parameter parameter = (Parameter)paramList.get(i);
+				 paramters[i] = parameter.getName() + ":" + parameter.getValue();
+			 }
+
+		}catch(Exception e){
+			e.printStackTrace();
+		}
+
+		return paramters;
+	}
+
+
+	public boolean isModuleParameter(String moduleName, String paramName) {
+
+		Parameter parameter = null;
+
+		try {
+			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
+			parameter = moduleDesc.getParameter(paramName);
+		} catch(Exception e) {
+			e.printStackTrace();
+		}
+
+		if(parameter == null)
+			return false;
+
+		return true;
+	}
+
+
+	public void addModuleParameter(String moduleName, String name, String value) {
+
+		try {
+			Parameter param = new Parameter(name, value);
+			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
+			moduleDesc.addParameter(param);
+		} catch(Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+
+	public String editModuleParameter(String moduleName, String parameterName, String value) {
+
+		String info = "";
+
+		try{
+
+			AxisModule moduleDesc = axisConfig.getModule(new QName(moduleName));
+			Parameter parameter = moduleDesc.getParameter(parameterName);
+			if(parameter == null)
+				throw new Exception("Parameter: " + parameterName + " not found.");
+
+			parameter.setValue(value);
+			info = "Paramter changed successfully.";
+
+		}catch(Exception e){
+			info = e.getMessage();
+		}
+
+		return info;
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/ModuleArchiveManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/ModuleArchiveManager.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/managers/ModuleArchiveManager.java	(revision 0)
@@ -0,0 +1,279 @@
+package org.apache.axis2.management.core.managers;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisServiceGroup;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.description.TransportOutDescription;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.description.Flow;
+import org.apache.axis2.description.HandlerDescription;
+import org.apache.axis2.deployment.DeploymentEngine;
+import org.apache.axis2.deployment.util.PhasesInfo;
+import org.apache.axis2.modules.Module;
+import org.apache.axis2.engine.Phase;
+
+import java.io.*;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.security.AccessController;
+
+import javax.xml.namespace.QName;
+
+
+public class ModuleArchiveManager {
+	
+	HashMap archiveData = new HashMap();
+	
+	private ConfigurationContext configContext = null;
+	private AxisConfiguration axisConfig = null;
+	
+	
+	public ModuleArchiveManager(ConfigurationContext configContext) {
+		this.configContext = configContext;
+		this.axisConfig = configContext.getAxisConfiguration();
+		
+		System.out.println("ArchiveManager instantaited.");
+	}
+	
+	
+	public String[] getModuleArchiveNames() {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		System.out.println(folderName + "\\modules");
+		
+		File root = new File(folderName + "\\modules");
+		File[] files = root.listFiles();
+		
+		ArrayList marList = new ArrayList();
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(!file.isDirectory()) {
+					System.out.println(file.getName());
+					marList.add(file.getName());
+				}
+			}
+		}
+		
+		return (String[])marList.toArray(new String[marList.size()]);
+	}
+	
+	
+	public File getModuleArchive(String moduleArchiveName) throws Exception {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		
+		File root = new File(folderName + "\\modules");
+		
+		try {
+			String file = root + "\\" + moduleArchiveName;
+			System.out.println("Checking read permissions for file: " + file);
+			FilePermission perm = new FilePermission(file, "read");
+			AccessController.checkPermission(perm);
+		} catch(Exception e) {
+			System.out.println(e.getMessage());
+		}
+		
+		File[] files = root.listFiles();
+		
+		File archive = null;
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(file.getName().equals(moduleArchiveName)) {
+					System.out.println("Found archive: " + file.getName());
+					archive = file;
+					System.out.println("FILE: " + file.getPath());
+					break;
+				}
+			}
+		}
+		
+		return archive;
+	}
+	
+	
+	public long getLastModified(String moduleArchiveName) {
+		
+		long archiveLastModified = getArchiveLastModified(moduleArchiveName);
+		
+		ArchiveManagementData data = (ArchiveManagementData)archiveData.get(moduleArchiveName);
+		if(data != null) {
+			if(data.archiveLastModified != archiveLastModified) {
+				data.assignedLastModified = archiveLastModified;
+				data.archiveLastModified = archiveLastModified;
+			}
+			
+			return data.assignedLastModified;
+		}
+		
+		return archiveLastModified;
+	}
+	
+	
+	private long getArchiveLastModified(String moduleArchiveName) {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		
+		File root = new File(folderName + "\\modules");
+		File[] files = root.listFiles();
+		
+		File archive = null;
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(file.getName().equals(moduleArchiveName)) {
+					System.out.println("Found archive: " + file.getName());
+					archive = file;
+					break;
+				}
+			}
+		}
+		
+		return archive.lastModified();
+	}
+	
+	
+	public long getSize(String moduleArchiveName) {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		
+		File root = new File(folderName + "\\modules");
+		File[] files = root.listFiles();
+		
+		File archive = null;
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(file.getName().equals(moduleArchiveName)) {
+					System.out.println("Found archive: " + file.getName());
+					archive = file;
+					break;
+				}
+			}
+		}
+		
+		return archive.length();
+	}
+	
+	
+	public void setModuleArchive(String name, String localFileName) throws Exception {
+		
+		File file = new File(localFileName);
+		BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(localFileName));
+		setModuleArchive(name, inputStream);
+	}
+	
+	public void setModuleArchive(String name, BufferedInputStream dataStream) throws Exception {
+		
+		if(dataStream == null)
+			System.out.println("NULL INPUT");
+		else
+			System.out.println("NOT NULL INPUT");
+		
+		String folderName = axisConfig.getRepository().getPath() + "\\modules\\";
+		System.out.println("FOLDER: " + folderName);
+		
+		FileOutputStream out = new FileOutputStream(folderName + name);
+		System.out.println("Stream created.");
+		System.out.println("Policy file: " + (String)System.getProperty("java.security.policy"));
+		
+		int data = 0;
+		while((data = dataStream.read()) != -1) {
+			out.write(data);
+		}
+		System.out.println("Data wrote.");
+		
+		out.close();
+		System.out.println("Stream closed.");
+		
+		DeploymentEngine deployment = new DeploymentEngine();
+		AxisModule newModule = deployment.buildModule(new File(folderName + name), axisConfig);
+		axisConfig.addModule(newModule);
+		
+		Module module = newModule.getModule();
+		module.init(configContext, newModule);
+		
+		/* Test Area */
+		/*
+		 PhasesInfo phasesInfo = axisConfig.getPhasesInfo();
+		 ArrayList inPhases = phasesInfo.getINPhases();
+		 for(int i=0; i<inPhases.size(); i++) {
+		 Phase inPhase = (Phase)inPhases.get(i);
+		 System.out.println(inPhase.toString());
+		 
+		 if("monitorPhase".equals(inPhase.toString()) {
+		 
+		 }
+		 }
+		 
+		 Phase newPhase = new Phase("testPhase");
+		 inPhases.add(newPhase);
+		 
+		 ArrayList outPhases = phasesInfo.getOUTPhases();
+		 for(int i=0; i<outPhases.size(); i++) {
+		 Phase outPhase = (Phase)outPhases.get(i);
+		 System.out.println(outPhase.toString());
+		 }
+		 
+		 AxisModule managementModule = axisConfig.getModule(new QName("management"));
+		 Flow inFlow = managementModule.getInFlow();
+		 for(int i=0; i<inFlow.getHandlerCount(); i++) {
+		 HandlerDescription handler = inFlow.getHandler(i);
+		 System.out.println(handler.getName().getLocalPart());
+		 }
+		 */
+		
+	}
+	
+	
+	public void setLastModified(String moduleArchiveName, long modTime) {
+		
+		ArchiveManagementData data = (ArchiveManagementData)archiveData.get(moduleArchiveName);
+		if(data == null) {
+			data = new ArchiveManagementData();
+			archiveData.put(moduleArchiveName, data);
+		}
+		
+		
+		/*
+		 String folderName = axisConfig.getRepository().getPath();
+		 
+		 File root = new File(folderName + "\\modules");
+		 File[] files = root.listFiles();
+		 
+		 File archive = null;
+		 if (files != null) {
+		 for (int i=0; i<files.length; i++) {
+		 File file = files[i];
+		 
+		 if(file.getName().equals(moduleArchiveName)) {
+		 System.out.println("Found archive: " + file.getName());
+		 archive = file;
+		 break;
+		 }
+		 }
+		 }
+		 
+		 archive.setLastModified(modTime);
+		 */
+		
+		
+		data.assignedLastModified = modTime;
+		data.archiveLastModified = getArchiveLastModified(moduleArchiveName);
+	}
+	
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/TransportManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/TransportManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/TransportManager.java	(working copy)
@@ -2,15 +2,21 @@
 
 
 import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.description.Parameter;
+import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.description.TransportInDescription;
 import org.apache.axis2.description.TransportOutDescription;
-import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.Parameter;
 
-import javax.xml.namespace.QName;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
 import java.util.ArrayList;
+import java.util.Iterator;
 
+import javax.xml.namespace.QName;
 
+
 public class TransportManager {
 
 
Index: management/src/org/apache/axis2/management/core/managers/ServiceGroupManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/ServiceGroupManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/ServiceGroupManager.java	(working copy)
@@ -2,14 +2,21 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisServiceGroup;
 import org.apache.axis2.description.AxisService;
-import org.apache.axis2.description.AxisServiceGroup;
-import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.Parameter;
 
-import javax.xml.namespace.QName;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
 import java.util.ArrayList;
 import java.util.Iterator;
 
+import javax.xml.namespace.QName;
+
 public class ServiceGroupManager {
 
 
@@ -23,8 +30,82 @@
 
 		System.out.println("ServiceGroupManager instantaited.");
 	}
-	
-	
+
+
+	public String[] getServiceGroupParameters(String serviceGroupName){
+
+			String[] paramters = null;
+
+			try{
+				AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
+				ArrayList paramList = axisServiceGroup.getParameters();
+				paramters = new String[paramList.size()];
+
+				for (int i = 0; i < paramList.size(); i++) {
+					 Parameter parameter = (Parameter)paramList.get(i);
+					 paramters[i] = parameter.getName() + ":" + parameter.getValue();
+				 }
+
+			}catch(Exception e){
+				e.printStackTrace();
+			}
+
+			return paramters;
+	}
+
+
+	public boolean isServiceGroupParameter(String serviceGroupName, String paramName) {
+
+			Parameter parameter = null;
+
+			try {
+				AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
+				parameter = axisServiceGroup.getParameter(paramName);
+			} catch(Exception e) {
+				e.printStackTrace();
+			}
+
+			if(parameter == null)
+				return false;
+
+			return true;
+		}
+
+
+		public void addServiceGroupParameter(String serviceGroupName, String name, String value) {
+
+			try {
+				Parameter param = new Parameter(name, value);
+				AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
+				axisServiceGroup.addParameter(param);
+			} catch(Exception e) {
+				e.printStackTrace();
+			}
+		}
+
+
+		public String editServiceGroupParameter(String serviceGroupName, String parameterName, String value) {
+
+			String info = "";
+
+			try{
+
+				AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
+				Parameter parameter = axisServiceGroup.getParameter(parameterName);
+				if(parameter == null)
+					throw new Exception("Parameter: " + parameterName + " not found.");
+
+				parameter.setValue(value);
+				info = "Parameter changed successfully.";
+
+			}catch(Exception e){
+				info = e.getMessage();
+			}
+
+			return info;
+	}
+
+
 	public String[] getServices(String serviceGroupName) {
 
 		String[] services = null;
@@ -44,15 +125,15 @@
 		return services;
 	}
 
-	
+
 	// Modules
-	
+
 	public String[] getServiceGroupEngagedModules(String serviceGroupName) {
-		
+
 		AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
 		ArrayList engagedModulesList = axisServiceGroup.getEngagedModules();
 		String[] engagedModules = null;
-		
+
 		if(engagedModulesList != null) {
 			engagedModules = new String[engagedModulesList.size()];
 			for(int i=0; i<engagedModulesList.size(); i++) {
@@ -60,19 +141,19 @@
 				engagedModules[i] = module.getLocalPart();
 			}
 		}
-		
+
 		return engagedModules;
 	}
-	
-	
+
+
 	public String engageModuleToServiceGroup(String moduleName, String serviceGroupName) {
-		
+
 		String info = "";
 
 		if ( moduleName != null && serviceGroupName != null) {
 
 			try {
-				
+
 				AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
 				axisServiceGroup.engageModule(axisConfig.getModule(new QName(moduleName)));
 				info = "Module " + moduleName + " is successfully engaged to the ServiceGroup " + serviceGroupName;
@@ -85,4 +166,33 @@
 		return info;
 
 	}
+
+
+	public String disengageModuleFromServiceGroup(String moduleName, String serviceGroupName) {
+
+			String info = "";
+
+			if ( moduleName != null && serviceGroupName != null) {
+
+				try {
+
+					AxisModule module = axisConfig.getModule(new QName(moduleName));
+					AxisServiceGroup axisServiceGroup = axisConfig.getServiceGroup(serviceGroupName);
+
+					// module disengagement not implemented yet. so disengage from all services.
+					Iterator services = axisServiceGroup.getServices();
+					while(services.hasNext()) {
+					    AxisService service = (AxisService)services.next();
+					    service.disEngageModule(module);
+					}
+
+					info = "Module " + moduleName + " is successfully engaged to the ServiceGroup " + serviceGroupName;
+
+				} catch (Exception e) {
+					info = "Failed to engage the module " + moduleName + " to the ServiceGroup " + serviceGroupName + "\n" + e.getMessage();
+				}
+	      	}
+
+			return info;
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/ArchiveManagementData.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/ArchiveManagementData.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/managers/ArchiveManagementData.java	(revision 0)
@@ -0,0 +1,10 @@
+
+package org.apache.axis2.management.core.managers;
+
+
+public class ArchiveManagementData {
+	
+	public long assignedLastModified = 0;
+	public long archiveLastModified = 0;
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/GlobalManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/GlobalManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/GlobalManager.java	(working copy)
@@ -2,28 +2,29 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.description.AxisModule;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.AxisServiceGroup;
-import org.apache.axis2.description.Parameter;
 import org.apache.axis2.description.TransportInDescription;
 import org.apache.axis2.description.TransportOutDescription;
-import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.Parameter;
 
-import javax.xml.namespace.QName;
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Hashtable;
+import java.util.Collection;
+import java.util.ArrayList;
 import java.util.Iterator;
 
+import javax.xml.namespace.QName;
 
+
 public class GlobalManager {
 
 
 	private ConfigurationContext configContext = null;
-	private AxisConfiguration axisConfig = null;	
+	private AxisConfiguration axisConfig = null;
 
 
 	public GlobalManager(ConfigurationContext configContext) {
@@ -34,6 +35,26 @@
 	}
 
 
+	public ArrayList getFilePaths() {
+	    return (ArrayList)configContext.getProperty("file_paths");
+	}
+
+
+	public void setFilePaths(ArrayList filePaths) {
+		configContext.setProperty("file_paths", filePaths);
+	}
+
+
+	public ArrayList getResourceERPs() {
+	    return (ArrayList)configContext.getProperty("resource_erps");
+	}
+
+
+	public void setResourceERPs(ArrayList resourceERPs) {
+		configContext.setProperty("resource_erps", resourceERPs);
+	}
+
+
 	public boolean isGlobalParameter(String paramName) {
 
 		Parameter parameter = null;
@@ -84,6 +105,8 @@
 
 	public String editGlobalParameter(String name, String value) {
 
+		System.out.println("Inside editGlobalParameter...");
+
 		String info = "";
 
 		try{
@@ -91,6 +114,7 @@
 			if(parameter == null)
 				throw new Exception("Parameter: " + name + " not found.");
 
+			System.out.println("Parameter is not null.");
 			parameter.setValue(value);
 			info = "Parameter changed successfully.";
 		}catch(Exception e){
@@ -99,10 +123,10 @@
 
 		return info;
 	}
-	
-	
+
+
 	// Services
-	
+
 	public String[] getServices() {
 
 		String[] services = null;
@@ -127,7 +151,7 @@
 		return services;
 	}
 
-	
+
 	public String[] getFaultyServices() {
 
 		String[] faultyServices = null;
@@ -179,10 +203,10 @@
 
 		return info;
 	}
-	
-	
+
+
 	// ServiceGroups
-	
+
 	public String[] getServiceGroups() {
 
 		String[] serviceGroups = null;
@@ -200,10 +224,21 @@
 		serviceGroups = (String[])serviceGroupsList.toArray(new String[serviceGroupsList.size()]);
 		return serviceGroups;
 	}
-	
-	
+
+
+	public boolean isServiceGroupAvailable(String serviceGroupName) {
+
+		AxisServiceGroup serviceGroup = null;
+		serviceGroup = axisConfig.getServiceGroup(serviceGroupName);
+		if(serviceGroup == null)
+			return false;
+
+		return true;
+	}
+
+
 	// Modules
-	
+
 	public boolean isModuleAvailable(String moduleName) {
 
 		AxisModule module = null;
@@ -287,8 +322,8 @@
 
 		return modules;
 	}
-	
-	
+
+
 	public String engageModuleGlobally(String moduleName) {
 
 		String info = "";
@@ -296,17 +331,36 @@
 		try{
 			axisConfig.engageModule(new QName(moduleName));
 			info = "Module: " + moduleName + " globally enagaged successfully.";
+			System.out.println(info);
 		}
 		catch(AxisFault axisFault){
 			info = "Module: " + moduleName + " failed to engage globally.\n" + axisFault.getMessage();
+			System.out.println(info);
 		}
 
 		return info;
 	}
 
-	
+
+	public String disengageModuleGlobally(String moduleName) {
+
+			String info = "";
+
+			try{
+				AxisModule module = axisConfig.getModule(new QName(moduleName));
+				axisConfig.disEngageModule(module);
+				info = "Module: " + moduleName + " globally disenagaged successfully.";
+			}
+			catch(Exception e){
+				info = "Module: " + moduleName + " failed to disengage globally.\n" + e.getMessage();
+			}
+
+			return info;
+	}
+
+
 	// Transports
-	
+
 	public String[] getTransportIns(){
 
 		String[] transportIns = null;
Index: management/src/org/apache/axis2/management/core/managers/OperationManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/OperationManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/OperationManager.java	(working copy)
@@ -2,18 +2,22 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.AxisOperation;
-import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.Parameter;
-import org.apache.axis2.engine.AxisConfiguration;
 
-import javax.xml.namespace.QName;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Iterator;
 
+import javax.xml.namespace.QName;
 
+
 public class OperationManager {
 
 
@@ -27,8 +31,8 @@
 
 		System.out.println("OperationManager instantaited.");
 	}
-	
 
+
 	public String[] getOperationParameters(String serviceName, String operationName){
 
 		String[] paramters = null;
@@ -55,7 +59,7 @@
 	public boolean isOperationParameter(String serviceName, String operationName, String paramName) {
 
 		Parameter parameter = null;
-		
+
 		try {
 			AxisService axisService = axisConfig.getService(serviceName);
 			AxisOperation axisOperation = axisService.getOperation(new QName(operationName));
@@ -72,7 +76,7 @@
 
 
 	public void addOperationParameter(String serviceName, String operationName, String name, String value) {
-		
+
 		try {
 			Parameter param = new Parameter(name, value);
 			AxisService axisService = axisConfig.getService(serviceName);
@@ -106,9 +110,9 @@
 		return info;
 	}
 
-	
+
 	// Modules
-	
+
 	public String[] getOperationEngagedModules(String serviceName, String opName) {
 
 		String[] modules = null;
@@ -139,8 +143,8 @@
 
 		return modules;
 	}
-	
-	
+
+
 	public String engageModuleToOperation(String moduleName, String serviceName, String operationName) {
 
 		String info = "";
@@ -160,7 +164,27 @@
 		return info;
 	}
 
+
+	public String disengageModuleFromOperation(String moduleName, String serviceName, String operationName) {
+
+			String info = "";
+
+			if ( moduleName != null && serviceName != null && operationName != null) {
+				try {
+					AxisOperation operation = axisConfig.getService(serviceName).getOperation(new QName(operationName));
+					AxisModule module = axisConfig.getModule(new QName(moduleName));
+					operation.disEngageModule(module);
+
+					info = moduleName + " module disengaged from the operation Successfully";
+
+				} catch (AxisFault axisFault) {
+					info = info = "Failed to disengage the module " + moduleName + " from the operation " + operationName + "\n" + axisFault.getMessage();
+				}
+			}
+
+			return info;
+	}
+
 }
 
 
-	
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/ServiceManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/ServiceManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/ServiceManager.java	(working copy)
@@ -2,17 +2,21 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisModule;
-import org.apache.axis2.description.AxisOperation;
-import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.Parameter;
-import org.apache.axis2.engine.AxisConfiguration;
 
-import javax.xml.namespace.QName;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Iterator;
 
+import javax.xml.namespace.QName;
+
 public class ServiceManager {
 
 
@@ -100,10 +104,10 @@
 
 		return info;
 	}
-	
-	
+
+
 	// Operations
-	
+
 	public String[] getOperations(String serviceName) {
 
 		Iterator operations = null;
@@ -124,8 +128,8 @@
 
 		return (String[])operationsList.toArray(new String[operationsList.size()]);
 	}
-	
-	
+
+
 	public boolean isOperationAvailable(String serviceName, String operationName) {
 
 		AxisService service = null;
@@ -143,10 +147,10 @@
 
 		return true;
 	}
-	
-	
+
+
 	// Modules
-	
+
 	public String[] getServiceEngagedModules(String serviceName) {
 
 		String[] modules = null;
@@ -176,8 +180,8 @@
 
 		return modules;
 	}
-	
-	
+
+
 	public String engageModuleToService(String moduleName, String serviceName) {
 
 		String info = "";
@@ -197,4 +201,24 @@
 		return info;
 	}
 
+
+	public String disengageModuleFromService(String moduleName, String serviceName) {
+
+			String info = "";
+
+			if ( moduleName != null && serviceName != null) {
+
+				try {
+					AxisModule module = axisConfig.getModule(new QName(moduleName));
+					axisConfig.getService(serviceName).disEngageModule(module);
+					info = "Module " + moduleName + " is successfully disengaged from the service " + serviceName;
+
+				} catch (AxisFault axisFault) {
+					info = "Failed to disengage the module " + moduleName + " from the service " + serviceName + "\n" + axisFault.getMessage();
+				}
+	      		  }
+
+			return info;
+	}
+
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/ServiceArchiveManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/ServiceArchiveManager.java	(revision 0)
+++ management/src/org/apache/axis2/management/core/managers/ServiceArchiveManager.java	(revision 0)
@@ -0,0 +1,247 @@
+package org.apache.axis2.management.core.managers;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisServiceGroup;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.description.TransportOutDescription;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.deployment.DeploymentConstants;
+import org.apache.axis2.deployment.DeploymentEngine;
+import org.apache.axis2.deployment.repository.util.WSInfoList;
+import org.apache.axis2.engine.Phase;
+
+import java.io.*;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import javax.xml.namespace.QName;
+
+
+public class ServiceArchiveManager implements DeploymentConstants {
+	
+	HashMap archiveData = new HashMap();
+	
+	private ConfigurationContext configContext = null;
+	private AxisConfiguration axisConfig = null;
+	
+	
+	public ServiceArchiveManager(ConfigurationContext configContext) {
+		this.configContext = configContext;
+		this.axisConfig = configContext.getAxisConfiguration();
+		
+		System.out.println("ArchiveManager instantaited.");
+	}
+	
+	
+	public String[] getServiceArchiveNames() {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		System.out.println(folderName + "\\services");
+		
+		File root = new File(folderName + "\\services");
+		File[] files = root.listFiles();
+		
+		ArrayList aarList = new ArrayList();
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(!file.isDirectory()) {
+					System.out.println(file.getName());
+					aarList.add(file.getName());
+				}
+			}
+		}
+		
+		ArrayList inPhaseList = axisConfig.getGlobalInFlow();
+		for(int i=0; i<inPhaseList.size(); i++) {
+			Phase phase = (Phase)inPhaseList.get(i);
+			System.out.println("In phase name: " + phase.toString());
+		}
+		
+		ArrayList outPhaseList = axisConfig.getGlobalOutPhases();
+		for(int i=0; i<outPhaseList.size(); i++) {
+			Phase phase = (Phase)outPhaseList.get(i);
+			System.out.println("Out phase name: " + phase.toString());
+		}
+		
+		
+		return (String[])aarList.toArray(new String[aarList.size()]);
+	}
+	
+	
+	public File getServiceArchive(String serviceArchiveName) {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		
+		File root = new File(folderName + "\\services");
+		File[] files = root.listFiles();
+		
+		File archive = null;
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(file.getName().equals(serviceArchiveName)) {
+					System.out.println("Found archive: " + file.getName());
+					archive = file;
+					break;
+				}
+			}
+		}
+		
+		return archive;
+	}
+	
+	
+	public long getLastModified(String serviceArchiveName) {
+		
+		long archiveLastModified = getArchiveLastModified(serviceArchiveName);
+		
+		ArchiveManagementData data = (ArchiveManagementData)archiveData.get(serviceArchiveName);
+		if(data != null) {
+			if(data.archiveLastModified != archiveLastModified) {
+				data.assignedLastModified = archiveLastModified;
+				data.archiveLastModified = archiveLastModified;
+			}
+			
+			return data.assignedLastModified;
+		}
+		
+		return archiveLastModified;
+	}
+	
+	
+	private long getArchiveLastModified(String serviceArchiveName) {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		
+		File root = new File(folderName + "\\services");
+		File[] files = root.listFiles();
+		
+		File archive = null;
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(file.getName().equals(serviceArchiveName)) {
+					System.out.println("Found archive: " + file.getName());
+					archive = file;
+					break;
+				}
+			}
+		}
+		
+		return archive.lastModified();
+	}
+	
+	
+	public long getSize(String serviceArchiveName) {
+		
+		String folderName = axisConfig.getRepository().getPath();
+		
+		File root = new File(folderName + "\\services");
+		File[] files = root.listFiles();
+		
+		File archive = null;
+		if (files != null) {
+			for (int i=0; i<files.length; i++) {
+				File file = files[i];
+				
+				if(file.getName().equals(serviceArchiveName)) {
+					System.out.println("Found archive: " + file.getName());
+					archive = file;
+					break;
+				}
+			}
+		}
+		
+		return archive.length();
+	}
+	
+	
+	public void setServiceArchive(String name, String localFileName) throws Exception {
+		
+		BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(localFileName));
+		setServiceArchive(name, inputStream);
+	}
+	
+	
+	public void setServiceArchive(String name, BufferedInputStream dataStream) throws Exception {
+		
+		System.out.println("Inside setServiceArchive.");
+		String folderName = axisConfig.getRepository().getPath() + "\\" + "services"  + "\\";
+		System.out.println("Path: " + folderName);
+		
+		FileOutputStream out = new FileOutputStream(folderName + name);
+		
+		int data = 0;
+		while((data = dataStream.read()) != -1) {
+			out.write(data);
+		}
+		
+		out.close();
+		
+		/*
+		 System.out.println("New version.");
+		 DeploymentEngine deployer = new DeploymentEngine();
+		 System.out.println("Deployement data - HotUpdate: " + deployer.isHotUpdate());
+		 WSInfoList wsInfoList = new WSInfoList(deployer);
+		 System.out.println("Constructed WSInfoList.");
+		 wsInfoList.init();
+		 wsInfoList.addWSInfoItem(new File(folderName+name), TYPE_SERVICE);
+		 System.out.println("Added new service.");
+		 wsInfoList.update();
+		 System.out.println("Updated.");
+		 deployer.doDeploy();
+		 */
+	}
+	
+	
+	public void setLastModified(String serviceArchiveName, long modTime) {
+		
+		ArchiveManagementData data = (ArchiveManagementData)archiveData.get(serviceArchiveName);
+		if(data == null) {
+			data = new ArchiveManagementData();
+			archiveData.put(serviceArchiveName, data);
+		}
+		
+		/*
+		 String folderName = axisConfig.getRepository().getPath();
+		 
+		 File root = new File(folderName + "\\services");
+		 File[] files = root.listFiles();
+		 
+		 File archive = null;
+		 if (files != null) {
+		 for (int i=0; i<files.length; i++) {
+		 File file = files[i];
+		 
+		 if(file.getName().equals(serviceArchiveName)) {
+		 System.out.println("Found archive: " + file.getName());
+		 archive = file;
+		 break;
+		 }
+		 }
+		 }
+		 
+		 System.out.println("Archive: " + serviceArchiveName + "   Last modified: " + modTime);
+		 boolean done = archive.setLastModified(modTime);
+		 */
+		
+		
+		
+		data.assignedLastModified = modTime;
+		data.archiveLastModified = getArchiveLastModified(serviceArchiveName);
+	}
+	
+	
+}
\ No newline at end of file
Index: management/src/org/apache/axis2/management/core/managers/DynamicStatsManager.java
===================================================================
--- management/src/org/apache/axis2/management/core/managers/DynamicStatsManager.java	(revision 405641)
+++ management/src/org/apache/axis2/management/core/managers/DynamicStatsManager.java	(working copy)
@@ -1,153 +1,167 @@
-package org.apache.axis2.management.core.managers;
-
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.context.MessageContext;
-import org.apache.axis2.engine.AxisConfiguration;
-import org.apache.axis2.management.core.utils.ServiceStats;
-
-import java.util.HashMap;
-
-
-public class DynamicStatsManager {
-
-
-	private ConfigurationContext configContext = null;
-	private AxisConfiguration axisConfig = null;
-
-	private HashMap serviceStatsMap = null;
-	private int inMessages = 0;
-	private int outMessages = 0;
-	private int inFaultMessages = 0;
-	private int outFaultMessages = 0;
-
-
-	public DynamicStatsManager(ConfigurationContext configContext) {
-		this.configContext = configContext;
-		this.axisConfig = configContext.getAxisConfiguration();
-
-		serviceStatsMap = new HashMap();
-
-		System.out.println("DynamicStatsManager instantaited.");
-	}
-
-
-	public void updateStats(MessageContext msgContext) {
-		
-		System.out.println("NOTIFYING S1");
-		
-		if(msgContext != null) {
-		
-			// monitor global requests
-			if(msgContext.getFLOW() == MessageContext.IN_FLOW) {
-				System.out.println("IN MESSAGE");
-				inMessages++;
-				
-				if(msgContext.isProcessingFault()) {
-					inFaultMessages++;
-					System.out.println("FAULT");
-				}
-			} else if(msgContext.getFLOW() == MessageContext.OUT_FLOW) {
-				System.out.println("OUT MESSAGE");
-				outMessages++;
-				
-				if(msgContext.isProcessingFault()) {
-					outFaultMessages++;
-					System.out.println("FAULT");
-				}
-			} 
-	
-			// monitor service level requests
-			String serviceName = msgContext.getAxisService().getName();
-			System.out.println("NOTIFYING S3");
-			ServiceStats serviceStats = (ServiceStats)serviceStatsMap.get(serviceName);
-			System.out.println("NOTIFYING S4");
-			if(serviceStats != null) {
-				serviceStats.updateStats(msgContext);
-			}
-		}
-	}
-
-
-	public int getInMessages() {
-		return inMessages;
-	}
-	
-
-	public void clearInMessages() {
-		inMessages = 0;
-	}
-	
-	
-	public int getOutMessages() {
-		return outMessages;
-	}
-	
-
-	public void clearOutMessages() {
-		outMessages = 0;
-	}
-	
-	
-	public int getFaultInMessages() {
-		return inFaultMessages;
-	}
-	
-
-	public void clearFaultInMessages() {
-		inFaultMessages = 0;
-	}
-	
-	
-	public int getFaultOutMessages() {
-		return outFaultMessages;
-	}
-	
-
-	public void clearFaultOutMessages() {
-		outFaultMessages = 0;
-	}
-	
-	
-	public HashMap getMonitoredServices() {
-		return serviceStatsMap;
-	}
-
-
-	public void setServiceToMonitor(String serviceName) {
-		
-		System.out.println("INFO: Setting service to monitor.");
-		ServiceStats serviceStats = new ServiceStats();
-
-		if(!serviceStatsMap.containsKey(serviceName)) {
-			System.out.println("INFO: Service not already monitoring.");
-			serviceStatsMap.put(serviceName, serviceStats);
-		}	
-	}
-
-	
-	public ServiceStats getMonitoredService(String serviceName) throws AxisFault {
-		
-		System.out.println("INFO: Getting monitored service.");
-		
-		ServiceStats serviceStats = (ServiceStats)serviceStatsMap.get(serviceName);
-
-		if(serviceStats == null) {
-			System.out.println("INFO: Service Not monitored.");
-			throw new AxisFault("Service not monitored.");
-		} 
-
-		return serviceStats;
-	}
-	
-	
-	public boolean isServiceMonitoring(String serviceName) {
-		ServiceStats serviceStats = (ServiceStats)serviceStatsMap.get(serviceName);
-
-		if(serviceStats == null) {
-			return false;
-		} 
-
-		return true;
-	}
+package org.apache.axis2.management.core.managers;
+
+import org.apache.axis2.management.core.utils.ServiceStats;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisServiceGroup;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.description.TransportOutDescription;
+import org.apache.axis2.description.Parameter;
+
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Collection;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import javax.xml.namespace.QName;
+
+
+public class DynamicStatsManager {
+
+
+	private ConfigurationContext configContext = null;
+	private AxisConfiguration axisConfig = null;
+
+	private HashMap serviceStatsMap = null;
+	private int inMessages = 0;
+	private int outMessages = 0;
+	private int inFaultMessages = 0;
+	private int outFaultMessages = 0;
+
+
+	public DynamicStatsManager(ConfigurationContext configContext) {
+		this.configContext = configContext;
+		this.axisConfig = configContext.getAxisConfiguration();
+
+		serviceStatsMap = new HashMap();
+
+		System.out.println("DynamicStatsManager instantaited.");
+	}
+
+
+	public void updateStats(MessageContext msgContext) {
+		
+		System.out.println("NOTIFYING S1");
+		
+		if(msgContext != null) {
+		
+			// monitor global requests
+			if(msgContext.getFLOW() == MessageContext.IN_FLOW) {
+				System.out.println("IN MESSAGE");
+				inMessages++;
+				
+				if(msgContext.isProcessingFault()) {
+					inFaultMessages++;
+					System.out.println("FAULT");
+				}
+			} else if(msgContext.getFLOW() == MessageContext.OUT_FLOW) {
+				System.out.println("OUT MESSAGE");
+				outMessages++;
+				
+				if(msgContext.isProcessingFault()) {
+					outFaultMessages++;
+					System.out.println("FAULT");
+				}
+			} 
+	
+			// monitor service level requests
+			String serviceName = msgContext.getAxisService().getName();
+			System.out.println("NOTIFYING S3");
+			ServiceStats serviceStats = (ServiceStats)serviceStatsMap.get(serviceName);
+			System.out.println("NOTIFYING S4");
+			if(serviceStats != null) {
+				serviceStats.updateStats(msgContext);
+			}
+		}
+	}
+
+
+	public int getInMessages() {
+		return inMessages;
+	}
+	
+
+	public void clearInMessages() {
+		inMessages = 0;
+	}
+	
+	
+	public int getOutMessages() {
+		return outMessages;
+	}
+	
+
+	public void clearOutMessages() {
+		outMessages = 0;
+	}
+	
+	
+	public int getFaultInMessages() {
+		return inFaultMessages;
+	}
+	
+
+	public void clearFaultInMessages() {
+		inFaultMessages = 0;
+	}
+	
+	
+	public int getFaultOutMessages() {
+		return outFaultMessages;
+	}
+	
+
+	public void clearFaultOutMessages() {
+		outFaultMessages = 0;
+	}
+	
+	
+	public HashMap getMonitoredServices() {
+		return serviceStatsMap;
+	}
+
+
+	public void setServiceToMonitor(String serviceName) {
+		
+		System.out.println("INFO: Setting service to monitor.");
+		ServiceStats serviceStats = new ServiceStats();
+
+		if(!serviceStatsMap.containsKey(serviceName)) {
+			System.out.println("INFO: Service not already monitoring.");
+			serviceStatsMap.put(serviceName, serviceStats);
+		}	
+	}
+
+	
+	public ServiceStats getMonitoredService(String serviceName) throws AxisFault {
+		
+		System.out.println("INFO: Getting monitored service.");
+		
+		ServiceStats serviceStats = (ServiceStats)serviceStatsMap.get(serviceName);
+
+		if(serviceStats == null) {
+			System.out.println("INFO: Service Not monitored.");
+			throw new AxisFault("Service not monitored.");
+		} 
+
+		return serviceStats;
+	}
+	
+	
+	public boolean isServiceMonitoring(String serviceName) {
+		ServiceStats serviceStats = (ServiceStats)serviceStatsMap.get(serviceName);
+
+		if(serviceStats == null) {
+			return false;
+		} 
+
+		return true;
+	}
 }
\ No newline at end of file
Index: management/src/org/apache/axis2/management/invoker/DMModule.java
===================================================================
--- management/src/org/apache/axis2/management/invoker/DMModule.java	(revision 405641)
+++ management/src/org/apache/axis2/management/invoker/DMModule.java	(working copy)
@@ -17,12 +17,13 @@
 
 package org.apache.axis2.management.invoker;
 
+import org.apache.axis2.management.core.admin.DMAdmin;
+
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.description.AxisDescription;
 import org.apache.axis2.description.AxisModule;
 import org.apache.axis2.engine.AxisConfiguration;
-import org.apache.axis2.management.core.admin.DMAdmin;
 import org.apache.axis2.modules.Module;
 
 import javax.xml.namespace.QName;
@@ -43,10 +44,9 @@
     }
 
     // shutdown the module
-    public void shutdown(ConfigurationContext configurationContext) throws AxisFault {
-
+    public void shutdown(AxisConfiguration axisSystem) throws AxisFault {
     }
-
+    
     public String[] getPolicyNamespaces() {
     	return null;	
     }
Index: management/src/org/apache/axis2/management/invoker/DMHandler.java
===================================================================
--- management/src/org/apache/axis2/management/invoker/DMHandler.java	(revision 405641)
+++ management/src/org/apache/axis2/management/invoker/DMHandler.java	(working copy)
@@ -16,11 +16,12 @@
 
 package org.apache.axis2.management.invoker;
 
+import org.apache.axis2.management.core.managers.DynamicStatsManager;
+
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.engine.Handler;
 import org.apache.axis2.handlers.AbstractHandler;
-import org.apache.axis2.management.core.managers.DynamicStatsManager;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
Index: management/resources/management-module/module.xml
===================================================================
--- management/resources/management-module/module.xml	(revision 405641)
+++ management/resources/management-module/module.xml	(working copy)
@@ -1,24 +1,24 @@
 <module name="management" class="org.apache.axis2.management.invoker.DMModule">
 	<inflow>
-		<handler name="InFlowLogHandler" class="org.apache.axis2.management.invoker.DMHandler">
+		<handler name="DMHandler" class="org.apache.axis2.management.invoker.DMHandler">
 			<order phase="monitorPhase"/>
 		</handler>
 	</inflow>
 
 	<outflow>
-		<handler name="OutFlowLogHandler" class="org.apache.axis2.management.invoker.DMHandler">
+		<handler name="DMHandler" class="org.apache.axis2.management.invoker.DMHandler">
 			<order phase="monitorPhase"/>
 		</handler>
 	</outflow>
 
 	<Outfaultflow>
-		<handler name="FaultOutFlowLogHandler" class="org.apache.axis2.management.invoker.DMHandler">
+		<handler name="DMHandler" class="org.apache.axis2.management.invoker.DMHandler">
 			<order phase="monitorPhase"/>
 		</handler>
 	</Outfaultflow>
 
 	<INfaultflow>
-		<handler name="FaultInFlowLogHandler" class="org.apache.axis2.management.invoker.DMHandler">
+		<handler name="DMHandler" class="org.apache.axis2.management.invoker.DMHandler">
 			<order phase="monitorPhase"/>
 		</handler>
 	</INfaultflow>
Index: management/resources/management-services/services.xml
===================================================================
--- management/resources/management-services/services.xml	(revision 405641)
+++ management/resources/management-services/services.xml	(working copy)
@@ -333,4 +333,88 @@
 </service>
 
 
+<service name="AxisConfigurations">
+	<description>
+		Axis configuration manager.
+	</description>
+	<parameter name="ServiceClass" locked="xsd:false">org.apache.axis2.management.interfaces.ws.AxisConfigurations</parameter>
+
+	<operation name="getInfo">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getConfiguration">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="setConfiguration">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+</service>
+
+
+<service name="AxisServiceArchives">
+	<description>
+		Axis service archives manager.
+	</description>
+	<parameter name="ServiceClass" locked="xsd:false">org.apache.axis2.management.interfaces.ws.AxisServiceArchives</parameter>
+
+	<operation name="getInfo">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getServiceArchiveNames">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getArchiveData">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="setArchiveData">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getServiceArchive">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="setServiceArchive">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+</service>
+
+
+<service name="AxisModuleArchives">
+	<description>
+		Axis module archives manager.
+	</description>
+	<parameter name="ServiceClass" locked="xsd:false">org.apache.axis2.management.interfaces.ws.AxisModuleArchives</parameter>
+
+	<operation name="getInfo">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getModuleArchiveNames">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getArchiveData">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="setArchiveData">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="getModuleArchive">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+
+	<operation name="setModuleArchive">
+		<messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+	</operation>
+</service>
+
+
 </serviceGroup>
Index: management/etc/project.properties
===================================================================
--- management/etc/project.properties	(revision 405641)
+++ management/etc/project.properties	(working copy)
@@ -1,5 +1,5 @@
 # -------------------------------------------------------------------
-# Copyright 2001-2004 The Apache Software Foundation.
+# Copyright 2001-2006 The Apache Software Foundation.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -20,20 +20,26 @@
 # -------------------------------------------------------------------
 version_number=0.95
 version_affix=SNAPSHOT
-axis2_version=${version_number}-${version_affix}
-addressing_version=${version_number}-${version_affix}
-security_version=${version_number}-${version_affix}
+axis2_version=SNAPSHOT
+addressing_version=SNAPSHOT
+security_version=SNAPSHOT
+rahas_version=SNAPSHOT
+#axis2_version=${version_number}-${version_affix}
+#addressing_version=${version_number}-${version_affix}
+#security_version=${version_number}-${version_affix}
 
 # -------------------------------------------------------------------
 #                Dependency Repositories
 # -------------------------------------------------------------------
 maven.repo.remote=\
 http://www.ibiblio.org/maven,\
+http://people.apache.org/~chinthaka/maven,\
 http://cvs.apache.org/repository/,\
 http://www.apache.org/dist/java-repository/,\
 http://www.openejb.org/maven,\
 http://dist.codehaus.org/,\
-http://mirrors.sunsite.dk/maven/
+http://mirrors.sunsite.dk/maven/,\
+http://jibx.sourceforge.net/maven/
 
 
 # -------------------------------------------------------------------
@@ -44,17 +50,22 @@
 
 maven.multiproject.includes=\
 modules/common/project.xml,\
+modules/java2wsdl/project.xml,\
 modules/adb/project.xml,\
 modules/codegen/project.xml,\
+modules/xmlbeans/project.xml,\
 modules/wsdl/project.xml,\
+modules/java2wsdl/project.xml,\
 modules/core/project.xml,\
 modules/addressing/project.xml,\
 modules/tool/project.xml,\
 modules/samples/project.xml,\
 modules/security/project.xml,\
+modules/management/project.xml,\
 modules/integration/project.xml,\
 modules/saaj/project.xml,\
 modules/doom/project.xml,\
+modules/jibx/project.xml,\
 ${optional.includes}
 
 #maven.multiproject.excludes=modules/tool/project.xml
@@ -77,19 +88,21 @@
 #                Versions of dependencies
 # -------------------------------------------------------------------
 #for JAM
-axis2.version=SNAPSHOT
 annogen.version=0.1.0
 ant.version=1.6.5
 axiom.version=SNAPSHOT
 axis.wsdl4j.version=1.2
 backport_util_concurrent.version=2.0_01_pd
-bcprov.version=jdk13-128
+bcprov.version=jdk13-131
 commons.codec.version=1.3
 commons.discovery.version=0.2
 commons.fileupload.version=1.0
 commons.httpclient.version=3.0
 commons.logging.version=1.0.4
+geronimo.spec.groupid=geronimo-spec
+geronimo.spec.activation.artifactid=geronimo-spec-activation
 geronimo.spec.activation.version=1.0.2-rc4
+geronimo.spec.javamail.artifactid=geronimo-spec-javamail
 geronimo.spec.javamail.version=1.3.1-rc5
 geronimo.spec.jms.version=1.1-rc4
 geronimo.spec.servlet.version=2.4-rc4
@@ -97,23 +110,28 @@
 groovy.all.version=1.0-jsr-01
 jaxen.version=1.1-beta-7
 jaxme.version=0.5.1
+jibx.version=SNAPSHOT
 junit.version=3.8.1
-log4j.version=1.2.12
+log4j.version=1.2.13
 maven.itest.plugin.version=1.0
 opensaml.version=1.0.1
 policy.version=SNAPSHOT
 stax.api.version=1.0
 stax.impl.groupid=woodstox
 stax.impl.artifactid=wstx
-stax.impl.version=asl-2.8.2
+stax.impl.version=asl-2.9.2
 wss4j.version=SNAPSHOT
 xalan.version=2.6.0
 xbean.version=2.1.0
 xerces.version=2.7.1
 xml_apis.version=1.3.02
 XmlSchema.version=SNAPSHOT
+#once there is a version of XmlSchema-1.0 in the maven1 repository,
+#there's no need for a different version in m2-land
+XmlSchema.m2.version=1.0
 xmlsec.version=1.2.1
 xmlunit.version=1.0
+tracer.version=SNAPSHOT
 
 
 #stax.impl.groupid=stax
