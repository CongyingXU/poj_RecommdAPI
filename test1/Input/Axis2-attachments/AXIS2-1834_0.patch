Index: AddressingBasedDispatcher.java
===================================================================
--- AddressingBasedDispatcher.java	(revision 483079)
+++ AddressingBasedDispatcher.java	(working copy)
@@ -17,6 +17,8 @@
 
 package org.apache.axis2.engine;
 
+import java.util.Iterator;
+
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.AddressingConstants;
 import org.apache.axis2.addressing.EndpointReference;
@@ -64,7 +66,6 @@
 
     public AxisService findService(MessageContext messageContext) throws AxisFault {
         EndpointReference toEPR = messageContext.getTo();
-        AxisService service = null;
 
         if (toEPR != null) {
             if (toEPR.hasAnonymousAddress()) {
@@ -93,9 +94,34 @@
 
                 return registry.getService(serviceName.getLocalPart());
             }
+
+            String wsaAction = messageContext.getOptions().getAction();
+            if (isDebugEnabled){
+            	log.debug("Checking for Service using wsaAction: " + wsaAction);
+            }	
+            if (wsaAction == null)
+            	return null;
+        	Iterator services = messageContext.getConfigurationContext()
+        		.getAxisConfiguration().getServices().values().iterator();
+    		while(services.hasNext()) {
+    			AxisService service = (AxisService) services.next();
+    			AxisOperation operation = service.getOperationByAction(wsaAction);
+    			if(operation != null) {
+    				if (isDebugEnabled) {
+    					log.debug("Service [" + service.getName() 
+    		        		+ "] has been found for wsaAction [" 
+    		        		+ wsaAction + "])");
+    				}
+    				return service;				
+    			}
+    		}
+
+    		log.debug("Attempted to check for Service using wsaAction [" 
+    				+ wsaAction + "], but the service fragment was missing");
+            
         }
 
-        return service;
+        return null;
     }
 
     public void initDispatcher() {
