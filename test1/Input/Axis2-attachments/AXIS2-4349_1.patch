Index: kernel/src/org/apache/axis2/deployment/repository/util/DeploymentFileData.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/repository/util/DeploymentFileData.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/repository/util/DeploymentFileData.java	(working copy)
@@ -102,7 +102,7 @@
         this.classLoader = classLoader;
     }
 
-    public void setClassLoader(boolean isDirectory, ClassLoader parent, File file) throws AxisFault {
+    public void setClassLoader(boolean isDirectory, ClassLoader parent, File file, boolean isChildFirstClassLoading) throws AxisFault {
         if (!isDirectory) {
             if (this.file != null) {
                 URL[] urlsToLoadFrom;
@@ -112,7 +112,7 @@
                                                                 this.file.getAbsolutePath()));
                     }
                     urlsToLoadFrom = new URL[]{this.file.toURL()};
-                    classLoader = Utils.createClassLoader(urlsToLoadFrom, parent, true, file);
+                    classLoader = Utils.createClassLoader(urlsToLoadFrom, parent, true, file, isChildFirstClassLoading);
                 } catch (Exception e) {
                     throw AxisFault.makeFault(e);
                 }
Index: kernel/src/org/apache/axis2/deployment/TransportDeployer.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/TransportDeployer.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/TransportDeployer.java	(working copy)
@@ -53,7 +53,8 @@
         try {
             deploymentFileData.setClassLoader(isDirectory,
                     axisConfig.getModuleClassLoader(),
-                    (File) axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                    (File) axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                    axisConfig.isChildFirstClassLoading());
 
             ClassLoader loader = deploymentFileData.getClassLoader();
             Thread.currentThread().setContextClassLoader(loader);
Index: kernel/src/org/apache/axis2/deployment/ServiceDeployer.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/ServiceDeployer.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/ServiceDeployer.java	(working copy)
@@ -63,7 +63,8 @@
         try {
             deploymentFileData.setClassLoader(isDirectory,
                                               axisConfig.getServiceClassLoader(),
-                    (File)axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                    (File)axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                    axisConfig.isChildFirstClassLoading());
             HashMap wsdlservice = archiveReader.processWSDLs(deploymentFileData);
             if (wsdlservice != null && wsdlservice.size() > 0) {
                 Iterator services = wsdlservice.values().iterator();
Index: kernel/src/org/apache/axis2/deployment/DeploymentEngine.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(working copy)
@@ -307,7 +307,8 @@
                                     new URL[]{moduleurl},
                                     axisConfig.getModuleClassLoader(),
                                     true,
-                                    (File) axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                                    (File) axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                                    axisConfig.isChildFirstClassLoading());
                     AxisModule module = new AxisModule();
                     module.setModuleClassLoader(deploymentClassLoader);
                     module.setParent(axisConfig);
@@ -363,7 +364,8 @@
                     new URL[]{servicesURL},
                     axisConfig.getServiceClassLoader(),
                     true,
-                    (File) axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                    (File) axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                    axisConfig.isChildFirstClassLoading());
             String metainf = "meta-inf";
             serviceGroup.setServiceGroupClassLoader(serviceClassLoader);
             //processing wsdl.list
@@ -1146,7 +1148,8 @@
             axismodule = new AxisModule();
             ArchiveReader archiveReader = new ArchiveReader();
 
-            currentDeploymentFile.setClassLoader(false, config.getModuleClassLoader(), null);
+            currentDeploymentFile.setClassLoader(false, config.getModuleClassLoader(), null,
+                    config.isChildFirstClassLoading());
             axismodule.setModuleClassLoader(currentDeploymentFile.getClassLoader());
             archiveReader.readModuleArchive(currentDeploymentFile, axismodule,
                                             false, config);
@@ -1249,7 +1252,8 @@
             throws AxisFault {
         try {
             DeploymentFileData currentDeploymentFile = new DeploymentFileData(serviceFile, null);
-            DeploymentClassLoader classLoader = Utils.createClassLoader(serviceFile);
+            DeploymentClassLoader classLoader = Utils.createClassLoader(serviceFile,
+                    configCtx.getAxisConfiguration().isChildFirstClassLoading());
             currentDeploymentFile.setClassLoader(classLoader);
             AxisServiceGroup serviceGroup = new AxisServiceGroup();
             serviceGroup.setServiceGroupClassLoader(classLoader);
Index: kernel/src/org/apache/axis2/deployment/POJODeployer.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/POJODeployer.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/POJODeployer.java	(working copy)
@@ -147,7 +147,8 @@
                             configCtx.getAxisConfiguration().getSystemClassLoader(),
                             true,
                             (File)configCtx.getAxisConfiguration().
-                                    getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                                    getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                            configCtx.getAxisConfiguration().isChildFirstClassLoading());
                     Thread.currentThread().setContextClassLoader(classLoader);
                     className = className.replaceAll(".class", "");
                     className = className.replaceAll("/", ".");
Index: kernel/src/org/apache/axis2/deployment/ModuleDeployer.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/ModuleDeployer.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/ModuleDeployer.java	(working copy)
@@ -25,9 +25,11 @@
 import org.apache.axis2.deployment.repository.util.ArchiveReader;
 import org.apache.axis2.deployment.repository.util.DeploymentFileData;
 import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.description.Parameter;
 import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.util.Utils;
+import org.apache.axis2.util.JavaUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -62,9 +64,11 @@
         StringWriter errorWriter = new StringWriter();
         boolean isDirectory = deploymentFileData.getFile().isDirectory();
         try {
+
             deploymentFileData.setClassLoader(isDirectory,
                                               axisConfig.getModuleClassLoader(),
-                    (File)axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                    (File)axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                    this.axisConfig.isChildFirstClassLoading());
             AxisModule metaData = new AxisModule();
             metaData.setModuleClassLoader(deploymentFileData.getClassLoader());
             metaData.setParent(axisConfig);
Index: kernel/src/org/apache/axis2/deployment/util/Utils.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/util/Utils.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/util/Utils.java	(working copy)
@@ -667,13 +667,10 @@
                     DeploymentFileData filedata = new DeploymentFileData(
                             inputFile);
 
-                    filedata
-                            .setClassLoader(
-                                    false,
+                    filedata.setClassLoader(false,
                                     moduleClassLoader,
-                                    (File)axisConfig
-                                            .getParameterValue(
-                                                    Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                                    (File)axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                                    axisConfig.isChildFirstClassLoading());
                     HashMap wsdlservice = archiveReader.processWSDLs(filedata);
                     if (wsdlservice != null && wsdlservice.size() > 0) {
                         Iterator servicesitr = wsdlservice.values().iterator();
@@ -846,7 +843,7 @@
         excludeList.add("shutDown");
     }
 
-    public static DeploymentClassLoader createClassLoader(File serviceFile)
+    public static DeploymentClassLoader createClassLoader(File serviceFile, boolean isChildFirstClassLoading)
             throws MalformedURLException {
         ClassLoader contextClassLoader =
                 (ClassLoader)org.apache.axis2.java.security.AccessController
@@ -856,13 +853,14 @@
                             }
                         });
         return createDeploymentClassLoader(new URL[]{serviceFile.toURL()},
-                                           contextClassLoader, new ArrayList());
+                                           contextClassLoader, new ArrayList(), isChildFirstClassLoading);
     }
 
     public static ClassLoader createClassLoader(ArrayList urls,
                                                 ClassLoader serviceClassLoader,
                                                 boolean extractJars,
-                                                File tmpDir) {
+                                                File tmpDir,
+                                                boolean isChildFirstClassLoading) {
         URL url = (URL)urls.get(0);
         if (extractJars) {
             try {
@@ -871,7 +869,7 @@
                 urls.addAll(0, Arrays.asList(urls1));
                 URL[] urls2 = (URL[])urls.toArray(new URL[urls.size()]);
                 return createDeploymentClassLoader(urls2, serviceClassLoader,
-                                                   null);
+                                                   null, isChildFirstClassLoading);
             } catch (Exception e) {
                 log
                         .warn("Exception extracting jars into temporary directory : "
@@ -883,7 +881,7 @@
         List embedded_jars = Utils.findLibJars(url);
         URL[] urls2 = (URL[])urls.toArray(new URL[urls.size()]);
         return createDeploymentClassLoader(urls2, serviceClassLoader,
-                                           embedded_jars);
+                                           embedded_jars, isChildFirstClassLoading);
     }
 
     public static File toFile(URL url) throws UnsupportedEncodingException {
@@ -894,12 +892,13 @@
     public static ClassLoader createClassLoader(URL[] urls,
                                                 ClassLoader serviceClassLoader,
                                                 boolean extractJars,
-                                                File tmpDir) {
+                                                File tmpDir,
+                                                boolean isChildFirstClassLoading) {
         if (extractJars) {
             try {
                 URL[] urls1 = Utils.getURLsForAllJars(urls[0], tmpDir);
                 return createDeploymentClassLoader(urls1, serviceClassLoader,
-                                                   null);
+                                                   null, isChildFirstClassLoading);
             } catch (Exception e) {
                 log
                         .warn("Exception extracting jars into temporary directory : "
@@ -910,17 +909,17 @@
         }
         List embedded_jars = Utils.findLibJars(urls[0]);
         return createDeploymentClassLoader(urls, serviceClassLoader,
-                                           embedded_jars);
+                                           embedded_jars, isChildFirstClassLoading);
     }
 
     private static DeploymentClassLoader createDeploymentClassLoader(
             final URL[] urls, final ClassLoader serviceClassLoader,
-            final List embeddedJars) {
+            final List embeddedJars, final boolean isChildFirstClassLoading) {
         return (DeploymentClassLoader)AccessController
                 .doPrivileged(new PrivilegedAction() {
                     public Object run() {
                         return new DeploymentClassLoader(urls, embeddedJars,
-                                                         serviceClassLoader);
+                                                         serviceClassLoader, isChildFirstClassLoading);
                     }
                 });
     }
Index: kernel/src/org/apache/axis2/deployment/DeploymentClassLoader.java
===================================================================
--- kernel/src/org/apache/axis2/deployment/DeploymentClassLoader.java	(revision 775803)
+++ kernel/src/org/apache/axis2/deployment/DeploymentClassLoader.java	(working copy)
@@ -43,6 +43,8 @@
     // List of jar files inside the jars in the original url
     private List embedded_jars;
 
+    private boolean isChildFirstClassLoading;
+
     /**
      * DeploymentClassLoader is extended from URLClassLoader. The constructor
      * does not override the super constructor, but takes in an addition list of
@@ -51,10 +53,14 @@
      * @param urls   <code>URL</code>s
      * @param parent parent classloader <code>ClassLoader</code>
      */
-    public DeploymentClassLoader(URL[] urls, List embedded_jars, ClassLoader parent) {
+    public DeploymentClassLoader(URL[] urls,
+                                 List embedded_jars,
+                                 ClassLoader parent,
+                                 boolean isChildFirstClassLoading) {
         super(urls, parent);
         this.urls = urls;
         this.embedded_jars = embedded_jars;
+        this.isChildFirstClassLoading = isChildFirstClassLoading;
     }
 
     /**
@@ -260,4 +266,21 @@
         }
         return null;
     }
+
+    protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
+        Class c = null;
+        if (!isChildFirstClassLoading) {
+            c = super.loadClass(name, resolve);
+        } else {
+            c = findLoadedClass(name);
+            if (c == null) {
+                try {
+                    c = findClass(name);
+                } catch (Exception e) {
+                    c = super.loadClass(name, resolve);
+                }
+            }
+        }
+        return c;
+    }
 }
Index: kernel/src/org/apache/axis2/description/AxisDescription.java
===================================================================
--- kernel/src/org/apache/axis2/description/AxisDescription.java	(revision 775803)
+++ kernel/src/org/apache/axis2/description/AxisDescription.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axiom.om.OMNode;
 import org.apache.axiom.om.OMText;
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
 import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.modules.Module;
@@ -566,4 +567,6 @@
         return policySubject;
     }
 
+    
+
 }
Index: kernel/src/org/apache/axis2/Constants.java
===================================================================
--- kernel/src/org/apache/axis2/Constants.java	(revision 775803)
+++ kernel/src/org/apache/axis2/Constants.java	(working copy)
@@ -438,6 +438,13 @@
         public static final String REST_METHOD_PARAM="RESTMethod";
         public static final String REST_INPUTSERIALIZE_PARAM="RESTInputSerialization";
         public static final String REST_OUTPUTSERIALIZE_PARAM="RESTOutputSerialization";
-        
+
+        /**
+         *  this parameter enables child first class loading.
+         *  so the modules and services first use the classes in their class loader first
+         */
+
+        public static final String ENABLE_CHILD_FIRST_CLASS_LOADING="EnableChldFirstClassLoading";
+
     }
 }
Index: kernel/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 775803)
+++ kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -34,6 +34,7 @@
 import javax.xml.namespace.QName;
 
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
 import org.apache.axis2.transaction.TransactionConfiguration;
 import org.apache.axis2.builder.Builder;
 import org.apache.axis2.builder.unknowncontent.UnknownContentBuilder;
@@ -62,6 +63,7 @@
 import org.apache.axis2.util.TargetResolver;
 import org.apache.axis2.util.Utils;
 import org.apache.axis2.util.FaultyServiceData;
+import org.apache.axis2.util.JavaUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -1399,4 +1401,13 @@
 					axisService, axisConfiguration);
 		}
 	}
+
+    public boolean isChildFirstClassLoading(){
+        boolean childFirstClassLoading = false;
+        Parameter isChildFirstClassLoading = this.getParameter(Constants.Configuration.ENABLE_CHILD_FIRST_CLASS_LOADING);
+        if (isChildFirstClassLoading != null){
+             childFirstClassLoading = JavaUtils.isTrueExplicitly(isChildFirstClassLoading.getValue());
+        }
+        return childFirstClassLoading;
+    }
 }
Index: jaxws/src/org/apache/axis2/jaxws/framework/JAXWSDeployer.java
===================================================================
--- jaxws/src/org/apache/axis2/jaxws/framework/JAXWSDeployer.java	(revision 775803)
+++ jaxws/src/org/apache/axis2/jaxws/framework/JAXWSDeployer.java	(working copy)
@@ -102,7 +102,8 @@
                         axisConfig.getSystemClassLoader(),
                         true,
                         (File) axisConfig.
-                                getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                                getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                        axisConfig.isChildFirstClassLoading());
                 Thread.currentThread().setContextClassLoader(classLoader);
                 deployClasses("JAXWS-Builtin", file.toURL(), Thread.currentThread().getContextClassLoader(), classList);
             } catch (Exception e) {
@@ -151,7 +152,8 @@
                         axisConfig.getSystemClassLoader(),
                         true,
                         (File) axisConfig.
-                                getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR));
+                                getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
+                        axisConfig.isChildFirstClassLoading());
                 Thread.currentThread().setContextClassLoader(classLoader);
 
                 ArrayList classList = getListOfClasses(deploymentFileData);
