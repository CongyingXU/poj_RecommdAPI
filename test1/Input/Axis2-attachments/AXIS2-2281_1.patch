Index: modules/kernel/conf/axis2.xml
===================================================================
--- modules/kernel/conf/axis2.xml	(revision 513304)
+++ modules/kernel/conf/axis2.xml	(working copy)
@@ -79,6 +79,23 @@
     <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
     <!--        <parameter name="RSS_URL" locked="false">http://127.0.0.1/rss</parameter>-->
     <!--    </listener>-->
+ 
+    <!-- metadataExchange parameter can be added to axis2.xml or services.xml -->
+    <!-- Use this parameter to configure for WS_MEX GetMetadata request.      -->
+    <!-- Following are configurables:                                         -->
+    <!--  enable attribute - possible values: "false". This is used to disable-->
+    <!--                     MEX support for a service. When disabled,        -->
+    <!--                     MexDisabledException will be returned to the     -->
+    <!--                     sender of GetMetadata request.                   -->
+    <!--  outputform element contains optional "dialect" attribute and        -->
+    <!--        required "forms" attribute. possible values for "forms":      -->
+    <!--        inline,location,reference.If not configured, default is       -->
+    <!--        inline,location, and reference.                               -->
+    <!--  <parameter name="metadataExchange" locked="false" enable="false">   -->
+    <!--  <outputform dialect="http://schemas.xmlsoap.org/wsdl/"              -->
+    <!--              forms="inline,location" />                              -->
+    <!--  <outputform forms="inline" /> </parameter>                          -->
+    
 
     <!-- ================================================= -->
     <!-- Message Receivers -->
Index: modules/mex/src/org/apache/axis2/mex/MexMessageReceiver.java
===================================================================
--- modules/mex/src/org/apache/axis2/mex/MexMessageReceiver.java	(revision 513304)
+++ modules/mex/src/org/apache/axis2/mex/MexMessageReceiver.java	(working copy)
@@ -29,6 +29,7 @@
 import org.apache.axis2.dataretrieval.DataRetrievalRequest;
 import org.apache.axis2.dataretrieval.OutputForm;
 import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.Parameter;
 import org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver;
 import org.apache.axis2.mex.OM.Location;
 import org.apache.axis2.mex.OM.Metadata;
@@ -47,19 +48,23 @@
  */
 public class MexMessageReceiver extends AbstractInOutSyncMessageReceiver {
 	private static final Log log = LogFactory.getLog(MexMessageReceiver.class);
-
+	Parameter axisConfigMEXParm = null;
+	Parameter serviceConfigMEXParm = null;
 	String mexNamespaceValue = null;
 
 	/**
-	 * 
+	 * Process GetMetadata request
      */
 	public void invokeBusinessLogic(MessageContext msgContext,
 			MessageContext newmsgContext) throws AxisFault {
-	
+		AxisService theService = msgContext.getAxisService();       
+		axisConfigMEXParm = msgContext.getConfigurationContext().getAxisConfiguration().getParameter(MexConstants.MEX_CONFIG.MEX_PARM);
+		serviceConfigMEXParm = theService.getParameter(MexConstants.MEX_CONFIG.MEX_PARM);
+		
+		check_MEX_disabled(serviceConfigMEXParm);
+		
 		try {
 			Metadata metadata = handleRequest(msgContext);
-			AxisService theService = msgContext.getAxisService();
-
 			theService.setEndpointURL(msgContext.getTo().getAddress());
 
 			if (metadata != null) {
@@ -68,7 +73,7 @@
 					SOAPFactory fac = getSOAPFactory(msgContext);
 					envelope = fac.getDefaultEnvelope();
 				}
-           
+          
 				OMElement result = metadata.toOM();
 				if (result != null) {
 					AxisService service = msgContext.getAxisService();
@@ -162,7 +167,7 @@
 
 				requestOptions.putDialect(dialect);
 
-				outputforms = MexUtil.allSupportedOutputForms();
+				outputforms = MexUtil.determineOutputForm(dialect, axisConfigMEXParm, serviceConfigMEXParm);
 				// Loop to call AxisService::getData API to retrieve data
 				// for the Dialect and Identifier(if specified) in the request
 				// for each
@@ -284,4 +289,10 @@
 		return metadata_request_list;
 	}
 
+	
+	private void check_MEX_disabled (Parameter mexConfig) throws MexDisabledException{
+		if (MexUtil.isMexDisabled(mexConfig)){
+			throw new MexDisabledException("'metadataexchange' parameter configured to disable MEX for the service.");
+		}
+	}
 }Index: modules/mex/src/org/apache/axis2/mex/MexConstants.java
===================================================================
--- modules/mex/src/org/apache/axis2/mex/MexConstants.java	(revision 513304)
+++ modules/mex/src/org/apache/axis2/mex/MexConstants.java	(working copy)
@@ -23,44 +23,76 @@
 
 public interface MexConstants {
 	public interface SPEC_VERSIONS {
-		String v1_0 = "Spec_2004_09";
+		public static final String v1_0 = "Spec_2004_09";
 	}
     public interface Spec_2004_09 {
 		
-		String NS_URI = "http://schemas.xmlsoap.org/ws/2004/09/mex";
+    	public static final String NS_URI = "http://schemas.xmlsoap.org/ws/2004/09/mex";
 
 	    public interface Actions {
-			String GET_METADATA_REQUEST = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Request";
-			String GET_METADATA_RESPONSE = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Response";
+	    	public static final String GET_METADATA_REQUEST = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Request";
+	    	public static final String GET_METADATA_RESPONSE = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Response";
 			
 	    }
     }
     
   
     public interface SOAPVersion {
-     		int v1_1 = 1;
+    	public static final int v1_1 = 1;
 
-    		int v1_2 = 2;
+    	public static final int v1_2 = 2;
     
 	}
     
     
     public interface SPEC {
-		String NS_PREFIX = "mex";
-		String GET_METADATA = "GetMetadata";
-		String DIALECT = "Dialect";
-		String IDENTIFIER = "Identifier";
-		String METADATA = "Metadata";
-		String METADATA_SECTION = "MetadataSection";
-		String METADATA_REFERENCE = "MetadataReference";
-		String LOCATION = "Location";
-		String TYPE = "type";
+    	public static final String NS_PREFIX = "mex";
+    	public static final String GET_METADATA = "GetMetadata";
+    	public static final String DIALECT = "Dialect";
+    	public static final String IDENTIFIER = "Identifier";
+    	public static final String METADATA = "Metadata";
+    	public static final String METADATA_SECTION = "MetadataSection";
+    	public static final String METADATA_REFERENCE = "MetadataReference";
+    	public static final String LOCATION = "Location";
+    	public static final String TYPE = "type";
 		
-		String DIALECT_TYPE_WSDL = "http://schemas.xmlsoap.org/wsdl/";
-		String DIALECT_TYPE_POLICY = "http://schemas.xmlsoap.org/ws/2004/09/policy";
-		String DIALECT_TYPE_SCHEMA = "http://www.w3.org/2001/XMLSchema";
-		String DIALECT_TYPE_MEX = "http://schemas.xmlsoap.org/ws/2004/09/mex";
+    	public static final String DIALECT_TYPE_WSDL = "http://schemas.xmlsoap.org/wsdl/";
+    	public static final String DIALECT_TYPE_POLICY = "http://schemas.xmlsoap.org/ws/2004/09/policy";
+    	public static final String DIALECT_TYPE_SCHEMA = "http://www.w3.org/2001/XMLSchema";
+    	public static final String DIALECT_TYPE_MEX = "http://schemas.xmlsoap.org/ws/2004/09/mex";
 		
 	}
+    
+
+    /**
+     * MEX Configuration 
+     * 
+     * Sample mex configuration:
+     * <parameter name="metadataexchange" locked="false">
+     *     <outputform dialect="http://schemas.xmlsoap.org/wsdl/" forms="location" />
+     *     <outputform forms="inline,reference,location" />
+     * </parameter> 
+     */
+    public interface MEX_CONFIG{
+    	public static final String MEX_PARM = "metadataExchange";
+    	
+    	// Allow to disable MEX for a Service if MEX is engaged globally. 
+    	public static final String ENABLE_MEX = "enable"; 
+        
+    	// One or more outputform element can be specified in the mex configuration
+    	// outputform element contains an optional "dialect" attribute and an
+    	// required forms attribute. 
+    	public static final String OUTPUT_FORM_PARM = "outputform";
+    	public static final String DIALECT_PARM = "dialect";
+    	public static final String FORMS_PARM = "forms";
+    	
+    	// configurable parameter values
+    	public static final String DELIMITER = ",";
+    	// possible "forms" attribute values
+    	public static final String LOCATION = "location";
+    	public static final String INLINE = "inline";
+    	public static final String REFERENCE = "reference";
+    	
+    }
   
 }
Index: modules/mex/src/org/apache/axis2/mex/util/MexUtil.java
===================================================================
--- modules/mex/src/org/apache/axis2/mex/util/MexUtil.java	(revision 513304)
+++ modules/mex/src/org/apache/axis2/mex/util/MexUtil.java	(working copy)
@@ -16,6 +16,11 @@
 
 package org.apache.axis2.mex.util;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.StringTokenizer;
+import javax.xml.namespace.QName;
 import org.apache.axiom.om.OMAbstractFactory;
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMFactory;
@@ -28,9 +33,12 @@
 import org.apache.axis2.mex.MexException;
 import org.apache.axis2.mex.MexConstants;
 import org.apache.axis2.dataretrieval.OutputForm;
+import org.apache.axis2.description.Parameter;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 public class MexUtil {
-	
+	private static final Log log = LogFactory.getLog(MexUtil.class);
 	/**
 	 * Answer SOAPVersion for specified envelope
 	 * @param envelope SOAP Envelope
@@ -107,5 +115,115 @@
 		return wsa;
 
 	}
+        
+    /**
+	 * Check if metadata exchange has been disabled for a service. 
+	 * @param serviceConfigMEXParm metadataexchange configured in services.xml
+	 * @return
+	 */
+	public static boolean isMexDisabled(Parameter serviceConfigMEXParm) {
+		boolean disabled = false;
+		if (serviceConfigMEXParm != null) {
+			OMElement mexConfig = serviceConfigMEXParm.getParameterElement();
+			String disable = mexConfig.getAttributeValue(new QName(
+					MexConstants.MEX_CONFIG.ENABLE_MEX));
+			if (disable != null && disable.equals("false"))
+				disabled = true;
+		}
+		return disabled;
+	}
+	
+	/**
+	 * Determine output forms for specified dialect based on "metadataexchange" configured in 
+	 * axis2.xml and services.xml.
+	 * The order of precedence in determining  output form configured:  
+	 *   a. dialect specific at service level.
+	 *   b. service level  i.e. without dialect attribute specified
+	 *   c. dialect specific at global level i,e, configured in axis2.xml
+	 *   d. service level  i.e. without dialect attribute specified
+	 *   e. default output forms to all: inline, location, reference
+	 *   
+	 * @param dialect
+	 * @param axisConfigMEXParm "metadataexchange" parameter configured in axis2.xml
+	 * @param serviceConfigMEXParm  "metadataexchange" parameter configured in services.xml
+	 * @return
+	 */
+	public static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){
+		
+		if (axisConfigMEXParm == null && serviceConfigMEXParm == null){
+			return allSupportedOutputForms();
+		}
+	    OutputForm[] outputform = new OutputForm[0];
+	    outputform = determineOutputForm(dialect, serviceConfigMEXParm);
+	    
+	    if (outputform.length == 0) { // output form not configured in service level config
+	    	outputform = determineOutputForm(dialect, axisConfigMEXParm);
+	    }
+		
+	    if (outputform.length == 0){
+	    	log.debug("No outputform configured, use default output forms");
+	    	outputform = allSupportedOutputForms();
+	    }
+		return outputform;
+	}
+	
+	
+	private static OutputForm[] determineOutputForm(String dialect, Parameter mexParm) {
+		OutputForm[] forms = new OutputForm[0];
+		if (mexParm == null)
+			return forms;
+		
+		OMElement mexConfig = mexParm.getParameterElement();
+		Iterator ite = mexConfig.getChildrenWithName(new QName(
+				MexConstants.MEX_CONFIG.OUTPUT_FORM_PARM));
+		String dialectForm_configured = null;
+		String serviceForm_configured = null;
+		while (ite.hasNext()) {
+			OMElement elem = (OMElement) ite.next();
+			String form_value = elem.getAttributeValue(new QName(
+					MexConstants.MEX_CONFIG.FORMS_PARM));
+			String dialect_value = elem.getAttributeValue(new QName(
+					MexConstants.MEX_CONFIG.DIALECT_PARM));
+			if (dialect_value == null){
+				serviceForm_configured = form_value;
+			}	
+			else if (dialect_value != null
+					&& dialect_value.equals(dialect)) {
+				dialectForm_configured = form_value;
+			}	
+	     }
+			
+		if (dialectForm_configured != null){
+			forms = parseForms(dialectForm_configured);
+		}
+		else if (serviceForm_configured != null){
+			forms = parseForms(serviceForm_configured);
+		}
+		
+		return forms;
+	}	
+	
+	
+	private static OutputForm[] parseForms(String form_values) {
+		List forms = new ArrayList();
+		StringTokenizer st = new StringTokenizer(form_values,
+				MexConstants.MEX_CONFIG.DELIMITER);
+		while (st.hasMoreTokens()) {
+			String token = st.nextToken();
+			if (token.equals(MexConstants.MEX_CONFIG.INLINE))
+				forms.add(OutputForm.INLINE_FORM);
+			else if (token.equals(MexConstants.MEX_CONFIG.LOCATION))
+				forms.add(OutputForm.LOCATION_FORM);
+			else if (token.equals(MexConstants.MEX_CONFIG.REFERENCE))
+				forms.add(OutputForm.REFERENCE_FORM);
+			else {
+              log.debug("Invalid form configured, " + form_values);
+			}
 
+		}
+
+		return (OutputForm[]) forms.toArray(new OutputForm[0]);
+	}
+
+
 }
