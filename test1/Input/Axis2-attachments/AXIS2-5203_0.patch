Index: modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(revision 1207002)
+++ modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(working copy)
@@ -55,6 +55,8 @@
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.security.PrivilegedAction;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * The JAXWSMessageReceiver is the entry point, from the server's perspective, to the JAX-WS code.
@@ -67,6 +69,12 @@
     private static String PARAM_SERVICE_CLASS = "ServiceClass";
     public static String PARAM_BINDING = "Binding";
 
+     /**
+     * Cache that keeps the TCCLS per Service.
+     */
+    private static Map<AxisService, ClassLoader> serviceClassLoaderCache =
+            new ConcurrentHashMap<AxisService, ClassLoader>();
+
     /**
      * We should have already determined which AxisService we're targetting at this point.  So now,
      * just get the service implementation and invoke the appropriate method.
@@ -265,16 +273,27 @@
      * the AxisService and a new class loader is created by using URLs from deployment class loder
      * and setting the current TCCL as the parent. Finally the new class loader is set as the TCCL.
      *
+     * The new class loader creation will happen only once and we will cache it per service to
+     * reuse in next invocations.
      * @param service - Current AxisService instance
      */
     private void mergeDeploymentCL(AxisService service) {
+
         ClassLoader deploymentClassLoader = service.getClassLoader();
-        if (deploymentClassLoader instanceof URLClassLoader) {
+
+        ClassLoader cachedCL = serviceClassLoaderCache.get(service);
+
+        if (cachedCL != null) {
+            setContextClassLoader(cachedCL);
+        } else {
+
             // get URLs from deployment class loader
             URL[] deploymentClassLoaderUrls = ((URLClassLoader) deploymentClassLoader).getURLs();
             // create a new class loader by setting the current TCCL as the parent
-            setContextClassLoader(new URLClassLoader(deploymentClassLoaderUrls,
-                    getContextClassLoader()));
+            ClassLoader cl = new URLClassLoader(deploymentClassLoaderUrls,
+                    getContextClassLoader());
+            setContextClassLoader(cl);
+            serviceClassLoaderCache.put(service, cl);
         }
     }
 
