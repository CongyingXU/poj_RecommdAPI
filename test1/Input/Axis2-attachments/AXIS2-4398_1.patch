Index: test/org/apache/axis2/databinding/utils/BeanUtilTest.java
===================================================================
--- test/org/apache/axis2/databinding/utils/BeanUtilTest.java	(revision 789265)
+++ test/org/apache/axis2/databinding/utils/BeanUtilTest.java	(working copy)
@@ -20,6 +20,9 @@
 package org.apache.axis2.databinding.utils;
 
 import org.apache.axiom.om.*;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.engine.DefaultObjectSupplier;
 import org.apache.axis2.engine.ObjectSupplier;
 
@@ -47,7 +50,7 @@
     
     private ObjectSupplier objectSupplier;
 
-    private OMFactory omFactory;
+    private SOAPFactory omFactory;
     private OMElement omElement;
     private OMNamespace xsiNamespace;
     
@@ -55,10 +58,20 @@
     protected void setUp() throws Exception {
         objectSupplier = new DefaultObjectSupplier();
         
-        omFactory = OMAbstractFactory.getOMFactory();
+        omFactory = OMAbstractFactory.getSOAP12Factory();
         xsiNamespace = omFactory.createOMNamespace(Constants.XSI_NAMESPACE, "xsi");
         omElement = omFactory.createOMElement(new QName("hello"));
+
+        MessageContext msgContext = new MessageContext();
+        msgContext.setEnvelope(omFactory.createSOAPEnvelope());
+        
+        MessageContext.setCurrentMessageContext(msgContext);
     }
+
+    @Override
+    protected void tearDown() throws Exception {
+        MessageContext.setCurrentMessageContext(null);
+    }
     
     public void testProcessObjectAsSimpleType() throws Exception {
         omElement.setText("World");
@@ -127,7 +140,33 @@
         assertTrue(result instanceof OMText);
         assertEquals("World", ((OMText) result).getText());
     }
-    
+
+    public void testProcessObjectWithWrongType() throws Exception {
+        omElement.setLocalName("Queensland");
+        omElement.setText("Brisbane");
+
+        try {
+            BeanUtil.processObject(omElement, int.class, new MultirefHelper(omElement), true, objectSupplier, null);
+        } catch (AxisFault e) {
+            assertEquals(org.apache.axis2.Constants.FAULT_SOAP12_SENDER, e.getFaultCode());
+            assertTrue(e.getMessage().contains("Queensland"));
+            assertTrue(e.getMessage().contains("Brisbane"));
+        }
+    }
+
+    public void testDeserializeWithWrongType() throws Exception {
+        omElement.setLocalName("Queensland");
+        omElement.setText("Brisbane");
+
+        try {
+            BeanUtil.deserialize(int.class, omElement, objectSupplier, "Queensland");
+        } catch (AxisFault e) {
+            assertEquals(org.apache.axis2.Constants.FAULT_SOAP12_SENDER, e.getFaultCode());
+            assertTrue(e.getMessage().contains("Queensland"));
+            assertTrue(e.getMessage().contains("Brisbane"));
+        }
+    }
+
     private OMAttribute createTypeAttribute(String value) {
         return omFactory.createOMAttribute("type", xsiNamespace, value);
     }
Index: src/org/apache/axis2/databinding/utils/BeanUtil.java
===================================================================
--- src/org/apache/axis2/databinding/utils/BeanUtil.java	(revision 789265)
+++ src/org/apache/axis2/databinding/utils/BeanUtil.java	(working copy)
@@ -326,7 +326,7 @@
                 }
             } else {
                 if (SimpleTypeMapper.isSimpleType(beanClass)) {
-                    return SimpleTypeMapper.getSimpleTypeObject(beanClass, beanElement);
+                    return getSimpleTypeObjectChecked(beanClass, beanElement);
                 } else if ("java.lang.Object".equals(beanClass.getName())){
                     return beanElement.getFirstOMChild();
                 }
@@ -700,7 +700,7 @@
                         String value = omElement.getText();
                         return Base64.decode(value);
                     } else {
-                        return SimpleTypeMapper.getSimpleTypeObject(classType, omElement);
+                        return getSimpleTypeObjectChecked(classType, omElement);
                     }
                 } else if (SimpleTypeMapper.isCollection(classType)) {
                     if(generictype !=null && (generictype instanceof ParameterizedType)){
@@ -867,4 +867,18 @@
         }
     }
 
+    private static Object getSimpleTypeObjectChecked(Class classType, OMElement omElement) throws AxisFault {
+        try {
+            return SimpleTypeMapper.getSimpleTypeObject(classType, omElement);
+        } catch (NumberFormatException e) {
+            MessageContext msgContext = MessageContext.getCurrentMessageContext();
+            QName faultCode = msgContext != null ? msgContext.getEnvelope().getVersion().getSenderFaultCode() : null;
+            
+            throw new AxisFault(
+                    "Invalid value \"" + omElement.getText() + "\" for element " + omElement.getLocalName(),
+                    faultCode,
+                    e);
+        }   
+    }
+
 }
