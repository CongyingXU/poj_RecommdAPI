Index: modules/mtompolicy/test/org/apache/axis2/policy/model/MTOMAssertionTest.java
===================================================================
--- modules/mtompolicy/test/org/apache/axis2/policy/model/MTOMAssertionTest.java	(revision 0)
+++ modules/mtompolicy/test/org/apache/axis2/policy/model/MTOMAssertionTest.java	(revision 0)
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.policy.model;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.neethi.Assertion;
+import org.apache.neethi.Policy;
+import org.apache.neethi.PolicyEngine;
+
+import java.util.Iterator;
+import java.util.List;
+
+import junit.framework.TestCase;
+
+public class MTOMAssertionTest extends TestCase {
+    
+    
+    public void testSymmBinding() {
+        try {
+            Policy p = this.getPolicy("test-resources/policy-mtom-security.xml");
+            List assertions = (List)p.getAlternatives().next();
+            
+            boolean isMTOMAssertionFound = false;
+            
+            for (Iterator iter = assertions.iterator(); iter.hasNext();) {
+                Assertion assertion = (Assertion) iter.next();
+                if(assertion instanceof MTOMAssertion) {
+                	isMTOMAssertionFound = true;
+                	MTOMAssertion mtomModel = (MTOMAssertion)assertion;
+                    assertEquals("MIME Serialization assertion not processed", false, mtomModel.isOptional());
+                }    
+                 
+            }
+            //The Asymm binding mean is not built in the policy processing :-(
+            assertTrue("MTOM Assertion not found.",  isMTOMAssertionFound);
+            
+        } catch (Exception e) {
+            e.printStackTrace();
+            fail(e.getMessage());
+        }
+    }
+    
+
+    
+    private Policy getPolicy(String filePath) throws Exception {
+        StAXOMBuilder builder = new StAXOMBuilder(filePath);
+        OMElement elem = builder.getDocumentElement();
+        return PolicyEngine.getPolicy(elem);
+    }
+}
Index: modules/mtompolicy/maven.xml
===================================================================
--- modules/mtompolicy/maven.xml	(revision 0)
+++ modules/mtompolicy/maven.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- $Revision: 1.21 $ $Date: 2004-10-27 20:54:09 +0600 (Wed, 27 Oct 2004) $ -->
+
+<project default="jar"
+    xmlns:j="jelly:core"
+    xmlns:u="jelly:util"
+    xmlns:maven="jelly:maven"
+    xmlns:deploy="deploy"
+    xmlns:ant="jelly:ant">
+    
+    <preGoal name="java:compile" >
+    	<copy toDir="target/classes/META-INF/">
+		<fileset dir="src/META-INF">
+			<include name="**/services/*"/>
+		</fileset>
+        </copy>
+    </preGoal>
+    
+</project>
Index: modules/mtompolicy/project.xml
===================================================================
--- modules/mtompolicy/project.xml	(revision 0)
+++ modules/mtompolicy/project.xml	(revision 0)
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<project>
+    <pomVersion>3</pomVersion>
+    <extend>../../etc/project.xml</extend>
+
+    <name>Apache Axis 2.0 - MTOM Policy</name>
+    <id>axis2-mtompolicy</id>
+    <groupId>org.apache.axis2</groupId>
+    <description>Axis2 : MTOM Policy</description>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.axis2</groupId>
+            <artifactId>axis2-kernel</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+    	<dependency>
+            <groupId>org.apache.ws.commons.axiom</groupId>
+            <artifactId>axiom-api</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.ws.commons.axiom</groupId>
+            <artifactId>axiom-impl</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.ws.commons.axiom</groupId>
+            <artifactId>axiom-dom</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+			<groupId>${stax.impl.groupid}</groupId>
+			<artifactId>${stax.impl.artifactid}</artifactId>
+			<version>${stax.impl.version}</version>
+			<properties>
+				<module>true</module>
+			</properties>
+		</dependency>
+		<dependency>
+			<groupId>stax</groupId>
+			<artifactId>stax-api</artifactId>
+			<version>${stax.api.version}</version>
+			<properties>
+				<module>true</module>
+			</properties>
+		</dependency>
+		<dependency>
+			<groupId>commons-logging</groupId>
+			<artifactId>commons-logging</artifactId>
+			<version>${commons.logging.version}</version>
+			<properties>
+				<module>true</module>
+			</properties>
+		</dependency>
+    	<dependency>
+            <groupId>org.apache.neethi</groupId>
+            <artifactId>neethi</artifactId>
+            <version>${neethi.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+	
+    </dependencies>
+    <!-- build information for the project -->
+    <build>
+        <nagEmailAddress>axis-dev@ws.apache.org</nagEmailAddress>
+        <sourceDirectory>src</sourceDirectory>
+        <unitTestSourceDirectory>test</unitTestSourceDirectory>
+
+        <unitTest>
+            <includes>
+                <include>**/*Test.java</include>
+            </includes>
+        </unitTest>
+	</build>
+    <reports/>
+</project>
Index: modules/mtompolicy/src/META-INF/services/org.apache.neethi.builders.AssertionBuilder
===================================================================
--- modules/mtompolicy/src/META-INF/services/org.apache.neethi.builders.AssertionBuilder	(revision 0)
+++ modules/mtompolicy/src/META-INF/services/org.apache.neethi.builders.AssertionBuilder	(revision 0)
@@ -0,0 +1 @@
+org.apache.axis2.policy.builders.MTOMAssertionBuilder
Index: modules/mtompolicy/src/org/apache/axis2/policy/model/MTOMAssertion.java
===================================================================
--- modules/mtompolicy/src/org/apache/axis2/policy/model/MTOMAssertion.java	(revision 0)
+++ modules/mtompolicy/src/org/apache/axis2/policy/model/MTOMAssertion.java	(revision 0)
@@ -0,0 +1,94 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.policy.model;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamWriter;
+
+import org.apache.neethi.Assertion;
+import org.apache.neethi.Constants;
+import org.apache.neethi.PolicyComponent;
+
+/**
+ * Assertion to pick up the QName 
+ * <wsoma:OptimizedMimeSerialization xmlns:wsoma="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization"/>
+ * 
+ * */
+public class MTOMAssertion implements Assertion{
+	
+	private boolean isOptional = false;
+	
+	public final static String NS = "http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization";
+
+	public final static String MTOM_SERIALIZATION_CONFIG_LN = "OptimizedMimeSerialization";
+	public final static String PREFIX = "wsoma";
+	  
+    public QName getName()
+    {
+    	return new QName(NS, MTOM_SERIALIZATION_CONFIG_LN);
+    }
+    
+    public short getType() {
+        return Constants.TYPE_ASSERTION;
+    }
+    
+    public boolean equal(PolicyComponent policyComponent) {
+        throw new UnsupportedOperationException("TODO");
+    }
+    
+    
+    public boolean isOptional()
+    {
+    	
+    	return isOptional;
+    }
+    
+    public void setOptional(boolean isOptional) {
+        this.isOptional = isOptional;
+    }
+    
+    public void serialize(XMLStreamWriter writer) throws XMLStreamException
+    {
+    	  String prefix = writer.getPrefix(NS);
+
+          if (prefix == null) {
+              prefix = PREFIX;
+              writer.setPrefix(PREFIX, NS);
+          }
+
+          writer.writeStartElement(PREFIX, MTOM_SERIALIZATION_CONFIG_LN, NS);
+          
+          if(isOptional)
+        		writer.writeAttribute("Optional", "true");
+          
+	      writer.writeNamespace(PREFIX, NS);
+	      writer.writeEndElement();
+          
+    }
+    
+    
+    public PolicyComponent normalize()
+    {
+    	 throw new UnsupportedOperationException("TODO");
+    }
+        
+       
+   
+    
+}
+	
\ No newline at end of file
Index: modules/mtompolicy/src/org/apache/axis2/policy/builders/MTOMAssertionBuilder.java
===================================================================
--- modules/mtompolicy/src/org/apache/axis2/policy/builders/MTOMAssertionBuilder.java	(revision 0)
+++ modules/mtompolicy/src/org/apache/axis2/policy/builders/MTOMAssertionBuilder.java	(revision 0)
@@ -0,0 +1,64 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+
+package org.apache.axis2.policy.builders;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.policy.model.MTOMAssertion;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.neethi.Assertion;
+import org.apache.neethi.AssertionBuilderFactory;
+import org.apache.neethi.builders.AssertionBuilder;
+
+/**
+ * The builder will be picked by the "org.apache.neethi.AssertionBuilderFactory".
+ * 
+ * */
+public class MTOMAssertionBuilder implements AssertionBuilder{
+		
+		private static Log log = LogFactory.getLog(MTOMAssertionBuilder.class);
+	  	
+	    public Assertion build(OMElement element, AssertionBuilderFactory factory) throws IllegalArgumentException 
+	    { 
+	    	MTOMAssertion mtomAssertion = new MTOMAssertion();
+	    	return mtomAssertion;
+	    }
+	    
+	    public QName[] getKnownElements() 
+	    {
+	    	return new QName[] {new QName(MTOMAssertion.NS, MTOMAssertion.MTOM_SERIALIZATION_CONFIG_LN)};
+	    }
+	    
+   
+	    
+	    
+}
+
+
+	    
+	    
+	    
+	    
+	    
+	    
+	    
+	    
+	    
+	
\ No newline at end of file
Index: modules/mtompolicy/test-resources/policy-mtom-security.xml
===================================================================
--- modules/mtompolicy/test-resources/policy-mtom-security.xml	(revision 0)
+++ modules/mtompolicy/test-resources/policy-mtom-security.xml	(revision 0)
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ !
+ ! Copyright 2006 The Apache Software Foundation.
+ !
+ ! Licensed under the Apache License, Version 2.0 (the "License");
+ ! you may not use this file except in compliance with the License.
+ ! You may obtain a copy of the License at
+ !
+ !      http://www.apache.org/licenses/LICENSE-2.0
+ !
+ ! Unless required by applicable law or agreed to in writing, software
+ ! distributed under the License is distributed on an "AS IS" BASIS,
+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ ! See the License for the specific language governing permissions and
+ ! limitations under the License.
+ !-->
+ 
+<wsp:Policy wsu:Id="SigEncr" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy">
+	<wsp:ExactlyOne>
+		<wsp:All>
+			<sp:AsymmetricBinding xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
+				<wsp:Policy>
+					<sp:InitiatorToken>
+						<wsp:Policy>
+							<sp:X509Token sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient">
+								<wsp:Policy>
+									<sp:WssX509V3Token10/>
+								</wsp:Policy>
+							</sp:X509Token>
+						</wsp:Policy>
+					</sp:InitiatorToken>
+					<sp:RecipientToken>
+						<wsp:Policy>
+							<sp:X509Token sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/Never">
+								<wsp:Policy>
+									<sp:WssX509V3Token10/>
+								</wsp:Policy>
+							</sp:X509Token>
+						</wsp:Policy>
+					</sp:RecipientToken>
+					<sp:AlgorithmSuite>
+						<wsp:Policy>
+							<sp:TripleDesRsa15/>
+						</wsp:Policy>
+					</sp:AlgorithmSuite>
+					<sp:Layout>
+						<wsp:Policy>
+							<sp:Strict/>
+						</wsp:Policy>
+					</sp:Layout>
+					<sp:IncludeTimestamp/>
+					<sp:OnlySignEntireHeadersAndBody/>
+				</wsp:Policy>
+			</sp:AsymmetricBinding>
+			<sp:Wss10 xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
+				<wsp:Policy>
+					<sp:MustSupportRefKeyIdentifier/>
+					<sp:MustSupportRefIssuerSerial/>
+				</wsp:Policy>
+			</sp:Wss10>
+			<sp:SignedParts xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
+				<sp:Body/>
+			</sp:SignedParts>
+			<sp:EncryptedParts xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
+				<sp:Body/>
+			</sp:EncryptedParts>
+
+			<ramp:RampartConfig xmlns:ramp="http://ws.apache.org/rampart/policy"> 
+				<ramp:user>client</ramp:user>
+				<ramp:encryptionUser>service</ramp:encryptionUser>
+				<ramp:passwordCallbackClass>org.apache.rampart.samples.policy.sample03.PWCBHandler</ramp:passwordCallbackClass>
+				
+				<ramp:signatureCrypto>
+					<ramp:crypto provider="org.apache.ws.security.components.crypto.Merlin">
+						<ramp:property name="org.apache.ws.security.crypto.merlin.keystore.type">JKS</ramp:property>
+						<ramp:property name="org.apache.ws.security.crypto.merlin.file">client.jks</ramp:property>
+						<ramp:property name="org.apache.ws.security.crypto.merlin.keystore.password">apache</ramp:property>
+					</ramp:crypto>
+				</ramp:signatureCrypto>
+				<ramp:encryptionCypto>
+					<ramp:crypto provider="org.apache.ws.security.components.crypto.Merlin">
+						<ramp:property name="org.apache.ws.security.crypto.merlin.keystore.type">JKS</ramp:property>
+						<ramp:property name="org.apache.ws.security.crypto.merlin.file">client.jks</ramp:property>
+						<ramp:property name="org.apache.ws.security.crypto.merlin.keystore.password">apache</ramp:property>
+					</ramp:crypto>
+				</ramp:encryptionCypto>
+			</ramp:RampartConfig>
+			<wsoma:OptimizedMimeSerialization xmlns:wsoma="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization"/>
+
+		</wsp:All>
+	</wsp:ExactlyOne>
+</wsp:Policy>
Index: etc/project.properties
===================================================================
--- etc/project.properties	(revision 492431)
+++ etc/project.properties	(working copy)
@@ -69,6 +69,7 @@
 modules/savan/project.xml,\
 modules/rahas/project.xml,\
 modules/secpolicy/project.xml,\
+modules/mtompolicy/project.xml,\
 ${optional.includes}
 
 #maven.multiproject.excludes=modules/tool/project.xml
