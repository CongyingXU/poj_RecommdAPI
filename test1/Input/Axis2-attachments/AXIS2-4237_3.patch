Index: modules/kernel/src/org/apache/axis2/deployment/util/Utils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/util/Utils.java	(revision 745717)
+++ modules/kernel/src/org/apache/axis2/deployment/util/Utils.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.classloader.JarFileClassLoader;
 import org.apache.axis2.Constants;
-import org.apache.axis2.JAXRS.JAXRSModel;
+import org.apache.axis2.jaxrs.JAXRSModel;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.deployment.DeploymentClassLoader;
 import org.apache.axis2.deployment.DeploymentConstants;
@@ -1748,7 +1748,11 @@
     }
 
 
-    // here we are trying to validate the param and return it as a trimmed String.
+    /**
+     * extract the http location from services xml related to given operation
+     * @param operation
+     * @return
+     */
     public static String getHTTPLoacationFromServicesXML(AxisOperation operation) {
 
         Parameter locationParam = operation.getParameter(Constants.Configuration.REST_LOCATION_PARAM);
@@ -1770,6 +1774,11 @@
 
     }
 
+    /**
+     * extract the http method from services xml related to given operation
+     * @param operation
+     * @return
+     */
     public static String getHTTPMethodFromServicesXML(AxisOperation operation) {
         Parameter methodParam = operation.getParameter(Constants.Configuration.REST_METHOD_PARAM);
         if (methodParam != null && methodParam.getValue() != null &&
@@ -1791,6 +1800,11 @@
             return null;
     }
 
+    /**
+     * get http input mime type from the services xml
+     * @param operation
+     * @return
+     */
     public static String getHTTPInputSerializationFromServicesXML(AxisOperation operation) {
         Parameter inputSerializationParam = operation.getParameter(Constants.Configuration.REST_INPUTSERIALIZE_PARAM);
         if (inputSerializationParam != null && inputSerializationParam.getValue() != null
@@ -1815,6 +1829,11 @@
 
     }
 
+    /**
+     * get http output mime type from the services xml
+     * @param operation
+     * @return
+     */
     public static String getHTTPOutputSerializationFromservicesXML(AxisOperation operation) {
         Parameter outputSerializationParam = operation.getParameter(Constants.Configuration.REST_OUTPUTSERIALIZE_PARAM);
         if (outputSerializationParam != null && outputSerializationParam.getValue() != null
Index: modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java
===================================================================
--- modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java	(revision 745717)
+++ modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java	(working copy)
@@ -20,8 +20,8 @@
 package org.apache.axis2.description.java2wsdl;
 
 import org.apache.axis2.AxisFault;
-import org.apache.axis2.JAXRS.JAXRSUtils;
-import org.apache.axis2.JAXRS.JAXRSModel;
+import org.apache.axis2.jaxrs.JAXRSUtils;
+import org.apache.axis2.jaxrs.JAXRSModel;
 import org.apache.axis2.util.JavaUtils;
 import org.apache.axis2.deployment.util.BeanExcludeInfo;
 import org.apache.axis2.deployment.util.Utils;
Index: modules/kernel/src/org/apache/axis2/JAXRS/JAXRSModel.java
===================================================================
--- modules/kernel/src/org/apache/axis2/JAXRS/JAXRSModel.java	(revision 745717)
+++ modules/kernel/src/org/apache/axis2/JAXRS/JAXRSModel.java	(working copy)
@@ -1,99 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements. See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership. The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.axis2.JAXRS;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-public class JAXRSModel {
-
-    private String Path;
-
-    private String Produces;
-
-    private String Consumes;
-
-    private String HttpMethod;
-
-    private static Log log = LogFactory.getLog(JAXRSModel.class);
-    /*
-    *
-    * Setter methods
-    */
-    public void setPath(String path) {
-        this.Path = path;
-    }
-
-    public void setConsumes(String consumes) {
-        this.Consumes = consumes;
-    }
-
-    public void setProduces(String produces) {
-        this.Produces = produces;
-    }
-
-    public void setHTTPMethod(String httpmethod) {
-        this.HttpMethod = httpmethod;
-
-    }
-
-    /**
-     * getter methods
-     */
-    public String getPath() {
-
-        return ((this.Path != null) && (!this.Path.equals(""))) ? this.Path : null;
-    }
-
-    public String getConsumes() {
-        if((this.Consumes != null) && (!this.Consumes.equals(""))){
-                   String[] array=this.Consumes.split(",");
-                   if(array.length > 1) {
-                      log.warn("WSDL2 supports only one input serialization-considering only the first one ");
-                       return array[0];
-                   } else{
-                       return array[0];
-                   }
-               }else{
-                   return null;
-               }
-
-    }
-
-    public String getProduces() {
-       if((this.Produces != null) && (!this.Produces.equals(""))){
-           String[] array=this.Produces.split(",");
-           if(array.length > 1) {
-              log.warn("WSDL2 supports only one output-serialization");
-               return array[0];
-           } else{
-               return array[0];
-           }
-       }else{
-           return null;
-       }
-
-    }
-
-    public String getHTTPMethod() {
-        return ((this.HttpMethod != null) && (!this.HttpMethod.equals(""))) ? this.HttpMethod :
-                null;
-    }
-}
Index: modules/kernel/src/org/apache/axis2/JAXRS/JAXRSUtils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/JAXRS/JAXRSUtils.java	(revision 745717)
+++ modules/kernel/src/org/apache/axis2/JAXRS/JAXRSUtils.java	(working copy)
@@ -1,222 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements. See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership. The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.axis2.JAXRS;
-
-
-import org.apache.axis2.Constants;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import javax.ws.rs.Consumes;
-import javax.ws.rs.DELETE;
-import javax.ws.rs.GET;
-import javax.ws.rs.HEAD;
-import javax.ws.rs.POST;
-import javax.ws.rs.PUT;
-import javax.ws.rs.Path;
-import javax.ws.rs.Produces;
-import java.lang.reflect.Method;
-import java.lang.annotation.Annotation;
-
-public class JAXRSUtils {
-    private static Log log = LogFactory.getLog(JAXRSModel.class);
-
-    public static JAXRSModel getClassModel(Class serviceClass) {
-        JAXRSModel model = new JAXRSModel();
-        Annotation[] annotation = serviceClass.getAnnotations();
-        for (Annotation a : annotation) {
-            if (a != null) {
-                if (a instanceof Produces) {
-                    addProducesToClassModel((Produces) a, model);
-                } else if (a instanceof Consumes) {
-                    addConsumesToClassModel((Consumes) a, model);
-                } else if (a instanceof Path) {
-                    addPathToClassModel((Path) a, model);
-                } else {
-                    System.out.println("Could not identify the Annotation....");
-                }
-
-            }
-
-        }
-
-        return model;
-    }
-
-    public static JAXRSModel getMethodModel(JAXRSModel classModel, Method serviceMethod) {
-        JAXRSModel model=new JAXRSModel();
-        addProducesToMethodModel(classModel,model);
-        addConsumesToMethodModel(classModel,model);
-        addPathToMethodModel(classModel,model);
-        Annotation[] annotation=serviceMethod.getAnnotations();
-        for(Annotation a:annotation){
-           if(a!=null){
-               if(a instanceof Produces){
-                    addProducesToMethodModel((Produces)a,model);
-               }else if(a instanceof Consumes){
-                  addConsumesToMethodModel((Consumes)a,model);
-               }else if(a instanceof Path){
-                  addPathToMethodModel((Path)a,model);
-               } else{
-                  addHTTPMethodToMethodModel(a,model);
-               }
-
-           }
-        }
-        return model;
-    }
-
-    private static void addProducesToClassModel(Produces produces, JAXRSModel classModel) {
-
-
-        String[] array = null;
-        String value = null;
-        array = produces.value();
-        for (String s : array) {
-            if (value == null) {
-                value = s;
-            } else {
-                value = value + "," + s;
-            }
-        }
-
-        classModel.setProduces(value);
-
-    }
-
-    private static void addConsumesToClassModel(Consumes consumes, JAXRSModel classModel) {
-
-
-        String[] array = null;
-        String value = null;
-        array = consumes.value();
-        for (String s : array) {
-            if (value == null) {
-                value = s;
-            } else {
-                value = value + "," + s;
-            }
-        }
-        classModel.setConsumes(value);
-
-    }
-
-
-    private static void addPathToClassModel(Path path, JAXRSModel classModel) {
-
-
-        String value = null;
-        value = path.value();
-        if(value!=null){
-            if(value.startsWith("/")){
-                value=value.substring(1);
-            }
-            if(value.endsWith("/")){
-               value= value.substring(0,(value.length()-1));
-            }
-        }
-
-        classModel.setPath(value);
-
-    }
-   private static void addProducesToMethodModel(Produces produces,JAXRSModel methodModel){
-
-       String value = null;
-       for (String s : produces.value()) {
-           if (value != null) {
-               value = value + s;
-           } else {
-               value = s;
-           }
-           methodModel.setProduces(value);
-       }
-
-   }
-
-   private static void addProducesToMethodModel(JAXRSModel classModel,JAXRSModel methodModel){
-           String value=classModel.getProduces();
-       if(value!=null){
-           methodModel.setProduces(value);
-       }
-   }
-    private static void addConsumesToMethodModel(Consumes consumes,JAXRSModel methodModel){
-        String value = null;
-        for (String s : consumes.value()) {
-            if (value != null) {
-                value = value + s;
-            } else {
-                value = s;
-            }
-            methodModel.setProduces(value);
-        }
-
-    }
-
-   private static void addConsumesToMethodModel(JAXRSModel classModel,JAXRSModel methodModel){
-         String value=classModel.getConsumes();
-       if(value!=null){
-           methodModel.setConsumes(value);
-       }
-   }
-
-    private static void addHTTPMethodToMethodModel(Annotation annotation,JAXRSModel methodModel){
-
-
-            if (annotation instanceof POST) {
-                methodModel.setHTTPMethod(Constants.Configuration.HTTP_METHOD_POST);
-            } else if (annotation instanceof GET) {
-                methodModel.setHTTPMethod(Constants.Configuration.HTTP_METHOD_GET);
-            } else if (annotation instanceof PUT) {
-               methodModel.setHTTPMethod(Constants.Configuration.HTTP_METHOD_PUT);
-            } else if (annotation instanceof DELETE) {
-                methodModel.setHTTPMethod(Constants.Configuration.HTTP_METHOD_DELETE);
-            }  else if (annotation instanceof HEAD) {
-                 log.warn("HTTP Method HEAD is not supported by AXIS2");
-            }
-
-    }
-
-  private static void addPathToMethodModel(Path path,JAXRSModel methodModel){
-          String value = path.value();
-            if(value!=null){
-            if(value.startsWith("/")){
-                value=value.substring(1);
-            }
-            if(value.endsWith("/")){
-               value= value.substring(0,(value.length()-1));
-            }
-        }
-            if (methodModel.getPath()!=null ) {
-
-                     methodModel.setPath(methodModel.getPath() +"/"+ value);
-            } else{
-
-                methodModel.setPath(value);
-            }
-  }
-
-  private static  void addPathToMethodModel(JAXRSModel classModel,JAXRSModel methodModel){
-       String value=classModel.getPath();
-      if(value!=null){
-          methodModel.setPath(value);
-      }
-  }
-
-}
Index: modules/kernel/src/org/apache/axis2/jaxrs/JAXRSModel.java
===================================================================
--- modules/kernel/src/org/apache/axis2/jaxrs/JAXRSModel.java	(revision 745717)
+++ modules/kernel/src/org/apache/axis2/jaxrs/JAXRSModel.java	(working copy)
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package org.apache.axis2.JAXRS;
+package org.apache.axis2.jaxrs;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -62,6 +62,11 @@
         return ((this.Path != null) && (!this.Path.equals(""))) ? this.Path : null;
     }
 
+
+    /**
+     * only returns the one mime type  as  wsdl 2.0 can publish only one mime type for an operation
+     * @return
+     */
     public String getConsumes() {
         if((this.Consumes != null) && (!this.Consumes.equals(""))){
                    String[] array=this.Consumes.split(",");
@@ -77,6 +82,11 @@
 
     }
 
+
+    /**
+     * only returns the one mime type  as  wsdl 2.0 can publish only one mime type for an operation
+     * @return
+     */
     public String getProduces() {
        if((this.Produces != null) && (!this.Produces.equals(""))){
            String[] array=this.Produces.split(",");
Index: modules/kernel/src/org/apache/axis2/jaxrs/JAXRSUtils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/jaxrs/JAXRSUtils.java	(revision 745717)
+++ modules/kernel/src/org/apache/axis2/jaxrs/JAXRSUtils.java	(working copy)
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package org.apache.axis2.JAXRS;
+package org.apache.axis2.jaxrs;
 
 
 import org.apache.axis2.Constants;
@@ -36,8 +36,16 @@
 import java.lang.annotation.Annotation;
 
 public class JAXRSUtils {
+
+
     private static Log log = LogFactory.getLog(JAXRSModel.class);
 
+
+    /**
+     * returns a jaxrs class model reading class level annotation given the service class
+     * @param serviceClass
+     * @return
+     */
     public static JAXRSModel getClassModel(Class serviceClass) {
         JAXRSModel model = new JAXRSModel();
         Annotation[] annotation = serviceClass.getAnnotations();
@@ -60,6 +68,14 @@
         return model;
     }
 
+
+    /**
+     * given a jaxrs class model & java method , construct a jaxrs model associated with
+     * method , reading the method level annotations.
+     * @param classModel
+     * @param serviceMethod
+     * @return
+     */
     public static JAXRSModel getMethodModel(JAXRSModel classModel, Method serviceMethod) {
         JAXRSModel model=new JAXRSModel();
         addProducesToMethodModel(classModel,model);
@@ -83,6 +99,12 @@
         return model;
     }
 
+    /**
+     * add value of the produces annotation to the given jaxrs-class model.method breaks the
+     * input String & convert it to a String[] before adding.
+     * @param produces
+     * @param classModel
+     */
     private static void addProducesToClassModel(Produces produces, JAXRSModel classModel) {
 
 
@@ -101,6 +123,13 @@
 
     }
 
+
+    /**
+     * add value of the consumes annotaiton to the given jaxrs-class model. breaks the input String
+     * & convert it to a string[] before adding.
+     * @param consumes
+     * @param classModel
+     */
     private static void addConsumesToClassModel(Consumes consumes, JAXRSModel classModel) {
 
 
@@ -118,7 +147,11 @@
 
     }
 
-
+    /**
+     * adding value of the path annotation to the class model
+     * @param path
+     * @param classModel
+     */
     private static void addPathToClassModel(Path path, JAXRSModel classModel) {
 
 
@@ -136,6 +169,7 @@
         classModel.setPath(value);
 
     }
+
    private static void addProducesToMethodModel(Produces produces,JAXRSModel methodModel){
 
        String value = null;
@@ -156,6 +190,7 @@
            methodModel.setProduces(value);
        }
    }
+
     private static void addConsumesToMethodModel(Consumes consumes,JAXRSModel methodModel){
         String value = null;
         for (String s : consumes.value()) {
@@ -164,11 +199,16 @@
             } else {
                 value = s;
             }
-            methodModel.setProduces(value);
+            methodModel.setConsumes(value);
         }
 
     }
 
+    /**
+     * copies class level Consumes value to method level model
+     * @param classModel
+     * @param methodModel
+     */
    private static void addConsumesToMethodModel(JAXRSModel classModel,JAXRSModel methodModel){
          String value=classModel.getConsumes();
        if(value!=null){
@@ -176,6 +216,12 @@
        }
    }
 
+    /**
+     * add value of the HTTPMethod to the jaxrs-method model. axis2 only supports POST,GET,PUT,DELETE.
+     * it doesnt support HEAD. if HEAD is given it resolves to the default method (POST)
+     * @param annotation
+     * @param methodModel
+     */
     private static void addHTTPMethodToMethodModel(Annotation annotation,JAXRSModel methodModel){
 
 
@@ -193,7 +239,13 @@
 
     }
 
-  private static void addPathToMethodModel(Path path,JAXRSModel methodModel){
+    /**
+     * add http location to jaxrs method model. if service level location is already available
+     * it concatanates two.
+     * @param path
+     * @param methodModel
+     */
+    private static void addPathToMethodModel(Path path,JAXRSModel methodModel){
           String value = path.value();
             if(value!=null){
             if(value.startsWith("/")){
@@ -212,7 +264,12 @@
             }
   }
 
-  private static  void addPathToMethodModel(JAXRSModel classModel,JAXRSModel methodModel){
+    /**
+     * this copies the class service level path to method level
+     * @param classModel
+     * @param methodModel
+     */
+    private static  void addPathToMethodModel(JAXRSModel classModel,JAXRSModel methodModel){
        String value=classModel.getPath();
       if(value!=null){
           methodModel.setPath(value);
Index: modules/integration/itest-build.xml
===================================================================
--- modules/integration/itest-build.xml	(revision 746892)
+++ modules/integration/itest-build.xml	(working copy)
@@ -309,7 +309,8 @@
 		<mkdir dir="target/perf/build/repo/modules"/>
 		<copy file="../addressing/target/addressing-${addressing_version}.mar"
     	                  tofile="target/perf/build/repo/modules/addressing-${addressing_version}.mar"/>
-	</target>
+        <antcall target="build-jaxrs-services"/>
+    </target>
 	<target name="build-soap12-services">
 		<ant antfile="build.xml" inheritall="true" inheritrefs="true"
 		                         dir="test-resources/SOAP12Testing/SOAP12TestModuleB"/>
@@ -320,4 +321,17 @@
 		<ant antfile="build.xml" inheritall="true" inheritrefs="true"
 		                         dir="test-resources/SOAP12Testing/SOAP12TestServiceC"/>
 	</target>
+
+     <target name="build-jaxrs-services">
+        <ant antfile="build.xml" inheritall="true" inheritrefs="true"
+                                 dir="test-resources/jaxrs/archiveTestModule"/>
+        <ant antfile="build.xml" inheritall="true" inheritrefs="true"
+                                 dir="test-resources/jaxrs/pojoTestModule"/>
+        <mkdir dir="target/test-resources/jaxrs-repository/conf/"/>
+        <copy file="test-resources/jaxrs/pojo-enabled-axis2.xml"
+    	                  tofile="target/test-resources/jaxrs-repository/conf/axis2.xml"/>
+        <mkdir dir="target/test-resources/jaxrs-repository/modules"/>
+		<copy file="../addressing/target/addressing-SNAPSHOT.mar"
+    	                  tofile="target/test-resources/jaxrs-repository/modules/addressing-SNAPSHOT.mar"/>
+    </target>
 </project>
Index: modules/integration/pom.xml
===================================================================
--- modules/integration/pom.xml	(revision 746892)
+++ modules/integration/pom.xml	(working copy)
@@ -517,6 +517,8 @@
                                 <property name="addressing_version" value="${version}"/>
                                 <property name="groovy.all.version" value="${groovy.all.version}"/>
                                 <property name="maven.repo.local" value="${settings.localRepository}"/>
+                                <property name="maven.class.path" refid="maven.runtime.classpath"/>
+
                                 <path id="maven.dependency.classpath">
                                     <path refid="maven.compile.classpath"/>
                                     <path refid="maven.runtime.classpath"/>
