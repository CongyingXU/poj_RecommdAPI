
Property changes on: C:\blddir\eclipse\axis2\axis2\modules\jaxws
___________________________________________________________________
Name: svn:ignore
   + 
target


Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/proxy/ProxyTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/proxy/ProxyTests.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/proxy/ProxyTests.java	(working copy)
@@ -71,6 +71,7 @@
 			System.out.println("---------------------------------------");
 		}catch(Exception e){ 
 			e.printStackTrace(); 
+            fail("Exception received" + e);
 		}
 	}
 	
@@ -97,6 +98,7 @@
 			System.out.println("---------------------------------------");
 		}catch(Exception e){ 
 			e.printStackTrace(); 
+            fail("Exception received" + e);
 		}
 	}
 	public void testTwoWay(){
@@ -118,6 +120,7 @@
 			System.out.println("Response =" + response);
 		}catch(Exception e){ 
 			e.printStackTrace(); 
+            fail("Exception received" + e);
 		}
 	}
 	
@@ -150,6 +153,7 @@
 			
 		}catch(Exception e){ 
 			e.printStackTrace(); 
+            fail("Exception received" + e);
 		}
 	}
 	
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java	(revision 0)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java	(revision 0)
@@ -0,0 +1,170 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.axis2.jaxws.description;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.net.URL;
+
+import javax.xml.namespace.QName;
+import javax.xml.ws.Service;
+
+import org.apache.axis2.jaxws.spi.ServiceDelegate;
+
+import junit.framework.TestCase;
+
+/**
+ * Directly test the Description classes built via annotations without a WSDL file.
+ * These tests focus on combinations of the following:
+ * - A generic service (no annotations)
+ * - A generated service (annotations)
+ * - An SEI
+ */
+public class AnnotationDescriptionTests extends TestCase {
+    
+//    private static boolean setupDone = false;
+//    private static Service service;
+//    private static ServiceDelegate serviceDelegate;
+//    private static ServiceDescription serviceDescription;
+
+
+/*    
+    protected void setUp() {
+        if (!setupDone) {
+            setupDone = true;
+            String namespaceURI= "http://ws.apache.org/axis2/tests";
+            String localPart = "EchoServiceAnnotated";
+            service = Service.create(null,  new QName(namespaceURI, localPart));
+            serviceDelegate = getServiceDelegate(service);
+            serviceDescription = serviceDelegate.getServiceDescription();
+        }
+    }
+*/    
+    /* 
+     * ========================================================================
+     * ServiceDescription Tests
+     * ========================================================================
+     */
+    public void testCreateService() {
+        String namespaceURI= "http://ws.apache.org/axis2/tests";
+        String localPart = "EchoServiceAnnotated";
+        Service service = Service.create(null,  new QName(namespaceURI, localPart));
+        ServiceDelegate serviceDelegate = getServiceDelegate(service);
+        ServiceDescription serviceDescription = serviceDelegate.getServiceDescription();
+        String portLocalPart = "EchoServiceAnnotatedPort";
+        QName portQName = new QName(namespaceURI, portLocalPart);
+        DocLitWrappedProxy dlwp = service.getPort(portQName, DocLitWrappedProxy.class);
+        
+        // Validate that the Endpoint and EndpointInterface Descriptions were created correctly
+        EndpointDescription endpointDescription = serviceDescription.getEndpointDescription(portQName);
+        assertNotNull("Endpoint not created ", endpointDescription);
+        EndpointInterfaceDescription endpointInterfaceDescription = endpointDescription.getEndpointInterfaceDescription();
+        assertNotNull("EndpointInterface not created", endpointInterfaceDescription);
+        // Verify we can get the same endpoint description based on the SEI class
+        EndpointDescription[] fromSEIClass = serviceDescription.getEndpointDescription(DocLitWrappedProxy.class);
+        assertEquals(1,fromSEIClass.length);
+        assertEquals(endpointDescription, fromSEIClass[0]);
+        
+        // Test getOperation methods parameter validation
+        OperationDescription[] operationResultArray = endpointInterfaceDescription.getOperation((QName) null);
+        assertNull(operationResultArray);
+        operationResultArray = endpointInterfaceDescription.getOperation(new QName("",""));
+        assertNull(operationResultArray);
+        OperationDescription operationResult = endpointInterfaceDescription.getOperation((Method) null);
+        assertNull(operationResult);
+        
+        // Test getOperations(): Number of methods on SEI should match number of operationDescriptions
+        Method[] seiMethods = DocLitWrappedProxy.class.getMethods();
+        operationResultArray = endpointInterfaceDescription.getOperations();
+        assertEquals("Number of SEI methods and operations did not match", seiMethods.length, operationResultArray.length);
+        
+        // Test getOperation(QName)
+        // Verify @WebMethod.name is used if present.  See the SEI class annotations for more information
+        // The SEI has @WebMethod annotations that override the name of "invokeAsync", so none should be found.
+        QName javaMethodQName = new QName("", "invokeAsync");
+        operationResultArray = endpointInterfaceDescription.getOperation(javaMethodQName);
+        assertNull(operationResultArray);
+        // The SEI has @WebMethod annotations that name three operations "invoke"
+        javaMethodQName = new QName("", "invoke");
+        operationResultArray = endpointInterfaceDescription.getOperation(javaMethodQName);
+        assertNotNull(operationResultArray);
+        assertEquals(3, operationResultArray.length);
+        
+        // Test getOperation(Method)
+        // Verify an SEI method lookup works
+        operationResult = endpointInterfaceDescription.getOperation(seiMethods[0]);
+        assertNotNull(operationResult);
+        // Verify a non-SEI method returns a null
+        operationResult = endpointInterfaceDescription.getOperation(this.getClass().getMethods()[0]);
+        assertNull(operationResult);
+    }
+    
+       
+    /*
+     * TO TEST
+     * - Invalid namespace.  TNS in annotation doesn't match one from getPort
+     * - Multiple service.getPort() calls with same SEI and different QName, and that serviceDesc.getEndpointDesc(Class) returns multielement array
+     * - Test service.getPort(..) with same QName; should return same descrpption
+     */
+/*    
+    public void testValidServiceGetEndpoint() {
+        QName validPortQname = new QName("http://ws.apache.org/axis2/tests", "EchoPort");
+        EndpointDescription endpointDescription = serviceDescription.getEndpointDescription(validPortQname);
+        assertNotNull("EndpointDescription should be found", endpointDescription);
+    }
+    
+    public void testInvalidLocalpartServiceGetEndpoint() {
+        QName validPortQname = new QName("http://ws.apache.org/axis2/tests", "InvalidEchoPort");
+        EndpointDescription endpointDescription = serviceDescription.getEndpointDescription(validPortQname);
+        assertNull("EndpointDescription should not be found", endpointDescription);
+    }
+
+    public void testInvalidNamespaceServiceGetEndpoint() {
+        QName validPortQname = new QName("http://ws.apache.org/axis2/tests/INVALID", "EchoPort");
+        EndpointDescription endpointDescription = serviceDescription.getEndpointDescription(validPortQname);
+        assertNull("EndpointDescription should not be found", endpointDescription);
+    }
+*/    
+    /*
+     * ========================================================================
+     * Test utility methods
+     * ========================================================================
+     */
+
+    private ServiceDelegate getServiceDelegate(Service service) {
+        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
+        ServiceDelegate returnServiceDelegate = null;
+        try {
+            Field serviceDelgateField = service.getClass().getDeclaredField("_delegate");
+            serviceDelgateField.setAccessible(true);
+            returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
+        } catch (SecurityException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (NoSuchFieldException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return returnServiceDelegate;
+    }
+
+}
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/DocLitWrappedProxy.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/DocLitWrappedProxy.java	(revision 0)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/DocLitWrappedProxy.java	(revision 0)
@@ -0,0 +1,232 @@
+
+package org.apache.axis2.jaxws.description;
+
+import java.util.concurrent.Future;
+
+import javax.jws.Oneway;
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebResult;
+import javax.jws.WebService;
+import javax.jws.WebParam.Mode;
+import javax.xml.ws.AsyncHandler;
+import javax.xml.ws.Holder;
+import javax.xml.ws.RequestWrapper;
+import javax.xml.ws.Response;
+import javax.xml.ws.ResponseWrapper;
+
+import org.test.proxy.doclitwrapped.FinOpResponse;
+import org.test.proxy.doclitwrapped.FinancialOperation;
+import org.test.proxy.doclitwrapped.ReturnType;
+import org.test.proxy.doclitwrapped.TwoWayHolder;
+
+
+/**
+ * This class was generated by the JAXWS SI.
+ * JAX-WS RI 2.0_01-b15-fcs
+ * Generated source version: 2.0
+ * 
+ */
+@WebService(name = "DocLitWrappedProxy", targetNamespace = "http://ws.apache.org/axis2/tests")
+public interface DocLitWrappedProxy {
+
+
+    /**
+     * 
+     */
+    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @Oneway
+    @RequestWrapper(localName = "oneWayVoid", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.OneWayVoid")
+    public void oneWayVoid();
+
+    /**
+     * 
+     * @param onewayStr
+     */
+    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @Oneway
+    @RequestWrapper(localName = "oneWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.sei.OneWay")
+    public void oneWay(
+        @WebParam(name = "oneway_str", targetNamespace = "")
+        String onewayStr);
+
+    /**
+     * 
+     * @param twoWayHolderInt
+     * @param twoWayHolderStr
+     * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.TwoWayHolder>
+     */
+    @WebMethod(operationName = "twoWayHolder", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    public Response<TwoWayHolder> twoWayHolderAsync(
+        @WebParam(name = "twoWayHolder_str", targetNamespace = "")
+        String twoWayHolderStr,
+        @WebParam(name = "twoWayHolder_int", targetNamespace = "")
+        int twoWayHolderInt);
+
+    /**
+     * 
+     * @param twoWayHolderInt
+     * @param asyncHandler
+     * @param twoWayHolderStr
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "twoWayHolder", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    public Future<?> twoWayHolderAsync(
+        @WebParam(name = "twoWayHolder_str", targetNamespace = "")
+        String twoWayHolderStr,
+        @WebParam(name = "twoWayHolder_int", targetNamespace = "")
+        int twoWayHolderInt,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<TwoWayHolder> asyncHandler);
+
+    /**
+     * 
+     * @param twoWayHolderInt
+     * @param twoWayHolderStr
+     */
+    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    public void twoWayHolder(
+        @WebParam(name = "twoWayHolder_str", targetNamespace = "", mode = Mode.INOUT)
+        Holder<String> twoWayHolderStr,
+        @WebParam(name = "twoWayHolder_int", targetNamespace = "", mode = Mode.INOUT)
+        Holder<Integer> twoWayHolderInt);
+
+    /**
+     * 
+     * @param twowayStr
+     * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.ReturnType>
+     */
+    @WebMethod(operationName = "twoWay", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.sei.ReturnType")
+    public Response<ReturnType> twoWayAsync(
+        @WebParam(name = "twoway_str", targetNamespace = "")
+        String twowayStr);
+
+    /**
+     * 
+     * @param twowayStr
+     * @param asyncHandler
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "twoWay", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public Future<?> twoWayAsync(
+        @WebParam(name = "twoway_str", targetNamespace = "")
+        String twowayStr,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<ReturnType> asyncHandler);
+
+    /**
+     * 
+     * @param twowayStr
+     * @return
+     *     returns java.lang.String
+     */
+    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @WebResult(name = "return_str", targetNamespace = "")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public String twoWay(
+        @WebParam(name = "twoway_str", targetNamespace = "")
+        String twowayStr);
+
+
+    /**
+     * 
+     * @param invokeStr
+     * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.jaxws.proxy.doclitwrapped.sei.ReturnType>
+     */
+    @WebMethod(operationName = "invoke", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public Response<ReturnType> invokeAsync(
+        @WebParam(name = "invoke_str", targetNamespace = "")
+        String invokeStr);
+
+    /**
+     * 
+     * @param invokeStr
+     * @param asyncHandler
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "invoke", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public Future<?> invokeAsync(
+        @WebParam(name = "invoke_str", targetNamespace = "")
+        String invokeStr,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<ReturnType> asyncHandler);
+
+    /**
+     * 
+     * @param invokeStr
+     * @return
+     *     returns java.lang.String
+     */
+    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @WebResult(name = "return_str", targetNamespace = "")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public String invoke(
+        @WebParam(name = "invoke_str", targetNamespace = "")
+        String invokeStr);
+
+    /**
+     * 
+     * @param op
+     * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.FinOpResponse>
+     */
+    @WebMethod(operationName = "finOp", action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    public Response<FinOpResponse> finOpAsync(
+        @WebParam(name = "op", targetNamespace = "")
+        FinancialOperation op);
+
+    /**
+     * 
+     * @param op
+     * @param asyncHandler
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "finOp", action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    public Future<?> finOpAsync(
+        @WebParam(name = "op", targetNamespace = "")
+        FinancialOperation op,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<FinOpResponse> asyncHandler);
+
+    /**
+     * 
+     * @param op
+     * @return
+     *     returns org.apache.axis2.proxy.doclitwrapped.sei.FinancialOperation
+     */
+    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
+    @WebResult(name = "response", targetNamespace = "")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    public FinancialOperation finOp(
+        @WebParam(name = "op", targetNamespace = "")
+        FinancialOperation op);
+
+}
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -22,6 +22,7 @@
 import junit.framework.TestSuite;
 
 import org.apache.axis2.jaxws.DispatchTestSuite;
+import org.apache.axis2.jaxws.description.AnnotationDescriptionTests;
 import org.apache.axis2.jaxws.description.ServiceDescriptionTests;
 import org.apache.axis2.jaxws.description.WSDLDescriptionTests;
 import org.apache.axis2.jaxws.description.WSDLTests;
@@ -55,6 +56,7 @@
         suite.addTestSuite(WSDLTests.class);
         suite.addTestSuite(ServiceDescriptionTests.class);
         suite.addTestSuite(WSDLDescriptionTests.class);
+        suite.addTestSuite(AnnotationDescriptionTests.class);
         
         suite.addTestSuite(HandlerChainProcessorTests.class);
         suite.addTestSuite(JaxwsMessageBundleTests.class);
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(working copy)
@@ -21,11 +21,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import javax.jws.WebService;
 import javax.wsdl.Definition;
 import javax.wsdl.Port;
 import javax.xml.namespace.QName;
 
+import org.apache.axis2.jaxws.ExceptionFactory;
 
+
 /*
 Working-design information.
 
@@ -53,6 +56,11 @@
  * fixed, that will probably have an impact on this class.  In particular, I think this should be created 
  * somehow from an AxisService/AxisPort combination, and not directly from the WSDL.
  */
+// TODO: (JLB) With Lori's change to name WSDL11 services as the port, this might mean that the EndpointDescription corresponds to 
+//       the AxisService rather than the ServiceDescription.
+/**
+ * 
+ */
 public class EndpointDescription {
     private ServiceDescription parentServiceDescription;
     private QName portQName;
@@ -75,6 +83,40 @@
         portQName = new QName(namespace, localPart);
         endpointInterfaceDescription = new EndpointInterfaceDescription(this);
     }
+    
+    /**
+     * Create from an annotated SEI class.
+     * @param sei
+     * @param portName May be null; if so the annotation is used
+     * @param parent
+     */
+    EndpointDescription(Class sei, QName portName, ServiceDescription parent) {
+        parentServiceDescription = parent;
+
+        // Per JSR-181, the @WebService annotation is required.
+        // TODO: (JLB) Tests that do/do not include this annotation
+        WebService webServiceAnnotation = (WebService) sei.getAnnotation(WebService.class);
+        if (webServiceAnnotation == null) {
+            // TODO: NLS
+            ExceptionFactory.makeWebServiceException("Invalid SEI " + sei + "; must contain @WebService annotation");
+        }
+
+        // TODO: (JLB) Process other @WebService values
+
+        // If portName not specified, get it from the annotation
+        // TODO: (JLB) If the portName is specified, should we verify it against the annotation?
+        // TODO: (JLB) Add tests: null portName, !null portName, portName != annotation value
+        if (portName == null) {
+            String name = webServiceAnnotation.name();
+            String tns = webServiceAnnotation.targetNamespace();
+            // TODO: (JLB) Check for name &/| tns null or empty string
+            // TODO: (JLB) Add tests for same
+            portName = new QName(tns, name);
+        }
+        portQName = portName;        
+        
+        endpointInterfaceDescription = new EndpointInterfaceDescription(sei, this);
+    }
     public QName getPortQName() {
         return portQName;
     }
@@ -83,6 +125,10 @@
         return parentServiceDescription;
     }
     
+    public EndpointInterfaceDescription getEndpointInterfaceDescription() {
+        return endpointInterfaceDescription;
+    }
+    
     /**
      * Returns a live list describing the handlers on this port.
      * TODO: This is currently returning List<String>, but it should return a HandlerDescritpion
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/OperationDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/OperationDescription.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/OperationDescription.java	(working copy)
@@ -18,6 +18,19 @@
 
 package org.apache.axis2.jaxws.description;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+
+import javax.jws.Oneway;
+import javax.jws.SOAPBinding;
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebResult;
+import javax.xml.namespace.QName;
+import javax.xml.ws.RequestWrapper;
+import javax.xml.ws.ResponseWrapper;
+
 import org.apache.axis2.description.AxisOperation;
 
 /**
@@ -60,7 +73,25 @@
 public class OperationDescription {
     private EndpointInterfaceDescription parentEndpointInterfaceDescription;
     private AxisOperation axisOperation;
+    private QName operationName;
+    private Method seiMethod;
+    private WebMethod webMethodAnnotation;
     
+    OperationDescription(Method method, EndpointInterfaceDescription parent) {
+        // TODO: (JLB) Look for WebMethod anno; get name and action off of it
+        parentEndpointInterfaceDescription = parent;
+        seiMethod = method;
+        webMethodAnnotation = seiMethod.getAnnotation(WebMethod.class);
+        
+        // Per JSR-181, if @WebMethod specifies and operation name, use that.  Otherwise
+        // default is the Java method name
+        String methodName;
+        if (webMethodAnnotation != null && webMethodAnnotation.operationName() != null && !"".equals(webMethodAnnotation.operationName()))
+            methodName = webMethodAnnotation.operationName();
+        else
+            methodName = method.getName();
+        this.operationName = new QName(methodName);
+    }
     OperationDescription(AxisOperation operation, EndpointInterfaceDescription parent) {
         parentEndpointInterfaceDescription = parent;
         axisOperation = operation;       
@@ -73,4 +104,49 @@
     public AxisOperation getAxisOperation() {
         return axisOperation;
     }
+    
+    public QName getName() {
+        return operationName;
+    }
+    
+    /**
+     * Note this will return NULL unless the operation was built via introspection on the SEI.
+     * In other words, it will return null if the operation was built with WSDL.
+     * @return
+     */
+    public Method getSEIMethod() {
+        return seiMethod;
+    }
+
+    // Annotation-related getters
+    // TODO: (JLB) Should the getters return processed information rather than the actual annotations?
+    // TODO: (JLB) These should cache the information rather than re-getting it each time.
+    public RequestWrapper getRequestWrapper() {
+        return seiMethod.getAnnotation(RequestWrapper.class);
+    }
+    public ResponseWrapper getResponseWrapper() {
+        return seiMethod.getAnnotation(ResponseWrapper.class);
+    }
+    public WebParam[] getWebParam() {
+        Annotation[][] paramAnnotation = seiMethod.getParameterAnnotations();
+        ArrayList<WebParam> webParamList = new ArrayList<WebParam>();
+        for(Annotation[] pa:paramAnnotation){
+            for(Annotation webParam:pa){
+                if(webParam.annotationType() == WebParam.class){
+                    webParamList.add((WebParam)webParam);
+                }
+            }
+        }
+        return webParamList.toArray(new WebParam[0]);
+    }
+    public WebResult getWebResult() {
+        return seiMethod.getAnnotation(WebResult.class);
+    }
+    public SOAPBinding getSoapBinding() {
+        return seiMethod.getAnnotation(SOAPBinding.class);
+    }
+    public boolean isOneWay() {
+        return seiMethod.isAnnotationPresent(Oneway.class);
+    }
+
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(working copy)
@@ -17,6 +17,8 @@
 package org.apache.axis2.jaxws.description;
 
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.Map;
@@ -83,6 +85,9 @@
 
  */
 
+/**
+ * 
+ */
 public class ServiceDescription {
     private AxisService axisService;
 
@@ -125,6 +130,8 @@
         this.serviceClass = serviceClass;
         
         setupWsdlDefinition();
+        // TODO: (JLB) Refactor this with the consideration of no WSDL/Generic Service/Annotated SEI
+        //       Possibly defer creation of AxisService to the getPort() call?
         setupAxisService();
         buildDescriptionHierachy();
     }
@@ -133,10 +140,54 @@
     /*=======================================================================*/
     // START of public accessor methods
     
+    /**
+     * Updates the ServiceDescription based on the SEI class and its annotations.
+     * @param sei
+     * @param portQName
+     */
+    public void updateEndpointInterfaceDescription(Class sei, QName portQName) {
+        
+        if (getEndpointDescription(portQName) != null) {
+            // TODO: (JLB) Implement validating SEI against existing port built from WSDL
+            throw new UnsupportedOperationException("Not implemented yet");
+        }
+        else {
+            // Use the SEI Class and its annotations to finish creating the Description hierachy: Endpoint, EndpointInterface, Operations, Parameters, etc.
+            // TODO: (JLB) Need to create the Axis Description objects after we have all the config info (i.e. from this SEI)
+            EndpointDescription endpointDescription = new EndpointDescription(sei, portQName, this);
+            addEndpointDescription(endpointDescription);
+        }
+    }
+    
+    public EndpointDescription[] getEndpointDescriptions() {
+        return endpointDescriptions.values().toArray(new EndpointDescription[0]);
+    }
     public EndpointDescription getEndpointDescription(QName portQName) {
         return endpointDescriptions.get(portQName);
     }
-    
+    /**
+     * Return the EndpointDescriptions corresponding to the SEI class.  Note that
+     * this will return NULL unless the Descriptions were built by introspection on the SEI
+     * and its annotations.
+     * @param seiClass
+     * @return
+     */
+    public EndpointDescription[] getEndpointDescription(Class seiClass) {
+        EndpointDescription[] returnEndpointDesc = null;
+        ArrayList<EndpointDescription> matchingEndpoints = new ArrayList<EndpointDescription>();
+        Enumeration<EndpointDescription> endpointEnumeration = endpointDescriptions.elements();
+        while (endpointEnumeration.hasMoreElements()) {
+            EndpointDescription endpointDescription = endpointEnumeration.nextElement();
+            Class endpointSEIClass = endpointDescription.getEndpointInterfaceDescription().getSEIClass(); 
+            if (endpointSEIClass != null && endpointSEIClass.equals(seiClass)) {
+                matchingEndpoints.add(endpointDescription);
+            }
+        }
+        if (matchingEndpoints.size() > 0) {
+            returnEndpointDesc = matchingEndpoints.toArray(new EndpointDescription[0]);
+        }
+        return returnEndpointDesc;
+    }
     public AxisService getAxisService() {
         return axisService;
     }
@@ -144,7 +195,10 @@
     // END of public accessor methods
     /*=======================================================================*/
     /*=======================================================================*/
-    
+    private void addEndpointDescription(EndpointDescription endpoint) {
+        endpointDescriptions.put(endpoint.getPortQName(), endpoint);
+    }
+
     private void setupWsdlDefinition() {
         // Note that there may be no WSDL provided, for example when called from 
         // Service.create(QName serviceName).
@@ -182,6 +236,9 @@
     }
     
     private void buildAxisServiceFromNoWSDL() {
+        // TODO: (JLB) Refactor this; probably just remove it
+        System.out.println("JLB: No WSDL provided; don't create any Axis Descriptions yet");
+        if (true) return;
         // Patterned after ServiceClient.createAnonymousService()
         String serviceName = null;
         if (serviceQName != null) {
@@ -223,8 +280,7 @@
             while (portIterator.hasNext()) {
                 Port wsdlPort = (Port) portIterator.next();
                 EndpointDescription endpointDescription = new EndpointDescription(wsdlPort, definition, this);
-                QName portQName = endpointDescription.getPortQName();
-                endpointDescriptions.put(portQName, endpointDescription); 
+                addEndpointDescription(endpointDescription); 
             }
         }
     }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionUtils.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionUtils.java	(revision 0)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionUtils.java	(revision 0)
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.axis2.jaxws.description;
+
+import javax.xml.namespace.QName;
+
+/**
+ * 
+ */
+public class DescriptionUtils {
+    
+    public static boolean isEmpty(String string) {
+        return (string == null || "".equals(string));
+    }
+    
+    public static boolean isEmpty(QName qname) {
+        return qname == null || isEmpty(qname.getLocalPart());
+    }
+
+}
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java	(working copy)
@@ -18,10 +18,13 @@
 
 package org.apache.axis2.jaxws.description;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.Iterator;
 
+import javax.jws.SOAPBinding;
 import javax.wsdl.Binding;
 import javax.wsdl.Port;
 import javax.wsdl.PortType;
@@ -29,6 +32,7 @@
 
 import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisService;
+import org.apache.axis2.jaxws.ExceptionFactory;
 
 /**
  * 
@@ -63,21 +67,114 @@
 
  */
 public class EndpointInterfaceDescription {
-    EndpointDescription parentEndpointDescription;
-    Hashtable<QName, OperationDescription> operationDescriptions = new Hashtable<QName, OperationDescription>();
+    private EndpointDescription parentEndpointDescription;
+    private ArrayList<OperationDescription> operationDescriptions = new ArrayList<OperationDescription>();
+    private Class seiClass;
     
+    void addOperation(OperationDescription operation) {
+        // TODO: This does not support overloaded operations.  While not supported by WS-I, it IS supported by JAX-WS (p11).
+        //       Note that this also requires support in Axis2; currently WSDL11ToAxisServiceBuilder.populateOperations does not
+        //       support overloaded methods in the WSDL; the operations are stored on AxisService as children in a HashMap with the wsdl
+        //       operation name as the key.
+        // TODO: (JLB) Could make this a List collection and allow lookups on seiMethod (what Proxy might use) as a workaround for now.
+        operationDescriptions.add(operation);
+    }
     
+    EndpointInterfaceDescription(Class sei, EndpointDescription parent) {
+        // Per JSR-181 all methods on the SEI are mapped to operations regardless
+        // of whether they include an @WebMethod annotation.  That annotation may
+        // be present to customize the mapping, but is not required (p14)
+        // TODO: (JLB) Testcases that do and do not include @WebMethod anno
+        seiClass = sei;
+        
+        Method[] seiMethods = seiClass.getMethods();
+        for (Method method:seiMethods) {
+            if (!Modifier.isPublic(method.getModifiers())) {
+                // JSR-181 says methods must be public (p14)
+                // TODO NLS
+                ExceptionFactory.makeWebServiceException("SEI methods must be public");
+            }
+            // TODO: (JLB) other validation per JSR-181
+            
+            OperationDescription operation = new OperationDescription(method, this);
+            addOperation(operation);
+        }
+
+    }
+    
+    public OperationDescription[] getOperations() {
+        return operationDescriptions.toArray(new OperationDescription[0]);
+    }
+    
+    /**
+     * Return an array of Operations given an operation QName.  Note that an array is returned
+     * since a WSDL operation may be overloaded per JAX-WS.
+     * @param operationQName
+     * @return
+     */
+    public OperationDescription[] getOperation(QName operationQName) {
+        OperationDescription[] returnOperations = null;
+        if (!DescriptionUtils.isEmpty(operationQName)) {
+            ArrayList<OperationDescription> matchingOperations = new ArrayList<OperationDescription>();
+            OperationDescription[] allOperations = getOperations();
+            for (OperationDescription operation:allOperations) {
+                if (operation.getName().equals(operationQName)) {
+                    matchingOperations.add(operation);
+                }
+            }
+            // Only return an array if there's anything in it
+            if (matchingOperations.size() > 0) {
+                returnOperations = matchingOperations.toArray(new OperationDescription[0]);
+            }
+        }
+        return returnOperations;
+    }
+    
+    /**
+     * Return an OperationDescription for the corresponding SEI method.  Note that this ONLY works
+     * if the OperationDescriptions were created from introspecting an SEI.  If the were created with a WSDL
+     * then use the getOperation(QName) method, which can return > 1 operation.
+     * @param seiMethod The java.lang.Method from the SEI for which an OperationDescription is wanted
+     * @return
+     */
+    public OperationDescription getOperation(Method seiMethod) {
+        OperationDescription returnOperation = null;
+        if (seiMethod != null) {
+            OperationDescription[] allOperations = getOperations();
+            for (OperationDescription operation:allOperations) {
+                if (operation.getSEIMethod() != null && operation.getSEIMethod().equals(seiMethod)) {
+                    returnOperation = operation;
+                }
+            }
+        }
+        return returnOperation;
+    }
+    
+    /**
+     * Build from AxisService
+     * @param parent
+     */
     EndpointInterfaceDescription(EndpointDescription parent) {
         parentEndpointDescription = parent;
         
         AxisService axisService = parentEndpointDescription.getServiceDescription().getAxisService();
-        ArrayList publishedOperations = axisService.getPublishedOperations();
-        Iterator operationsIterator = publishedOperations.iterator();
-        while (operationsIterator.hasNext()) {
-            AxisOperation operation = (AxisOperation) operationsIterator.next();
-            operationDescriptions.put(operation.getName(), new OperationDescription(operation, this));
+        if (axisService != null) {
+            ArrayList publishedOperations = axisService.getPublishedOperations();
+            Iterator operationsIterator = publishedOperations.iterator();
+            while (operationsIterator.hasNext()) {
+                AxisOperation axisOperation = (AxisOperation) operationsIterator.next();
+                addOperation(new OperationDescription(axisOperation, this));
+            }
         }
         
     }
+    public Class getSEIClass() {
+        return seiClass;
+    }
+    // Annotation-realted getters
+    public SOAPBinding getSoapBinding(){
+        // TODO: (JLB) Test with sei Null, not null, SOAP Binding annotated, not annotated
+        return (seiClass != null ? (SOAPBinding) seiClass.getAnnotation(SOAPBinding.class) : null);
+    }
 
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionFactory.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(working copy)
@@ -18,10 +18,15 @@
 
 package org.apache.axis2.jaxws.description;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.net.URL;
 
+import javax.jws.WebService;
 import javax.xml.namespace.QName;
 
+import org.apache.axis2.jaxws.ExceptionFactory;
+
 /**
  * Creates the JAX-WS metadata descritpion hierachy from some combinations of
  * WSDL, Java classes with annotations, and (in the future) deployment descriptors.
@@ -37,8 +42,16 @@
         return new ServiceDescription(wsdlURL, serviceQName, serviceClass);
     }
     
-    public static ServiceDescription updateEndpointInterface(ServiceDescription serviceDescription, Class seiClass) {
-        // TODO: Implement this method
+    /**
+     * Update an existing ServiceDescription with an annotated SEI
+     * @param serviceDescription
+     * @param seiClass 
+     * @param portName Can be null
+     * @return
+     */
+    public static ServiceDescription updateEndpointInterface(ServiceDescription serviceDescription, Class sei, QName portQName) {
+        
+        serviceDescription.updateEndpointInterfaceDescription(sei, portQName);
         return serviceDescription;
     }
 
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(working copy)
@@ -247,38 +247,42 @@
         /* TODO Check to see if WSDL Location is provided.
          * if not check WebService annotation's WSDLLocation
          * if both are not provided then throw exception.
+         * (JLB): I'm not sure lack of WSDL should cause an exception
          */
         
-        if(!isValidWSDLLocation()){
-            //TODO: Should I throw Exception if no WSDL
-            //throw ExceptionFactory.makeWebServiceException("WSLD Not found");
-        }
-        if(sei == null){
-            // TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Invalid Service Endpoint Interface Class");
-        }
-        /*TODO: if portQname is null then fetch it from annotation. 
-         * if portQname is provided then add that to the ports table.
-         */
-        if(portName!=null){
-            String address = "";
-            if(isValidWSDLLocation()){
-                address = getWSDLWrapper().getSOAPAddress(serviceQname, portName);
-            }
-            if(ports.get(portName)==null){
-                addPort(portName, null, address);
-            }
-        }
-        DescriptorFactory df = (DescriptorFactory)FactoryRegistry.getFactory(DescriptorFactory.class);
-        ProxyDescriptor pd = df.create(sei);
-        pd.setPort(ports.get(portName));
-        ProxyHandlerFactory phf =(ProxyHandlerFactory) FactoryRegistry.getFactory(ProxyHandlerFactory.class);
-        BaseProxyHandler proxyHandler = phf.create(pd, this);
+    	if(!isValidWSDLLocation()){
+    		//TODO: Should I throw Exception if no WSDL
+    		//throw ExceptionFactory.makeWebServiceException("WSLD Not found");
+    	}
+    	if(sei == null){
+    		// TODO NLS
+    		throw ExceptionFactory.makeWebServiceException("Invalid Service Endpoint Interface Class");
+    	}
+    	/*TODO: if portQname is null then fetch it from annotation. 
+    	 * if portQname is provided then add that to the ports table.
+    	 */
+        // TODO: (JLB) Move the annotation processing to the DescriptionFactory
+        DescriptionFactory.updateEndpointInterface(serviceDescription, sei, portName);
         
-        Class[] seiClazz = new Class[]{sei, BindingProvider.class};
-        Object proxyClass = Proxy.newProxyInstance(sei.getClassLoader(), seiClazz, proxyHandler);
-        
-        return sei.cast(proxyClass);
+    	if(portName!=null){
+    		String address = "";
+    		if(isValidWSDLLocation()){
+    			address = getWSDLWrapper().getSOAPAddress(serviceQname, portName);
+    		}
+    		if(ports.get(portName)==null){
+    			addPort(portName, null, address);
+    		}
+    	}
+    	DescriptorFactory df = (DescriptorFactory)FactoryRegistry.getFactory(DescriptorFactory.class);
+    	ProxyDescriptor pd = df.create(sei, serviceDescription);
+    	pd.setPort(ports.get(portName));
+    	ProxyHandlerFactory phf =(ProxyHandlerFactory) FactoryRegistry.getFactory(ProxyHandlerFactory.class);
+    	BaseProxyHandler proxyHandler = phf.create(pd, this);
+    	
+    	Class[] seiClazz = new Class[]{sei, BindingProvider.class};
+    	Object proxyClass = Proxy.newProxyInstance(sei.getClassLoader(), seiClazz, proxyHandler);
+    	
+    	return sei.cast(proxyClass);
     }
     
     /*
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java	(working copy)
@@ -16,11 +16,9 @@
  */
 package org.apache.axis2.jaxws.client.proxy;
 
-import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 
-import javax.jws.Oneway;
 import javax.jws.SOAPBinding;
 import javax.jws.WebParam;
 import javax.jws.WebResult;
@@ -57,14 +55,17 @@
 	private EndpointDescription endpointDescription = null;
 
 	//TODO Need to put validation to check if seiMethod is null;
-	public ProxyDescriptor(Class seiClazz){
+	public ProxyDescriptor(Class seiClazz, ServiceDescription serviceDescription){
 		this.seiClazz = seiClazz;
+        this.serviceDescription = serviceDescription;
+        // TODO: (JLB) Does this need to be more robust; can there be > 1 endpoints; if so, how choose which one?
+        this.endpointDescription = serviceDescription.getEndpointDescription(seiClazz)[0];
 	}
 	
 	//TODO remove this once OperationDescription is implemented
 	public RequestWrapper getRequestWrapper() {
 		if(requestWrapper == null){
-			requestWrapper = seiMethod.getAnnotation(RequestWrapper.class);
+			requestWrapper = operationDescription.getRequestWrapper();
 		}
 		return requestWrapper;
 	}
@@ -72,7 +73,7 @@
 	//TODO remove this once OperationDescription is implemented
 	public ResponseWrapper getResponseWrapper() {
 		if(responseWrapper == null){
-			responseWrapper = seiMethod.getAnnotation(ResponseWrapper.class);
+			responseWrapper = operationDescription.getResponseWrapper();
 		}
 		return responseWrapper;
 	}
@@ -80,18 +81,7 @@
 	//TODO remove this once OperationDescription is implemented
 	public WebParam[] getWebParam() {
 		if(webParam == null){
-			Annotation[][] paramAnnotation = seiMethod.getParameterAnnotations();
-			ArrayList<WebParam> webParamList = new ArrayList<WebParam>();
-			for(Annotation[] pa:paramAnnotation){
-				for(Annotation webParam:pa){
-					if(webParam.annotationType()==WebParam.class){
-						webParamList.add((WebParam)webParam);
-					}
-				}
-			}
-			webParam = new WebParam[webParamList.size()];
-			webParamList.toArray(webParam);
-			
+			webParam = operationDescription.getWebParam();
 		}
 		return webParam;
 	}
@@ -99,12 +89,13 @@
 	//TODO remove this once OperationDescription is implemented
 	public WebResult getWebResult(){
 		if(webResult == null){
-			webResult = seiMethod.getAnnotation(WebResult.class);
+			webResult = operationDescription.getWebResult();
 		}
 		return webResult;
 	}
 	
 	//TODO: refactor this once PropertyDescriptor is implemented.
+    // TODO: (JLB) Move to OperationDescription?
 	public Class getRequestWrapperClass(boolean isAsync) throws ClassNotFoundException{
 		RequestWrapper requestWrapper = getRequestWrapper();
 		String className = null;
@@ -120,6 +111,7 @@
 		return Class.forName(className, true, ClassLoader.getSystemClassLoader());
 	}
 	
+    // TODO: (JLB) Move to OperationDescription?
 	public String getRequestWrapperClassName(){
 		if(getRequestWrapper()== null){
 			Class clazz = seiMethod.getDeclaringClass();
@@ -130,6 +122,7 @@
 		return getRequestWrapper().className();
 	}
 	
+    // TODO: (JLB) Move to OperationDescription?
 	public String getRequestWrapperLocalName(){
 		if(getRequestWrapper() == null){
 			return seiMethod.getName();
@@ -137,6 +130,7 @@
 		return getRequestWrapper().localName();
 	}
 	//TODO remove this once OperationDescription is implemented
+    // TODO: (JLB) Move to OperationDescription?
 	public Class getResponseWrapperClass(boolean isAsync) throws ClassNotFoundException{
 		ResponseWrapper responseWrapper = getResponseWrapper();
 		String className = null;
@@ -160,6 +154,7 @@
 		return getResponseWrapper().localName();
 	}
 	//TODO remove this once OperationDescription is implemented
+    // TODO: (JLB) Move to OperationDescription?
 	public String getWebResultName(boolean isAsync){
 		WebResult webResult = getWebResult();
 		if(webResult == null &&!isAsync){
@@ -173,7 +168,7 @@
 		}
 		return getWebResult().name();
 	}
-	
+    // TODO: (JLB) Move to OperationDescription?
 	public ArrayList<String> getParamNames(){
 		//TODO what if the param itself is a holder class;
 		WebParam[] params = getWebParam();
@@ -198,16 +193,17 @@
 	}
 	public void setSeiMethod(Method seiMethod) {
 		this.seiMethod = seiMethod;
+        operationDescription = endpointDescription.getEndpointInterfaceDescription().getOperation(seiMethod);
 	}
 	public SOAPBinding getSoapBindingOnClazz(){
 		if(soapBinding == null){
-			soapBinding = (SOAPBinding)seiClazz.getAnnotation(SOAPBinding.class);
+			soapBinding = endpointDescription.getEndpointInterfaceDescription().getSoapBinding();
 		}
 		return soapBinding;
 	}
 	public SOAPBinding getSoapBindingOnMethod(){
 		//TODO who has presendence if there is SOAPBinding on Class and method.
-		return null;
+		return operationDescription.getSoapBinding();
 	}
 	//TODO read soap binding on method too, make sure if Binding style is different from binding style in Clazz throw Exception.
 	public Style getBindingStyle(){
@@ -216,14 +212,15 @@
 		}
 		return getSoapBindingOnClazz().style(); 
 	}
-
 	public Class getSeiClazz() {
 		return seiClazz;
 	}
-
 	public void setSeiClazz(Class seiClazz) {
 		this.seiClazz = seiClazz;
 	}
+    public boolean isOneWay(){
+        return operationDescription.isOneWay();
+    }
 	/*
 	 * Convert getString to GetString. Converts method to clazz;
 	 */
@@ -244,8 +241,4 @@
 			return method;
 		}
 	}
-	
-	public boolean isOneWay(){
-		return seiMethod.isAnnotationPresent(Oneway.class);
-	}
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java	(working copy)
@@ -46,7 +46,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import com.sun.xml.bind.v2.runtime.reflect.Lister;
+// import com.sun.xml.bind.v2.runtime.reflect.Lister;
 
 /**
  * ProxyHandler is the java.lang.reflect.InvocationHandler implementation.
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/factory/DescriptorFactory.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/factory/DescriptorFactory.java	(revision 428281)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/factory/DescriptorFactory.java	(working copy)
@@ -17,13 +17,14 @@
 package org.apache.axis2.jaxws.client.factory;
 
 import org.apache.axis2.jaxws.client.proxy.ProxyDescriptor;
+import org.apache.axis2.jaxws.description.ServiceDescription;
 
 
 public class DescriptorFactory{
 
-	public ProxyDescriptor create(Class seiClass) {
+	public ProxyDescriptor create(Class seiClass, ServiceDescription serviceDescription) {
 		// TODO Auto-generated method stub
-		return new ProxyDescriptor(seiClass);
+		return new ProxyDescriptor(seiClass, serviceDescription);
 	}
 
 }
