Index: modules/core/src/org/apache/axis2/transport/http/server/RequestLine.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/RequestLine.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/RequestLine.java	(working copy)
@@ -1,117 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/RequestLine.java,v 1.4 2004/09/14 15:50:41 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-* [Additional notices, if required by prior licensing conditions]
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.HttpException;
-import org.apache.commons.httpclient.HttpVersion;
-import org.apache.commons.httpclient.ProtocolException;
-
-import java.util.NoSuchElementException;
-import java.util.StringTokenizer;
-
-/**
- * Defines a HTTP request-line, consisting of method name, URI and protocol.
- * Instances of this class are immutable.
- */
-public class RequestLine {
-    private HttpVersion httpversion = null;
-    private String method = null;
-    private String uri = null;
-
-    public RequestLine(final String method, final String uri, final HttpVersion httpversion) {
-        super();
-
-        if (method == null) {
-            throw new IllegalArgumentException("Method may not be null");
-        }
-
-        if (uri == null) {
-            throw new IllegalArgumentException("URI may not be null");
-        }
-
-        if (httpversion == null) {
-            throw new IllegalArgumentException("HTTP version may not be null");
-        }
-
-        this.method = method;
-        this.uri = uri;
-        this.httpversion = httpversion;
-    }
-
-    public RequestLine(final String method, final String uri, final String httpversion)
-            throws ProtocolException {
-        this(method, uri, HttpVersion.parse(httpversion));
-    }
-
-    public static RequestLine parseLine(final String l) throws HttpException {
-        String method = null;
-        String uri = null;
-        String protocol = null;
-
-        try {
-            StringTokenizer st = new StringTokenizer(l, " ");
-
-            method = st.nextToken();
-            uri = st.nextToken();
-            protocol = st.nextToken();
-        } catch (NoSuchElementException e) {
-            throw new ProtocolException("Invalid request line: " + l);
-        }
-
-        return new RequestLine(method, uri, protocol);
-    }
-
-    public String toString() {
-        StringBuffer sb = new StringBuffer();
-
-        sb.append(this.method);
-        sb.append(" ");
-        sb.append(this.uri);
-        sb.append(" ");
-        sb.append(this.httpversion);
-
-        return sb.toString();
-    }
-
-    public HttpVersion getHttpVersion() {
-        return this.httpversion;
-    }
-
-    public String getMethod() {
-        return this.method;
-    }
-
-    public String getUri() {
-        return this.uri;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/DefaultHttpServiceProcessor.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/DefaultHttpServiceProcessor.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/DefaultHttpServiceProcessor.java	(working copy)
@@ -42,7 +42,6 @@
 import org.apache.http.RequestLine;
 import org.apache.http.UnsupportedHttpVersionException;
 import org.apache.http.protocol.HttpContext;
-import org.apache.http.protocol.HttpService;
 
 public class DefaultHttpServiceProcessor extends HttpServiceProcessor {
 
Index: modules/core/src/org/apache/axis2/transport/http/server/AuthRequestHandler.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/AuthRequestHandler.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/AuthRequestHandler.java	(working copy)
@@ -1,142 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/AuthRequestHandler.java,v 1.1 2004/11/20 17:56:40 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.Credentials;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.httpclient.UsernamePasswordCredentials;
-import org.apache.commons.httpclient.auth.BasicScheme;
-
-import java.io.IOException;
-
-/**
- * This request handler guards access to the http server when used in a request handler
- * chain. It checks the headers for valid credentials and performs the
- * authentication handshake if necessary.
- */
-public class AuthRequestHandler implements HttpRequestHandler {
-
-    /**
-     * The authenticate response header.
-     */
-    public static final String AUTH_RESP = "Authorization";
-    private Credentials credentials = null;
-    private String realm = null;
-    private boolean keepalive = true;
-
-    public AuthRequestHandler(final Credentials creds) {
-        this(creds, null, true);
-    }
-
-    public AuthRequestHandler(final Credentials creds, final String realm) {
-        this(creds, realm, true);
-    }
-
-    /**
-     * TODO replace creds parameter with a class specific to an auth scheme
-     * encapsulating all required information for a specific scheme
-     *
-     * @param creds
-     */
-    public AuthRequestHandler(final Credentials creds, final String realm, boolean keepalive) {
-        if (creds == null) {
-            throw new IllegalArgumentException("Credentials may not be null");
-        }
-
-        this.credentials = creds;
-        this.keepalive = keepalive;
-
-        if (realm != null) {
-            this.realm = realm;
-        } else {
-            this.realm = "test";
-        }
-    }
-
-    /**
-     * Checks if the credentials provided by the client match the required
-     * credentials
-     *
-     * @param clientAuth
-     * @return true if the client is authorized, false if not.
-     */
-    private boolean checkAuthorization(final Header clientAuth) {
-        String expectedAuthString =
-                BasicScheme.authenticate((UsernamePasswordCredentials) credentials, "ISO-8859-1");
-
-        return expectedAuthString.equals(clientAuth.getValue());
-    }
-
-    // TODO add more auth schemes
-    private SimpleResponse performBasicHandshake(final SimpleHttpServerConnection conn,
-                                                 final SimpleRequest request)
-            throws IOException {
-        SimpleResponse response = new SimpleResponse();
-
-        response.setStatusLine(request.getRequestLine().getHttpVersion(),
-                HttpStatus.SC_UNAUTHORIZED);
-
-        if (!request.getRequestLine().getMethod().equalsIgnoreCase("HEAD")) {
-            response.setBodyString("unauthorized");
-        }
-
-        response.addHeader(new Header("WWW-Authenticate", "basic realm=\"" + this.realm + "\""));
-
-        if (this.keepalive) {
-            response.addHeader(new Header("Connection", "keep-alive"));
-            conn.setKeepAlive(true);
-        } else {
-            response.addHeader(new Header("Connection", "close"));
-            conn.setKeepAlive(false);
-        }
-
-        return response;
-    }
-
-    public boolean processRequest(final SimpleHttpServerConnection conn,
-                                  final SimpleRequest request)
-            throws IOException {
-        Header clientAuth = request.getFirstHeader(AUTH_RESP);
-
-        if ((clientAuth != null) && checkAuthorization(clientAuth)) {
-            return false;
-        } else {
-            SimpleResponse response = performBasicHandshake(conn, request);
-
-            // Make sure the request body is fully consumed
-            request.getBodyBytes();
-            conn.writeResponse(response);
-
-            return true;
-        }
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/ErrorResponse.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/ErrorResponse.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/ErrorResponse.java	(working copy)
@@ -1,74 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/ErrorResponse.java,v 1.6 2004/11/13 12:21:28 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-* [Additional notices, if required by prior licensing conditions]
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.httpclient.HttpVersion;
-
-import java.util.HashMap;
-
-/**
- * Default error responses.
- */
-public class ErrorResponse {
-    private static final HashMap responses = new HashMap();
-
-    private ErrorResponse() {
-        super();
-    }
-
-    public static SimpleResponse getResponse(int statusCode) {
-        Integer code = new Integer(statusCode);
-        SimpleResponse response = (SimpleResponse) responses.get(code);
-
-        if (response == null) {
-            response = new SimpleResponse();
-            response.setStatusLine(HttpVersion.HTTP_1_0, statusCode);
-            response.setHeader(new Header("Content-Type", "text/plain; charset=US-ASCII"));
-
-            String s = HttpStatus.getStatusText(statusCode);
-
-            if (s == null) {
-                s = "Error " + statusCode;
-            }
-
-            response.setBodyString(s);
-            response.addHeader(new Header("Connection", "close"));
-            response.addHeader(new Header("Content-Length", Integer.toString(s.length())));
-            responses.put(code, response);
-        }
-
-        return response;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleResponse.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleResponse.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleResponse.java	(working copy)
@@ -1,292 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleResponse.java,v 1.8 2004/11/13 12:21:28 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.ChunkedInputStream;
-import org.apache.commons.httpclient.ContentLengthInputStream;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HeaderElement;
-import org.apache.commons.httpclient.HeaderGroup;
-import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.httpclient.HttpVersion;
-import org.apache.commons.httpclient.NameValuePair;
-import org.apache.commons.httpclient.StatusLine;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.util.Iterator;
-
-/**
- * A generic HTTP response.
- */
-public class SimpleResponse {
-    public static final String DEFAULT_CONTENT_CHARSET = "ISO-8859-1";
-    private HttpVersion ver = HttpVersion.HTTP_1_1;
-    private int statuscode = HttpStatus.SC_OK;
-    private String phrase = HttpStatus.getStatusText(HttpStatus.SC_OK);
-    private HeaderGroup headers = new HeaderGroup();
-    private InputStream entity = null;
-
-    public SimpleResponse() {
-        super();
-    }
-
-    public SimpleResponse(final StatusLine statusline, final Header[] headers,
-                          final InputStream content)
-            throws IOException {
-        super();
-
-        if (statusline == null) {
-            throw new IllegalArgumentException("Status line may not be null");
-        }
-
-        setStatusLine(HttpVersion.parse(statusline.getHttpVersion()), statusline.getStatusCode(),
-                statusline.getReasonPhrase());
-        setHeaders(headers);
-
-        if (content != null) {
-            InputStream in = content;
-            Header contentLength = this.headers.getFirstHeader("Content-Length");
-            Header transferEncoding = this.headers.getFirstHeader("Transfer-Encoding");
-
-            if (transferEncoding != null) {
-                if (transferEncoding.getValue().indexOf("chunked") != -1) {
-                    in = new ChunkedInputStream(in);
-                }
-            } else if (contentLength != null) {
-                long len = getContentLength();
-
-                if (len >= 0) {
-                    in = new ContentLengthInputStream(in, len);
-                }
-            }
-
-            this.entity = in;
-        }
-    }
-
-    public void addHeader(final Header header) {
-        if (header == null) {
-            return;
-        }
-
-        this.headers.addHeader(header);
-    }
-
-    public boolean containsHeader(final String name) {
-        return this.headers.containsHeader(name);
-    }
-
-    public void removeHeaders(final String s) {
-        if (s == null) {
-            return;
-        }
-
-        Header[] headers = this.headers.getHeaders(s);
-
-        for (int i = 0; i < headers.length; i++) {
-            this.headers.removeHeader(headers[i]);
-        }
-    }
-
-    public InputStream getBody() {
-        return this.entity;
-    }
-
-    public byte[] getBodyBytes() throws IOException {
-        InputStream in = getBody();
-
-        if (in != null) {
-            byte[]                tmp = new byte[4096];
-            int bytesRead = 0;
-            ByteArrayOutputStream buffer = new ByteArrayOutputStream(1024);
-
-            while ((bytesRead = in.read(tmp)) != -1) {
-                buffer.write(tmp, 0, bytesRead);
-            }
-
-            return buffer.toByteArray();
-        } else {
-            return null;
-        }
-    }
-
-    public String getBodyString() throws IOException {
-        byte[] raw = getBodyBytes();
-
-        if (raw != null) {
-            return new String(raw, getCharset());
-        } else {
-            return null;
-        }
-    }
-
-    public String getCharset() {
-        String charset = DEFAULT_CONTENT_CHARSET;
-        Header contenttype = this.headers.getFirstHeader("Content-Type");
-
-        if (contenttype != null) {
-            HeaderElement values[] = contenttype.getElements();
-
-            if (values.length == 1) {
-                NameValuePair param = values[0].getParameterByName("charset");
-
-                if (param != null) {
-                    charset = param.getValue();
-                }
-            }
-        }
-
-        return charset;
-    }
-
-    public long getContentLength() {
-        Header contentLength = this.headers.getFirstHeader("Content-Length");
-
-        if (contentLength != null) {
-            try {
-                return Long.parseLong(contentLength.getValue());
-            } catch (NumberFormatException e) {
-                return -1;
-            }
-        } else {
-            return -1;
-        }
-    }
-
-    public Header getFirstHeader(final String name) {
-        return this.headers.getFirstHeader(name);
-    }
-
-    public Iterator getHeaderIterator() {
-        return this.headers.getIterator();
-    }
-
-    public Header[] getHeaders() {
-        return this.headers.getAllHeaders();
-    }
-
-    public HttpVersion getHttpVersion() {
-        return this.ver;
-    }
-
-    public String getPhrase() {
-        return this.phrase;
-    }
-
-    public String getStatusLine() {
-        StringBuffer buffer = new StringBuffer();
-
-        buffer.append(this.ver);
-        buffer.append(' ');
-        buffer.append(this.statuscode);
-
-        if (this.phrase != null) {
-            buffer.append(' ');
-            buffer.append(this.phrase);
-        }
-
-        return buffer.toString();
-    }
-
-    public int getStatuscode() {
-        return this.statuscode;
-    }
-
-    public void setBody(final InputStream instream) {
-        this.entity = instream;
-    }
-
-    public void setBodyString(final String string) {
-        if (string != null) {
-            byte[] raw = null;
-
-            try {
-                raw = string.getBytes(DEFAULT_CONTENT_CHARSET);
-            } catch (UnsupportedEncodingException e) {
-                raw = string.getBytes();
-            }
-
-            this.entity = new ByteArrayInputStream(raw);
-
-            if (!containsHeader("Content-Type")) {
-                setHeader(new Header("Content-Type", "text/plain"));
-            }
-
-            setHeader(new Header("Content-Length", Long.toString(raw.length)));
-        } else {
-            this.entity = null;
-        }
-    }
-
-    public void setHeader(final Header header) {
-        if (header == null) {
-            return;
-        }
-
-        removeHeaders(header.getName());
-        addHeader(header);
-    }
-
-    public void setHeaders(final Header[] headers) {
-        if (headers == null) {
-            return;
-        }
-
-        this.headers.setHeaders(headers);
-    }
-
-    public void setStatusLine(final HttpVersion ver, int statuscode) {
-        setStatusLine(ver, statuscode, null);
-    }
-
-    public void setStatusLine(final HttpVersion ver, int statuscode, final String phrase) {
-        if (ver == null) {
-            throw new IllegalArgumentException("HTTP version may not be null");
-        }
-
-        if (statuscode <= 0) {
-            throw new IllegalArgumentException("Status code may not be negative or zero");
-        }
-
-        this.ver = ver;
-        this.statuscode = statuscode;
-
-        if (phrase != null) {
-            this.phrase = phrase;
-        } else {
-            this.phrase = HttpStatus.getStatusText(statuscode);
-        }
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimplePlainSocketFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimplePlainSocketFactory.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimplePlainSocketFactory.java	(working copy)
@@ -1,47 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimplePlainSocketFactory.java,v 1.1 2004/12/11 22:35:26 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.io.IOException;
-import java.net.ServerSocket;
-
-/**
- * Defines a plain socket factory
- */
-public class SimplePlainSocketFactory implements SimpleSocketFactory {
-    public SimplePlainSocketFactory() {
-        super();
-    }
-
-    public ServerSocket createServerSocket(int port) throws IOException {
-        return new ServerSocket(port);
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/ResponseWriter.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/ResponseWriter.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/ResponseWriter.java	(working copy)
@@ -1,128 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/ResponseWriter.java,v 1.5 2004/11/07 12:31:42 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.io.BufferedWriter;
-import java.io.FilterWriter;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
-import java.io.UnsupportedEncodingException;
-
-/**
- * Provides a hybrid Writer/OutputStream for sending HTTP response data
- */
-public class ResponseWriter extends FilterWriter {
-    public static final String CRLF = "\r\n";
-    public static final String ISO_8859_1 = "ISO-8859-1";
-    private OutputStream outStream = null;
-    private String encoding = null;
-
-    public ResponseWriter(final OutputStream outStream) throws UnsupportedEncodingException {
-        this(outStream, CRLF, ISO_8859_1);
-    }
-
-    public ResponseWriter(final OutputStream outStream, final String encoding)
-            throws UnsupportedEncodingException {
-        this(outStream, CRLF, encoding);
-    }
-
-    public ResponseWriter(final OutputStream outStream, final String lineSeparator,
-                          final String encoding)
-            throws UnsupportedEncodingException {
-        super(new BufferedWriter(new OutputStreamWriter(outStream, encoding)));
-        this.outStream = outStream;
-        this.encoding = encoding;
-    }
-
-    public void close() throws IOException {
-        if (outStream != null) {
-            super.close();
-            outStream = null;
-        }
-    }
-
-    /*
-     *  (non-Javadoc)
-     * @see java.io.Writer#flush()
-     */
-    public void flush() throws IOException {
-        if (outStream != null) {
-            super.flush();
-            outStream.flush();
-        }
-    }
-
-    public void print(int i) throws IOException {
-        write(Integer.toString(i));
-    }
-
-    public void print(String s) throws IOException {
-        if (s == null) {
-            s = "null";
-        }
-
-        write(s);
-    }
-
-    public void println() throws IOException {
-        write(CRLF);
-    }
-
-    public void println(int i) throws IOException {
-        write(Integer.toString(i));
-        write(CRLF);
-    }
-
-    public void println(String s) throws IOException {
-        print(s);
-        write(CRLF);
-    }
-
-    public void write(byte b) throws IOException {
-        super.flush();
-        outStream.write((int) b);
-    }
-
-    public void write(byte[] b) throws IOException {
-        super.flush();
-        outStream.write(b);
-    }
-
-    public void write(byte[] b, int off, int len) throws IOException {
-        super.flush();
-        outStream.write(b, off, len);
-    }
-
-    public String getEncoding() {
-        return encoding;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleHttpServerConnection.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleHttpServerConnection.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleHttpServerConnection.java	(working copy)
@@ -1,325 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleHttpServerConnection.java,v 1.21 2004/12/11 22:35:26 olegk Exp $
-* $Revision: 224451 $
-* $Date: 2005-07-23 06:23:59 -0400 (Sat, 23 Jul 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.ChunkedOutputStream;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpParser;
-import org.apache.commons.httpclient.StatusLine;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.UnsupportedEncodingException;
-import java.net.InetAddress;
-import java.net.NetworkInterface;
-import java.net.Socket;
-import java.net.SocketException;
-import java.util.Enumeration;
-import java.util.Iterator;
-
-/**
- * A connection to the SimpleHttpServer.
- */
-public class SimpleHttpServerConnection {
-    private static final String HTTP_ELEMENT_CHARSET = "US-ASCII";
-    private Socket socket = null;
-    private OutputStream out = null;
-    private boolean keepAlive = false;
-    private InputStream in = null;
-    public static final int DEFAULT_TIMEOUT = 60000;  // 1 Minute
-
-    public SimpleHttpServerConnection(final Socket socket) throws IOException {
-        super();
-
-        if (socket == null) {
-            throw new IllegalArgumentException("Socket may not be null");
-        }
-
-        this.socket = socket;
-        this.socket.setTcpNoDelay(true);
-        this.socket.setSoTimeout(DEFAULT_TIMEOUT);
-        this.in = socket.getInputStream();
-        this.out = socket.getOutputStream();
-    }
-
-    public synchronized void close() {
-        try {
-            if (socket != null) {
-                socket.shutdownInput();
-                socket.shutdownOutput();
-                in.close();
-                out.close();
-                socket.close();
-                socket = null;
-            }
-        } catch (IOException e) {
-
-        }
-    }
-
-    public SimpleRequest readRequest() throws IOException {
-        try {
-            String line ;
-
-            do {
-                line = HttpParser.readLine(in, HTTP_ELEMENT_CHARSET);
-            } while ((line != null) && (line.length() == 0));
-
-            if (line == null) {
-                setKeepAlive(false);
-
-                return null;
-            }
-
-            return new SimpleRequest(RequestLine.parseLine(line),
-                    HttpParser.parseHeaders(this.in, HTTP_ELEMENT_CHARSET),
-                    this.in);
-        } catch (IOException e) {
-            close();
-
-            throw e;
-        }
-    }
-
-    public SimpleResponse readResponse() throws IOException {
-        try {
-            String line ;
-
-            do {
-                line = HttpParser.readLine(in, HTTP_ELEMENT_CHARSET);
-            } while ((line != null) && (line.length() == 0));
-
-            if (line == null) {
-                setKeepAlive(false);
-
-                return null;
-            }
-
-            return new SimpleResponse(new StatusLine(line),
-                    HttpParser.parseHeaders(this.in, HTTP_ELEMENT_CHARSET),
-                    this.in);
-        } catch (IOException e) {
-            close();
-
-            throw e;
-        }
-    }
-
-    public void writeRequest(final SimpleRequest request) throws IOException {
-        if (request == null) {
-            return;
-        }
-
-        ResponseWriter writer = new ResponseWriter(this.out, HTTP_ELEMENT_CHARSET);
-
-        writer.println(request.getRequestLine().toString());
-
-        Iterator item = request.getHeaderIterator();
-
-        while (item.hasNext()) {
-            Header header = (Header) item.next();
-
-            writer.print(header.toExternalForm());
-        }
-
-        writer.println();
-        writer.flush();
-
-        OutputStream outsream = this.out;
-        InputStream content = request.getBody();
-
-        if (content != null) {
-            Header transferenc = request.getFirstHeader("Transfer-Encoding");
-
-            if (transferenc != null) {
-                request.removeHeaders("Content-Length");
-
-                if (transferenc.getValue().indexOf("chunked") != -1) {
-                    outsream = new ChunkedOutputStream(outsream);
-                }
-            }
-
-            byte[] tmp = new byte[4096];
-            int i ;
-
-            while ((i = content.read(tmp)) >= 0) {
-                outsream.write(tmp, 0, i);
-            }
-
-            if (outsream instanceof ChunkedOutputStream) {
-                ((ChunkedOutputStream) outsream).finish();
-            }
-        }
-
-        outsream.flush();
-    }
-
-    public void writeResponse(final SimpleResponse response) throws IOException {
-        if (response == null) {
-            return;
-        }
-
-        ResponseWriter writer = new ResponseWriter(this.out, HTTP_ELEMENT_CHARSET);
-
-        writer.println(response.getStatusLine());
-
-        Iterator item = response.getHeaderIterator();
-
-        while (item.hasNext()) {
-            Header header = (Header) item.next();
-
-            writer.print(header.toExternalForm());
-        }
-
-        writer.println();
-        writer.flush();
-
-        OutputStream outsream = this.out;
-        InputStream content = response.getBody();
-
-        if (content != null) {
-            Header transferenc = response.getFirstHeader("Transfer-Encoding");
-
-            if (transferenc != null) {
-                response.removeHeaders("Content-Length");
-
-                if (transferenc.getValue().indexOf("chunked") != -1) {
-                    outsream = new ChunkedOutputStream(outsream);
-
-                    byte[] tmp = new byte[1024];
-                    int i;
-
-                    while ((i = content.read(tmp)) >= 0) {
-                        outsream.write(tmp, 0, i);
-                    }
-
-                    if (outsream instanceof ChunkedOutputStream) {
-                        ((ChunkedOutputStream) outsream).finish();
-                    }
-                }
-            } else {
-
-                /**
-                 * read the content when needed to embed content-length
-                 */
-                byte[] tmp = new byte[1024];
-                int i;
-
-                while ((i = content.read(tmp)) >= 0) {
-                    outsream.write(tmp, 0, i);
-                }
-            }
-        }
-
-        outsream.flush();
-    }
-
-    public InputStream getInputStream() {
-        return this.in;
-    }
-
-    public OutputStream getOutputStream() {
-        return this.out;
-    }
-
-    public int getSocketTimeout() throws SocketException {
-        return this.socket.getSoTimeout();
-    }
-
-    /**
-     * Returns the ResponseWriter used to write the output to the socket.
-     *
-     * @return Returns this connection's ResponseWriter.
-     */
-    public ResponseWriter getWriter() throws UnsupportedEncodingException {
-        return new ResponseWriter(out);
-    }
-
-    public boolean isKeepAlive() {
-        return this.keepAlive;
-    }
-
-    public synchronized boolean isOpen() {
-        return this.socket != null;
-    }
-
-    public void setKeepAlive(boolean b) {
-        this.keepAlive = b;
-    }
-
-    public void setSocketTimeout(int timeout) throws SocketException {
-        this.socket.setSoTimeout(timeout);
-    }
-
-    public String getURL(String suffix) throws Exception {
-        String hostAddress = getIpAddress();
-        return "http://" + hostAddress + ":" + socket.getLocalPort() + "/" + suffix;
-    }
-
-    /**
-     * Returns the ip address to be used for the replyto epr
-     * CAUTION:
-     * This will go through all the available network interfaces and will try to return an ip address.
-     * First this will try to get the first IP which is not loopback address (127.0.0.1). If none is found
-     * then this will return this will return 127.0.0.1.
-     * This will <b>not<b> consider IPv6 addresses.
-     * <p/>
-     * TODO:
-     * - Improve this logic to genaralize it a bit more
-     * - Obtain the ip to be used here from the Call API
-     *
-     * @return Returns String.
-     * @throws SocketException
-     */
-    public static String getIpAddress() throws SocketException {
-        Enumeration e = NetworkInterface.getNetworkInterfaces();
-        String address = "127.0.0.1";
-
-        while (e.hasMoreElements()) {
-            NetworkInterface netface = (NetworkInterface) e.nextElement();
-            Enumeration addresses = netface.getInetAddresses();
-
-            while (addresses.hasMoreElements()) {
-                InetAddress ip = (InetAddress) addresses.nextElement();
-                if (!ip.isLoopbackAddress() && isIP(ip.getHostAddress())) {
-                    return ip.getHostAddress();
-                }
-            }
-        }
-
-        return address;
-    }
-
-    private static boolean isIP(String hostAddress) {
-        return hostAddress.split("[.]").length == 4;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/HttpService.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/HttpService.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/HttpService.java	(working copy)
@@ -1,52 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/HttpService.java,v 1.1 2004/02/27 19:04:32 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-* [Additional notices, if required by prior licensing conditions]
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.io.IOException;
-
-/**
- * Defines an HTTP request/response service for the SimpleHttpServer
- */
-public interface HttpService {
-
-    /**
-     * This interface represents a serice to process HTTP requests.
-     *
-     * @param request  The HTTP request object.
-     * @param response The HTTP response object.
-     * @return true if this service was able to handle the request, false otherwise.
-     * @throws IOException
-     */
-    public boolean process(final SimpleRequest request, final SimpleResponse response)
-            throws IOException;
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleConnectionThread.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleConnectionThread.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleConnectionThread.java	(working copy)
@@ -1,105 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleConnectionThread.java,v 1.3 2004/11/13 22:38:27 mbecke Exp $
-* $Revision: 224451 $
-* $Date: 2005-07-23 06:23:59 -0400 (Sat, 23 Jul 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import java.io.IOException;
-import java.io.InterruptedIOException;
-
-/**
- * Simple HTTP connection thread.
- */
-public class SimpleConnectionThread implements Runnable {
-	private static final Log log = LogFactory.getLog(SimpleConnectionThread.class);
-    public static final String DEFAULT_CONTENT_CHARSET = "ISO-8859-1";
-    private SimpleHttpServerConnection conn = null;
-    private SimpleConnSet connpool = null;
-    private HttpRequestHandler handler = null;
-    private String name = null;
-    transient boolean stopped;
-
-
-    public SimpleConnectionThread(final String name, final SimpleHttpServerConnection conn,
-                                  final SimpleConnSet connpool, final HttpRequestHandler handler) {
-
-        // super(tg, name);
-        if (conn == null) {
-            throw new IllegalArgumentException("Connection may not be null");
-        }
-
-        if (connpool == null) {
-            throw new IllegalArgumentException("Connection pool not be null");
-        }
-
-        if (handler == null) {
-            throw new IllegalArgumentException("Request handler may not be null");
-        }
-
-        this.conn = conn;
-        this.connpool = connpool;
-        this.handler = handler;
-        this.stopped = false;
-        this.name = name;
-    }
-
-    public synchronized void destroy() {
-        if (conn != null) {
-            conn.close();
-            this.connpool.removeConnection(this.conn);
-            conn = null;
-        }
-        this.stopped = true;
-
-        // interrupt();
-    }
-
-    public void run() {
-        try {
-            //we do not support keep alive
-            this.conn.setKeepAlive(false);
-            SimpleRequest request = this.conn.readRequest();
-            if (request != null) {
-                this.handler.processRequest(this.conn, request);
-            }
-        } catch (InterruptedIOException e) {
-            log.error("Can not run SimpleConnectionThread ", e);
-        }
-        catch (IOException e) {
-            if (!this.stopped && !Thread.interrupted() && log.isDebugEnabled()) {
-                log.debug("[" + this.name + "] I/O error: " + e.getMessage());
-            }
-        } finally {
-            destroy();
-        }
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleRequest.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleRequest.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleRequest.java	(working copy)
@@ -1,257 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleRequest.java,v 1.3 2004/11/13 12:21:28 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.axis2.transport.http.HTTPConstants;
-import org.apache.commons.httpclient.ChunkedInputStream;
-import org.apache.commons.httpclient.ContentLengthInputStream;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HeaderElement;
-import org.apache.commons.httpclient.HeaderGroup;
-import org.apache.commons.httpclient.NameValuePair;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Iterator;
-
-/**
- * A generic HTTP request.
- */
-public class SimpleRequest {
-    public static final String DEFAULT_CONTENT_CHARSET = "ISO-8859-1";
-    private RequestLine requestLine = null;
-    private HeaderGroup headers = new HeaderGroup();
-    private InputStream entity = null;
-
-    public SimpleRequest() {
-        super();
-    }
-
-    public SimpleRequest(final RequestLine requestLine, final Header[] headers) throws IOException {
-        this(requestLine, headers, null);
-    }
-
-    public SimpleRequest(final RequestLine requestLine, final Header[] headers,
-                         final InputStream content)
-            throws IOException {
-        super();
-
-        if (requestLine == null) {
-            throw new IllegalArgumentException("Request line may not be null");
-        }
-
-        this.requestLine = requestLine;
-
-        if (headers != null) {
-            this.headers.setHeaders(headers);
-        }
-
-        if (content != null) {
-
-            // only PUT and POST have content
-            String methodname = requestLine.getMethod();
-
-            if ("POST".equalsIgnoreCase(methodname) || "PUT".equalsIgnoreCase(methodname)) {
-                Header contentLength = this.headers.getFirstHeader("Content-Length");
-                Header transferEncoding = this.headers.getFirstHeader("Transfer-Encoding");
-                InputStream in = content;
-
-                if (transferEncoding != null) {
-                    if (transferEncoding.getValue().indexOf("chunked") != -1) {
-                        in = new ChunkedInputStream(in);
-                    }
-                } else if (contentLength != null) {
-                    long len = getContentLength();
-
-                    if (len >= 0) {
-                        in = new ContentLengthInputStream(in, len);
-                    }
-                }
-
-                this.entity = in;
-            }
-        }
-    }
-
-    public void addHeader(final Header header) {
-        if (header == null) {
-            return;
-        }
-
-        this.headers.addHeader(header);
-    }
-
-    public boolean containsHeader(final String name) {
-        return this.headers.containsHeader(name);
-    }
-
-    public void removeHeaders(final String s) {
-        if (s == null) {
-            return;
-        }
-
-        Header[] headers = this.headers.getHeaders(s);
-
-        for (int i = 0; i < headers.length; i++) {
-            this.headers.removeHeader(headers[i]);
-        }
-    }
-
-    public InputStream getBody() {
-        return this.entity;
-    }
-
-    public byte[] getBodyBytes() throws IOException {
-        InputStream in = getBody();
-
-        if (in != null) {
-            byte[]                tmp = new byte[4096];
-            int bytesRead = 0;
-            ByteArrayOutputStream buffer = new ByteArrayOutputStream(1024);
-
-            while ((bytesRead = in.read(tmp)) != -1) {
-                buffer.write(tmp, 0, bytesRead);
-            }
-
-            return buffer.toByteArray();
-        } else {
-            return null;
-        }
-    }
-
-    public String getBodyString() throws IOException {
-        byte[] raw = getBodyBytes();
-
-        if (raw != null) {
-            return new String(raw, getCharset());
-        } else {
-            return null;
-        }
-    }
-
-    public String getCharset() {
-        String charset = null;
-        Header contenttype = this.headers.getFirstHeader("Content-Type");
-
-        if (contenttype != null) {
-            HeaderElement values[] = contenttype.getElements();
-
-            if (values.length == 1) {
-                NameValuePair param = values[0].getParameterByName("charset");
-
-                if (param != null) {
-                    charset = param.getValue();
-                }
-            }
-        }
-
-        if (charset != null) {
-            return charset;
-        } else {
-            return DEFAULT_CONTENT_CHARSET;
-        }
-    }
-
-    public long getContentLength() {
-        Header contentLength = this.headers.getFirstHeader("Content-Length");
-
-        if (contentLength != null) {
-            try {
-                return Long.parseLong(contentLength.getValue());
-            } catch (NumberFormatException e) {
-                return -1;
-            }
-        } else {
-            return -1;
-        }
-    }
-
-    public String getContentType() {
-        Header contenttype = this.headers.getFirstHeader("Content-Type");
-
-        if (contenttype != null) {
-            return contenttype.getValue();
-        } else {
-            return "text/plain";
-        }
-    }
-
-    /**
-     * To get the cookieID from HTTPHeaders
-     *
-     * @return string : cookieID
-     */
-    public String getCookieID() {
-        Header cookieHeader = this.headers.getFirstHeader(HTTPConstants.HEADER_COOKIE);
-        if (cookieHeader == null) {
-            cookieHeader = this.headers.getFirstHeader(HTTPConstants.HEADER_COOKIE2);
-        }
-        if (cookieHeader == null) {
-            return null;
-        } else {
-            return cookieHeader.getValue();
-        }
-    }
-
-    public Header getFirstHeader(final String s) {
-        return this.headers.getFirstHeader(s);
-    }
-
-    public Iterator getHeaderIterator() {
-        return this.headers.getIterator();
-    }
-
-    public Header[] getHeaders() {
-        return this.headers.getAllHeaders();
-    }
-
-    public RequestLine getRequestLine() {
-        return this.requestLine;
-    }
-
-    public void setHeader(final Header header) {
-        if (header == null) {
-            return;
-        }
-
-        removeHeaders(header.getName());
-        addHeader(header);
-    }
-
-    public void setRequestLine(final RequestLine requestline) {
-        if (requestline == null) {
-            throw new IllegalArgumentException("Request line may not be null");
-        }
-
-        this.requestLine = requestline;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleConnList.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleConnList.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleConnList.java	(working copy)
@@ -1,84 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleConnList.java,v 1.1 2004/11/13 12:21:28 olegk Exp $
-* $Revision: 224451 $
-* $Date: 2005-07-23 06:23:59 -0400 (Sat, 23 Jul 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * A simple list of connections.
- */
-public class SimpleConnList {
-    private List connections = new ArrayList();
-
-    public SimpleConnList() {
-        super();
-    }
-
-    public synchronized void addConnection(final SimpleHttpServerConnection conn) {
-        this.connections.add(conn);
-    }
-
-    public synchronized void removeConnection(final SimpleHttpServerConnection conn) {
-        this.connections.remove(conn);
-    }
-
-    public synchronized SimpleHttpServerConnection removeFirst() {
-        int s = this.connections.size();
-
-        if (s > 0) {
-            return (SimpleHttpServerConnection) this.connections.remove(0);
-        } else {
-            return null;
-        }
-    }
-
-    public synchronized SimpleHttpServerConnection removeLast() {
-        int s = this.connections.size();
-
-        if (s > 0) {
-            return (SimpleHttpServerConnection) this.connections.remove(s - 1);
-        } else {
-            return null;
-        }
-    }
-
-    public synchronized void shutdown() {
-        for (Iterator i = this.connections.iterator(); i.hasNext();) {
-            SimpleHttpServerConnection conn = (SimpleHttpServerConnection) i.next();
-
-            conn.close();
-        }
-
-        this.connections.clear();
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/HttpFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/HttpFactory.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/HttpFactory.java	(working copy)
@@ -42,7 +42,6 @@
 import org.apache.axis2.description.Parameter;
 import org.apache.axis2.description.TransportInDescription;
 import org.apache.axis2.engine.ListenerManager;
-import org.apache.axis2.transport.http.HTTPWorker;
 import org.apache.axis2.transport.http.HTTPWorkerFactory;
 import org.apache.http.HttpServerConnection;
 import org.apache.http.impl.DefaultHttpParams;
Index: modules/core/src/org/apache/axis2/transport/http/server/ProxyAuthRequestHandler.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/ProxyAuthRequestHandler.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/ProxyAuthRequestHandler.java	(working copy)
@@ -1,141 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/ProxyAuthRequestHandler.java,v 1.12 2004/11/28 15:44:39 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.Credentials;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.httpclient.UsernamePasswordCredentials;
-import org.apache.commons.httpclient.auth.BasicScheme;
-
-import java.io.IOException;
-
-/**
- * This request handler guards access to a proxy when used in a request handler
- * chain. It checks the headers for valid credentials and performs the
- * authentication handshake if necessary.
- */
-public class ProxyAuthRequestHandler implements HttpRequestHandler {
-
-    /**
-     * The proxy authenticate response header.
-     */
-    public static final String PROXY_AUTH_RESP = "Proxy-Authorization";
-    private Credentials credentials = null;
-    private String realm = null;
-    private boolean keepalive = true;
-
-    public ProxyAuthRequestHandler(final Credentials creds) {
-        this(creds, null, true);
-    }
-
-    public ProxyAuthRequestHandler(final Credentials creds, final String realm) {
-        this(creds, realm, true);
-    }
-
-    /**
-     * TODO replace creds parameter with a class specific to an auth scheme
-     * encapsulating all required information for a specific scheme
-     *
-     * @param creds
-     */
-    public ProxyAuthRequestHandler(final Credentials creds, final String realm, boolean keepalive) {
-        if (creds == null) {
-            throw new IllegalArgumentException("Credentials may not be null");
-        }
-
-        this.credentials = creds;
-        this.keepalive = keepalive;
-
-        if (realm != null) {
-            this.realm = realm;
-        } else {
-            this.realm = "test";
-        }
-    }
-
-    /**
-     * Checks if the credentials provided by the client match the required
-     * credentials
-     *
-     * @param clientAuth
-     * @return true if the client is authorized, false if not.
-     */
-    private boolean checkAuthorization(Header clientAuth) {
-        String expectedAuthString =
-                BasicScheme.authenticate((UsernamePasswordCredentials) credentials, "ISO-8859-1");
-
-        return expectedAuthString.equals(clientAuth.getValue());
-    }
-
-    // TODO add more auth schemes
-    private SimpleResponse performBasicHandshake(final SimpleHttpServerConnection conn,
-                                                 final SimpleRequest request) {
-        SimpleResponse response = new SimpleResponse();
-
-        response.setStatusLine(request.getRequestLine().getHttpVersion(),
-                HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED);
-
-        if (!request.getRequestLine().getMethod().equalsIgnoreCase("HEAD")) {
-            response.setBodyString("unauthorized");
-        }
-
-        response.addHeader(new Header("Proxy-Authenticate", "basic realm=\"" + this.realm + "\""));
-
-        if (this.keepalive) {
-            response.addHeader(new Header("Proxy-Connection", "keep-alive"));
-            conn.setKeepAlive(true);
-        } else {
-            response.addHeader(new Header("Proxy-Connection", "close"));
-            conn.setKeepAlive(false);
-        }
-
-        return response;
-    }
-
-    public boolean processRequest(final SimpleHttpServerConnection conn,
-                                  final SimpleRequest request)
-            throws IOException {
-        Header clientAuth = request.getFirstHeader(PROXY_AUTH_RESP);
-
-        if ((clientAuth != null) && checkAuthorization(clientAuth)) {
-            return false;
-        } else {
-            SimpleResponse response = performBasicHandshake(conn, request);
-
-            // Make sure the request body is fully consumed
-            request.getBodyBytes();
-            conn.writeResponse(response);
-
-            return true;
-        }
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleHttpServer.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleHttpServer.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleHttpServer.java	(working copy)
@@ -31,18 +31,13 @@
 package org.apache.axis2.transport.http.server;
 
 import java.io.IOException;
-import org.apache.axis2.context.ConfigurationContext;
 
+import org.apache.axis2.context.ConfigurationContext;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.impl.DefaultHttpParams;
-import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
-import org.apache.http.params.HttpProtocolParams;
 
 import edu.emory.mathcs.backport.java.util.concurrent.ExecutorService;
-import edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue;
-import edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor;
 import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
 
 /**
@@ -52,7 +47,6 @@
 
     private static Log LOG = LogFactory.getLog(SimpleHttpServer.class);
     
-    private static final String ORIGIN_SERVER = "Simple-Server/1.1";
     private static final int SHUTDOWN_GRACE_PERIOD = 3000; // ms
     
     private HttpFactory httpFactory;
@@ -62,10 +56,8 @@
     
     private IOProcessor listener = null;
     private ExecutorService listenerExecutor = null;
-    private ThreadGroup listenertg = null;
     private HttpConnectionManager connmanager = null;
     private ExecutorService requestExecutor = null;
-    private ThreadGroup conntg = null;
 
     public SimpleHttpServer(ConfigurationContext configurationContext, WorkerFactory workerFactory, int port) throws IOException {
         this(new HttpFactory(configurationContext, port, workerFactory), port);
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleConnSet.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleConnSet.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleConnSet.java	(working copy)
@@ -1,62 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleConnSet.java,v 1.1 2004/11/13 12:21:28 olegk Exp $
-* $Revision: 224451 $
-* $Date: 2005-07-23 06:23:59 -0400 (Sat, 23 Jul 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
-
-/**
- * A simple set of connections.
- */
-public class SimpleConnSet {
-    private Set connections = new HashSet();
-
-    public SimpleConnSet() {
-        super();
-    }
-
-    public synchronized void addConnection(final SimpleHttpServerConnection conn) {
-        this.connections.add(conn);
-    }
-
-    public synchronized void removeConnection(final SimpleHttpServerConnection conn) {
-        this.connections.remove(conn);
-    }
-
-    public synchronized void shutdown() {
-        for (Iterator i = connections.iterator(); i.hasNext();) {
-            SimpleHttpServerConnection conn = (SimpleHttpServerConnection) i.next();
-
-            conn.close();
-        }
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/HttpRequestHandler.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/HttpRequestHandler.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/HttpRequestHandler.java	(working copy)
@@ -1,64 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/HttpRequestHandler.java,v 1.4 2004/02/27 19:01:33 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-* [Additional notices, if required by prior licensing conditions]
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.io.IOException;
-
-/**
- * Defines an HTTP request handler for the SimpleHttpServer
- */
-public interface HttpRequestHandler {
-
-    /**
-     * The request handler is asked to process this request.
-     * <p/>
-     * If it is not capable/interested in processing it, this call should
-     * be simply ignored.
-     * <p/>
-     * Any modification of the output stream (via <code>conn.getWriter()</code>)
-     * by this request handler will stop the execution chain and return the output
-     * to the client.
-     * <p/>
-     * The handler may also rewrite the request parameters (this is useful in
-     * {@link HttpRequestHandlerChain} structures).
-     *
-     * @param conn    The Connection object to which this request belongs to.
-     * @param request The request object.
-     * @return true if this handler handled the request and no other handlers in the
-     *         chain should be called, false otherwise.
-     * @throws IOException
-     */
-    public boolean processRequest(final SimpleHttpServerConnection conn,
-                                  final SimpleRequest request)
-            throws IOException;
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleHost.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleHost.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleHost.java	(working copy)
@@ -1,105 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleHost.java,v 1.1 2004/11/13 12:21:28 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 2002-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-public class SimpleHost implements Cloneable {
-    private String hostname = null;
-    private int port = -1;
-
-    public SimpleHost(final SimpleHost httphost) {
-        super();
-        this.hostname = httphost.hostname;
-        this.port = httphost.port;
-    }
-
-    public SimpleHost(final String hostname, int port) {
-        super();
-
-        if (hostname == null) {
-            throw new IllegalArgumentException("Host name may not be null");
-        }
-
-        if (port < 0) {
-            throw new IllegalArgumentException("Port may not be negative");
-        }
-
-        this.hostname = hostname;
-        this.port = port;
-    }
-
-    public Object clone() {
-        return new SimpleHost(this);
-    }
-
-    public boolean equals(final Object o) {
-        if (o instanceof SimpleHost) {
-            if (o == this) {
-                return true;
-            }
-
-            SimpleHost that = (SimpleHost) o;
-
-            if (!this.hostname.equalsIgnoreCase(that.hostname)) {
-                return false;
-            }
-
-            if (this.port != that.port) {
-                return false;
-            }
-
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    public int hashCode() {
-        return this.hostname.hashCode() + this.port;
-    }
-
-    public String toString() {
-        StringBuffer buffer = new StringBuffer(50);
-
-        buffer.append(this.hostname);
-        buffer.append(':');
-        buffer.append(this.port);
-
-        return buffer.toString();
-    }
-
-    public String getHostName() {
-        return this.hostname;
-    }
-
-    public int getPort() {
-        return this.port;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/HttpRequestHandlerChain.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/HttpRequestHandlerChain.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/HttpRequestHandlerChain.java	(working copy)
@@ -1,90 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/HttpRequestHandlerChain.java,v 1.6 2004/11/28 15:44:39 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-* [Additional notices, if required by prior licensing conditions]
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * Maintains a chain of {@link HttpRequestHandler}s where new request-handlers
- * can be prepended/appended.
- * <p/>
- * For each call to {@link #processRequest(SimpleHttpServerConnection,SimpleRequest)}
- * we iterate over the chain from the start to the end, stopping as soon as a handler
- * has claimed the output.
- */
-public class HttpRequestHandlerChain implements HttpRequestHandler {
-    private List subhandlers = new ArrayList();
-
-    public HttpRequestHandlerChain() {
-        super();
-    }
-
-    public HttpRequestHandlerChain(final HttpRequestHandlerChain chain) {
-        super();
-
-        if (chain != null) {
-            this.subhandlers.clear();
-            this.subhandlers.addAll(chain.subhandlers);
-        }
-    }
-
-    public synchronized void appendHandler(HttpRequestHandler handler) {
-        subhandlers.add(handler);
-    }
-
-    public synchronized void clear() {
-        subhandlers.clear();
-    }
-
-    public synchronized void prependHandler(HttpRequestHandler handler) {
-        subhandlers.add(0, handler);
-    }
-
-    public synchronized boolean processRequest(final SimpleHttpServerConnection conn,
-                                               final SimpleRequest request)
-            throws IOException {
-        for (Iterator it = subhandlers.iterator(); it.hasNext();) {
-            HttpRequestHandler h = (HttpRequestHandler) it.next();
-            boolean stop = h.processRequest(conn, request);
-
-            if (stop) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/SimpleSocketFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/SimpleSocketFactory.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/SimpleSocketFactory.java	(working copy)
@@ -1,41 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/SimpleSocketFactory.java,v 1.1 2004/12/11 22:35:26 olegk Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import java.io.IOException;
-import java.net.ServerSocket;
-
-/**
- * Defines a socket factory interface
- */
-public interface SimpleSocketFactory {
-    ServerSocket createServerSocket(int port) throws IOException;
-}
Index: modules/core/src/org/apache/axis2/transport/http/server/HttpServiceHandler.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/HttpServiceHandler.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/http/server/HttpServiceHandler.java	(working copy)
@@ -1,147 +0,0 @@
-/*
-* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/test/org/apache/commons/httpclient/server/HttpServiceHandler.java,v 1.9 2004/11/13 22:38:27 mbecke Exp $
-* $Revision: 155418 $
-* $Date: 2005-02-26 08:01:52 -0500 (Sat, 26 Feb 2005) $
-*
-* ====================================================================
-*
-*  Copyright 1999-2004 The Apache Software Foundation
-*
-*  Licensed under the Apache License, Version 2.0 (the "License");
-*  you may not use this file except in compliance with the License.
-*  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-*  Unless required by applicable law or agreed to in writing, software
-*  distributed under the License is distributed on an "AS IS" BASIS,
-*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-*  See the License for the specific language governing permissions and
-*  limitations under the License.
-* ====================================================================
-*
-* This software consists of voluntary contributions made by many
-* individuals on behalf of the Apache Software Foundation.  For more
-* information on the Apache Software Foundation, please see
-* <http://www.apache.org/>.
-*
-*/
-
-
-package org.apache.axis2.transport.http.server;
-
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpVersion;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-/**
- * This request handler provides service interface similar to that of Servlet API.
- */
-public class HttpServiceHandler implements HttpRequestHandler {
-    private HttpService service = null;
-
-    public HttpServiceHandler(final HttpService service) {
-        super();
-
-        if (service == null) {
-            throw new IllegalArgumentException("Service may not be null");
-        }
-
-        this.service = service;
-    }
-
-    public boolean processRequest(final SimpleHttpServerConnection conn,
-                                  final SimpleRequest request)
-            throws IOException {
-        if (conn == null) {
-            throw new IllegalArgumentException("Connection may not be null");
-        }
-
-        if (request == null) {
-            throw new IllegalArgumentException("Request may not be null");
-        }
-
-        SimpleResponse response = new SimpleResponse();
-
-        this.service.process(request, response);
-
-        // Nake sure the request if fully consumed
-        request.getBodyBytes();
-
-        // Ensure there's a content type header
-        if (!response.containsHeader("Content-Type")) {
-            response.addHeader(new Header("Content-Type", "text/plain"));
-        }
-
-        // Ensure there's a content length or transfer encoding header
-        if (!response.containsHeader("Content-Length")
-                && !response.containsHeader("Transfer-Encoding")) {
-            InputStream content = response.getBody();
-
-            if (content != null) {
-                long len = response.getContentLength();
-
-                if (len < 0) {
-                    if (response.getHttpVersion().lessEquals(HttpVersion.HTTP_1_0)) {
-                        throw new IOException("Chunked encoding not supported for HTTP version "
-                                + response.getHttpVersion());
-                    }
-
-                    Header header = new Header("Transfer-Encoding", "chunked");
-
-                    response.addHeader(header);
-                } else {
-                    Header header = new Header("Content-Length", Long.toString(len));
-
-                    response.setHeader(header);
-                }
-            } else {
-                Header header = new Header("Content-Length", "0");
-
-                response.addHeader(header);
-            }
-        }
-
-        if (!response.containsHeader("Connection")) {
-
-            // See if the the client explicitly handles connection persistence
-            Header connheader = request.getFirstHeader("Connection");
-
-            if (connheader != null) {
-                if (connheader.getValue().equalsIgnoreCase("keep-alive")) {
-                    Header header = new Header("Connection", "keep-alive");
-
-                    response.addHeader(header);
-                    conn.setKeepAlive(true);
-                }
-
-                if (connheader.getValue().equalsIgnoreCase("close")) {
-                    Header header = new Header("Connection", "close");
-
-                    response.addHeader(header);
-                    conn.setKeepAlive(false);
-                }
-            } else {
-
-                // Use protocol default connection policy
-                if (response.getHttpVersion().greaterEquals(HttpVersion.HTTP_1_1)) {
-                    conn.setKeepAlive(true);
-                } else {
-                    conn.setKeepAlive(false);
-                }
-            }
-        }
-
-        if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {
-
-            // this is a head request, we don't want to send the actualy content
-            response.setBody(null);
-        }
-
-        conn.writeResponse(response);
-
-        return true;
-    }
-}
Index: modules/core/src/org/apache/axis2/transport/tcp/TCPServer.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/tcp/TCPServer.java	(revision 412993)
+++ modules/core/src/org/apache/axis2/transport/tcp/TCPServer.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.axis2.engine.ListenerManager;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.transport.TransportListener;
-import org.apache.axis2.transport.http.server.SimpleHttpServerConnection;
+import org.apache.axis2.transport.http.server.HttpUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -196,7 +196,7 @@
         }
         if (ip == null) {
             try {
-                ip = SimpleHttpServerConnection.getIpAddress();
+                ip = HttpUtils.getIpAddress();
             } catch (SocketException e) {
                 throw AxisFault.makeFault(e);
             }
