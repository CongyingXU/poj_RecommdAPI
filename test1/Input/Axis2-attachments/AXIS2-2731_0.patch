Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java	(revision 542399)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java	(working copy)
@@ -6,6 +6,7 @@
 import java.awt.event.ActionListener;
 import java.io.File;
 import java.io.StringWriter;
+import java.util.TimerTask;
 
 /*
 * Copyright 2004,2005 The Apache Software Foundation.
@@ -96,89 +97,120 @@
                 }
             }
 
-            String selected = java2CodeFrame.secondPanel.cmbCodeGenOption.getSelectedItem().toString() ;
-            if (selected.equalsIgnoreCase("default")) {
-                File temp = java2CodeFrame.secondPanel.codegenBean.getTemp();
-                java2CodeFrame.secondPanel.setDefaultCommonConfigurations();
-                java2CodeFrame.secondPanel.codegenBean.setOutput(temp.getAbsolutePath() );
+            final String selected = java2CodeFrame.secondPanel.cmbCodeGenOption.getSelectedItem().toString() ;
+            java2CodeFrame.outputpane.progressBar.setVisible(true);
+            final BarThread stepper = new BarThread(java2CodeFrame.outputpane.progressBar);
+            stepper.start();
+            new java.util.Timer(true).schedule(new TimerTask() {
+                public void run() {
+                    stepper.requestStop();
 
-                try {
-
-                    java2CodeFrame.generateDefaultClientCode( temp) ;
-                } catch (Exception e1) {
-                    StringWriter writer = new StringWriter();
-                    JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                            "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
-                    java2CodeFrame.dispose();
-                    return;
                 }
+            }, 1000);
 
-                JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
-                        "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
-                java2CodeFrame.dispose();
-                return;
+            new Thread(){public void run(){
+                if (selected.equalsIgnoreCase("default")) {
 
-            }
+                    String output = java2CodeFrame.outputpane.buttonGroup.getSelection().getActionCommand();
+                    java2CodeFrame.secondPanel.setDefaultCommonConfigurations();
 
-            else if (selected.equalsIgnoreCase("custom")) {
+                    if (output.equalsIgnoreCase("radCurrentProject")) {
 
-                String output = java2CodeFrame.outputpane.buttonGroup.getSelection().getActionCommand();
+                        File temp = java2CodeFrame.secondPanel.codegenBean.getTemp();
+                        java2CodeFrame.secondPanel.codegenBean.setOutput(temp.getAbsolutePath() );
+                        try {
+                            java2CodeFrame.generatecode() ;
+                            java2CodeFrame.copyDirectory(new File(temp + File.separator + "src"), new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem()));
+                            File src = new File(temp + File.separator + "resources");
+                            if (src.isDirectory())
+                                java2CodeFrame.copyDirectory(src, new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem() + File.separator + ".." + File.separator + "resources"));
 
-                if (output.equalsIgnoreCase("radCurrentProject")) {
-
-                    File temp = java2CodeFrame.secondPanel.codegenBean.getTemp();
-                    java2CodeFrame.secondPanel.codegenBean.setOutput(temp.getAbsolutePath());
-                    try {
-                        java2CodeFrame.generatecode();
-                        java2CodeFrame.copyDirectory(new File(temp + File.separator + "src"), new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem()));
-                        File src = new File(temp + File.separator + "resources");
-                        if (src.isDirectory())
-                            java2CodeFrame.copyDirectory(src, new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem() + File.separator + ".." + File.separator + "resources"));
-
-                        java2CodeFrame.deleteDirectory(temp);
-                    } catch (Exception e1) {
-                        StringWriter writer = new StringWriter();
-                        JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                                "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
+                            java2CodeFrame.deleteDirectory(temp);
+                        } catch (Exception e1) {
+                            java2CodeFrame.outputpane.progressBar.setVisible(false);
+                            StringWriter writer = new StringWriter();
+                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
+                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
+                            java2CodeFrame.dispose();
+                            return;
+                        }
+                        java2CodeFrame.outputpane.progressBar.setVisible(false);
+                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
+                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
                         java2CodeFrame.dispose();
                         return;
+                    }else if(output.equalsIgnoreCase("radCustomLocation") ){
+                        try{
+                            java2CodeFrame.generatecode();
+                        } catch (Exception e1) {
+                            java2CodeFrame.outputpane.progressBar.setVisible(false);
+                            StringWriter writer = new StringWriter();
+                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
+                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
+                            java2CodeFrame.dispose();
+                            return;
+                        }
+                        java2CodeFrame.outputpane.progressBar.setVisible(false);
+                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
+                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
+                        java2CodeFrame.dispose();
+                        return;
                     }
-
                 }
-                else
-                {
 
-                    try {
+                else if (selected.equalsIgnoreCase("custom")) {
 
-                        java2CodeFrame.generatecode();
+                    String output = java2CodeFrame.outputpane.buttonGroup.getSelection().getActionCommand();
+                    java2CodeFrame.secondPanel.fillBean();
+                    if (output.equalsIgnoreCase("radCurrentProject")) {
 
-                    } catch (Exception e1) {
-                        StringWriter writer = new StringWriter();
-                        JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                                "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
+                        File temp = java2CodeFrame.secondPanel.codegenBean.getTemp();
+                        java2CodeFrame.secondPanel.codegenBean.setOutput(temp.getAbsolutePath());
+                        //java2CodeFrame.secondPanel.codegenBean.setProject();
+                        try {
+                            java2CodeFrame.generatecode();
+                            java2CodeFrame.copyDirectory(new File(temp + File.separator + "src"), new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem()));
+                            File src = new File(temp + File.separator + "resources");
+                            if (src.isDirectory())
+                                java2CodeFrame.copyDirectory(src, new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem() + File.separator + ".." + File.separator + "resources"));
+
+                            java2CodeFrame.deleteDirectory(temp);
+                        } catch (Exception e1) {
+                            StringWriter writer = new StringWriter();
+                            java2CodeFrame.outputpane.progressBar.setVisible(false);
+                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
+                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
+                            java2CodeFrame.dispose();
+                            return;
+                        }
+                        java2CodeFrame.outputpane.progressBar.setVisible(false);
+                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
+                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
                         java2CodeFrame.dispose();
                         return;
                     }
+                    else if(output.equalsIgnoreCase("radCustomLocation"))
+                    {
+                        try {
+                            java2CodeFrame.generatecode();
+                        } catch (Exception e1) {
+                            java2CodeFrame.outputpane.progressBar.setVisible(false);
+                            StringWriter writer = new StringWriter();
+                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
+                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
+                            java2CodeFrame.dispose();
+                            return;
+                        }
+                        java2CodeFrame.outputpane.progressBar.setVisible(false);
+                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
+                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
+                        java2CodeFrame.dispose();
+                        return;
+                    }
                 }
-
             }
-            try {
+            }.start();
 
-                java2CodeFrame.generatecode();
-
-            } catch (Exception e1) {
-                System.out.println(e1);
-                StringWriter writer = new StringWriter();
-                JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                        "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
-                java2CodeFrame.dispose();
-                return;
-            }
-            JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
-                    "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
-            java2CodeFrame.dispose();
-            return;
-
         } else if (obj == btnNext) {
 
             java2CodeFrame.setPane();
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/OutPutPane.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/OutPutPane.java	(revision 542399)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/OutPutPane.java	(working copy)
@@ -42,6 +42,7 @@
     JRadioButton radCustomLocation;
 
     ButtonGroup buttonGroup;
+    ProgressBarPanel progressBar;
 
     JLabel lblModuleSrc;
     JComboBox cmbModuleSrc;
@@ -96,11 +97,11 @@
         cmbModuleSrc.setEnabled(true);
         add(cmbModuleSrc);
 
+        progressBar= new ProgressBarPanel();
+        progressBar.setVisible(false);
+        progressBar.setBorder(BorderFactory.createTitledBorder("") );
+        add(progressBar );
 
-//        loadCmbCurrentProject();
-//        loadcmbModuleSrcProject();
-
-
         setSize(getPreferredSize());
     }
 
@@ -189,70 +190,75 @@
             loadcmbModuleSrcProject();
         }
     }
+}
 
-    class OutPutPaneLayout implements LayoutManager {
+class OutPutPaneLayout implements LayoutManager {
 
-        public OutPutPaneLayout() {
-        }
+    public OutPutPaneLayout() {
+    }
 
-        public void addLayoutComponent(String name, Component comp) {
-        }
+    public void addLayoutComponent(String name, Component comp) {
+    }
 
-        public void removeLayoutComponent(Component comp) {
-        }
+    public void removeLayoutComponent(Component comp) {
+    }
 
-        public Dimension preferredLayoutSize(Container parent) {
-            Dimension dim = new Dimension(0, 0);
+    public Dimension preferredLayoutSize(Container parent) {
+        Dimension dim = new Dimension(0, 0);
 
-            Insets insets = parent.getInsets();
-            dim.width = 611 + insets.left + insets.right;
-            dim.height = 600 + insets.top + insets.bottom;
+        Insets insets = parent.getInsets();
+        dim.width = 611 + insets.left + insets.right;
+        dim.height = 600 + insets.top + insets.bottom;
 
-            return dim;
-        }
+        return dim;
+    }
 
-        public Dimension minimumLayoutSize(Container parent) {
-            return new Dimension(0, 0);
-        }
+    public Dimension minimumLayoutSize(Container parent) {
+        return new Dimension(0, 0);
+    }
 
-        public void layoutContainer(Container parent) {
-            Insets insets = parent.getInsets();
+    public void layoutContainer(Container parent) {
+        Insets insets = parent.getInsets();
 
-            Component c;
-            c = parent.getComponent(2);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 8, insets.top + 8, 350, 24);
-            }
-            c = parent.getComponent(3);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 30, insets.top + 40, 150, 24);
-            }
-            c = parent.getComponent(5);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 200, insets.top + 40, 330, 24);
-            }
-            c = parent.getComponent(6);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 30, insets.top + 70, 150, 24);
-            }
-            c = parent.getComponent(7);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 200, insets.top + 70, 330, 24);
-            }
-            c = parent.getComponent(4);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 8, insets.top + 100, 350, 24);
-            }
-            c = parent.getComponent(0);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 30, insets.top + 130, 350, 24);
-            }
-            c = parent.getComponent(1);
-            if (c.isVisible()) {
-                c.setBounds(insets.left + 400, insets.top + 130, 80, 24);
-            }
+        Component c;
+        c = parent.getComponent(2);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 8, insets.top + 8, 350, 24);
         }
+        c = parent.getComponent(3);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 30, insets.top + 40, 150, 24);
+        }
+        c = parent.getComponent(5);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 200, insets.top + 40, 330, 24);
+        }
+        c = parent.getComponent(6);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 30, insets.top + 70, 150, 24);
+        }
+        c = parent.getComponent(7);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 200, insets.top + 70, 330, 24);
+        }
+        c = parent.getComponent(4);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 8, insets.top + 100, 350, 24);
+        }
+        c = parent.getComponent(0);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 30, insets.top + 130, 350, 24);
+        }
+        c = parent.getComponent(1);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 400, insets.top + 130, 80, 24);
+        }
+         c = parent.getComponent(8);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 20, insets.top + 375, 510, 80);
+        }
     }
-
 }
 
+
+
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java	(revision 542399)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java	(working copy)
@@ -227,7 +227,7 @@
         rdasync .setEnabled(false);
         serverSide .setEnabled(false);
         serverSideInterface .setEnabled(false);
-        serviceXML .setEnabled(false);
+        serviceXML.setEnabled(false);
         all.setEnabled(false);
         table.setEnabled(false);
         spTable.setEnabled(false);
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/Java2CodeFrame.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/Java2CodeFrame.java	(revision 542399)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/Java2CodeFrame.java	(working copy)
@@ -277,6 +277,7 @@
                         , "  set the output project for the generated code");
                 this.secondPanel.setVisible(false);
                 this.plMiddle.setVisible(false);
+                this.secondPanel.fillBean();
                 outputpane.loadCmbCurrentProject();
                 outputpane.loadcmbModuleSrcProject();
                 this.outputpane.setVisible(true);
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/ProgressBarPanel.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/ProgressBarPanel.java	(revision 0)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/ProgressBarPanel.java	(revision 0)
@@ -0,0 +1,88 @@
+package org.apache.axis2.tools.idea;
+
+import javax.swing.*;
+import java.awt.*;
+
+public class ProgressBarPanel extends JPanel {
+    protected JLabel lbltitle;
+    protected JProgressBar progressBar;
+    protected JLabel lblprogress;
+
+    public ProgressBarPanel(){
+
+        ProgressLayout customLayout = new ProgressLayout();
+
+        setLayout(customLayout);
+
+        lbltitle =new JLabel("Scanning files .......");
+        add(lbltitle );
+
+        progressBar =new JProgressBar(0,100);
+        progressBar.setBorderPainted(true);
+        progressBar.setStringPainted(true);
+        Dimension dim=new Dimension();
+        dim.setSize(440,24);
+        progressBar.setPreferredSize(dim);
+        add(progressBar );
+
+        lblprogress=new JLabel();
+        add(lblprogress);
+
+
+
+        setSize(getPreferredSize());
+
+    }
+    public JProgressBar getProgressBar(){
+        return progressBar;
+    }
+     public JLabel getLabelProgress(){
+        return lblprogress;
+    }
+     public JLabel getLabelTitle(){
+        return lblprogress;
+    }
+
+}
+class ProgressLayout implements LayoutManager {
+    public ProgressLayout() {
+    }
+
+    public void addLayoutComponent(String name, Component comp) {
+    }
+
+    public void removeLayoutComponent(Component comp) {
+    }
+
+    public Dimension preferredLayoutSize(Container parent) {
+        Dimension dim = new Dimension(0, 0);
+
+        Insets insets = parent.getInsets();
+        dim.width = 500 + insets.left + insets.right;
+        dim.height = 100 + insets.top + insets.bottom;
+
+        return dim;
+    }
+
+    public Dimension minimumLayoutSize(Container parent) {
+        return new Dimension(0, 0);
+    }
+
+    public void layoutContainer(Container parent) {
+        Insets insets = parent.getInsets();
+
+        Component c;
+        c = parent.getComponent(1);
+        if (c.isVisible()) {
+            c.setBounds(insets.left +8, insets.top + 30, 440, 24);
+        }
+        c = parent.getComponent(2);
+        if (c.isVisible()) {
+            c.setBounds(insets.left + 460, insets.top + 30, 30, 24);
+        }
+        c = parent.getComponent(0);
+        if (c.isVisible()) {
+            c.setBounds(insets.left +8, insets.top , 200, 24);
+        }
+    }
+}
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BarThread.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BarThread.java	(revision 0)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BarThread.java	(revision 0)
@@ -0,0 +1,55 @@
+package org.apache.axis2.tools.idea;
+
+import javax.swing.*;
+import java.lang.reflect.InvocationTargetException;
+
+
+public class BarThread extends Thread {
+
+    private  volatile boolean stop = false;
+    private static int DELAY = 100;
+    public volatile String val=null;
+    protected JProgressBar progressBar;
+    protected JLabel lblprogress ;
+    protected JLabel lbltitle;
+
+    public BarThread(ProgressBarPanel bar) {
+        progressBar = bar.getProgressBar();
+        lblprogress =bar.getLabelProgress();
+        lbltitle= bar.getLabelTitle();
+    }
+
+    public  void requestStop() {
+        stop = true;
+    }
+
+    public void run() {
+        int minimum = progressBar.getMinimum();
+        int maximum = progressBar.getMaximum();
+        Runnable runner = new Runnable() {
+            public void run() {
+                if(stop && progressBar.getValue()<100){
+
+                    progressBar.setIndeterminate(false);
+                    int value = progressBar.getValue();
+                    progressBar.setValue(value+10);
+                    lblprogress.setText(String.valueOf(value+9)+" %");
+                    lbltitle.setText("Genarate Code. Please wait.....");
+                } else if(!stop){
+
+                    progressBar.setIndeterminate(true);
+
+                }
+            }
+        };
+        for (int i=minimum; i<maximum; i++) {
+            try {
+                SwingUtilities.invokeAndWait(runner);
+                // Our task for each step is to just sleep
+                Thread.sleep(DELAY);
+            } catch (InterruptedException ignoredException) {
+            } catch (InvocationTargetException ignoredException) {
+            }
+        }
+    }
+}
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/bean/CodegenBean.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/bean/CodegenBean.java	(revision 542399)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/bean/CodegenBean.java	(working copy)
@@ -191,6 +191,10 @@
                 optionMap.put(CommandLineOptionConstants.WSDL2JavaConstants.GENERATE_ALL_OPTION, new CommandLineOption(
                         CommandLineOptionConstants.WSDL2JavaConstants.GENERATE_ALL_OPTION, new String[0]));
             }
+            if (isServerSideInterface ) {
+                optionMap.put(CommandLineOptionConstants.WSDL2JavaConstants.SERVER_SIDE_INTERFACE_OPTION, new CommandLineOption(
+                        CommandLineOptionConstants.WSDL2JavaConstants.SERVER_SIDE_INTERFACE_OPTION, new String[0]));
+            }
         }
         //test case
         if (isTestCase) {
