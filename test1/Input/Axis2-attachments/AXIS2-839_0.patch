Index: modules/core/src/org/apache/axis2/transport/http/SOAPOverHTTPSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/SOAPOverHTTPSender.java	(revision 416642)
+++ modules/core/src/org/apache/axis2/transport/http/SOAPOverHTTPSender.java	(working copy)
@@ -85,12 +85,11 @@
         //setting the coolie in the out path
         Object cookieString = msgContext.getProperty(Constants.COOKIE_STRING);
         if (cookieString != null) {
-            String cookie =(String) cookieString;
-            int index = cookie.indexOf(";");
-            if(index >0){
-                cookie = cookie.substring(0,index);
-            }
-            postMethod.setRequestHeader(HTTPConstants.HEADER_COOKIE,cookie);
+            StringBuffer buffer = new StringBuffer();
+            buffer.append(Constants.SESSION_COOKIE);
+            buffer.append("=");
+            buffer.append(cookieString);
+            postMethod.setRequestHeader(HTTPConstants.HEADER_COOKIE, buffer.toString());
         }
 
         postMethod.setRequestHeader(HTTPConstants.HEADER_HOST, url.getHost());
Index: modules/core/src/org/apache/axis2/transport/http/AbstractHTTPSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(revision 416642)
+++ modules/core/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(working copy)
@@ -228,16 +228,34 @@
                 }
             }
         }
-        Header cookieHeader =
-                method.getResponseHeader(HTTPConstants.HEADER_SET_COOKIE);
-        if (cookieHeader == null) {
-            cookieHeader =
-                    method.getResponseHeader(HTTPConstants.HEADER_SET_COOKIE2);
+        
+        String sessionCookie = null;
+        // Process old style headers first
+        Header[] cookieHeaders = method.getResponseHeaders(HTTPConstants.HEADER_SET_COOKIE);
+        for (int i = 0; i < cookieHeaders.length; i++) {
+            HeaderElement[] elements = cookieHeaders[i].getElements();
+            for (int e = 0; e < elements.length; e++) {
+                HeaderElement element = elements[e];
+                if (Constants.SESSION_COOKIE.equalsIgnoreCase(element.getName())) {
+                    sessionCookie = element.getValue();
+                }
+            }
         }
-        if (cookieHeader != null) {
-            msgContext.getServiceContext().setProperty(Constants.COOKIE_STRING,
-                    cookieHeader.getValue());
+        // Overwrite old style cookies with new style ones if present
+        cookieHeaders = method.getResponseHeaders(HTTPConstants.HEADER_SET_COOKIE2);
+        for (int i = 0; i < cookieHeaders.length; i++) {
+            HeaderElement[] elements = cookieHeaders[i].getElements();
+            for (int e = 0; e < elements.length; e++) {
+                HeaderElement element = elements[e];
+                if (Constants.SESSION_COOKIE.equalsIgnoreCase(element.getName())) {
+                    sessionCookie = element.getValue();
+                }
+            }
         }
+
+        if (sessionCookie != null) {
+            msgContext.getServiceContext().setProperty(Constants.COOKIE_STRING, sessionCookie);
+        }        
     }
 
     protected void processResponse(HttpMethodBase httpMethod,
Index: modules/core/src/org/apache/axis2/transport/http/server/RequestSessionCookie.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/RequestSessionCookie.java	(revision 416642)
+++ modules/core/src/org/apache/axis2/transport/http/server/RequestSessionCookie.java	(working copy)
@@ -52,11 +52,14 @@
         }
         
         String sessionCookie = null;
-        Header header = request.getFirstHeader(HTTPConstants.HEADER_COOKIE);
-        if (header != null) {
-            HeaderElement[] elements = header.getElements();
-            if (elements.length > 0) {
-                sessionCookie = elements[0].getName(); 
+        Header[] headers = request.getHeaders(HTTPConstants.HEADER_COOKIE);
+        for (int i = 0; i < headers.length; i++) {
+            HeaderElement[] elements = headers[i].getElements();
+            for (int e = 0; e < elements.length; e++) {
+                HeaderElement element = elements[e];
+                if (Constants.SESSION_COOKIE.equalsIgnoreCase(element.getName())) {
+                    sessionCookie = element.getValue();
+                }
             }
         }
         context.setAttribute(Constants.COOKIE_STRING, sessionCookie);
Index: modules/core/src/org/apache/axis2/transport/http/server/ResponseSessionCookie.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/server/ResponseSessionCookie.java	(revision 416642)
+++ modules/core/src/org/apache/axis2/transport/http/server/ResponseSessionCookie.java	(working copy)
@@ -61,9 +61,11 @@
           sessionCookie = (String) context.getAttribute(Constants.COOKIE_STRING);
         }
         if (sessionCookie != null) {
-            response.addHeader(new Header(HTTPConstants.HEADER_SET_COOKIE, sessionCookie));
-            CharArrayBuffer buffer = new CharArrayBuffer(sessionCookie.length() + 40); 
+            CharArrayBuffer buffer = new CharArrayBuffer(sessionCookie.length() + 40);
+            buffer.append(Constants.SESSION_COOKIE);
+            buffer.append("=");
             buffer.append(sessionCookie);
+            response.addHeader(new Header(HTTPConstants.HEADER_SET_COOKIE, buffer.toString()));
             buffer.append("; ");
             int port = response.getParams().getIntParameter(AxisParams.LISTENER_PORT, 0);
             if (port > 0) {
Index: modules/core/src/org/apache/axis2/Constants.java
===================================================================
--- modules/core/src/org/apache/axis2/Constants.java	(revision 416642)
+++ modules/core/src/org/apache/axis2/Constants.java	(working copy)
@@ -187,6 +187,7 @@
 
     //to set and get the property from service context
     public static final String COOKIE_STRING = "Cookie";
+    public static final String SESSION_COOKIE = "axis_session";
 
     /**
      * Addressing Constants
