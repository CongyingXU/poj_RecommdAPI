Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitWrappedMethodMarshallerImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitWrappedMethodMarshallerImpl.java	(revision 498044)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitWrappedMethodMarshallerImpl.java	(working copy)
@@ -1,321 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- *      
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.axis2.jaxws.marshaller.impl;
-
-import java.util.ArrayList;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import javax.xml.bind.JAXBException;
-import javax.xml.stream.XMLStreamException;
-import javax.xml.ws.WebServiceException;
-
-import org.apache.axis2.jaxws.ExceptionFactory;
-import org.apache.axis2.jaxws.description.OperationDescription;
-import org.apache.axis2.jaxws.description.OperationDescriptionJava;
-import org.apache.axis2.jaxws.description.ParameterDescription;
-import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.marshaller.MethodParameter;
-import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.Protocol;
-import org.apache.axis2.jaxws.message.databinding.JAXBBlockContext;
-import org.apache.axis2.jaxws.message.factory.MessageFactory;
-import org.apache.axis2.jaxws.registry.FactoryRegistry;
-import org.apache.axis2.jaxws.util.XMLRootElementUtil;
-import org.apache.axis2.jaxws.wrapper.JAXBWrapperTool;
-import org.apache.axis2.jaxws.wrapper.impl.JAXBWrapperException;
-import org.apache.axis2.jaxws.wrapper.impl.JAXBWrapperToolImpl;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-public class DocLitWrappedMethodMarshallerImpl extends MethodMarshallerImpl {
-	private static Log log = LogFactory.getLog(DocLitWrappedMethodMarshallerImpl.class);
-
-	/**
-	 * @param serviceDesc
-	 * @param endpointDesc
-	 * @param operationDesc
-	 */
-	public DocLitWrappedMethodMarshallerImpl() {
-		super();
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#toJAXBObject(org.apache.axis2.jaxws.message.Message)
-	 */
-	@Override
-	public Object demarshalResponse(Message message, Object[] inputArgs, OperationDescription operationDesc) throws WebServiceException {
-		
-        try {
-        	if (log.isDebugEnabled()) {
-    		    log.debug("Attempting to demarshal a document/literal wrapped response");
-            }
-            
-            Object businessObject = null;
-    		
-            String resultName = operationDesc.getResultName();
-    		businessObject = createBusinessObject(createContextPackageSet(operationDesc), message);
-            assignHolderValues(businessObject, inputArgs, false, operationDesc);
-            
-            // REVIEW: Is the the appropriate logic, to be checking for the existence of the annotation
-            //         as the decision point for getting into the property logic?  Note that even if the annotation
-            //         is not present, a default result name will be returned.
-            // If the WebResult annotation is present, then look up the result Name
-            if(((OperationDescriptionJava) operationDesc).isWebResultAnnotationSpecified()){
-                // If the return type is not of same type as the JAXBBlock business Object then 
-                // look for resultName in Business Object and return that.
-            	Object resultObject = findProperty(resultName, businessObject);
-            	return resultObject;
-            }
-            return businessObject;
-        } catch (Exception e) {
-        	// Firewall.  Only WebServiceExceptions are thrown
-            throw ExceptionFactory.makeWebServiceException(e);
-        }
-       
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#toObjects(org.apache.axis2.jaxws.message.Message)
-	 */
-	@Override
-	public Object[] demarshalRequest(Message message, OperationDescription operationDesc) throws WebServiceException {
-		try {
-			ArrayList<MethodParameter> mps;
-
-			Object jaxbObject = createBusinessObject(createContextPackageSet(operationDesc), message);
-
-			if (log.isDebugEnabled()) {
-				log.debug("reading input method parameters");
-			}
-
-			mps = createParameterForSEIMethod(jaxbObject, operationDesc);
-
-
-			if (log.isDebugEnabled()) {
-				log.debug("done reading input method parameters");
-			}
-
-			Object[] contents = new Object[mps.size()];
-			int i =0;
-			for (MethodParameter mp:mps){
-				contents[i++] =mp.getValue();
-			}
-
-			if (log.isDebugEnabled()) {
-				log.debug("Object unwrapped");
-			}
-
-			return contents;
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#fromJAXBObject(java.lang.Object)
-	 */
-	@Override
-	public Message marshalResponse(Object returnObject, Object[] holderObjects, OperationDescription operationDesc, Protocol protocol) throws WebServiceException {
-
-		try {
-			// Get the necessary information from the OperationDesc
-			Class wrapperClazz = null;
-			String wrapperClazzName = operationDesc.getResponseWrapperClassName();
-			String wrapperLocalName = operationDesc.getResponseWrapperLocalName();
-			String wrapperTNS = operationDesc.getResponseWrapperTargetNamespace();
-
-			//TODO Move this to Operation Description.
-			if (wrapperClazzName == null || (wrapperClazzName != null && wrapperClazzName.length() == 0)) {
-				if (log.isDebugEnabled()) {
-					log.debug("No ResponseWrapper annotation found, using return type of method as response object");
-				}
-				wrapperClazz = getReturnType(operationDesc);
-				wrapperClazzName = wrapperClazz.getName();
-			}
-			else {		
-				wrapperClazz = loadClass(wrapperClazzName);
-			}
-
-
-			// Create all holders list
-			ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-			ArrayList<Object> objectList = new ArrayList<Object>();
-			int index =0;
-			for(ParameterDescription pd:paramDescs){
-				Object value = holderObjects[index];
-				if(pd.isHolderType()){
-					objectList.add(value);
-				}
-				index++;
-			}
-
-			ArrayList<MethodParameter> mps = null;
-
-			mps = new ArrayList<MethodParameter>();
-			if(objectList.size() == 0 && wrapperClazz.getName().equals("void")){
-				//No holders and return type void example --> public void someMethod() I will return empty ResponseWrapper in message body for this case.
-				//doNothing as there is nothing to wrap
-			}
-			if(objectList.size() == 0 && !wrapperClazz.getName().equals("void")){
-				//No holders but a return type example --> public ReturnType someMethod()
-				mps = createResponseWrapperParameter(returnObject, operationDesc);
-			}
-			else{
-				//Holders found and return type or no return type. example --> public ReturnType someMethod(Holder<String>) or public void someMethod(Holder<String>)
-				mps = createResponseWrapperParameter(returnObject, objectList.toArray(), operationDesc);
-			}
-
-			Object wrapper = wrap(wrapperClazz, mps);
-			
-            // If the wrapper class does not represent an root element, then make
-            // the appropriate JAXBElement
-            if (!XMLRootElementUtil.isElementEnabled(wrapperClazz)) {
-                wrapper = XMLRootElementUtil.getElementEnabledObject(wrapperTNS, 
-                        wrapperLocalName, wrapperClazz, wrapper);
-            }
-			Message message = createMessage(wrapper, operationDesc);
-
-
-			return message;
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#fromObjects(java.lang.Object[])
-	 */
-	@Override
-	public Message marshalRequest(Object[] objects, OperationDescription operationDesc) throws WebServiceException {
-		try {
-			String className = operationDesc.getRequestWrapperClassName();
-			String wrapperLocalName = operationDesc.getRequestWrapperLocalName();
-			String wrapperTNS = operationDesc.getRequestWrapperTargetNamespace();
-
-			Class wrapperClazz = null;
-
-			wrapperClazz = loadClass(className);
-
-			//Get Name Value pair for input parameter Objects, skip AsyncHandler and identify Holders.
-			Object jaxbObject = null;
-
-			ArrayList<MethodParameter> methodParameters = createRequestWrapperParameters(objects, operationDesc);
-
-			jaxbObject = wrap(wrapperClazz, methodParameters);
-			
-
-            // If the wrapper class does not represent an root element, then make
-            // the appropriate JAXBElement
-            if (!XMLRootElementUtil.isElementEnabled(wrapperClazz)) {
-                jaxbObject = 
-                    XMLRootElementUtil.getElementEnabledObject(wrapperTNS, 
-                            wrapperLocalName,
-                            wrapperClazz, 
-                            jaxbObject);
-            }
-			Message message = createMessage(jaxbObject, operationDesc);
-
-
-			return message;
-
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-	}
-
-    // FIXME: This is wrong.  We first need to get the ClassLoader from the 
-    // AxisService if there is one on there.  Then, if that does not exist
-    // we can grab the thread's context ClassLoader.
-	private Class loadClass(String className) throws ClassNotFoundException {
-		// TODO J2W AccessController Needed
-		// Don't make this public, its a security exposure
-        Class c = Class.forName(className, true, Thread.currentThread().getContextClassLoader());
-		return c;
-	}
-    
-    /**
-     * @param jaxbElement object representing the element to marshal (JAXBElement or object has @XmlRootElement)
-     * @return
-     * @throws JAXBException
-     * @throws WebServiceException
-     * @throws XMLStreamException
-     */
-    private Message createMessage(Object jaxbElement, OperationDescription operationDesc)throws JAXBException, WebServiceException, XMLStreamException{
-            Block bodyBlock = null;
-            
-            Protocol protocol = null;
-            try {
-                protocol = Protocol.getProtocolForBinding(operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getBindingType()); //soap11;
-            } catch (WebServiceException e) {
-                // TODO better handling than this?
-                e.printStackTrace();
-            }
-                 
-            // Create the context
-            JAXBBlockContext ctx = new JAXBBlockContext(createContextPackageSet(operationDesc));
-            bodyBlock = createJAXBBlock(jaxbElement, ctx);
-            
-            if (log.isDebugEnabled()) {
-                log.debug("JAXBBlock Created");
-            }
-            
-            MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
-            
-            Message m = mf.create(protocol);
-            m.setBodyBlock(0,bodyBlock);
-            return m;
-        }
-    
-    private Object wrap(Class jaxbClass, ArrayList<MethodParameter> mps) throws JAXBWrapperException{
-        if (log.isDebugEnabled()) {
-            log.debug("start: Create Doc Lit Wrapper");
-        }
-        if(mps == null){
-            throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr7"));
-        }
-        ArrayList<String> nameList = new ArrayList<String>();
-        Map<String, Object> objectList = new WeakHashMap<String, Object>();
-        for(MethodParameter mp:mps){
-            ParameterDescription pd = mp.getParameterDescription();
-            String name = null;
-            if(!mp.isWebResult()){
-                name = pd.getParameterName();
-            }else{
-                name = mp.getWebResultName();
-            }
-            Object object = mp.getValue();
-            
-            nameList.add(name);
-            objectList.put(name, object);
-        }
-        JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
-
-        Object wrapper  = wrapperTool.wrap(jaxbClass, nameList, objectList);
-        if (log.isDebugEnabled()) {
-            log.debug("end: Create Doc Lit Wrapper");
-        }
-        return wrapper;
-    }
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java	(revision 498044)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java	(working copy)
@@ -1,303 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- *      
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.axis2.jaxws.marshaller.impl;
-
-import java.util.ArrayList;
-import java.util.Set;
-
-import javax.xml.bind.JAXBElement;
-import javax.xml.bind.JAXBException;
-import javax.xml.stream.XMLStreamException;
-import javax.xml.ws.WebServiceException;
-
-import org.apache.axis2.jaxws.ExceptionFactory;
-import org.apache.axis2.jaxws.description.OperationDescription;
-import org.apache.axis2.jaxws.description.ParameterDescription;
-import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.marshaller.MethodParameter;
-import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.Protocol;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-public class DocLitBareMethodMarshallerImpl extends MethodMarshallerImpl  {
-    
-	private static int SIZE = 1;
-	private static Log log = LogFactory.getLog(DocLitBareMethodMarshallerImpl.class);
-	
-    /**
-	 * @param serviceDesc
-	 * @param endpointDesc
-	 * @param operationDesc
-	 */
-	public DocLitBareMethodMarshallerImpl() {
-		super();
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#toJAXBObject(org.apache.axis2.jaxws.message.Message)
-	 */
-	@Override
-	public Object demarshalResponse(Message message, Object[] inputArgs, OperationDescription operationDesc) throws WebServiceException {
-		try {
-
-			Class returnType = getReturnType(operationDesc);
-
-			ArrayList<Object> holderArgs = null;
-			ArrayList<MethodParameter> mps = null;
-			ArrayList<MethodParameter> holdermps = null;
-
-			holderArgs = new ArrayList<Object>();
-			mps = new ArrayList<MethodParameter>();
-			mps = extractHolderParameters(inputArgs, operationDesc);
-			holdermps = new ArrayList<MethodParameter>(mps);
-
-
-			// Remove everything except holders from input arguments.
-			int index = 0;
-			for(Object inputArg: inputArgs){
-				if(inputArg !=null && isHolder(inputArg)){
-					holderArgs.add(inputArg);
-				}
-				index++;
-			}
-
-            Object bo = null;
-			if(holdermps.size() == 0 && returnType.getName().equals("void")){
-				// No holders and return type void example --> public void someMethod() 
-				// I will return null for this case.
-				// doNothing as there is nothing to return.
-				
-			}
-			else if(holdermps.size() == 0 && !returnType.getName().equals("void")){
-				// No holders but a return type example --> public ReturnType someMethod()
-				bo = createBusinessObject(createContextPackageSet(operationDesc), message);
-			}
-			else if(holdermps.size()>0 && returnType.getName().equals("void")){
-				// Holders found and no return type example --> public void someMethod(Holder<AHolder>)	
-				assignHolderValues(holdermps, holderArgs, message, operationDesc);
-			}
-			else{
-				// Holders found and return type example --> public ReturnType someMethod(Holder<AHolder>)
-				// Note that SEI implementation will wrap return type in a holder if method has a return 
-				// type and input param as holder.
-				// WSGen and WsImport Generate Holders with return type as one of the Holder JAXBObject 
-				// property, if wsdl schema forces a holder and a return type.
-				assignHolderValues(holdermps, holderArgs, message, operationDesc);
-				bo = createBusinessObject(createContextPackageSet(operationDesc), message);
-			}
-
-            if (bo instanceof JAXBElement) {
-                bo = ((JAXBElement) bo).getValue();
-            }
-
-			return bo;
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-        
-    }
-	private ArrayList<MethodParameter> createParameterForSEIMethod(Message message, OperationDescription operationDesc)throws IllegalAccessException, InstantiationException, ClassNotFoundException, WebServiceException, XMLStreamException, JAXBException{
-	    ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-	    if(message == null){
-	        return null;
-	    }
-	    ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-	    
-	    ArrayList<Object> paramValues = new ArrayList<Object>(); 
-	    for (int index = 0; index < paramDescs.length; index++) {
-	        ParameterDescription paramDesc = paramDescs[index];
-	        String paramName = paramDesc.getParameterName();
-	        String paramTNS = paramDesc.getTargetNamespace();
-	        boolean isHeader = paramDesc.isHeader();
-	        Class actualType = paramDesc.getParameterActualType();
-	        Object bo = null;
-            // Create a set of context packages that will be needed to demarshal
-            // the jaxb object.  For now just consider the actualType
-            Set<String> contextPackages = createContextPackageSet(operationDesc);
-            
-            // Create the business object
-            if(isHeader){
-	            bo = createBOFromHeaderBlock(contextPackages, message, paramTNS, paramName);
-	        }
-	        else{
-	            bo = createBOFromBodyBlock(contextPackages,message);
-	        }
-	        
-            // The resulting business object may be a JAXBElement.
-            // In such cases get the contained type
-            if ( (actualType != JAXBElement.class) &&  
-                    bo instanceof JAXBElement) {
-                bo = ((JAXBElement) bo).getValue();
-            }
-            
-            // Now create an argument from the business object
-            Object arg = bo;
-	        if (paramDesc.isHolderType()) {
-                // If the parameter requires a holder, create a holder
-                // object containting the parameter
-	            arg = createHolder(paramDesc.getParameterType(), bo);
-	        } 
-	        paramValues.add(arg);
-	    }
-	    mps = createParameters(paramDescs, paramValues, operationDesc);
-	    
-	    return mps;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#toObjects(org.apache.axis2.jaxws.message.Message)
-	 */
-	@Override
-	public Object[] demarshalRequest(Message message, OperationDescription operationDesc) throws WebServiceException {
-		try {
-			if (log.isDebugEnabled()) {
-				log.debug("Attempting to demarshal a document/literal request.");
-			}
-
-			ArrayList<Class> inputParams = getInputTypes(operationDesc);
-
-			// If the method has no input parameters, then we're done.
-			if(inputParams.size() == 0){
-				return null;
-			}
-
-			ArrayList<MethodParameter> mps = createParameterForSEIMethod(message, operationDesc);
-
-			ArrayList<Object> objectList = new ArrayList<Object>();
-			if (log.isDebugEnabled()) {
-				log.debug("reading input method parameters");
-			}
-			for(MethodParameter mp:mps){
-				objectList.add(mp.getValue());
-			}
-			return objectList.toArray();		
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-	}
-
-	/* 
-     * (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#fromJAXBObject(java.lang.Object)
-	 */
-	@Override
-	public Message marshalResponse(Object returnObject, Object[] holderObjects, OperationDescription operationDesc, Protocol protocol ) throws WebServiceException {
-		try {
-			// Response wrapper is basically the return type. So the return object 
-			// is a JAXB object. If there is a holder objects then that is the 
-			// responsewrapper.
-			Class wrapperClazz = getReturnType(operationDesc);
-			String wrapperClazzName = operationDesc.getResultName();
-			if (wrapperClazzName == null || wrapperClazzName.trim().length() == 0) {
-				wrapperClazzName = wrapperClazz.getName();
-			}
-			String wrapperTNS = operationDesc.getResultTargetNamespace();
-
-			ArrayList<MethodParameter> holdersNreturnObject = extractHolderParameters(holderObjects, operationDesc);
-
-
-			Message message = null;
-
-			if(holdersNreturnObject.size() == 0 && wrapperClazz.getName().equals("void")){
-				//No holders and return type void example --> public void someMethod() I will return empty ResponseWrapper in message body for this case.
-				//doNothing as there is nothing to wrap
-				message = createEmptyMessage(operationDesc);
-			}
-			else if(holdersNreturnObject.size() == 0 && !wrapperClazz.getName().equals("void")){
-				//No holders but a return type example --> public ReturnType someMethod()
-				MethodParameter mp = new MethodParameter(wrapperClazzName,wrapperTNS, wrapperClazz, returnObject);
-				holdersNreturnObject.add(mp);
-				message = createMessage(holdersNreturnObject, operationDesc);
-			}
-			else if(holdersNreturnObject.size()>0 && wrapperClazz.getName().equals("void")){
-				//Holders found and no return type example --> public void someMethod(Holder<AHolder>)	
-				message = createMessage(holdersNreturnObject, operationDesc);
-			}
-			else{
-				//Holders found and return type example --> public ReturnType someMethod(Holder<AHolder>)
-				//Note that SEI implementation will wrap return type in a holder if method has a return type and input param as holder.
-				//WSGen and WsImport Generate Holders with return type as one of the Holder JAXBObject property, if wsdl schema forces a holder and a return type.
-				MethodParameter mp = new MethodParameter(wrapperClazzName,wrapperTNS, wrapperClazz, returnObject);
-				holdersNreturnObject.add(mp);
-				message = createMessage(holdersNreturnObject, operationDesc);
-			}
-
-
-			return message;
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-	}
-
-	/* 
-     * (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.convertor.impl.MessageConvertorImpl#fromObjects(java.lang.Object[])
-	 */
-	@Override
-	public Message marshalRequest(Object[] objects, OperationDescription operationDesc) throws WebServiceException {
-		try {
-			if (log.isDebugEnabled()) {
-				log.debug("Attempting to marshal document/literal request");
-			}
-
-			ArrayList<MethodParameter> mps = createRequestWrapperParameters(objects, operationDesc);
-
-			//WSDL wrapped and running wsImport with non-wrap binding or wsdl un-Wrapped and running wsImport with no binding, EITHER WAYS 
-			//there can be only 0 or 1 Body parts as per WS-I. 
-			if(mps.size()> SIZE){
-				int numberOfBodyPart =0;
-				for(MethodParameter mp:mps){
-					ParameterDescription pd = mp.getParameterDescription();
-					if(!pd.isHeader()){
-						numberOfBodyPart++;
-					}
-				}
-				if(numberOfBodyPart > SIZE){
-					if (log.isDebugEnabled()) {
-						log.debug("As per WS-I compliance, Multi part WSDL with more than one body part not allowed for Doc/Lit NON Wrapped request, Method invoked has multiple input parameter");
-					}
-					throw ExceptionFactory.makeWebServiceException(Messages.getMessage("DocLitProxyHandlerErr1"));
-				}
-			}
-
-			//Lets handle case where there is one message part or one input parameter
-			Message message = null;
-
-			if (mps.size() !=0) {
-				message = createMessage(mps, operationDesc);
-			}
-			//no message part case or no input parameter
-			if (mps.size() == 0) {
-				message = createEmptyMessage(operationDesc);
-			}
-
-
-			return message;
-		} catch (Exception e) {
-			// Firewall.  Only WebServiceExceptions are thrown
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-	}
-	
-	
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/RPCLitMethodMarshallerImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/RPCLitMethodMarshallerImpl.java	(revision 498044)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/RPCLitMethodMarshallerImpl.java	(working copy)
@@ -1,63 +0,0 @@
-package org.apache.axis2.jaxws.marshaller.impl;
-
-import javax.xml.ws.WebServiceException;
-
-import org.apache.axis2.jaxws.description.OperationDescription;
-import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.Protocol;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- *      
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-public class RPCLitMethodMarshallerImpl extends MethodMarshallerImpl {
-
-   
-    public RPCLitMethodMarshallerImpl() {
-        super();
-        // TODO Unsupported
-        throw new UnsupportedOperationException();
-    }
-    
-    @Override
-    public Object demarshalResponse(Message message, Object[] inputArgs, OperationDescription operationDesc)
-            throws WebServiceException {
-        // TODO Unsupported
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public Object[] demarshalRequest(Message message, OperationDescription operationDesc)
-            throws WebServiceException {
-        // TODO Unsupported
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public Message marshalResponse(Object returnObject, Object[] holderObjects, OperationDescription operationDesc, Protocol protocol)
-            throws WebServiceException {
-        // TODO Unsupported
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public Message marshalRequest(Object[] object, OperationDescription operationDesc) throws WebServiceException {
-        // TODO Unsupported
-        throw new UnsupportedOperationException();
-    }
-
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java	(revision 498044)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java	(working copy)
@@ -1,1005 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- *      
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.axis2.jaxws.marshaller.impl;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.concurrent.Future;
-
-import javax.jws.WebParam.Mode;
-import javax.xml.bind.JAXBElement;
-import javax.xml.bind.JAXBException;
-import javax.xml.bind.JAXBIntrospector;
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.namespace.QName;
-import javax.xml.stream.XMLStreamException;
-import javax.xml.ws.AsyncHandler;
-import javax.xml.ws.Holder;
-import javax.xml.ws.Response;
-import javax.xml.ws.WebServiceException;
-
-import org.apache.axiom.om.OMElement;
-import org.apache.axis2.jaxws.ExceptionFactory;
-import org.apache.axis2.jaxws.description.FaultDescription;
-import org.apache.axis2.jaxws.description.OperationDescription;
-import org.apache.axis2.jaxws.description.ParameterDescription;
-import org.apache.axis2.jaxws.i18n.Messages;
-import org.apache.axis2.jaxws.marshaller.MethodMarshaller;
-import org.apache.axis2.jaxws.marshaller.MethodParameter;
-import org.apache.axis2.jaxws.message.Block;
-import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.Protocol;
-import org.apache.axis2.jaxws.message.XMLFault;
-import org.apache.axis2.jaxws.message.XMLFaultReason;
-import org.apache.axis2.jaxws.message.databinding.JAXBBlockContext;
-import org.apache.axis2.jaxws.message.databinding.JAXBUtils;
-import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
-import org.apache.axis2.jaxws.message.factory.MessageFactory;
-import org.apache.axis2.jaxws.registry.FactoryRegistry;
-import org.apache.axis2.jaxws.util.ClassUtils;
-import org.apache.axis2.jaxws.util.XMLRootElementUtil;
-import org.apache.axis2.jaxws.wrapper.JAXBWrapperTool;
-import org.apache.axis2.jaxws.wrapper.impl.JAXBWrapperException;
-import org.apache.axis2.jaxws.wrapper.impl.JAXBWrapperToolImpl;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-public abstract class MethodMarshallerImpl implements MethodMarshaller {
-	private static QName SOAPENV_QNAME = new QName("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
-	private static Log log = LogFactory.getLog(MethodMarshallerImpl.class);
-	
-	public MethodMarshallerImpl(){
-	}
-
-	
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.marshaller.MethodMarshaller#demarshalResponse(org.apache.axis2.jaxws.message.Message, java.lang.Object[])
-	 */
-	public abstract Object demarshalResponse(Message message, Object[] inputArgs, OperationDescription operationDesc) throws WebServiceException; 
-
-	
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.marshaller.MethodMarshaller#demarshalRequest(org.apache.axis2.jaxws.message.Message)
-	 */
-	public abstract Object[] demarshalRequest(Message message, OperationDescription operationDesc) throws WebServiceException;
-
-	
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.marshaller.MethodMarshaller#marshalResponse(java.lang.Object, java.lang.Object[])
-	 */
-	public abstract Message marshalResponse(Object returnObject, Object[] holderObjects, OperationDescription operationDesc, Protocol protocol)throws WebServiceException; 
-	
-	
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.marshaller.MethodMarshaller#marshalRequest(java.lang.Object[])
-	 */
-	public abstract Message marshalRequest(Object[] object, OperationDescription operationDesc)throws WebServiceException; 
-	
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.marshaller.MethodMarshaller#demarshalFaultResponse(org.apache.axis2.jaxws.message.Message)
-	 */
-	public Throwable demarshalFaultResponse(Message message, OperationDescription operationDesc) throws WebServiceException {
-		
-		Exception exception = null;
-        
-		try {
-			// Get the fault from the message and get the detail blocks (probably one)
-			XMLFault xmlfault = message.getXMLFault();
-			Block[] blocks = xmlfault.getDetailBlocks();
-            
-			
-			if ((operationDesc.getFaultDescriptions().length == 0) || (blocks == null))  {
-				// This is a system exception if the method does not throw a checked exception or if 
-				// there is nothing in the detail element.
-                // Shouldn't this create 
-                
-                // TODO Shouldn't we create a SOAPFaultException
-				exception = createGenericException(xmlfault.getReason()
-						.getText());
-			} else {
-				// Create a JAXBContext object that can handle any of the 
-				// checked exceptions defined on this operation
-                HashSet<Package> contextPackages = new HashSet<Package>();
-				for(int i=0; i<operationDesc.getFaultDescriptions().length; i++) {
-					FaultDescription fd = operationDesc.getFaultDescriptions()[i];
-					contextPackages.add(loadClass(fd.getFaultBean()).getPackage());
-				}
-				
-				// TODO what if there are multiple blocks in the detail ?
-				// We should create a generic fault with the appropriate detail
-				Block block = blocks[0];
-				
-				// Now demarshal the block to get a business object (faultbean)
-                // Capture the qname of the element, which will be used to find the JAX-WS Exception
-				Object obj = createFaultBusinessObject(block, operationDesc);
-                QName faultQName = null;
-                if (obj instanceof JAXBElement) {
-                    faultQName = ((JAXBElement)obj).getName();
-                    obj = ((JAXBElement)obj).getValue();
-                } else {
-                    faultQName = XMLRootElementUtil.getXmlRootElementQName(obj);
-                }
-                
-				// Find the JAX-WS exception using a qname match
-				Class exceptionClass = null;
-                Class faultBeanFormalClass = null;
-				for(int i=0; i<operationDesc.getFaultDescriptions().length && exceptionClass == null; i++) {
-					FaultDescription fd = operationDesc.getFaultDescriptions()[i];
-                    QName tryQName = new QName(fd.getTargetNamespace(), fd.getName());
-                                    
-					if (faultQName == null || faultQName.equals(tryQName)) {
-						exceptionClass = loadClass(fd.getExceptionClassName());
-                        faultBeanFormalClass = loadClass(fd.getFaultBean());
-					}
-				}
-				
-				// Now create the JAX-WS Exception class 
-				if (exceptionClass == null) {
-					throw ExceptionFactory.makeWebServiceException(Messages.getMessage("MethodMarshallerErr1", obj.getClass().toString()));
-				}
-                return createCustomException(xmlfault.getReason().getText(), exceptionClass, obj, faultBeanFormalClass);
-			}
-		} catch (Exception e) {
-			// Catch all nested exceptions and throw WebServiceException
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-
-		return exception;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.apache.axis2.jaxws.marshaller.MethodMarshaller#marshalFaultResponse(java.lang.Throwable)
-	 */
-	public Message marshalFaultResponse(Throwable throwable, OperationDescription operationDesc, Protocol protocol) throws WebServiceException {
-		try {
-			Throwable t = ClassUtils.getRootCause(throwable);
-
-			//  Get the root cause of the throwable object
-            if (log.isDebugEnabled()) {
-                log.debug("Marshal Throwable =" + throwable.getClass().getName());
-                log.debug("  message=" + throwable.toString());
-            }
-			XMLFault xmlfault = null;
-			
-			Message message = createEmptyMessage(operationDesc);
-			
-			// Get the FaultDescriptor matching this Exception.
-			// If FaultDescriptor is found, this is a JAX-B Service Exception.
-			// If not found, this is a System Exception
-			FaultDescription fd = operationDesc.resolveFaultByExceptionName(t.getClass().getName());
-
-			if (fd != null) {
-				// Service Exception.  Create an XMLFault with the fault bean
-            	Method getFaultInfo = t.getClass().getMethod("getFaultInfo", null);
-            	Object faultBean = getFaultInfo.invoke(t, null);
-            	JAXBBlockContext context = createJAXBBlockContext(createContextPackageSet(operationDesc));
-            	Block[] detailBlocks = new Block[1];
-                
-                // Make sure to createJAXBBlock with an object that is 
-                // a JAXBElement or has the XMLRootElement annotation
-                // The actual faultBean object's class is used (because
-                // the actual object may be a derived type of the formal declaration)
-            	if (!XMLRootElementUtil.isElementEnabled(faultBean.getClass())) {
-                    faultBean = XMLRootElementUtil.getElementEnabledObject(fd.getTargetNamespace(), fd.getName(),
-                            faultBean.getClass(), faultBean);
-                }
-            	detailBlocks[0] = createJAXBBlock(faultBean, context);
-                xmlfault = new XMLFault(null, new XMLFaultReason(t.toString()), detailBlocks);
-            } else {
-                // System Exception
-            	xmlfault = new XMLFault(null,       // Use the default XMLFaultCode
-                        new XMLFaultReason(t.toString()));  // Assumes text is the language supported by the current Locale
-            }
-			// Add the fault to the message
-            message.setXMLFault(xmlfault);
-            return message;
-        } catch (Exception e) {
-        	// Catch all nested exceptions and throw WebServiceException
-			throw ExceptionFactory.makeWebServiceException(e);
-        }
-	}
-		
-	/*
-	 * Creates method output parameter/return parameter. reads webResult annotation and then matches them with the response/result value of Invoked method
-	 * and creates a name value pair.
-	 * Also handles situation where ResponseWrapper is a holder.
-	 */
-	protected ArrayList<MethodParameter> createResponseWrapperParameter(Object webResultValue, OperationDescription operationDesc) {
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		if(webResultValue == null){
-			return mps;
-		}
-		String webResultName = operationDesc.getResultName();
-		String webResultTNS = operationDesc.getResultTargetNamespace();
-		Class webResultClass = null;
-		if(webResultValue !=null){
-			webResultClass = webResultValue.getClass();
-		}
-		MethodParameter mp = new MethodParameter(webResultName, webResultTNS, webResultClass, webResultValue);
-		mps.add(mp);
-		return mps;
-	}
-	
-    protected ArrayList<MethodParameter> createResponseWrapperParameter(Object webResultObject, Object[] holderObjects, OperationDescription operationDesc)
-        throws IllegalAccessException, InstantiationException, ClassNotFoundException {
-		ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-		ArrayList<ParameterDescription> pds = new ArrayList<ParameterDescription>();
-		pds = toArrayList(paramDescs);
-        
-		// Remove all non holder meta data. Holders cannot be of Mode.IN so we 
-        // don't have to worry about removing params with Mode.IN.
-		for (int index = 0; index < paramDescs.length; index++) {
-			ParameterDescription paramDesc = paramDescs[index];
-			if (!(paramDesc.isHolderType())) {
-				pds.remove(paramDesc);
-			}
-		}
-		
-		ArrayList<Object> paramValues = new ArrayList<Object>();
-        //ArrayList<Object> paramValues = toArrayList(holderObjects);
-        int index =0;
-        for(ParameterDescription pd :pds){
-            Object value = holderObjects[index];
-                if (value != null && isHolder(value) && 
-                    pd.isHolderType()) {
-                        Object holderValue = getHolderValue(pd.getMode(), value);
-                        value = holderValue;
-                    }
-                    paramValues.add(value);
-                    index++;
-                }
-                ArrayList<MethodParameter> mps = createParameters(pds.toArray(new ParameterDescription[0]), paramValues, operationDesc);
-        
-		if(webResultObject!=null){
-			MethodParameter outputResult = new MethodParameter(operationDesc.getResultName(), operationDesc.getResultTargetNamespace(), webResultObject.getClass(), webResultObject);
-			mps.add(outputResult);
-		}
-		return mps;
-		
-	}
-	
-	/*
-	 * Request Parameter are those where webParam Mode is IN or INOUT
-	 */
-    protected ArrayList<MethodParameter> createRequestWrapperParameters(Object[] objects, OperationDescription operationDesc)throws IllegalAccessException, InstantiationException, ClassNotFoundException{
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		//Hand no input parameters
-		if(objects == null){
-			return mps;
-		}
-		if(objects!=null && objects.length==0){
-			return mps;
-		}
-		
-		ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-		
-		if (paramDescs.length != objects.length) {
-			throw ExceptionFactory.makeWebServiceException(Messages
-					.getMessage("InvalidWebParams"));
-		}
-		ArrayList<Object> paramValues = new ArrayList<Object>();
-		int index =0;
-		//Request Parameters are one that have IN or INOUT parameter mode.
-		for(ParameterDescription pd :paramDescs){
-			if(pd.getMode() == Mode.INOUT || pd.getMode() == Mode.IN){
-				Object value = objects[index];
-				//If paramType is holder then get the holder value, this is done as requestWrapper does not have holder but a actual type of Holder.
-				if (value != null && isHolder(value)
-						&& pd.isHolderType()) {
-					Object holderValue = getHolderValue(pd.getMode(),
-							value);
-					value = holderValue;
-				}
-				paramValues.add(value);
-			}
-			index++;
-		}
-		if (log.isDebugEnabled()) {
-			log.debug("Attempting to create Method Parameters");
-		}
-		mps = createParameters(paramDescs, paramValues, operationDesc);
-
-		if (log.isDebugEnabled()) {
-			log.debug("Method Parameters created");
-		}
-					
-		return mps;
-	}
-	protected ArrayList<MethodParameter> createParameterForSEIMethod(Object jaxbObject, OperationDescription operationDesc) throws JAXBWrapperException, IllegalAccessException, InstantiationException, ClassNotFoundException{
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		if(jaxbObject == null){
-			return mps;
-		}
-		ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-		
-        ArrayList<String> webParam = new ArrayList<String>();
-       
-        //Get names of all IN and INOUT parameters, those are the ones that have been sent out by client
-        for(ParameterDescription pd : paramDescs){
-        	Mode mode = pd.getMode();
-        	if(mode == Mode.IN || mode == Mode.INOUT){
-        		webParam.add(pd.getParameterName());
-        	}
-        }
-    
-        if (log.isDebugEnabled()) {
-            log.debug("Attempting to unwrap object from WrapperClazz");
-        }
-        JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
-        Object[] objects = wrapperTool.unWrap(jaxbObject, webParam);
-        if (log.isDebugEnabled()) {
-            log.debug("Object unwrapped");
-        }
-      
-        //Now that Objects with Mode IN and INOUT are unwrapped, let me get all the OUT parameters assign them NULL values,
-        //so we can call the method with right number of parameters. Also lets ensure that we create holders whereever the method
-        //parameter is defined as holder type.
-        ArrayList<Object> objectList = new ArrayList<Object>();
-        int paramIndex = 0;
-        int objectIndex = 0;
-        for(ParameterDescription pd : paramDescs){
-        	Object value = null;
-        	Mode mode = pd.getMode();
-        	
-        	if(mode == Mode.IN || mode == Mode.INOUT){
-        		value = objects[objectIndex];
-        		if (value != null && !isHolder(value)
-        				&& pd.isHolderType()) {
-        			Holder<Object> holder = createHolder(pd.getParameterType(),
-        					value);
-        			value = holder;
-        		}
-        		objectIndex++;
-        	}
-        	
-        	else if(mode == Mode.OUT){
-        		if(value == null && pd.isHolderType()){
-        			Holder<Object> holder = createHolder(pd.getParameterType(),
-        					value);
-        			value = holder;
-        		}
-        		
-        	}
-        	objectList.add(paramIndex, value);
-        	paramIndex++;
-        }
-        
-        return createParameters(paramDescs, objectList, operationDesc);
-        
-	}
-	
-	
-	/*
-	 * Extract Holder parameter from supplied parameters and add annotation data for these parameters.
-	 */
-
-	protected ArrayList<MethodParameter> extractHolderParameters(Object jaxbObject, OperationDescription operationDesc) throws JAXBWrapperException, IllegalAccessException, InstantiationException, ClassNotFoundException{
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		if(jaxbObject == null){
-			return mps;
-		}
-		
-        ArrayList<String> webParam = new ArrayList<String>();
-        ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-        ArrayList<ParameterDescription> paramDescList = new ArrayList<ParameterDescription>();
-		// Remove all non holder meta data. Holders cannot be of Mode.IN so I dont have to worry about removing params with Mode.IN.
-		for (int index = 0; index < paramDescs.length; index++) {
-			ParameterDescription paramDesc = paramDescs[index];
-			if (paramDesc.isHolderType()) {
-				paramDescList.add(paramDesc);
-				webParam.add(paramDesc.getParameterName());
-			}
-		}      
-		
-        if (log.isDebugEnabled()) {
-            log.debug("Attempting to unwrap object from WrapperClazz");
-        }
-        JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
-        Object[] objects = wrapperTool.unWrap(jaxbObject, webParam);
-        
-        if (log.isDebugEnabled()) {
-            log.debug("Object unwrapped");
-        }
-        if (log.isDebugEnabled()) {
-			log.debug("Attempting to create Holder Method Parameters");
-		}
-        ArrayList<Object> paramValues = new ArrayList<Object>();
-        int index = 0;
-        for(ParameterDescription pd:paramDescList){
-        	Object value = objects[index];
-        	if (value != null && !isHolder(value)
-					&& pd.isHolderType()) {
-				Holder<Object> holder = createHolder(pd.getParameterType(),
-						value);
-				value = holder;
-        	}
-        	else if(value == null && pd.isHolderType()){
-        		Holder<Object> holder = createHolder(pd.getParameterType(),
-						value);
-				value = holder;
-        	}
-        	paramValues.add(value);
-        	index++;
-        }
-		mps = createParameters(paramDescList.toArray(new ParameterDescription[0]), paramValues, operationDesc);
-
-		if (log.isDebugEnabled()) {
-			log.debug("Holder Method Parameters created");
-		}
-					
-		return mps;
-	}
-	
-	/*
-	 * Extract Holder parameter from supplied parameters and add annotation data for these parameters.
-	 */
-	protected ArrayList<MethodParameter> extractHolderParameters(Object[] objects, OperationDescription operationDesc)throws IllegalAccessException, InstantiationException, ClassNotFoundException{
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		//Hand no input parameters
-		if(objects == null){
-			return mps;
-		}
-		if(objects!=null && objects.length==0){
-			return mps;
-		}
-		
-		ParameterDescription[] paramDescs = operationDesc.getParameterDescriptions();
-		ArrayList<ParameterDescription> paramDescList = new ArrayList<ParameterDescription>();
-		if (paramDescs.length != objects.length) {
-			throw ExceptionFactory.makeWebServiceException(Messages
-					.getMessage("InvalidWebParams"));
-		}
-		ArrayList<Object> paramValues = new ArrayList<Object>();
-		int index =0;
-		//Add only Holder parameters. 
-		for(ParameterDescription pd : paramDescs){
-			Object value = objects[index];
-			if(pd.isHolderType()){
-				if (value != null && isHolder(value)
-						&& pd.isHolderType()) {
-					Object holderValue = getHolderValue(pd.getMode(),
-							value);
-					value = holderValue;
-				}
-				paramValues.add(value);
-				paramDescList.add(pd);
-			}
-			index++;
-		}
-		
-			
-		if (log.isDebugEnabled()) {
-			log.debug("Attempting to create Holder Method Parameters");
-		}
-		mps = createParameters(paramDescList.toArray(new ParameterDescription[0]), paramValues, operationDesc);
-
-		if (log.isDebugEnabled()) {
-			log.debug("Holder Method Parameters created");
-		}
-					
-		return mps;
-	}
-    
-	protected ArrayList<MethodParameter> createParameters(
-			ParameterDescription[] paramDescs, ArrayList<Object> paramValues, OperationDescription operationDesc){
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		int index = 0;
-		for (Object paramValue : paramValues){
-			ParameterDescription paramDesc = paramDescs[index];
-			MethodParameter mp = null;
-			if (!isParamAsyncHandler(paramDesc.getParameterName(), paramValue, operationDesc)){
-				mp = new MethodParameter(paramDesc, paramValue);
-				mps.add(mp);
-			}
-			index++;
-		}
-		return mps;
-	}
-	
-	
-	private ArrayList<MethodParameter> createMethodParameters(ParameterDescription[] paramDescs, ArrayList<Object> paramValues, OperationDescription operationDesc)
-        throws InstantiationException, ClassNotFoundException, IllegalAccessException {
-		ArrayList<MethodParameter> mps = new ArrayList<MethodParameter>();
-		int index = 0;
-		for (Object paramValue : paramValues) {
-			ParameterDescription paramDesc = paramDescs[index];
-			Class paramType = paramDesc.getParameterType();
-			Mode paramMode = paramDesc.getMode();
-			boolean isHolderType = paramDesc.isHolderType();
-			MethodParameter mp = null;
-			// If call is Async call then lets filter AsyncHandler object name
-			// and value;
-			if (!isParamAsyncHandler(paramDesc.getParameterName(), paramValue, operationDesc)) {
-				if (paramType != null) {
-				    if(paramValue == null && isHolderType){
-                        Holder<Object> holder = createHolder(paramType, paramValue);
-						mp = new MethodParameter(paramDesc, holder);
-					}
-					// Identify that param value is not Holders however if the
-					// method parameter is holder type then create Holder, this
-					// will mostly be called during server side call
-					else if (paramValue != null && !isHolder(paramValue)
-							&& isHolderType) {
-						Holder<Object> holder = createHolder(paramType, paramValue);
-						mp = new MethodParameter(paramDesc, holder);
-					} 
-				    // Identify Holders and get Holder Values, this if condition
-				    // will mostly execute during client side call
-					else if (paramValue != null && isHolder(paramValue) && isHolderType) {
-					    Object holderValue = getHolderValue(paramMode, paramValue);
-					    mp = new MethodParameter(paramDesc, holderValue);
-					}
-					else {
-						mp = new MethodParameter(paramDesc, paramValue);
-					}
-				}
-				if (paramType == null) {
-					if (isHolder(paramValue)) {
-						Object holderValue = getHolderValue(paramMode,
-								paramValue);
-						mp = new MethodParameter(paramDesc, holderValue);
-					} else {
-						mp = new MethodParameter(paramDesc, paramValues);
-					}
-				}
-				mps.add(mp);
-			}
-
-			index++;
-		}
-		return mps;
-
-	}
-			
-	protected ArrayList<Class> getInputTypes(OperationDescription operationDesc){
-		Method seiMethod = operationDesc.getSEIMethod();
-		ArrayList<Class> paramTypes = new ArrayList<Class>();
-		Type[] types = seiMethod.getGenericParameterTypes();
-		for(Type type:types){
-			if(ParameterizedType.class.isAssignableFrom(type.getClass())){
-				ParameterizedType pType = (ParameterizedType) type;
-				Class actualClazz = (Class)pType.getActualTypeArguments()[0];
-				paramTypes.add(actualClazz);
-			}
-			else{
-				Class formalClazz= (Class)type;
-				paramTypes.add(formalClazz);
-			}
-		}
-		return paramTypes;
-	}
-	
-	protected boolean isAsync(OperationDescription operationDesc){
-		Method method = operationDesc.getSEIMethod();
-		if(method == null){
-			return false;
-		}
-		String methodName = method.getName();
-		Class returnType = method.getReturnType();
-		return methodName.endsWith("Async") && (returnType.isAssignableFrom(Response.class) || returnType.isAssignableFrom(Future.class));
-	}
-	
-	
-	
-	protected <T> ArrayList<T> toArrayList(T[] objects){
-		return (objects!=null)? new ArrayList<T>(Arrays.asList(objects)):new ArrayList<T>();
-	}
-	
-	protected Block createJAXBBlock(Object jaxbObject, JAXBBlockContext context) throws WebServiceException{
-		JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
-		return factory.createFrom(jaxbObject,context,null);
-		
-	}
-	
-	protected Block createJAXBBlock(String name, 
-			Object jaxbObject, 
-			JAXBBlockContext context, 
-			String targetNamespace) throws WebServiceException, JAXBException {
-		
-		JAXBIntrospector i  = JAXBUtils.getJAXBIntrospector(context.getJAXBContext());
-		boolean isElement = i.isElement(jaxbObject);
-		JAXBUtils.releaseJAXBIntrospector(context.getJAXBContext(), i);
-		if(isElement){
-			return createJAXBBlock(jaxbObject, context);
-		}
-		else{
-			//Create JAXBElement then use that to create JAXBBlock.
-			Class objectType = jaxbObject.getClass();
-		
-			JAXBElement<Object> element = null;
-			if (name != null) {
-				element = new JAXBElement<Object>(new QName(targetNamespace,
-						name), objectType, jaxbObject);
-			} else {
-				String xmlName = readXMLTypeName(objectType);
-				element = new JAXBElement<Object>(new QName(targetNamespace, xmlName), objectType, jaxbObject);
-			}
-			
-			JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
-			return factory.createFrom(element,context ,null);
-		}
-		
-	}
-	
-	
-	protected String readXMLTypeName(Class jaxbClazz){
-		XmlType type = (XmlType)jaxbClazz.getAnnotation(XmlType.class);
-		if(type !=null){
-			return type.name();
-		}
-		return null;
-	}
-	
-	
-	private Class loadClass(String className)throws ClassNotFoundException{
-		// TODO J2W AccessController Needed
-		// Don't make this public, its a security exposure
-		return Class.forName(className, true, Thread.currentThread().getContextClassLoader());
-	}
-	
-	/**
-	 * In this method I am trying get the return type of the method.
-	 * if SEI method is Async pooling implmentation then return type is actual type in Generic Response, example Response<ClassName>.
-	 * if SEI method is Async Callback implementation then return type is actual type of method parameter type AsyncHandler, example AsyncHandler<ClassName>
-	 * I use java reflection to get the return type.
-	 * @param isAsync
-	 * @return
-	 */
-	protected Class getReturnType(OperationDescription operationDesc){
-		Method seiMethod = operationDesc.getSEIMethod();
-		Class returnType = seiMethod.getReturnType();
-		if(isAsync(operationDesc)){
-			//pooling implementation
-			if(Response.class.isAssignableFrom(returnType)){
-				Type type = seiMethod.getGenericReturnType();
-				ParameterizedType pType = (ParameterizedType) type;
-				return (Class)pType.getActualTypeArguments()[0];	
-			}
-			//Callback Implementation
-			else{
-				Type[] type = seiMethod.getGenericParameterTypes();
-				Class parameters[]= seiMethod.getParameterTypes();
-				int i=0;
-				for(Class param:parameters){
-					if(AsyncHandler.class.isAssignableFrom(param)){
-						ParameterizedType pType = (ParameterizedType)type[i];
-						return (Class)pType.getActualTypeArguments()[0];
-					}
-					i++;
-				}
-			}
-			
-		}
-		
-		return returnType;	
-	}
-	
-	private boolean isParamAsyncHandler(String name, Object value, OperationDescription operationDesc){
-		if(value!=null && value instanceof AsyncHandler){
-			if(log.isDebugEnabled()){
-				log.debug("Parameter is AsycnHandler Object");
-			}
-			if(!isAsync(operationDesc)){
-				if (log.isDebugEnabled()) {
-		            log.debug("Method parameter type javax.xml.ws.AsyncHandler should only be used with Async Callback operations, method is Async if it returns a Future<?> and endswith letters 'Async'");
-		        }
-				throw ExceptionFactory.makeWebServiceException(Messages.getMessage("DocLitProxyHandlerErr3"));
-			}
-			return true;
-		}
-		return false;
-		
-	}
-	
-	protected boolean isHolder(Object value){
-		return value!=null && Holder.class.isAssignableFrom(value.getClass());
-	}
-	
-	protected boolean isHolder(Class type){
-		return type!=null && Holder.class.isAssignableFrom(type);
-	}
-
-    protected Object getHolderValue(Mode mode, Object value){
-		if(!Holder.class.isAssignableFrom(value.getClass())){
-			if(log.isDebugEnabled()){
-				log.debug("Object Not a Holder type");
-			}
-			ExceptionFactory.makeWebServiceException(Messages.getMessage("DocLitProxyHandlerErr5"));
-		}
-		if(mode !=null && mode.equals(Mode.IN)){
-			if(log.isDebugEnabled()){
-				log.debug("WebParam annotation's Mode cannot be IN for input parameter of type Holder");
-			}
-			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("DocLitProxyHandlerErr4"));
-		}
-		Holder holder = (Holder)value;
-		return holder.value;
-		
-	}
-	
-	protected <T> Holder<T> createHolder(Class paramType, T value) throws IllegalAccessException, InstantiationException, ClassNotFoundException{
-		if(Holder.class.isAssignableFrom(paramType)){
-    		Class holderClazz = loadClass(paramType.getName());
-    		Holder<T> holder = (Holder<T>) holderClazz.newInstance();
-    		holder.value = value;
-    		return holder;
-    	}
-		return null;
-	}
-	
-	protected Message createMessage(ArrayList<MethodParameter> mps, OperationDescription operationDesc) throws JAXBException, WebServiceException, XMLStreamException{
-		Block block = null;
-		Object object = null;
-		String objectName = null;
-		String objectTNS = null;
-		Class objectType = null;
-		boolean isHeader =false;
-        
-        Protocol protocol = null;
-        try {
-            protocol = Protocol.getProtocolForBinding(operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getBindingType()); //soap11;
-        } catch (WebServiceException e) {
-            // TODO better handling than this?
-            e.printStackTrace();
-        }
-		
-		MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.create(protocol);
-		
-		for(MethodParameter mp : mps){
-
-			if (!mp.isWebResult()) {
-				ParameterDescription pd = mp.getParameterDescription();
-				object = mp.getValue();
-				objectName = pd.getParameterName();
-				objectType = pd.getParameterActualType();
-				objectTNS = pd.getTargetNamespace();
-				isHeader = pd.isHeader();
-			} else {
-				object = mp.getValue();
-				objectName = mp.getWebResultName();
-				objectType = mp.getWebResultType();
-				objectTNS = mp.getWebResultTNS();
-				isHeader = false;
-			}
-			if (!isHeader && object == null) {
-				if (log.isDebugEnabled()) {
-		            log.debug("Method Input parameter for NON Wrapped Request cannot be null");
-		        }
-				throw ExceptionFactory.makeWebServiceException(Messages.getMessage("DocLitProxyHandlerErr2"));
-			}
-			JAXBBlockContext ctx = createJAXBBlockContext(createContextPackageSet(operationDesc));
-			if (log.isDebugEnabled()) {
-	            log.debug("Attempting to create Block");
-	        }
-			if(XMLRootElementUtil.isElementEnabled(objectType)){
-				block = createJAXBBlock(object, ctx);
-			}
-			else{
-				
-				block =  createJAXBBlock(objectName, object, ctx, objectTNS);
-			}
-			if (log.isDebugEnabled()) {
-	            log.debug("JAXBBlock Created");
-	        }	
-			if(isHeader){
-				m.setHeaderBlock(objectTNS, objectName, block);
-				if (log.isDebugEnabled()) {
-		            log.debug("Header Block Created");
-		        }
-			}
-			else{
-				m.setBodyBlock(0,block);
-				if (log.isDebugEnabled()) {
-		            log.debug("Body Block Created");
-		        }
-			}
-		}
-		return m;
-	}
-	
-	protected Message createFaultMessage(OMElement element) throws XMLStreamException, WebServiceException {
-		MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
-		return mf.createFrom(element);
-	}
-	
-	protected Message createEmptyMessage(OperationDescription operationDesc) throws JAXBException, WebServiceException, XMLStreamException {
-        
-        Protocol protocol = null;
-        try {
-            protocol = Protocol.getProtocolForBinding(operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getBindingType());
-        } catch (WebServiceException e) {
-            // TODO better handling than this?
-            e.printStackTrace();
-        }
-        
-		MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.create(protocol);
-		return m;
-	}
-	
-	protected Object createBOFromHeaderBlock(Set<String> contextPackages, Message message, String targetNamespace, String localPart) throws JAXBException, WebServiceException, XMLStreamException{
-		
-		JAXBBlockContext blockContext = createJAXBBlockContext(contextPackages);
-		
-		// Get a JAXBBlockFactory instance.  We'll need this to get the JAXBBlock
-        // out of the Message
-        JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class); 
-        Block block = message.getHeaderBlock(targetNamespace, localPart, blockContext, factory);
-        return block.getBusinessObject(true);
-	}
-	
-	protected Object createBOFromBodyBlock(Set<String> contextPackages, Message message) throws JAXBException, WebServiceException, XMLStreamException{
-		return createBusinessObject(contextPackages, message);
-	}
-
-	
-	protected Object createBusinessObject(Set<String> contextPackages, Message message) throws JAXBException, WebServiceException, XMLStreamException{
-		JAXBBlockContext blockContext = createJAXBBlockContext(contextPackages);
-		
-		// Get a JAXBBlockFactory instance.  We'll need this to get the JAXBBlock
-        // out of the Message
-        JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
-        
-        Block block = message.getBodyBlock(0, blockContext, factory);
-        return block.getBusinessObject(true);
-	}
-	
-	private JAXBBlockContext createJAXBBlockContext(Set<String> contextPackages) throws JAXBException, WebServiceException {
-		JAXBBlockContext blockContext = new JAXBBlockContext(contextPackages);
-		return blockContext;
-	}
-
-	/**
-	 * @param contextPackages
-	 * @param block
-	 * @return
-	 * @throws JAXBException
-	 * @throws WebServiceException
-	 * @throws XMLStreamException
-	 */
-	protected Object createFaultBusinessObject(Block block, OperationDescription operationDesc)
-			throws JAXBException, WebServiceException, XMLStreamException {
-		JAXBBlockContext blockContext = new JAXBBlockContext(createContextPackageSet(operationDesc));		
-		// Get a JAXBBlockFactory instance. 
-        JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
-        
-        Block jaxbBlock = factory.createFrom(block, blockContext);
-        return jaxbBlock.getBusinessObject(true); 
-	}
-	
-    protected void assignHolderValues(ArrayList<MethodParameter> mps, ArrayList<Object> inputArgHolders, Message message, OperationDescription operationDesc)
-            throws JAXBException, WebServiceException, XMLStreamException{
-		Object bo = null;
-		int index = 0;
-		for(MethodParameter mp:mps){
-			ParameterDescription pd = mp.getParameterDescription();
-			if (pd.isHeader() && pd.isHolderType()) {
-				bo = createBOFromHeaderBlock(createContextPackageSet(operationDesc),
-						message, pd.getTargetNamespace(), pd
-								.getParameterName());
-			}
-			else if(!pd.isHeader() && pd.isHolderType()){
-				bo = createBOFromBodyBlock(createContextPackageSet(operationDesc), message);
-			}
-			try{
-				Holder inputArgHolder = (Holder)inputArgHolders.get(index);
-				inputArgHolder.value = bo;
-				index++;
-			}catch(Exception e){
-				ExceptionFactory.makeWebServiceException(e);
-			}
-		}
-	}
-    
-    /**
-     * Simple utility to create package set from a single class
-     * @param cls
-     * @return
-     */
-    protected Set<String> createContextPackageSet(OperationDescription operationDesc) {
-         return operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getPackages();
-    }
-	
-    protected void assignHolderValues(Object bo, Object[] inputArgs, boolean isBare, OperationDescription operationDesc)throws JAXBWrapperException, InstantiationException, ClassNotFoundException, IllegalAccessException{
-		if(inputArgs == null){
-			return;
-		}
-		//Remove everything except for Holders from input parameter provided by client application.
-		ArrayList<Object> objList = new ArrayList<Object>();
-		ParameterDescription[] pds = operationDesc.getParameterDescriptions();
-		int index = 0;
-		//Read Holders from Input parameteres.
-		for(ParameterDescription pd : pds){
-		    if(pd.isHolderType()) {
-		        objList.add(inputArgs[index]);
-            }
-		    index++;
-		}
-		//If no holder params in method
-		if(objList.size()<=0){
-			return;
-		}
-
-		//Next get all the holder objects from Business Object created from Response Message
-		ArrayList<MethodParameter> mps = extractHolderParameters(bo, operationDesc);
-        
-		if(mps.size() <=0){
-			return;
-		}
-
-		index=0;
-		//assign Holder values from Business Object to input client parameters.
-		for(Object inputArg: objList){
-		    if(inputArg!=null){
-		        Holder inputHolder = (Holder)inputArg;
-		        MethodParameter mp = mps.get(index);
-		        Holder responseHolder = (Holder)mp.getValue();
-		        inputHolder.value = responseHolder.value;
-		    }
-			index++;
-		}
-		
-	}
-	
-	protected Object findProperty(String propertyName, Object jaxbObject)throws JAXBWrapperException{
-		JAXBWrapperTool wrapTool = new JAXBWrapperToolImpl();
-		if (log.isDebugEnabled()) {
-            log.debug("Attempting to unwrap objects");
-        }
-		Object[] webResult = wrapTool.unWrap(jaxbObject,new ArrayList<String>(Arrays.asList(new String[]{propertyName})));
-		if (log.isDebugEnabled()) {
-            log.debug("Object unwrapped");
-        }
-		//this is a parameter in JAXBObject
-		return webResult[0];
-	}
-
-	
-	/*
-	 * Utility methods below are used entiredly by marshalFaultResponse and
-	 * demarshalFaultResponse
-	 */
-	
-	
-    private static Exception createCustomException(String message, Class exceptionclass, Object bean, Class beanFormalType) throws InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException {
-		// All webservice exception classes are required to have a constructor that takes a (String, bean) argument
-    	// TODO necessary to be more careful here with instantiating, cassting, etc?
-		if (log.isDebugEnabled()) {
-		    log.debug("Constructing JAX-WS Exception:" + exceptionclass);
-        }
-        Constructor constructor = exceptionclass.getConstructor(new Class[] { String.class, beanFormalType });
-		Object exception = constructor.newInstance(new Object[] { message, bean });
-
-		return (Exception) exception;
-
-    }
-    
-    private static Exception createGenericException(String message) {
-    	return ExceptionFactory.makeWebServiceException(message);
-    }
-    
-}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/factory/MethodMarshallerFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/factory/MethodMarshallerFactory.java	(revision 498044)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/factory/MethodMarshallerFactory.java	(working copy)
@@ -19,9 +19,6 @@
 import javax.jws.soap.SOAPBinding;
 
 import org.apache.axis2.jaxws.marshaller.MethodMarshaller;
-import org.apache.axis2.jaxws.marshaller.impl.DocLitBareMethodMarshallerImpl;
-import org.apache.axis2.jaxws.marshaller.impl.DocLitWrappedMethodMarshallerImpl;
-import org.apache.axis2.jaxws.marshaller.impl.RPCLitMethodMarshallerImpl;
 import org.apache.axis2.jaxws.marshaller.impl.alt.DocLitBareMethodMarshaller;
 import org.apache.axis2.jaxws.marshaller.impl.alt.DocLitWrappedMethodMarshaller;
 import org.apache.axis2.jaxws.marshaller.impl.alt.RPCLitMethodMarshaller;
@@ -32,15 +29,7 @@
  */
 public class MethodMarshallerFactory {
 
-    // The following flags are for testing only.
-    // The allow us to test the old implementation against the new implementation.
-    private static final boolean ALT_RPCLIT_CLIENT         = true;
-    private static final boolean ALT_DOCLIT_WRAPPED_CLIENT = true;
-    private static final boolean ALT_DOCLIT_BARE_CLIENT    = true;
     
-    private static final boolean ALT_RPCLIT_SERVER         = true;
-    private static final boolean ALT_DOCLIT_WRAPPED_SERVER = true;
-    private static final boolean ALT_DOCLIT_BARE_SERVER    = true;
     
 	/**
 	 * Intentionally private
@@ -61,23 +50,11 @@
             SOAPBinding.ParameterStyle paramStyle,
             boolean isClient){  // This flag is for testing only !
 		if (style == SOAPBinding.Style.RPC) {
-            if (ALT_RPCLIT_CLIENT && isClient || ALT_RPCLIT_SERVER && !isClient ) {
-                return new RPCLitMethodMarshaller();  
-            } else {
-                return new RPCLitMethodMarshallerImpl();
-            }
+            return new RPCLitMethodMarshaller();  
         } else if (paramStyle == SOAPBinding.ParameterStyle.WRAPPED){
-            if (ALT_DOCLIT_WRAPPED_CLIENT && isClient || ALT_DOCLIT_WRAPPED_SERVER && !isClient) {
-                return new DocLitWrappedMethodMarshaller();
-            } else {
-                return new DocLitWrappedMethodMarshallerImpl();
-            }
+            return new DocLitWrappedMethodMarshaller();
 		} else if (paramStyle == SOAPBinding.ParameterStyle.BARE){
-            if (ALT_DOCLIT_BARE_CLIENT && isClient || ALT_DOCLIT_BARE_SERVER && !isClient) {
-                return new DocLitBareMethodMarshaller();
-            } else {
-                return new DocLitBareMethodMarshallerImpl();
-            }
+            return new DocLitBareMethodMarshaller();
 		}
 		return null;
 	}
