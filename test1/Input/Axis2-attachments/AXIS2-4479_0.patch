Index: modules/kernel/test/org/apache/axis2/deployment/HierarchicalServiceTest.java
===================================================================
--- modules/kernel/test/org/apache/axis2/deployment/HierarchicalServiceTest.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/deployment/HierarchicalServiceTest.java	(revision 0)
@@ -0,0 +1,40 @@
+package org.apache.axis2.deployment;
+
+import junit.framework.TestCase;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.AbstractTestCase;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.description.AxisServiceGroup;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.context.ConfigurationContextFactory;
+
+
+public class HierarchicalServiceTest extends TestCase {
+    AxisConfiguration axisConfig;
+    String repo = AbstractTestCase.basedir + "/test-resources/deployment/hierarchicalServiceRepo";
+
+
+    protected void setUp() throws Exception {
+        axisConfig = ConfigurationContextFactory.createConfigurationContextFromFileSystem(repo,
+                repo + "/axis2.xml").getAxisConfiguration();
+    }
+
+    public void testHierarchicalServices() throws AxisFault {
+        //Test for foo/bar/1.0.0 hierarchy
+        AxisServiceGroup sg100 = axisConfig.getServiceGroup("foo!bar!1.0.0!testService");
+        assertNotNull(sg100);
+        AxisService hie100service1 = axisConfig.getService("foo!bar!1.0.0!Hie100Service1");
+        assertNotNull(hie100service1);
+        AxisService hie100service2 = axisConfig.getService("foo!bar!1.0.0!Hie100Service2");
+        assertNotNull(hie100service2);
+
+        //Test for foo/bar/1.0.1 hierarchy
+        AxisServiceGroup sg101 = axisConfig.getServiceGroup("foo!bar!1.0.1!testService");
+        assertNotNull(sg101);
+        AxisService hie101service1 = axisConfig.getService("foo!bar!1.0.1!Hie101Service1");
+        assertNotNull(hie101service1);
+        AxisService hie101service2 = axisConfig.getService("foo!bar!1.0.1!Hie101Service2");
+        assertNotNull(hie101service2);
+    }
+
+}
Index: modules/kernel/src/org/apache/axis2/deployment/repository/util/WSInfoList.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/repository/util/WSInfoList.java	(revision 810805)
+++ modules/kernel/src/org/apache/axis2/deployment/repository/util/WSInfoList.java	(working copy)
@@ -67,17 +67,18 @@
      *
      * @param file actual jar files for either Module or service
      */
-    public synchronized void addWSInfoItem(File file, Deployer deployer , int type) {
+    public synchronized void addWSInfoItem(File file, Deployer deployer , int type, String dir) {
         WSInfo info = (WSInfo) currentJars.get(file.getAbsolutePath());
         if (info != null) {
             if (deploymentEngine.isHotUpdate() && isModified(file, info)) {
                 WSInfo wsInfo = new WSInfo(info.getFileName(), info.getLastModifiedDate(), deployer,type);
                 deploymentEngine.addWSToUndeploy(wsInfo);           // add entry to undeploy list
                 DeploymentFileData deploymentFileData = new DeploymentFileData(file, deployer);
+                deploymentFileData.setDirectory(dir);
                 deploymentEngine.addWSToDeploy(deploymentFileData);    // add entry to deploylist
             }
         } else {
-            info = getFileItem(file, deployer, type);
+            info = getFileItem(file, deployer, type, dir);
             setLastModifiedDate(file, info);
         }
 
@@ -149,13 +150,14 @@
      * Gets the WSInfo object related to a file if it exists, null otherwise.
      *
      */
-    private WSInfo getFileItem(File file , Deployer deployer , int type) {
+    private WSInfo getFileItem(File file , Deployer deployer , int type, String dir) {
         String fileName = file.getName();
         WSInfo info = (WSInfo) currentJars.get(fileName);
         if(info==null){
             info = new WSInfo(file.getAbsolutePath(), file.lastModified(), deployer ,type);
             currentJars.put(file.getAbsolutePath(), info);
             DeploymentFileData fileData = new DeploymentFileData(file, deployer);
+            fileData.setDirectory(dir);
             deploymentEngine.addWSToDeploy(fileData);
         }
         return info;
Index: modules/kernel/src/org/apache/axis2/deployment/repository/util/DeploymentFileData.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/repository/util/DeploymentFileData.java	(revision 810805)
+++ modules/kernel/src/org/apache/axis2/deployment/repository/util/DeploymentFileData.java	(working copy)
@@ -38,6 +38,8 @@
     private File file;
     private ClassLoader classLoader;
     private Deployer deployer;
+    //directory in which the file was found
+    private String directory;
 
     public DeploymentFileData(File file) {
         this.file = file;
@@ -135,4 +137,12 @@
     public void deploy() throws DeploymentException {
         deployer.deploy(this);
     }
+
+    public String getDirectory() {
+        return directory;
+    }
+
+    public void setDirectory(String directory) {
+        this.directory = directory;
+    }
 }
Index: modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(revision 810805)
+++ modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(working copy)
@@ -597,6 +597,20 @@
         if (isServiceGroupReadyToDeploy(serviceGroup, serviceList, serviceLocation,
                 currentDeploymentFile, axisConfiguration)) {
 
+            // Add the hierarchical path to the service group
+            if (serviceLocation != null && currentDeploymentFile != null) {
+                String serviceHierarchy = Utils.getServiceHierarchy(serviceLocation.getPath(),
+                        currentDeploymentFile.getDirectory());
+                if (!"".equals(serviceHierarchy)) {
+                    serviceGroup.setServiceGroupName(serviceHierarchy
+                            + serviceGroup.getServiceGroupName());
+                    for (Object o : serviceList) {
+                        AxisService axisService = (AxisService) o;
+                        axisService.setName(serviceHierarchy + axisService.getName());
+                    }
+                }
+            }
+
             fillServiceGroup(serviceGroup, serviceList, serviceLocation, axisConfiguration);
             axisConfiguration.addServiceGroup(serviceGroup);
 
Index: modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java	(revision 810805)
+++ modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java	(working copy)
@@ -61,6 +61,9 @@
 
     public void deploy(DeploymentFileData deploymentFileData) {
         ClassLoader threadClassLoader = Thread.currentThread().getContextClassLoader();
+        // Get the hierarchical path of the service
+        String serviceHierarchy = Utils.getServiceHierarchy(deploymentFileData.getAbsolutePath(), 
+                deploymentFileData.getDirectory());
         try {
             String extension = DeploymentFileData.getFileExtension(deploymentFileData.getName());
             if ("class".equals(extension)) {
@@ -76,7 +79,7 @@
                 className = className.replaceAll(".class", "");
                 Class clazz = Loader.loadClass(className);
                 log.info(Messages.getMessage(DeploymentErrorMsgs.DEPLOYING_POJO,
-                        className,
+                        serviceHierarchy + className,
                         deploymentFileData.getFile().getAbsolutePath()));
 
 
@@ -90,22 +93,23 @@
                  */
                 WebServiceAnnotation annotation =
                         JSR181Helper.INSTANCE.getWebServiceAnnotation(clazz);
+                AxisService axisService;
                 if (annotation != null) {
                     // try to see whether JAX-WS jars in the class path , if so use them
                     // to process annotated pojo else use annogen to process the pojo class
-                    AxisService axisService;
                     axisService =
                             createAxisService(classLoader,
                                     className,
                                     deploymentFileData.getFile().toURL());
-                    configCtx.getAxisConfiguration().addService(axisService);
                 } else {
-                    AxisService axisService =
+                    axisService =
                             createAxisServiceUsingAnnogen(className,
                                     classLoader,
                                     deploymentFileData.getFile().toURL());
-                    configCtx.getAxisConfiguration().addService(axisService);
                 }
+                //add the hierarchical path to the service name
+                axisService.setName(serviceHierarchy + axisService.getName());
+                configCtx.getAxisConfiguration().addService(axisService);
 
             } else if ("jar".equals(extension)) {
                 ArrayList classList;
@@ -178,10 +182,13 @@
                 }
 
                 if (axisServiceList.size() > 0) {
+                    //create the service group considering the hierarchical path also
                     AxisServiceGroup serviceGroup = new AxisServiceGroup();
-                    serviceGroup.setServiceGroupName(deploymentFileData.getName());
+                    serviceGroup.setServiceGroupName(serviceHierarchy +
+                            deploymentFileData.getName());
                     for (Object anAxisServiceList : axisServiceList) {
                         AxisService axisService = (AxisService)anAxisServiceList;
+                        axisService.setName(serviceHierarchy + axisService.getName());
                         serviceGroup.addService(axisService);
                     }
                     configCtx.getAxisConfiguration().addServiceGroup(serviceGroup);
Index: modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java	(revision 810805)
+++ modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axis2.deployment.repository.util.WSInfoList;
 import org.apache.axis2.deployment.util.Utils;
 import org.apache.axis2.util.Loader;
+import org.apache.axis2.i18n.Messages;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -248,7 +249,7 @@
 
     /** Finds a list of services in the folder and adds to wsInfoList. */
     public void checkServices() {
-        findServicesInDirectory();
+        findServicesInDirectory(deploymentEngine.getServicesDir());
         loadOtherDirectories();
         update();
     }
@@ -270,19 +271,22 @@
             String directory = entry.getKey();
             Map<String, Deployer> extensionMap = entry.getValue();
             for (String extension : extensionMap.keySet()) {
-                findFileForGivenDirectory(directory, extension);
+                String[] strings = directory.split("/");
+                File dirToSearch = new File(deploymentEngine.getRepositoryDir(),
+                        strings[strings.length - 1]);
+                findFileForGivenDirectory(dirToSearch, extension, directory);
             }
         }
     }
 
-    private void findFileForGivenDirectory(String dir, String extension) {
+    /**
+     * Recursively finds files with the provided extension and adds them to be deployed
+     * @param directory - directory to search
+     * @param extension - extension to look for
+     * @param dir - dir given in the axis2.xml this is used to find the correct deployer
+     */
+    private void findFileForGivenDirectory(File directory, String extension, String dir) {
         try {
-            File directory = deploymentEngine.getRepositoryDir();
-            String[] strings = dir.split("/");
-            for (int i = 0; i < strings.length; i++) {
-                directory = new File(directory, strings[i]);
-            }
-
             if (directory.exists()) {
                 File[] files = directory.listFiles();
                 if (files != null && files.length > 0) {
@@ -295,7 +299,10 @@
                                 .equals(DeploymentFileData.getFileExtension(file.getName()))) {
                             addFileToDeploy(file,
                                             deploymentEngine.getDeployer(dir, extension),
-                                            WSInfo.TYPE_CUSTOM);
+                                            WSInfo.TYPE_CUSTOM, dir);
+                        } else if (file.isDirectory()) {
+                            //look in the child directory also
+                            findFileForGivenDirectory(file, extension, dir);
                         }
                     }
                 }
@@ -305,37 +312,68 @@
         }
     }
 
-    /** Searches a given folder for jar files and adds them to a list in the WSInfolist class. */
-    protected void findServicesInDirectory() {
-        File root = deploymentEngine.getServicesDir();
+    /**
+     * Searches a given folder for jar files and adds them to a list in the WSInfolist class.
+     * If sub folders found, those are also searched for services.
+     * Ex : repository/services/foo/1.0.0/echo.aar
+     *      repository/services/foo/1.0.1/echo.aar
+     *      repository/services/echo.aar 
+     * @param root - directory from which we start searching for services
+     */
+    protected void findServicesInDirectory(File root) {
+        // flag to identify whether this is the repository/services folder
+        boolean servicesDir = false;
+        if (deploymentEngine.getServicesDir().getAbsolutePath().equals(root.getAbsolutePath())) {
+            servicesDir = true;
+        }
         File[] files = root.listFiles();
 
         if (files != null && files.length > 0) {
-            for (int i = 0; i < files.length; i++) {
-                File file = files[i];
+            /**
+             * This noServicesXML flag is used to check whether this folder (root) doesn't contain
+             * any deployable artifacts.
+             */
+            boolean noServicesXML = true;
+            for (File file : files) {
                 if (isSourceControlDir(file)) {
                     continue;
                 }
                 if (!file.isDirectory()) {
                     if (DeploymentFileData.isServiceArchiveFile(file.getName())) {
                         addFileToDeploy(file, deploymentEngine.getServiceDeployer(),
-                                        WSInfo.TYPE_SERVICE);
+                                WSInfo.TYPE_SERVICE, deploymentEngine.getServicesDir().getName());
+                        noServicesXML = false;
                     } else {
                         String ext = DeploymentFileData.getFileExtension(file.getName());
                         Deployer deployer = deploymentEngine.getDeployerForExtension(ext);
                         // If we found a deployer for this type of file, use it.  Otherwise
                         // ignore the file.
                         if (deployer != null) {
-                            addFileToDeploy(file, deployer, WSInfo.TYPE_SERVICE);
+                            addFileToDeploy(file, deployer, WSInfo.TYPE_SERVICE,
+                                    deploymentEngine.getServicesDir().getName());
+                            noServicesXML = false;
                         }
                     }
                 } else {
-                    if (!"lib".equalsIgnoreCase(file.getName())) {
-                        addFileToDeploy(file, deploymentEngine.getServiceDeployer(),
-                                        WSInfo.TYPE_SERVICE);
+                    if (!(servicesDir && "lib".equalsIgnoreCase(file.getName()))) {
+                        File servicesXML = new File(file, DeploymentConstants.SERVICES_XML);
+                        if (!servicesXML.exists()) {
+                            servicesXML =
+                                    new File(file, DeploymentConstants.SERVICES_XML.toLowerCase());
+                        }
+                        if (servicesXML.exists()) {
+                            addFileToDeploy(file, deploymentEngine.getServiceDeployer(),
+                                    WSInfo.TYPE_SERVICE, deploymentEngine.getServicesDir().getName());
+                        } else {
+                            findServicesInDirectory(file);
+                        }
+                        noServicesXML = false;
                     }
                 }
             }
+            if (noServicesXML) {
+                log.error(Messages.getMessage(DeploymentErrorMsgs.SERVICE_XML_NOT_FOUND));
+            }
         }
     }
 
@@ -351,11 +389,15 @@
     }
 
     public void updateRemote() throws Exception {
-        findServicesInDirectory();
+        findServicesInDirectory(deploymentEngine.getServicesDir());
         update();
     }
 
+    public void addFileToDeploy(File file, Deployer deployer, int type, String dir) {
+        wsInfoList.addWSInfoItem(file, deployer, type, dir);
+    }
+
     public void addFileToDeploy(File file, Deployer deployer, int type) {
-        wsInfoList.addWSInfoItem(file, deployer, type);
+        addFileToDeploy(file, deployer, type, null);
     }
 }
Index: modules/kernel/src/org/apache/axis2/deployment/util/Utils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/util/Utils.java	(revision 810805)
+++ modules/kernel/src/org/apache/axis2/deployment/util/Utils.java	(working copy)
@@ -1875,4 +1875,41 @@
             }
         }
     }
+
+    /**
+     * Computes the hierarchical part of the service name if this is such a service path.
+     * In this hierarchical path, we use '!' instead of '/'.
+     * Ex:  filePath = .../repository/services/foo/1.0.0/version.aar -> "foo!1.0.0"
+     *      filePath = .../repository/services/version.aar -> ""
+     * @param filePath - input file path of the deploying file
+     * @param serviceDir - 'services', 'pojo', 'servicejars' etc..
+     * @return hierarchical path. either "" or a '/' separated string (Ex: foo!1.0.0)
+     */
+    public static String getServiceHierarchy(String filePath, String serviceDir) {
+        if (filePath == null || serviceDir == null) {
+            return "";
+        }
+        String[] splited = filePath.split(serviceDir + "/");
+        String serviceHierarchy = null;
+        if (splited.length > 1) {
+            String temp = splited[splited.length - 1];
+            //if this is a directory, there can be a '/' at the end. Remove it..
+            if (temp.endsWith("/")) {
+                temp = temp.substring(0, temp.length() - 1);
+            }
+            //if this is not a hierarchical path, return a 0 length string
+            if (temp.lastIndexOf('/') == -1) {
+                return "";
+            }
+            serviceHierarchy = temp.substring(0, temp.lastIndexOf('/') + 1);
+
+            /**
+             * Now replace '/' using the special charactor '!'. This is to overcome the issues
+             * in dispatching. If we use '/', it is hard to find service and operation by looking
+             * at the EPR, in dispatch time.
+             */
+            serviceHierarchy = serviceHierarchy.replace('/', '!');
+        }
+        return serviceHierarchy;
+    }
 }
Index: modules/kernel/test-resources/deployment/hierarchicalServiceRepo/services/foo/bar/1.0.0/testService/META-INF/services.xml
===================================================================
--- modules/kernel/test-resources/deployment/hierarchicalServiceRepo/services/foo/bar/1.0.0/testService/META-INF/services.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/hierarchicalServiceRepo/services/foo/bar/1.0.0/testService/META-INF/services.xml	(revision 0)
@@ -0,0 +1,33 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+<serviceGroup>
+    <service name="Hie100Service1">
+        <operation name="op1">
+        </operation>
+        <operation name="op2">
+        </operation>
+    </service>
+    <service name="Hie100Service2">
+        <operation name="op1">
+        </operation>
+        <operation name="op2">
+        </operation>
+    </service>
+    <parameter name="ServiceClass">org.apache.axis2.Echo2</parameter>
+</serviceGroup>
\ No newline at end of file
Index: modules/kernel/test-resources/deployment/hierarchicalServiceRepo/services/foo/bar/1.0.1/testService/META-INF/services.xml
===================================================================
--- modules/kernel/test-resources/deployment/hierarchicalServiceRepo/services/foo/bar/1.0.1/testService/META-INF/services.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/hierarchicalServiceRepo/services/foo/bar/1.0.1/testService/META-INF/services.xml	(revision 0)
@@ -0,0 +1,33 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+<serviceGroup>
+    <service name="Hie101Service1">
+        <operation name="op1">
+        </operation>
+        <operation name="op2">
+        </operation>
+    </service>
+    <service name="Hie101Service2">
+        <operation name="op1">
+        </operation>
+        <operation name="op2">
+        </operation>
+    </service>
+    <parameter name="ServiceClass">org.apache.axis2.Echo2</parameter>
+</serviceGroup>
\ No newline at end of file
Index: modules/kernel/test-resources/deployment/hierarchicalServiceRepo/axis2.xml
===================================================================
--- modules/kernel/test-resources/deployment/hierarchicalServiceRepo/axis2.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/hierarchicalServiceRepo/axis2.xml	(revision 0)
@@ -0,0 +1,97 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">true</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <parameter name="seralizeLocation">./target</parameter>
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!-- This is the Deafult Message Receiver for the Request Response style Operations -->
+    <messageReceiver mep="INOUT" class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+         <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher"/>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+        </phase>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher"/>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+        </phase>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+</axisconfig>
+
Index: modules/scripting/src/org/apache/axis2/scripting/ScriptRepositoryListener.java
===================================================================
--- modules/scripting/src/org/apache/axis2/scripting/ScriptRepositoryListener.java	(revision 810805)
+++ modules/scripting/src/org/apache/axis2/scripting/ScriptRepositoryListener.java	(working copy)
@@ -50,7 +50,7 @@
 
         if (files != null && files.length > 0) {
             for (int i = 0; i < files.length; i++) {
-                wsInfoList.addWSInfoItem(files[i], deploymentEngine.getModuleDeployer(), WSInfo.TYPE_CUSTOM);
+                wsInfoList.addWSInfoItem(files[i], deploymentEngine.getModuleDeployer(), WSInfo.TYPE_CUSTOM, null);
             }
         }
 
Index: modules/jaxws/src/org/apache/axis2/jaxws/framework/JAXWSDeployer.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/framework/JAXWSDeployer.java	(revision 810805)
+++ modules/jaxws/src/org/apache/axis2/jaxws/framework/JAXWSDeployer.java	(working copy)
@@ -105,7 +105,7 @@
                                 getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
                         axisConfig.isChildFirstClassLoading());
                 Thread.currentThread().setContextClassLoader(classLoader);
-                deployClasses("JAXWS-Builtin", file.toURL(), Thread.currentThread().getContextClassLoader(), classList);
+                deployClasses("JAXWS-Builtin", "", file.toURL(), Thread.currentThread().getContextClassLoader(), classList);
             } catch (Exception e) {
                 log.info(Messages.getMessage("deployingexception", e.getMessage()), e);
             } finally {
@@ -138,8 +138,11 @@
             threadClassLoader = Thread.currentThread().getContextClassLoader();
             String groupName = deploymentFileData.getName();
             URL location = deploymentFileData.getFile().toURL();
+            // Get the hierarchical path of the service
+            String serviceHierarchy = Utils.getServiceHierarchy(location.getPath(),
+                    deploymentFileData.getDirectory());
             if (isJar(deploymentFileData.getFile())) {
-                log.info("Deploying artifact : " + deploymentFileData.getName());
+                log.info("Deploying artifact : " + deploymentFileData.getAbsolutePath());
                 ArrayList urls = new ArrayList();
                 urls.add(deploymentFileData.getFile().toURL());
                 urls.add(axisConfig.getRepository());
@@ -157,7 +160,8 @@
                 Thread.currentThread().setContextClassLoader(classLoader);
 
                 ArrayList classList = getListOfClasses(deploymentFileData);
-                AxisServiceGroup serviceGroup = deployClasses(groupName, location, classLoader, classList); 
+                AxisServiceGroup serviceGroup = deployClasses(groupName,
+                        serviceHierarchy, location, classLoader, classList);
                 
                 if(serviceGroup == null) {
                     String msg = "Error:\n No annotated classes found in the jar: " +
@@ -178,7 +182,8 @@
         }
     }
 
-    protected AxisServiceGroup deployClasses(String groupName, URL location, ClassLoader classLoader, List classList)
+    protected AxisServiceGroup deployClasses(String groupName, String serviceHierarchy, 
+                                             URL location, ClassLoader classLoader, List classList)
             throws ClassNotFoundException, InstantiationException, IllegalAccessException, AxisFault {
         ArrayList axisServiceList = new ArrayList();
         for (int i = 0, size = classList.size(); i < size; i++) {
@@ -206,7 +211,8 @@
                                 className,
                                 location);
                 if(axisService != null) {
-                    log.info("Deploying JAXWS annotated class " + className + " as a service - " + axisService.getName());
+                    log.info("Deploying JAXWS annotated class " + className + " as a service - "
+                            + serviceHierarchy + axisService.getName());
                     axisServiceList.add(axisService);
                 }
             }
@@ -215,10 +221,12 @@
         if (size <= 0) {
             return null;
         }
+        //creating service group by considering the hierarchical path also
         AxisServiceGroup serviceGroup = new AxisServiceGroup();
-        serviceGroup.setServiceGroupName(groupName);
+        serviceGroup.setServiceGroupName(serviceHierarchy + groupName);
         for (int i = 0; i < size; i++) {
             AxisService axisService = (AxisService) axisServiceList.get(i);
+            axisService.setName(serviceHierarchy + axisService.getName());
             serviceGroup.addService(axisService);
             Utils.addEndpointsToService(axisService, axisConfig);
         }
