Index: tcp-transport.html
===================================================================
--- tcp-transport.html	(revision 358492)
+++ tcp-transport.html	(working copy)
@@ -11,80 +11,86 @@
 <h1>TCP transport</h1>
 
 <p>Axis2 supports TCP as a transport. Axis2 has support for both send and
-receive SOAP Messages via TCP. TCP transports do not have any Application
-level Headers and the SOAP Message that sends should be self contained. This
-make the interaction fast and simple. Yet the main limitation of the TCP
-transport is absence of the request URI, and the Service dispatching should
-use a alternative method. There is two main alternatives methods.</p>
+receive SOAP Messages via TCP. TCP transport does not have any application
+level headers and the SOAP Message that is send should be self contained.
+This makes the interaction fast and simple. Since there are no application
+headers, it does not have the privilege of having request URI, and Service
+dispatching should be done with a alternative method. Thus,
+RequestURIBasedDispatcher can not be used. Following are the two main
+alternatives available in dispatching in Axis2 Environment.</p>
 <ol>
-  <li>Use the name space URI of the first child element for the
-  dispatching</li>
-  <li>Enable the WS-Addressing, in the case of Alpha release, Addressing is
-    default</li>
+  <li>Use the name space URI of the first child element of SOAPBody.
+    (SOAPMessageBodyBasedDispatcher)</li>
+  <li>Enable the WS-Addressing. in the case of 0.94 release addressing is
+    default (SOAPActionBasedDispatcher)</li>
 </ol>
 
-<p>When the TCP request is sent, it is users responsibility either to use
-addressing or use alternative method.</p>
+<p>When TCP request is sent it's user's responsibility to use either
+addressing or SOAP body base mechanism.</p>
 
 <h2>How to start the TCPServer</h2>
 
 <p>The TCP server can be started by running the class
 org.apache.axis2.transport.tcp.TCPServer with two parameters <a
 href="faq.html#b5">repository</a> and port number as argument. This class
-needed all the axis dependency jars in the classpath. New Services can be
-added in the usual way by droping the archives to repository, read the <a
-href="userguide.html">User Guide</a> for more information</p>
+needs all the axis dependency jars in the classpath. New Services can be
+added in the usual way by dropping the archives to repository (See <a
+href="userguide.html">User Guide</a> for more information)</p>
 
-<p>Alternatively the TCP Server can be run with tcp-server.bat/ tcp-server.sh
+<p>Alternatively the TCP Server can run with tcp-server.bat/ tcp-server.sh
 file in the bin directory of the Binary distribution of TCP Server.</p>
 
-<h2>How send SOAP Messages with TCP transport</h2>
+<h2>How to send SOAP Messages using TCP transport</h2>
 
-<p>The TCP transport can be enabled very easily from the call API, following
-code segment demonstrate how it can be done.</p>
+<p>The TCP transport can be enabled easily from the call API. Following code
+segment demonstrate how it can be done.</p>
 <source><pre>OMElement payload = ...
 
-Call call = new Call(serviceContext);
+ServiceClient serviceClient = new ServiceClient();
 Options options = new Options();
 options.setTo(targetEPR);
 options.useSeperateListener(false);
-call.setClientOptions(options);
+serviceClient.setOptions(options);
 
-OMElement result =
-        (OMElement) call.invokeBlocking("operation", payload);
-call.close();</pre>
+OMElement response =
+        serviceClient.sendReceive(payload);</pre>
 </source>
-<p>The tranport that should be invoked is inferred from the targetEPR
-(tcp://...) in this case it is TCP and the listener also TCP . Since the
-addressing is engage SOAP Message itself contained. Only other option I can
-think of is to use the URI of the first child of the SOAP Body to dispatch
-the service. The Parameter is of the type <a
+<p>The transport that should be invoked is inferred from the targetEPR
+(tcp://...). In this case it is TCP and the listener, also TCP . SOAP Message
+has to be self contained in order to use addressing. Only other option one
+can think of is to use the URI of the first child of the SOAP Body to
+dispatch the service. The Parameter is of the type <a
 href="faq.html#a2">OMElement</a>, the XML representation of Axis2.</p>
 
 <h2>Sample</h2>
 
 <p>Sample for a TCP Client can be found from the
 samples/userguide/src/userguide/clients/TCPClient.java in the binary
-distribution, this access the same web service explained in the userguide. To
-try the client first starts the TCPServer with the same repository used for
-the userguide samples. Since sample is already deployed in the repository
-while trying the userguide it will be automatically avaliable.</p>
+distribution. This access the same web service explained in the <a
+href="userguide.html">Axis2 userguide</a>. The client first starts the
+TCPServer with the same repository used for the <a
+href="userguide.html#samples">Axis2 userguide samples</a>. Since sample is
+already deployed in the repository while trying the userguide it will be
+automatically avaliable.</p>
 
-<h2>Advanced Topics</h2>
+<h2>ansport Topics</h2>
 
-<p>Axis2 TCP transport has two parts, a transport Listener for receiving the
-Messages and transport Sender to send the SOAP Messages. Axis2 installation
-has both the components built in to itself  by default. In the axis2.xml
-configuration file, two would look like follows.</p>
+<p>Axis2 TCP transport has two components, a transport Listener for receiving
+the Messages and transport Sender to send the SOAP Messages. Axis2
+installation has both the components built in to itself by default. In the
+axis2.xml configuration file the two TCP transport components would look like
+as follows.</p>
 
 <p>If the TCP server is started manually this configuration does not take
-effect, this affect the transport Listeners starts by Axis2. (e.g. Listener
-started by the Complete Async interaction)</p>
+effect. In return this effects the transport Listener's start by Axis2. (e.g.
+Listener started by the Complete Async interaction)</p>
+
+<p>Following xml lines initializes the TCPTransport Receiver:</p>
 <source><pre>&lt;transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer"&gt;
     &lt;parameter name="port" locked="false"&gt;6060&lt;/parameter&gt;
 &lt;/transportReceiver&gt;</pre>
 </source>
-<p>Following add the TCPTransport Sender</p>
+<p>Following xml lines adds the TCPTransport Sender:</p>
 <source><pre>&lt;transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/&gt;</pre>
 </source></body>
 </html>
