Index: D:/eclipse321/workspace-svn/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 503349)
+++ D:/eclipse321/workspace-svn/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -146,3 +146,4 @@
 RPCLitMethodMarshallerErr1={0} argument for Operation cannot be null for RPC/LIT messages.
 unknownHost=The host specified by the URL is unknown.
 connectionRefused=An attempt to connect to the URL was refused.
+mimeBodyPartError=Error: Problem creating mime parts.
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/META-INF/services.xml
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/META-INF/services.xml	(revision 0)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/META-INF/services.xml	(revision 0)
@@ -0,0 +1,11 @@
+<serviceGroup>
+ <service name="SendImageService">
+  <messageReceivers>
+   <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" class="org.apache.axis2.jaxws.server.JAXWSMessageReceiver"/>
+  </messageReceivers>
+  <parameter locked="false" name="ServiceClass">org.apache.axis2.jaxws.sample.mtom1.SendImageService</parameter>
+  <operation name="invoke" mep="http://www.w3.org/2004/08/wsdl/in-out">
+    <actionMapping/>
+  </operation>
+ </service>
+</serviceGroup>
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/SendImageInterface.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/SendImageInterface.java	(revision 0)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/SendImageInterface.java	(revision 0)
@@ -0,0 +1,38 @@
+
+package org.apache.axis2.jaxws.sample.mtom1;
+
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebResult;
+import javax.jws.WebService;
+import javax.xml.ws.RequestWrapper;
+import javax.xml.ws.ResponseWrapper;
+
+
+/**
+ * This class was generated by the JAXWS SI.
+ * JAX-WS RI 2.0_01-b15-fcs
+ * Generated source version: 2.0
+ * 
+ */
+@WebService(name = "sendImageInterface", 
+		    targetNamespace = "urn://mtom1.sample.jaxws.axis2.apache.org",
+		    wsdlLocation = "META-INF/samplemtomjpeg.wsdl")
+public interface SendImageInterface {
+
+
+    /**
+     * 
+     * @param input
+     * @return
+     *     returns org.apache.axis2.jaxws.sample.mtom1.ImageDepot
+     */
+    @WebMethod(action = "sendImage")
+    @WebResult(name = "output", targetNamespace = "urn://mtom1.sample.jaxws.axis2.apache.org")
+    @RequestWrapper(localName = "invoke", targetNamespace = "urn://mtom1.sample.jaxws.axis2.apache.org", className = "org.apache.axis2.jaxws.sample.mtom1.Invoke")
+    @ResponseWrapper(localName = "sendImageResponse", targetNamespace = "urn://mtom1.sample.jaxws.axis2.apache.org", className = "org.apache.axis2.jaxws.sample.mtom1.SendImageResponse")
+    public ImageDepot invoke(
+        @WebParam(name = "input", targetNamespace = "urn://mtom1.sample.jaxws.axis2.apache.org")
+        ImageDepot input);
+
+}
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/SendImageService.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/SendImageService.java	(revision 0)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/mtom1/SendImageService.java	(revision 0)
@@ -0,0 +1,56 @@
+
+package org.apache.axis2.jaxws.sample.mtom1;
+
+import javax.jws.WebService;
+import java.rmi.RemoteException;
+import javax.xml.ws.WebServiceException;
+import javax.xml.ws.BindingType;
+import javax.xml.ws.soap.SOAPBinding;
+
+
+/**
+ * A JAXB implementation
+ *
+ */
+
+@WebService(
+		targetNamespace = "urn://mtom1.sample.jaxws.axis2.apache.org",
+		serviceName = "SendImageService",
+		portName = "sendImageSoap",		
+		wsdlLocation = "WEB-INF/wsdl/samplemtomjpeg.wsdl",
+		endpointInterface = "org.apache.axis2.jaxws.sample.mtom1.SendImageInterface")
+@BindingType (SOAPBinding.SOAP11HTTP_MTOM_BINDING)	
+public class SendImageService implements SendImageInterface {
+ 
+	
+    /**
+     * Required impl method from JAXB interface
+     * 
+     * - No MTOM setting via @BindingType
+     * - Using PAYLOAD mode
+     * - Sending back the same obj it received
+     * - The JAXB object is for image/jpeg MIME type
+     *
+     * @param ImageDepot obj
+     * @return ImageDepot obj
+     */
+    public ImageDepot invoke(ImageDepot request) throws WebServiceException
+    {
+       System.out.println("--------------------------------------");
+
+       try {
+    	   if (request != null){
+    		   System.out.println("SendImageService: Request received.");
+    	   }
+    	   else {
+    		   System.out.println("SendImageService: Request received = null");
+    		   throw new RemoteException("Null input received.");
+    	   }
+       } catch (Exception e) {
+    	   System.out.println("ERROR - Exception from SendImageService.");
+    	   e.printStackTrace();
+       }
+       
+       return request;
+    }
+}
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java	(revision 0)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java	(revision 0)
@@ -0,0 +1,160 @@
+package org.apache.axis2.jaxws.sample;
+
+import java.awt.*;
+import java.io.File;
+
+import javax.imageio.ImageIO;
+import javax.xml.bind.JAXBContext;
+import javax.xml.namespace.QName;
+import javax.xml.ws.Dispatch;
+import javax.xml.ws.Service;
+import javax.xml.ws.soap.SOAPBinding;
+
+import junit.framework.TestCase;
+
+import org.apache.axis2.jaxws.sample.mtom1.ImageDepot;
+import org.apache.axis2.jaxws.sample.mtom1.ObjectFactory;
+import org.apache.axis2.jaxws.sample.mtom1.Invoke;
+import org.apache.axis2.jaxws.sample.mtom1.SendImageResponse;
+
+public class MtomSampleByteArrayTests extends TestCase {
+
+    private static final QName QNAME_SERVICE = new QName("urn://mtom1.sample.jaxws.axis2.apache.org", "SendImageService");
+    private static final QName QNAME_PORT    = new QName("urn://mtom1.sample.jaxws.axis2.apache.org", "sendImageSoap");
+    private static final String URL_ENDPOINT = "http://localhost:8080/axis2/services/SendImageService";
+    private static final String IMAGE_DIR = System.getProperty("basedir",".")+File.separator+"test-resources"+File.separator+"image";
+
+    /*
+     * Enable attachment Optimization through the SOAPBinding method 
+     * -- setMTOMEnabled([true|false])
+     * Using SOAP11
+     */
+    public void testAttachmentByteArrayAPI11() throws Exception {
+    	System.out.println("----------------------------------");
+        System.out.println("test: " + getName());
+    	
+      	String imageResourceDir = IMAGE_DIR;
+      		
+      	Service svc = Service.create(QNAME_SERVICE);
+      	svc.addPort(QNAME_PORT, SOAPBinding.SOAP11HTTP_BINDING, URL_ENDPOINT);
+      	
+      	JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
+      	Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
+      	
+      	SOAPBinding binding = (SOAPBinding)dispatch.getBinding();
+      	binding.setMTOMEnabled(true);
+      	
+      	Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
+      	ImageDepot imageDepot = new ObjectFactory().createImageDepot();
+      	imageDepot.setImageData(image);
+      	
+      	//Create a request bean with imagedepot bean as value
+      	ObjectFactory factory = new ObjectFactory();
+      	Invoke request = factory.createInvoke();
+      	request.setInput(imageDepot);
+      	
+      	SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
+      	
+      	assertNotNull(response);
+        assertNotNull(response.getOutput().getImageData());
+    }
+    
+    /*
+     * Enable attachment optimization using the SOAP11 binding
+     * property for MTOM.
+     */
+    public void testAttachmentByteArrayProperty11() throws Exception {
+    	System.out.println("----------------------------------");
+        System.out.println("test: " + getName());
+    	
+      	String imageResourceDir = IMAGE_DIR;
+      		
+      	Service svc = Service.create(QNAME_SERVICE);
+      	svc.addPort(QNAME_PORT, SOAPBinding.SOAP11HTTP_MTOM_BINDING, URL_ENDPOINT);
+      	
+      	JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
+      	Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
+      	
+      	Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
+      	ImageDepot imageDepot = new ObjectFactory().createImageDepot();
+      	imageDepot.setImageData(image);
+      	
+      	//Create a request bean with imagedepot bean as value
+      	ObjectFactory factory = new ObjectFactory();
+      	Invoke request = factory.createInvoke();
+      	request.setInput(imageDepot);
+      	
+      	SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
+      	
+      	assertNotNull(response);
+        assertNotNull(response.getOutput().getImageData());
+        
+    }
+    
+    /*
+     * Enable attachment optimization using both the SOAP12 binding
+     * property for MTOM
+     */
+    
+    public void testAttachmentByteArrayProperty12() throws Exception {
+    	System.out.println("----------------------------------");
+        System.out.println("test: " + getName());
+    	
+      	String imageResourceDir = IMAGE_DIR;
+      		
+      	Service svc = Service.create(QNAME_SERVICE);
+      	svc.addPort(QNAME_PORT, SOAPBinding.SOAP12HTTP_MTOM_BINDING, URL_ENDPOINT);
+      	
+      	JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
+      	Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
+      	
+      	Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
+      	ImageDepot imageDepot = new ObjectFactory().createImageDepot();
+      	imageDepot.setImageData(image);
+      	
+      	//Create a request bean with imagedepot bean as value
+      	ObjectFactory factory = new ObjectFactory();
+      	Invoke request = factory.createInvoke();
+      	request.setInput(imageDepot);
+      	
+      	SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
+      	
+      	assertNotNull(response);
+        assertNotNull(response.getOutput().getImageData());
+    }
+        
+    /*
+     * Enable attachment optimization using both the SOAP12 binding API
+     * for MTOM
+     */
+    public void testAttachmentByteArrayAPI12() throws Exception {
+    	System.out.println("----------------------------------");
+        System.out.println("test: " + getName());
+    	
+      	String imageResourceDir = IMAGE_DIR;
+      		
+      	Service svc = Service.create(QNAME_SERVICE);
+      	svc.addPort(QNAME_PORT, SOAPBinding.SOAP12HTTP_BINDING, URL_ENDPOINT);
+      	
+      	JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
+      	Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
+      	
+      	SOAPBinding binding = (SOAPBinding)dispatch.getBinding();
+      	binding.setMTOMEnabled(true);
+      	
+      	Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
+      	ImageDepot imageDepot = new ObjectFactory().createImageDepot();
+      	imageDepot.setImageData(image);
+      	
+      	//Create a request bean with imagedepot bean as value
+      	ObjectFactory factory = new ObjectFactory();
+      	Invoke request = factory.createInvoke();
+      	request.setInput(imageDepot);
+      	
+      	SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
+      	
+      	assertNotNull(response);
+        assertNotNull(response.getOutput().getImageData());
+    }
+    
+}
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 503349)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -66,6 +66,7 @@
 import org.apache.axis2.jaxws.sample.FaultsServiceTests;
 import org.apache.axis2.jaxws.sample.FaultyWebServiceTests;
 import org.apache.axis2.jaxws.sample.MtomSampleTests;
+import org.apache.axis2.jaxws.sample.MtomSampleByteArrayTests;
 import org.apache.axis2.jaxws.sample.NonWrapTests;
 import org.apache.axis2.jaxws.sample.ParallelAsyncTests;
 import org.apache.axis2.jaxws.sample.WSGenTests;
@@ -130,6 +131,7 @@
 
         suite.addTestSuite(AddressBookTests.class);
         suite.addTestSuite(MtomSampleTests.class);
+        suite.addTestSuite(MtomSampleByteArrayTests.class);
         suite.addTestSuite(BareTests.class);
         suite.addTestSuite(NonWrapTests.class);
         suite.addTestSuite(WSGenTests.class);
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/maven.xml
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/maven.xml	(revision 503349)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/maven.xml	(working copy)
@@ -93,6 +93,14 @@
 			<classpath location="${compiled.classes.dir}"/>
 			<arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/ProxyDocLitnonWrapped.wsdl"/>
 		</java>
+        
+    	<ant:echo>Generating java from samplemtomjpeg.wsdl</ant:echo>
+        <java classname="com.sun.tools.xjc.Driver" fork="true"> 
+			<jvmarg line="${maven.junit.jvmargs2}"/>
+			<classpath refid="maven.dependency.classpath"/>
+			<classpath location="${compiled.classes.dir}"/>
+			<arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/samplemtomjpeg.wsdl"/>
+		</java>
 
     	<ant:echo>Generating java from RPCLit.wsdl</ant:echo>
         <java classname="com.sun.tools.xjc.Driver" fork="true"> 
@@ -332,6 +340,22 @@
                 <ant:include name="org/test/mtom/**"/>
 			</ant:fileset>
 		</ant:copy>
+        
+		<ant:copy toDir="target/test-classes/services/SendImageService/">
+			<ant:fileset dir="target/test-classes">
+				<ant:include name="org/apache/axis2/jaxws/sample/mtom1/**"/>
+			</ant:fileset>
+			<ant:fileset dir="test/org/apache/axis2/jaxws/sample/mtom1">
+                <ant:include name="META-INF/**"/>
+			</ant:fileset>
+			<ant:fileset dir="target/classes">
+                <ant:include name="org/apache/axis2/jaxws/server/**"/>
+			</ant:fileset>
+			<ant:fileset dir="target/schema/classes">
+                <ant:include name="org/apache/axis2/jaxws/sample/mtom1/**"/>
+			</ant:fileset>
+		</ant:copy>
+        
 		<ant:copy toDir="target/test-classes/services/SOAP12Service/">
 			<ant:fileset dir="target/test-classes">
 				<ant:include name="org/apache/axis2/jaxws/dispatch/server/**"/>
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java	(revision 503349)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java	(working copy)
@@ -17,8 +17,14 @@
 package org.apache.axis2.jaxws.message.attachments;
 
 import javax.activation.DataHandler;
+import javax.mail.MessagingException;
+import javax.mail.internet.InternetHeaders;
+import javax.mail.internet.MimeBodyPart;
+import javax.mail.internet.MimePartDataSource;
 import javax.xml.bind.attachment.AttachmentMarshaller;
 
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Attachment;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.util.UUIDGenerator;
@@ -54,15 +60,40 @@
     @Override
     public String addMtomAttachment(byte[] data, int offset, int length, 
             String mimeType, String namespace, String localPart) {
-        if (log.isDebugEnabled()) 
-            log.debug("Adding MTOM/XOP attachment for element: " + localPart + "{" + namespace + "}");
-        return UUIDGenerator.getUUID();
+        if (log.isDebugEnabled()){ 
+            log.debug("Adding MTOM/XOP byte array attachment for element: " + localPart + "{" + namespace + "}");
+        }
+        
+        String cid = UUIDGenerator.getUUID();
+        DataHandler dataHandler = null;
+        MimeBodyPart mbp = null;
+        
+        try
+        {
+        	//Create mime parts 
+        	InternetHeaders ih = new InternetHeaders();
+            ih.setHeader(Attachment.CONTENT_TYPE, mimeType);
+            ih.setHeader(Attachment.CONTENT_ID, cid);
+            mbp = new MimeBodyPart(ih,data);
+        }
+        catch(MessagingException me){
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("mimeBodyPartError"),me);
+        }
+        
+        //Create a data source for the byte array
+        MimePartDataSource mpds = new MimePartDataSource(mbp);
+        
+        dataHandler = new DataHandler(mpds);
+        Attachment a = message.createAttachment(dataHandler, cid);
+        message.addAttachment(a);
+        
+        return cid;
     }
 
     @Override
     public String addMtomAttachment(DataHandler data, String namespace, String localPart) {
         if (log.isDebugEnabled()) 
-            log.debug("Adding MTOM/XOP attachment for element: " + localPart + "{" + namespace + "}");
+            log.debug("Adding MTOM/XOP data handler attachment for element: " + localPart + "{" + namespace + "}");
         
         String cid = UUIDGenerator.getUUID();
         Attachment a = message.createAttachment(data, cid);
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/test-resources/wsdl/samplemtomjpeg.wsdl
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/test-resources/wsdl/samplemtomjpeg.wsdl	(revision 0)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/test-resources/wsdl/samplemtomjpeg.wsdl	(revision 0)
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Name: samplemtomjpeg.wsdl
+-->
+<definitions xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" 
+    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
+    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
+    xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"  
+    xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" 
+    xmlns:s0="urn://mtom1.sample.jaxws.axis2.apache.org"
+    targetNamespace="urn://mtom1.sample.jaxws.axis2.apache.org"
+    xmlns="http://schemas.xmlsoap.org/wsdl/">
+    
+  <types>
+   <xs:schema elementFormDefault="qualified"
+    xmlns:xmime="http://www.w3.org/2005/05/xmlmime"
+    xmlns:tns="urn://mtom1.sample.jaxws.axis2.apache.org"
+    targetNamespace="urn://mtom1.sample.jaxws.axis2.apache.org">
+    
+    <xs:import namespace="http://www.w3.org/2005/05/xmlmime"
+               schemaLocation="http://www.w3.org/2005/05/xmlmime"/>
+    <xs:complexType name="ImageDepot">
+       <xs:sequence>
+           <xs:element name="imageData" 
+                       type="xs:base64Binary"                        
+                       xmime:expectedContentTypes="image/jpeg"/>
+
+       </xs:sequence>
+    </xs:complexType>
+    
+    <xs:element name="invoke">
+       <xs:complexType>
+          <xs:sequence>
+             <xs:element minOccurs="0" maxOccurs="1" name="input" type="tns:ImageDepot"/>
+          </xs:sequence>
+       </xs:complexType>
+    </xs:element>
+    
+    <xs:element name="sendImageResponse">
+       <xs:complexType>
+          <xs:sequence>
+             <xs:element minOccurs="0" maxOccurs="1" name="output" type="tns:ImageDepot"/>
+          </xs:sequence>
+       </xs:complexType>
+    </xs:element>
+    
+   </xs:schema>
+  </types>
+
+  <message name="emptyMessage"/>
+  <message name="sendImage">
+    <part name="parameters" element="s0:invoke" />
+  </message>
+  <message name="sendImageResponse">
+    <part name="parameters" element="s0:sendImageResponse" />
+  </message>
+
+  <portType name="sendImageInterface">
+    <operation name="invoke">
+      <input message="s0:sendImage" />
+      <output message="s0:sendImageResponse" />
+    </operation>  
+  </portType>
+
+  <binding name="sendImageSoap" type="s0:sendImageInterface">
+    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" />
+    <operation name="invoke">
+      <soap:operation soapAction="sendImage" style="document" />
+      <input>
+        <soap:body use="literal" />
+      </input>
+      <output>
+        <soap:body use="literal" />
+      </output>
+    </operation>
+  </binding>
+
+  <service name="SendImageService">
+    <port name="SendImagePort" binding="s0:sendImageSoap">
+      <soap:address location="http://localhost:9080/MTOMByteArray/SendImageService" />
+    </port>
+  </service>
+
+</definitions>
