Index: test/org/apache/axis2/jaxws/addressing/util/EndpointReferenceUtilsTests.java
===================================================================
--- test/org/apache/axis2/jaxws/addressing/util/EndpointReferenceUtilsTests.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ test/org/apache/axis2/jaxws/addressing/util/EndpointReferenceUtilsTests.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,199 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.util;
+
+import java.io.StringReader;
+
+import javax.xml.namespace.QName;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.ws.wsaddressing.W3CEndpointReference;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
+import org.apache.axis2.addressing.AddressingConstants.Final;
+import org.apache.axis2.addressing.AddressingConstants.Submission;
+import org.apache.axis2.jaxws.addressing.SubmissionEndpointReference;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
+import org.custommonkey.xmlunit.XMLTestCase;
+import org.w3c.dom.Document;
+import org.xml.sax.InputSource;
+
+/**
+ * This class tests the enpoint reference classes used in the JAX-WS 2.1 API.
+ */
+public class EndpointReferenceUtilsTests extends XMLTestCase {
+    private static final OMFactory OMF = OMAbstractFactory.getOMFactory();
+    private static final QName ELEMENT200508 =
+        new QName(Final.WSA_NAMESPACE, "EndpointReference", "wsa");
+    private static final QName ELEMENT200408 =
+        new QName(Submission.WSA_NAMESPACE, "EndpointReference", "wsa");
+    
+    private static final String EPR200508 =
+    "<wsa:EndpointReference xmlns:axis2=\"http://ws.apache.org/namespaces/axis2\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" axis2:AttrExt=\"123456789\">"+
+        "<wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>"+
+        "<wsa:ReferenceParameters xmlns:fabrikam=\"http://example.com/fabrikam\">"+
+            "<fabrikam:CustomerKey>123456789</fabrikam:CustomerKey>"+
+            "<fabrikam:ShoppingCart>ABCDEFG</fabrikam:ShoppingCart>"+
+        "</wsa:ReferenceParameters>"+
+        "<wsa:Metadata>"+
+            "<axis2:MetaExt axis2:AttrExt=\"123456789\">123456789</axis2:MetaExt>"+
+        "</wsa:Metadata>"+
+        "<axis2:EPRExt axis2:AttrExt=\"123456789\">123456789</axis2:EPRExt>"+
+    "</wsa:EndpointReference>";
+    
+    private static final String EPR200408 =
+    "<wsa:EndpointReference xmlns:axis2=\"http://ws.apache.org/namespaces/axis2\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" axis2:AttrExt=\"123456789\">"+
+        "<wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/anonymous</wsa:Address>"+
+        "<wsa:ReferenceParameters xmlns:fabrikam=\"http://example.com/fabrikam\">"+
+            "<fabrikam:CustomerKey>123456789</fabrikam:CustomerKey>"+
+            "<fabrikam:ShoppingCart>ABCDEFG</fabrikam:ShoppingCart>"+
+        "</wsa:ReferenceParameters>"+
+        "<wsa:PortType>axis2:Jane</wsa:PortType>"+
+        "<wsa:ServiceName PortName=\"Fred\">axis2:John</wsa:ServiceName>"+
+        "<axis2:EPRExt axis2:AttrExt=\"123456789\">123456789</axis2:EPRExt>"+
+    "</wsa:EndpointReference>";
+    
+    public EndpointReferenceUtilsTests(String name) {
+        super(name);
+    }
+    
+    public void test200508ConversionStartingFromAxis2() throws Exception {
+        XMLStreamReader parser =
+            XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(EPR200508));
+        StAXOMBuilder builder = new StAXOMBuilder(parser);
+        OMElement omElement = builder.getDocumentElement();
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceHelper.fromOM(omElement);
+        W3CEndpointReference jaxwsEPR =
+            (W3CEndpointReference) EndpointReferenceUtils.convertFromAxis2(axis2EPR, Final.WSA_NAMESPACE);
+        assertXMLEqual(EPR200508, jaxwsEPR.toString());
+     
+        org.apache.axis2.addressing.EndpointReference axis2Result =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2Result, jaxwsEPR);
+        OMElement eprElement =
+            EndpointReferenceHelper.toOM(OMF, axis2Result, ELEMENT200508, addressingNamespace);
+        assertXMLEqual(EPR200508, eprElement.toString());
+    }
+    
+    public void test200508ConversionStartingFromJAXWS() throws Exception {
+        DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
+        dbfac.setNamespaceAware(true);
+        DocumentBuilder docBuilder = dbfac.newDocumentBuilder();
+        Document jaxwsDoc = docBuilder.parse(new InputSource(new StringReader(EPR200508)));
+        Source source = new DOMSource(jaxwsDoc);
+        
+        W3CEndpointReference jaxwsEPR = new W3CEndpointReference(source);
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2EPR, jaxwsEPR);
+        OMElement eprElement =
+            EndpointReferenceHelper.toOM(OMF, axis2EPR, ELEMENT200508, addressingNamespace);
+        assertXMLEqual(EPR200508, eprElement.toString());
+
+        W3CEndpointReference jaxwsResult =
+            (W3CEndpointReference) EndpointReferenceUtils.convertFromAxis2(axis2EPR, Final.WSA_NAMESPACE);
+        assertXMLEqual(EPR200508, jaxwsResult.toString());
+    }
+    
+    public void test200408ConversionStartingFromAxis2() throws Exception {
+        XMLStreamReader parser =
+            XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(EPR200408));
+        StAXOMBuilder builder = new StAXOMBuilder(parser);
+        OMElement omElement = builder.getDocumentElement();
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceHelper.fromOM(omElement);
+        SubmissionEndpointReference jaxwsEPR =
+            (SubmissionEndpointReference) EndpointReferenceUtils.convertFromAxis2(axis2EPR, Submission.WSA_NAMESPACE);
+        assertXMLEqual(EPR200408, jaxwsEPR.toString());
+     
+        org.apache.axis2.addressing.EndpointReference axis2Result =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2Result, jaxwsEPR);
+        OMElement eprElement =
+            EndpointReferenceHelper.toOM(OMF, axis2Result, ELEMENT200408, addressingNamespace);
+        assertXMLEqual(EPR200408, eprElement.toString());
+    }
+    
+    public void test200408ConversionStartingFromJAXWS() throws Exception {
+        DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
+        dbfac.setNamespaceAware(true);
+        DocumentBuilder docBuilder = dbfac.newDocumentBuilder();
+        Document jaxwsDoc = docBuilder.parse(new InputSource(new StringReader(EPR200408)));
+        Source source = new DOMSource(jaxwsDoc);
+        
+        SubmissionEndpointReference jaxwsEPR = new SubmissionEndpointReference(source);
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2EPR, jaxwsEPR);
+        OMElement eprElement =
+            EndpointReferenceHelper.toOM(OMF, axis2EPR, ELEMENT200408, addressingNamespace);
+        assertXMLEqual(EPR200408, eprElement.toString());
+
+        SubmissionEndpointReference jaxwsResult =
+            (SubmissionEndpointReference) EndpointReferenceUtils.convertFromAxis2(axis2EPR, Submission.WSA_NAMESPACE);
+        assertXMLEqual(EPR200408, jaxwsResult.toString());
+    }
+    
+    public void testFailures() throws Exception {
+        try {
+            EndpointReferenceUtils.convertFromAxis2(null, Final.WSA_NAMESPACE);
+            fail("Expected a failure.");
+        }
+        catch (Exception e) {
+            //pass
+        }
+
+        try {
+            EndpointReferenceUtils.convertFromAxis2(null, Submission.WSA_NAMESPACE);
+            fail("Expected a failure.");
+        }
+        catch (Exception e) {
+            //pass
+        }
+
+        try {
+            EndpointReferenceUtils.convertFromAxis2(null, null);
+            fail("Expected a failure.");
+        }
+        catch (Exception e) {
+            //pass
+        }
+
+        try {
+            org.apache.axis2.addressing.EndpointReference axis2EPR =
+                EndpointReferenceUtils.createAxis2EndpointReference("");
+            EndpointReferenceUtils.convertToAxis2(axis2EPR, null);
+            fail("Expected a failure.");
+        }
+        catch (Exception e) {
+            //pass
+        }
+    }
+}
Index: test/org/apache/axis2/jaxws/addressing/util/ReferenceParameterListTests.java
===================================================================
--- test/org/apache/axis2/jaxws/addressing/util/ReferenceParameterListTests.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ test/org/apache/axis2/jaxws/addressing/util/ReferenceParameterListTests.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.util;
+
+import java.io.File;
+import java.io.FileReader;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.xml.stream.XMLStreamReader;
+
+import junit.framework.TestCase;
+
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPHeader;
+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
+import org.apache.axis2.jaxws.addressing.util.ReferenceParameterList;
+import org.w3c.dom.Element;
+
+public class ReferenceParameterListTests extends TestCase {
+    private String testResourceDir = System.getProperty("basedir", ".") + "/test-resources";
+    private String resourceFileName = "xml/referenceparameters.xml";
+    private SOAPHeader header;
+
+    public void setUp() throws Exception {
+        File resourceFile = new File(testResourceDir, resourceFileName);
+        XMLStreamReader parser = StAXUtils.createXMLStreamReader(new FileReader(resourceFile));
+        StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(parser, null);
+        header = ((SOAPEnvelope)builder.getDocumentElement()).getHeader();
+    }
+    
+    public void testReferenceParameterList() throws Exception {
+        List<Element> emptyList = new ReferenceParameterList();
+        assertTrue(emptyList.isEmpty());
+        assertEquals(0, emptyList.size());
+        
+        Set<String>results = new HashSet<String>();
+        results.add("0123456789");
+        results.add("ABCDEFG");
+        results.add("abcdefg");
+        
+        List<Element> rpList = new ReferenceParameterList(header);
+        assertFalse(rpList.isEmpty());
+        assertEquals(results.size(), rpList.size());
+
+        for (Element rp : rpList) {
+            String value = rp.getTextContent();
+            if (results.contains(value)) {
+                results.remove(value);
+            }
+            else {
+                fail("Value not recognized: " + value);
+            }
+        }
+        
+        assertEquals(0, results.size());
+    }
+}
Index: test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -23,6 +23,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtilsTests;
+import org.apache.axis2.jaxws.addressing.util.ReferenceParameterListTests;
 import org.apache.axis2.jaxws.anytype.tests.AnyTypeTests;
 import org.apache.axis2.jaxws.attachments.MTOMSerializationTests;
 import org.apache.axis2.jaxws.client.ClientConfigTests;
@@ -135,6 +137,10 @@
         suite.addTestSuite(MTOMSerializationTests.class);
         suite.addTestSuite(BindingToProtocolTests.class);
         
+        // ------ Addressing Tests ------
+        //suite.addTestSuite(EndpointReferenceUtilsTests.class);
+        suite.addTestSuite(ReferenceParameterListTests.class);
+        
         // ------ Metadata Tests ------
         suite.addTestSuite(WSDLTests.class);
         suite.addTestSuite(WSDLDescriptionTests.class);
@@ -172,7 +178,7 @@
         suite.addTestSuite(BasicAuthSecurityTests.class);
 
         suite.addTestSuite(AddressBookTests.class);
-        suite.addTestSuite(MtomSampleTests.class);
+        //suite.addTestSuite(MtomSampleTests.class);
         
         // This test fails only on Solaris
         //suite.addTestSuite(MtomSampleByteArrayTests.class);
Index: src/org/apache/axis2/jaxws/addressing/SubmissionEndpointReferenceBuilder.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/SubmissionEndpointReferenceBuilder.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/SubmissionEndpointReferenceBuilder.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.addressing.metadata.InterfaceName;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
+import org.w3c.dom.Element;
+
+public final class SubmissionEndpointReferenceBuilder {
+	private static final Element[] ZERO_LENGTH_ARRAY = new Element[0];
+
+	private String address;
+    private QName serviceName;
+    private QName endpointName;
+    private String wsdlDocumentLocation;
+    private List<Element> referenceParameters;
+    private QName portType;
+    
+    public SubmissionEndpointReferenceBuilder() {
+    }
+    
+    public SubmissionEndpointReferenceBuilder address(String address) {
+        this.address = address;
+        return this;
+    }
+    
+    public SubmissionEndpointReferenceBuilder serviceName(QName serviceName) {
+        this.serviceName = serviceName;
+        return this;
+    }
+    
+    public SubmissionEndpointReferenceBuilder endpointName(QName endpointName) {
+        //TODO NLS enable
+        if (this.serviceName == null) {
+            throw new IllegalStateException("The endpoint qname cannot be set before the service qname.");
+        }
+        
+        this.endpointName = endpointName;
+        return this;
+    }
+    
+    public SubmissionEndpointReferenceBuilder wsdlDocumentLocation(String wsdlDocumentLocation) {
+        this.wsdlDocumentLocation = wsdlDocumentLocation;
+        return this;
+    }
+    
+    public SubmissionEndpointReferenceBuilder referenceProperty(Element referenceProperty) {
+        //TODO NLS enable
+        if (referenceProperty == null) {
+            throw new IllegalArgumentException("A reference property cannot be null.");
+        }
+        
+        if (this.referenceParameters == null) {
+            this.referenceParameters = new ArrayList<Element>();
+        }
+        
+        this.referenceParameters.add(referenceProperty);
+        return this;
+    }
+    
+    public SubmissionEndpointReferenceBuilder referenceParameter(Element referenceParameter) {
+        //TODO NLS enable
+        if (referenceParameter == null) {
+            throw new IllegalArgumentException("A reference parameter cannot be null.");
+        }
+        
+        if (this.referenceParameters == null) {
+            this.referenceParameters = new ArrayList<Element>();
+        }
+        
+        this.referenceParameters.add(referenceParameter);
+        return this;
+    }
+    
+    public SubmissionEndpointReferenceBuilder portType(QName portType) {
+        this.portType = portType;
+        return this;
+    }
+    
+    public SubmissionEndpointReference build() {
+    	SubmissionEndpointReference submissionEPR = null;
+    	
+        String addressingNamespace =
+        	EndpointReferenceUtils.getAddressingNamespace(SubmissionEndpointReference.class);    	
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+        	EndpointReferenceUtils.createAxis2EndpointReference(address, serviceName, endpointName, wsdlDocumentLocation, addressingNamespace);
+    	
+        try {
+        	EndpointReferenceUtils.addReferenceParameters(axis2EPR, referenceParameters.toArray(ZERO_LENGTH_ARRAY));
+        	EndpointReferenceUtils.addInterface(axis2EPR, portType, InterfaceName.subQName);
+        	
+            submissionEPR =
+                (SubmissionEndpointReference) EndpointReferenceUtils.convertFromAxis2(axis2EPR, addressingNamespace);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("A problem occured during the creation of an endpoint reference. See the nested exception for details.", e);
+        }
+        
+        return submissionEPR;
+    }
+
+    @Override
+    public String toString() {
+        // TODO Auto-generated method stub
+        return super.toString();
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/package-info.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/package-info.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/package-info.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,20 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+@javax.xml.bind.annotation.XmlSchema(namespace = "http://schemas.xmlsoap.org/ws/2004/08/addressing", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)
+package org.apache.axis2.jaxws.addressing;
Index: src/org/apache/axis2/jaxws/addressing/factory/Axis2EndpointReferenceFactoryImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/factory/Axis2EndpointReferenceFactoryImpl.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/factory/Axis2EndpointReferenceFactoryImpl.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.factory;
+
+import java.net.URL;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
+import org.apache.axis2.addressing.metadata.ServiceName;
+import org.apache.axis2.addressing.metadata.WSDLLocation;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.util.EndpointKey;
+import org.apache.axis2.jaxws.addressing.util.EndpointMap;
+import org.apache.axis2.jaxws.util.WSDL4JWrapper;
+import org.apache.axis2.jaxws.util.WSDLWrapper;
+
+public class Axis2EndpointReferenceFactoryImpl implements Axis2EndpointReferenceFactory {
+    private final EndpointMap map = new EndpointMap();
+    
+    public Axis2EndpointReferenceFactoryImpl() {
+    	super();
+    }
+    
+    public void addAddress(QName serviceName, QName endpoint, String address) {
+        EndpointKey key = new EndpointKey(serviceName, endpoint);
+        
+        if (address == null)
+            throw new IllegalStateException("The specified address is not a valid value: " + address);
+        
+        map.put(key, address);
+    }
+    
+    public EndpointReference createEndpointReference(String address) {
+        if (address == null)
+            throw new IllegalStateException("The specified address is not a valid value: " + address);
+
+        return new EndpointReference(address);
+    }
+    
+    public EndpointReference createEndpointReference(QName serviceName, QName endpoint) {
+        EndpointKey key = new EndpointKey(serviceName, endpoint);
+        String address = map.get(key);
+        
+        return createEndpointReference(address);
+    }
+    
+    public EndpointReference createEndpointReference(String address, QName serviceName, QName portName, String wsdlDocumentLocation, String addressingNamespace) {
+        EndpointReference axis2EPR = null;
+        
+        if (address != null) {
+            //TODO NLS enable.
+        	if (serviceName == null && portName != null)
+                throw new IllegalStateException("Cannot create an endpoint reference because the service name is null, and the port name is not null.");
+        		
+            axis2EPR = createEndpointReference(address);
+        }
+        else if (serviceName != null && portName != null) {
+            axis2EPR = createEndpointReference(serviceName, portName);
+        }
+        else {
+            //TODO NLS enable.
+            throw new IllegalStateException("Cannot create an endpoint reference because the address, service name, and/or port name are null.");
+        }
+        
+        try {
+            //TODO If no service name and port name are specified, but the wsdl location is
+            //specified, and the WSDL only contains one service and one port then maybe we
+            //should simply use those.
+            if (serviceName != null && portName != null) {
+                ServiceName service = new ServiceName(serviceName, portName.getLocalPart());
+                EndpointReferenceHelper.setServiceNameMetadata(axis2EPR, addressingNamespace, service);
+            }
+
+            if (wsdlDocumentLocation != null) {
+            	URL wsdlURL = new URL(wsdlDocumentLocation);
+            	WSDLWrapper wrapper = new WSDL4JWrapper(wsdlURL);
+            	
+            	if (serviceName != null) {
+            		//TODO NLS
+            		if (wrapper.getService(serviceName) == null)
+            			throw new IllegalStateException("The specified service name does not exist in the WSDL from the specified location.");
+                	
+                	if (portName != null) {
+                		String[] ports = wrapper.getPorts(serviceName);
+                		String portLocalName = portName.getLocalPart();
+                		boolean found = false;
+                		
+                		if (ports != null) {
+                			for (String port : ports) {
+                				if (port.equals(portLocalName)) {
+                					found = true;
+                					break;
+                				}
+                			}
+                		}
+                		
+                		//TODO NLS
+                		if (!found)
+                			throw new IllegalStateException("The specified port name does not exist in the specified WSDL service.");
+                	}
+            	}
+            	
+                WSDLLocation wsdlLocation = new WSDLLocation(portName.getNamespaceURI(), wsdlDocumentLocation);
+                EndpointReferenceHelper.setWSDLLocationMetadata(axis2EPR, addressingNamespace, wsdlLocation);
+            }
+        }
+        catch (IllegalStateException ise) {
+        	throw ise;
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("A problem occured during the creation of an endpoint reference. See the nested exception for details.", e);
+        }
+        
+        return axis2EPR;
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/factory/JAXWSEndpointReferenceFactory.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/factory/JAXWSEndpointReferenceFactory.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/factory/JAXWSEndpointReferenceFactory.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.factory;
+
+import javax.xml.transform.Source;
+import javax.xml.ws.EndpointReference;
+
+public interface JAXWSEndpointReferenceFactory {
+    public EndpointReference createEndpointReference(Source eprInfoset, String addressingNamespace);
+    
+    public String getAddressingNamespace(Class clazz);
+}
Index: src/org/apache/axis2/jaxws/addressing/factory/JAXWSEndpointReferenceFactoryImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/factory/JAXWSEndpointReferenceFactoryImpl.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/factory/JAXWSEndpointReferenceFactoryImpl.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.factory;
+
+import javax.xml.transform.Source;
+import javax.xml.ws.EndpointReference;
+import javax.xml.ws.wsaddressing.W3CEndpointReference;
+
+import org.apache.axis2.addressing.AddressingConstants.Final;
+import org.apache.axis2.addressing.AddressingConstants.Submission;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.SubmissionEndpointReference;
+
+public class JAXWSEndpointReferenceFactoryImpl implements JAXWSEndpointReferenceFactory {
+    public JAXWSEndpointReferenceFactoryImpl() {
+        super();
+    }
+    
+    private W3CEndpointReference createW3CEndpointReference(Source eprInfoset) {
+        return new W3CEndpointReference(eprInfoset);
+    }
+    
+    private SubmissionEndpointReference createSubmissionEndpointReference(Source eprInfost) {
+        return new SubmissionEndpointReference(eprInfost);
+    }
+    
+    public EndpointReference createEndpointReference(Source eprInfoset, String addressingNamespace) {
+        EndpointReference endpointReference = null;
+        
+        if (Final.WSA_NAMESPACE.equals(addressingNamespace))
+            endpointReference = createW3CEndpointReference(eprInfoset);
+        else if (Submission.WSA_NAMESPACE.equals(addressingNamespace))
+            endpointReference = createSubmissionEndpointReference(eprInfoset);
+        else //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Unknown addressing namespace: " + addressingNamespace);
+        
+        return endpointReference;
+    }
+    
+    public String getAddressingNamespace(Class clazz) {
+        String addressingNamespace = null;
+        
+        if (W3CEndpointReference.class.isAssignableFrom(clazz))
+            addressingNamespace = Final.WSA_NAMESPACE;
+        else if (SubmissionEndpointReference.class.isAssignableFrom(clazz))
+            addressingNamespace = Submission.WSA_NAMESPACE;
+        else //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Unknown class type: " + clazz.getCanonicalName());
+        
+        return addressingNamespace;
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/factory/Axis2EndpointReferenceFactory.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/factory/Axis2EndpointReferenceFactory.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/factory/Axis2EndpointReferenceFactory.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,13 @@
+package org.apache.axis2.jaxws.addressing.factory;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.addressing.EndpointReference;
+
+public interface Axis2EndpointReferenceFactory {
+    public EndpointReference createEndpointReference(String address);
+    
+    public EndpointReference createEndpointReference(QName serviceName, QName endpoint);
+    
+    public EndpointReference createEndpointReference(String address, QName serviceName, QName portName, String wsdlDocumentLocation, String addressingNamespace);
+}
\ No newline at end of file
Index: src/org/apache/axis2/jaxws/addressing/SubmissionEndpointReference.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/SubmissionEndpointReference.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/SubmissionEndpointReference.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,328 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.JAXBElement;
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Marshaller;
+import javax.xml.bind.Unmarshaller;
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAnyAttribute;
+import javax.xml.bind.annotation.XmlAnyElement;
+import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlSchemaType;
+import javax.xml.bind.annotation.XmlTransient;
+import javax.xml.bind.annotation.XmlType;
+import javax.xml.bind.annotation.XmlValue;
+import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import javax.xml.namespace.QName;
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.ws.EndpointReference;
+import javax.xml.ws.WebServiceException;
+
+/**
+ * <p>Java class for EndpointReferenceType complex type.
+ * 
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ * 
+ * <pre>
+ * &lt;complexType name="EndpointReferenceType">
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="Address" type="{http://schemas.xmlsoap.org/ws/2004/08/addressing}AttributedURI"/>
+ *         &lt;element name="ReferenceProperties" type="{http://schemas.xmlsoap.org/ws/2004/08/addressing}ReferencePropertiesType" minOccurs="0"/>
+ *         &lt;element name="ReferenceParameters" type="{http://schemas.xmlsoap.org/ws/2004/08/addressing}ReferenceParametersType" minOccurs="0"/>
+ *         &lt;element name="PortType" type="{http://schemas.xmlsoap.org/ws/2004/08/addressing}AttributedQName" minOccurs="0"/>
+ *         &lt;element name="ServiceName" type="{http://schemas.xmlsoap.org/ws/2004/08/addressing}ServiceNameType" minOccurs="0"/>
+ *         &lt;any/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ * 
+ * 
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "EndpointReferenceType", propOrder = {
+    "address",
+    "referenceProperties",
+    "referenceParameters",
+    "portType",
+    "serviceName",
+    "any"
+})
+public class SubmissionEndpointReference extends EndpointReference {
+    @XmlTransient
+    protected static volatile JAXBContext jaxbContext;
+    @XmlTransient
+    protected static final String NS = "http://schemas.xmlsoap.org/ws/2004/08/addressing";
+    @XmlTransient
+    protected static final QName NAME = new QName(NS, "EndpointReference", "wsa");
+    
+
+    @XmlElement(name = "Address", required = true)
+    protected AttributedURI address;
+    @XmlElement(name = "ReferenceProperties")
+    protected ReferencePropertiesType referenceProperties;
+    @XmlElement(name = "ReferenceParameters")
+    protected ReferenceParametersType referenceParameters;
+    @XmlElement(name = "PortType")
+    protected AttributedQName portType;
+    @XmlElement(name = "ServiceName")
+    protected ServiceNameType serviceName;
+    @XmlAnyElement(lax = true)
+    protected List<Object> any;
+    @XmlAnyAttribute
+    private Map<QName, String> otherAttributes = new HashMap<QName, String>();
+
+    protected SubmissionEndpointReference() {
+    }
+    
+    public SubmissionEndpointReference(Source eprInfoset) {
+        super();
+        
+        try {
+            JAXBContext jaxbContext = getJAXBContext();
+            Unmarshaller um = jaxbContext.createUnmarshaller();
+            JAXBElement<SubmissionEndpointReference> element =
+                um.unmarshal(eprInfoset, SubmissionEndpointReference.class);
+            SubmissionEndpointReference subEPR = element.getValue();
+            
+            address = subEPR.address;
+            referenceParameters = subEPR.referenceParameters;
+            referenceProperties = subEPR.referenceProperties;
+            portType = subEPR.portType;
+            serviceName = subEPR.serviceName;
+            any = subEPR.any;
+            otherAttributes.putAll(subEPR.otherAttributes);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw new WebServiceException("Unable to create Submission endpoint reference.", e);
+        }        
+    }
+    
+    @Override
+    public void writeTo(Result result) {
+        if (result == null) {
+            //TODO NLS enable
+            throw new IllegalArgumentException("Null is not allowed.");
+        }
+        
+        try {
+            JAXBContext jaxbContext = getJAXBContext();
+            Marshaller m = jaxbContext.createMarshaller();
+            m.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
+            JAXBElement<SubmissionEndpointReference> element =
+                new JAXBElement<SubmissionEndpointReference>(NAME, SubmissionEndpointReference.class, this);
+            m.marshal(element, result);
+        }
+        catch (Exception e) {
+            //TODO NLS enable
+            throw new WebServiceException("writeTo failure.", e);
+        }
+    }
+    
+    private JAXBContext getJAXBContext() throws JAXBException {
+        //This is an implementation of double-checked locking.
+        //It works because jaxbContext is volatile.
+        if (jaxbContext == null) {
+            synchronized (SubmissionEndpointReference.class) {
+                if (jaxbContext == null)
+                    jaxbContext = JAXBContext.newInstance(SubmissionEndpointReference.class);
+            }
+        }
+        
+        return jaxbContext;
+    }
+    
+    /**
+     * <p>Java class for AttributedURI complex type.
+     * 
+     * <p>The following schema fragment specifies the expected content contained within this class.
+     * 
+     * <pre>
+     * &lt;complexType name="AttributedURI">
+     *   &lt;simpleContent>
+     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>anyURI">
+     *     &lt;/extension>
+     *   &lt;/simpleContent>
+     * &lt;/complexType>
+     * </pre>
+     * 
+     * 
+     */
+    @XmlAccessorType(XmlAccessType.FIELD)
+    @XmlType(name = "AttributedURI", propOrder = {
+        "value"
+    })
+    private static class AttributedURI {
+
+        @XmlValue
+        @XmlSchemaType(name = "anyURI")
+        protected String value;
+        @XmlAnyAttribute
+        private Map<QName, String> otherAttributes = new HashMap<QName, String>();
+        
+        public AttributedURI() {
+        }
+    }
+    
+    /**
+     * <p>Java class for ReferenceParametersType complex type.
+     * 
+     * <p>The following schema fragment specifies the expected content contained within this class.
+     * 
+     * <pre>
+     * &lt;complexType name="ReferenceParametersType">
+     *   &lt;complexContent>
+     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+     *       &lt;sequence>
+     *         &lt;any/>
+     *       &lt;/sequence>
+     *     &lt;/restriction>
+     *   &lt;/complexContent>
+     * &lt;/complexType>
+     * </pre>
+     * 
+     * 
+     */
+    @XmlAccessorType(XmlAccessType.FIELD)
+    @XmlType(name = "ReferenceParametersType", propOrder = {
+        "any"
+    })
+    private static class ReferenceParametersType {
+
+        @XmlAnyElement(lax = true)
+        protected List<Object> any;
+        
+        public ReferenceParametersType() {
+        }
+    }
+    
+    /**
+     * <p>Java class for ReferencePropertiesType complex type.
+     * 
+     * <p>The following schema fragment specifies the expected content contained within this class.
+     * 
+     * <pre>
+     * &lt;complexType name="ReferencePropertiesType">
+     *   &lt;complexContent>
+     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+     *       &lt;sequence>
+     *         &lt;any/>
+     *       &lt;/sequence>
+     *     &lt;/restriction>
+     *   &lt;/complexContent>
+     * &lt;/complexType>
+     * </pre>
+     * 
+     * 
+     */
+    @XmlAccessorType(XmlAccessType.FIELD)
+    @XmlType(name = "ReferencePropertiesType", propOrder = {
+        "any"
+    })
+    private static class ReferencePropertiesType {
+
+        @XmlAnyElement(lax = true)
+        protected List<Object> any;
+        
+        public ReferencePropertiesType() {
+        }
+    }
+    
+    /**
+     * <p>Java class for ServiceNameType complex type.
+     * 
+     * <p>The following schema fragment specifies the expected content contained within this class.
+     * 
+     * <pre>
+     * &lt;complexType name="ServiceNameType">
+     *   &lt;simpleContent>
+     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>QName">
+     *       &lt;attribute name="PortName" type="{http://www.w3.org/2001/XMLSchema}NCName" />
+     *     &lt;/extension>
+     *   &lt;/simpleContent>
+     * &lt;/complexType>
+     * </pre>
+     * 
+     * 
+     */
+    @XmlAccessorType(XmlAccessType.FIELD)
+    @XmlType(name = "ServiceNameType", propOrder = {
+        "value"
+    })
+    private static class ServiceNameType {
+
+        @XmlValue
+        protected QName value;
+        @XmlAttribute(name = "PortName")
+        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
+        @XmlSchemaType(name = "NCName")
+        protected String portName;
+        @XmlAnyAttribute
+        private Map<QName, String> otherAttributes = new HashMap<QName, String>();
+        
+        public ServiceNameType() {
+        }
+    }
+    
+    /**
+     * <p>Java class for AttributedQName complex type.
+     * 
+     * <p>The following schema fragment specifies the expected content contained within this class.
+     * 
+     * <pre>
+     * &lt;complexType name="AttributedQName">
+     *   &lt;simpleContent>
+     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>QName">
+     *     &lt;/extension>
+     *   &lt;/simpleContent>
+     * &lt;/complexType>
+     * </pre>
+     * 
+     * 
+     */
+    @XmlAccessorType(XmlAccessType.FIELD)
+    @XmlType(name = "AttributedQName", propOrder = {
+        "value"
+    })
+    private static class AttributedQName {
+
+        @XmlValue
+        protected QName value;
+        @XmlAnyAttribute
+        private Map<QName, String> otherAttributes = new HashMap<QName, String>();
+        
+        public AttributedQName() {
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/util/EndpointReferenceUtils.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/util/EndpointReferenceUtils.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/util/EndpointReferenceUtils.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.util;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
+import org.apache.axis2.addressing.metadata.InterfaceName;
+import org.apache.axis2.jaxws.addressing.factory.Axis2EndpointReferenceFactory;
+import org.apache.axis2.jaxws.addressing.factory.JAXWSEndpointReferenceFactory;
+import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.util.XMLUtils;
+import org.w3c.dom.Element;
+
+public final class EndpointReferenceUtils {
+    
+    private static OMFactory omFactory = OMAbstractFactory.getOMFactory();
+    private static JAXWSEndpointReferenceFactory jaxwsEPRFactory =
+        (JAXWSEndpointReferenceFactory) FactoryRegistry.getFactory(JAXWSEndpointReferenceFactory.class);
+    private static Axis2EndpointReferenceFactory axis2EPRFactory =
+    	(Axis2EndpointReferenceFactory) FactoryRegistry.getFactory(Axis2EndpointReferenceFactory.class);
+
+    private EndpointReferenceUtils() {
+    }
+
+    /**
+     * Convert from a {@link EndpointReference} to a
+     * subclass of {@link javax.xml.ws.EndpointReference}.
+     * 
+     * @param <T>
+     * @param axis2EPR
+     * @param addressingNamespace
+     * @return
+     * @throws AxisFault
+     */
+    public static javax.xml.ws.EndpointReference convertFromAxis2(EndpointReference axis2EPR, String addressingNamespace)
+    throws AxisFault, Exception {
+        QName qname = new QName(addressingNamespace, "EndpointReference", "wsa");
+        OMElement omElement =
+            EndpointReferenceHelper.toOM(omFactory, axis2EPR, qname, addressingNamespace);
+        Element eprElement = XMLUtils.toDOM(omElement);
+        Source eprInfoset = new DOMSource(eprElement);
+        
+        return jaxwsEPRFactory.createEndpointReference(eprInfoset, addressingNamespace);
+    }
+    
+    /**
+     * Convert from a {@link javax.xml.ws.EndpointReference} to a an instance of
+     * {@link EndpointReference}.
+     * 
+     * @param axis2EPR
+     * @param jaxwsEPR
+     * @return
+     * @throws AxisFault
+     * @throws XMLStreamException
+     */
+    public static String convertToAxis2(EndpointReference axis2EPR, javax.xml.ws.EndpointReference jaxwsEPR)
+    throws AxisFault, XMLStreamException {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        jaxwsEPR.writeTo(new StreamResult(baos));
+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+        OMElement eprElement = (OMElement) XMLUtils.toOM(bais);
+        
+        return EndpointReferenceHelper.fromOM(axis2EPR, eprElement);
+    }
+
+    public static String getAddressingNamespace(Class clazz) {
+        return jaxwsEPRFactory.getAddressingNamespace(clazz);
+    }
+    
+    public static EndpointReference createAxis2EndpointReference(String address, QName serviceName, QName portName, String wsdlDocumentLocation, String addressingNamespace) {
+    	return axis2EPRFactory.createEndpointReference(address, serviceName, portName, wsdlDocumentLocation, addressingNamespace);
+    }
+    
+    public static EndpointReference createAxis2EndpointReference(String address) {
+    	return axis2EPRFactory.createEndpointReference(address);
+    }
+    
+    public static void addReferenceParameters(EndpointReference axis2EPR, Element...referenceParameters)
+    throws Exception {
+        if (referenceParameters != null) {
+            for (Element element : referenceParameters) {
+                OMElement omElement = XMLUtils.toOM(element);
+                axis2EPR.addReferenceParameter(omElement);
+            }            
+        }    	
+    }
+    
+    public static void addMetadata(EndpointReference axis2EPR, Element...metadata)
+    throws Exception {
+        if (metadata != null) {
+            for (Element element : metadata) {
+                OMElement omElement = XMLUtils.toOM(element);
+                axis2EPR.addMetaData(omElement);
+            }
+        }
+    }
+    
+    public static void addInterface(EndpointReference axis2EPR, QName portType, QName interfaceType)
+    throws Exception {
+    	if (portType != null) {
+    		InterfaceName interfaceName = new InterfaceName(portType);
+    		OMElement omElement = interfaceName.toOM(interfaceType);
+    		axis2EPR.addExtensibleElement(omElement);
+    	}
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/util/EndpointKey.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/util/EndpointKey.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/util/EndpointKey.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.util;
+
+import javax.xml.namespace.QName;
+
+public class EndpointKey {
+    private QName service;
+    private QName endpoint;
+    
+    public EndpointKey(QName service, QName endpoint) {
+        if (service == null)
+            throw new IllegalArgumentException("The service qname cannot be null.");
+        
+        if (endpoint == null)
+            throw new IllegalArgumentException("The endpoint qname cannot be null.");
+        
+        this.service = service;
+        this.endpoint = endpoint;
+    }
+
+    public QName getEndpoint() {
+        return endpoint;
+    }
+
+    public QName getService() {
+        return service;
+    }
+
+    /* (non-Javadoc)
+     * Generated by Eclipse - suggest re-generation if class changes
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        final EndpointKey other = (EndpointKey) obj;
+        if (endpoint == null) {
+            if (other.endpoint != null)
+                return false;
+        } else if (!endpoint.equals(other.endpoint))
+            return false;
+        if (service == null) {
+            if (other.service != null)
+                return false;
+        } else if (!service.equals(other.service))
+            return false;
+        return true;
+    }
+
+    /* (non-Javadoc)
+     * Generated by Eclipse - suggest re-generation if class changes
+     */
+    @Override
+    public int hashCode() {
+        final int PRIME = 31;
+        int result = 1;
+        result = PRIME * result + ((endpoint == null) ? 0 : endpoint.hashCode());
+        result = PRIME * result + ((service == null) ? 0 : service.hashCode());
+        return result;
+    }   
+}
Index: src/org/apache/axis2/jaxws/addressing/util/ReferenceParameterList.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/util/ReferenceParameterList.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/util/ReferenceParameterList.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.util;
+
+import java.util.AbstractList;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+import javax.xml.ws.handler.MessageContext;
+
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.soap.SOAPHeader;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.util.XMLUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.Element;
+
+/**
+ * This class is used to provide a read-only list of reference parameters
+ * via the JAX-WS 2.1 api.
+ *
+ * @see MessageContext#REFERENCE_PARAMETERS
+ */
+public class ReferenceParameterList extends AbstractList<Element> {
+    private static final Log log = LogFactory.getLog(ReferenceParameterList.class);
+    private static final Element[] EMPTY_ARRAY = new Element[0];
+    
+    private String namespace = AddressingConstants.Final.WSA_NAMESPACE;
+    private SOAPHeader header;
+    private Element[] referenceParameters;
+
+    public ReferenceParameterList() {
+        super();
+    }
+    
+    public ReferenceParameterList(SOAPHeader header) {
+        super();
+        this.header = header;
+    }
+
+    @Override
+    public Element get(int index) {
+        if (referenceParameters == null)
+            initialize();
+        
+        return referenceParameters[index];
+    }
+
+    @Override
+    public int size() {
+        if (referenceParameters == null)
+            initialize();
+        
+        return referenceParameters.length;
+    }
+    
+    private void initialize() {
+        if (header == null) {
+            if (log.isTraceEnabled()) {
+                log.trace("initialize: No SOAP header to check for reference parameters.");
+            }
+            
+            referenceParameters = EMPTY_ARRAY;            
+        }
+        else {
+            if (log.isTraceEnabled()) {
+                log.trace("initialize: Checking SOAP header for reference parameters.");
+            }
+            
+            List<Element> list = new ArrayList<Element>();
+            Iterator headerBlocks = header.getChildElements();
+            while (headerBlocks.hasNext()) {
+                OMElement headerElement = (OMElement)headerBlocks.next();
+                OMAttribute isRefParamAttr =
+                        headerElement.getAttribute(new QName(namespace, "IsReferenceParameter"));
+                if (log.isTraceEnabled()) {
+                    log.trace("initialize: Checking header element: " + headerElement.getQName());
+                }
+                
+                if (isRefParamAttr != null && "true".equals(isRefParamAttr.getAttributeValue())) {
+                    try {
+                        Element element = XMLUtils.toDOM(headerElement);
+                        list.add(element);
+                    }
+                    catch (Exception e) {
+                        //TODO NLS enable.
+                        throw ExceptionFactory.makeWebServiceException("A problem occured during the building of the reference parameter list. See the nested exception for details.", e);
+                    }
+                    
+                    if (log.isTraceEnabled()) {
+                        log.trace("initialize: Header: " + headerElement.getQName() +
+                                " has IsReferenceParameter attribute. Adding to toEPR.");
+                    }
+                }
+            }
+            
+            referenceParameters = list.toArray(EMPTY_ARRAY);
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/util/EndpointMap.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/util/EndpointMap.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/util/EndpointMap.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing.util;
+
+import java.util.HashMap;
+
+import org.apache.axis2.jaxws.addressing.util.EndpointKey;
+
+public class EndpointMap extends HashMap<EndpointKey, String> {
+    
+    
+    /**
+     * 
+     */
+    private static final long serialVersionUID = 694539734825500599L;
+
+    public EndpointMap() {
+        super();
+    }
+}
Index: src/org/apache/axis2/jaxws/context/utils/ContextUtils.java
===================================================================
--- src/org/apache/axis2/jaxws/context/utils/ContextUtils.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/context/utils/ContextUtils.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,7 +18,9 @@
  */
 package org.apache.axis2.jaxws.context.utils;
 
+import org.apache.axiom.soap.SOAPHeader;
 import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.jaxws.addressing.util.ReferenceParameterList;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
@@ -29,6 +31,7 @@
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.Element;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -39,7 +42,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.util.Map;
+import java.util.List;
 
 
 public class ContextUtils {
@@ -73,7 +76,7 @@
                     }
                     catch (URISyntaxException ex) {
                         log.warn(Messages.getMessage("addPropertiesErr",
-                        		wsdlLocation.toString(),sd.getServiceQName().toString()), ex);
+                        		wsdlLocation.toString(),description.getServiceQName().toString()), ex);
                     }
                     soapMessageContext
                             .put(javax.xml.ws.handler.MessageContext.WSDL_DESCRIPTION, wsdlLocationURI);
@@ -82,15 +85,30 @@
                 }
     
                 soapMessageContext
-                        .put(javax.xml.ws.handler.MessageContext.WSDL_SERVICE, sd.getServiceQName());
+                        .put(javax.xml.ws.handler.MessageContext.WSDL_SERVICE, description.getServiceQName());
                 soapMessageContext
                         .setScope(javax.xml.ws.handler.MessageContext.WSDL_SERVICE, Scope.APPLICATION);
                 if (log.isDebugEnabled()) {
-                    log.debug("WSDL_SERVICE :" + sd.getServiceQName());
+                    log.debug("WSDL_SERVICE :" + description.getServiceQName());
                 }
             }
         }
 
+        //Lazily provide a list of available reference parameters.
+        org.apache.axis2.context.MessageContext msgContext =
+            jaxwsMessageContext.getAxisMessageContext();
+        SOAPHeader header = msgContext.getEnvelope().getHeader();
+        List<Element> list = new ReferenceParameterList(header);
+        
+        soapMessageContext
+        .put(javax.xml.ws.handler.MessageContext.REFERENCE_PARAMETERS, list);
+        soapMessageContext
+        .setScope(javax.xml.ws.handler.MessageContext.REFERENCE_PARAMETERS, Scope.APPLICATION);
+        
+        if (log.isDebugEnabled()) {
+            log.debug("Added reference parameter list.");
+        }
+        
         // If we are running within a servlet container, then JAX-WS requires that the
         // servlet related properties be set on the MessageContext
         soapMessageContext.put(javax.xml.ws.handler.MessageContext.SERVLET_CONTEXT,
Index: src/org/apache/axis2/jaxws/context/WebServiceContextImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/context/WebServiceContextImpl.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/context/WebServiceContextImpl.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,12 +18,21 @@
  */
 package org.apache.axis2.jaxws.context;
 
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import javax.servlet.http.HttpServletRequest;
+import javax.xml.namespace.QName;
+import javax.xml.ws.EndpointReference;
 import javax.xml.ws.WebServiceContext;
 import javax.xml.ws.handler.MessageContext;
+import javax.xml.ws.wsaddressing.W3CEndpointReference;
+
+import org.w3c.dom.Element;
+
+import java.net.URI;
 import java.security.Principal;
 
 public class WebServiceContextImpl implements WebServiceContext {
@@ -91,4 +100,37 @@
         this.soapMessageContext = soapMessageContext;
     }
 
+    public <T extends EndpointReference> T getEndpointReference(Class<T> clazz, Element... referenceParameters) {
+        EndpointReference jaxwsEPR = null;
+        String addressingNamespace = EndpointReferenceUtils.getAddressingNamespace(clazz);
+        
+        if (soapMessageContext != null) {
+            QName service = (QName) soapMessageContext.get(MessageContext.WSDL_SERVICE);
+            QName endpoint = (QName) soapMessageContext.get(MessageContext.WSDL_PORT);
+            URI wsdlURI = (URI) soapMessageContext.get(MessageContext.WSDL_DESCRIPTION);
+            String wsdlLocation = (wsdlURI != null) ? wsdlURI.toString() : null;
+            
+            org.apache.axis2.addressing.EndpointReference axis2EPR =
+                EndpointReferenceUtils.createAxis2EndpointReference(null, service, endpoint, wsdlLocation, addressingNamespace);
+            
+            try {
+                EndpointReferenceUtils.addReferenceParameters(axis2EPR, referenceParameters);
+                jaxwsEPR = EndpointReferenceUtils.convertFromAxis2(axis2EPR, addressingNamespace);
+            }
+            catch (Exception e) {
+                //TODO NLS enable.
+                throw ExceptionFactory.makeWebServiceException("Error creating endpoint reference", e);
+            }
+        }
+        else {
+            //TODO NLS enable.
+            throw new IllegalStateException("Message context not available.");        	
+        }
+        
+        return clazz.cast(jaxwsEPR);
+    }
+
+    public EndpointReference getEndpointReference(Element... referenceParameters) {
+        return getEndpointReference(W3CEndpointReference.class, referenceParameters);
+    }
 }
Index: src/org/apache/axis2/jaxws/feature/ClientConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/feature/ClientConfigurator.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/feature/ClientConfigurator.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.feature;
+
+import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.spi.BindingProvider;
+
+/**
+ * 
+ */
+public interface ClientConfigurator {
+    /**
+     * Perform client-side configuration for a <code>WebServiceFeature</code>.
+     * 
+     * @param messageContext
+     * @param provider
+     */
+    public void configure(MessageContext messageContext, BindingProvider provider);
+}
Index: src/org/apache/axis2/jaxws/feature/ClientFramework.java
===================================================================
--- src/org/apache/axis2/jaxws/feature/ClientFramework.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/feature/ClientFramework.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.feature;
+
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.spi.BindingProvider;
+
+import javax.xml.ws.WebServiceFeature;
+
+import java.util.IdentityHashMap;
+import java.util.Map;
+
+public class ClientFramework {
+    private static final WebServiceFeature[] ZERO_LENGTH_ARRAY = new WebServiceFeature[0];
+    
+    private Map<String, ClientConfigurator> configuratorMap;
+    private Map<String, WebServiceFeature> featureMap;
+    
+    public ClientFramework() {
+    	super();
+        configuratorMap = new IdentityHashMap<String, ClientConfigurator>();
+        featureMap = new IdentityHashMap<String, WebServiceFeature>();
+    }
+    
+    public void addConfigurator(String id, ClientConfigurator configurator) {
+        configuratorMap.put(id, configurator);
+    }
+    
+    public boolean isValid(WebServiceFeature feature) {
+        if (feature == null)
+            return false;
+        
+        return configuratorMap.containsKey(feature.getID());
+    }
+    
+    public void addFeature(WebServiceFeature feature) {
+        //TODO NLS enable.
+        if (!isValid(feature))
+            throw ExceptionFactory.makeWebServiceException("Invalid or unsupported WebServiceFeature " + feature.getID());
+        
+        featureMap.put(feature.getID(), feature);
+    }
+    
+    public WebServiceFeature getFeature(String id) {
+        return featureMap.get(id);
+    }
+    
+    public WebServiceFeature[] getAllFeatures() {
+        return featureMap.values().toArray(ZERO_LENGTH_ARRAY);
+    }
+    
+    public void configure(MessageContext messageContext, BindingProvider provider) {
+        for (WebServiceFeature feature : getAllFeatures()) {
+            ClientConfigurator configurator = configuratorMap.get(feature.getID());
+            configurator.configure(messageContext, provider);
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/spi/BindingProvider.java
===================================================================
--- src/org/apache/axis2/jaxws/spi/BindingProvider.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/spi/BindingProvider.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,6 +18,8 @@
  */
 package org.apache.axis2.jaxws.spi;
 
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 
 /**
@@ -27,5 +29,8 @@
     public EndpointDescription getEndpointDescription();
 
     public ServiceDelegate getServiceDelegate();
-
+    
+    public EndpointReference getAxis2EndpointReference(String addressingNamespace) throws AxisFault;
+    
+    public String getAddressingNamespace();
 }
Index: src/org/apache/axis2/jaxws/spi/Binding.java
===================================================================
--- src/org/apache/axis2/jaxws/spi/Binding.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/spi/Binding.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.spi;
+
+import javax.xml.ws.WebServiceFeature;
+
+import org.apache.axis2.jaxws.core.MessageContext;
+
+/**
+ * 
+ */
+public interface Binding extends javax.xml.ws.Binding {
+    public void setWebServiceFeatures(WebServiceFeature... features);
+    
+    public WebServiceFeature getWebServiceFeature(String id);
+    
+    public void configure(MessageContext messageContext, BindingProvider provider);
+}
Index: src/org/apache/axis2/jaxws/spi/Provider.java
===================================================================
--- src/org/apache/axis2/jaxws/spi/Provider.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/spi/Provider.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -19,14 +19,35 @@
 package org.apache.axis2.jaxws.spi;
 
 import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.stream.StreamResult;
 import javax.xml.ws.Endpoint;
+import javax.xml.ws.EndpointReference;
+import javax.xml.ws.Service;
+import javax.xml.ws.WebServiceFeature;
 import javax.xml.ws.spi.ServiceDelegate;
+import javax.xml.ws.wsaddressing.W3CEndpointReference;
 
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
+import org.apache.axis2.addressing.metadata.ServiceName;
+import org.apache.axis2.addressing.metadata.WSDLLocation;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.server.endpoint.EndpointImpl;
+import org.apache.axis2.util.XMLUtils;
+import org.w3c.dom.Element;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.net.URL;
+import java.util.List;
 
 public class Provider extends javax.xml.ws.spi.Provider {
+	private static final Element[] ZERO_LENGTH_ARRAY = new Element[0];
 
     @Override
     public Endpoint createAndPublishEndpoint(String s, Object obj) {
@@ -44,4 +65,107 @@
     public ServiceDelegate createServiceDelegate(URL url, QName qname, Class clazz) {
         return new org.apache.axis2.jaxws.spi.ServiceDelegate(url, qname, clazz);
     }
+
+    @Override
+    public W3CEndpointReference createW3CEndpointReference(String address,
+            QName serviceName,
+            QName portName,
+            List<Element> metadata,
+            String wsdlDocumentLocation,
+            List<Element> referenceParameters) {
+        String addressingNamespace =
+        	EndpointReferenceUtils.getAddressingNamespace(W3CEndpointReference.class);    	
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+        	EndpointReferenceUtils.createAxis2EndpointReference(address, serviceName, portName, wsdlDocumentLocation, addressingNamespace);
+        
+        W3CEndpointReference w3cEPR = null;
+        
+        try {
+        	EndpointReferenceUtils.addMetadata(axis2EPR, metadata.toArray(ZERO_LENGTH_ARRAY));
+        	EndpointReferenceUtils.addReferenceParameters(axis2EPR, referenceParameters.toArray(ZERO_LENGTH_ARRAY));
+        	
+            w3cEPR =
+                (W3CEndpointReference) EndpointReferenceUtils.convertFromAxis2(axis2EPR, addressingNamespace);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("A problem occured during the creation of an endpoint reference. See the nested exception for details.", e);
+        }
+        
+        return w3cEPR;
+    }
+
+    @Override
+    public <T> T getPort(EndpointReference jaxwsEPR, Class<T> sei, WebServiceFeature... features) {
+        if (jaxwsEPR == null) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("The endpoint reference cannot be null.");
+        }
+        
+        if (sei == null) {
+            throw ExceptionFactory.makeWebServiceException(
+                    Messages.getMessage("getPortInvalidSEI", jaxwsEPR.toString(), "null"));
+        }
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = null;
+        
+        try {
+            addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2EPR, jaxwsEPR);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Invalid endpoint reference.", e);
+        }
+        
+        org.apache.axis2.jaxws.spi.ServiceDelegate serviceDelegate = null;
+        
+        try {
+            ServiceName serviceName =
+            	EndpointReferenceHelper.getServiceNameMetadata(axis2EPR, addressingNamespace);
+            WSDLLocation wsdlLocation =
+            	EndpointReferenceHelper.getWSDLLocationMetadata(axis2EPR, addressingNamespace);
+            URL wsdlLocationURL = null;
+            
+            if (wsdlLocation.getLocation() != null)
+            	wsdlLocationURL = new URL(wsdlLocation.getLocation());
+            else
+            	wsdlLocationURL = new URL(axis2EPR.getAddress() + "?wsdl");
+            
+            serviceDelegate =
+            	new org.apache.axis2.jaxws.spi.ServiceDelegate(wsdlLocationURL, serviceName.getName(), Service.class);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("An error occured updating the endpoint", e);
+        }
+
+        return serviceDelegate.getPort(axis2EPR, addressingNamespace, sei, features);
+    }
+
+    @Override
+    public EndpointReference readEndpointReference(Source eprInfoset) {
+        EndpointReference jaxwsEPR = null;
+
+        try {
+            Transformer xformer = TransformerFactory.newInstance().newTransformer();
+            ByteArrayOutputStream baos = new ByteArrayOutputStream();
+            xformer.transform(eprInfoset, new StreamResult(baos));
+            
+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+            OMElement eprElement = (OMElement) XMLUtils.toOM(bais);
+            org.apache.axis2.addressing.EndpointReference axis2EPR =
+                EndpointReferenceUtils.createAxis2EndpointReference("");
+            String addressingNamespace = EndpointReferenceHelper.fromOM(axis2EPR, eprElement);
+            
+            jaxwsEPR = EndpointReferenceUtils.convertFromAxis2(axis2EPR, addressingNamespace);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("A problem occured during the creation of an endpoint reference. See the nested exception for details.", e);
+        }
+        
+        return jaxwsEPR;
+    }
 }
Index: src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -16,14 +16,14 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-
 package org.apache.axis2.jaxws.spi;
 
+
 import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
-import org.apache.axis2.jaxws.binding.BindingImpl;
-import org.apache.axis2.jaxws.binding.BindingUtils;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
 import org.apache.axis2.jaxws.client.PropertyMigrator;
 import org.apache.axis2.jaxws.client.dispatch.JAXBDispatch;
 import org.apache.axis2.jaxws.client.dispatch.XMLDispatch;
@@ -48,11 +48,12 @@
 import javax.xml.soap.SOAPMessage;
 import javax.xml.transform.Source;
 import javax.xml.ws.Dispatch;
+import javax.xml.ws.EndpointReference;
 import javax.xml.ws.Service;
+import javax.xml.ws.WebServiceFeature;
 import javax.xml.ws.WebServiceException;
 import javax.xml.ws.Service.Mode;
 import javax.xml.ws.handler.HandlerResolver;
-import javax.xml.ws.http.HTTPBinding;
 
 import java.lang.reflect.Proxy;
 import java.net.URL;
@@ -213,12 +214,13 @@
                         "serviceDelegateConstruct0", serviceQname.toString(), url.toString()));
             }
         }
+        
+        //TODO: Is this the best place for this code?
+        ConfigurationContext context = serviceDescription.getAxisConfigContext();
 
         // Register the necessary ApplicationContextMigrators
-        ApplicationContextMigratorUtil
-                .addApplicationContextMigrator(serviceDescription.getAxisConfigContext(),
-                                               Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
-                                               new PropertyMigrator());
+        ApplicationContextMigratorUtil.addApplicationContextMigrator(context,
+                Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID, new PropertyMigrator());
     }
 
     //================================================
@@ -248,13 +250,123 @@
     * (non-Javadoc)
     * @see javax.xml.ws.spi.ServiceDelegate#createDispatch(javax.xml.namespace.QName, java.lang.Class, javax.xml.ws.Service.Mode)
     */
-    public <T> Dispatch<T> createDispatch(QName qname, Class<T> clazz, Mode mode)
+    public <T> Dispatch<T> createDispatch(QName portName, Class<T> type, Mode mode)
             throws WebServiceException {
-        if (qname == null) {
+        return createDispatch(portName, type, mode, (WebServiceFeature[]) null);
+    }
+
+    /*
+    * (non-Javadoc)
+    * @see javax.xml.ws.spi.ServiceDelegate#createDispatch(javax.xml.namespace.QName, javax.xml.bind.JAXBContext, javax.xml.ws.Service.Mode)
+    */
+    public Dispatch<java.lang.Object> createDispatch(QName portName, JAXBContext context, Mode mode) {
+        return createDispatch(portName, context, mode, (WebServiceFeature[]) null);
+    }
+
+    @Override
+    public <T> Dispatch<T> createDispatch(EndpointReference jaxwsEPR, Class<T> type, Mode mode, WebServiceFeature... features) {
+        if (jaxwsEPR == null) {
+            //TODO NLS enable.
             throw ExceptionFactory
+                    .makeWebServiceException("The endpoint reference cannot be null.");
+        }
+        if (!isValidDispatchType(type)) {
+            throw ExceptionFactory
+                    .makeWebServiceException(Messages.getMessage("dispatchInvalidType"));
+        }
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = null;
+        
+        try {
+            addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2EPR, jaxwsEPR);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Invalid endpoint reference.", e);
+        }
+        
+        EndpointDescription endpointDesc =
+                DescriptionFactory.updateEndpoint(serviceDescription, null, axis2EPR,
+                                                  addressingNamespace,
+                                                  DescriptionFactory.UpdateType.CREATE_DISPATCH,
+                                                  this);
+        if (endpointDesc == null) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Unable to generate an endpoint description for endpoint reference " + jaxwsEPR);
+        }
+
+        XMLDispatch<T> dispatch = new XMLDispatch<T>(this, endpointDesc, axis2EPR, addressingNamespace, features);
+
+        if (mode != null) {
+            dispatch.setMode(mode);
+        } else {
+            dispatch.setMode(Service.Mode.PAYLOAD);
+        }
+
+        if (serviceClient == null)
+            serviceClient = getServiceClient(endpointDesc.getPortQName());
+
+        dispatch.setServiceClient(serviceClient);
+        dispatch.setType(type);
+        return dispatch;
+    }
+
+    @Override
+    public Dispatch<Object> createDispatch(EndpointReference jaxwsEPR, JAXBContext context, Mode mode, WebServiceFeature... features) {
+        if (jaxwsEPR == null) {
+            //TODO NLS enable.
+            throw ExceptionFactory
+                    .makeWebServiceException("The endpoint reference cannot be null.");
+        }
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = null;
+        
+        try {
+            addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2EPR, jaxwsEPR);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Invalid endpoint reference.", e);
+        }
+        
+        EndpointDescription endpointDesc =
+                DescriptionFactory.updateEndpoint(serviceDescription, null, axis2EPR,
+                                                  addressingNamespace,
+                                                  DescriptionFactory.UpdateType.CREATE_DISPATCH,
+                                                  this);
+        if (endpointDesc == null) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Unable to generate an endpoint description for endpoint reference " + jaxwsEPR);
+        }
+
+        JAXBDispatch<Object> dispatch = new JAXBDispatch(this, endpointDesc, axis2EPR, addressingNamespace, features);
+
+        if (mode != null) {
+            dispatch.setMode(mode);
+        } else {
+            dispatch.setMode(Service.Mode.PAYLOAD);
+        }
+
+        if (serviceClient == null)
+            serviceClient = getServiceClient(endpointDesc.getPortQName());
+
+        dispatch.setJAXBContext(context);
+        dispatch.setServiceClient(serviceClient);
+
+        return dispatch;
+    }
+
+    @Override
+    public <T> Dispatch<T> createDispatch(QName portName, Class<T> type, Mode mode, WebServiceFeature... features) {
+        if (portName == null) {
+            throw ExceptionFactory
                     .makeWebServiceException(Messages.getMessage("createDispatchFail0"));
         }
-        if (!isValidDispatchType(clazz)) {
+        if (!isValidDispatchType(type)) {
             throw ExceptionFactory
                     .makeWebServiceException(Messages.getMessage("dispatchInvalidType"));
         }
@@ -262,16 +374,17 @@
         EndpointDescription endpointDesc =
                 DescriptionFactory.updateEndpoint(serviceDescription, 
                 								  null, 
-                								  qname,
+                                                  portName,
                                                   DescriptionFactory.UpdateType.CREATE_DISPATCH,
                                                   this);
+
         if (endpointDesc == null) {
             throw ExceptionFactory.makeWebServiceException(
-                    Messages.getMessage("createDispatchFail2", qname.toString()));
+                    Messages.getMessage("createDispatchFail2", portName.toString()));
         }
 
-        XMLDispatch<T> dispatch = new XMLDispatch<T>(this, endpointDesc);
-        
+        XMLDispatch<T> dispatch = new XMLDispatch<T>(this, endpointDesc, features);
+
         if (mode != null) {
             dispatch.setMode(mode);
         } else {
@@ -279,19 +392,16 @@
         }
 
         if (serviceClient == null)
-            serviceClient = getServiceClient(qname);
+            serviceClient = getServiceClient(portName);
 
         dispatch.setServiceClient(serviceClient);
-        dispatch.setType(clazz);
+        dispatch.setType(type);
         return dispatch;
     }
 
-    /*
-    * (non-Javadoc)
-    * @see javax.xml.ws.spi.ServiceDelegate#createDispatch(javax.xml.namespace.QName, javax.xml.bind.JAXBContext, javax.xml.ws.Service.Mode)
-    */
-    public Dispatch<java.lang.Object> createDispatch(QName qname, JAXBContext context, Mode mode) {
-        if (qname == null) {
+    @Override
+    public Dispatch<Object> createDispatch(QName portName, JAXBContext context, Mode mode, WebServiceFeature... features) {
+        if (portName == null) {
             throw ExceptionFactory
                     .makeWebServiceException(Messages.getMessage("createDispatchFail0"));
         }
@@ -299,16 +409,16 @@
         EndpointDescription endpointDesc =
                 DescriptionFactory.updateEndpoint(serviceDescription, 
                 								  null, 
-                								  qname,
+                                                  portName,
                                                   DescriptionFactory.UpdateType.CREATE_DISPATCH,
                                                   this);
+
         if (endpointDesc == null) {
             throw ExceptionFactory.makeWebServiceException(
-                    Messages.getMessage("createDispatchFail2", qname.toString()));
+                    Messages.getMessage("createDispatchFail2", portName.toString()));
         }
 
-        JAXBDispatch<Object> dispatch = new JAXBDispatch(this, endpointDesc);
-        dispatch.setBinding(addBinding(endpointDesc, endpointDesc.getClientBindingID()));
+        JAXBDispatch<Object> dispatch = new JAXBDispatch(this, endpointDesc, features);
 
         if (mode != null) {
             dispatch.setMode(mode);
@@ -317,7 +427,7 @@
         }
 
         if (serviceClient == null)
-            serviceClient = getServiceClient(qname);
+            serviceClient = getServiceClient(portName);
 
         dispatch.setJAXBContext(context);
         dispatch.setServiceClient(serviceClient);
@@ -330,7 +440,7 @@
      * @see javax.xml.ws.spi.ServiceDelegate#getPort(java.lang.Class)
      */
     public <T> T getPort(Class<T> sei) throws WebServiceException {
-        return getPort(null, sei);
+        return getPort((QName) null, sei, (WebServiceFeature[]) null);
     }
 
     /*
@@ -338,6 +448,16 @@
     * @see javax.xml.ws.spi.ServiceDelegate#getPort(javax.xml.namespace.QName, java.lang.Class)
     */
     public <T> T getPort(QName portName, Class<T> sei) throws WebServiceException {
+        return getPort(portName, sei, (WebServiceFeature[]) null);
+    }
+
+    @Override
+    public <T> T getPort(Class<T> sei, WebServiceFeature... features) {
+        return getPort((QName) null, sei, features);
+    }
+
+    @Override
+    public <T> T getPort(EndpointReference jaxwsEPR, Class<T> sei, WebServiceFeature... features) {
         /* TODO Check to see if WSDL Location is provided.
          * if not check WebService annotation's WSDLLocation
          * if both are not provided then throw exception.
@@ -349,8 +469,47 @@
             //TODO: Should I throw Exception if no WSDL
             //throw ExceptionFactory.makeWebServiceException("WSLD Not found");
         }
+        
+        if (jaxwsEPR == null) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("The endpoint reference cannot be null.");
+        }
+        
         if (sei == null) {
             throw ExceptionFactory.makeWebServiceException(
+                    Messages.getMessage("getPortInvalidSEI", jaxwsEPR.toString(), "null"));
+        }
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+            EndpointReferenceUtils.createAxis2EndpointReference("");
+        String addressingNamespace = null;
+        
+        try {
+            addressingNamespace = EndpointReferenceUtils.convertToAxis2(axis2EPR, jaxwsEPR);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Invalid endpoint reference.", e);
+        }
+        
+        return getPort(axis2EPR, addressingNamespace, sei, features);
+    }
+
+    @Override
+    public <T> T getPort(QName portName, Class<T> sei, WebServiceFeature... features) {
+        /* TODO Check to see if WSDL Location is provided.
+         * if not check WebService annotation's WSDLLocation
+         * if both are not provided then throw exception.
+         * (JLB): I'm not sure lack of WSDL should cause an exception
+         */
+
+
+        if (!isValidWSDLLocation()) {
+            //TODO: Should I throw Exception if no WSDL
+            //throw ExceptionFactory.makeWebServiceException("WSLD Not found");
+        }
+        if (sei == null) {
+            throw ExceptionFactory.makeWebServiceException(
                     Messages.getMessage("getPortInvalidSEI", portName.toString(), "null"));
         }
 
@@ -395,7 +554,7 @@
             }
         }
         
-        JAXWSProxyHandler proxyHandler = new JAXWSProxyHandler(this, interfaces[0], endpointDesc);
+        JAXWSProxyHandler proxyHandler = new JAXWSProxyHandler(this, interfaces[0], endpointDesc, features);
         Object proxyClass = Proxy.newProxyInstance(classLoader, interfaces, proxyHandler);
         return sei.cast(proxyClass);
     }
@@ -485,7 +644,60 @@
     public ServiceClient getServiceClient(QName portQName) throws WebServiceException {
         return serviceDescription.getServiceClient(portQName, this);
     }
+    
+    public <T> T getPort(org.apache.axis2.addressing.EndpointReference axis2EPR, String addressingNamespace, Class<T> sei, WebServiceFeature... features) {
+        DescriptionBuilderComposite sparseComposite = getPortMetadata();
+        resetPortMetadata();
+        EndpointDescription endpointDesc = null;
+        
+        if (sparseComposite != null) {
+            endpointDesc =
+                DescriptionFactory.updateEndpoint(serviceDescription, sei, axis2EPR,
+                                                  addressingNamespace,
+                                                  DescriptionFactory.UpdateType.GET_PORT,
+                                                  sparseComposite, this);
 
+        }
+        else {
+            endpointDesc =
+                DescriptionFactory.updateEndpoint(serviceDescription, sei, axis2EPR,
+                                                  addressingNamespace,
+                                                  DescriptionFactory.UpdateType.GET_PORT,
+                                                  null, this);
+        }
+        
+        if (endpointDesc == null) {
+            // TODO: NLS
+            throw ExceptionFactory.makeWebServiceException(
+                    "Unable to getPort for epr " + axis2EPR);
+        }
+
+        String[] interfacesNames = 
+            new String [] {sei.getName(), org.apache.axis2.jaxws.spi.BindingProvider.class.getName()};
+        
+        // As required by java.lang.reflect.Proxy, ensure that the interfaces
+        // for the proxy are loadable by the same class loader. 
+        Class[] interfaces = null;
+        // First, let's try loading the interfaces with the SEI classLoader
+        ClassLoader classLoader = getClassLoader(sei);
+        try {
+            interfaces = loadClasses(classLoader, interfacesNames);
+        } catch (ClassNotFoundException e1) {
+            // Let's try with context classLoader now
+            classLoader = getContextClassLoader();
+            try {
+                interfaces = loadClasses(classLoader, interfacesNames);
+            } catch (ClassNotFoundException e2) {
+                // TODO: NLS
+                throw ExceptionFactory.makeWebServiceException("Unable to load proxy classes", e2);
+            }
+        }
+
+        JAXWSProxyHandler proxyHandler = new JAXWSProxyHandler(this, interfaces[0], endpointDesc, axis2EPR, addressingNamespace, features);
+        Object proxyClass = Proxy.newProxyInstance(classLoader, interfaces, proxyHandler);
+        return sei.cast(proxyClass);        
+    }
+
     //================================================
     // Impl methods
     //================================================
@@ -515,23 +727,6 @@
         return getWSDLWrapper().getService(serviceName) != null;
     }
 
-    private BindingImpl addBinding(EndpointDescription endpointDesc, String bindingId) {
-        // TODO: before creating binding do I have to do something with Handlers ... how is Binding related to Handler, this mistry sucks!!!
-        if (bindingId != null) {
-            //TODO: create all the bindings here
-            if (BindingUtils.isSOAPBinding(bindingId)) {            	
-                //instantiate soap11 binding implementation here and call setBinding in BindingProvider
-                return new org.apache.axis2.jaxws.binding.SOAPBinding(endpointDesc);
-            } 
-            
-            if (bindingId.equals(HTTPBinding.HTTP_BINDING)) {
-                //instantiate http binding implementation here and call setBinding in BindingProvider
-                return new org.apache.axis2.jaxws.binding.HTTPBinding(endpointDesc);
-            }
-        } 
-        return new org.apache.axis2.jaxws.binding.SOAPBinding(endpointDesc);
-    }
-
     private boolean isValidDispatchType(Class clazz) {
         return clazz != null && (clazz == String.class ||
                 clazz == Source.class ||
Index: src/org/apache/axis2/jaxws/spi/Constants.java
===================================================================
--- src/org/apache/axis2/jaxws/spi/Constants.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/spi/Constants.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -55,7 +55,7 @@
     // JAXBUtils class will use the same ClassLoader to retrieve a JAXBContext as the
     // one that was used to create the request
     public static final String CACHE_CLASSLOADER = "CACHE_CLASSLOADER";
-
+    
     /** Intentionally Private */
     private Constants() {
     }
Index: src/org/apache/axis2/jaxws/BindingProvider.java
===================================================================
--- src/org/apache/axis2/jaxws/BindingProvider.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/BindingProvider.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,27 +18,34 @@
  */
 package org.apache.axis2.jaxws;
 
+import java.net.URL;
 import java.util.Hashtable;
 import java.util.Map;
 
+import javax.xml.namespace.QName;
 import javax.xml.ws.Binding;
+import javax.xml.ws.EndpointReference;
+import javax.xml.ws.WebServiceFeature;
 import javax.xml.ws.handler.HandlerResolver;
+import javax.xml.ws.wsaddressing.W3CEndpointReference;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
 import org.apache.axis2.jaxws.binding.BindingUtils;
 import org.apache.axis2.jaxws.binding.SOAPBinding;
 import org.apache.axis2.jaxws.client.PropertyValidator;
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
 import org.apache.axis2.jaxws.handler.HandlerResolverImpl;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 import org.apache.axis2.transport.http.HTTPConstants;
-
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 public class BindingProvider implements org.apache.axis2.jaxws.spi.BindingProvider {
-
     protected Map<String, Object> requestContext;
 
     protected Map<String, Object> responseContext;
@@ -46,37 +53,52 @@
     protected EndpointDescription endpointDesc;
 
     protected ServiceDelegate serviceDelegate;
+    
+    protected org.apache.axis2.addressing.EndpointReference epr;
+    
+    protected String addressingNamespace;
 
-    private Binding binding = null;
+    private org.apache.axis2.jaxws.spi.Binding binding = null;
     private static final Log log = LogFactory.getLog(BindingProvider.class);
-    public BindingProvider(ServiceDelegate svcDelegate, EndpointDescription epDesc) {
-        endpointDesc = epDesc;
-        serviceDelegate = svcDelegate;
-
-        initialize();
+    public BindingProvider(ServiceDelegate svcDelegate,
+                           EndpointDescription epDesc,
+                           org.apache.axis2.addressing.EndpointReference epr,
+                           String addressingNamespace,
+                           WebServiceFeature... features) {
+        this.endpointDesc = epDesc;
+        this.serviceDelegate = svcDelegate;
+        this.epr = epr;
+        this.addressingNamespace = addressingNamespace;
+        
+        initialize(features);
     }
 
     /*
      * Initialize any objects needed by the BindingProvider
      */
-    private void initialize() {
+    private void initialize(WebServiceFeature... features) {
         requestContext = new ValidatingClientContext();
         responseContext = new ValidatingClientContext();
-
+        
         // Setting standard property defaults for the request context
-        requestContext.put(BindingProvider.SESSION_MAINTAIN_PROPERTY, new Boolean(false));
-        requestContext.put(BindingProvider.SOAPACTION_USE_PROPERTY, new Boolean(true));
-
+        requestContext.put(BindingProvider.SESSION_MAINTAIN_PROPERTY, Boolean.FALSE);
+        requestContext.put(BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
+        
         // Set the endpoint address
-        String endpointAddress = endpointDesc.getEndpointAddress();
-        if (endpointAddress != null) {
-            requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);
+        String endpointAddress = (epr != null ) ? epr.getAddress() : endpointDesc.getEndpointAddress();        
+        if (endpointAddress != null && !"".equals(endpointAddress)) {
+            requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);                
         }
         
         // JAXWS 9.2.1.1 requires that we go ahead and create the binding object
         // so we can also set the handlerchain
-        if (binding == null) {
-            binding = BindingUtils.createBinding(endpointDesc);
+        binding = (org.apache.axis2.jaxws.spi.Binding) BindingUtils.createBinding(endpointDesc);
+        if(log.isDebugEnabled()){
+            log.debug("Lookign for Handler Resolver");
+        }
+        // TODO should we allow the ServiceDelegate to figure out the default handlerresolver?  Probably yes, since a client app may look for one there.
+        HandlerResolver handlerResolver = null;
+        if(serviceDelegate.getHandlerResolver() != null){
             
             // See if the metadata from creating the service indicates that MTOM should be enabled
             if (binding instanceof SOAPBinding) {
@@ -87,25 +109,19 @@
             }
             
             if(log.isDebugEnabled()){
-                log.debug("Lookign for Handler Resolver");
+                log.debug("Reading default Handler Resolver ");
             }
-            // TODO should we allow the ServiceDelegate to figure out the default handlerresolver?  Probably yes, since a client app may look for one there.
-            HandlerResolver handlerResolver = null;
-            if(serviceDelegate.getHandlerResolver() != null){
-                if(log.isDebugEnabled()){
-                    log.debug("Reading default Handler Resolver ");
-                }
-                handlerResolver= serviceDelegate.getHandlerResolver();
+            handlerResolver= serviceDelegate.getHandlerResolver();
+        }
+        else{
+            handlerResolver = new HandlerResolverImpl(endpointDesc.getServiceDescription());
+            if(log.isDebugEnabled()){
+                log.debug("Creating new Handler Resolver using HandlerResolverImpl");
             }
-            else{
-                handlerResolver = new HandlerResolverImpl(endpointDesc.getServiceDescription());
-                if(log.isDebugEnabled()){
-                    log.debug("Creating new Handler Resolver using HandlerResolverImpl");
-                }
-            }
-            binding.setHandlerChain(handlerResolver.getHandlerChain(endpointDesc.getPortInfo()));
         }
-
+        binding.setHandlerChain(handlerResolver.getHandlerChain(endpointDesc.getPortInfo()));
+        
+        binding.setWebServiceFeatures(features);
     }
 
     public ServiceDelegate getServiceDelegate() {
@@ -119,10 +135,6 @@
     public Binding getBinding() {
         return binding;
     }
-    
-    public void setBinding(Binding binding) {
-        this.binding = binding;
-    }
 
     public Map<String, Object> getRequestContext() {
         return requestContext;
@@ -215,10 +227,58 @@
         }
     }
 
+    public EndpointReference getEndpointReference() {
+        return getEndpointReference(W3CEndpointReference.class);
+    }
+
+    public <T extends EndpointReference> T getEndpointReference(Class<T> clazz) {
+        EndpointReference jaxwsEPR = null;
+        String addressingNamespace = EndpointReferenceUtils.getAddressingNamespace(clazz);
+        
+        if (!BindingUtils.isSOAPBinding(binding.getBindingID()))
+            throw new UnsupportedOperationException("This method is unsupported for the binding: " + binding.getBindingID());
+        
+        try {
+            org.apache.axis2.addressing.EndpointReference epr =
+                getAxis2EndpointReference(addressingNamespace);
+            jaxwsEPR = EndpointReferenceUtils.convertFromAxis2(epr, addressingNamespace);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Error creating endpoint reference", e);
+        }
+        
+        return clazz.cast(jaxwsEPR);
+    }
+
+    public org.apache.axis2.addressing.EndpointReference getAxis2EndpointReference(String addressingNamespace) throws AxisFault {
+        org.apache.axis2.addressing.EndpointReference epr = this.epr;
+        
+        if (epr == null || !addressingNamespace.equals(this.addressingNamespace)) {
+            String address = endpointDesc.getEndpointAddress();
+            QName service = endpointDesc.getServiceQName();
+            QName port = endpointDesc.getPortQName();
+            URL wsdlURL = ((ServiceDescriptionWSDL) endpointDesc.getServiceDescription()).getWSDLLocation();
+            String wsdlLocation = (wsdlURL != null) ? wsdlURL.toString() : null;
+
+            epr = EndpointReferenceUtils.createAxis2EndpointReference(address, service, port, wsdlLocation, addressingNamespace);
+        }
+        
+        return epr;
+    }
+    
+    public String getAddressingNamespace() {
+        return addressingNamespace;
+    }
+    
     /*
     * An inner class used to validate properties as they are set by the client.
     */
     class ValidatingClientContext extends Hashtable<String, Object> {
+        /**
+         * 
+         */
+        private static final long serialVersionUID = 3485112205801917858L;
 
         @Override
         public synchronized Object put(String key, Object value) {
@@ -234,4 +294,6 @@
             }
         }
     }
+
+
 }
Index: src/org/apache/axis2/jaxws/server/endpoint/EndpointImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/server/endpoint/EndpointImpl.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/server/endpoint/EndpointImpl.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -22,20 +22,26 @@
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.ExceptionFactory;
-import org.apache.axis2.jaxws.binding.BindingImpl;
+import org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils;
 import org.apache.axis2.jaxws.binding.BindingUtils;
 import org.apache.axis2.jaxws.description.DescriptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.transport.http.HTTPWorkerFactory;
 import org.apache.axis2.transport.http.server.SimpleHttpServer;
 import org.apache.axis2.transport.http.server.WorkerFactory;
+import org.w3c.dom.Element;
 
+import javax.xml.namespace.QName;
 import javax.xml.transform.Source;
 import javax.xml.ws.Binding;
+import javax.xml.ws.EndpointReference;
+import javax.xml.ws.wsaddressing.W3CEndpointReference;
 
 import java.io.IOException;
+import java.net.URL;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
@@ -204,4 +210,36 @@
             e.printStackTrace();
         }
     }
+
+    @Override
+    public <T extends EndpointReference> T getEndpointReference(Class<T> clazz, Element... referenceParameters) {
+        EndpointReference jaxwsEPR = null;
+        String addressingNamespace = EndpointReferenceUtils.getAddressingNamespace(clazz);
+        String address = endpointDesc.getEndpointAddress();
+        QName serviceName = endpointDesc.getServiceQName();
+        QName portName = endpointDesc.getPortQName();
+        URL wsdlURL = ((ServiceDescriptionWSDL) endpointDesc.getServiceDescription()).getWSDLLocation();
+        
+        if (!BindingUtils.isSOAPBinding(binding.getBindingID()))
+            throw new UnsupportedOperationException("This method is unsupported for the binding: " + binding.getBindingID());
+        
+        org.apache.axis2.addressing.EndpointReference axis2EPR =
+        	EndpointReferenceUtils.createAxis2EndpointReference(address, serviceName, portName, wsdlURL.toString(), addressingNamespace);
+        
+        try {
+        	EndpointReferenceUtils.addReferenceParameters(axis2EPR, referenceParameters);
+            jaxwsEPR = EndpointReferenceUtils.convertFromAxis2(axis2EPR, addressingNamespace);
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Error creating endpoint reference", e);
+        }
+
+        return clazz.cast(jaxwsEPR);
+    }
+
+    @Override
+    public EndpointReference getEndpointReference(Element... referenceParameters) {
+        return getEndpointReference(W3CEndpointReference.class, referenceParameters);
+    }
 }
Index: src/org/apache/axis2/jaxws/server/EndpointController.java
===================================================================
--- src/org/apache/axis2/jaxws/server/EndpointController.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/server/EndpointController.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -25,6 +25,8 @@
 import org.apache.axis2.description.WSDL2Constants;
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.factory.Axis2EndpointReferenceFactory;
+import org.apache.axis2.jaxws.addressing.factory.Axis2EndpointReferenceFactoryImpl;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.core.util.MessageContextUtils;
 import org.apache.axis2.jaxws.description.DescriptionFactory;
@@ -49,6 +51,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamReader;
 import java.io.StringReader;
 import java.security.PrivilegedActionException;
@@ -399,6 +402,21 @@
             ServiceDescription sd =
                     DescriptionFactory.createServiceDescriptionFromServiceImpl(implClass, axisSvc);
             EndpointDescription ed = sd.getEndpointDescriptions_AsCollection().iterator().next();
+            
+            // TODO: This is only temporary until the deprecated method is no longer used
+            QName service = ed.getServiceQName();
+            QName endpoint = ed.getPortQName();
+            axisSvc = ed.getAxisService();
+            
+            try {
+                Axis2EndpointReferenceFactoryImpl axis2EPRFactory =
+                	(Axis2EndpointReferenceFactoryImpl) FactoryRegistry.getFactory(Axis2EndpointReferenceFactory.class);
+                axis2EPRFactory.addAddress(service, endpoint, axisSvc.getEPRs()[0]);
+            }
+            catch (Exception e) {
+                throw ExceptionFactory.makeWebServiceException(e);
+            }
+            
             return ed;
         }
     }
Index: src/org/apache/axis2/jaxws/registry/FactoryRegistry.java
===================================================================
--- src/org/apache/axis2/jaxws/registry/FactoryRegistry.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/registry/FactoryRegistry.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -19,6 +19,10 @@
 
 package org.apache.axis2.jaxws.registry;
 
+import org.apache.axis2.jaxws.addressing.factory.Axis2EndpointReferenceFactory;
+import org.apache.axis2.jaxws.addressing.factory.Axis2EndpointReferenceFactoryImpl;
+import org.apache.axis2.jaxws.addressing.factory.JAXWSEndpointReferenceFactory;
+import org.apache.axis2.jaxws.addressing.factory.JAXWSEndpointReferenceFactoryImpl;
 import org.apache.axis2.jaxws.core.controller.InvocationControllerFactory;
 import org.apache.axis2.jaxws.core.controller.impl.InvocationControllerFactoryImpl;
 import org.apache.axis2.jaxws.handler.lifecycle.factory.HandlerLifecycleManagerFactory;
@@ -94,6 +98,8 @@
         table.put(EndpointLifecycleManagerFactory.class, new EndpointLifecycleManagerFactoryImpl());
         table.put(HandlerLifecycleManagerFactory.class, new HandlerLifecycleManagerFactory());
         table.put(ClassFinderFactory.class, new ClassFinderFactory());
+        table.put(JAXWSEndpointReferenceFactory.class, new JAXWSEndpointReferenceFactoryImpl());
+        table.put(Axis2EndpointReferenceFactory.class, new Axis2EndpointReferenceFactoryImpl());
         table.put(ExecutorFactory.class, new JAXWSExecutorFactory());
         table.put(ServiceInstanceFactory.class, new ServiceInstanceFactoryImpl());
         table.put(InvocationControllerFactory.class, new InvocationControllerFactoryImpl());
Index: src/org/apache/axis2/jaxws/binding/BindingImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/binding/BindingImpl.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/binding/BindingImpl.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -16,24 +16,32 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-
 package org.apache.axis2.jaxws.binding;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
-import javax.xml.ws.Binding;
+import javax.xml.ws.RespectBindingFeature;
+import javax.xml.ws.WebServiceFeature;
 import javax.xml.ws.handler.Handler;
 
+import org.apache.axis2.jaxws.client.config.RespectBindingConfigurator;
+import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.feature.ClientConfigurator;
+import org.apache.axis2.jaxws.feature.ClientFramework;
 import org.apache.axis2.jaxws.handler.HandlerResolverImpl;
+import org.apache.axis2.jaxws.spi.Binding;
+import org.apache.axis2.jaxws.spi.BindingProvider;
 
 /**
- * @author rott classes that would normally "implement javax.xml.ws.Binding"
- *         should extend this class instead.
+ * Classes that would normally "implement javax.xml.ws.Binding"
+ * should extend this class instead.
  */
-public class BindingImpl implements Binding {
+public abstract class BindingImpl implements Binding {
+    private static final ClientConfigurator RESPECT_BINDING_CONFIGURATOR =
+        new RespectBindingConfigurator();
 
     // an unsorted list of handlers
     private List<Handler> handlers = null;
@@ -43,15 +51,13 @@
     private EndpointDescription endpointDesc;
 
     protected Set<String> roles = null;
+    
+    protected ClientFramework framework = null;
 
     protected static final String SOAP11_ENV_NS = "http://schemas.xmlsoap.org/soap/envelope/";
 
     protected static final String SOAP12_ENV_NS = "http://www.w3.org/2003/05/soap-envelope";
 
-    public BindingImpl(String bindingId) {
-        this.bindingId = bindingId;
-    }
-
     public BindingImpl(EndpointDescription endpointDesc) {
         this.endpointDesc = endpointDesc;
         // client
@@ -60,6 +66,9 @@
             // server
             this.bindingId = endpointDesc.getBindingType();
         }
+        
+        framework = new ClientFramework();
+        framework.addConfigurator(RespectBindingFeature.ID, RESPECT_BINDING_CONFIGURATOR);
     }
 
     public List<Handler> getHandlerChain() {
@@ -81,4 +90,26 @@
         }
     }
 
+    /**
+     * @since JAX-WS 2.1
+     */
+    public String getBindingID() {
+        return this.bindingId;
+    }
+
+    public void configure(MessageContext messageContext, BindingProvider provider) {
+        framework.configure(messageContext, provider);
+    }
+
+    public WebServiceFeature getWebServiceFeature(String id) {
+        return framework.getFeature(id);
+    }
+
+    public void setWebServiceFeatures(WebServiceFeature... features) {
+        if (features != null) {
+            for (WebServiceFeature feature : features) {
+                framework.addFeature(feature);
+            }
+        }
+    }
 }
Index: src/org/apache/axis2/jaxws/binding/SOAPBinding.java
===================================================================
--- src/org/apache/axis2/jaxws/binding/SOAPBinding.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/binding/SOAPBinding.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -19,7 +19,11 @@
 package org.apache.axis2.jaxws.binding;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.SubmissionAddressingFeature;
+import org.apache.axis2.jaxws.client.config.AddressingConfigurator;
+import org.apache.axis2.jaxws.client.config.MTOMConfigurator;
 import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.feature.ClientConfigurator;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.utility.SAAJFactory;
 import org.apache.commons.logging.Log;
@@ -30,8 +34,9 @@
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPFactory;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.soap.AddressingFeature;
+import javax.xml.ws.soap.MTOMFeature;
 
-import java.util.AbstractSet;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -42,6 +47,10 @@
  * explicitly specificied.
  */
 public class SOAPBinding extends BindingImpl implements javax.xml.ws.soap.SOAPBinding {
+    private static final ClientConfigurator ADDRESSING_CONFIGURATOR =
+        new AddressingConfigurator();
+    private static final ClientConfigurator MTOM_CONFIGURATOR =
+        new MTOMConfigurator();
 
     private boolean mtomEnabled = false;
 
@@ -49,6 +58,10 @@
 
     public SOAPBinding(EndpointDescription endpointDesc) {
         super(endpointDesc);
+        
+        framework.addConfigurator(AddressingFeature.ID, ADDRESSING_CONFIGURATOR);
+        framework.addConfigurator(SubmissionAddressingFeature.ID, ADDRESSING_CONFIGURATOR);
+        framework.addConfigurator(MTOMFeature.ID, MTOM_CONFIGURATOR);
     }
 
     /*
Index: src/org/apache/axis2/jaxws/client/dispatch/XMLDispatch.java
===================================================================
--- src/org/apache/axis2/jaxws/client/dispatch/XMLDispatch.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/client/dispatch/XMLDispatch.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,6 +18,7 @@
  */
 package org.apache.axis2.jaxws.client.dispatch;
 
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.client.async.AsyncResponse;
 import org.apache.axis2.jaxws.description.EndpointDescription;
@@ -41,16 +42,27 @@
 import javax.xml.transform.Source;
 import javax.xml.ws.Service.Mode;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.WebServiceFeature;
 
 public class XMLDispatch<T> extends BaseDispatch<T> {
     private static final Log log = LogFactory.getLog(XMLDispatch.class);
     private Class type;
     private Class blockFactoryType;
 
-    public XMLDispatch(ServiceDelegate svcDelegate, EndpointDescription enpdointDesc) {
-        super(svcDelegate, enpdointDesc);
+    public XMLDispatch(ServiceDelegate svcDelegate,
+                       EndpointDescription endpointDesc,
+                       WebServiceFeature... features) {
+        this(svcDelegate, endpointDesc, null, null, features);
     }
 
+    public XMLDispatch(ServiceDelegate svcDelegate,
+            EndpointDescription endpointDesc,
+            EndpointReference epr,
+            String addressingNamespace,
+            WebServiceFeature... features) {
+        super(svcDelegate, endpointDesc, epr, addressingNamespace, features);
+    }
+
     public Class getType() {
         return type;
     }
Index: src/org/apache/axis2/jaxws/client/dispatch/JAXBDispatch.java
===================================================================
--- src/org/apache/axis2/jaxws/client/dispatch/JAXBDispatch.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/client/dispatch/JAXBDispatch.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,6 +18,7 @@
  */
 package org.apache.axis2.jaxws.client.dispatch;
 
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.client.async.AsyncResponse;
 import org.apache.axis2.jaxws.description.EndpointDescription;
@@ -28,9 +29,6 @@
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
-import org.apache.axis2.jaxws.message.factory.SOAPEnvelopeBlockFactory;
-import org.apache.axis2.jaxws.message.factory.SourceBlockFactory;
-import org.apache.axis2.jaxws.message.factory.XMLStringBlockFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 import org.apache.axis2.jaxws.utility.XMLRootElementUtil;
@@ -40,18 +38,28 @@
 import javax.xml.bind.JAXBContext;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamException;
-import javax.xml.transform.Source;
 import javax.xml.ws.Service.Mode;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.WebServiceFeature;
 
 public class JAXBDispatch<T> extends BaseDispatch<T> {
     private static final Log log = LogFactory.getLog(JAXBDispatch.class);
     private JAXBContext jaxbContext;
 
-    public JAXBDispatch(ServiceDelegate svcDelegate, EndpointDescription epDesc) {
-        super(svcDelegate, epDesc);
+    public JAXBDispatch(ServiceDelegate svcDelegate,
+                        EndpointDescription epDesc,
+                        WebServiceFeature... features) {
+        this(svcDelegate, epDesc, null, null, features);
     }
 
+    public JAXBDispatch(ServiceDelegate svcDelegate,
+            EndpointDescription epDesc,
+            EndpointReference epr,
+            String addressingNamespace,
+            WebServiceFeature... features) {
+        super(svcDelegate, epDesc, epr, addressingNamespace, features);
+    }
+
     public JAXBContext getJAXBContext() {
         return jaxbContext;
     }
Index: src/org/apache/axis2/jaxws/client/dispatch/BaseDispatch.java
===================================================================
--- src/org/apache/axis2/jaxws/client/dispatch/BaseDispatch.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/client/dispatch/BaseDispatch.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -22,13 +22,10 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 
-import javax.xml.soap.SOAPBody;
-import javax.xml.soap.SOAPConstants;
 import javax.xml.soap.SOAPFactory;
 import javax.xml.soap.SOAPFault;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.ws.AsyncHandler;
-import javax.xml.ws.Binding;
 import javax.xml.ws.ProtocolException;
 import javax.xml.ws.Response;
 import javax.xml.ws.WebServiceException;
@@ -37,7 +34,9 @@
 import javax.xml.ws.http.HTTPException;
 import javax.xml.ws.soap.SOAPBinding;
 import javax.xml.ws.soap.SOAPFaultException;
+import javax.xml.ws.WebServiceFeature;
 
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.ServiceClient;
 import org.apache.axis2.jaxws.BindingProvider;
 import org.apache.axis2.jaxws.ExceptionFactory;
@@ -51,13 +50,11 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.marshaller.impl.alt.MethodMarshallerUtils;
 import org.apache.axis2.jaxws.message.Message;
-import org.apache.axis2.jaxws.message.Protocol;
-import org.apache.axis2.jaxws.message.util.XMLFaultUtils;
+import org.apache.axis2.jaxws.spi.Binding;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.axis2.jaxws.spi.Constants;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 import org.apache.axis2.jaxws.spi.migrator.ApplicationContextMigratorUtil;
-import org.apache.axis2.jaxws.utility.SAAJFactory;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -72,8 +69,12 @@
 
     protected Mode mode;
 
-    protected BaseDispatch(ServiceDelegate svcDelgate, EndpointDescription epDesc) {
-        super(svcDelgate, epDesc);
+    protected BaseDispatch(ServiceDelegate svcDelgate,
+                           EndpointDescription epDesc,
+                           EndpointReference epr,
+                           String addressingNamespace,
+                           WebServiceFeature... features) {
+        super(svcDelgate, epDesc, epr, addressingNamespace, features);
 
         InvocationControllerFactory icf = (InvocationControllerFactory) FactoryRegistry.getFactory(InvocationControllerFactory.class);
         ic = icf.getInvocationController();
@@ -134,7 +135,8 @@
              */
 
             // be sure to use whatever handlerresolver is registered on the Service
-            invocationContext.setHandlers(getBinding().getHandlerChain());
+            Binding binding = (Binding) getBinding();
+            invocationContext.setHandlers(binding.getHandlerChain());
 
             Message requestMsg = createRequestMessage(obj);
            
@@ -147,6 +149,9 @@
                     Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
                     getRequestContext(), requestMsgCtx);
 
+            // Perform the WebServiceFeature configuration requested by the user.
+            binding.configure(requestMsgCtx, this);
+
             // Send the request using the InvocationController
             ic.invoke(invocationContext);
 
@@ -201,7 +206,22 @@
             MessageContext requestMsgCtx = new MessageContext();
             requestMsgCtx.setEndpointDescription(getEndpointDescription());
             invocationContext.setRequestMessageContext(requestMsgCtx);
+            
+            /*
+             * TODO: review: make sure the handlers are set on the InvocationContext
+             * This implementation of the JAXWS runtime does not use Endpoint, which
+             * would normally be the place to initialize and store the handler list.
+             * In lieu of that, we will have to intialize and store them on the 
+             * InvocationContext.  also see the InvocationContextFactory.  On the client
+             * side, the binding is not yet set when we call into that factory, so the
+             * handler list doesn't get set on the InvocationContext object there.  Thus
+             * we gotta do it here.
+             */
 
+            // be sure to use whatever handlerresolver is registered on the Service
+            Binding binding = (Binding) getBinding();
+            invocationContext.setHandlers(binding.getHandlerChain());
+
             Message requestMsg = createRequestMessage(obj);
 
             setupMessageProperties(requestMsg);
@@ -213,6 +233,9 @@
                     Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
                     getRequestContext(), requestMsgCtx);
 
+            // Perform the WebServiceFeature configuration requested by the user.
+            binding.configure(requestMsgCtx, this);
+
             // Send the request using the InvocationController
             ic.invokeOneWay(invocationContext);
 
@@ -250,7 +273,22 @@
             MessageContext requestMsgCtx = new MessageContext();
             requestMsgCtx.setEndpointDescription(getEndpointDescription());
             invocationContext.setRequestMessageContext(requestMsgCtx);
+            
+            /*
+             * TODO: review: make sure the handlers are set on the InvocationContext
+             * This implementation of the JAXWS runtime does not use Endpoint, which
+             * would normally be the place to initialize and store the handler list.
+             * In lieu of that, we will have to intialize and store them on the 
+             * InvocationContext.  also see the InvocationContextFactory.  On the client
+             * side, the binding is not yet set when we call into that factory, so the
+             * handler list doesn't get set on the InvocationContext object there.  Thus
+             * we gotta do it here.
+             */
 
+            // be sure to use whatever handlerresolver is registered on the Service
+            Binding binding = (Binding) getBinding();
+            invocationContext.setHandlers(binding.getHandlerChain());
+
             Message requestMsg = createRequestMessage(obj);
 
             setupMessageProperties(requestMsg);
@@ -262,6 +300,9 @@
                     Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
                     getRequestContext(), requestMsgCtx);
 
+            // Perform the WebServiceFeature configuration requested by the user.
+            binding.configure(requestMsgCtx, this);
+
             // Setup the Executor that will be used to drive async responses back to 
             // the client.
             // FIXME: We shouldn't be getting this from the ServiceDelegate, rather each 
@@ -310,7 +351,22 @@
             MessageContext requestMsgCtx = new MessageContext();
             requestMsgCtx.setEndpointDescription(getEndpointDescription());
             invocationContext.setRequestMessageContext(requestMsgCtx);
+            
+            /*
+             * TODO: review: make sure the handlers are set on the InvocationContext
+             * This implementation of the JAXWS runtime does not use Endpoint, which
+             * would normally be the place to initialize and store the handler list.
+             * In lieu of that, we will have to intialize and store them on the 
+             * InvocationContext.  also see the InvocationContextFactory.  On the client
+             * side, the binding is not yet set when we call into that factory, so the
+             * handler list doesn't get set on the InvocationContext object there.  Thus
+             * we gotta do it here.
+             */
 
+            // be sure to use whatever handlerresolver is registered on the Service
+            Binding binding = (Binding) getBinding();
+            invocationContext.setHandlers(binding.getHandlerChain());
+
             Message requestMsg = createRequestMessage(obj);
 
             setupMessageProperties(requestMsg);
@@ -322,6 +378,9 @@
                     Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
                     getRequestContext(), requestMsgCtx);
 
+            // Perform the WebServiceFeature configuration requested by the user.
+            binding.configure(requestMsgCtx, this);
+
             // Setup the Executor that will be used to drive async responses back to 
             // the client.
             // FIXME: We shouldn't be getting this from the ServiceDelegate, rather each 
@@ -408,21 +467,12 @@
     private void setupMessageProperties(Message msg) {
         // If the user has enabled MTOM on the SOAPBinding, we need
         // to make sure that gets pushed to the Message object.
-        Binding binding = getBinding();
+        Binding binding = (Binding) getBinding();
         if (binding != null && binding instanceof SOAPBinding) {
             SOAPBinding soapBinding = (SOAPBinding)binding;
             if (soapBinding.isMTOMEnabled())
                 msg.setMTOMEnabled(true);
         }
-
-        // Check if the user enabled MTOM using the SOAP binding 
-        // properties for MTOM
-        String bindingID = endpointDesc.getClientBindingID();
-        if ((bindingID.equalsIgnoreCase(SOAPBinding.SOAP11HTTP_MTOM_BINDING) ||
-                bindingID.equalsIgnoreCase(SOAPBinding.SOAP12HTTP_MTOM_BINDING)) &&
-                !msg.isMTOMEnabled()) {
-            msg.setMTOMEnabled(true);
-        }
     }
 
     /*
Index: src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java
===================================================================
--- src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(.../trunk/java/modules/jaxws)	(revision 614841)
+++ src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -18,7 +18,7 @@
  */
 package org.apache.axis2.jaxws.client.proxy;
 
-import javax.xml.ws.handler.HandlerResolver;
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.jaxws.BindingProvider;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.client.async.AsyncResponse;
@@ -33,6 +33,7 @@
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.marshaller.factory.MethodMarshallerFactory;
 import org.apache.axis2.jaxws.message.Message;
+import org.apache.axis2.jaxws.spi.Binding;
 import org.apache.axis2.jaxws.spi.Constants;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 import org.apache.axis2.jaxws.spi.migrator.ApplicationContextMigratorUtil;
@@ -40,9 +41,10 @@
 import org.apache.commons.logging.LogFactory;
 
 import javax.xml.ws.AsyncHandler;
-import javax.xml.ws.Binding;
 import javax.xml.ws.Response;
+import javax.xml.ws.WebServiceFeature;
 import javax.xml.ws.soap.SOAPBinding;
+
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -84,9 +86,21 @@
 
     private Method method = null;
 
-    public JAXWSProxyHandler(ServiceDelegate delegate, Class seiClazz, EndpointDescription epDesc) {
-        super(delegate, epDesc);
+    public JAXWSProxyHandler(ServiceDelegate delegate,
+                             Class seiClazz,
+                             EndpointDescription epDesc,
+                             WebServiceFeature... features) {
+        this(delegate, seiClazz, epDesc, null, null, features);
+    }
 
+    public JAXWSProxyHandler(ServiceDelegate delegate,
+            Class seiClazz,
+            EndpointDescription epDesc,
+            EndpointReference epr,
+            String addressingNamespace,
+            WebServiceFeature... features) {
+        super(delegate, epDesc, epr, addressingNamespace, features);
+        
         this.seiClazz = seiClazz;
         this.serviceDesc = delegate.getServiceDescription();
     }
@@ -161,7 +175,7 @@
         request.setOperationDescription(operationDesc);
 
         // Enable MTOM on the Message if the property was set on the SOAPBinding.
-        Binding bnd = getBinding();
+        Binding bnd = (Binding) getBinding();
         if (bnd != null && bnd instanceof SOAPBinding) {
             if (((SOAPBinding)bnd).isMTOMEnabled()) {
                 Message requestMsg = request.getMessage();
@@ -185,10 +199,6 @@
 
         requestIC.setRequestMessageContext(request);
         requestIC.setServiceClient(serviceDelegate.getServiceClient(endpointDesc.getPortQName()));
-
-        // TODO: Change this to some form of factory so that we can change the IC to
-        // a more simple one for marshaller/unmarshaller testing.
-        InvocationController controller = new AxisInvocationController();
         
         // Migrate the properties from the client request context bag to
         // the request MessageContext.
@@ -196,6 +206,13 @@
                 Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID, 
                 getRequestContext(), request);
 
+        // Perform the WebServiceFeature configuration requested by the user.
+        bnd.configure(request, this);
+
+        // TODO: Change this to some form of factory so that we can change the IC to
+        // a more simple one for marshaller/unmarshaller testing.
+        InvocationController controller = new AxisInvocationController();
+        
         // Check if the call is OneWay, Async or Sync
         if (operationDesc.isOneWay()) {
             if (log.isDebugEnabled()) {
@@ -287,7 +304,7 @@
 
         return null;
     }
-
+    
     private AsyncResponse createProxyListener(Object[] args, OperationDescription operationDesc) {
         ProxyAsyncListener listener = new ProxyAsyncListener(operationDesc);
         listener.setHandler(this);
@@ -328,9 +345,6 @@
         MessageContext request = new MessageContext();
         request.setMessage(message);
 
-        // TODO: What happens here might be affected by the property migration plugpoint.  
-        request.setProperties(getRequestContext());
-
         if (log.isDebugEnabled()) {
             log.debug("Request MessageContext created successfully.");
         }
Index: src/org/apache/axis2/jaxws/client/config/MTOMConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/client/config/MTOMConfigurator.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/client/config/MTOMConfigurator.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.client.config;
+
+import java.io.InputStream;
+import java.util.List;
+
+import javax.activation.DataHandler;
+import javax.activation.DataSource;
+import javax.xml.ws.soap.MTOMFeature;
+
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.feature.ClientConfigurator;
+import org.apache.axis2.jaxws.message.Message;
+import org.apache.axis2.jaxws.spi.Binding;
+import org.apache.axis2.jaxws.spi.BindingProvider;
+
+/**
+ *
+ */
+public class MTOMConfigurator implements ClientConfigurator {
+
+    /*
+     *  (non-Javadoc)
+     * @see org.apache.axis2.jaxws.feature.util.WebServiceFeatureConfigurator#performConfiguration(org.apache.axis2.jaxws.core.MessageContext, org.apache.axis2.jaxws.spi.BindingProvider)
+     */
+    public void configure(MessageContext messageContext, BindingProvider provider) {
+        Binding bnd = (Binding) provider.getBinding();
+        MTOMFeature mtomFeature = (MTOMFeature) bnd.getWebServiceFeature(MTOMFeature.ID);
+        Message requestMsg = messageContext.getMessage();
+        
+        //Disable MTOM.
+        requestMsg.setMTOMEnabled(false);
+                
+//      TODO NLS enable.
+        if (mtomFeature == null)
+            throw ExceptionFactory.makeWebServiceException("The MTOM features was unspecified.");
+
+        //Enable MTOM if specified.
+        if (mtomFeature.isEnabled()) {
+            int threshold = mtomFeature.getThreshold();
+            List<String> attachmentIDs = requestMsg.getAttachmentIDs();
+            
+            if (attachmentIDs != null) {
+            	long size = 0L;
+            	
+        		for (String attachmentID : attachmentIDs) {
+        			DataHandler dh = requestMsg.getDataHandler(attachmentID);
+        			
+        			if (dh != null) {
+        				DataSource ds = dh.getDataSource();
+                    	InputStream is = null;
+                    	
+        				try {
+        					is = ds.getInputStream();
+        					size += is.available();
+        				}
+                    	catch (Exception e) {
+//                    		TODO NLS enable.
+                    		throw ExceptionFactory.makeWebServiceException("Unable to determine the size of the attachment(s).", e);
+                    	}
+                    	finally {
+                    		try {
+                    			if (is != null)
+                    				is.close();
+                    		}
+                    		catch (Exception e) {
+                    			//Nothing to do.
+                    		}
+                    	}
+        			}
+        		}
+            	
+            	if (size > threshold)
+                    requestMsg.setMTOMEnabled(true);
+            }
+        }
+        else {
+        	
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/client/config/RespectBindingConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/client/config/RespectBindingConfigurator.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/client/config/RespectBindingConfigurator.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.client.config;
+
+import javax.xml.ws.RespectBindingFeature;
+
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.feature.ClientConfigurator;
+import org.apache.axis2.jaxws.spi.Binding;
+import org.apache.axis2.jaxws.spi.BindingProvider;
+
+/**
+ *
+ */
+public class RespectBindingConfigurator implements ClientConfigurator {
+
+    /*
+     *  (non-Javadoc)
+     * @see org.apache.axis2.jaxws.feature.util.WebServiceFeatureConfigurator#performConfiguration(org.apache.axis2.jaxws.core.MessageContext, org.apache.axis2.jaxws.spi.BindingProvider)
+     */
+    public void configure(MessageContext messageContext, BindingProvider provider) {
+        Binding bnd = (Binding) provider.getBinding();
+        RespectBindingFeature respectBindingFeature =
+            (RespectBindingFeature) bnd.getWebServiceFeature(RespectBindingFeature.ID);
+        
+        if (respectBindingFeature == null)
+            throw ExceptionFactory.makeWebServiceException("The respect binding features was unspecified.");
+        
+        if (respectBindingFeature.isEnabled()) {
+            //TODO Implementation required.
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/client/config/AddressingConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/client/config/AddressingConfigurator.java	(.../trunk/java/modules/jaxws)	(revision 0)
+++ src/org/apache/axis2/jaxws/client/config/AddressingConfigurator.java	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,165 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.client.config;
+
+import javax.xml.ws.soap.AddressingFeature;
+
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.AddressingConstants.Final;
+import org.apache.axis2.addressing.AddressingConstants.Submission;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.SubmissionAddressingFeature;
+import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.feature.ClientConfigurator;
+import org.apache.axis2.jaxws.spi.Binding;
+import org.apache.axis2.jaxws.spi.BindingProvider;
+
+/**
+ *
+ */
+public class AddressingConfigurator implements ClientConfigurator {
+
+    /*
+     *  (non-Javadoc)
+     * @see org.apache.axis2.jaxws.feature.WebServiceFeatureConfigurator#configure(org.apache.axis2.jaxws.core.MessageContext, org.apache.axis2.jaxws.spi.BindingProvider)
+     */
+    public void configure(MessageContext messageContext, BindingProvider provider) {
+        Binding bnd = (Binding) provider.getBinding();
+        AddressingFeature addressingFeature =
+            (AddressingFeature) bnd.getWebServiceFeature(AddressingFeature.ID);
+        SubmissionAddressingFeature submissionAddressingFeature =
+            (SubmissionAddressingFeature) bnd.getWebServiceFeature(SubmissionAddressingFeature.ID);
+        String specifiedAddressingNamespace = provider.getAddressingNamespace();
+        String enabledAddressingNamespace =
+            (String) messageContext.getProperty(AddressingConstants.WS_ADDRESSING_VERSION);
+        Boolean disableAddressing =
+            (Boolean) messageContext.getProperty(AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES);
+        
+        //Figure out which WS-Addressing feature was specified causing this configurator to run. 
+        if (addressingFeature != null && submissionAddressingFeature != null) {
+            //Both features must have been specified.
+            boolean w3cAddressingEnabled = addressingFeature.isEnabled();
+            boolean submissionAddressingEnabled = submissionAddressingFeature.isEnabled();
+            
+            if (w3cAddressingEnabled && submissionAddressingEnabled) {
+                //If WS-Addressing has already been enabled then stop,
+                //as this configurator has probably already run once.
+                if (!disableAddressing)
+                    return;
+                
+                //If an EPR hasn't been specified then default to 2005/08 addressing,
+                //else use the namespace of the EPR.
+                if (specifiedAddressingNamespace == null)
+                    specifiedAddressingNamespace = Final.WSA_NAMESPACE;
+                
+                disableAddressing = Boolean.FALSE;
+            }
+            else if (w3cAddressingEnabled) {
+                //Enable only 2005/08 addressing
+                if (Submission.WSA_NAMESPACE.equals(specifiedAddressingNamespace))
+                    throw ExceptionFactory.makeWebServiceException("Illegal configuration.");
+                else
+                    specifiedAddressingNamespace = Final.WSA_NAMESPACE;
+                
+                disableAddressing = Boolean.FALSE;
+            }
+            else if (submissionAddressingEnabled) {
+                //Enable only 2004/08 addressing
+                if (Final.WSA_NAMESPACE.equals(specifiedAddressingNamespace))
+                    throw ExceptionFactory.makeWebServiceException("Illegal configuration.");
+                else
+                    specifiedAddressingNamespace = Submission.WSA_NAMESPACE;
+                
+                disableAddressing = Boolean.FALSE;
+            }
+            else {
+                //Disable 2005/08 and 2004/08 addressing
+                disableAddressing = Boolean.TRUE;
+            }                
+        }
+        else if (addressingFeature != null) {
+            //The AddressingFeature must have been specified.
+            boolean w3cAddressingEnabled = addressingFeature.isEnabled();
+
+            if (w3cAddressingEnabled) {
+                //Enable 2005/08 addressing
+                if (Submission.WSA_NAMESPACE.equals(specifiedAddressingNamespace))
+                    throw ExceptionFactory.makeWebServiceException("Illegal configuration.");
+                else
+                    specifiedAddressingNamespace = Final.WSA_NAMESPACE;
+                
+                disableAddressing = Boolean.FALSE;
+            }
+            else {
+                //Disable 2005/08 addressing
+                if (enabledAddressingNamespace == null ||
+                        Final.WSA_NAMESPACE.equals(enabledAddressingNamespace))
+                    disableAddressing = Boolean.TRUE;
+            }                
+        }
+        else if (submissionAddressingFeature != null) {
+            //The SubmissionAddressingFeature must have been specified.
+            boolean submissionAddressingEnabled = submissionAddressingFeature.isEnabled();
+            
+            if (submissionAddressingEnabled) {
+                //Enable 2004/08 addressing
+                if (Final.WSA_NAMESPACE.equals(specifiedAddressingNamespace))
+                    throw ExceptionFactory.makeWebServiceException("Illegal configuration.");
+                else
+                    specifiedAddressingNamespace = Submission.WSA_NAMESPACE;
+                
+                disableAddressing = Boolean.FALSE;
+            }
+            else {
+                //Disable 2004/08 addressing
+                if (enabledAddressingNamespace == null ||
+                        Submission.WSA_NAMESPACE.equals(enabledAddressingNamespace))
+                    disableAddressing = Boolean.TRUE;
+            }                
+        }
+        else {
+            //If neither were specified then this configurator should never run.
+            throw ExceptionFactory.makeWebServiceException("Both WS-Addressing features were unspecified.");
+        }
+        
+        if (!disableAddressing) {
+            try {
+                EndpointReference epr = provider.getAxis2EndpointReference(specifiedAddressingNamespace);
+                org.apache.axis2.context.MessageContext axis2MessageContext = messageContext.getAxisMessageContext();
+                axis2MessageContext.setTo(epr);
+                
+                ServiceDescription sd = messageContext.getEndpointDescription().getServiceDescription();
+                AxisConfiguration axisConfig = sd.getAxisConfigContext().getAxisConfiguration();
+                if (!axisConfig.isEngaged(Constants.MODULE_ADDRESSING))
+                    axisConfig.engageModule(Constants.MODULE_ADDRESSING);
+            }
+            catch (Exception e) {
+                //TODO NLS enable.
+                throw ExceptionFactory.makeWebServiceException("Unable to engage the addressing module.", e);
+            }
+        }
+
+        messageContext.setProperty(AddressingConstants.WS_ADDRESSING_VERSION, specifiedAddressingNamespace);                        
+        messageContext.setProperty(AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, disableAddressing);
+    }
+}
Index: test-resources/xml/referenceparameters.xml
===================================================================
--- test-resources/xml/referenceparameters.xml	(.../trunk/java/modules/jaxws)	(revision 0)
+++ test-resources/xml/referenceparameters.xml	(.../branches/java/jaxws21/modules/jaxws)	(revision 614876)
@@ -0,0 +1,53 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xmlns:wsa="http://www.w3.org/2005/08/addressing">
+    <soapenv:Header xmlns:fabrikam="http://example.com/fabrikam" xmlns:axis2="http://ws.apache.org/namespaces/axis2">
+        <wsa:MessageID axis2:AttrExt="123456789" soapenv:mustUnderstand="0">
+            uuid:920C5190-0B8F-11D9-8CED-F22EDEEBF7E5</wsa:MessageID>
+        <wsa:To axis2:AttrExt="123456789" soapenv:mustUnderstand="0">http://localhost:8081/axis/services/BankPort</wsa:To>
+        <axis2:ParamOne wsa:IsReferenceParameter='true'>0123456789</axis2:ParamOne>
+        <axis2:ParamTwo wsa:IsReferenceParameter='true'>ABCDEFG</axis2:ParamTwo>
+        <axis2:ParamThree wsa:IsReferenceParameter='true'>abcdefg</axis2:ParamThree>
+        <wsa:Action axis2:AttrExt="123456789">http://ws.apache.org/tests/action</wsa:Action>
+        <wsa:ReplyTo axis2:AttrExt="123456789">
+            <wsa:Address>http://example.com/fabrikam/acct</wsa:Address>
+            <wsa:ReferenceParameters>
+                <fabrikam:CustomerKey>123456789</fabrikam:CustomerKey>
+                <fabrikam:ShoppingCart>ABCDEFG</fabrikam:ShoppingCart>
+            </wsa:ReferenceParameters>
+            <wsa:Metadata>
+                <axis2:MetaExt axis2:AttrExt="123456789">123456789</axis2:MetaExt>
+            </wsa:Metadata>
+            <axis2:EPRExt axis2:AttrExt="123456789">123456789</axis2:EPRExt>
+        </wsa:ReplyTo>
+    </soapenv:Header>
+    <soapenv:Body>
+        <ns1:getBalance soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
+                xmlns:ns1="http://localhost:8081/axis/services/BankPort">
+            <accountNo href="#id0"/>
+        </ns1:getBalance>
+        <multiRef id="id0" soapenc:root="0"
+                soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
+                xsi:type="xsd:int" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">
+            1001</multiRef>
+    </soapenv:Body>
+</soapenv:Envelope>
\ No newline at end of file
