Index: C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/server/EchoStringResponse.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/server/EchoStringResponse.java	(revision 426662)
+++ C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/server/EchoStringResponse.java	(working copy)
@@ -68,7 +68,8 @@
         /**
          * static method to create the object
          */
-        public static EchoStringResponse parse(
+        
+    	public static EchoStringResponse parse(
                 javax.xml.stream.XMLStreamReader reader)
                 throws java.lang.Exception {
             EchoStringResponse object = new EchoStringResponse();
@@ -94,7 +95,7 @@
                         .setEchoStringReturn(stateMachine1.getText() == null ? null
                                 : org.apache.axis2.databinding.utils.ConverterUtil
                                         .convertToString(stateMachine1
-                                                .getText()));
+                                                .getText().getBytes()));
 
             } catch (javax.xml.stream.XMLStreamException e) {
                 throw new java.lang.Exception(e);
@@ -102,6 +103,7 @@
 
             return object;
         }
+        
     }//end of factory class
 
 }
Index: C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/proxy/ProxyTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/proxy/ProxyTests.java	(revision 426662)
+++ C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/proxy/ProxyTests.java	(working copy)
@@ -19,6 +19,7 @@
 import java.io.File;
 import java.io.StringWriter;
 import java.net.URL;
+import java.util.concurrent.Future;
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.Marshaller;
@@ -26,7 +27,9 @@
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLOutputFactory;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.ws.AsyncHandler;
 import javax.xml.ws.BindingProvider;
+import javax.xml.ws.Response;
 import javax.xml.ws.Service;
 
 import junit.framework.TestCase;
@@ -38,7 +41,7 @@
 public class ProxyTests extends TestCase {
 	private QName serviceName = new QName(
 			"http://org.apache.axis2.proxy.doclitwrapped", "ProxyDocLitWrappedService");
-	private String wasEndpoint = "http://localhost:9081/axis2/services/ProxyDocLitWrappedService";
+	private String wasEndpoint = "http://localhost:7777/axis2/services/ProxyDocLitWrappedService";
 	private String axisEndpoint = "http://localhost:8080/axis2/services/ProxyDocLitWrappedService";
 	private QName portName = new QName("http://org.apache.axis2.proxy.doclitwrapped",
 			"ProxyDocLitWrappedPort");
@@ -55,16 +58,14 @@
 			File wsdl= new File(wsdlLocation); 
 			URL wsdlUrl = wsdl.toURL(); 
 			Service service = Service.create(null, serviceName);
-			//StockSymbol ss = new StockSymbol(); 
 			String request = new String("some string request"); 
-			//ss.setSymbol("IBM"); 
 			Object proxy =service.getPort(portName, DocLitWrappedProxy.class);
 			System.out.println(">>Invoking Binding Provider property");
 			BindingProvider p =	(BindingProvider)proxy;
 				p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);
 				
 			DocLitWrappedProxy dwp = (DocLitWrappedProxy)proxy;
-			System.out.println(">> Invoking Proxy");
+			System.out.println(">> Invoking Proxy Synchronously");
 			String response = dwp.invoke(request);
 			System.out.println("Proxy Response =" + response);
 			System.out.println("---------------------------------------");
@@ -73,6 +74,31 @@
 		}
 	}
 	
+	public void testInvokeAsyncCallback(){
+		try{ 
+			if(!runningOnAxis){
+				return;
+			}
+			System.out.println("---------------------------------------");
+			
+			File wsdl= new File(wsdlLocation); 
+			URL wsdlUrl = wsdl.toURL(); 
+			Service service = Service.create(null, serviceName);
+			String request = new String("some string request"); 
+			Object proxy =service.getPort(portName, DocLitWrappedProxy.class);
+			System.out.println(">>Invoking Binding Provider property");
+			BindingProvider p =	(BindingProvider)proxy;
+				p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);
+				
+			DocLitWrappedProxy dwp = (DocLitWrappedProxy)proxy;
+			System.out.println(">> Invoking Proxy Asynchronous Callback");
+			AsyncHandler handler = new AsyncCallback();
+			Future<?> response = dwp.invokeAsync(request, handler);
+			System.out.println("---------------------------------------");
+		}catch(Exception e){ 
+			e.printStackTrace(); 
+		}
+	}
 	public void testTwoWay(){
 		try{ 
 			if(runningOnAxis){
@@ -81,9 +107,8 @@
 			File wsdl= new File(wsdlLocation); 
 			URL wsdlUrl = wsdl.toURL(); 
 			Service service = Service.create(null, serviceName);
-			//StockSymbol ss = new StockSymbol(); 
 			String request = new String("some string request"); 
-			//ss.setSymbol("IBM"); 
+			
 			Object proxy =service.getPort(portName, DocLitWrappedProxy.class); 
 			BindingProvider p =	(BindingProvider)proxy;
 				p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,wasEndpoint);
@@ -104,7 +129,31 @@
 		
 	}
 	
-	public void testAsyncCallback(){
+	public void testTwoWayAsyncCallback(){
+		try{ 
+			if(runningOnAxis){
+				return;
+			}
+			File wsdl= new File(wsdlLocation); 
+			URL wsdlUrl = wsdl.toURL(); 
+			Service service = Service.create(null, serviceName);
+			
+			String request = new String("some string request"); 
+			
+			Object proxy =service.getPort(portName, DocLitWrappedProxy.class); 
+			BindingProvider p =	(BindingProvider)proxy;
+				p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,wasEndpoint);
+				
+			DocLitWrappedProxy dwp = (DocLitWrappedProxy)proxy;
+			AsyncHandler handler = new AsyncCallback();
+			Future<?> response = dwp.twoWayAsync(request, handler);
+			
+		}catch(Exception e){ 
+			e.printStackTrace(); 
+		}
+	}
+	
+	public void testAsyncPooling(){
 		
 	}
 }
Index: C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/proxy/AsyncCallback.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/proxy/AsyncCallback.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/proxy/AsyncCallback.java	(revision 0)
@@ -0,0 +1,50 @@
+/**
+ * 
+ */
+package org.apache.axis2.proxy;
+
+import java.util.concurrent.ExecutionException;
+
+import javax.xml.ws.AsyncHandler;
+import javax.xml.ws.Response;
+
+import org.test.proxy.doclitwrapped.ReturnType;
+
+
+
+/**
+ * @author nvthaker
+ *
+ */
+public class AsyncCallback implements AsyncHandler {
+
+	/**
+	 * 
+	 */
+	public AsyncCallback() {
+		super();
+		// TODO Auto-generated constructor stub
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.xml.ws.AsyncHandler#handleResponse(javax.xml.ws.Response)
+	 */
+	public void handleResponse(Response response) {
+		try{
+			Object obj = response.get();
+			if(obj instanceof ReturnType){
+				ReturnType type = (ReturnType)obj;
+				System.out.println(">>Return String = "+type.getReturnStr());
+			}
+			else{
+				System.out.println("Response.get should have been ReturnType" );
+			}
+		}catch(ExecutionException e){
+			e.printStackTrace();
+		}catch(InterruptedException e){
+			e.printStackTrace();
+		}
+
+	}
+
+}
Index: C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/DocLitWrappedProxy.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/DocLitWrappedProxy.java	(revision 426662)
+++ C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/DocLitWrappedProxy.java	(working copy)
@@ -1,17 +1,24 @@
 
 package org.apache.axis2.jaxws.proxy.doclitwrapped.sei;
 
+import java.util.concurrent.Future;
+
 import javax.jws.Oneway;
 import javax.jws.WebMethod;
 import javax.jws.WebParam;
-import javax.jws.WebParam.Mode;
 import javax.jws.WebResult;
 import javax.jws.WebService;
+import javax.jws.WebParam.Mode;
+import javax.xml.ws.AsyncHandler;
 import javax.xml.ws.Holder;
 import javax.xml.ws.RequestWrapper;
+import javax.xml.ws.Response;
 import javax.xml.ws.ResponseWrapper;
 
+import org.test.proxy.doclitwrapped.FinOpResponse;
 import org.test.proxy.doclitwrapped.FinancialOperation;
+import org.test.proxy.doclitwrapped.ReturnType;
+import org.test.proxy.doclitwrapped.TwoWayHolder;
 
 
 /**
@@ -38,7 +45,7 @@
      */
     @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
     @Oneway
-    @RequestWrapper(localName = "oneWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.OneWay")
+    @RequestWrapper(localName = "oneWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.sei.OneWay")
     public void oneWay(
         @WebParam(name = "oneway_str", targetNamespace = "")
         String onewayStr);
@@ -47,7 +54,42 @@
      * 
      * @param twoWayHolderInt
      * @param twoWayHolderStr
+     * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.TwoWayHolder>
      */
+    @WebMethod(operationName = "twoWayHolder", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    public Response<TwoWayHolder> twoWayHolderAsync(
+        @WebParam(name = "twoWayHolder_str", targetNamespace = "")
+        String twoWayHolderStr,
+        @WebParam(name = "twoWayHolder_int", targetNamespace = "")
+        int twoWayHolderInt);
+
+    /**
+     * 
+     * @param twoWayHolderInt
+     * @param asyncHandler
+     * @param twoWayHolderStr
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "twoWayHolder", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    public Future<?> twoWayHolderAsync(
+        @WebParam(name = "twoWayHolder_str", targetNamespace = "")
+        String twoWayHolderStr,
+        @WebParam(name = "twoWayHolder_int", targetNamespace = "")
+        int twoWayHolderInt,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<TwoWayHolder> asyncHandler);
+
+    /**
+     * 
+     * @param twoWayHolderInt
+     * @param twoWayHolderStr
+     */
     @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
     @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
     @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
@@ -61,6 +103,35 @@
      * 
      * @param twowayStr
      * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.ReturnType>
+     */
+    @WebMethod(operationName = "twoWay", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.sei.ReturnType")
+    public Response<ReturnType> twoWayAsync(
+        @WebParam(name = "twoway_str", targetNamespace = "")
+        String twowayStr);
+
+    /**
+     * 
+     * @param twowayStr
+     * @param asyncHandler
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "twoWay", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public Future<?> twoWayAsync(
+        @WebParam(name = "twoway_str", targetNamespace = "")
+        String twowayStr,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<ReturnType> asyncHandler);
+
+    /**
+     * 
+     * @param twowayStr
+     * @return
      *     returns java.lang.String
      */
     @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
@@ -71,10 +142,40 @@
         @WebParam(name = "twoway_str", targetNamespace = "")
         String twowayStr);
 
+
     /**
      * 
      * @param invokeStr
      * @return
+     *     returns javax.xml.ws.Response<org.apache.axis2.jaxws.proxy.doclitwrapped.sei.ReturnType>
+     */
+    @WebMethod(operationName = "invoke", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public Response<ReturnType> invokeAsync(
+        @WebParam(name = "invoke_str", targetNamespace = "")
+        String invokeStr);
+
+    /**
+     * 
+     * @param invokeStr
+     * @param asyncHandler
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "invoke", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    public Future<?> invokeAsync(
+        @WebParam(name = "invoke_str", targetNamespace = "")
+        String invokeStr,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<ReturnType> asyncHandler);
+
+    /**
+     * 
+     * @param invokeStr
+     * @return
      *     returns java.lang.String
      */
     @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
@@ -89,8 +190,37 @@
      * 
      * @param op
      * @return
-     *     returns org.test.proxy.doclitwrapped.FinancialOperation
+     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.FinOpResponse>
      */
+    @WebMethod(operationName = "finOp", action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    public Response<FinOpResponse> finOpAsync(
+        @WebParam(name = "op", targetNamespace = "")
+        FinancialOperation op);
+
+    /**
+     * 
+     * @param op
+     * @param asyncHandler
+     * @return
+     *     returns java.util.concurrent.Future<? extends java.lang.Object>
+     */
+    @WebMethod(operationName = "finOp", action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    public Future<?> finOpAsync(
+        @WebParam(name = "op", targetNamespace = "")
+        FinancialOperation op,
+        @WebParam(name = "asyncHandler", targetNamespace = "")
+        AsyncHandler<FinOpResponse> asyncHandler);
+
+    /**
+     * 
+     * @param op
+     * @return
+     *     returns org.apache.axis2.proxy.doclitwrapped.sei.FinancialOperation
+     */
     @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
     @WebResult(name = "response", targetNamespace = "")
     @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
Index: C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/ProxyDocLitWrappedService.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/ProxyDocLitWrappedService.java	(revision 426662)
+++ C:/WebServices/Eclipse/workspace/axis2_live/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/ProxyDocLitWrappedService.java	(working copy)
@@ -9,14 +9,13 @@
 import javax.xml.ws.WebServiceClient;
 
 
-
 /**
  * This class was generated by the JAXWS SI.
  * JAX-WS RI 2.0_01-b15-fcs
  * Generated source version: 2.0
  * 
  */
-@WebServiceClient(name = "ProxyDocLitWrappedService", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", wsdlLocation = "c:\\temp\\ProxyDocLitWrapped.wsdl")
+@WebServiceClient(name = "ProxyDocLitWrappedService", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", wsdlLocation = "ProxyDocLitWrapped.wsdl")
 public class ProxyDocLitWrappedService
     extends Service
 {
