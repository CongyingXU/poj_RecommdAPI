Index: axis2config.html
===================================================================
--- axis2config.html	(revision 503571)
+++ axis2config.html	(working copy)
@@ -1,448 +1,459 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
-<html>
-<head>
-  <meta http-equiv="content-type" content="">
-  <title>Axis2 Configuration Documents</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
-</head>
-<body lang="en">
-
-<h1>Axis2 Configuration Guide</h1>
-
-<p>In Axis2 there are three kinds of configuration files to configure the
-system. First one is to configure whole system (global configuration), second
-one is to configure a service (service configuration) and the third one is to
-configure a module (module configuration). This document will explain in
-detail the above configurations.</p>
-
-<h2>Content</h2>
-<ul>
-  <li><a href="#Global_Configuration">Global Configuration
-  (axis2.xml)</a></li>
-  <li><a href="#Service_Configuration">Service Configuration
-    (services.xml)</a></li>
-  <li><a href="#Module_Configuration">Module Configuration
-  (module.xml)</a></li>
-</ul>
-
-<a name="Global_Configuration"></a>
-<h2>Global Configuration</h2>
-<ul>
-  <li>Writing axis2.xml</li>
-</ul>
-
-<p>All the configurations that require starting Axis2 are obtained from the
-axis2.xml. The way of specifying them is extremely simple and easy. The document
-is all about the proper way of specifying the configurations in axis2.xml.
-There are six top level elements that can be seen in the configuration file
-and can be listed as follows:</p>
-<ul>
-  <li><a href="#Parameter">Parameter</a></li>
-  <li><a href="#Receiver">Transport Receiver</a></li>
-  <li><a href="#Sender">Transport Sender</a></li>
-  <li><a href="#Phase_Order">Phase Order</a></li>
-  <li><a href="#References">Module References</a></li>
-  <li><a href="#Listeners">Listeners (Observers)</a></li>
-</ul>
-<a name="Parameter"></a>
-<h3>Parameter</h3>
-
-<p>In Axis2 a parameter is nothing but name value pair. Each and every top
-level parameter available in the axis2.xml (direct sub elements of root
-element) will be transformed into properties in AxisConfiguration. Therefore,
-the top level parameters in the configuration document can be accessed via
-AxisConfiguration in the running system. The correct way of defining a
-parameter is shown below:</p>
-<source><pre> 
-  &lt;parameter name="name of the parameter" &gt;parameter value &lt;/parameter&gt;</pre>
-</source>
-<a name="Receiver"></a>
-
-<h3>Transport Receiver</h3>
-
-<p>Depending on the underlying transport that Axis2 is going to run on, you
-need to have different transport receivers. The way of adding them to the
-system is as follows:</p>
-<pre> 
-&lt;transportReceiver name="http" class="org.apache.axis2.transport.http.SimpleHTTPServer"&gt;
-        &lt;parameter name="port" &gt;6060&lt;/parameter&gt;
- &lt;/transportReceiver&gt; 
- </pre>
-</source>The above elements show the way of defining transport receivers in
-axis2.xml. Here the name attribute of the 'transportReceiver' element is the
-name of transport receiver. It can be http, tcp, smtp, commonshttp etc, and
-when the system starts up or when you set the transport at the client side,
-one can use these transport names to load the appropriate transport. Class
-attribute is to specify actual java classes which implements required
-interfaces for the transport. Any transport can have zero or more parameters,
-and if there are any, then those parameters can be accessed via the
-corresponding transport receiver. 
-
-<a name="Sender"></a>
-
-<h3>Transport Sender</h3>
-
-<p>As same as transport receivers, it is possible to register transport
-senders in the system, and later at the run time, those senders can be used
-to send the messages. As an example, consider Axis2 running under Apache
-Tomcat. Then Axis2 can use TCP transport senders to send messages rather than
-HTTP. The way of specifying transport senders is as follows:</p>
-<pre> 
-&lt;transportSender name="http" class="org.apache.axis2.transport.http.CommonsHTTPTransportSender"&gt;
-        &lt;parameter name="PROTOCOL" locked="xsd:false"&gt;HTTP/1.0&lt;/parameter&gt;
- &lt;/transportSender&gt; 
- </pre>
-<strong>name:</strong> Name of the transport (it is possible to have
-http and http1 as transport name)
-
-<p><strong>class:</strong> Implementation class of the corresponding
-transport. As same as transport receivers, transport senders can have zero or
-more parameters, and if there are any then it can be accessed via
-corresponding transport sender.</p>
-<a name="Phase_Order"></a>
-<h3>Phase Order</h3>
-
-<p>The specifying order of phases in execution chain has to be done using
-phase order element and it will look like below:</p>
-<pre>&lt;phaseOrder type="InFlow"&gt;
-         &lt;phase name="TransportIn"/&gt;
-         .
-         .
-&lt;/phaseOrder&gt;   </pre>
-
-<p>The most interesting thing is that you can add handlers here as well. If
-you want to add a handler which should go into that phase, you can directly
-do that by adding a handler element into it. In addition to that, there is no
-hard coding work for the handler chain anywhere in Axis2 (at any Axis*). So
-all those configurations are also done in the phase order element. The
-complete configurations will look as follows: <source></p>
-<pre>&lt;phaseOrder type="InFlow"&gt;
-        &lt;!--   Global phases    --&gt;
-         &lt;phase name="Transport"&gt;
-            &lt;handler name="RequestURIBasedDispatcher"
-                     class="org.apache.axis2.engine.RequestURIBasedDispatcher"&gt;
-                &lt;order phase="Transport"/&gt;
-            &lt;/handler&gt;
-
-            &lt;handler name="SOAPActionBasedDispatcher"
-                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher"&gt;
-                &lt;order phase="Transport"/&gt;
-            &lt;/handler&gt;
-        &lt;/phase&gt;
-        &lt;phase name="Security"/&gt;
-        &lt;phase name="PreDispatch"/&gt;
-        &lt;phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase"&gt;
-            &lt;handler name="AddressingBasedDispatcher"
-                     class="org.apache.axis2.engine.AddressingBasedDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-
-            &lt;handler name="SOAPMessageBodyBasedDispatcher"
-                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-
-            &lt;handler name="InstanceDispatcher"
-                     class="org.apache.axis2.engine.InstanceDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-        &lt;/phase&gt;
-        &lt;!--   Global phases   --&gt;
-        &lt;!--   After the Dispatch phase module author or service author can add any phase he wants    --&gt;
-        &lt;phase name="OperationInPhase"/&gt;
-    &lt;/phaseOrder&gt;
-    &lt;phaseOrder type="OutFlow"&gt;
-        &lt;!--   user can add his own phases to this area  --&gt;
-        &lt;phase name="OperationOutPhase"/&gt;
-        &lt;!--  Global phases  --&gt;
-        &lt;!--  these phases will run irrespective of the service  --&gt;
-        &lt;phase name="MessageOut"/&gt;
-        &lt;phase name="PolicyDetermination"/&gt;
-    &lt;/phaseOrder&gt;
-    &lt;phaseOrder type="InFaultFlow"&gt;
-        &lt;phase name="PreDispatch"/&gt;
-        &lt;phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase"&gt;
-            &lt;handler name="RequestURIBasedDispatcher"
-                     class="org.apache.axis2.engine.RequestURIBasedDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-
-            &lt;handler name="SOAPActionBasedDispatcher"
-                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-
-            &lt;handler name="AddressingBasedDispatcher"
-                     class="org.apache.axis2.engine.AddressingBasedDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-
-            &lt;handler name="SOAPMessageBodyBasedDispatcher"
-                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-            &lt;handler name="InstanceDispatcher"
-                     class="org.apache.axis2.engine.InstanceDispatcher"&gt;
-                &lt;order phase="Dispatch"/&gt;
-            &lt;/handler&gt;
-        &lt;/phase&gt;
-        &lt;!--      user can add his own phases to this area  --&gt;
-        &lt;phase name="OperationInFaultPhase"/&gt;
-    &lt;/phaseOrder&gt;
-    &lt;phaseOrder type="OutFaultFlow"&gt;
-        &lt;!--      user can add his own phases to this area  --&gt;
-        &lt;phase name="OperationOutFaultPhase"/&gt;
-        &lt;phase name="PolicyDetermination"/&gt;
-        &lt;phase name="MessageOut"/&gt;
-    &lt;/phaseOrder&gt;</pre>
-</source>
-<p><strong>type:</strong> the attribute represents the type of the flow and
-can only be one of the following:</p>
-<ul>
-  <li>InFlow</li>
-  <li>OutFlow</li>
-  <li>InFaultFlow</li>
-  <li>OutFaultFlow</li>
-</ul>
-
-<p>In addition to that, the only child element that is allowed inside "phaseOrder"
-is "phase" element which represents available phases in the execution chain.
-The way of specifying phases inside "phaseOrder" is as follows:</p>
-<pre> &lt;phase name="Transport"/&gt;</pre>
-</source>
-<p><strong>name:</strong> Name of the phase. <br>
-</p>
-
-<p>There are a number of things that one has to keep in mind when changing a
-phaseOrder:</p>
-
-<p>For the phaseOrder types <strong>"InFlow"</strong> and
-<strong>"InFaultFlow"</strong></p>
-<ul>
-  <li>All the phases which are above the "Dispatch" phase including the
-    "Dispatch" phase are known as "Global phases" and one can add any number
-    of new phases here and these will be considered global.</li>
-  <li>In these two phaseOrder types the phases added after the "Dispatch"
-    phase are known as "Operation phases".</li>
-</ul>
-
-<p>For the phaseOrder types <strong>"OutFlow"</strong> and
-<strong>"OutFaultFlow"</strong></p>
-<ul>
-  <li>All the phases which are below the "MessageOut" phase, including the
-    "MessageOut" phase are known as "Global phases", and you can add new
-    phases according to your requirement.</li>
-  <li>The phases added before the "MessageOut" phase are known as "Operation
-    phases".</li>
-
-  <p><strong>Note :</strong> If you closely look at the default axis2.xml you
-  will be able to clearly identify that.</p>
-</ul>
-<a name="References"></a>
-<h3>Module References</h3>
-
-<p>If you want to engage a module, system wide, you can do it by adding top
-level module element in axis2.xml. It should look like following:</p>
-<pre>&lt;module ref="addressing"/&gt;  </pre>
-</source>
-<p><strong>ref:</strong> the module name which is going to be engage, system
-wide.</p>
-<a name="Listeners"></a>
-<h3><strong>Listeners (Observers)</strong></h3>
-
-<p>In Axis2, AxisConfiguration is observable so that one can register
-observers into that, and they will be automatically informed whenever a
-change occurs in AxisConfiguration. In the current implementation, the
-observers are informed of the following events:</p>
-<ul>
-  <li>Deploying a Service</li>
-  <li>Removing a service</li>
-  <li>Activate/Inactivate Service</li>
-  <li>Module deploy</li>
-  <li>Module remove</li>
-</ul>
-<p>Registering Observers is very useful for additional features such as RSS feed
-generation which will provide service information to subscribers. The correct
-way of registering observers should be like below:</p>
-<pre>&lt;listener class="org.apache.axis2.ObserverIMPL"&gt;
-    &lt;parameter name="RSS_URL" &gt;http://127.0.0.1/rss&lt;/parameter&gt;
-  &lt;/listener&gt;</pre>
-</source>
-<p><strong>class:</strong> Represents an Implementation class of observer,
-and it should be noted that the Implementation class should implement
-AxisObserver interface, and the class has to be available in the classpath.
-<a name="Service_Configuration"></a>
-</p>
-<h2><font>Service Configuration</font></h2>
-<ul>
-  <li><font>Writing services.xml</font></li>
-</ul>
-
-<p><font>The description of services are specified using services.xml. Each
-service archive file needs to have a services.xml in order to be a valid
-service and it should be available in the META-INF directory of the archive
-file. A very simple services.xml is shown below:</font></p>
-<source><pre>&lt;service name="name of the service" scope="name of the scope" class="full qualifide name the service lifecycle class"   targetNamespace="target namespase for the service"&gt;
-    &lt;description&gt; The description of the service  &lt;/description&gt;  
-
-    &lt;transports&gt; 
-       &lt;transport&gt;HTTP&lt;/transport&gt;
-    &lt;/transports&gt;
-    
-    &lt;schema schemaNamespace="schema namespace"/&gt; 
-     
-    &lt;messageReceivers&gt;
-            &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
-                             class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;
-    &lt;/messageReceivers&gt;
-     
-     &lt;parameter name="ServiceClass" locked="xsd:false"&gt;org.apache.axis2.sample.echo.EchoImpl&lt;/parameter&gt;
-    
-    &lt;operation name="echoString" mep="operation MEP"&gt; 
-        &lt;actionMapping&gt;Mapping to action&lt;/actionMapping&gt;
-        &lt;module ref=" a module name "/&gt;
-        &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
-    &lt;/operation&gt;
-  &lt;/service&gt;</pre>
-</source>
-<p><strong>name</strong>: The service name will be the name of the
-archive file, if the .aar file contains only one service, or else the name of
-the service will be the name given by the name attribute.</p>
-
-<p><strong>scope</strong>: (Optional Attribute) The time period in which runtime information of
-deployed services will be available. Scope is of several types-
-"Application", "SOAPSession", "TransportSession", "Request". The default value (if you dont put any value) will be "Request"</p>
-
-<p><strong>class</strong>: (Optional attribute) To specify the full qualified name of the service lifecycle implementation class. ServiceLifeCycle class is usefull when you want to do some tasks when the system start and when it shutdowns.</p> 
-
-<p><strong>targetNamespace</strong>: (Optional Attribute) Target name space of the service, and
-this value will be used when generating the wsdl , if you do not specify this value , then the value will be calculated from the package name of the service impl class</p>
-
-<p><font><strong>description</strong>: This is an optional element if you
-want to display any description about the service via Axis2 web-admin module,
-then the description can be specified here.</font></p>
-
-<p><strong>transports</strong> : The transports that the service is going to
-be exposed to. This is an optional element. If the transport element is not
-present then the service will be exposed in all the transports available in
-the system. The transport child element is there to specify the transport
-prefix (the name of the transport specified in axis2.xml).</p>
-
-<p><b>parameters:</b> A services.xml can have any number of top level
-parameters and all the specified parameters will be transformed into service
-properties in the corresponding AxisService. There is a compulsory parameter
-in a services.xml called ServiceClass which specifies the java class which
-really does the job and the class will be loaded by the MessageReceiver.</p>
-
-<p><b>operations :</b> If the service impl class is java, then all the public
-methods in that service will be exposed and if the user wants to override it
-then he has to add the "operation" tag and override it. In the case of
-non-Java or if you do not have a service class, then all the operations the
-user wants to expose by the service has to be indicated in the services.xml
-and the correct way of specifying is as follows:</p>
-<pre>    &lt;operation name="echoString"&gt;
-        &lt;module ref=" a module name "/&gt;
-        &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
-    &lt;/operation&gt;</pre>
-</source>
-<p>The only compulsory attribute here is "name", which represents the
-operation name that is going to be exposed. Any operation can contain module
-references as well as any number of parameters. The most interesting thing is
-that one can register custom message receivers per operation, then the
-registered message receiver will be the message receiver for the
-corresponding operation. If one does not specify the message receiver, then
-the default message receiver will do the job. <br>
-<a name="Module_Configuration"></a></p>
-
-<h2>Module Configuration</h2>
-<ul>
-  <li>Writing module.xml</li>
-</ul>
-
-<p>The description of the module is specified using the module.xml. Each
-module archive file needs to have a module.xml in order to be a valid module,
-and it should be available in the META-INF directory of the archive file. <br>
-</p>
-
-<p>A very simple module.xml is shown below:</p>
-<pre>&lt;module class="org.apache.module.Module1Impl"&gt;
-    &lt;InFlow&gt;
-        .
-        .
-    &lt;/InFlow&gt;
-    &lt;OutFlow&gt;
-        .
-        .
-    &lt;/OutFlow&gt;
-
-    &lt;OutFaultFlow&gt;
-        .   
-        .
-    &lt;/OutFaultFlow&gt;
-
-    &lt;InFaultFlow&gt;
-        .         
-        .
-    &lt;/InFaultFlow&gt;
-
-    &lt;operation name="creatSeq" mep="MEP_URI_IN_OUT"&gt;
-        &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
-        &lt;parameter name="para1" locked="xsd:true"&gt;10&lt;/parameter&gt;
-    &lt;/operation&gt;
-&lt;/module&gt;</pre>
-</source>
-<p><strong>class:</strong> This is an optional attribute which indicates the
-module implementation class. A module may or may not contain a module
-implementation class since the module can also be a collection of handlers.
-If a module contains an implementation class which implements the
-org.apache.axis2.modules.Module interface where at the deployment time its
-<code>init();</code> method will be called.</p>
-
-<p><b>parameter:</b> A module can contain any number of parameters and all
-the listed parameters in the module.xml will be transformed into
-corresponding AxisModule of the module.</p>
-
-<p><b>flow: </b>Defining of handlers in a module has to be done inside flows,
-and there are four types of flows as listed below.</p>
-
-<p>It is possible to add any number of handlers into a flow and those
-handlers will be available in corresponding chains at the runtime when they
-are engaged .</p>
-<ul>
-  <li>InFlow</li>
-  <li>OutFlow</li>
-  <li>InFaultFlow</li>
-  <li>OutFaultFlow</li>
-</ul>
-
-<p><b>operations: </b> If a module wants to add an operation when it is
-engaged into a service it can be done by adding an operation tag in
-module.xml and the way of specifying the operation is the same as operation
-in services.xml.</p>
-
-<p><b>handler:</b> The Handler element consists of compulsory and optional
-attributes and the way of defining a handler will look as follows:</p>
-<pre>&lt;handler name="handler1" class="handlerClass "&gt;
-            &lt;order phase="userphase1" /&gt;
- &lt;/handler&gt;</pre>
-</source>
-<p><b><i>Compulsory Attributes</i></b> <br>
-<b>name:</b> name of the handler<br>
-<b>class:</b> handler implementation class<br>
-<b>phase:</b> name of the phase that the handler should stay in the execution
-chain <br>
-<br>
-<i><b>Optional Attributes :</b></i><br>
-<b>phaseLast:</b> to indicate the handler is last handler of the phase<br>
-<b>phaseFirst:</b> to indicate the handler is first handler of the phase.<br>
-<b>before :</b> the handler should be invoked before the handler specified by
-the before handler<br>
-<b>after:</b> the handler should be invoked after the handler specified by
-the after handler<br>
-</p>
-
-<p><br>
-</p>
-
-</body>
-</html>
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+<html>
+<head>
+  <meta http-equiv="content-type" content="">
+  <title>Axis2 Configuration Documents</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
+</head>
+
+<body lang="en">
+<h1>Axis2 Configuration Guide</h1>
+
+<p>In Axis2, there are three kinds of configuration files to configure the
+system. The first one is to configure the whole system (global
+configuration), the second one is to configure a service (service
+configuration), and the third one is to configure a module (module
+configuration). This document explains the above configurations in detail.</p>
+
+<h2>Content</h2>
+<ul>
+  <li><a href="#Global_Configuration">Global Configuration
+  (axis2.xml)</a></li>
+  <li><a href="#Service_Configuration">Service Configuration
+    (services.xml)</a></li>
+  <li><a href="#Module_Configuration">Module Configuration
+  (module.xml)</a></li>
+</ul>
+<a name="Global_Configuration"></a>
+
+<h2>Global Configuration</h2>
+<ul>
+  <li>Writing axis2.xml</li>
+</ul>
+
+<p>All the configurations that require starting Axis2 are obtained from
+axis2.xml. The way to specify them is extremely simple and easy. The document
+is all about the proper way of specifying the configurations in axis2.xml.
+There are six top level elements that can be seen in the configuration file
+and can be listed as follows:</p>
+<ul>
+  <li><a href="#Parameter">Parameter</a></li>
+  <li><a href="#Receiver">Transport Receiver</a></li>
+  <li><a href="#Sender">Transport Sender</a></li>
+  <li><a href="#Phase_Order">Phase Order</a></li>
+  <li><a href="#References">Module References</a></li>
+  <li><a href="#Listeners">Listeners (Observers)</a></li>
+</ul>
+<a name="Parameter"></a>
+
+<h3>Parameter</h3>
+
+<p>In Axis2, a parameter is nothing but a name value pair. Each and every top
+level parameter available in the axis2.xml (direct sub elements of the root
+element) will be transformed into properties in AxisConfiguration. Therefore,
+the top level parameters in the configuration document can be accessed via
+AxisConfiguration in the running system. The correct way of defining a
+parameter is shown below:</p>
+<source><pre> 
+  &lt;parameter name="name of the parameter" &gt;parameter value &lt;/parameter&gt;</pre>
+</source><a name="Receiver"></a>
+
+<h3>Transport Receiver</h3>
+
+<p>Depending on the underlying transport on which Axis2 is going to run, you
+need to have different transport receivers. The way you add them to the
+system is as follows:</p>
+<pre> 
+&lt;transportReceiver name="http" class="org.apache.axis2.transport.http.SimpleHTTPServer"&gt;
+        &lt;parameter name="port" &gt;6060&lt;/parameter&gt;
+ &lt;/transportReceiver&gt; 
+ </pre>
+</source>The above elements show the way of defining transport receivers in
+axis2.xml. Here the name attribute of the 'transportReceiver' element is the
+name of the transport receiver. It can be HTTP, TCP, SMTP, CommonsHTTP etc,.
+When the system starts up or when you set the transport at the client side,
+you can use these transport names to load the appropriate transport. Class
+attribute is to specify actual java classes that implement required
+interfaces for the transport. Any transport can have zero or more parameters,
+and if there are any, those parameters can be accessed via the corresponding
+transport receiver. <a name="Sender"></a>
+
+<h3>Transport Sender</h3>
+
+<p>Just as the transport receivers, you can register transport senders in the
+system, and later at run time, the senders can be used to send the messages.
+For example, consider Axis2 running under Apache Tomcat. Then Axis2 can use
+TCP transport senders to send messages rather than HTTP. The method of
+specifying transport senders is as follows:</p>
+<pre> 
+&lt;transportSender name="http" class="org.apache.axis2.transport.http.CommonsHTTPTransportSender"&gt;
+        &lt;parameter name="PROTOCOL" locked="xsd:false"&gt;HTTP/1.0&lt;/parameter&gt;
+ &lt;/transportSender&gt; 
+ </pre>
+<strong>name:</strong> Name of the transport (you can have HTTP and HHTP1 as
+the transport name)
+
+<p><strong>class:</strong> Implementation class of the corresponding
+transport. Just as the transport receivers, transport senders can have zero
+or more parameters, and if there are any, then it can be accessed via the
+corresponding transport sender.</p>
+<a name="Phase_Order"></a>
+
+<h3>Phase Order</h3>
+
+<p>Specifying the order of phases in the execution chain has to be done using
+the phase order element. It will look as follows:</p>
+<pre>&lt;phaseOrder type="InFlow"&gt;
+         &lt;phase name="TransportIn"/&gt;
+         .
+         .
+&lt;/phaseOrder&gt;   </pre>
+
+<p>The most interesting thing is that you can add handlers here as well. If
+you want to add a handler that should go into that phase, you can directly do
+that by adding a handler element into it. In addition to that, there is no
+hard coding work for the handler chain anywhere in Axis2 (at any Axis*). So
+all those configurations are also done in the phase order element. The
+complete configurations will look as follows: <source></p>
+<pre>&lt;phaseOrder type="InFlow"&gt;
+        &lt;!--   Global phases    --&gt;
+         &lt;phase name="Transport"&gt;
+            &lt;handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher"&gt;
+                &lt;order phase="Transport"/&gt;
+            &lt;/handler&gt;
+
+            &lt;handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher"&gt;
+                &lt;order phase="Transport"/&gt;
+            &lt;/handler&gt;
+        &lt;/phase&gt;
+        &lt;phase name="Security"/&gt;
+        &lt;phase name="PreDispatch"/&gt;
+        &lt;phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase"&gt;
+            &lt;handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+
+            &lt;handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+
+            &lt;handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+        &lt;/phase&gt;
+        &lt;!--   Global phases   --&gt;
+        &lt;!--   After the Dispatch phase module author or service author can add any phase he wants    --&gt;
+        &lt;phase name="OperationInPhase"/&gt;
+    &lt;/phaseOrder&gt;
+    &lt;phaseOrder type="OutFlow"&gt;
+        &lt;!--   user can add his own phases to this area  --&gt;
+        &lt;phase name="OperationOutPhase"/&gt;
+        &lt;!--  Global phases  --&gt;
+        &lt;!--  these phases will run irrespective of the service  --&gt;
+        &lt;phase name="MessageOut"/&gt;
+        &lt;phase name="PolicyDetermination"/&gt;
+    &lt;/phaseOrder&gt;
+    &lt;phaseOrder type="InFaultFlow"&gt;
+        &lt;phase name="PreDispatch"/&gt;
+        &lt;phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase"&gt;
+            &lt;handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+
+            &lt;handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+
+            &lt;handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+
+            &lt;handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+            &lt;handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher"&gt;
+                &lt;order phase="Dispatch"/&gt;
+            &lt;/handler&gt;
+        &lt;/phase&gt;
+        &lt;!--      user can add his own phases to this area  --&gt;
+        &lt;phase name="OperationInFaultPhase"/&gt;
+    &lt;/phaseOrder&gt;
+    &lt;phaseOrder type="OutFaultFlow"&gt;
+        &lt;!--      user can add his own phases to this area  --&gt;
+        &lt;phase name="OperationOutFaultPhase"/&gt;
+        &lt;phase name="PolicyDetermination"/&gt;
+        &lt;phase name="MessageOut"/&gt;
+    &lt;/phaseOrder&gt;</pre>
+</source>
+<p><strong>type:</strong> the attribute represents the type of the flow. It
+can only be one of the following:</p>
+<ul>
+  <li>InFlow</li>
+  <li>OutFlow</li>
+  <li>InFaultFlow</li>
+  <li>OutFaultFlow</li>
+</ul>
+
+<p>In addition to that, the only child element that is allowed inside
+"phaseOrder" is the "phase" element which represents the available phases in
+the execution chain. The method of specifying phases inside "phaseOrder" is
+as follows:</p>
+<pre> &lt;phase name="Transport"/&gt;</pre>
+</source>
+<p><strong>name:</strong> Name of the phase. <br>
+</p>
+
+<p>There are a number of things that one has to keep in mind when changing a
+phaseOrder:</p>
+
+<p>For the phaseOrder types <strong>"InFlow"</strong> and
+<strong>"InFaultFlow"</strong></p>
+<ul>
+  <li>All the phases that are above the "Dispatch" phase, including the
+    "Dispatch" phase, are known as "Global phases" . You can add any number
+    of new phases here and they will be considered global.</li>
+  <li>In these two phaseOrder types, the phases added after the "Dispatch"
+    phase are known as "Operation phases".</li>
+</ul>
+
+<p>For the phaseOrder types <strong>"OutFlow"</strong> and
+<strong>"OutFaultFlow"</strong></p>
+<ul>
+  <li>All the phases that are below the "MessageOut" phase, including the
+    "MessageOut" phase, are known as "Global phases". You can add new phases
+    according to your requirement.</li>
+  <li>The phases added before the "MessageOut" phase are known as "Operation
+    phases".</li>
+
+  <p><strong>Note :</strong> If you look closely at the default axis2.xml,
+  you will be able to clearly identify it.</p>
+</ul>
+<a name="References"></a>
+
+<h3>Module References</h3>
+
+<p>If you want to engage a module, system wide, you can do it by adding a top
+level module element in axis2.xml. It should look as follows:</p>
+<pre>&lt;module ref="addressing"/&gt;  </pre>
+</source>
+<p><strong>ref:</strong> the module name which is going to be engaged, system
+wide.</p>
+<a name="Listeners"></a>
+
+<h3><strong>Listeners (Observers)</strong></h3>
+
+<p>In Axis2, AxisConfiguration is observable so that you can register
+observers into that. They will be automatically informed whenever a change
+occurs in AxisConfiguration. In the current implementation, the observers are
+informed of the following events:</p>
+<ul>
+  <li>Deploying a Service</li>
+  <li>Removing a service</li>
+  <li>Activate/Inactivate Service</li>
+  <li>Module deploy</li>
+  <li>Module remove</li>
+</ul>
+
+<p>Registering Observers is very useful for additional features such as RSS
+feed generation, which will provide service information to subscribers. The
+correct way of registering observers should as follows:</p>
+<pre>&lt;listener class="org.apache.axis2.ObserverIMPL"&gt;
+    &lt;parameter name="RSS_URL" &gt;http://127.0.0.1/rss&lt;/parameter&gt;
+  &lt;/listener&gt;</pre>
+</source>
+<p><strong>class:</strong> Represents an Implementation class of observer,
+and it should be noted that the Implementation class should implement
+AxisObserver interface, and the class has to be available in the classpath.
+<a name="Service_Configuration"></a></p>
+
+<h2><font>Service Configuration</font></h2>
+<ul>
+  <li><font>Writing services.xml</font></li>
+</ul>
+
+<p><font>The description of services are specified using services.xml. Each
+service archive file needs to have a services.xml in order to be a valid
+service and it should be available in the META-INF directory of the archive
+file. A very simple services.xml is shown below:</font></p>
+<source><pre>&lt;service name="name of the service" scope="name of the scope" class="full qualifide name the service lifecycle class"   targetNamespace="target namespase for the service"&gt;
+    &lt;description&gt; The description of the service  &lt;/description&gt;  
+
+    &lt;transports&gt; 
+       &lt;transport&gt;HTTP&lt;/transport&gt;
+    &lt;/transports&gt;
+    
+    &lt;schema schemaNamespace="schema namespace"/&gt; 
+     
+    &lt;messageReceivers&gt;
+            &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                             class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;
+    &lt;/messageReceivers&gt;
+     
+     &lt;parameter name="ServiceClass" locked="xsd:false"&gt;org.apache.axis2.sample.echo.EchoImpl&lt;/parameter&gt;
+    
+    &lt;operation name="echoString" mep="operation MEP"&gt; 
+        &lt;actionMapping&gt;Mapping to action&lt;/actionMapping&gt;
+        &lt;module ref=" a module name "/&gt;
+        &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
+    &lt;/operation&gt;
+  &lt;/service&gt;</pre>
+</source>
+<p><strong>name</strong>: The service name will be the name of the archive
+file if the .aar file contains only one service, or else the name of the
+service will be the name given by the name attribute.</p>
+
+<p><strong>scope</strong>: (Optional Attribute) The time period during which
+runtime information of the deployed services will be available. Scope is of
+several types- "Application", "SOAPSession", "TransportSession", "Request".
+The default value (if you don't enter any value) will be "Request"</p>
+
+<p><strong>class</strong>: (Optional attribute) The full qualified name of
+the service lifecycle implementation class. ServiceLifeCycle class is usefull
+when you want to do some tasks when the system starts and when it
+shutdowns.</p>
+
+<p><strong>targetNamespace</strong>: (Optional Attribute) Target name space
+of the service. This value will be used when generating the WSDL. If you do
+not specify this value, the value will be calculated from the package name of
+the service impl class.</p>
+
+<p><font><strong>description</strong>: (Optional) If you want to display any
+description about the service via Axis2 web-admin module, then the
+description can be specified here.</font></p>
+
+<p><strong>transports</strong> : (Optional) The transports to which the
+service is going to be exposed. If the transport element is not present, then
+the service will be exposed in all the transports available in the system.
+The transport child element specifies the transport prefix (the name of the
+transport specified in axis2.xml).</p>
+
+<p><b>parameters:</b> A services.xml can have any number of top level
+parameters and all the specified parameters will be transformed into service
+properties in the corresponding AxisService. There is a compulsory parameter
+in services.xml called ServiceClass that specifies the Java class, which
+performs the above transformation. This class is loaded by the
+MessageReceiver.</p>
+
+<p><b>operations :</b> If the service impl class is Java, then all the public
+methods in that service will be exposed. If the user wants to override it, he
+has to add the "operation" tag and override it. In a non-Java scenario or if
+you do not have a service class, then all the operations the user wants to
+expose by the service has to be indicated in the services.xml. It is
+specified as follows:</p>
+<pre>    &lt;operation name="echoString"&gt;
+        &lt;module ref=" a module name "/&gt;
+        &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
+    &lt;/operation&gt;</pre>
+</source>
+<p>The only compulsory attribute here is "name", which represents the
+operation name that is going to be exposed. Any operation can contain module
+references as well as any number of parameters. The most interesting thing is
+that you can register custom message receivers per operation. Then the
+registered message receiver will be the message receiver for the
+corresponding operation. If you do not specify the message receiver, then the
+default message receiver will perform the operation. <br>
+<a name="Module_Configuration"></a></p>
+
+<h2>Module Configuration</h2>
+<ul>
+  <li>Writing module.xml</li>
+</ul>
+
+<p>The description of the module is specified using the module.xml. Each
+module archive file needs to have a module.xml in order to be a valid module,
+and it should be available in the META-INF directory of the archive file. <br>
+</p>
+
+<p>A very simple module.xml is shown below:</p>
+<pre>&lt;module class="org.apache.module.Module1Impl"&gt;
+    &lt;InFlow&gt;
+        .
+        .
+    &lt;/InFlow&gt;
+    &lt;OutFlow&gt;
+        .
+        .
+    &lt;/OutFlow&gt;
+
+    &lt;OutFaultFlow&gt;
+        .   
+        .
+    &lt;/OutFaultFlow&gt;
+
+    &lt;InFaultFlow&gt;
+        .         
+        .
+    &lt;/InFaultFlow&gt;
+
+    &lt;operation name="creatSeq" mep="MEP_URI_IN_OUT"&gt;
+        &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
+        &lt;parameter name="para1" locked="xsd:true"&gt;10&lt;/parameter&gt;
+    &lt;/operation&gt;
+&lt;/module&gt;</pre>
+</source>
+<p><strong>class:</strong> (Optional attribute) Indicates the module
+implementation class. A module may or may not contain a module implementation
+class since the module can also be a collection of handlers. If a module
+contains an implementation class that implements the
+org.apache.axis2.modules.Module interface at deployment, its
+<code>init();</code> method will be called.</p>
+
+<p><b>parameter:</b> A module can contain any number of parameters and all
+the listed parameters in the module.xml will be transformed into the
+corresponding AxisModule of the module.</p>
+
+<p><b>flow: </b>Defining of handlers in a module has to be done inside flows.
+There are four types of flows as listed below.</p>
+
+<p>You can add any number of handlers into a flow, and those handlers will be
+available in the corresponding chains at runtime, when they are engaged.</p>
+<ul>
+  <li>InFlow</li>
+  <li>OutFlow</li>
+  <li>InFaultFlow</li>
+  <li>OutFaultFlow</li>
+</ul>
+
+<p><b>operations: </b> If a module wants to add an operation when it is
+engaged into a service, it can be done by adding an operation tag in
+module.xml. The method of specifying the operation is the same as operation
+in services.xml.</p>
+
+<p><b>handler:</b> The Handler element consists of compulsory and optional
+attributes. The method of defining a handler will look as follows:</p>
+<pre>&lt;handler name="handler1" class="handlerClass "&gt;
+            &lt;order phase="userphase1" /&gt;
+ &lt;/handler&gt;</pre>
+</source>
+<p><b><i>Compulsory Attributes</i></b> <br>
+<b>name:</b> Name of the handler.<br>
+<b>class:</b> Handler implementation class.<br>
+<b>phase:</b> Name of the phase that the handler should remain, in the
+execution chain. <br>
+<br>
+<i><b>Optional Attributes :</b></i><br>
+<b>phaseLast:</b> Indicates that the handler is the last handler of the
+phase.<br>
+<b>phaseFirst:</b> Indicate that the handler is the first handler of the
+phase.<br>
+<b>before :</b> Indicates that the current handler should be invoked before
+the handler specified by the before handler<br>
+<b>after:</b> Indicates that the current handler should be invoked after the
+handler specified by the after handler<br>
+</p>
+
+<p><br>
+</p>
+</body>
+</html>
Index: contents.html
===================================================================
--- contents.html	(revision 503571)
+++ contents.html	(working copy)
@@ -28,37 +28,36 @@
 <h2>Apache Axis2 User's Guide</h2>
 
 <p>You can get started with Axis2 with the assistance of the following
-documents. They will guide you through Axis2 download, installation both as a
-standalone Web services engine and as part of a J2EE compliant servlet
-container, not forgetting the instructions on how to write Web services and
-Web services client using Apache Axis2.</p>
+documents. They will guide you through the Axis2 download, installation both
+as a standalone Web services engine and as part of a J2EE compliant servlet
+container, and instructions on how to write Web services and Web services
+client using Apache Axis2.</p>
 <ul>
-  <li><a href="userguide.html#intro">Introduction</a>- This opening document
-    gives you an introduction to what Axis2 is, the life cycle of a Web
-    services messages, how Axis2 handles SOAP Messages and also includes
-    basic description on Axis2 distributions and how Axis2 behaves as part of
-    a Web application or as a standalone client that is not part of a J2EE
-    application.</li>
-  <li><a href="installationguide.html">Download and Installation</a>- Will
-    list the different distribution packages offered by Axis2, and in-depth
-    instructions on installation methods for standalone and as part of a J2EE
-    servlet container.</li>
+  <li><a href="userguide.html#intro">Introduction</a>- Gives you an
+    introduction to what Axis2 is, the life cycle of a Web services message,
+    how Axis2 handles SOAP messages and also includes a basic description on
+    Axis2 distributions, and how Axis2 behaves as part of a Web application
+    or as a standalone client that is not part of a J2EE application.</li>
+  <li><a href="installationguide.html">Download and Installation</a>- Lists
+    the different distribution packages offered by Axis2 and in-depth
+    instructions on the installation of the standalone method and as part of
+    a J2EE servlet container.</li>
   <li><a href="userguide-installingtesting.html">Testing Client Code</a> -
     The best way to make sure that your system is running Axis2 is to install
     and test both a service and a client. This document describes this
-    process easy to understand steps.</li>
+    process in easy to understand steps.</li>
   <li><a href="userguide-introtoservices.html">Introduction to Services</a> -
-    The term "Web services" can apply to a number of different ways to send
-    information back and forth, but this guide focuses on the sending and
-    receiving of SOAP messages and Message Exchange Patterns (MEPs).</li>
+    The term "Web services" can apply to a number of different ways of
+    sending information back and forth. However, this guide focuses on the
+    sending and receiving of SOAP messages and Message Exchange Patterns
+    (MEPs).</li>
   <li><a href="userguide-creatingclients.html">Creating Clients from WSDL</a>
     - When it comes to creating a Web service client, you can do it manually
-    as described in the next document, but in most cases you have a Web
+    as described in the next document. However, in most cases, you have a Web
     Service Description Language (WSDL) definition that describes the
-    messages clients should send and expect to receive. Axis2 provides
+    messages the clients should send and expect to receive. Axis2 provides
     several ways to use this definition to automatically generate a client.
-    This document explains just how to create a client using WSDL
-  definitions.</li>
+    This document explains how to create a client using WSDL definitions.</li>
   <li><a href="userguide-buildingservices.html">Building Services from
     Scratch</a> - Now that you know how to use Axis2 to generate clients from
     WSDL as described in the document before, this document digs a little
@@ -73,9 +72,9 @@
     <ul>
       <li><a href="pojoguide.html">POJO Web Services using Apache
         Axis2</a>-This guide will show you how to create a Plain Old Java
-        Object (POJO) to deploy using Apache Axis2 on Apache Tomcat. POJOs
-        are fast to build and easy to maintain, meaning you'll save a lot of
-        time building and debugging your code</li>
+        Object (POJO) for deploying using Apache Axis2 on Apache Tomcat.
+        POJOs are fast to build and easy to maintain, which means you'll save
+        a lot of time building and debugging your code</li>
       <li><a href="quickstartguide.html">Axis2 Quick Start Guide</a>-The
         purpose of this guide is to get you started on creating services and
         clients using Axis2 as quickly as possible. It demonstrates how to
@@ -86,149 +85,147 @@
 Also see our <a href="../faq.html">FAQ page</a> to answer those common
 questions in mind.
 
-<h2>How Tos</h2>
+<h2>How To</h2>
 
-<p>This section of documents will deal with more advanced topics including
-Axis2 support features such as Transports, Attachments, Pluggable Data
-Binding, Security, REST Web services on a detailed manner.</p>
+<p>This section deals with more advanced topics including Axis2 support
+features such as Transports, Attachments, Pluggable Data Binding, Security,
+and REST Web services in detail.</p>
 <ul>
-  <li><a href="webadminguide.html">Web Administrator's Guide</a>- Detailed
-    instructions on administration console of Axis2 Web application, with the
-    know how to configure Axis2 at run time.</li>
-  <li><a href="migration.html">Migrating from Axis 1.x to Axis 2</a>-Guiding
-    Axis 1.x users to switch to Axis2</li>
+  <li><a href="webadminguide.html">Web Administrator's Guide</a> - Detailed
+    instructions on the administration console of Axis2 Web application, with
+    the know-how to configure Axis2 at run time.</li>
+  <li><a href="migration.html">Migrating from Axis 1.x to Axis 2</a> -
+    Guiding Axis 1.x users to switch to Axis2</li>
   <li><a href="app_server.html">Application Server Specific Configuration
-    Guide</a>-Provides extra configuration information required for
-    Application Servers to run Axis2 to its fullest potential</li>
+    Guide</a> - Provides extra configuration information required for
+    application servers to run Axis2 to its fullest potential</li>
   <li><a href="http://ws.apache.org/commons/axiom/OMTutorial.html">AXIOM
-    Tutorial</a>-An introduction to Axis2's Object Model</li>
-  <li><a href="rest-ws.html">REST Support</a>-Introduction on
+    Tutorial</a> - An introduction to Axis2's object model</li>
+  <li><a href="rest-ws.html">REST Support</a> - Introduction to
     Representational State Transfer</li>
-  <li><a href="Axis2-rpc-support.html">Axis2 RPC Support</a>-This documents
+  <li><a href="Axis2-rpc-support.html">Axis2 RPC Support</a> - This documents
     talks about the Axis2's Remote Procedure Calls support in a set of easy
     to understand implementation steps</li>
-  <li><a href="mtom-guide.html">MTOM Guide -Sending Binary Data with
-    SOAP</a>-Describes sending binary data using SOAP Message Transmission
+  <li><a href="mtom-guide.html">MTOM Guide -Sending Binary Data with SOAP</a>
+    - Explains how to send binary data using the SOAP Message Transmission
     Optimization Mechanism</li>
-  <li><a href="axis2config.html">Axis2 Configuration Guide</a>-Explains the
-    three configurations-global, service and module in Axis2</li>
-  <li><a href="soapmonitor-module.html">SOAP Monitor How-to</a>-Guide on
-    utility used to see SOAP messages being used to invoke Web services along
-    with the results of those messages.</li>
-  <li><a href="WS_policy.html">Web Services Policy Support In
-    Axis2</a>-Introduction to the role of Web services policy in Axis2</li>
-  <li><a href="spring.html">Spring Framework</a>-Guide on how to use Axis2
-    with the Spring Framework</li>
+  <li><a href="axis2config.html">Axis2 Configuration Guide</a> - Explains the
+    three configurations in Axis2: global, service, and module</li>
+  <li><a href="soapmonitor-module.html">SOAP Monitor How-to</a> - A guide on
+    the utilities used to monitor the SOAP messages that invoke Web services,
+    along with the results of those messages.</li>
+  <li><a href="WS_policy.html">Web Services Policy Support In Axis2</a> -
+    Introduction to the role of Web services policy in Axis2</li>
+  <li><a href="spring.html">Spring Framework</a> - A guide on how to use
+    Axis2 with the Spring Framework</li>
 </ul>
 
 <p><strong>Data Bindings:</strong></p>
 <ul>
-  <li><a href="adb/adb-howto.html">ADB How-to</a> -Guide on Axis2 Databinding
-    Framework (ADB)</li>
-  <li><a href="adb/adb-advanced.html">Advanced ADB Framework Features</a>-The
-    document provides an insight into the newly added advance features of
-  ADB</li>
-  <li><a href="adb/adb-tweaking.html">Tweaking the ADB Code
-    Generator</a>-Explains available mechanisms to extend ADB</li>
+  <li><a href="adb/adb-howto.html">ADB How-to</a> - A guide on Axis2
+    Databinding Framework (ADB)</li>
+  <li><a href="adb/adb-advanced.html">Advanced ADB Framework Features</a> -
+    Provides an insight into the newly added advance features of ADB</li>
+  <li><a href="adb/adb-tweaking.html">Tweaking the ADB Code Generator</a> -
+    Explains the available mechanisms to extend ADB</li>
   <li><a href="adb/adb-codegen-integration.html">ADB Integration with
-    Axis2</a>-Guide to writing an extension using the integrator in order to
-    integrate ADB with Axis2</li>
+    Axis2</a> - A guide to writing an extension using the integrator in order
+    to integrate ADB with Axis2</li>
   <li><a href="jibx/jibx-codegen-integration.html">JiBX Integration With
-    Axis2</a>-Guide to using JiBX with Axis2 in order to expose existing Java
-    code as a Web service and to implement a client for an existing Web
+    Axis2</a> - A guide to using JiBX with Axis2 in order to expose existing
+    Java code as a Web service and to implement a client for an existing Web
     service</li>
 </ul>
 
 <p><strong>Transports:</strong></p>
 <ul>
-  <li><a href="tcp-transport.html">TCP Transport</a>- Guide to send and
-    receive SOAP Messages via TCP in Axis2</li>
-  <li><a href="mail-transport.html">Mail Transport</a>-Explains how to invoke
-    a service using a Mail transport</li>
-  <li><a href="mail-configuration.html">Mail Transport
-    Configuration</a>-Guide to configure Axis2 in order to get mail transport
-    working</li>
-  <li><a>HTTP Transports</a>-Description on HTTP sender and HTTP receiver in
-    Axis2</li>
-  <li><a href="jms-transport.html">JMS Transport</a>-Description on JMS
+  <li><a href="tcp-transport.html">TCP Transport</a> - A guide to send and
+    receive SOAP messages via TCP in Axis2</li>
+  <li><a href="mail-transport.html">Mail Transport</a> - Explains how to
+    invoke a service using a Mail transport</li>
+  <li><a href="mail-configuration.html">Mail Transport Configuration</a> - A
+    guide to configure Axis2 in order to get mail transport working</li>
+  <li><a>HTTP Transports</a> - A description on HTTP sender and HTTP receiver
+    in Axis2</li>
+  <li><a href="jms-transport.html">JMS Transport</a> - A description on JMS
     sender and JMS receiver in Axis2</li>
-  <li><a href="transport_howto.html">Write Your Own Axis2 Transport</a>-Quick
-    and easy guide to create your own Axis2 Transport protocol</li>
+  <li><a href="transport_howto.html">Write Your Own Axis2 Transport</a> - A
+    quick and easy guide to create your own Axis2 Transport protocol</li>
 </ul>
 
 <p><strong>Axis2 Tools:</strong></p>
 <ul>
   <li><a href="../tools/1_1/CodegenToolReference.html">Code Generator Tool
-    Guide for Command Line &amp; Ant Task</a>-Lists command line &amp; Ant
-    task references. How to build file using custom Ant task and invoking
-    Code Generator from Ant</li>
+    Guide for Command Line and Ant Tasks</a> - Lists command line and Ant
+    task references. How to build a file using custom Ant tasks and how to
+    invoke a Code Generator from Ant</li>
   <li><a href="../tools/1_1/eclipse/wsdl2java-plugin.html">Code Generator
-    Wizard Guide for Eclipse Plug-in</a>-Explains the usage of the code
+    Wizard Guide for Eclipse Plug-in</a> - Explains the usage of the code
     generator eclipse plug-in for WSDL2Java and/or Java2WSDL operations</li>
   <li><a href="../tools/1_1/eclipse/servicearchiver-plugin.html">Service
-    Archive Generator Wizard Guide for Eclipse Plug-in</a>- Describes
-    functionality of eclipse plugin service archive generator tool</li>
+    Archive Generator Wizard Guide for Eclipse Plug-in</a> - Describes the
+    functionality of the Eclipse plugin service archive generator tool</li>
   <li><a href="../tools/1_1/idea/Idea_plug-in_userguide.html">Code Generator
-    Wizard Guide for IntelliJ IDEA Plug-in</a>- Guide on the usage of IDEA
-    code generation plug-in to create service archives and generate java
+    Wizard Guide for IntelliJ IDEA Plug-in</a> - A guide on the usage of the
+    IDEA code generation plug-in to create service archives and generate Java
     class files from WSDL files</li>
   <li><a href="../tools/1_1/maven-plugins/maven-aar-plugin.html">Maven2 AAR
-    Plug-in Guide</a> - Guide to generate an Axis 2 service file (AAR file)
-    using the maven plug-in.</li>
+    Plug-in Guide</a> - A guide to generate an Axis 2 service file (AAR file)
+    using the Maven plug-in.</li>
   <li><a href="../tools/1_1/maven-plugins/maven-java2wsdl-plugin.html">Maven2
-    Java2WSDL Plug-in Guide</a> - Guide to using Java2WSDL Maven 2 Plug-in
-    that takes as input a Java class and generates a WSDL, which describes a
-    Web service for invoking the classes methods</li>
+    Java2WSDL Plug-in Guide</a> - A guide to using Java2WSDL Maven 2 Plug-in
+    that takes a Java class as input and generates a WSDL, which describes a
+    Web service for invoking the class methods</li>
   <li><a href="../tools/1_1/maven-plugins/maven-wsdl2code-plugin.html">Maven2
-    WSDL2Code Plug-in Guide</a> - Guide to using this plugin that takes as
+    WSDL2Code Plug-in Guide</a> - A guide to using this plugin that takes as
     input a WSDL and generates client and server stubs for calling or
     implementing a Web service matching the WSDL.</li>
 </ul>
 
 <h2>Apache Axis2 Developers</h2>
 <ul>
-  <li><a href="adv-userguide.html">Advance User's Guide</a>- This is a quick
-    start user's guide for more experienced users and developers on how to
-    install, create Web services and Web service clients using Axis2.
+  <li><a href="adv-userguide.html">Advance User's Guide</a> - A quick start
+    user's guide for more experienced users and developers on how to install,
+    create Web services and Web service clients using Axis2.
     <ul>
-      <li><a href="adv-userguide.html#introduction">Introduction</a>-
-        Outlines the overall direction of the User's guide itself, with a
-        high level introduction on Axis2</li>
-      <li><a href="installationguide.html">Download and Installation</a>-Will
-        list the different distribution packages offered by Axis2, and
-        installation methods for standalone and as part of a J2EE servlet
-        container.</li>
+      <li><a href="adv-userguide.html#introduction">Introduction</a> -
+        Outlines the overall direction of the user guide, with a high level
+        introduction on Axis2</li>
+      <li><a href="installationguide.html">Download and Installation</a> -
+        Lists the different distribution packages offered by Axis2, and the
+        installations for the standalone and as part of a J2EE servlet
+        container methods.</li>
       <li><a href="adv-userguide.html#ws_codegen">Creating a new Web Service
-        with Code Generation</a> -Axis2 provides two ways to create new Web
-        Services, using code generation and using XML based primary APIs.
-        This section explains how to start from a WSDL, and create a new
-        Service with code generation</li>
+        with Code Generation</a> - Axis2 provides two ways to create new Web
+        Services: using code generation and XML based primary APIs. This
+        section explains how to start from a WSDL, and create a new Service
+        with code generation</li>
       <li><a href="xmlbased-server.html">Writing Web Services Using Axis2's
-        Primary APIs</a> -Explains how to create new Web Services using XML
-        based primary API</li>
+        Primary APIs</a> - Explains how to create new Web Services using XML
+        based primary APIs</li>
       <li><a href="adv-userguide.html#client">Writing a Web Service Client
-        with Code Generation </a>-Axis2 also provides a more complex, yet
-        powerful XML based client API which is intended for advanced users.
+        with Code Generation </a>- Axis2 also provides a more complex, yet
+        powerful XML based client API that is intended for advanced users.
         However, if you are a new user we recommend using the code generation
         approach presented below</li>
       <li><a href="dii.html">Writing Web Service Clients Using Axis2's
-        Primary APIs</a>- This section presents complex yet powerful XML
-        based client API which is intended for advanced users to write Web
+        Primary APIs</a> - This section presents complex yet powerful XML
+        based client APIs, which is intended for advanced users to write Web
         services clients</li>
-      <li><a href="adv-userguide.html#config">Configuring Axis2</a>-Axis2
-        configuration is based on a repository and standard archives formats.
+      <li><a href="adv-userguide.html#config">Configuring Axis2</a> - Axis2
+        configuration is based on a repository and standard archive formats.
         Here you will find details on how to configure Axis2. You will also
         find reference documents that lead to greater detail in this
       area.</li>
     </ul>
   </li>
-  <li><a href="Axis2ArchitectureGuide.html">Axis2 Architecture
-    Guide</a>-Introduction to Axis2's modular architecture</li>
+  <li><a href="Axis2ArchitectureGuide.html">Axis2 Architecture Guide</a> -
+    Introduction to Axis2's modular architecture</li>
   <!--<li><a href="api/index.html">Online Java Docs</a>-Java API
   documentation</li>-->
   <li><a href="http://ws.apache.org/axis2/1_1/api/index.html">Online Java
-    Docs</a>-Java API  documentation</li>
-  <li><a href="../refLib.html">Reference Library</a>-This document provides
+    Docs</a> - Java API documentation</li>
+  <li><a href="../refLib.html">Reference Library</a> - This document provides
     additional information to developers on WS-* specifications, Java
     language specifications, Subversion (SVN) control etc.</li>
 </ul>
@@ -236,8 +233,8 @@
 <h2>References</h2>
 
 <p>Gives you a list of published articles, tutorials and Questions-Answers on
-Apache Axis2. <a href="../articles.html">Check them out!</a> for that extra
+Apache Axis2. <a href="../articles.html">Check them out</a> for that extra
 knowledge on the next generation Web services engine Apache Axis2. Be
-Informed and up to date!</p>
+Informed and up-to-date!</p>
 </body>
 </html>
