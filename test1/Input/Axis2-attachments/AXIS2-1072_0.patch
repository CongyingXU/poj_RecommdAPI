Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/proxy/ProxyNonWrappedTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/proxy/ProxyNonWrappedTests.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/proxy/ProxyNonWrappedTests.java	(revision 0)
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.proxy;
+
+import javax.xml.namespace.QName;
+import javax.xml.ws.BindingProvider;
+import javax.xml.ws.Service;
+
+import org.apache.axis2.jaxws.proxy.doclitnonwrapped.sei.DocLitnonWrappedProxy;
+import org.test.proxy.doclitnonwrapped.Invoke;
+import org.test.proxy.doclitnonwrapped.ObjectFactory;
+import org.test.proxy.doclitnonwrapped.ReturnType;
+
+
+import junit.framework.TestCase;
+
+/**
+ * This test cases will use proxy NON wrapped wsdl to invoke methods
+ * on a deployed Server Endpoint.
+ */
+public class ProxyNonWrappedTests extends TestCase {
+
+	QName serviceName = new QName("http://doclitnonwrapped.test.org", "ProxyDocLitUnwrappedService");
+	private String axisEndpoint = "http://localhost:8080/axis2/services/ProxyDocLitUnwrappedService";
+	private QName portName = new QName("http://org.apache.axis2.proxy.doclitwrapped", "ProxyDocLitWrappedPort");
+	public ProxyNonWrappedTests() {
+		super();
+		// TODO Auto-generated constructor stub
+	}
+
+	/**
+	 * @param arg0
+	 */
+	public ProxyNonWrappedTests(String arg0) {
+		super(arg0);
+		// TODO Auto-generated constructor stub
+	}
+	
+	public void testInvoke(){
+		System.out.println("-----------------------------------");
+		System.out.println("test: " + getName());
+		System.out.println(">>Testing Sync Inovoke on Proxy DocLit non-wrapped");
+		ObjectFactory factory = new ObjectFactory();
+		Invoke invokeObj = factory.createInvoke();
+		invokeObj.setInvokeStr("test request for twoWay Operation");
+		Service service = Service.create(null, serviceName);
+		assertNotNull(service);
+		DocLitnonWrappedProxy proxy = service.getPort(portName, DocLitnonWrappedProxy.class);
+		assertNotNull(proxy);
+		BindingProvider p =	(BindingProvider)proxy;
+		p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);
+		ReturnType response = proxy.invoke(invokeObj);
+		assertNotNull(response);
+		System.out.println(">>Response =" +response.getReturnStr());
+		
+		System.out.println("-------------------------------------");
+	}
+	
+	public void testInvokeAsyncCallback(){
+		
+	}
+	
+	public void testInvokeAsyncPolling(){
+		
+	}
+
+}
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/sei/ProxyDocLitUnwrappedService.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/sei/ProxyDocLitUnwrappedService.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/sei/ProxyDocLitUnwrappedService.java	(revision 0)
@@ -0,0 +1,53 @@
+
+package org.apache.axis2.jaxws.proxy.doclitnonwrapped.sei;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import javax.xml.namespace.QName;
+import javax.xml.ws.Service;
+import javax.xml.ws.WebEndpoint;
+import javax.xml.ws.WebServiceClient;
+
+
+/**
+ * This class was generated by the JAXWS SI.
+ * JAX-WS RI 2.0_01-b15-fcs
+ * Generated source version: 2.0
+ * 
+ */
+@WebServiceClient(name = "ProxyDocLitUnwrappedService", targetNamespace = "http://doclitnonwrapped.proxy.test.org", wsdlLocation = "proxy_doclit_unwr.wsdl")
+public class ProxyDocLitUnwrappedService
+    extends Service
+{
+
+    private final static URL PROXYDOCLITUNWRAPPEDSERVICE_WSDL_LOCATION;
+
+    static {
+        URL url = null;
+        try {
+            url = new URL("file:/C:/temp/proxy_doclit_unwr.wsdl");
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+        }
+        PROXYDOCLITUNWRAPPEDSERVICE_WSDL_LOCATION = url;
+    }
+
+    public ProxyDocLitUnwrappedService(URL wsdlLocation, QName serviceName) {
+        super(wsdlLocation, serviceName);
+    }
+
+    public ProxyDocLitUnwrappedService() {
+        super(PROXYDOCLITUNWRAPPEDSERVICE_WSDL_LOCATION, new QName("http://doclitnonwrapped.proxy.test.org", "ProxyDocLitUnwrappedService"));
+    }
+
+    /**
+     * 
+     * @return
+     *     returns DocLitnonWrappedProxy
+     */
+    @WebEndpoint(name = "ProxyDocLitnonWrappedPort")
+    public DocLitnonWrappedProxy getProxyDocLitnonWrappedPort() {
+        return (DocLitnonWrappedProxy)super.getPort(new QName("http://doclitnonwrapped.proxy.test.org", "ProxyDocLitnonWrappedPort"), DocLitnonWrappedProxy.class);
+    }
+
+}
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/sei/DocLitnonWrappedProxy.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/sei/DocLitnonWrappedProxy.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/sei/DocLitnonWrappedProxy.java	(revision 0)
@@ -0,0 +1,38 @@
+
+package org.apache.axis2.jaxws.proxy.doclitnonwrapped.sei;
+
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebResult;
+import javax.jws.WebService;
+import javax.jws.soap.SOAPBinding;
+import javax.jws.soap.SOAPBinding.ParameterStyle;
+
+import org.test.proxy.doclitnonwrapped.Invoke;
+import org.test.proxy.doclitnonwrapped.ReturnType;
+
+
+/**
+ * This class was generated by the JAXWS SI.
+ * JAX-WS RI 2.0_01-b15-fcs
+ * Generated source version: 2.0
+ * 
+ */
+@WebService(name = "DocLitnonWrappedProxy", targetNamespace = "http://doclitnonwrapped.proxy.test.org")
+@SOAPBinding(parameterStyle = ParameterStyle.BARE)
+public interface DocLitnonWrappedProxy {
+
+
+    /**
+     * 
+     * @param allByMyself
+     * @return
+     *     returns org.test.proxy.doclitnonwrapped.ReturnType
+     */
+    @WebMethod(action = "http://doclitnonwrapped.proxy.test.org/invokeReturn")
+    @WebResult(name = "ReturnType", targetNamespace = "http://doclitnonwrapped.proxy.test.org", partName = "allByMyself")
+    public ReturnType invoke(
+        @WebParam(name = "invoke", targetNamespace = "http://doclitnonwrapped.proxy.test.org", partName = "allByMyself")
+        Invoke allByMyself);
+
+}
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/proxy_doclit_unwr.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/proxy_doclit_unwr.wsdl	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/proxy_doclit_unwr.wsdl	(revision 0)
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+	This is a copy of proxy_doclitwr.wsdl. Service and port names
+	have been chnaged to be Alpha compatible and endpoint address
+	has been changed
+-->
+<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
+	xmlns:tns="http://doclitnonwrapped.proxy.test.org"
+	xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="proxy"
+	targetNamespace="http://doclitnonwrapped.proxy.test.org">
+	
+	<wsdl:types>
+		<xsd:schema
+			targetNamespace="http://doclitnonwrapped.proxy.test.org"
+			xmlns:tns="http://doclitnonwrapped.proxy.test.org"
+			xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+
+			<xsd:element name="MyFault" type="xsd:string" />
+			
+			
+			
+			<xsd:element name="invoke">
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="invoke_str" type="xsd:string" />
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>			
+			
+			<xsd:element name="ReturnType">
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="return_str" type="xsd:string" />
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>				
+
+		</xsd:schema>
+	</wsdl:types>
+
+	
+	
+	<wsdl:message name="invokeRequest">
+		<wsdl:part name="allByMyself" element="tns:invoke" />
+	</wsdl:message>
+
+	<wsdl:message name="invokeResponse">
+		<wsdl:part name="allByMyself" element="tns:ReturnType" />
+	</wsdl:message>	
+	
+	<wsdl:portType name="DocLitnonWrappedProxy">
+
+		
+		<wsdl:operation name="invoke">
+			<wsdl:input message="tns:invokeRequest" />
+			<wsdl:output message="tns:invokeResponse" />
+		</wsdl:operation>		
+			
+	</wsdl:portType>
+	
+	<wsdl:binding name="ProxyDocLitnonWrapped" type="tns:DocLitnonWrappedProxy">
+		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />		
+		<wsdl:operation name="invoke">
+			<soap:operation soapAction="http://doclitnonwrapped.proxy.test.org/invokeReturn" />
+			<wsdl:input>
+				<soap:body use="literal"  />
+			</wsdl:input>
+			<wsdl:output>
+				<soap:body use="literal"  />
+			</wsdl:output>
+	
+		</wsdl:operation>		
+	
+	</wsdl:binding>
+	
+	<wsdl:service name="ProxyDocLitUnwrappedService">
+		<wsdl:port binding="tns:ProxyDocLitnonWrapped" name="ProxyDocLitnonWrappedPort">
+			<soap:address location="http://@HOST@:@PORT@/jaxws.proxy/services/ProxyDocLitUnwrappedService" />
+		</wsdl:port>
+	</wsdl:service>
+	
+</wsdl:definitions>
\ No newline at end of file
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/services.xml
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/services.xml	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/services.xml	(revision 0)
@@ -0,0 +1,12 @@
+<serviceGroup>
+ <service name="ProxyDocLitUnwrappedService">
+  <messageReceivers>
+   <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" class="org.apache.axis2.jaxws.server.JAXWSMessageReceiver"/>
+  </messageReceivers>
+  <parameter locked="false" name="ServiceClass">org.apache.axis2.jaxws.proxy.doclitnonwrapped.DocLitnonWrappedImpl</parameter>
+  <operation name="invoke" mep="http://www.w3.org/2004/08/wsdl/in-out">
+    <actionMapping/>
+  </operation>
+ </service>
+</serviceGroup>
+
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/MANIFEST.MF
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/MANIFEST.MF	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/META-INF/MANIFEST.MF	(revision 0)
@@ -0,0 +1 @@
+Manifest-Version: 1.0
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/DocLitnonWrappedImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/DocLitnonWrappedImpl.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitnonwrapped/DocLitnonWrappedImpl.java	(revision 0)
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.proxy.doclitnonwrapped;
+
+import javax.xml.ws.Provider;
+
+
+public class DocLitnonWrappedImpl implements Provider<String> {
+
+	
+	public DocLitnonWrappedImpl() {
+		super();
+		// TODO Auto-generated constructor stub
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.xml.ws.Provider#invoke(T)
+	 */
+	public String invoke(String invoke_str) {
+		System.out.println("End point called with String value =" + invoke_str);
+		return new String("<ns2:ReturnType xmlns:ns2=\"http://doclitnonwrapped.proxy.test.org\"><return_str>some response</return_str></ns2:ReturnType>");
+	}
+
+}
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -38,6 +38,7 @@
 import org.apache.axis2.jaxws.message.XMLStreamReaderSplitterTests;
 import org.apache.axis2.jaxws.provider.*;
 import org.apache.axis2.jaxws.sample.AddressBookTests;
+import org.apache.axis2.proxy.ProxyNonWrappedTests;
 import org.apache.axis2.proxy.ProxyTests;
 
 public class JAXWSTest extends TestCase {
@@ -71,7 +72,7 @@
         suite.addTestSuite(SourceProviderTests.class);
         suite.addTestSuite(JAXBProviderTests.class);
         suite.addTestSuite(ProxyTests.class);
-        
+        suite.addTestSuite(ProxyNonWrappedTests.class);
         suite.addTestSuite(ExceptionFactoryTests.class);
 
         suite.addTestSuite(AddressBookTests.class);
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/maven.xml
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/maven.xml	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/maven.xml	(working copy)
@@ -71,6 +71,13 @@
     	    <classpath location="${compiled.classes.dir}"/>
     	    <arg line="-d ${schema.generated.src.dir} -p org.test.proxy.doclitwrapped -quiet -wsdl ${wsdl.source.dir}/ProxyDocLitWrapped.wsdl"/>
     	</java>
+    	<ant:echo>Generating java from ProxyDocLitnonWrapped.wsdl</ant:echo>
+    	    	<java classname="com.sun.tools.xjc.Driver" fork="true"> 
+    	    		<jvmarg line="${maven.junit.jvmargs}"/>
+    	    	    <classpath refid="maven.dependency.classpath"/>
+    	    	    <classpath location="${compiled.classes.dir}"/>
+    	    	    <arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/ProxyDocLitnonWrapped.wsdl"/>
+    	    	</java>
     	<ant:echo>Generating java from jaxbsource</ant:echo>
     	    	<java classname="com.sun.tools.xjc.Driver" fork="true"> 
     	    		<jvmarg line="${maven.junit.jvmargs}"/>
@@ -163,6 +170,17 @@
 			</ant:fileset>
 		</ant:copy>
 		
+		<ant:copy toDir="target/test-classes/services/ProxyDocLitnonWrapped/">
+					<ant:fileset dir="target/test-classes">
+						<ant:include name="org/apache/axis2/jaxws/proxy/doclitnonwrapped/**"/>
+					</ant:fileset>
+					<ant:fileset dir="test/org/apache/axis2/jaxws/proxy/doclitnonwrapped">
+		                <ant:include name="META-INF/**"/>
+					</ant:fileset>
+					<ant:fileset dir="target/classes">
+		                <ant:include name="org/apache/axis2/jaxws/server/**"/>
+					</ant:fileset>
+		</ant:copy>
         <!-- ================================================================ -->
         <!--- Java Bean Endpoint Samples -->
         <!-- ================================================================ -->
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointInterfaceDescription.java	(working copy)
@@ -75,7 +75,7 @@
     private SOAPBinding         soapBindingAnnotation;
     // TODO: (JLB) Should this be using the jaxws annotation values or should that be wrappered?
     private javax.jws.soap.SOAPBinding.Style soapBindingStyle;
-
+    private javax.jws.soap.SOAPBinding.ParameterStyle soapParameterStyle;
     
     void addOperation(OperationDescription operation) {
         operationDescriptions.add(operation);
@@ -110,7 +110,6 @@
      * @param javaMethodName String representing a Java Method Name
      * @return
      */
-    // TODO: (JLB) This is confusing; somet getOperations use the QName from the WSDL or annotation; this one uses the java method name; rename this signature I think; add on that takes a String but does a QName lookup against the WSDL/Annotation
     public OperationDescription[] getOperation(String javaMethodName) {
         if (javaMethodName == null) {
             return null;
@@ -222,6 +221,18 @@
         }
         return soapBindingStyle;
     }
+    
+    public javax.jws.soap.SOAPBinding.ParameterStyle getSoapBindingParameterStyle(){
+    	if (soapParameterStyle == null) {
+            if (getSoapBinding() != null && getSoapBinding().parameterStyle() != null) {
+            	soapParameterStyle = getSoapBinding().parameterStyle();
+            }
+            else {
+            	soapParameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED;
+            }
+        }
+        return soapParameterStyle;
+    }
 
 
 }
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/ProxyDescriptor.java	(working copy)
@@ -17,6 +17,8 @@
 package org.apache.axis2.jaxws.client.proxy;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Arrays;
 
@@ -24,7 +26,9 @@
 import javax.jws.WebResult;
 import javax.jws.soap.SOAPBinding;
 import javax.jws.soap.SOAPBinding.Style;
+import javax.xml.ws.AsyncHandler;
 import javax.xml.ws.RequestWrapper;
+import javax.xml.ws.Response;
 import javax.xml.ws.ResponseWrapper;
 
 import org.apache.axis2.jaxws.description.EndpointDescription;
@@ -70,6 +74,11 @@
 	}
 
 	public Class getResponseWrapperClass(boolean isAsync) throws ClassNotFoundException{
+		//TODO: Move this logic to OperationDescription. This is a hack right now.
+		if(isAsync){
+			return getReturnType(isAsync);
+		}
+		
 		String className = operationDescription.getResponseWrapperClassName();
 		return Class.forName(className, true, ClassLoader.getSystemClassLoader());
 	}
@@ -80,7 +89,7 @@
     public String getWebResultName(boolean isAsync){
         return operationDescription.getWebResultName();
 	}
-
+    // TODO: (JLB) Move to OperationDescription?
 	public ArrayList<String> getParamNames(){
         return new ArrayList<String>(Arrays.asList(operationDescription.getWebParamNames()));
 	}
@@ -97,8 +106,21 @@
 		this.seiMethod = seiMethod;
         operationDescription = endpointDescription.getEndpointInterfaceDescription().getOperation(seiMethod);
 	}
-
-    //TODO read soap binding on method too, make sure if Binding style is different from binding style in Clazz throw Exception.
+	
+	/*
+	 * This method looks at @SOAPBindingAnnotation on clazz to look for Parameter Style
+	 */
+	public boolean isClazzDocLitBare(){
+		SOAPBinding.ParameterStyle style = endpointDescription.getEndpointInterfaceDescription().getSoapBindingParameterStyle();
+		return style == SOAPBinding.ParameterStyle.BARE;
+	}
+	
+	public boolean isClazzDocLitWrapped(){
+		SOAPBinding.ParameterStyle style = endpointDescription.getEndpointInterfaceDescription().getSoapBindingParameterStyle();
+		return style == SOAPBinding.ParameterStyle.WRAPPED;
+	}
+	
+	//TODO read soap binding on method too, make sure if Binding style is different from binding style in Clazz throw Exception.
 	public Style getBindingStyle(){
         return endpointDescription.getEndpointInterfaceDescription().getSoapBindingStyle(); 
 	}
@@ -121,4 +143,40 @@
 			return method;
 		}
 	}
+	
+	/**
+	 * In this method I am trying get the return type of the method.
+	 * if SEI method is Async pooling implmentation then return type is actual type in Generic Response, example Response<ClassName>.
+	 * if SEI method is Async Callback implementation then return type is actual type of method parameter type AsyncHandler, example AsyncHandler<ClassName>
+	 * I use java reflection to get the return type.
+	 * @param isAsync
+	 * @return
+	 */
+	public Class getReturnType(boolean isAsync){
+		Class returnType = seiMethod.getReturnType();
+		if(isAsync){
+			//pooling implementation
+			if(Response.class.isAssignableFrom(returnType)){
+				Type type = seiMethod.getGenericReturnType();
+				ParameterizedType pType = (ParameterizedType) type;
+				return (Class)pType.getActualTypeArguments()[0];	
+			}
+			//Callback Implementation
+			else{
+				Type[] type = seiMethod.getGenericParameterTypes();
+				Class parameters[]= seiMethod.getParameterTypes();
+				int i=0;
+				for(Class param:parameters){
+					if(AsyncHandler.class.isAssignableFrom(param)){
+						ParameterizedType pType = (ParameterizedType)type[i];
+						return (Class)pType.getActualTypeArguments()[0];
+					}
+					i++;
+				}
+			}
+			
+		}
+		
+		return returnType;	
+	}
 }
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java	(working copy)
@@ -70,8 +70,12 @@
  * Reads ResponseMsgCtx ->MessageCtx->Message->XMLPart.
  * Converts that to JAXBlock using JAXBBlockFactory and returns the BO from this JAXBBlock.
  * 
- * isWrapped() != true and DocLiteral;
- * TBD
+ * isWrapped() != true and DocLiteral then
+ * ProxyHandler creates the JAXBBlock for the input request creates a 
+ * MessageContext that is then used by IbvocationController to invoke.
+ * Response is read and return object is derived using @Webresult annotation.
+ * A JAXBBlock is created from the Response and the BO from JAXBBlock is
+ * returned.  
  * 
  * RPCLiteral 
  * TBD
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/DocLitProxyHandler.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/DocLitProxyHandler.java	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/DocLitProxyHandler.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.soap.SOAPBody;
 import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
@@ -56,6 +57,7 @@
 
 public class DocLitProxyHandler extends BaseProxyHandler {
 	private static Log log = LogFactory.getLog(DocLitProxyHandler.class);
+	private static int SIZE = 1;
 	/**
 	 * @param pd
 	 * @param delegate
@@ -68,8 +70,11 @@
 	protected MessageContext createRequest(Method method, Object[] args) throws ClassNotFoundException, JAXBWrapperException, JAXBException, MessageException, javax.xml.stream.XMLStreamException {
 		MessageContext requestCtx = null;
 		if(isDocLitWrapped()){
-			requestCtx = createDocLitWrappedRequest(method, args);
+			return createDocLitWrappedRequest(method, args);
 		}
+		if(isDocLitBare()){
+			return createDocLitNONWrappedRequest(method, args);
+		}
 		return requestCtx;
 	}
 
@@ -77,8 +82,11 @@
 	protected Object createResponse(Method method, MessageContext responseContext) throws IllegalAccessException, ClassNotFoundException, JAXBWrapperException, JAXBException, javax.xml.stream.XMLStreamException, MessageException, IntrospectionException, NoSuchFieldException, InvocationTargetException{
 		Object result = null;
 		if(isDocLitWrapped()){
-			 result = createDocLitWrappedResponse(method, responseContext);
+			return createDocLitWrappedResponse(method, responseContext);
 		}
+		if(isDocLitBare()){
+			return createDocLitNONWrappedResponse(method, responseContext);
+		}
 		return result;
 	}
 
@@ -95,12 +103,8 @@
 	 * @throws MessageException
 	 * @throws javax.xml.stream.XMLStreamException
 	 */
-	//TODO Refactor this once OperationDescription is implemented.
 	private MessageContext createDocLitWrappedRequest(Method method, Object[] objects)throws ClassNotFoundException, JAXBWrapperException, JAXBException, MessageException, javax.xml.stream.XMLStreamException{
-		/*TODO : getOperationDesc from method name
-		 * and call 
-		 * createDocLitWrapperRequest(od, values);
-		 */
+		
 		Class wrapperClazz = proxyDescriptor.getRequestWrapperClass(isAsync());
 		ArrayList<String> names = proxyDescriptor.getParamNames();
 		String localName = proxyDescriptor.getResponseWrapperLocalName();
@@ -117,7 +121,38 @@
 		return requestCtx;
 		
 	}
+	
+	
 	/**
+	 * CreateDocLitNONWrappedRequest creates a request message context. The input object to a non wrapped wsdl will be a object (mainly a JAXB Object) that will
+	 * have all the payload data or method parameter data already setup. So the message context will be created by converting input object in to a JAXBBlock and
+	 * attaching the Block Message to soap body.
+	 * @param method
+	 * @param objects
+	 * @return
+	 */
+	private MessageContext createDocLitNONWrappedRequest(Method method, Object[] objects) throws JAXBException, MessageException, XMLStreamException{
+		JAXBContext ctx = null;
+		Object requestObject = null;
+		ArrayList<String> names = proxyDescriptor.getParamNames();
+		Map<String, Object> values = getParamValues(names, objects);
+		if(names.size()> SIZE || values.size() > SIZE){
+			throw ExceptionFactory.makeWebServiceException("As per WS-I compliance, Multi part WSDL not allowed for Doc/Lit NON Wrapped request, Method invoked has multiple input parameter");
+		}
+		for(String name:names){
+			requestObject = values.get(name);
+			if(requestObject == null){
+				throw ExceptionFactory.makeWebServiceException("Method Input parameter for NON Wrapped Request cannot be null");
+			}
+		}
+			
+		ctx = JAXBContext.newInstance(new Class[]{requestObject.getClass()});
+		Block reqBlock = createJAXBBlock(requestObject, ctx);
+		MessageContext requestCtx = initializeRequest(reqBlock);
+		return requestCtx;
+	}
+	
+	/**
 	 * CreateDocLitWrappedResponse creates return result that client expects from the method call. It reads response wrapper annotation then reads OM from the
 	 * response message context and creates JAXBBlock from the OMElement on messageContext. It then reads the webresult annotation to gather the return parameter
 	 * name and creates the result object for it by reading the property object from JAXBBlock's business object using PropertyDescriptor. 
@@ -134,23 +169,12 @@
 	 * @throws NoSuchFieldException
 	 * @throws InvocationTargetException
 	 */
-//	TODO Refactor this once OperationDescription is implemented.
+
 	private Object createDocLitWrappedResponse(Method method, MessageContext response)throws IllegalAccessException, ClassNotFoundException, JAXBWrapperException, JAXBException, javax.xml.stream.XMLStreamException, MessageException, IntrospectionException, NoSuchFieldException, InvocationTargetException{
 		Class wrapperClazz = proxyDescriptor.getResponseWrapperClass(isAsync());
 		String resultName = proxyDescriptor.getWebResultName(isAsync());
 		JAXBContext ctx = JAXBContext.newInstance(new Class[]{wrapperClazz});
-		//FIXME: I should go away from using messageAsOM when MessageContext start to return jaxbBlock!!
-		/*
-		OMElement om = response.getMessageAsOM();
-		if(om instanceof SOAPEnvelope){
-			SOAPEnvelope env =(SOAPEnvelope) om;
-			SOAPBody body = env.getBody();
-			om = body.getFirstElement();
-		}
 		
-		Block resBlock = createJAXBBlock(om, ctx);
-		*/
-		
 		// Get a JAXBBlockFactory instance.  We'll need this to get the JAXBBlock
         // out of the Message
         JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
@@ -159,14 +183,37 @@
         Block resBlock = responseMsg.getBodyBlock(0, ctx, factory);
 		Object bo = resBlock.getBusinessObject(true);
 		
-		//if wrapperClazz is assignable from bo then return bo;
+		//if ReturnType/WrapperClass is assignable from bo then return bo;
 		if(resultName==null && wrapperClazz.isAssignableFrom(bo.getClass())){
 			return bo;
 		}
+		
+		//if ReturnType is not of same type as JAXBBlock business Object then I will look for resultName in Business Object and return that.
+		return getWebResultObject(wrapperClazz, bo, resultName);
+			
+	}
 	
-		return getWebResultObject(wrapperClazz, bo, resultName);
+	/**
+	 * CreateDocLitNONWrappedResponse creates return result that client expects from the method call. This method reads the method return type
+	 * or uses webResult annotation and creates JAXBBlock from the response context and returns the business object associated with the JAXBBlock.
+	 * @param method
+	 * @param response
+	 * @return
+	 */
+	private Object createDocLitNONWrappedResponse(Method method, MessageContext response) throws IllegalAccessException, JAXBException, MessageException, XMLStreamException, InvocationTargetException, IntrospectionException, NoSuchFieldException{
 		
-		
+		Message responseMsg = response.getMessage();
+		Class returnType = proxyDescriptor.getReturnType(isAsync());
+		JAXBContext ctx = JAXBContext.newInstance(returnType);
+		JAXBBlockFactory factory = (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
+		Block resBlock = responseMsg.getBodyBlock(0, ctx, factory);
+		Object bo = resBlock.getBusinessObject(true);
+		if(returnType.isAssignableFrom(bo.getClass())){
+			return bo;
+		}
+		//If returnType is different than JAXBBlock Business Object, I will look for resultName in BusinessObject and return that.
+		String resultName = proxyDescriptor.getWebResultName(isAsync());
+		return getWebResultObject(returnType, bo, resultName);
 	}
 	
 	private Block createJAXBBlock(Object jaxbObject, JAXBContext context) throws MessageException{
@@ -225,7 +272,7 @@
 		}
 		
 		// TODO Shouldn't this be a WebServiceException ?
-		throw new NoSuchFieldException(Messages.getMessage("noWebResultForProperty", propertyName, returnClazz.getName()));
+		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("noWebResultForProperty", propertyName, returnClazz.getName()));
 	}
 	//TODO: refactor this once PropertyDescriptor is implemented.
 	private Map<String, Object> getParamValues(ArrayList<String> names, Object[] objects){
@@ -279,13 +326,13 @@
 		
 	}
 	
-	private boolean isDocLitRaw(){
+	private boolean isDocLitBare(){
 		/* TODO: if(EndPoinInterfaceDescriptor.clientCall == Doc/literal) && OperationDescriptor.isWrapped() == false){ 
 		 * return true; 
 		 * else
 		 * return false;
 		 */
-		return false;
+		return proxyDescriptor.isClazzDocLitBare();
 	}
 	
 	private boolean isDocLitWrapped(){
@@ -294,6 +341,7 @@
 		 * else
 		 * return false;
 		 */
-		return true;
+		return proxyDescriptor.isClazzDocLitWrapped();
 	}
+	
 }
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/javax/jws/soap/SOAPBinding.java
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/javax/jws/soap/SOAPBinding.java	(revision 587)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/src/javax/jws/soap/SOAPBinding.java	(working copy)
@@ -8,7 +8,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-@Target (ElementType.METHOD)
+@Target ({ElementType.TYPE, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface SOAPBinding {
 	public enum Style{DOCUMENT, RPC};
Index: C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test-resources/wsdl/proxyDocLitnonWrapped.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test-resources/wsdl/proxyDocLitnonWrapped.wsdl	(revision 0)
+++ C:/WebServices/Eclipse/workspace/ibm_cs_WSFP_beta/modules/jaxws/test-resources/wsdl/proxyDocLitnonWrapped.wsdl	(revision 0)
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+	This is a copy of proxy_doclitwr.wsdl. Service and port names
+	have been chnaged to be Alpha compatible and endpoint address
+	has been changed
+-->
+<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
+	xmlns:tns="http://doclitnonwrapped.proxy.test.org"
+	xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="proxy"
+	targetNamespace="http://doclitnonwrapped.proxy.test.org">
+	
+	<wsdl:types>
+		<xsd:schema
+			targetNamespace="http://doclitnonwrapped.proxy.test.org"
+			xmlns:tns="http://doclitnonwrapped.proxy.test.org"
+			xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+
+			<xsd:element name="MyFault" type="xsd:string" />
+			
+			
+			
+			<xsd:element name="invoke">
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="invoke_str" type="xsd:string" />
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>			
+			
+			<xsd:element name="ReturnType">
+				<xsd:complexType>
+					<xsd:sequence>
+						<xsd:element name="return_str" type="xsd:string" />
+					</xsd:sequence>
+				</xsd:complexType>
+			</xsd:element>				
+
+		</xsd:schema>
+	</wsdl:types>
+
+	
+	
+	<wsdl:message name="invokeRequest">
+		<wsdl:part name="allByMyself" element="tns:invoke" />
+	</wsdl:message>
+
+	<wsdl:message name="invokeResponse">
+		<wsdl:part name="allByMyself" element="tns:ReturnType" />
+	</wsdl:message>	
+	
+	<wsdl:portType name="DocLitnonWrappedProxy">
+
+		
+		<wsdl:operation name="invoke">
+			<wsdl:input message="tns:invokeRequest" />
+			<wsdl:output message="tns:invokeResponse" />
+		</wsdl:operation>		
+			
+	</wsdl:portType>
+	
+	<wsdl:binding name="ProxyDocLitnonWrapped" type="tns:DocLitnonWrappedProxy">
+		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />		
+		<wsdl:operation name="invoke">
+			<soap:operation soapAction="http://doclitnonwrapped.proxy.test.org/invokeReturn" />
+			<wsdl:input>
+				<soap:body use="literal"  />
+			</wsdl:input>
+			<wsdl:output>
+				<soap:body use="literal"  />
+			</wsdl:output>
+	
+		</wsdl:operation>		
+	
+	</wsdl:binding>
+	
+	<wsdl:service name="ProxyDocLitUnwrappedService">
+		<wsdl:port binding="tns:ProxyDocLitnonWrapped" name="ProxyDocLitnonWrappedPort">
+			<soap:address location="http://@HOST@:@PORT@/jaxws.proxy/services/ProxyDocLitUnwrappedService" />
+		</wsdl:port>
+	</wsdl:service>
+	
+</wsdl:definitions>
\ No newline at end of file
