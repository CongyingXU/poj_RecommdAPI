Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/JAXBDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/JAXBDispatch.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/JAXBDispatch.java	(working copy)
@@ -31,82 +31,78 @@
 public class JAXBDispatch extends TestCase {
 
     private Dispatch<Object> dispatch;
-    private EchoString request;
     
     public JAXBDispatch(String name) {
         super(name);
     }
     
-    public void setUp() {
+    public void setUp() throws Exception {
         //Create the Service object
         Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
         svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
         
         //Create the JAX-B Dispatch object
         JAXBContext jbc = null;
-        try {
-            jbc = JAXBContext.newInstance("test");
-            dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
-                    jbc, Service.Mode.PAYLOAD);
-        } catch (Exception e) {
-            e.printStackTrace();
-            fail("[ERROR] - could not create JAXBContext");
-        }
-        
-        //Create the input param
-        ObjectFactory factory = new ObjectFactory();
-        request = factory.createEchoString(); 
+        jbc = JAXBContext.newInstance("test");
+        dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                jbc, Service.Mode.PAYLOAD);
     }
     
-    public void testSync() {
+    public void testSync() throws Exception {
+        System.out.println("---------------------------------------");
         System.out.println("test: " + getName());
- 
+
+        // Create the input param
+        ObjectFactory factory = new ObjectFactory();
+        EchoString request = factory.createEchoString();         
         request.setInput("SYNC JAXB TEST");
-        try {
-            System.out.println(">> Invoking sync Dispatch with JAX-B Parameter");
-            EchoStringResponse response = (EchoStringResponse) dispatch.invoke(request);
-            
-            assertTrue("[ERROR] - Response object was null", response != null);
-            assertTrue("[ERROR] - No content in response object", response.getEchoStringReturn() != null);
-            assertTrue("[ERROR] - Zero length content in response", response.getEchoStringReturn().length() > 0);
-            
-            System.out.println(">> Response [" + response.getEchoStringReturn() + "]");
-        } catch(WebServiceException e) {
-            e.printStackTrace();
-            fail("[ERROR] - Sync Dispatch invocation failed");
-        }
+        
+        // Invoke the Dispatch<Object>
+        System.out.println(">> Invoking sync Dispatch with JAX-B Parameter");
+        EchoStringResponse response = (EchoStringResponse) dispatch.invoke(request);
+        
+        assertNotNull(response);
+        
+        System.out.println(">> Response content: " + response.getEchoStringReturn());
+        
+        assertTrue("[ERROR] - Response object was null", response != null);
+        assertTrue("[ERROR] - No content in response object", response.getEchoStringReturn() != null);
+        assertTrue("[ERROR] - Zero length content in response", response.getEchoStringReturn().length() > 0);
     }
     
-    public void testAysnc() {
+    public void testAysnc() throws Exception {
+        System.out.println("---------------------------------------");
         System.out.println("test: " + getName());
         
+        // Create the input param
+        ObjectFactory factory = new ObjectFactory();
+        EchoString request = factory.createEchoString();         
         request.setInput("ASYNC(CALLBACK) JAXB TEST");
-        try {
-            JAXBCallbackHandler<Object> callback = new JAXBCallbackHandler<Object>();
-            
-            System.out.println(">> Invoking async(callback) Dispatch with JAX-B Parameter");
-            Future<?> monitor = dispatch.invokeAsync(request, callback);
-            
-            while (!monitor.isDone()) {
-                 System.out.println(">> Async invocation still not complete");
-                 Thread.sleep(1000);
-            }
-        } catch(Exception e) {
-            e.printStackTrace();
-            fail("[ERROR] - Async(callback) Dispatch invocation failed");
+        
+        // Create the callback for async responses
+        JAXBCallbackHandler<Object> callback = new JAXBCallbackHandler<Object>();
+        
+        // Invoke the Dispatch<Object> asynchronously
+        System.out.println(">> Invoking async(callback) Dispatch with JAX-B Parameter");
+        Future<?> monitor = dispatch.invokeAsync(request, callback);
+        
+        while (!monitor.isDone()) {
+             System.out.println(">> Async invocation still not complete");
+             Thread.sleep(1000);
         }
     }
     
-    public void testOneWay() {
+    public void testOneWay() throws Exception {
+        System.out.println("---------------------------------------");
         System.out.println("test: " + getName());
 
+        // Create the input param
+        ObjectFactory factory = new ObjectFactory();
+        EchoString request = factory.createEchoString();         
         request.setInput("ONE-WAY JAXB TEST");
-        try {
-            System.out.println(">> Invoking one-way Dispatch with JAX-B Parameter");
-            dispatch.invokeOneWay(request);
-        } catch(WebServiceException e) {
-            e.printStackTrace();
-            fail("[ERROR] - One-way Dispatch invocation failed");
-        }
+        
+        // Invoke the Dispatch<Object> one-way
+        System.out.println(">> Invoking one-way Dispatch with JAX-B Parameter");
+        dispatch.invokeOneWay(request);
     }
 }
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestSuite.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestSuite.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestSuite.java	(working copy)
@@ -28,7 +28,7 @@
 	
     public static TestSuite addTestSuites(TestSuite suite) {
         suite.addTestSuite(StringDispatch.class);
-        suite.addTestSuite(SourceDispatch.class);
+        suite.addTestSuite(StreamSourceDispatch.class);
         suite.addTestSuite(DOMSourceDispatch.class);
         suite.addTestSuite(SAXSourceDispatch.class);
         // FIXME: Add this test in
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -35,6 +35,10 @@
 import org.apache.axis2.proxy.ProxyTests;
 
 public class JAXWSTest extends TestCase {
+    
+    static {
+        //org.apache.log4j.BasicConfigurator.configure();
+    }
     /**
      * suite
      * @return
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DOMSourceDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DOMSourceDispatch.java	(revision 424902)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DOMSourceDispatch.java	(working copy)
@@ -17,230 +17,199 @@
 package org.apache.axis2.jaxws;
 
 import java.io.ByteArrayInputStream;
-import java.io.StringWriter;
-import java.util.Map;
 import java.util.concurrent.Future;
 
-import javax.xml.namespace.QName;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.transform.Result;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
 import javax.xml.transform.Source;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.Service;
-import javax.xml.ws.Service.Mode;
 
 import junit.framework.TestCase;
 
-import org.apache.axis2.jaxws.CallbackHandler;
+import org.apache.axis2.jaxws.message.util.Reader2Writer;
 import org.w3c.dom.Document;
+import org.w3c.dom.Node;
 
+/**
+ * This class tests the JAX-WS Dispatch with various forms of the 
+ * javax.xml.transform.dom.DOMSource 
+ */
 public class DOMSourceDispatch extends TestCase{
-	private String urlHost = "localhost";
-    private String urlPort = "8080";
-    private String urlSuffix = "/axis2/services/EchoService";
-    private String endpointUrl = "http://" + urlHost + ":" + urlPort + urlSuffix;
-	private String soapMessage ="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString></soap:Body></soap:Envelope>";
-	private String xmlString = "<ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString>";
-	private QName serviceQname = new QName("http://ws.apache.org/axis2", "EchoService");
-	private QName portQname = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
 
-  public void testSync() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
-			domFactory.setNamespaceAware(true);
-			Document domTree = domBuilder.parse(stream);
-			DOMSource srcStream = new DOMSource(domTree);
-			
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch");
-			DOMSource retVal = (DOMSource) dispatch.invoke(srcStream);
-			
-			assertNotNull("dispatch invoke returned null",retVal);
-			
-			StringWriter writer = new StringWriter();
-			Transformer trasformer = TransformerFactory.newInstance().newTransformer();
-			Result result = new StreamResult(writer);
-			trasformer.transform(retVal, result);
-			System.out.println(">> Response [" + writer.getBuffer().toString() + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
+    private static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+    
+    public void testSyncPayloadMode() throws Exception {
+		System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.PAYLOAD);
+        
+        // Create the DOMSource
+        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleBodyContent);
+        
+		System.out.println(">> Invoking sync Dispatch");
+		Source response = dispatch.invoke(request);
+		assertNotNull("dispatch invoke returned null",response);
+		
+        // Turn the Source into a String so we can check it
+        String responseText = createStringFromSource(response);        
+        System.out.println(responseText);
+        
+        // Check to make sure the content is correct
+        assertTrue(!responseText.contains("soap"));
+        assertTrue(!responseText.contains("Envelope"));
+        assertTrue(!responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));
 	}
 
-	// Not for Alpha
-	public void testAsyncPooling() {
-
+	public void testSyncMessageMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.MESSAGE);
+        
+        // Create the DOMSource
+        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleSoapMessage);
+        
+        System.out.println(">> Invoking sync Dispatch");
+        Source response = dispatch.invoke(request);
+        assertNotNull("dispatch invoke returned null",response);
+        
+        // Turn the Source into a String so we can check it
+        String responseText = createStringFromSource(response);        
+        System.out.println(responseText);
+        
+        // Check to make sure the content is correct
+        assertTrue(responseText.contains("soap"));
+        assertTrue(responseText.contains("Envelope"));
+        assertTrue(responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));
 	}
-	
-	public void testSyncWithMessageMode(){
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
-			Document domTree = domBuilder.parse(stream);
-			DOMSource srcStream = new DOMSource(domTree);
-			
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch with Message Mode");
-			DOMSource retVal = (DOMSource) dispatch.invoke(srcStream);
-			
-			assertNotNull("dispatch invoke returned null",retVal);
-			
-			StringWriter writer = new StringWriter();
-			Transformer trasformer = TransformerFactory.newInstance().newTransformer();
-			Result result = new StreamResult(writer);
-			trasformer.transform(retVal, result);
-			System.out.println(">> Response [" + writer.getBuffer().toString() + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
 
-	public void testAsyncCallbackWithMessageMode() {
-		try {
-			System.out.println("---------------------------------------");
-	        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-	        Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage
-					.getBytes());
-			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
-			Document domTree = domBuilder.parse(stream);
-			DOMSource srcStream = new DOMSource(domTree);
-			
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-	                endpointUrl);
-			
-	        System.out.println(">> Invoking async (callback) Dispatch");
-	        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-	        
-	            while (!monitor.isDone()) {
-	                System.out.println(">> Async invocation still not complete");
-	                Thread.sleep(1000);
-	            }
-	            
-	            //monitor.get();
-	        
-	        } catch (Exception e) {
-	            e.printStackTrace();
-	        }
-	}
-	/*
-	public void testSyncWithWSDL() {
-		try {
-			System.out.println("---------------------------------------");
-			 URL wsdlUrl = new URL(endpointUrl + "?wsdl");
-			Service svc = Service.create(wsdlUrl,serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.PAYLOAD);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			
-			String url = (String) requestContext.get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);
-            assertNotNull("ERROR: the URL should not be null", url);
+    public void testAsyncCallbackPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.PAYLOAD);
+        
+        // Create the DOMSource
+        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleBodyContent);
+
+        // Setup the callback for async responses
+        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
+        
+        System.out.println(">> Invoking async (callback) Dispatch");
+        Future<?> monitor = dispatch.invokeAsync(request, callbackHandler);
             
-            DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
-			Document domTree = domBuilder.parse(stream);
-			DOMSource srcStream = new DOMSource(domTree);
-			System.out.println(">> URL from WSDL [" + url + "]");
-			System.out.println(">> Invoking sync Dispatch with WSDL, Service and Port");
-			DOMSource retVal = (DOMSource) dispatch.invoke(srcStream);
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
+        }
+    }
+    
+    public void testAsyncCallbackMessageMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.MESSAGE);
+        
+        // Create the DOMSource
+        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleSoapMessage);
 
-			StringWriter writer = new StringWriter();
-			Transformer trasformer = TransformerFactory.newInstance().newTransformer();
-			Result result = new StreamResult(writer);
-			trasformer.transform(retVal, result);
-			System.out.println(">> Response [" + writer.getBuffer().toString() + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	*/
-	public void testAsyncCallback() {
-		try{
-			System.out.println("---------------------------------------");
-	        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-	        Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
-			Document domTree = domBuilder.parse(stream);
-			DOMSource srcStream = new DOMSource(domTree);
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-	                endpointUrl);
-			
-	        System.out.println(">> Invoking async (callback) Dispatch");
-	        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-	       
-	        while (!monitor.isDone()) {
-	            System.out.println(">> Async invocation still not complete");
-	            Thread.sleep(1000);
-	        }
-	            
-	            //monitor.get();
+        // Setup the callback for async responses
+        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
         
-        } catch (Exception e) {
-            e.printStackTrace();
+        System.out.println(">> Invoking async (callback) Dispatch");
+        Future<?> monitor = dispatch.invokeAsync(request, callbackHandler);
+	        
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
         }
 	}
+    
+    public void testOneWayPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.PAYLOAD);
 
-	public void testOneWay() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
-			Document domTree = domBuilder.parse(stream);
-			DOMSource srcStream = new DOMSource(domTree);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking One Way Dispatch");
-			dispatch.invokeOneWay(srcStream);
+        // Create the DOMSource
+        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleBodyContent);
 
-			
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
+        System.out.println(">> Invoking One Way Dispatch");
+        dispatch.invokeOneWay(request);
+    }
+    
+    public void testOneWayMessageMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.MESSAGE);
+
+        // Create the DOMSource
+        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleSoapMessage);
+
+        System.out.println(">> Invoking One Way Dispatch");
+        dispatch.invokeOneWay(request);
 	}
+    
+	/**
+     * Create a DOMSource with the provided String as the content
+     * @param input
+     * @return
+	 */
+    private DOMSource createDOMSourceFromString(String input) throws Exception {
+        byte[] bytes = input.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        
+        DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
+        domFactory.setNamespaceAware(true);
+        DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
+        Document domTree = domBuilder.parse(stream);
+        Node node = domTree.getDocumentElement();
+        
+        DOMSource domSource = new DOMSource(node);
+        return domSource;
+    }
+    
+    /**
+     * Create a String from the provided Source
+     * @param input
+     * @return
+     */
+    private String createStringFromSource(Source input) throws Exception {
+        XMLStreamReader reader = inputFactory.createXMLStreamReader(input);
+        Reader2Writer r2w = new Reader2Writer(reader);
+        String text = r2w.getAsString();
+        return text;
+    }
 }
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/SourceDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/SourceDispatch.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/SourceDispatch.java	(working copy)
@@ -1,230 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.util.Map;
-import java.util.concurrent.Future;
-
-import javax.xml.namespace.QName;
-import javax.xml.transform.Source;
-import javax.xml.transform.stream.StreamSource;
-import javax.xml.ws.BindingProvider;
-import javax.xml.ws.Dispatch;
-import javax.xml.ws.Service;
-import javax.xml.ws.Service.Mode;
-
-import org.apache.axis2.jaxws.CallbackHandler;
-
-import junit.framework.TestCase;
-
-public class SourceDispatch extends TestCase {
-	private String urlHost = "localhost";
-    private String urlPort = "8080";
-    private String urlSuffix = "/axis2/services/EchoService";
-    private String endpointUrl = "http://" + urlHost + ":" + urlPort + urlSuffix;
-	private String soapMessage ="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString></soap:Body></soap:Envelope>";
-	private String xmlString = "<ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString>";
-	private QName serviceQname = new QName("http://ws.apache.org/axis2", "EchoService");
-	private QName portQname = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
-
-  public void testSync() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			Source srcStream = new StreamSource((InputStream) stream);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch");
-			StreamSource retVal = (StreamSource) dispatch.invoke(srcStream);
-
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
-
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-	}
-
-	// Not for Alpha
-	public void testAsyncPooling() {
-
-	}
-	
-	public void testSyncWithMessageMode(){
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			Source srcStream = new StreamSource((InputStream) stream);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch with Message Mode");
-			StreamSource retVal = (StreamSource) dispatch.invoke(srcStream);
-
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
-
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-	}
-
-	public void testAsyncCallbackWithMessageMode() {
-		
-			System.out.println("---------------------------------------");
-	        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-	        Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage
-					.getBytes());
-			Source srcStream = new StreamSource((InputStream) stream);
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-	                endpointUrl);
-			
-	        System.out.println(">> Invoking async (callback) Dispatch");
-	        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-	        try {
-	            while (!monitor.isDone()) {
-	                System.out.println(">> Async invocation still not complete");
-	                Thread.sleep(1000);
-	            }
-	            
-	            //monitor.get();
-	        
-	        } catch (InterruptedException e) {
-	            e.printStackTrace();
-                fail("[ERROR] - Dispatch invocation failed.");
-	        }
-	}
-	/*
-	public void testSyncWithWSDL() {
-		try {
-			System.out.println("---------------------------------------");
-			 URL wsdlUrl = new URL(endpointUrl + "?wsdl");
-			Service svc = Service.create(wsdlUrl,serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.PAYLOAD);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			
-			String url = (String) requestContext.get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);
-            assertNotNull("ERROR: the URL should not be null", url);
-            
-			Source srcStream = new StreamSource((InputStream) stream);
-			System.out.println(">> URL from WSDL [" + url + "]");
-			System.out.println(">> Invoking sync Dispatch with WSDL, Service and Port");
-			StreamSource retVal = (StreamSource) dispatch.invoke(srcStream);
-
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
-
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-		 
-	}
-	*/
-  
-	public void testAsyncCallback() {
-		System.out.println("---------------------------------------");
-        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-        Service svc = Service.create(serviceQname);
-		svc.addPort(portQname, null, endpointUrl);
-		Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-				null);
-		ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-				.getBytes());
-		Source srcStream = new StreamSource((InputStream) stream);
-		Map<String, Object> requestContext = dispatch.getRequestContext();
-		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-                endpointUrl);
-		
-        System.out.println(">> Invoking async (callback) Dispatch");
-        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-        try {
-            while (!monitor.isDone()) {
-                System.out.println(">> Async invocation still not complete");
-                Thread.sleep(1000);
-            }
-            
-            //monitor.get();
-        
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-        }
-	}
-
-	public void testOneWay() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			Source srcStream = new StreamSource((InputStream) stream);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking One Way Dispatch");
-			dispatch.invokeOneWay(srcStream);
-
-			
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-	}
-}
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/StringDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/StringDispatch.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/StringDispatch.java	(working copy)
@@ -16,214 +16,150 @@
  */
 package org.apache.axis2.jaxws;
 
-import java.util.Map;
 import java.util.concurrent.Future;
 
-import javax.xml.namespace.QName;
-import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.Service;
-import javax.xml.ws.WebServiceException;
-import javax.xml.ws.Service.Mode;
 
-import org.apache.axis2.jaxws.CallbackHandler;
-
 import junit.framework.TestCase;
 
 public class StringDispatch extends TestCase {
 
-	private String urlHost = "localhost";
-    private String urlPort = "8080";
-    private String urlSuffix = "/axis2/services/EchoService";
-    private String endpointUrl = "http://" + urlHost + ":" + urlPort + urlSuffix;
-    private String soapMessage ="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" ><soap:Body><ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString></soap:Body></soap:Envelope>";
-    private String xmlString = "<ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString>";
-    private QName serviceQname = new QName("http://ws.apache.org/axis2", "EchoService");
-    private QName portQname = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
-    
-    /*
-     * Invoke a sync Dispatch with no WSDL configuration
+    /**
+     * Invoke a sync Dispatch<String> in PAYLOAD mode
      */
-    public void testSync() {
+    public void testSyncPayloadMode() throws Exception {
         System.out.println("---------------------------------------");
-        Service svc = Service.create(serviceQname);
-        svc.addPort(portQname,null,endpointUrl);
-        try{
-			Dispatch<String> dispatch = svc
-					.createDispatch(portQname, String.class, null);
-	        
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-			 		endpointUrl);
-			System.out.println(">> Invoking sync Dispatch");
-	        String retVal = dispatch.invoke(xmlString);
-	        System.out.println(">> Response [" + retVal + "]");
-        }catch(WebServiceException e){
-        	e.printStackTrace();
-          fail(e.toString());
-        }
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                String.class, Service.Mode.PAYLOAD);
+        
+        // Invoke the Dispatch
+        System.out.println(">> Invoking sync Dispatch");
+        String response = dispatch.invoke(DispatchTestConstants.sampleBodyContent);
+
+        assertNotNull("dispatch invoke returned null", response);
+        System.out.println(response);
+        
+        // Check to make sure the content is correct
+        assertTrue(!response.contains("soap"));
+        assertTrue(!response.contains("Envelope"));
+        assertTrue(!response.contains("Body"));
+        assertTrue(response.contains("echoStringResponse"));
 	}
     
-    
-    
-    /*
-     * Invoke a sync Dispatch using the remote WSDL document to provide
-     * configuration
+    /**
+     * Invoke a sync Dispatch<String> in MESSAGE mode
      */
-    /*
-    public void testSyncWithWSDL() {
+    public void testSyncWithMessageMode() throws Exception {
         System.out.println("---------------------------------------");
-        try {
-            URL wsdlUrl = new URL(endpointUrl + "?wsdl");
-            // TODO (NLG): Also add a failing test if the service qname is null
-            Service svc = Service.create(wsdlUrl, serviceQname);
-            Dispatch<String> dispatch = svc.createDispatch(portQname, String.class, Service.Mode.PAYLOAD);
-            
-            Map<String, Object> requestContext = dispatch.getRequestContext();
-            String url = (String) requestContext.get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);
-            assertNotNull("ERROR: the URL should not be null", url);
-            
-            assertTrue("ERROR: incorrect WSDL URL", url.endsWith(urlSuffix));
-            
-            System.out.println(">> URL from WSDL [" + url + "]");
-            System.out.println(">> Invoking sync Dispatch");
-            String retVal = dispatch.invoke(xmlString);
-            System.out.println(">> Response [" + retVal + "]");
-        } catch (MalformedURLException e) {
-            e.printStackTrace();
-        }catch(WebServiceException e){
-        	e.printStackTrace();
-        }
-    }
-    */
-    /*
-     * Invoke a sync Dispatch with Message Mode configuration
-     */
-    public void testSyncWithMessageMode() {
-    	System.out.println("---------------------------------------");
-    	try{
-        Service svc = Service.create(serviceQname);
-        svc.addPort(portQname, null, endpointUrl);
-		Dispatch<String> dispatch = svc
-				.createDispatch(portQname, String.class, Mode.MESSAGE);
-		Map<String, Object> requestContext = dispatch.getRequestContext();
-		//requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-		// 		endpointUrl);
-		System.out.println(">> Invoking sync Dispatch with message mode");
-        String retVal = dispatch.invoke(soapMessage);
-        System.out.println(">> Response [" + retVal + "]");
-    	}catch(WebServiceException e){
-    		e.printStackTrace();
-    		fail(e.toString());
-    	}
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                String.class, Service.Mode.MESSAGE);
+        
+        // Invoke the Dispatch
+        System.out.println(">> Invoking sync Dispatch");
+        String response = dispatch.invoke(DispatchTestConstants.sampleSoapMessage);
+
+        assertNotNull("dispatch invoke returned null", response);
+        System.out.println(response);
+        
+        // Check to make sure the content is correct
+        assertTrue(response.contains("soap"));
+        assertTrue(response.contains("Envelope"));
+        assertTrue(response.contains("Body"));
+        assertTrue(response.contains("echoStringResponse"));
 	}
     
-    /*
-    //Not for Alpha Use
-	public void testAsyncPooling() {
-		Service svc = Service.create(null);
-		String xmlString = "<test:getBookPrice xmlns:test=\"http://BookPrice/\"><test:ISBN>10</test:ISBN></test:getBookPrice>";
-		Dispatch<String> dispatch = svc
-				.createDispatch(null, String.class, null);
-		Map<String, Object> requestContext = dispatch.getRequestContext();
-		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-				"http://localhost:8080/axis2/services/BookPrice");
-		Response res = dispatch.invokeAsync(xmlString);
-		try {
-			while (!res.isDone()) {
-				Thread.sleep(10);
-			}
-			String retVal = (String) res.get();
-			System.out.println(retVal);
-		} catch (Exception e) {
-			e.printStackTrace();
-			fail();
-		}
-	}
-    */
-
-	/*
-     * Invoke a Dispatch using the async callback API and use the 
-     * same thread to wait for the response.
+	/**
+     * Invoke a Dispatch<String> using the async callback API in PAYLOAD mode
 	 */
-    public void testAsyncCallback() {
-    
+    public void testAsyncCallbackPayloadMode() throws Exception {
         System.out.println("---------------------------------------");
-        try{
-	        CallbackHandler<String> callbackHandler = new CallbackHandler<String>();
-			    Service svc = Service.create(serviceQname);
-			    svc.addPort(portQname, null, endpointUrl);
-			    Dispatch<String> dispatch = svc
-					  .createDispatch(portQname, String.class, null);
-			    Map<String, Object> requestContext = dispatch.getRequestContext();
-			    requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-			        endpointUrl);
-			
-	        System.out.println(">> Invoking async (callback) Dispatch");
-	        Future<?> monitor = dispatch.invokeAsync(xmlString, callbackHandler);
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                String.class, Service.Mode.PAYLOAD);
+
+        // Create the callback for async responses
+        CallbackHandler<String> callbackHandler = new CallbackHandler<String>();
+        
+        System.out.println(">> Invoking async (callback) Dispatch");
+        Future<?> monitor = dispatch.invokeAsync(DispatchTestConstants.sampleBodyContent, callbackHandler);
 	        
-	        while (!monitor.isDone()) {
-	             System.out.println(">> Async invocation still not complete");
-	             Thread.sleep(1000);
-	        }
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-            fail();
-        }catch(WebServiceException e){
-        	e.printStackTrace();
-        	fail(e.toString());
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
         }
 	}
     
-    /*
-     * Invoke a Async Dispatch with Message Mode configuration
+    /**
+     * Invoke a Dispatch<String> using the async callback API in MESSAGE mode
      */
-    public void testAsyncCallbackWithMessageMode() {
-    	 System.out.println("---------------------------------------");
-    	 try{
-	        CallbackHandler<String> callbackHandler = new CallbackHandler<String>();
-	 		Service svc = Service.create(serviceQname);
-	 		svc.addPort(portQname, null, endpointUrl);
-	 		Dispatch<String> dispatch = svc
-	 				.createDispatch(portQname, String.class, Mode.MESSAGE);
-	 		Map<String, Object> requestContext = dispatch.getRequestContext();
-	 		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-	                 endpointUrl);
-	 		
-	        System.out.println(">> Invoking async (callback) Dispatch with Message Mode");
-	        Future<?> monitor = dispatch.invokeAsync(soapMessage, callbackHandler);
-	    
-            while (!monitor.isDone()) {
-                System.out.println(">> Async invocation still not complete");
-                Thread.sleep(1000);
-            }
-         } catch (InterruptedException e) {
-             e.printStackTrace();
-             fail();
-         }catch(WebServiceException e){
-        	 e.printStackTrace();
-        	 fail();
-         }
+    public void testAsyncCallbackMessageMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                String.class, Service.Mode.MESSAGE);
+
+        // Create the callback for async responses
+        CallbackHandler<String> callbackHandler = new CallbackHandler<String>();
+        
+        System.out.println(">> Invoking async (callback) Dispatch with Message Mode");
+        Future<?> monitor = dispatch.invokeAsync(DispatchTestConstants.sampleSoapMessage, callbackHandler);
+    
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
+        }
 	}
 	
-	/*
-     * Invoke a Dispatch one-way 
+    /**
+     * Invoke a Dispatch<String> one-way in PAYLOAD mode 
+     */
+    public void testOneWayPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                String.class, Service.Mode.PAYLOAD);
+
+        System.out.println(">> Invoking one-way Dispatch");
+        dispatch.invokeOneWay(DispatchTestConstants.sampleBodyContent);
+    }
+    
+    /**
+     * Invoke a Dispatch<String> one-way in MESSAGE mode 
 	 */
-    public void testOneWay(){
+    public void testOneWayMessageMode() throws Exception {
         System.out.println("---------------------------------------");
-        try{
-	        Service svc = Service.create(serviceQname);
-	        svc.addPort(portQname, null, endpointUrl);
-	        Dispatch<String> dispatch = svc
-					.createDispatch(portQname, String.class, null);
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking one-way Dispatch");
-	        dispatch.invokeOneWay(xmlString);
-        }catch(WebServiceException e){
-        	e.printStackTrace();
-        	fail();
-        }
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                String.class, Service.Mode.MESSAGE);
+
+        System.out.println(">> Invoking one-way Dispatch");
+        dispatch.invokeOneWay(DispatchTestConstants.sampleSoapMessage);
 	}
 }
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/CallbackHandler.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/CallbackHandler.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/CallbackHandler.java	(working copy)
@@ -18,7 +18,10 @@
 
 import java.io.StringWriter;
 
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
 import javax.xml.transform.Result;
+import javax.xml.transform.Source;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
@@ -28,6 +31,8 @@
 import javax.xml.ws.AsyncHandler;
 import javax.xml.ws.Response;
 
+import org.apache.axis2.jaxws.message.util.Reader2Writer;
+
 public class CallbackHandler<T> implements AsyncHandler <T> {
 
     public void handleResponse(Response response) {
@@ -38,40 +43,16 @@
             if(res instanceof String){
                 System.out.println("Response [" + res + "]");
             }
-            else if(res instanceof SAXSource){
-            	
-    			SAXSource retVal = (SAXSource)res;
-    			StringBuffer buffer = new StringBuffer();
-    			byte b;
-    			while ((b = (byte) retVal.getInputSource().getByteStream().read()) != -1) {
-    				char c = (char) b;
-    				buffer.append(c);
-
-    			}
-    			System.out.println(">> Response [" + buffer + "]");
+            else if(Source.class.isAssignableFrom(res.getClass())){
+                Source source = (Source) res;
+                
+                XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+                XMLStreamReader reader = inputFactory.createXMLStreamReader(source);
+                Reader2Writer r2w = new Reader2Writer(reader);
+                String responseText = r2w.getAsString();
+                
+                System.out.println(responseText);
             }
-            else if(res instanceof StreamSource){
-            	StreamSource retVal = (StreamSource) res;
-
-    			byte b;
-    			StringBuffer buffer = new StringBuffer();
-    			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-    				char c = (char) b;
-    				buffer.append(c);
-
-    			}
-    			System.out.println(">> Response [" + buffer + "]");
-            }
-            else if(res instanceof DOMSource){
-            	DOMSource retVal = (DOMSource) res;
-
-            	StringWriter writer = new StringWriter();
-    			Transformer trasformer = TransformerFactory.newInstance().newTransformer();
-    			Result result = new StreamResult(writer);
-    			trasformer.transform(retVal, result);
-    			StringBuffer buffer = writer.getBuffer();
-    			System.out.println(">> Response [" + buffer + "]");
-            }
         }catch(Exception e){
             e.printStackTrace();
         }
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestConstants.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestConstants.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestConstants.java	(working copy)
@@ -20,7 +20,25 @@
 
 public class DispatchTestConstants {
 
-    public static String URL = "http://localhost:8080/axis2/services/EchoService";
-    public static QName QNAME_SERVICE = new QName("http://ws.apache.org/axis2", "EchoService");
-    public static QName QNAME_PORT = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
+    public static final String URL = "http://localhost:8080/axis2/services/EchoService";
+    public static final QName QNAME_SERVICE = new QName("http://ws.apache.org/axis2", "EchoService");
+    public static final QName QNAME_PORT = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
+
+    private static final String sampleSoapEnvelopeHeader = 
+        "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + 
+        "<soap:Body>";
+    
+    private static final String sampleSoapEnvelopeFooter =
+        "</soap:Body>" + 
+        "</soap:Envelope>";
+    
+    public static final String sampleBodyContent = 
+        "<ns1:echoString xmlns:ns1=\"http://test\">" + 
+        "<ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input>" + 
+        "</ns1:echoString>";
+    
+    public static final String sampleSoapMessage = 
+        sampleSoapEnvelopeHeader +
+        sampleBodyContent + 
+        sampleSoapEnvelopeFooter;
 }
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/SAXSourceDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/SAXSourceDispatch.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/SAXSourceDispatch.java	(working copy)
@@ -17,209 +17,190 @@
 package org.apache.axis2.jaxws;
 
 import java.io.ByteArrayInputStream;
-import java.util.Map;
 import java.util.concurrent.Future;
 
-import javax.xml.namespace.QName;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
 import javax.xml.transform.Source;
 import javax.xml.transform.sax.SAXSource;
-import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.Service;
-import javax.xml.ws.Service.Mode;
 
 import junit.framework.TestCase;
 
-import org.apache.axis2.jaxws.CallbackHandler;
+import org.apache.axis2.jaxws.message.util.Reader2Writer;
 import org.xml.sax.InputSource;
 
+/**
+ * This class tests the JAX-WS Dispatch<Source> with content in various 
+ * forms of a javax.xml.transform.sax.SAXSource.
+ */
 public class SAXSourceDispatch extends TestCase{
-	private String urlHost = "localhost";
-    private String urlPort = "8080";
-    private String urlSuffix = "/axis2/services/EchoService";
-    private String endpointUrl = "http://" + urlHost + ":" + urlPort + urlSuffix;
-	private String soapMessage ="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString></soap:Body></soap:Envelope>";
-	private String xmlString = "<ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString>";
-	private QName serviceQname = new QName("http://ws.apache.org/axis2", "EchoService");
-	private QName portQname = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
 
-	public void testSync() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			InputSource input = new InputSource(stream);
-			Source srcStream = new SAXSource(input);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch");
-			SAXSource retVal = (SAXSource) dispatch.invoke(srcStream);
-			assertNotNull("dispatch invoke returned null",retVal);
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputSource().getByteStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
-
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
+    private static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+    
+	public void testSyncPayloadMode() throws Exception {
+		System.out.println("---------------------------------------");
+		System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+		svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+		Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.PAYLOAD);
+        
+        // Create a SAXSource out of the string content
+        byte[] bytes = DispatchTestConstants.sampleBodyContent.getBytes();
+		ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        InputSource input = new InputSource(stream);
+		Source request = new SAXSource(input);
+		
+        System.out.println(">> Invoking sync Dispatch");
+		Source response = dispatch.invoke(request);
+        
+		assertNotNull("dispatch invoke returned null", response);
+        
+        // Prepare the response content for checking
+        XMLStreamReader reader = inputFactory.createXMLStreamReader(response);
+        Reader2Writer r2w = new Reader2Writer(reader);
+        String responseText = r2w.getAsString();
+        System.out.println(responseText);
+        
+        // Check to make sure the content is correct
+        assertTrue(!responseText.contains("soap"));
+        assertTrue(!responseText.contains("Envelope"));
+        assertTrue(!responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));
 	}
 
-	public void testSyncWithMessageMode(){
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			InputSource input = new InputSource(stream);
-			Source srcStream = new SAXSource(input);
-			
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch with Message Mode");
-			SAXSource retVal = (SAXSource) dispatch.invoke(srcStream);
+	public void testSyncMessageMode() throws Exception {
+		System.out.println("---------------------------------------");
+		System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.MESSAGE);
+		
+        // Create a SAXSource out of the string content
+        byte[] bytes = DispatchTestConstants.sampleSoapMessage.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        InputSource input = new InputSource(stream);
+        Source request = new SAXSource(input);
+		
+		System.out.println(">> Invoking sync Dispatch with Message Mode");
+		Source response = dispatch.invoke(request);
 
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputSource().getByteStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
-
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
+        assertNotNull("dispatch invoke returned null", response);
+        
+        // Prepare the response content for checking
+        XMLStreamReader reader = inputFactory.createXMLStreamReader(response);
+        Reader2Writer r2w = new Reader2Writer(reader);
+        String responseText = r2w.getAsString();
+        System.out.println(responseText);
+        
+        // Check to make sure the content is correct
+        assertTrue(responseText.contains("soap"));
+        assertTrue(responseText.contains("Envelope"));
+        assertTrue(responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));
 	}
 
-	public void testAsyncCallbackWithMessageMode() {
-		
-			System.out.println("---------------------------------------");
-	        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-	        Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage
-					.getBytes());
-			InputSource input = new InputSource(stream);
-			Source srcStream = new SAXSource(input);
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-	                endpointUrl);
-			
-	        System.out.println(">> Invoking async (callback) Dispatch");
-	        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-	        try {
-	            while (!monitor.isDone()) {
-	                System.out.println(">> Async invocation still not complete");
-	                Thread.sleep(1000);
-	            }
-	            
-	            //monitor.get();
-	        
-	        } catch (InterruptedException e) {
-	            e.printStackTrace();
-                fail("[ERROR] - Dispatch invocation failed.");
-	        }
-	}
-	/*
-	public void testSyncWithWSDL() {
-		try {
-			System.out.println("---------------------------------------");
-			 URL wsdlUrl = new URL(endpointUrl + "?wsdl");
-			Service svc = Service.create(wsdlUrl,serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.PAYLOAD);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			
-			String url = (String) requestContext.get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);
-            assertNotNull("ERROR: the URL should not be null", url);
-            
-            InputSource input = new InputSource(stream);
-			Source srcStream = new SAXSource(input);
-			System.out.println(">> URL from WSDL [" + url + "]");
-			System.out.println(">> Invoking sync Dispatch with WSDL, Service and Port");
-			SAXSource retVal = (SAXSource) dispatch.invoke(srcStream);
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputSource().getByteStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
+    public void testAsyncCallbackPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.PAYLOAD);
+        
+        // Setup the callback for async responses
+        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
+        
+        // Create a SAXSource out of the string content
+        byte[] bytes = DispatchTestConstants.sampleBodyContent.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        InputSource input = new InputSource(stream);
+        Source request = new SAXSource(input);
+        
+        System.out.println(">> Invoking async (callback) Dispatch");
+        Future<?> monitor = dispatch.invokeAsync(request, callbackHandler);
 
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-		 
-	}
-	*/
-  
-	public void testAsyncCallback() {
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
+        }
+    }
+    
+    public void testAsyncCallbackMessageMode() throws Exception {
 		System.out.println("---------------------------------------");
-        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-        Service svc = Service.create(serviceQname);
-		svc.addPort(portQname, null, endpointUrl);
-		Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-				null);
-		ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-				.getBytes());
-		InputSource input = new InputSource(stream);
-		Source srcStream = new SAXSource(input);
-		Map<String, Object> requestContext = dispatch.getRequestContext();
-		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-                endpointUrl);
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.MESSAGE);
 		
+        // Setup the callback for async responses
+        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
+        
+        // Create a SAXSource out of the string content
+        byte[] bytes = DispatchTestConstants.sampleSoapMessage.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        InputSource input = new InputSource(stream);
+        Source request = new SAXSource(input);
+        
         System.out.println(">> Invoking async (callback) Dispatch");
-        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-        try {
-            while (!monitor.isDone()) {
-                System.out.println(">> Async invocation still not complete");
-                Thread.sleep(1000);
-            }
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
+        Future<?> monitor = dispatch.invokeAsync(request, callbackHandler);
+
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
         }
 	}
-
-	public void testOneWay() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			InputSource input = new InputSource(stream);
-			Source srcStream = new SAXSource(input);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking One Way Dispatch");
-			dispatch.invokeOneWay(srcStream);
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
+    
+    public void testOneWayPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.PAYLOAD);
+        
+        // Create a SAXSource out of the string content
+        byte[] bytes = DispatchTestConstants.sampleBodyContent.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        InputSource input = new InputSource(stream);
+        Source request = new SAXSource(input);
+        
+        System.out.println(">> Invoking One Way Dispatch");
+        dispatch.invokeOneWay(request);
+    }
+    
+    public void testOneWayMessageMode() throws Exception {
+		System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
+                Source.class, Service.Mode.MESSAGE);
+        
+        // Create a SAXSource out of the string content
+        byte[] bytes = DispatchTestConstants.sampleSoapMessage.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        InputSource input = new InputSource(stream);
+        Source request = new SAXSource(input);
+        
+		System.out.println(">> Invoking One Way Dispatch");
+		dispatch.invokeOneWay(request);
 	}
 }
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/StreamSourceDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/StreamSourceDispatch.java	(revision 424366)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/StreamSourceDispatch.java	(working copy)
@@ -18,213 +18,179 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
-import java.util.Map;
 import java.util.concurrent.Future;
 
-import javax.xml.namespace.QName;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
 import javax.xml.transform.Source;
 import javax.xml.transform.stream.StreamSource;
-import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.Service;
 import javax.xml.ws.Service.Mode;
 
-import org.apache.axis2.jaxws.CallbackHandler;
-
 import junit.framework.TestCase;
 
-public class SourceDispatch extends TestCase {
-	private String urlHost = "localhost";
-    private String urlPort = "8080";
-    private String urlSuffix = "/axis2/services/EchoService";
-    private String endpointUrl = "http://" + urlHost + ":" + urlPort + urlSuffix;
-	private String soapMessage ="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString></soap:Body></soap:Envelope>";
-	private String xmlString = "<ns1:echoString xmlns:ns1=\"http://test\"><ns1:input xmlns=\"http://test\">HELLO THERE!!!</ns1:input></ns1:echoString>";
-	private QName serviceQname = new QName("http://ws.apache.org/axis2", "EchoService");
-	private QName portQname = new QName("http://ws.apache.org/axis2", "EchoServiceSOAP11port0");
+import org.apache.axis2.jaxws.message.util.Reader2Writer;
 
-  public void testSync() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			Source srcStream = new StreamSource((InputStream) stream);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch");
-			StreamSource retVal = (StreamSource) dispatch.invoke(srcStream);
+/**
+ * This class tests the JAX-WS Dispatch<Source> functionality with various
+ * forms of a StreamSource object. 
+ *
+ */
+public class StreamSourceDispatch extends TestCase {
 
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
+    private static XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+    
+	/**
+     * Invoke a Dispatch<Source> synchronously with the content in PAYLOAD mode.
+	 */
+    public void testSyncPayloadMode() throws Exception {
+		System.out.println("---------------------------------------");
+		System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+		svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+		Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, Source.class, 
+                Service.Mode.PAYLOAD);
+		
+        // Create a StreamSource with the desired content
+        byte[] bytes = DispatchTestConstants.sampleBodyContent.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        Source srcStream = new StreamSource((InputStream) stream);
+        
+        // Invoke the Dispatch<Source>
+		System.out.println(">> Invoking sync Dispatch with PAYLOAD mode");
+		Source response = dispatch.invoke(srcStream);
 
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
+        // Prepare the response content for checking
+        XMLStreamReader reader = inputFactory.createXMLStreamReader(response);
+        Reader2Writer r2w = new Reader2Writer(reader);
+        String responseText = r2w.getAsString();
+        System.out.println(responseText);
+        
+        // Check to make sure the content is correct
+        assertTrue(!responseText.contains("soap"));
+        assertTrue(!responseText.contains("Envelope"));
+        assertTrue(!responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));            
 	}
 
-	// Not for Alpha
-	public void testAsyncPooling() {
+    /**
+     * Invoke a Dispatch<Source> synchronously with the content in MESSAGE mode.
+     */
+    public void testSyncMessageMode() throws Exception {
+		System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+		Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+		svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+		Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, Source.class,
+				Mode.MESSAGE);
+		
+		// Create a StreamSource with the desired content
+        byte[] bytes = DispatchTestConstants.sampleSoapMessage.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        Source srcStream = new StreamSource((InputStream) stream);
+        
+        System.out.println(">> Invoking sync Dispatch with MESSAGE Mode");
+		StreamSource response = (StreamSource) dispatch.invoke(srcStream);
 
+        // Prepare the response content for checking
+        XMLStreamReader reader = inputFactory.createXMLStreamReader(response);
+        Reader2Writer r2w = new Reader2Writer(reader);
+        String responseText = r2w.getAsString();
+        System.out.println(responseText);
+        
+        // Check to make sure the content is correct
+        assertTrue(responseText.contains("soap"));
+        assertTrue(responseText.contains("Envelope"));
+        assertTrue(responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));            
 	}
-	
-	public void testSyncWithMessageMode(){
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			Source srcStream = new StreamSource((InputStream) stream);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking sync Dispatch with Message Mode");
-			StreamSource retVal = (StreamSource) dispatch.invoke(srcStream);
 
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
+    /**
+     * Invoke a Dispatch<Source> asynchronously with the content in PAYLOAD mode.
+     */
+    public void testAsyncCallbackPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, Source.class,
+                Service.Mode.PAYLOAD);
+        
+        // We'll need a callback instance to handle the async responses
+        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
+        
+        // Create a StreamSource with the desired content
+        byte[] bytes = DispatchTestConstants.sampleBodyContent.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+        Source srcStream = new StreamSource((InputStream) stream);
 
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-	}
+        System.out.println(">> Invoking async (callback) Dispatch with PAYLOAD mode");
+        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
 
-	public void testAsyncCallbackWithMessageMode() {
-		
-			System.out.println("---------------------------------------");
-	        CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-	        Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.MESSAGE);
-			ByteArrayInputStream stream = new ByteArrayInputStream(soapMessage
-					.getBytes());
-			Source srcStream = new StreamSource((InputStream) stream);
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-	                endpointUrl);
-			
-	        System.out.println(">> Invoking async (callback) Dispatch");
-	        Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-	        try {
-	            while (!monitor.isDone()) {
-	                System.out.println(">> Async invocation still not complete");
-	                Thread.sleep(1000);
-	            }
-	            
-	            //monitor.get();
-	        
-	        } catch (InterruptedException e) {
-	            e.printStackTrace();
-                fail("[ERROR] - Dispatch invocation failed.");
-	        }
-	}
-	/*
-	public void testSyncWithWSDL() {
-		try {
-			System.out.println("---------------------------------------");
-			 URL wsdlUrl = new URL(endpointUrl + "?wsdl");
-			Service svc = Service.create(wsdlUrl,serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					Mode.PAYLOAD);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			
-			String url = (String) requestContext.get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);
-            assertNotNull("ERROR: the URL should not be null", url);
-            
-			Source srcStream = new StreamSource((InputStream) stream);
-			System.out.println(">> URL from WSDL [" + url + "]");
-			System.out.println(">> Invoking sync Dispatch with WSDL, Service and Port");
-			StreamSource retVal = (StreamSource) dispatch.invoke(srcStream);
-
-			byte b;
-			StringBuffer buffer = new StringBuffer();
-			while ((b = (byte) retVal.getInputStream().read()) != -1) {
-				char c = (char) b;
-				buffer.append(c);
-
-			}
-			System.out.println(">> Response [" + buffer + "]");
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
-		 
-	}
-	*/
-  
-	public void testAsyncCallback() {
+        // Wait for the async response to be returned
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
+        }
+    }
+    
+    /**
+     * Invoke a Dispatch<Source> asynchronously with the content in MESSAGE mode.
+     */
+	public void testAsyncCallbackMessageMode() throws Exception {
 		System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts 
+        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+		svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, Source.class,
+                Mode.MESSAGE);
+        
+        // We'll need a callback instance to handle the async responses
         CallbackHandler<Source> callbackHandler = new CallbackHandler<Source>();
-        Service svc = Service.create(serviceQname);
-		svc.addPort(portQname, null, endpointUrl);
-		Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-				null);
-		ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-				.getBytes());
+
+        // Create a StreamSource with the desired content
+        byte[] bytes = DispatchTestConstants.sampleSoapMessage.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
 		Source srcStream = new StreamSource((InputStream) stream);
-		Map<String, Object> requestContext = dispatch.getRequestContext();
-		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-                endpointUrl);
 		
-        System.out.println(">> Invoking async (callback) Dispatch");
+        System.out.println(">> Invoking async (callback) Dispatch with MESSAGE mode");
         Future<?> monitor = dispatch.invokeAsync(srcStream, callbackHandler);
-        try {
-            while (!monitor.isDone()) {
-                System.out.println(">> Async invocation still not complete");
-                Thread.sleep(1000);
-            }
-            
-            //monitor.get();
-        
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
+
+        // Wait for the async response to be returned
+        while (!monitor.isDone()) {
+            System.out.println(">> Async invocation still not complete");
+            Thread.sleep(1000);
         }
-	}
+    }
 
-	public void testOneWay() {
-		try {
-			System.out.println("---------------------------------------");
-			Service svc = Service.create(serviceQname);
-			svc.addPort(portQname, null, endpointUrl);
-			Dispatch<Source> dispatch = svc.createDispatch(portQname, Source.class,
-					null);
-			ByteArrayInputStream stream = new ByteArrayInputStream(xmlString
-					.getBytes());
-			Map<String, Object> requestContext = dispatch.getRequestContext();
-			Source srcStream = new StreamSource((InputStream) stream);
-			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
-					endpointUrl);
-			System.out.println(">> Invoking One Way Dispatch");
-			dispatch.invokeOneWay(srcStream);
-
-			
-		} catch (Exception e) {
-			e.printStackTrace();
-            fail("[ERROR] - Dispatch invocation failed.");
-		}
+    /**
+     * Invoke a Dispatch<Source> one-way operation
+     */
+	public void testOneWayPayloadMode() throws Exception {
+		System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        // Initialize the JAX-WS client artifacts
+		Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
+		svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
+		Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, Source.class,
+				Service.Mode.PAYLOAD);
+        
+		// Create a StreamSource with the desired content
+        byte[] bytes = DispatchTestConstants.sampleBodyContent.getBytes();
+        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
+		Source srcStream = new StreamSource((InputStream) stream);
+		
+		System.out.println(">> Invoking One Way Dispatch");
+		dispatch.invokeOneWay(srcStream);
 	}
 }
