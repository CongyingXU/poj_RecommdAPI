Index: modules/core/src/org/apache/axis2/Constants.java
===================================================================
--- modules/core/src/org/apache/axis2/Constants.java	(revision 426831)
+++ modules/core/src/org/apache/axis2/Constants.java	(working copy)
@@ -97,6 +97,7 @@
     public static final String TRANSPORT_MAIL = "mail";
     public static final String TRANSPORT_LOCAL = "local";
     public static final String TRANSPORT_JMS = "jms";
+    public static final String TRANSPORT_MMS = "mms";
 
     /**
      * Field TRANSPORT_HTTP
Index: modules/core/src/org/apache/axis2/deployment/axis2_default.xml
===================================================================
--- modules/core/src/org/apache/axis2/deployment/axis2_default.xml	(revision 426831)
+++ modules/core/src/org/apache/axis2/deployment/axis2_default.xml	(working copy)
@@ -59,6 +59,19 @@
         <!--<parameter name="hostname" locked="false">tcp://myApp.com/ws</parameter>-->
     </transportReceiver>
 
+    <!-- The MMS Transport Receiver - uncomment the rest to use , set the appropriate params -->
+    <!-- <transportReceiver name="mms" class="org.apache.axis2.transport.mms.MMSServer"> -->
+    <!--   <parameter name="app_id" locked="false">WS_MMS</parameter> -->
+    <!--    <parameter name="my_address" locked="false">9477123456</parameter> -->
+    <!--    <parameter name="mms_gateway" locked="false">127.0.0.1</parameter> -->
+    <!--    <parameter name="mms_gateway_port" locked="false">1234</parameter> -->
+    <!--    <parameter name="mms_server" locked="false">127.0.0.1</parameter> -->
+    <!--    <parameter name="message_input" locked="false">org.mylib.MyInput</parameter> -->
+    <!--    <parameter name="message_output" locked="false">org.mylib.MyOutput</parameter> -->
+    <!--    <parameter name="message_notifier" locked="false">org.mylib.MyNotifier</parameter> -->
+    <!-- </transportReceiver> -->
+
+
     <!-- ================================================= -->
     <!-- Transport Outs -->
     <!-- ================================================= -->
@@ -79,6 +92,9 @@
         <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
         <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
     </transportSender>
+    <transportSender name="mms"
+                     class="org.apache.axis2.transport.mms.MMSTransportSender"/>    
+    
 
     <!-- ================================================= -->
     <!-- Phases  -->
Index: modules/core/src/org/apache/axis2/transport/mms/MMSServer.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSServer.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSServer.java	(revision 0)
@@ -0,0 +1,280 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.ListenerManager;
+import org.apache.axis2.transport.TransportListener;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.xml.namespace.QName;
+
+/**
+ * 
+ * Class MMSServer is the transport listener for the MMS protocol. 
+ *
+ */
+public class MMSServer implements Runnable, TransportListener {
+
+	private String app_id = null;
+	private static final Log log = LogFactory.getLog(MMSServer.class);
+	private ConfigurationContext configContext = null;
+	private boolean started = false;   // tells if the server is active or not
+	private String my_address = null;  // my address
+	private String wap_gateway = null; // mms gateway
+	private int wap_gateway_port = 0;  // mms gateway port
+
+	public MMSServer() {
+		
+	}
+	
+	/**
+	 * 
+	 * @param app_id application id that the mms server uses 
+	 * @param configContext system configuration
+	 * @throws AxisFault 
+	 */
+	public MMSServer(String my_address,
+			         String mms_server,
+			         String wap_gateway,
+	                 int wap_gateway_port,
+	                 String in_class,
+	                 String out_class,
+	                 String noti_class,
+	                 String app_id,
+	                 ConfigurationContext configContext)
+	          throws AxisFault {
+	    try {
+	    	this.app_id = app_id;
+	    	this.my_address = my_address;
+	    	this.wap_gateway = wap_gateway;
+	    	this.wap_gateway_port = wap_gateway_port;
+	        this.configContext = configContext;    
+	        
+	        ListenerManager listenerManager = configContext.
+	                                            getListenerManager();
+	        TransportInDescription trsIn = new TransportInDescription(
+	                    new QName(Constants.TRANSPORT_MMS));
+	        trsIn.addParameter(new Parameter("app_id", app_id));
+	        trsIn.addParameter(new Parameter("my_address", my_address));
+	        trsIn.addParameter(new Parameter("mms_server", mms_server));
+	        trsIn.addParameter(new Parameter("wap_gateway", wap_gateway));
+	        trsIn.addParameter(new Parameter("wap_gateway_port",
+	        		                   Integer.toString(wap_gateway_port)));
+	        trsIn.addParameter(new Parameter("message_input", in_class));
+	        trsIn.addParameter(new Parameter("message_output", out_class));
+	        trsIn.addParameter(new Parameter("message_notifier",
+	        		                                        noti_class));
+	        trsIn.setReceiver(this);
+	        if (listenerManager == null) {
+	            listenerManager = new ListenerManager();
+	            listenerManager.init(configContext);
+	        }
+	        listenerManager.addListener(trsIn, true);
+        }
+	    catch (IOException ioe) {
+	        throw new AxisFault(ioe);
+	    }	        
+	}
+	
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#start()
+	 */	
+	public void start() throws AxisFault {
+	    this.configContext.getThreadPool().execute(this);	    
+	}
+	
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#stop()
+	 */	
+	public void stop() throws AxisFault {
+		this.started = false;
+	}
+	
+	public void run() {
+		started = true;
+		MessageReceiver rec = null;
+		try {
+		    rec = new MessageReceiver(configContext,
+		                              wap_gateway,
+			                          wap_gateway_port,
+			                          app_id);
+		}
+		catch (MMSException mmse) {
+			log.debug(mmse.getMessage());
+			return;
+		}
+		while(started) {
+			try {				
+				MessageInputConnection min = rec.accept();				
+				if (min == null) {
+					return;
+				}
+				
+		        configContext.getThreadPool().execute(
+		    		new MMSWorker(configContext, min));
+			}
+			catch (MMSException mmse) {
+				log.debug(mmse.getMessage());
+				continue;
+			}
+		}
+	}
+	
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#init(
+	 *      ConfigurationContext,TransportInDescription)
+	 */
+	public void init(ConfigurationContext axisConf,
+			TransportInDescription transprtIn) throws AxisFault {
+		Parameter param = transprtIn.getParameter("app_id");
+		if (param == null) {
+			throw new AxisFault("MMS Application ID cannot be resolved .. ");
+		}
+		else {
+            this.app_id = (String)param.getValue();
+        }
+		
+		param = transprtIn.getParameter("wap_gateway");
+		if (param == null) {
+			throw new AxisFault("MMS Gateway cannot be found .. ");
+		}
+		else {
+            this.wap_gateway = (String)param.getValue();
+        }
+		
+		param = transprtIn.getParameter("wap_gateway_port");
+		if (param == null) {
+			throw new AxisFault("MMS Gateway Port cannot be found .. ");
+		}
+		else {
+            this.wap_gateway_port = Integer.parseInt((String)param.getValue());
+        }
+		
+		param = transprtIn.getParameter("my_address");
+		if (param == null) {
+			throw new AxisFault("can't find my address .. ");
+		}
+		else {
+            this.my_address = (String)param.getValue();
+        }		
+	}
+
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#getEPRForService
+	 *     (String, String) 
+	 */
+	public EndpointReference getEPRForService(String serviceName, String ip)
+	        throws AxisFault {		
+	    if (my_address != null) {
+	        return new EndpointReference(
+	          "mms://"+ my_address + "/axis2/services/" + serviceName);
+	    }	  
+		else {
+		    log.debug("Unable to generate EPR for the transport mms");
+	        return null;
+		}	    
+	}
+		
+	public static void main(String args[]) throws AxisFault {				
+		String app_id = "WS_MMS";
+		String axis2_xml = null;
+		
+	    if (args.length < 8) {
+            System.out.println(
+            "MMSServer repositoryLocation my_address MMSServer " +
+            "MMSGateway port message_in_class message_out_class" +
+            "message_notifier_class [appID] [axis2.xml]");
+            
+            System.out.println("\nAddresses Ex:-");
+            System.out.println("0401234567/TYPE=PLMN\n" +
+            		   "+358501234567/TYPE=PLMN\n" +
+            		   "Joe User <joe@user.org>\n" +
+            		   "FEDC:BA98:7654:3210:FEDC:BA98:7654:3210/TYPE=IPv6\n" +
+            		   "195.153.199.30/TYPE=IPv4");            
+        }
+	    else {
+	    	if (args.length >= 9) {
+	    		if (args[8].toLowerCase().endsWith(".xml")) {
+	    		    app_id = args[8];
+	    		}
+	    		else {
+	    			axis2_xml = args[8];
+	    		}
+	    	}
+	    	if (args.length >= 10) {
+	    		if (args[9].toLowerCase().endsWith(".xml")) {
+	    		    app_id = args[9];
+	    		}
+	    		else {
+	    			axis2_xml = args[9];
+	    		}
+	    	}
+	    	
+            File repo = new File(args[0]);            
+                
+            if (!repo.exists()) {
+                System.out.println("Repository file does not exists .. " +
+                		"exiting..");
+                return;
+            }
+            
+            axis2_xml = System.getProperty("axis2.xml");
+            if (axis2_xml == null) {
+            	File f = new File(repo.getAbsolutePath() +
+            			               "/conf/axis2.xml");
+            	if (!f.exists()) {
+            		System.out.println("Can't find axis2.xml .. exiting..");
+            		return;
+            	}
+            	axis2_xml = f.getAbsolutePath();
+            }
+            
+            MMSServer mmsServer = new MMSServer(args[1], args[2], args[3],
+              Integer.parseInt(args[4]), args[5], args[6], args[7], app_id,
+                       ConfigurationContextFactory.
+                       createConfigurationContextFromFileSystem(
+            		              args[0], axis2_xml));
+               
+            System.out.println("[Axis2] Using the Repository " +
+            		repo.getAbsolutePath());
+            System.out.println("[Axis2] Starting the MMS Server with" +
+            		"\nappID: " + app_id +
+            		"\nmy_address: " + args[1] +
+            		"\nmms_server: " + args[2] +
+            		"\nMMS Gateway: " + args[3] +
+            		"\nMMS Gateway Port: " + args[4] +
+            		"\nMessage_input_class: " + args[5] +
+            		"\nMessage_output_class: " + args[6] +
+            		"\nMessage_notifier_class: " + args[7]);
+            
+            Runtime.getRuntime().addShutdownHook(new Thread(mmsServer));
+        }		
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageInput.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageInput.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageInput.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+/**
+ * this represents the physical data input 
+ */
+public interface MessageInput {
+	
+	public void init(String wap_gateway, int wap_gateway_port,
+			  String url);
+	
+	public byte[] getData();
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageInputConnection.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageInputConnection.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageInputConnection.java	(revision 0)
@@ -0,0 +1,125 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.io.IOException;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.transport.mms.codec.MMDecoder;
+import org.apache.axis2.transport.mms.codec.MMMessage;
+
+/**
+ * This class provides the data input stream
+ *
+ */
+public class MessageInputConnection {
+
+	private String wap_gateway = null;
+	private int wap_gateway_port = 9201;
+	private String url = null;
+	private InputStream in = null;
+	private String source_address = null;
+	private byte[] data = null;
+	private String subject = null;
+	private ConfigurationContext configContext = null;
+	
+	/**
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway
+	 * @param wap_gateway_port
+	 * @param url the source url of the MMSC that contains the message
+	 * @see MessageReceiver#MessageReceiver(String, String, String, String)
+	 */
+	public MessageInputConnection(ConfigurationContext configContext,
+			                      String wap_gateway, int wap_gateway_port, 
+                                  String url) {
+		this.configContext = configContext;
+        this.wap_gateway = wap_gateway;
+        this.wap_gateway_port = wap_gateway_port;       
+        this.url = url;
+    }
+	
+	/**
+	 * this would be used to identify the web service
+	 * @return the subject field of the mms message
+	 */
+	public String getSubject() {
+		if (subject == null) {
+			try {
+			    initConnection();
+			}
+			catch (MMSException me) {
+				return null;
+			}
+		}
+		return subject;
+	}
+	/**
+	 * @return the source address
+	 */
+	public String getSourceAddress() {
+	    if (source_address == null) {
+	    	try {
+	            initConnection();
+	    	}
+	    	catch (MMSException me) {
+	    		return null;
+	    	}
+	    }
+	    return source_address;
+	}
+
+	/**
+	 * initialises the mms connection and retrieves the data
+	 * @throws Exception
+	 */
+	private void initConnection() throws MMSException {	
+		MessageInput msin = MessageInOutFactory.createMessageInput(
+				                               configContext,
+				                               wap_gateway, 
+				                               wap_gateway_port,
+				                               url);
+		
+		byte[] resData = msin.getData();		
+    	MMDecoder mmdec = new MMDecoder();
+    	MMMessage msg = mmdec.decode(resData);
+    	
+    	this.data = msg.getData();    	    	
+    	this.subject = msg.getSubject();
+    	this.source_address = msg.getFrom();
+    	
+    	in = new ByteArrayInputStream(this.data);
+	}
+	
+	/**
+	 * creates a input stream from the incoming mms message
+	 * @return input stream representing the mms message
+	 */
+	public InputStream openConnection() throws IOException {
+		try {
+		    initConnection(); // creates the input stream
+		    return in;		    
+		}
+		catch (MMSException me) {
+			throw new IOException(me.getMessage());
+		}		
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageNotifier.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageNotifier.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageNotifier.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+public interface MessageNotifier {
+
+	public void init(String wap_gateway, int wap_gateway_port,
+			  String app_id);
+	
+	/**
+	 * @return the url of the notification message
+	 */
+	public String listen(); 
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageOutput.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageOutput.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageOutput.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+/**
+ * this represent the physical data output 
+ */
+public interface MessageOutput {
+
+	public void init(String wap_gateway, int wap_gateway_port,
+	                 String mms_server, String app_id);
+	
+	public void sendData(byte[] data);
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageSender.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageSender.java	(revision 0)
@@ -0,0 +1,132 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.transport.mms.codec.MMMessage;
+import org.apache.axis2.transport.mms.codec.MMEncoder;
+
+public class MessageSender {
+
+	private String from_address = null;
+	private String to_address = null;
+	private String wap_gateway = null;
+	private int wap_gateway_port = 0;
+	private String mms_server = null;
+	private String subject = null;
+	private String app_id = null;
+	private ConfigurationContext configContext = null;
+	
+	/**
+	 * 
+	 * @param configContext configuration context
+	 * @param from_address the from address
+	 * @param to_address the to address which this message is sent
+	 * @param wap_gateway the wap gateway address
+	 * @param wap_gateway_port wap gateway port
+	 * @param mms_server mms server to send the message
+	 * @param subject subject of the message
+	 * @param app_id the application id used to send the message
+	 */
+	public MessageSender(ConfigurationContext configContext,
+			             String from_address, String to_address,
+			             String wap_gateway, int wap_gateway_port,
+			             String mms_server, String subject, String app_id) {
+		this.configContext = configContext;
+		this.from_address = from_address;
+		this.to_address = to_address;
+		this.wap_gateway = wap_gateway;
+		this.wap_gateway_port = wap_gateway_port;
+		this.mms_server = mms_server;
+		this.subject = subject;
+		this.app_id = app_id;
+	}
+	
+	public OutputStream openConnection() {		
+		return new MessageOutputStream();
+	}
+	
+	public class MessageOutputStream extends OutputStream {
+	
+		private ByteArrayOutputStream byteOut = null;
+		boolean flushed = false;
+		
+		public MessageOutputStream() {
+		    byteOut = new ByteArrayOutputStream();	
+		}
+		
+		public void write(int i) throws IOException {
+			byteOut.write(i);
+		}
+		
+		public void write(byte[] b)  throws IOException {
+			byteOut.write(b);
+		}
+		
+		public void write(byte[] b, int off, int len) throws IOException {
+			byteOut.write(b, off, len);
+		}
+		
+		public void flush() throws IOException {
+			byteOut.flush();
+			
+			try {
+			    /*
+  			     * make the connection and send the message
+			     */
+			    MessageOutput msout = MessageInOutFactory.createMessageOutput(
+			    		            configContext, 
+                                    wap_gateway, 
+                                    wap_gateway_port,
+                                    mms_server,
+                                    app_id);            
+			
+			    byte[] data = byteOut.toByteArray();
+			
+			    MMMessage message = new MMMessage();
+			    message.setFrom(from_address);
+			    message.setTo(to_address);
+			    message.setSubject(subject);
+			    message.setData(data);
+			
+			    MMEncoder enc = new MMEncoder();
+						
+			    byte[] buff = enc.encode(message);
+			    msout.sendData(buff);     // send the message
+			}
+			catch (MMSException mmse) {
+				throw new IOException(mmse.toString());
+			}			
+			
+			byteOut.close();
+			flushed = true;
+		}
+		
+		public void close() throws IOException {
+			if (!flushed) {
+				flush();
+			}
+			byteOut.close();
+		}
+					
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSWorker.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSWorker.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSWorker.java	(revision 0)
@@ -0,0 +1,142 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.InputStream;
+import java.io.Reader;
+
+import javax.xml.namespace.QName;
+import org.apache.axiom.om.impl.builder.StAXBuilder;
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.description.TransportOutDescription;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.engine.AxisEngine;
+import org.apache.axis2.i18n.Messages;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.xml.stream.XMLStreamReader;
+
+public class MMSWorker implements Runnable {
+
+	private static final Log log = LogFactory.getLog(MMSWorker.class);
+    private ConfigurationContext configContext;
+    private MessageInputConnection mic = null;
+    
+	public MMSWorker(ConfigurationContext configContext,
+		          	 MessageInputConnection mic) {
+		this.configContext = configContext;
+		this.mic = mic;
+	}
+	
+	public void run() {		
+        MessageContext msgContext = null;
+        OutputStream out = null;
+        
+        try {
+            AxisEngine engine = new AxisEngine(configContext);
+            AxisConfiguration axisConf = configContext.getAxisConfiguration();
+            TransportOutDescription transportOut =
+                axisConf.getTransportOut(new QName(Constants.TRANSPORT_MMS));
+            TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+            
+            if ((transportOut == null || transportIn == null)) {            	
+            	throw new AxisFault(Messages.getMessage("unknownTransport",
+                        Constants.TRANSPORT_MMS));
+            }
+            // create the Message Context and fill in the values
+            msgContext = new MessageContext();
+            msgContext.setIncomingTransportName(Constants.TRANSPORT_MMS);
+            msgContext.setConfigurationContext(configContext);
+            msgContext.setTransportIn(transportIn);
+            msgContext.setTransportOut(transportOut);
+            msgContext.setServerSide(true);
+
+            String wg = (String)transportIn.getParameter(
+             		                "wap_gateway").getValue();
+            String wgp = (String)transportIn.getParameter(
+               		                "wap_gateway_port").getValue();
+            String mmsc = (String)transportIn.getParameter(
+               		                 "mms_server").getValue();
+            String my_add = (String)transportIn.getParameter(
+               		                 "my_address").getValue();
+            String app_id = (String)transportIn.getParameter(
+                                     "app_id").getValue();
+
+            // create the SOAP Envelope
+            // receives the input stream from the message input connection
+            InputStream ins = mic.openConnection();
+            if (ins == null) {
+             	return;
+            }
+
+            Reader in = new InputStreamReader(ins);
+            
+            // sets the output stream
+            MessageSender sender = new MessageSender(
+              	   configContext,
+              	   my_add,
+                   mic.getSourceAddress(), wg,
+                   Integer.parseInt(wgp), mmsc, mic.getSubject(), app_id);
+            out = sender.openConnection();
+            msgContext.setProperty(MessageContext.TRANSPORT_OUT, out);
+            ////
+            
+            XMLStreamReader xmlreader = StAXUtils.
+                                         createXMLStreamReader(in);            
+            StAXBuilder builder = new StAXSOAPModelBuilder(
+            		                             xmlreader, null);            
+            SOAPEnvelope envelope = (SOAPEnvelope)builder.
+                                         getDocumentElement();
+            msgContext.setEnvelope(envelope);
+            msgContext.setTo(new EndpointReference(mic.getSubject()));            
+            if (envelope.getBody().hasFault()) {
+                engine.receiveFault(msgContext);
+            }
+            else {
+                engine.receive(msgContext);                
+            } 
+        } 
+        catch (Throwable te) {
+        	try {
+                AxisEngine engine = new AxisEngine(configContext);
+
+                if (msgContext != null) {                    
+                    msgContext.setProperty(MessageContext.TRANSPORT_OUT, out);
+                    MessageContext faultContext = engine.
+                           createFaultMessageContext(msgContext, te);
+                    engine.sendFault(faultContext);
+                }
+            } 
+            catch (Exception e) {
+                log.error(te);
+            }
+        } 
+    }
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageReceiver.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageReceiver.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageReceiver.java	(revision 0)
@@ -0,0 +1,76 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import org.apache.axis2.context.ConfigurationContext;
+
+/**
+ * MessageReceiver - This class handles the receiving of MMS messages.
+ */
+public class MessageReceiver {
+	
+	private String wap_gateway = null;
+	private int wap_gateway_port = 0;
+	private ConfigurationContext configContext = null;
+	private MessageNotifier mnot = null;
+	
+	/**
+	 * Constructor for the MessageReceiver.
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway WAP gateway that we connect
+	 * @param wap_gateway_port WAP gateway port
+	 * @param mms_server MMS server that sends the message data
+	 * @param app_id MMS application id that web services requests use
+	 */
+	public MessageReceiver(ConfigurationContext configContext, 
+			               String wap_gateway, int wap_gateway_port, 
+			               String app_id) 
+	                       throws MMSException {
+		this.configContext = configContext;
+		this.wap_gateway = wap_gateway;
+		this.wap_gateway_port = wap_gateway_port;
+		
+		mnot = MessageInOutFactory.createMessageNotifier(
+                configContext,
+                wap_gateway, 
+                wap_gateway_port,
+                app_id);
+	}
+	
+	/**
+	 * Listens to incoming MMS connections
+     * and when a notification of a message comes as a SMS, it gets the  
+     * source url of the message and create a MessageInputConnection  
+     * with that url.
+     *   
+	 * @return MessageInputConnection representing the source message stream
+	 */
+	public MessageInputConnection accept() throws MMSException {
+		String url = null;
+			
+		url = mnot.listen(); // gets the source url
+
+        if (url == null) {
+        	return null;
+        }
+        
+		return new MessageInputConnection(configContext, wap_gateway,
+				                          wap_gateway_port, url);
+	}
+
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSTransportSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSTransportSender.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSTransportSender.java	(revision 0)
@@ -0,0 +1,140 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.IOException;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.transport.AbstractTransportSender;
+
+public class MMSTransportSender extends AbstractTransportSender {
+	
+	private static final long serialVersionUID = 8438943862931475451L;
+
+	public MMSTransportSender() {
+		
+	}
+	public void finalizeSendWithOutputStreamFromIncomingConnection(
+            MessageContext msgContext, OutputStream out) throws AxisFault {
+		
+	}
+
+    public void finalizeSendWithToAddress(
+    		     MessageContext msgContext, OutputStream out)
+                 throws AxisFault {
+    	AxisConfiguration axisConf = msgContext.getConfigurationContext().
+    	                                getAxisConfiguration();
+        TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+        
+        String wg = (String)transportIn.getParameter(
+                                "wap_gateway").getValue();
+        String wgp = (String)transportIn.getParameter(
+                                "wap_gateway_port").getValue();
+        String app_id = (String)transportIn.getParameter(
+                                "app_id").getValue();
+    	
+        InputStream in = null;
+        
+        try {
+            MessageReceiver mr = new MessageReceiver(
+        		                    msgContext.getConfigurationContext(), 
+        		                    wg, Integer.parseInt(wgp),
+        		                    app_id);      
+        
+            MessageInputConnection mic = mr.accept();                 
+            in = mic.openConnection();
+        }
+        catch (MMSException mmse) {
+        	throw new AxisFault("mms error: " + mmse.getMessage());
+        }
+        catch (IOException ioe) {
+        	throw new AxisFault(ioe.getMessage());
+        }
+        if (in != null) {
+            msgContext.setProperty(MessageContext.TRANSPORT_IN,in);
+        }
+    }
+
+    protected OutputStream openTheConnection(EndpointReference epr,
+    		MessageContext msgContext) throws AxisFault {    	
+    	OutputStream out = (OutputStream)msgContext.getProperty(
+    			             MessageContext.TRANSPORT_OUT);
+        if (out!= null) {
+        	return out;
+        }
+    	if (msgContext.getTo()!=null) {
+    		AxisConfiguration axisConf = msgContext.getConfigurationContext().
+            getAxisConfiguration();
+            TransportInDescription transportIn =
+            axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+
+            String wg = (String)transportIn.getParameter(
+                                    "wap_gateway").getValue();
+            String wgp = (String)transportIn.getParameter(
+                                    "wap_gateway_port").getValue();
+            String mmsc = (String)transportIn.getParameter(
+                                    "mms_server").getValue();
+            String app_id = (String)transportIn.getParameter(
+                                    "app_id").getValue();
+            String my_address = (String)transportIn.getParameter(
+                                    "my_address").getValue();
+            String subject = msgContext.getTo().getAddress();
+    		int index1 = subject.indexOf("/");
+    		int index2 = subject.indexOf("/", index1+2);
+    		String to = subject.substring(index1+2, index2);  
+    		
+    		MessageSender ms = new MessageSender(
+    				 msgContext.getConfigurationContext(),
+    				 my_address, to, wg,
+    				 Integer.parseInt(wgp), mmsc, subject, app_id);
+    		return ms.openConnection();		             
+    	}
+    	else {
+    		throw new AxisFault("cannot open output mms connection .. ");
+    	}   	
+    }
+
+    public OutputStream startSendWithOutputStreamFromIncomingConnection(
+            MessageContext msgContext, OutputStream out) throws AxisFault {
+    	return out;
+    }
+
+    public OutputStream startSendWithToAddress(MessageContext msgContext,
+		OutputStream out) throws AxisFault {
+	
+	    return out;
+    }
+
+    public void stop() {
+    	
+    }
+    
+    public void cleanup(MessageContext msgContext) throws AxisFault {
+    	
+    }
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageInOutFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageInOutFactory.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageInOutFactory.java	(revision 0)
@@ -0,0 +1,160 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.AxisFault;
+
+/**
+ * This class handles the creation of MessageInput and MessageOutput for 
+ * the physical data input and out and also the incoming message notifier, 
+ * the classes are resolved at runtime as stated in the axis2.xml.
+ */
+public class MessageInOutFactory {
+
+	/**
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway the wap gateway used to receive the data
+	 * @param wap_gateway_port the wap gateway port
+	 * @param url the address of the data to be received
+	 * @return the MessageInput object representing the input
+	 */
+	public static MessageInput createMessageInput (
+			                     ConfigurationContext configContext,
+			                     String wap_gateway,
+			                     int wap_gateway_port,
+			                     String url) 
+	                             throws MMSException {
+		try {
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+		    String inClass = (String)transportIn.getParameter(
+                                     "message_input").getValue();
+		    
+		    Class cls = Class.forName(inClass);
+            MessageInput m_in = (MessageInput)cls.newInstance();
+            
+            m_in.init(wap_gateway, wap_gateway_port, url);
+            return m_in;
+		}
+		catch (ClassNotFoundException ce) {
+			throw new MMSException("notifier class not found: " +
+					                ce.getMessage());
+		}
+		catch (AxisFault ae) {
+			throw new MMSException("axis fault:" + ae.getMessage());
+		}
+		catch (IllegalAccessException iae) {
+        	throw new MMSException("illegal access:" + iae.getMessage());
+        }
+		catch (InstantiationException ie) {
+        	throw new MMSException("Instantiation problem:" + ie.getMessage());
+        }	
+	}
+	
+	/**
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway the wap gateway used to send the data
+	 * @param wap_gateway_port the wap gateway port
+	 * @param mms_server the mms server used to send the data
+ 	 * @param app_id the application ID
+	 * @return the MessageOutput object representing the output
+	 */
+	public static MessageOutput createMessageOutput(
+			                          ConfigurationContext configContext,
+			                          String wap_gateway,
+                                      int wap_gateway_port,
+                                      String mms_server,
+                                      String app_id) 
+	                                  throws MMSException {
+		try {
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+		    String outClass = (String)transportIn.getParameter(
+                                     "message_output").getValue();
+		    
+		    Class cls = Class.forName(outClass);
+            MessageOutput m_out = (MessageOutput)cls.newInstance();
+            
+            m_out.init(wap_gateway, wap_gateway_port, mms_server, app_id);
+            return m_out;
+		}
+		catch (ClassNotFoundException ce) {
+			throw new MMSException("notifier class not found: " +
+					                ce.getMessage());
+		}
+		catch (AxisFault ae) {
+			throw new MMSException("axis fault:" + ae.getMessage());
+		}
+		catch (IllegalAccessException iae) {
+        	throw new MMSException("illegal access:" + iae.getMessage());
+        }
+		catch (InstantiationException ie) {
+        	throw new MMSException("Instantiation problem:" + ie.getMessage());
+        }	
+	}
+	
+	/**
+	 * 
+	 * @param configContext configuration context
+	 * @param wap_gateway the wg used to listen for message notifications
+	 * @param wap_gateway_port the wap gateway port
+	 * @param app_id the application ID
+	 * @return the MessageNotifier object representing the notifier
+	 */
+	public static MessageNotifier createMessageNotifier(
+			                            ConfigurationContext configContext,
+			                            String wap_gateway,
+                                        int wap_gateway_port,
+                                        String app_id)
+	                                    throws MMSException {
+		try {			
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+		    String noti_class = (String)transportIn.getParameter(
+                                     "message_notifier").getValue();
+            Class cls = Class.forName(noti_class);
+            MessageNotifier noti = (MessageNotifier)cls.newInstance();            
+            noti.init(wap_gateway, wap_gateway_port, app_id);
+            return noti;
+		}		
+		catch (ClassNotFoundException ce) {
+			throw new MMSException("notifier class not found: " +
+					                ce.getMessage());
+		}
+		catch (AxisFault ae) {
+			throw new MMSException("axis fault:" + ae.getMessage());
+		}
+		catch (IllegalAccessException iae) {
+        	throw new MMSException("illegal access:" + iae.getMessage());
+        }
+		catch (InstantiationException ie) {
+        	throw new MMSException("Instantiation problem:" + ie.getMessage());
+        }
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSException.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSException.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSException.java	(revision 0)
@@ -0,0 +1,31 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+/**
+ * the exception class for MMS related exceptions 
+ *
+ */
+public class MMSException extends Exception {
+
+	private static final long serialVersionUID = 1246878402917858592L;
+
+	public MMSException(String msg) {
+		super(msg);
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/codec/MMDecoder.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/codec/MMDecoder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/codec/MMDecoder.java	(revision 0)
@@ -0,0 +1,204 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms.codec;
+
+import org.apache.axis2.transport.mms.MMSException;
+import java.io.DataInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+public class MMDecoder {
+
+	/**
+	 * reads a null terminated string
+	 * @param din datainput stream where the string is read
+	 * @return the java String representing the z-string
+	 */
+	public String readZString(DataInputStream din) {
+		StringBuffer ret = new StringBuffer();		
+		byte b = 0;
+		try {
+		    while ((b = din.readByte()) != 0) {
+			    ret.append((char)b);
+		    }
+		}
+		catch (Exception e) {
+			return null;
+		}
+				
+		return ret.toString();
+	}
+	
+	/**
+	 * converts a byte to a signed number
+	 * @param b the byte to be converted to a signed number
+	 * @return the unsigned number 
+	 */
+	public int convertToSigned(byte b) {
+	    int ret = 0;	    
+	    try {	       
+	        if (b >= 0) {
+	        	ret = b;
+	        }
+	        else {
+	        	ret = 256 + b;
+	        }
+	    }
+	    catch (Exception e) {
+	    	return ret;
+	    }
+	    
+	    return ret;
+	}
+	
+	/**
+	 * converts a int to a signed number
+	 * @param i the int to be converted to a signed number
+	 * @return the unsigned number 
+	 */
+	public long convertToSigned(int i) {
+	    long ret = 0;
+	    try {	        
+	        if (i >= 0) {
+	        	ret = i;
+	        }
+	        else {
+	        	ret = 0xffff + 1 + i;
+	        }
+	    }
+	    catch (Exception e) {
+	    	return ret;
+	    }	    
+	    
+	    return ret;		
+	}
+	
+	/**
+	 * reads an uintvar as specified in WAP-230 page 67
+	 * @param din datainput stream to read the number
+	 * @return a long value containing the number
+	 */		
+	public long readUintVar(DataInputStream din) {
+		int ret = 0;
+		ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
+		
+		try {
+		    int i = 0;
+		    while ((i = convertToSigned(din.readByte())) > 128) {
+			    byteOut.write(i);
+		    }
+		    byteOut.write(i);
+		    byteOut.flush();
+		    byte[] data = byteOut.toByteArray();		    
+		    ret = data[data.length-1];		    
+		    for (i = data.length-2;i >= 0;i--) {
+		    	ret |= (convertToSigned(data[i])-128) << ((data.length-i-1)*7);
+		    }
+		    byteOut.close();
+		}
+		catch (Exception e) {
+			return 0;
+		}
+		
+		return convertToSigned(ret);
+	}
+	
+	public MMMessage decode(byte[] data) throws MMSException {
+		MMMessage msg = new MMMessage();
+		try {			
+		    DataInputStream din = new DataInputStream(
+		    		              new ByteArrayInputStream(data));
+		    int field = 0;
+		    long temp = 0;
+		    
+		    while (din.available() > 0) {
+		    	field = convertToSigned(din.readByte());
+
+		    	switch (field) {
+		            case 0x89:  // from
+		            	din.mark(5);
+		            	temp = convertToSigned(din.readByte()); // length
+		            	if (temp >= 0x1f) {
+		            		din.reset();
+		            	}
+		            	else {
+		            	    din.readByte();    // address type
+		            	}
+		            	msg.setFrom(readZString(din));
+		            	break;
+		            	
+		            case 0x97:  // to
+		            	msg.setTo(readZString(din));
+		            	break;
+		            	
+		            case 0x96:  // subject
+		            	msg.setSubject(readZString(din));
+		            	break;
+		            	
+		            case 0x84:  // content type 
+		            	temp = convertToSigned(din.readByte());
+		            	if (temp < 128) {
+		            	    if (temp == 0x1f) {
+		            		    temp = readUintVar(din);
+		            	    }
+		            	   	din.skipBytes((int)temp);
+		            	}
+                        din.readByte();          // number of parts
+		            	/* 
+		            	 * starting first content, the only one we need .. 
+		            	 */
+		            	temp = readUintVar(din); // length of headers
+		            	long dataLength = readUintVar(din);
+		                din.skipBytes((int)temp);
+		            			            	
+		            	byte[] buff = new byte[(int)dataLength]; 
+		            	din.read(buff, 0, (int)dataLength);
+		            	msg.setData(buff);
+		            	
+		            	din.close();
+		            	return msg;	            	            	
+		            	
+		            default:
+		            	/**
+		            	 * as specified in WAP-230 page 83
+		            	 */			        
+		            	temp = convertToSigned(din.readByte());
+		                if (temp >= 128) {
+		                	continue;
+		                }
+		                else if (temp <= 30) {
+		                	din.skipBytes((int)temp);
+		                }
+		                else if (temp == 31) {		                	
+		                	din.skipBytes((int)readUintVar(din));
+		                }
+		                else { // 32 - 127 (string value)
+		                	readZString(din);
+		                }
+		            	break;
+		        }
+		    }		    
+		}
+		catch (IOException ioe) {
+			throw new MMSException("decode error:" + ioe.getMessage());
+		}
+
+		throw new MMSException("decode error: can't find data");
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/codec/MMEncoder.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/codec/MMEncoder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/codec/MMEncoder.java	(revision 0)
@@ -0,0 +1,122 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms.codec;
+
+import org.apache.axis2.transport.mms.MMSException;
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class MMEncoder {
+
+	/**
+	 * writes a null terminated string to the output stream
+	 * @param str the string to be written
+	 * @param dout the dataoutput stream used to write the z-string
+	 * @throws IOException
+	 */
+	public void writeZString(String str, DataOutputStream dout) 
+	                                           throws IOException {
+		int len = str.length();
+		for (int i = 0;i < len;i++) {
+			dout.writeByte((byte)str.charAt(i));
+		}
+		dout.writeByte(0);
+	}
+	
+	/**
+	 * writes an uintvar as specified in WAP-230 page 67
+	 * @param val value to be written
+	 * @param dout dataoutput stream to write the variable size number
+	 * @throws IOException 
+	 */
+	public void writeUintVar(long val, DataOutputStream dout)
+	                                           throws IOException {
+		int[] data = new int[5];
+		
+		data[4] = (int)val & 127;
+		data[3] = (int)((val & 16256) >>> 7) + 128;
+		data[2] = (int)((val & 2080768) >>> 14) + 128;
+		data[1] = (int)((val & 266338304) >>> 21) + 128;
+		data[0] = (int)((val & 4026531840L) >>> 28) + 128;
+		
+		for (int i = 0;i < 4;i++) {
+			if (data[i] > 128) {
+				dout.writeByte(data[i]);		
+			}
+		}
+		
+		dout.writeByte(data[4]);				 
+	}
+	
+	public byte[] encode(MMMessage message) throws MMSException {
+		ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
+		DataOutputStream dout = new DataOutputStream(byteOut);
+		
+		try {
+		    dout.writeByte(140);        // message type
+		    dout.writeByte(128);        // m-send-req
+		
+		    dout.writeByte(152);        // transaction id
+		    writeZString("tr-1", dout);
+		    
+		    dout.writeByte(141);        // mms version
+		    dout.writeByte(144);        // ver 1.0
+		    
+		    dout.writeByte(137);        // from		    
+		    dout.writeByte(message.getFrom().length() + 2); // length
+		    dout.writeByte(128);                            // type
+		    writeZString(message.getFrom(), dout);          
+		    
+		    dout.writeByte(151);        // to
+		    writeZString(message.getTo(), dout);
+		    
+		    if (message.getSubject() != null) {
+		        dout.writeByte(150);                        // subject
+		        writeZString(message.getSubject(), dout);
+		    }
+		    
+		    dout.writeByte(143);        // priority
+		    dout.writeByte(130);        // highest ( who needs low prority ?? )
+		    
+		    dout.writeByte(132);        // content type
+		    dout.writeByte(163);        // application/vnd.wap.multipart.mixed
+		    
+		    dout.writeByte(1);          // number of parts
+		    
+		    dout.writeByte(22);         // length of headers - ex data length
+		    writeUintVar(message.getData().length, dout);
+		    dout.writeByte(3);          // length of content type
+		    dout.writeByte(168);        // text/xml
+		    dout.writeByte(129);        // char set
+		    dout.writeByte(234);        // utf-8		    
+		    dout.writeByte(142);        // content location
+		    writeZString("soap_message.xml", dout);
+		    
+		    dout.write(message.getData());  // the data
+		    
+		    dout.close();
+			byteOut.close();			
+		}
+		catch (IOException ioe) {
+			throw new MMSException("decode error: " + ioe.getMessage());
+		}
+		
+		return byteOut.toByteArray();
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/codec/MMMessage.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/codec/MMMessage.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/codec/MMMessage.java	(revision 0)
@@ -0,0 +1,90 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms.codec;
+
+public class MMMessage {
+
+	private String subject = null;
+	private String to = null;
+	private String from = null;
+	private byte[] data = null;
+	
+	public MMMessage() {
+		
+	}
+	
+	/**
+	 * sets the message subject
+	 * @param subject message subject
+	 */
+	public void setSubject(String subject) {
+		this.subject = subject;		
+	}
+	
+	/**
+	 * sets the recipients address
+	 * @param to to address
+	 */
+	public void setTo(String to) {
+		this.to = to;
+	}
+	
+	/**
+	 * sets my address
+	 * @param from from address
+	 */
+	public void setFrom(String from) {
+		this.from = from;
+	}
+	
+	/**
+	 * sets the message payload to be sent
+	 * @param data data to be sent
+	 */
+	public void setData(byte[] data) {
+		this.data = data;
+	}
+	
+	/**
+	 * @return message subject
+	 */
+	public String getSubject() {
+		return subject;
+	}
+	
+	/**
+	 * @return the to address
+	 */
+	public String getTo() {
+		return to;
+	}
+	
+	/**
+	 * @return the from address
+	 */
+	public String getFrom() {
+		return from;
+	}
+
+	/**
+	 * @return the message data
+	 */
+	public byte[] getData() {
+		return data;
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/codec/MMDecoder.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/codec/MMDecoder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/codec/MMDecoder.java	(revision 0)
@@ -0,0 +1,204 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms.codec;
+
+import org.apache.axis2.transport.mms.MMSException;
+import java.io.DataInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+public class MMDecoder {
+
+	/**
+	 * reads a null terminated string
+	 * @param din datainput stream where the string is read
+	 * @return the java String representing the z-string
+	 */
+	public String readZString(DataInputStream din) {
+		StringBuffer ret = new StringBuffer();		
+		byte b = 0;
+		try {
+		    while ((b = din.readByte()) != 0) {
+			    ret.append((char)b);
+		    }
+		}
+		catch (Exception e) {
+			return null;
+		}
+				
+		return ret.toString();
+	}
+	
+	/**
+	 * converts a byte to a signed number
+	 * @param b the byte to be converted to a signed number
+	 * @return the unsigned number 
+	 */
+	public int convertToSigned(byte b) {
+	    int ret = 0;	    
+	    try {	       
+	        if (b >= 0) {
+	        	ret = b;
+	        }
+	        else {
+	        	ret = 256 + b;
+	        }
+	    }
+	    catch (Exception e) {
+	    	return ret;
+	    }
+	    
+	    return ret;
+	}
+	
+	/**
+	 * converts a int to a signed number
+	 * @param i the int to be converted to a signed number
+	 * @return the unsigned number 
+	 */
+	public long convertToSigned(int i) {
+	    long ret = 0;
+	    try {	        
+	        if (i >= 0) {
+	        	ret = i;
+	        }
+	        else {
+	        	ret = 0xffff + 1 + i;
+	        }
+	    }
+	    catch (Exception e) {
+	    	return ret;
+	    }	    
+	    
+	    return ret;		
+	}
+	
+	/**
+	 * reads an uintvar as specified in WAP-230 page 67
+	 * @param din datainput stream to read the number
+	 * @return a long value containing the number
+	 */		
+	public long readUintVar(DataInputStream din) {
+		int ret = 0;
+		ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
+		
+		try {
+		    int i = 0;
+		    while ((i = convertToSigned(din.readByte())) > 128) {
+			    byteOut.write(i);
+		    }
+		    byteOut.write(i);
+		    byteOut.flush();
+		    byte[] data = byteOut.toByteArray();		    
+		    ret = data[data.length-1];		    
+		    for (i = data.length-2;i >= 0;i--) {
+		    	ret |= (convertToSigned(data[i])-128) << ((data.length-i-1)*7);
+		    }
+		    byteOut.close();
+		}
+		catch (Exception e) {
+			return 0;
+		}
+		
+		return convertToSigned(ret);
+	}
+	
+	public MMMessage decode(byte[] data) throws MMSException {
+		MMMessage msg = new MMMessage();
+		try {			
+		    DataInputStream din = new DataInputStream(
+		    		              new ByteArrayInputStream(data));
+		    int field = 0;
+		    long temp = 0;
+		    
+		    while (din.available() > 0) {
+		    	field = convertToSigned(din.readByte());
+
+		    	switch (field) {
+		            case 0x89:  // from
+		            	din.mark(5);
+		            	temp = convertToSigned(din.readByte()); // length
+		            	if (temp >= 0x1f) {
+		            		din.reset();
+		            	}
+		            	else {
+		            	    din.readByte();    // address type
+		            	}
+		            	msg.setFrom(readZString(din));
+		            	break;
+		            	
+		            case 0x97:  // to
+		            	msg.setTo(readZString(din));
+		            	break;
+		            	
+		            case 0x96:  // subject
+		            	msg.setSubject(readZString(din));
+		            	break;
+		            	
+		            case 0x84:  // content type 
+		            	temp = convertToSigned(din.readByte());
+		            	if (temp < 128) {
+		            	    if (temp == 0x1f) {
+		            		    temp = readUintVar(din);
+		            	    }
+		            	   	din.skipBytes((int)temp);
+		            	}
+                        din.readByte();          // number of parts
+		            	/* 
+		            	 * starting first content, the only one we need .. 
+		            	 */
+		            	temp = readUintVar(din); // length of headers
+		            	long dataLength = readUintVar(din);
+		                din.skipBytes((int)temp);
+		            			            	
+		            	byte[] buff = new byte[(int)dataLength]; 
+		            	din.read(buff, 0, (int)dataLength);
+		            	msg.setData(buff);
+		            	
+		            	din.close();
+		            	return msg;	            	            	
+		            	
+		            default:
+		            	/**
+		            	 * as specified in WAP-230 page 83
+		            	 */			        
+		            	temp = convertToSigned(din.readByte());
+		                if (temp >= 128) {
+		                	continue;
+		                }
+		                else if (temp <= 30) {
+		                	din.skipBytes((int)temp);
+		                }
+		                else if (temp == 31) {		                	
+		                	din.skipBytes((int)readUintVar(din));
+		                }
+		                else { // 32 - 127 (string value)
+		                	readZString(din);
+		                }
+		            	break;
+		        }
+		    }		    
+		}
+		catch (IOException ioe) {
+			throw new MMSException("decode error:" + ioe.getMessage());
+		}
+
+		throw new MMSException("decode error: can't find data");
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/codec/MMEncoder.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/codec/MMEncoder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/codec/MMEncoder.java	(revision 0)
@@ -0,0 +1,122 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms.codec;
+
+import org.apache.axis2.transport.mms.MMSException;
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class MMEncoder {
+
+	/**
+	 * writes a null terminated string to the output stream
+	 * @param str the string to be written
+	 * @param dout the dataoutput stream used to write the z-string
+	 * @throws IOException
+	 */
+	public void writeZString(String str, DataOutputStream dout) 
+	                                           throws IOException {
+		int len = str.length();
+		for (int i = 0;i < len;i++) {
+			dout.writeByte((byte)str.charAt(i));
+		}
+		dout.writeByte(0);
+	}
+	
+	/**
+	 * writes an uintvar as specified in WAP-230 page 67
+	 * @param val value to be written
+	 * @param dout dataoutput stream to write the variable size number
+	 * @throws IOException 
+	 */
+	public void writeUintVar(long val, DataOutputStream dout)
+	                                           throws IOException {
+		int[] data = new int[5];
+		
+		data[4] = (int)val & 127;
+		data[3] = (int)((val & 16256) >>> 7) + 128;
+		data[2] = (int)((val & 2080768) >>> 14) + 128;
+		data[1] = (int)((val & 266338304) >>> 21) + 128;
+		data[0] = (int)((val & 4026531840L) >>> 28) + 128;
+		
+		for (int i = 0;i < 4;i++) {
+			if (data[i] > 128) {
+				dout.writeByte(data[i]);		
+			}
+		}
+		
+		dout.writeByte(data[4]);				 
+	}
+	
+	public byte[] encode(MMMessage message) throws MMSException {
+		ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
+		DataOutputStream dout = new DataOutputStream(byteOut);
+		
+		try {
+		    dout.writeByte(140);        // message type
+		    dout.writeByte(128);        // m-send-req
+		
+		    dout.writeByte(152);        // transaction id
+		    writeZString("tr-1", dout);
+		    
+		    dout.writeByte(141);        // mms version
+		    dout.writeByte(144);        // ver 1.0
+		    
+		    dout.writeByte(137);        // from		    
+		    dout.writeByte(message.getFrom().length() + 2); // length
+		    dout.writeByte(128);                            // type
+		    writeZString(message.getFrom(), dout);          
+		    
+		    dout.writeByte(151);        // to
+		    writeZString(message.getTo(), dout);
+		    
+		    if (message.getSubject() != null) {
+		        dout.writeByte(150);                        // subject
+		        writeZString(message.getSubject(), dout);
+		    }
+		    
+		    dout.writeByte(143);        // priority
+		    dout.writeByte(130);        // highest ( who needs low prority ?? )
+		    
+		    dout.writeByte(132);        // content type
+		    dout.writeByte(163);        // application/vnd.wap.multipart.mixed
+		    
+		    dout.writeByte(1);          // number of parts
+		    
+		    dout.writeByte(22);         // length of headers - ex data length
+		    writeUintVar(message.getData().length, dout);
+		    dout.writeByte(3);          // length of content type
+		    dout.writeByte(168);        // text/xml
+		    dout.writeByte(129);        // char set
+		    dout.writeByte(234);        // utf-8		    
+		    dout.writeByte(142);        // content location
+		    writeZString("soap_message.xml", dout);
+		    
+		    dout.write(message.getData());  // the data
+		    
+		    dout.close();
+			byteOut.close();			
+		}
+		catch (IOException ioe) {
+			throw new MMSException("decode error: " + ioe.getMessage());
+		}
+		
+		return byteOut.toByteArray();
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/codec/MMMessage.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/codec/MMMessage.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/codec/MMMessage.java	(revision 0)
@@ -0,0 +1,90 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms.codec;
+
+public class MMMessage {
+
+	private String subject = null;
+	private String to = null;
+	private String from = null;
+	private byte[] data = null;
+	
+	public MMMessage() {
+		
+	}
+	
+	/**
+	 * sets the message subject
+	 * @param subject message subject
+	 */
+	public void setSubject(String subject) {
+		this.subject = subject;		
+	}
+	
+	/**
+	 * sets the recipients address
+	 * @param to to address
+	 */
+	public void setTo(String to) {
+		this.to = to;
+	}
+	
+	/**
+	 * sets my address
+	 * @param from from address
+	 */
+	public void setFrom(String from) {
+		this.from = from;
+	}
+	
+	/**
+	 * sets the message payload to be sent
+	 * @param data data to be sent
+	 */
+	public void setData(byte[] data) {
+		this.data = data;
+	}
+	
+	/**
+	 * @return message subject
+	 */
+	public String getSubject() {
+		return subject;
+	}
+	
+	/**
+	 * @return the to address
+	 */
+	public String getTo() {
+		return to;
+	}
+	
+	/**
+	 * @return the from address
+	 */
+	public String getFrom() {
+		return from;
+	}
+
+	/**
+	 * @return the message data
+	 */
+	public byte[] getData() {
+		return data;
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageInOutFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageInOutFactory.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageInOutFactory.java	(revision 0)
@@ -0,0 +1,160 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.AxisFault;
+
+/**
+ * This class handles the creation of MessageInput and MessageOutput for 
+ * the physical data input and out and also the incoming message notifier, 
+ * the classes are resolved at runtime as stated in the axis2.xml.
+ */
+public class MessageInOutFactory {
+
+	/**
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway the wap gateway used to receive the data
+	 * @param wap_gateway_port the wap gateway port
+	 * @param url the address of the data to be received
+	 * @return the MessageInput object representing the input
+	 */
+	public static MessageInput createMessageInput (
+			                     ConfigurationContext configContext,
+			                     String wap_gateway,
+			                     int wap_gateway_port,
+			                     String url) 
+	                             throws MMSException {
+		try {
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+		    String inClass = (String)transportIn.getParameter(
+                                     "message_input").getValue();
+		    
+		    Class cls = Class.forName(inClass);
+            MessageInput m_in = (MessageInput)cls.newInstance();
+            
+            m_in.init(wap_gateway, wap_gateway_port, url);
+            return m_in;
+		}
+		catch (ClassNotFoundException ce) {
+			throw new MMSException("notifier class not found: " +
+					                ce.getMessage());
+		}
+		catch (AxisFault ae) {
+			throw new MMSException("axis fault:" + ae.getMessage());
+		}
+		catch (IllegalAccessException iae) {
+        	throw new MMSException("illegal access:" + iae.getMessage());
+        }
+		catch (InstantiationException ie) {
+        	throw new MMSException("Instantiation problem:" + ie.getMessage());
+        }	
+	}
+	
+	/**
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway the wap gateway used to send the data
+	 * @param wap_gateway_port the wap gateway port
+	 * @param mms_server the mms server used to send the data
+ 	 * @param app_id the application ID
+	 * @return the MessageOutput object representing the output
+	 */
+	public static MessageOutput createMessageOutput(
+			                          ConfigurationContext configContext,
+			                          String wap_gateway,
+                                      int wap_gateway_port,
+                                      String mms_server,
+                                      String app_id) 
+	                                  throws MMSException {
+		try {
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+		    String outClass = (String)transportIn.getParameter(
+                                     "message_output").getValue();
+		    
+		    Class cls = Class.forName(outClass);
+            MessageOutput m_out = (MessageOutput)cls.newInstance();
+            
+            m_out.init(wap_gateway, wap_gateway_port, mms_server, app_id);
+            return m_out;
+		}
+		catch (ClassNotFoundException ce) {
+			throw new MMSException("notifier class not found: " +
+					                ce.getMessage());
+		}
+		catch (AxisFault ae) {
+			throw new MMSException("axis fault:" + ae.getMessage());
+		}
+		catch (IllegalAccessException iae) {
+        	throw new MMSException("illegal access:" + iae.getMessage());
+        }
+		catch (InstantiationException ie) {
+        	throw new MMSException("Instantiation problem:" + ie.getMessage());
+        }	
+	}
+	
+	/**
+	 * 
+	 * @param configContext configuration context
+	 * @param wap_gateway the wg used to listen for message notifications
+	 * @param wap_gateway_port the wap gateway port
+	 * @param app_id the application ID
+	 * @return the MessageNotifier object representing the notifier
+	 */
+	public static MessageNotifier createMessageNotifier(
+			                            ConfigurationContext configContext,
+			                            String wap_gateway,
+                                        int wap_gateway_port,
+                                        String app_id)
+	                                    throws MMSException {
+		try {			
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+		    String noti_class = (String)transportIn.getParameter(
+                                     "message_notifier").getValue();
+            Class cls = Class.forName(noti_class);
+            MessageNotifier noti = (MessageNotifier)cls.newInstance();            
+            noti.init(wap_gateway, wap_gateway_port, app_id);
+            return noti;
+		}		
+		catch (ClassNotFoundException ce) {
+			throw new MMSException("notifier class not found: " +
+					                ce.getMessage());
+		}
+		catch (AxisFault ae) {
+			throw new MMSException("axis fault:" + ae.getMessage());
+		}
+		catch (IllegalAccessException iae) {
+        	throw new MMSException("illegal access:" + iae.getMessage());
+        }
+		catch (InstantiationException ie) {
+        	throw new MMSException("Instantiation problem:" + ie.getMessage());
+        }
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageInput.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageInput.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageInput.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+/**
+ * this represents the physical data input 
+ */
+public interface MessageInput {
+	
+	public void init(String wap_gateway, int wap_gateway_port,
+			  String url);
+	
+	public byte[] getData();
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageInputConnection.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageInputConnection.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageInputConnection.java	(revision 0)
@@ -0,0 +1,125 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.io.IOException;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.transport.mms.codec.MMDecoder;
+import org.apache.axis2.transport.mms.codec.MMMessage;
+
+/**
+ * This class provides the data input stream
+ *
+ */
+public class MessageInputConnection {
+
+	private String wap_gateway = null;
+	private int wap_gateway_port = 9201;
+	private String url = null;
+	private InputStream in = null;
+	private String source_address = null;
+	private byte[] data = null;
+	private String subject = null;
+	private ConfigurationContext configContext = null;
+	
+	/**
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway
+	 * @param wap_gateway_port
+	 * @param url the source url of the MMSC that contains the message
+	 * @see MessageReceiver#MessageReceiver(String, String, String, String)
+	 */
+	public MessageInputConnection(ConfigurationContext configContext,
+			                      String wap_gateway, int wap_gateway_port, 
+                                  String url) {
+		this.configContext = configContext;
+        this.wap_gateway = wap_gateway;
+        this.wap_gateway_port = wap_gateway_port;       
+        this.url = url;
+    }
+	
+	/**
+	 * this would be used to identify the web service
+	 * @return the subject field of the mms message
+	 */
+	public String getSubject() {
+		if (subject == null) {
+			try {
+			    initConnection();
+			}
+			catch (MMSException me) {
+				return null;
+			}
+		}
+		return subject;
+	}
+	/**
+	 * @return the source address
+	 */
+	public String getSourceAddress() {
+	    if (source_address == null) {
+	    	try {
+	            initConnection();
+	    	}
+	    	catch (MMSException me) {
+	    		return null;
+	    	}
+	    }
+	    return source_address;
+	}
+
+	/**
+	 * initialises the mms connection and retrieves the data
+	 * @throws Exception
+	 */
+	private void initConnection() throws MMSException {	
+		MessageInput msin = MessageInOutFactory.createMessageInput(
+				                               configContext,
+				                               wap_gateway, 
+				                               wap_gateway_port,
+				                               url);
+		
+		byte[] resData = msin.getData();		
+    	MMDecoder mmdec = new MMDecoder();
+    	MMMessage msg = mmdec.decode(resData);
+    	
+    	this.data = msg.getData();    	    	
+    	this.subject = msg.getSubject();
+    	this.source_address = msg.getFrom();
+    	
+    	in = new ByteArrayInputStream(this.data);
+	}
+	
+	/**
+	 * creates a input stream from the incoming mms message
+	 * @return input stream representing the mms message
+	 */
+	public InputStream openConnection() throws IOException {
+		try {
+		    initConnection(); // creates the input stream
+		    return in;		    
+		}
+		catch (MMSException me) {
+			throw new IOException(me.getMessage());
+		}		
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageNotifier.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageNotifier.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageNotifier.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+public interface MessageNotifier {
+
+	public void init(String wap_gateway, int wap_gateway_port,
+			  String app_id);
+	
+	/**
+	 * @return the url of the notification message
+	 */
+	public String listen(); 
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageOutput.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageOutput.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageOutput.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+/**
+ * this represent the physical data output 
+ */
+public interface MessageOutput {
+
+	public void init(String wap_gateway, int wap_gateway_port,
+	                 String mms_server, String app_id);
+	
+	public void sendData(byte[] data);
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageReceiver.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageReceiver.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageReceiver.java	(revision 0)
@@ -0,0 +1,76 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import org.apache.axis2.context.ConfigurationContext;
+
+/**
+ * MessageReceiver - This class handles the receiving of MMS messages.
+ */
+public class MessageReceiver {
+	
+	private String wap_gateway = null;
+	private int wap_gateway_port = 0;
+	private ConfigurationContext configContext = null;
+	private MessageNotifier mnot = null;
+	
+	/**
+	 * Constructor for the MessageReceiver.
+	 * 
+	 * @param configContext configuration context 
+	 * @param wap_gateway WAP gateway that we connect
+	 * @param wap_gateway_port WAP gateway port
+	 * @param mms_server MMS server that sends the message data
+	 * @param app_id MMS application id that web services requests use
+	 */
+	public MessageReceiver(ConfigurationContext configContext, 
+			               String wap_gateway, int wap_gateway_port, 
+			               String app_id) 
+	                       throws MMSException {
+		this.configContext = configContext;
+		this.wap_gateway = wap_gateway;
+		this.wap_gateway_port = wap_gateway_port;
+		
+		mnot = MessageInOutFactory.createMessageNotifier(
+                configContext,
+                wap_gateway, 
+                wap_gateway_port,
+                app_id);
+	}
+	
+	/**
+	 * Listens to incoming MMS connections
+     * and when a notification of a message comes as a SMS, it gets the  
+     * source url of the message and create a MessageInputConnection  
+     * with that url.
+     *   
+	 * @return MessageInputConnection representing the source message stream
+	 */
+	public MessageInputConnection accept() throws MMSException {
+		String url = null;
+			
+		url = mnot.listen(); // gets the source url
+
+        if (url == null) {
+        	return null;
+        }
+        
+		return new MessageInputConnection(configContext, wap_gateway,
+				                          wap_gateway_port, url);
+	}
+
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MessageSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MessageSender.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MessageSender.java	(revision 0)
@@ -0,0 +1,132 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.transport.mms.codec.MMMessage;
+import org.apache.axis2.transport.mms.codec.MMEncoder;
+
+public class MessageSender {
+
+	private String from_address = null;
+	private String to_address = null;
+	private String wap_gateway = null;
+	private int wap_gateway_port = 0;
+	private String mms_server = null;
+	private String subject = null;
+	private String app_id = null;
+	private ConfigurationContext configContext = null;
+	
+	/**
+	 * 
+	 * @param configContext configuration context
+	 * @param from_address the from address
+	 * @param to_address the to address which this message is sent
+	 * @param wap_gateway the wap gateway address
+	 * @param wap_gateway_port wap gateway port
+	 * @param mms_server mms server to send the message
+	 * @param subject subject of the message
+	 * @param app_id the application id used to send the message
+	 */
+	public MessageSender(ConfigurationContext configContext,
+			             String from_address, String to_address,
+			             String wap_gateway, int wap_gateway_port,
+			             String mms_server, String subject, String app_id) {
+		this.configContext = configContext;
+		this.from_address = from_address;
+		this.to_address = to_address;
+		this.wap_gateway = wap_gateway;
+		this.wap_gateway_port = wap_gateway_port;
+		this.mms_server = mms_server;
+		this.subject = subject;
+		this.app_id = app_id;
+	}
+	
+	public OutputStream openConnection() {		
+		return new MessageOutputStream();
+	}
+	
+	public class MessageOutputStream extends OutputStream {
+	
+		private ByteArrayOutputStream byteOut = null;
+		boolean flushed = false;
+		
+		public MessageOutputStream() {
+		    byteOut = new ByteArrayOutputStream();	
+		}
+		
+		public void write(int i) throws IOException {
+			byteOut.write(i);
+		}
+		
+		public void write(byte[] b)  throws IOException {
+			byteOut.write(b);
+		}
+		
+		public void write(byte[] b, int off, int len) throws IOException {
+			byteOut.write(b, off, len);
+		}
+		
+		public void flush() throws IOException {
+			byteOut.flush();
+			
+			try {
+			    /*
+  			     * make the connection and send the message
+			     */
+			    MessageOutput msout = MessageInOutFactory.createMessageOutput(
+			    		            configContext, 
+                                    wap_gateway, 
+                                    wap_gateway_port,
+                                    mms_server,
+                                    app_id);            
+			
+			    byte[] data = byteOut.toByteArray();
+			
+			    MMMessage message = new MMMessage();
+			    message.setFrom(from_address);
+			    message.setTo(to_address);
+			    message.setSubject(subject);
+			    message.setData(data);
+			
+			    MMEncoder enc = new MMEncoder();
+						
+			    byte[] buff = enc.encode(message);
+			    msout.sendData(buff);     // send the message
+			}
+			catch (MMSException mmse) {
+				throw new IOException(mmse.toString());
+			}			
+			
+			byteOut.close();
+			flushed = true;
+		}
+		
+		public void close() throws IOException {
+			if (!flushed) {
+				flush();
+			}
+			byteOut.close();
+		}
+					
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSException.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSException.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSException.java	(revision 0)
@@ -0,0 +1,31 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+/**
+ * the exception class for MMS related exceptions 
+ *
+ */
+public class MMSException extends Exception {
+
+	private static final long serialVersionUID = 1246878402917858592L;
+
+	public MMSException(String msg) {
+		super(msg);
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSServer.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSServer.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSServer.java	(revision 0)
@@ -0,0 +1,280 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.ListenerManager;
+import org.apache.axis2.transport.TransportListener;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.xml.namespace.QName;
+
+/**
+ * 
+ * Class MMSServer is the transport listener for the MMS protocol. 
+ *
+ */
+public class MMSServer implements Runnable, TransportListener {
+
+	private String app_id = null;
+	private static final Log log = LogFactory.getLog(MMSServer.class);
+	private ConfigurationContext configContext = null;
+	private boolean started = false;   // tells if the server is active or not
+	private String my_address = null;  // my address
+	private String wap_gateway = null; // mms gateway
+	private int wap_gateway_port = 0;  // mms gateway port
+
+	public MMSServer() {
+		
+	}
+	
+	/**
+	 * 
+	 * @param app_id application id that the mms server uses 
+	 * @param configContext system configuration
+	 * @throws AxisFault 
+	 */
+	public MMSServer(String my_address,
+			         String mms_server,
+			         String wap_gateway,
+	                 int wap_gateway_port,
+	                 String in_class,
+	                 String out_class,
+	                 String noti_class,
+	                 String app_id,
+	                 ConfigurationContext configContext)
+	          throws AxisFault {
+	    try {
+	    	this.app_id = app_id;
+	    	this.my_address = my_address;
+	    	this.wap_gateway = wap_gateway;
+	    	this.wap_gateway_port = wap_gateway_port;
+	        this.configContext = configContext;    
+	        
+	        ListenerManager listenerManager = configContext.
+	                                            getListenerManager();
+	        TransportInDescription trsIn = new TransportInDescription(
+	                    new QName(Constants.TRANSPORT_MMS));
+	        trsIn.addParameter(new Parameter("app_id", app_id));
+	        trsIn.addParameter(new Parameter("my_address", my_address));
+	        trsIn.addParameter(new Parameter("mms_server", mms_server));
+	        trsIn.addParameter(new Parameter("wap_gateway", wap_gateway));
+	        trsIn.addParameter(new Parameter("wap_gateway_port",
+	        		                   Integer.toString(wap_gateway_port)));
+	        trsIn.addParameter(new Parameter("message_input", in_class));
+	        trsIn.addParameter(new Parameter("message_output", out_class));
+	        trsIn.addParameter(new Parameter("message_notifier",
+	        		                                        noti_class));
+	        trsIn.setReceiver(this);
+	        if (listenerManager == null) {
+	            listenerManager = new ListenerManager();
+	            listenerManager.init(configContext);
+	        }
+	        listenerManager.addListener(trsIn, true);
+        }
+	    catch (IOException ioe) {
+	        throw new AxisFault(ioe);
+	    }	        
+	}
+	
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#start()
+	 */	
+	public void start() throws AxisFault {
+	    this.configContext.getThreadPool().execute(this);	    
+	}
+	
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#stop()
+	 */	
+	public void stop() throws AxisFault {
+		this.started = false;
+	}
+	
+	public void run() {
+		started = true;
+		MessageReceiver rec = null;
+		try {
+		    rec = new MessageReceiver(configContext,
+		                              wap_gateway,
+			                          wap_gateway_port,
+			                          app_id);
+		}
+		catch (MMSException mmse) {
+			log.debug(mmse.getMessage());
+			return;
+		}
+		while(started) {
+			try {				
+				MessageInputConnection min = rec.accept();				
+				if (min == null) {
+					return;
+				}
+				
+		        configContext.getThreadPool().execute(
+		    		new MMSWorker(configContext, min));
+			}
+			catch (MMSException mmse) {
+				log.debug(mmse.getMessage());
+				continue;
+			}
+		}
+	}
+	
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#init(
+	 *      ConfigurationContext,TransportInDescription)
+	 */
+	public void init(ConfigurationContext axisConf,
+			TransportInDescription transprtIn) throws AxisFault {
+		Parameter param = transprtIn.getParameter("app_id");
+		if (param == null) {
+			throw new AxisFault("MMS Application ID cannot be resolved .. ");
+		}
+		else {
+            this.app_id = (String)param.getValue();
+        }
+		
+		param = transprtIn.getParameter("wap_gateway");
+		if (param == null) {
+			throw new AxisFault("MMS Gateway cannot be found .. ");
+		}
+		else {
+            this.wap_gateway = (String)param.getValue();
+        }
+		
+		param = transprtIn.getParameter("wap_gateway_port");
+		if (param == null) {
+			throw new AxisFault("MMS Gateway Port cannot be found .. ");
+		}
+		else {
+            this.wap_gateway_port = Integer.parseInt((String)param.getValue());
+        }
+		
+		param = transprtIn.getParameter("my_address");
+		if (param == null) {
+			throw new AxisFault("can't find my address .. ");
+		}
+		else {
+            this.my_address = (String)param.getValue();
+        }		
+	}
+
+	/**
+	 * @see org.apache.axis2.transport.TransportListener#getEPRForService
+	 *     (String, String) 
+	 */
+	public EndpointReference getEPRForService(String serviceName, String ip)
+	        throws AxisFault {		
+	    if (my_address != null) {
+	        return new EndpointReference(
+	          "mms://"+ my_address + "/axis2/services/" + serviceName);
+	    }	  
+		else {
+		    log.debug("Unable to generate EPR for the transport mms");
+	        return null;
+		}	    
+	}
+		
+	public static void main(String args[]) throws AxisFault {				
+		String app_id = "WS_MMS";
+		String axis2_xml = null;
+		
+	    if (args.length < 8) {
+            System.out.println(
+            "MMSServer repositoryLocation my_address MMSServer " +
+            "MMSGateway port message_in_class message_out_class" +
+            "message_notifier_class [appID] [axis2.xml]");
+            
+            System.out.println("\nAddresses Ex:-");
+            System.out.println("0401234567/TYPE=PLMN\n" +
+            		   "+358501234567/TYPE=PLMN\n" +
+            		   "Joe User <joe@user.org>\n" +
+            		   "FEDC:BA98:7654:3210:FEDC:BA98:7654:3210/TYPE=IPv6\n" +
+            		   "195.153.199.30/TYPE=IPv4");            
+        }
+	    else {
+	    	if (args.length >= 9) {
+	    		if (args[8].toLowerCase().endsWith(".xml")) {
+	    		    app_id = args[8];
+	    		}
+	    		else {
+	    			axis2_xml = args[8];
+	    		}
+	    	}
+	    	if (args.length >= 10) {
+	    		if (args[9].toLowerCase().endsWith(".xml")) {
+	    		    app_id = args[9];
+	    		}
+	    		else {
+	    			axis2_xml = args[9];
+	    		}
+	    	}
+	    	
+            File repo = new File(args[0]);            
+                
+            if (!repo.exists()) {
+                System.out.println("Repository file does not exists .. " +
+                		"exiting..");
+                return;
+            }
+            
+            axis2_xml = System.getProperty("axis2.xml");
+            if (axis2_xml == null) {
+            	File f = new File(repo.getAbsolutePath() +
+            			               "/conf/axis2.xml");
+            	if (!f.exists()) {
+            		System.out.println("Can't find axis2.xml .. exiting..");
+            		return;
+            	}
+            	axis2_xml = f.getAbsolutePath();
+            }
+            
+            MMSServer mmsServer = new MMSServer(args[1], args[2], args[3],
+              Integer.parseInt(args[4]), args[5], args[6], args[7], app_id,
+                       ConfigurationContextFactory.
+                       createConfigurationContextFromFileSystem(
+            		              args[0], axis2_xml));
+               
+            System.out.println("[Axis2] Using the Repository " +
+            		repo.getAbsolutePath());
+            System.out.println("[Axis2] Starting the MMS Server with" +
+            		"\nappID: " + app_id +
+            		"\nmy_address: " + args[1] +
+            		"\nmms_server: " + args[2] +
+            		"\nMMS Gateway: " + args[3] +
+            		"\nMMS Gateway Port: " + args[4] +
+            		"\nMessage_input_class: " + args[5] +
+            		"\nMessage_output_class: " + args[6] +
+            		"\nMessage_notifier_class: " + args[7]);
+            
+            Runtime.getRuntime().addShutdownHook(new Thread(mmsServer));
+        }		
+	}
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSTransportSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSTransportSender.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSTransportSender.java	(revision 0)
@@ -0,0 +1,140 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.IOException;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.transport.AbstractTransportSender;
+
+public class MMSTransportSender extends AbstractTransportSender {
+	
+	private static final long serialVersionUID = 8438943862931475451L;
+
+	public MMSTransportSender() {
+		
+	}
+	public void finalizeSendWithOutputStreamFromIncomingConnection(
+            MessageContext msgContext, OutputStream out) throws AxisFault {
+		
+	}
+
+    public void finalizeSendWithToAddress(
+    		     MessageContext msgContext, OutputStream out)
+                 throws AxisFault {
+    	AxisConfiguration axisConf = msgContext.getConfigurationContext().
+    	                                getAxisConfiguration();
+        TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+        
+        String wg = (String)transportIn.getParameter(
+                                "wap_gateway").getValue();
+        String wgp = (String)transportIn.getParameter(
+                                "wap_gateway_port").getValue();
+        String app_id = (String)transportIn.getParameter(
+                                "app_id").getValue();
+    	
+        InputStream in = null;
+        
+        try {
+            MessageReceiver mr = new MessageReceiver(
+        		                    msgContext.getConfigurationContext(), 
+        		                    wg, Integer.parseInt(wgp),
+        		                    app_id);      
+        
+            MessageInputConnection mic = mr.accept();                 
+            in = mic.openConnection();
+        }
+        catch (MMSException mmse) {
+        	throw new AxisFault("mms error: " + mmse.getMessage());
+        }
+        catch (IOException ioe) {
+        	throw new AxisFault(ioe.getMessage());
+        }
+        if (in != null) {
+            msgContext.setProperty(MessageContext.TRANSPORT_IN,in);
+        }
+    }
+
+    protected OutputStream openTheConnection(EndpointReference epr,
+    		MessageContext msgContext) throws AxisFault {    	
+    	OutputStream out = (OutputStream)msgContext.getProperty(
+    			             MessageContext.TRANSPORT_OUT);
+        if (out!= null) {
+        	return out;
+        }
+    	if (msgContext.getTo()!=null) {
+    		AxisConfiguration axisConf = msgContext.getConfigurationContext().
+            getAxisConfiguration();
+            TransportInDescription transportIn =
+            axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+
+            String wg = (String)transportIn.getParameter(
+                                    "wap_gateway").getValue();
+            String wgp = (String)transportIn.getParameter(
+                                    "wap_gateway_port").getValue();
+            String mmsc = (String)transportIn.getParameter(
+                                    "mms_server").getValue();
+            String app_id = (String)transportIn.getParameter(
+                                    "app_id").getValue();
+            String my_address = (String)transportIn.getParameter(
+                                    "my_address").getValue();
+            String subject = msgContext.getTo().getAddress();
+    		int index1 = subject.indexOf("/");
+    		int index2 = subject.indexOf("/", index1+2);
+    		String to = subject.substring(index1+2, index2);  
+    		
+    		MessageSender ms = new MessageSender(
+    				 msgContext.getConfigurationContext(),
+    				 my_address, to, wg,
+    				 Integer.parseInt(wgp), mmsc, subject, app_id);
+    		return ms.openConnection();		             
+    	}
+    	else {
+    		throw new AxisFault("cannot open output mms connection .. ");
+    	}   	
+    }
+
+    public OutputStream startSendWithOutputStreamFromIncomingConnection(
+            MessageContext msgContext, OutputStream out) throws AxisFault {
+    	return out;
+    }
+
+    public OutputStream startSendWithToAddress(MessageContext msgContext,
+		OutputStream out) throws AxisFault {
+	
+	    return out;
+    }
+
+    public void stop() {
+    	
+    }
+    
+    public void cleanup(MessageContext msgContext) throws AxisFault {
+    	
+    }
+	
+}
Index: modules/core/src/org/apache/axis2/transport/mms/MMSWorker.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/mms/MMSWorker.java	(revision 0)
+++ modules/core/src/org/apache/axis2/transport/mms/MMSWorker.java	(revision 0)
@@ -0,0 +1,142 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.transport.mms;
+
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.InputStream;
+import java.io.Reader;
+
+import javax.xml.namespace.QName;
+import org.apache.axiom.om.impl.builder.StAXBuilder;
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.description.TransportOutDescription;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.engine.AxisEngine;
+import org.apache.axis2.i18n.Messages;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.xml.stream.XMLStreamReader;
+
+public class MMSWorker implements Runnable {
+
+	private static final Log log = LogFactory.getLog(MMSWorker.class);
+    private ConfigurationContext configContext;
+    private MessageInputConnection mic = null;
+    
+	public MMSWorker(ConfigurationContext configContext,
+		          	 MessageInputConnection mic) {
+		this.configContext = configContext;
+		this.mic = mic;
+	}
+	
+	public void run() {		
+        MessageContext msgContext = null;
+        OutputStream out = null;
+        
+        try {
+            AxisEngine engine = new AxisEngine(configContext);
+            AxisConfiguration axisConf = configContext.getAxisConfiguration();
+            TransportOutDescription transportOut =
+                axisConf.getTransportOut(new QName(Constants.TRANSPORT_MMS));
+            TransportInDescription transportIn =
+                axisConf.getTransportIn(new QName(Constants.TRANSPORT_MMS));
+            
+            if ((transportOut == null || transportIn == null)) {            	
+            	throw new AxisFault(Messages.getMessage("unknownTransport",
+                        Constants.TRANSPORT_MMS));
+            }
+            // create the Message Context and fill in the values
+            msgContext = new MessageContext();
+            msgContext.setIncomingTransportName(Constants.TRANSPORT_MMS);
+            msgContext.setConfigurationContext(configContext);
+            msgContext.setTransportIn(transportIn);
+            msgContext.setTransportOut(transportOut);
+            msgContext.setServerSide(true);
+
+            String wg = (String)transportIn.getParameter(
+             		                "wap_gateway").getValue();
+            String wgp = (String)transportIn.getParameter(
+               		                "wap_gateway_port").getValue();
+            String mmsc = (String)transportIn.getParameter(
+               		                 "mms_server").getValue();
+            String my_add = (String)transportIn.getParameter(
+               		                 "my_address").getValue();
+            String app_id = (String)transportIn.getParameter(
+                                     "app_id").getValue();
+
+            // create the SOAP Envelope
+            // receives the input stream from the message input connection
+            InputStream ins = mic.openConnection();
+            if (ins == null) {
+             	return;
+            }
+
+            Reader in = new InputStreamReader(ins);
+            
+            // sets the output stream
+            MessageSender sender = new MessageSender(
+              	   configContext,
+              	   my_add,
+                   mic.getSourceAddress(), wg,
+                   Integer.parseInt(wgp), mmsc, mic.getSubject(), app_id);
+            out = sender.openConnection();
+            msgContext.setProperty(MessageContext.TRANSPORT_OUT, out);
+            ////
+            
+            XMLStreamReader xmlreader = StAXUtils.
+                                         createXMLStreamReader(in);            
+            StAXBuilder builder = new StAXSOAPModelBuilder(
+            		                             xmlreader, null);            
+            SOAPEnvelope envelope = (SOAPEnvelope)builder.
+                                         getDocumentElement();
+            msgContext.setEnvelope(envelope);
+            msgContext.setTo(new EndpointReference(mic.getSubject()));            
+            if (envelope.getBody().hasFault()) {
+                engine.receiveFault(msgContext);
+            }
+            else {
+                engine.receive(msgContext);                
+            } 
+        } 
+        catch (Throwable te) {
+        	try {
+                AxisEngine engine = new AxisEngine(configContext);
+
+                if (msgContext != null) {                    
+                    msgContext.setProperty(MessageContext.TRANSPORT_OUT, out);
+                    MessageContext faultContext = engine.
+                           createFaultMessageContext(msgContext, te);
+                    engine.sendFault(faultContext);
+                }
+            } 
+            catch (Exception e) {
+                log.error(te);
+            }
+        } 
+    }
+	
+}
Index: modules/integration/maven.xml
===================================================================
--- modules/integration/maven.xml	(revision 426831)
+++ modules/integration/maven.xml	(working copy)
@@ -893,6 +893,14 @@
                 <ant:ant antfile="build.xml" inheritall="true" inheritrefs="true"
                          dir="test-resources/SOAP12Testing/SOAP12TestServiceC"/>
             </j:jelly>
+
+            <!-- MMS repo -->
+            <mkdir dir="target/test-resources/mms_repo"/>
+            <mkdir dir="target/test-resources/mms_repo/conf"/>
+            <mkdir dir="target/test-resources/mms_repo/modules"/>
+            <mkdir dir="target/test-resources/mms_repo/services"/>
+            <copy file="../samples/target/toWar/services/version.aar"
+                  tofile="target/test-resources/mms_repo/services/version.aar"/>
         </j:if>
     </postGoal>
 
Index: modules/integration/test/org/apache/axis2/transport/mms/MMSTransportTest.java
===================================================================
--- modules/integration/test/org/apache/axis2/transport/mms/MMSTransportTest.java	(revision 0)
+++ modules/integration/test/org/apache/axis2/transport/mms/MMSTransportTest.java	(revision 0)
@@ -0,0 +1,216 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.transport.mms;
+
+import junit.framework.TestCase;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.TransportOutDescription;
+import javax.xml.namespace.QName;
+import org.apache.axis2.Constants;
+import org.apache.axis2.transport.mms.codec.MMDecoder;
+import org.apache.axis2.transport.mms.codec.MMEncoder;
+import org.apache.axis2.transport.mms.codec.MMMessage;
+import org.apache.axis2.transport.mms.MMSServer;
+import org.apache.axis2.transport.mms.MessageNotifier;
+import org.apache.axis2.transport.mms.MessageInput;
+import org.apache.axis2.transport.mms.MessageOutput;
+import org.apache.axis2.transport.mms.MMSTransportSender;
+
+public class MMSTransportTest extends TestCase {
+
+	public static String exp_output = null;
+      private final String repo = "target/test-resources/mms_repo";
+	public MMSTransportTest() {
+		super("MMS Transport Test");
+	}
+	
+	public void testCodec() {
+		try {				
+		    MMMessage msg = new MMMessage();
+		    String strData = "MyMessage DATA 123456 *!@#$";
+		    byte[] data = strData.getBytes();
+		    String from = "+9477123456/TYPE=PLMN";
+		    String to = "127.0.0.1/TYPE=IPv4";
+		    String subject = "mms://127.0.0.1/axis2/services/version";
+		    
+		    msg.setData(data);
+		    msg.setFrom(from);
+		    msg.setTo(to);		
+		    msg.setSubject(subject);
+		
+		    MMEncoder enc = new MMEncoder();
+		    byte[] mmsData = enc.encode(msg);
+		    
+		    MMDecoder dec = new MMDecoder();
+		    msg = dec.decode(mmsData);
+		    
+		    assertEquals(msg.getFrom(), from);
+		    assertEquals(msg.getTo(), to);
+		    assertEquals(msg.getSubject(), subject);
+		    assertEquals(new String(msg.getData()), strData);		    
+		}
+		catch (MMSException mmse) {
+			fail(mmse.getMessage());
+		}		
+	}
+	
+	public void testWebServiceInvocation() {
+		String my_address = "+9477123456/TYPE=PLMN";
+		String mms_server = "127.0.0.1";
+		String wap_gateway = "127.0.0.1";
+		int wap_gateway_port = 9021;
+		String noti_class = this.getClass().getName()+"$TestNotifier";		
+		String in_class = this.getClass().getName()+"$TestInput";
+		String out_class = this.getClass().getName()+"$TestOutput";
+		String app_id = "WS_MMS";
+		
+		try {		
+		    ConfigurationContext configContext = ConfigurationContextFactory.
+		       createConfigurationContextFromFileSystem(repo, null);	
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportOutDescription trs_out = new TransportOutDescription(
+		    		                   new QName(Constants.TRANSPORT_MMS));
+		    
+		    trs_out.setSender(new MMSTransportSender());
+            axisConf.addTransportOut(trs_out);
+		    
+		    MMSServer server = new MMSServer(my_address,
+		                                 mms_server,
+		                                 wap_gateway,
+                                         wap_gateway_port,
+                                         in_class,
+                                         out_class,
+                                         noti_class,
+                                         app_id,
+                                         configContext);
+		    server.start();
+		}
+		catch (AxisFault af) {
+			fail(af.getMessage());
+		}	
+		
+		long start = System.currentTimeMillis();
+		long end;
+		while(exp_output == null) {
+			Thread.yield();
+			end = System.currentTimeMillis();
+			if ((start - end) > 15000) {
+				break;
+			}
+		}		
+		int i = -1;
+		if (exp_output != null) {
+		    i = exp_output.indexOf("Hello I am Axis2 version service");
+		}
+		if (i == -1) {
+			fail("Expected response not received ..");
+		}		
+	}
+	
+	public static class TestNotifier implements MessageNotifier {
+		
+		private int c = 0;
+		
+		public TestNotifier() {
+			
+		}
+		
+		public void init(String wap_gateway, int wap_gateway_port,
+		  String app_id) {
+			
+		}
+		
+		public String listen() {
+			if (c==0) {
+				c++;
+			    return "url";
+			}
+			else {
+			    return null;
+			}
+		}
+		
+	}
+	
+	public static class TestInput implements MessageInput {
+		String soapReq = "<?xml version=\"1.0\" encoding=\"utf-8\"?> " +
+		 "<v:Envelope xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" "+
+         "xmlns:d=\"http://www.w3.org/2001/XMLSchema\" " +
+		 "xmlns:c=\"http://schemas.xmlsoap.org/soap/encoding/\" " +
+		 "xmlns:v=\"http://schemas.xmlsoap.org/soap/envelope/\"> " +
+         "<v:Body> " +
+         "<tns:getVersion " +
+         "xmlns:tns=\"http://axisversion.sample/xsd\"></tns:getVersion> " +
+         "</v:Body> " +
+         "</v:Envelope>";
+		
+		public TestInput() {
+			
+		}
+		
+		public void init(String wap_gateway, int wap_gateway_port,
+				  String url) {
+			
+		}
+		
+		public byte[] getData() {
+			try {
+			    MMMessage msg = new MMMessage();
+			    MMEncoder enc = new MMEncoder();
+			    msg.setFrom("+9477123456/TYPE=PLMN");
+			    msg.setTo("127.0.0.1/TYPE=IPv4");
+			    msg.setSubject("mms://+9477123456/TYPE=PLMN" +
+			    		"/axis2/services/version");
+			    msg.setData(soapReq.getBytes());
+			
+			    return enc.encode(msg);
+			}
+			catch (MMSException mmse) {				
+			}
+			
+			return null;
+		}
+		
+	}
+	
+	public static class TestOutput implements MessageOutput {
+		
+		public TestOutput() {
+			
+		}
+		
+		public void init(String wap_gateway, int wap_gateway_port,
+                String mms_server, String app_id) {			
+		}
+
+        public void sendData(byte[] data) {
+        	try {
+        	    MMDecoder dec = new MMDecoder();        	
+           	    MMMessage msg = dec.decode(data);
+                exp_output = new String(msg.getData());
+        	}
+        	catch (MMSException mmme) {        		
+        	}           	
+        }               
+        
+	}
+	
+}
Index: modules/integration/test/org/apache/axis2/transport/mms/MMSTransportTest.java
===================================================================
--- modules/integration/test/org/apache/axis2/transport/mms/MMSTransportTest.java	(revision 0)
+++ modules/integration/test/org/apache/axis2/transport/mms/MMSTransportTest.java	(revision 0)
@@ -0,0 +1,216 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.transport.mms;
+
+import junit.framework.TestCase;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.description.TransportOutDescription;
+import javax.xml.namespace.QName;
+import org.apache.axis2.Constants;
+import org.apache.axis2.transport.mms.codec.MMDecoder;
+import org.apache.axis2.transport.mms.codec.MMEncoder;
+import org.apache.axis2.transport.mms.codec.MMMessage;
+import org.apache.axis2.transport.mms.MMSServer;
+import org.apache.axis2.transport.mms.MessageNotifier;
+import org.apache.axis2.transport.mms.MessageInput;
+import org.apache.axis2.transport.mms.MessageOutput;
+import org.apache.axis2.transport.mms.MMSTransportSender;
+
+public class MMSTransportTest extends TestCase {
+
+	public static String exp_output = null;
+      private final String repo = "target/test-resources/mms_repo";
+	public MMSTransportTest() {
+		super("MMS Transport Test");
+	}
+	
+	public void testCodec() {
+		try {				
+		    MMMessage msg = new MMMessage();
+		    String strData = "MyMessage DATA 123456 *!@#$";
+		    byte[] data = strData.getBytes();
+		    String from = "+9477123456/TYPE=PLMN";
+		    String to = "127.0.0.1/TYPE=IPv4";
+		    String subject = "mms://127.0.0.1/axis2/services/version";
+		    
+		    msg.setData(data);
+		    msg.setFrom(from);
+		    msg.setTo(to);		
+		    msg.setSubject(subject);
+		
+		    MMEncoder enc = new MMEncoder();
+		    byte[] mmsData = enc.encode(msg);
+		    
+		    MMDecoder dec = new MMDecoder();
+		    msg = dec.decode(mmsData);
+		    
+		    assertEquals(msg.getFrom(), from);
+		    assertEquals(msg.getTo(), to);
+		    assertEquals(msg.getSubject(), subject);
+		    assertEquals(new String(msg.getData()), strData);		    
+		}
+		catch (MMSException mmse) {
+			fail(mmse.getMessage());
+		}		
+	}
+	
+	public void testWebServiceInvocation() {
+		String my_address = "+9477123456/TYPE=PLMN";
+		String mms_server = "127.0.0.1";
+		String wap_gateway = "127.0.0.1";
+		int wap_gateway_port = 9021;
+		String noti_class = this.getClass().getName()+"$TestNotifier";		
+		String in_class = this.getClass().getName()+"$TestInput";
+		String out_class = this.getClass().getName()+"$TestOutput";
+		String app_id = "WS_MMS";
+		
+		try {		
+		    ConfigurationContext configContext = ConfigurationContextFactory.
+		       createConfigurationContextFromFileSystem(repo, null);	
+		    AxisConfiguration axisConf = configContext.getAxisConfiguration();
+		    TransportOutDescription trs_out = new TransportOutDescription(
+		    		                   new QName(Constants.TRANSPORT_MMS));
+		    
+		    trs_out.setSender(new MMSTransportSender());
+            axisConf.addTransportOut(trs_out);
+		    
+		    MMSServer server = new MMSServer(my_address,
+		                                 mms_server,
+		                                 wap_gateway,
+                                         wap_gateway_port,
+                                         in_class,
+                                         out_class,
+                                         noti_class,
+                                         app_id,
+                                         configContext);
+		    server.start();
+		}
+		catch (AxisFault af) {
+			fail(af.getMessage());
+		}	
+		
+		long start = System.currentTimeMillis();
+		long end;
+		while(exp_output == null) {
+			Thread.yield();
+			end = System.currentTimeMillis();
+			if ((start - end) > 15000) {
+				break;
+			}
+		}		
+		int i = -1;
+		if (exp_output != null) {
+		    i = exp_output.indexOf("Hello I am Axis2 version service");
+		}
+		if (i == -1) {
+			fail("Expected response not received ..");
+		}		
+	}
+	
+	public static class TestNotifier implements MessageNotifier {
+		
+		private int c = 0;
+		
+		public TestNotifier() {
+			
+		}
+		
+		public void init(String wap_gateway, int wap_gateway_port,
+		  String app_id) {
+			
+		}
+		
+		public String listen() {
+			if (c==0) {
+				c++;
+			    return "url";
+			}
+			else {
+			    return null;
+			}
+		}
+		
+	}
+	
+	public static class TestInput implements MessageInput {
+		String soapReq = "<?xml version=\"1.0\" encoding=\"utf-8\"?> " +
+		 "<v:Envelope xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" "+
+         "xmlns:d=\"http://www.w3.org/2001/XMLSchema\" " +
+		 "xmlns:c=\"http://schemas.xmlsoap.org/soap/encoding/\" " +
+		 "xmlns:v=\"http://schemas.xmlsoap.org/soap/envelope/\"> " +
+         "<v:Body> " +
+         "<tns:getVersion " +
+         "xmlns:tns=\"http://axisversion.sample/xsd\"></tns:getVersion> " +
+         "</v:Body> " +
+         "</v:Envelope>";
+		
+		public TestInput() {
+			
+		}
+		
+		public void init(String wap_gateway, int wap_gateway_port,
+				  String url) {
+			
+		}
+		
+		public byte[] getData() {
+			try {
+			    MMMessage msg = new MMMessage();
+			    MMEncoder enc = new MMEncoder();
+			    msg.setFrom("+9477123456/TYPE=PLMN");
+			    msg.setTo("127.0.0.1/TYPE=IPv4");
+			    msg.setSubject("mms://+9477123456/TYPE=PLMN" +
+			    		"/axis2/services/version");
+			    msg.setData(soapReq.getBytes());
+			
+			    return enc.encode(msg);
+			}
+			catch (MMSException mmse) {				
+			}
+			
+			return null;
+		}
+		
+	}
+	
+	public static class TestOutput implements MessageOutput {
+		
+		public TestOutput() {
+			
+		}
+		
+		public void init(String wap_gateway, int wap_gateway_port,
+                String mms_server, String app_id) {			
+		}
+
+        public void sendData(byte[] data) {
+        	try {
+        	    MMDecoder dec = new MMDecoder();        	
+           	    MMMessage msg = dec.decode(data);
+                exp_output = new String(msg.getData());
+        	}
+        	catch (MMSException mmme) {        		
+        	}           	
+        }               
+        
+	}
+	
+}
