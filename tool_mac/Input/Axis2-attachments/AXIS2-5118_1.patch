package org.apache.axis2.databinding.utils;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.beans.BeanInfo;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class BeanInfoCacheTest {

	private BeanInfo value1;
	private Class<?> key1;

	@Before
	public void setUpKeysAndValues() {
		BeanInfoCache.clear();
		value1 = Mockito.mock(BeanInfo.class);
		key1 = value1.getClass();
	}
	
	@Test 
	public void ignorePutNullKey() {
		BeanInfoCache.put(null, value1);
		assertThat(BeanInfoCache.size(), is(0));
	}
	
	@Test 
	public void ignorePutNullValue() {
		BeanInfoCache.put(key1, null);
		assertThat(BeanInfoCache.size(), is(0));
		assertThat(BeanInfoCache.get(key1), is((BeanInfo)null));
	}
	
	@Test
	public void isInCacheShouldReturnTrue() {
		BeanInfoCache.put(key1,value1);
		assertThat(BeanInfoCache.get(key1), is(value1));
		assertThat(BeanInfoCache.size(), is(1));
	}

	@Test
	public void otherObjectShouldNotBeFound() {
		BeanInfoCache.put(key1,value1);
		assertThat(BeanInfoCache.get(new Object()), is((BeanInfo)null));
		assertThat(BeanInfoCache.size(), is(1));
	}

	@Test
	public void oldestElementShouldBeRemovedAfterPut() {
		Class<?>[] classes=getListOfArbitrary11Classes(); 
		for (Class<?> class1 : classes) {
			BeanInfoCache.put(class1, value1);
		}
		assertThat(BeanInfoCache.size(), is(10));
		assertThat(BeanInfoCache.get(String.class), is((BeanInfo)null));
	}

	private Class<?>[] getListOfArbitrary11Classes() {
		return new Class<?>[] {String.class,Long.class,Exception.class,RuntimeException.class,
				Class.class,ClassLoader.class,Integer.class, Boolean.class,
				Float.class,Byte.class,Short.class};
	}
	
	@Test
	public void objectWeGetEqualsObjectWePut() {
		BeanInfoCache.put(key1,value1);
		assertThat(BeanInfoCache.get(key1), is(value1));
		assertThat(BeanInfoCache.size(), is(1));
	}
}
