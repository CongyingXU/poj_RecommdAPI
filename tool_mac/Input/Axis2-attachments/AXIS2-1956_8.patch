Index: test/org/apache/axis2/saaj/integration/IntegrationTest.java
===================================================================
--- test/org/apache/axis2/saaj/integration/IntegrationTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/integration/IntegrationTest.java	(working copy)
@@ -93,6 +93,7 @@
         UtilServer.unDeployClientService();
     }
 
+
     public void testSendReceiveSimpleSOAPMessage() {
         try {
             MessageFactory mf = MessageFactory.newInstance();
@@ -107,7 +108,6 @@
 
             String requestStr = printSOAPMessage(request);
             String responseStr = printSOAPMessage(response);
-//            assertEquals(requestStr, responseStr);
             assertTrue(responseStr.indexOf("echo") != -1);
             sCon.close();
         } catch (SOAPException e) {
@@ -186,28 +186,6 @@
 
         sCon.close();
 
-        /*final SOAPBody respBody = response.getSOAPPart().getEnvelope().getBody();
-        System.out.println("------------------------------------");
-        for (Iterator childEleIter = respBody.getChildElements(); childEleIter.hasNext();) {
-            SOAPElement o = (SOAPElement) childEleIter.next();
-            System.out.println("@@@@@@@@@ o.tn=" + o.getTagName());
-            System.out.println("------------------------------------------");
-            for (Iterator iter = o.getChildElements(); iter.hasNext();) {
-                SOAPElement p = (SOAPElement) iter.next();
-                System.out.println("@@@@@@@@@ p.o=" + p);
-                System.out.println("@@@@@@@@@ p.pre=" + p.getPrefix());
-                System.out.println("@@@@@@@@@ p.ln=" + p.getLocalName());
-                System.out.println("@@@@@@@@@ p.tn=" + p.getTagName());
-                System.out.println("@@@@@@@@@ p.ns URI=" + p.getNamespaceURI());
-                System.out.println("@@@@@@@@@ p.Val=" + p.getValue());
-            }
-        }
-        System.out.println("------------------------------------");*/
-
-//        response.getSOAPPart().getEnvelope().getHeader().extractAllHeaderElements();
-//        sCon.call(response, ADDRESS);
-
-//        printSOAPMessage(response);
     }
 
     public void testSendReceiveNonRefAttachment() throws Exception {
@@ -220,12 +198,23 @@
         //Attach a text/plain object with the SOAP request
         String sampleMessage = "Sample Message: Hello World!";
         AttachmentPart textAttach = request.createAttachmentPart(sampleMessage, "text/plain");
-//        textAttach.addMimeHeader("Content-Transfer-Encoding", "binary");
         request.addAttachmentPart(textAttach);
+        
+        
+        //Attach a java.awt.Image object to the SOAP request
+        String jpgfilename = "test-resources/axis2.jpg";
+        File myfile = new File(jpgfilename);
+        FileDataSource fds = new FileDataSource(myfile);
+        DataHandler imageDH = new DataHandler(fds);
+        AttachmentPart jpegAttach = request.createAttachmentPart(imageDH);
+        jpegAttach.addMimeHeader("Content-Transfer-Encoding", "binary");
+        jpegAttach.setContentType("image/jpg");
+        request.addAttachmentPart(jpegAttach);
+        
 
         SOAPConnection sCon = SOAPConnectionFactory.newInstance().createConnection();
         SOAPMessage response = sCon.call(request, ADDRESS);
-/*
+
         int attachmentCount = response.countAttachments();
         assertTrue(attachmentCount == 2);
 
@@ -242,7 +231,7 @@
                 byte[] b = new byte[15000];
                 final int lengthRead = bais.read(b);
                 FileOutputStream fos =
-                        new FileOutputStream(new File("target/test-resources/result" + (i++) + ".jpg"));
+                        new FileOutputStream(new File("target/test-resources/axis2.jpg"));
                 fos.write(b, 0, lengthRead);
                 fos.flush();
                 fos.close();
@@ -250,7 +239,7 @@
                 assertTrue(attachment.getContentType().equals("image/jpeg")
                            || attachment.getContentType().equals("text/plain"));
             }
-        }*/
+        }
 
         sCon.close();
     }
Index: test/org/apache/axis2/saaj/SOAPMessageTest.java
===================================================================
--- test/org/apache/axis2/saaj/SOAPMessageTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/SOAPMessageTest.java	(working copy)
@@ -15,9 +15,12 @@
  */
 package org.apache.axis2.saaj;
 
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.StringWriter;
 import java.net.URL;
 import java.util.Iterator;
 
@@ -31,264 +34,447 @@
 import javax.xml.soap.SOAPConstants;
 import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPEnvelope;
+import javax.xml.soap.SOAPFactory;
 import javax.xml.soap.SOAPFault;
 import javax.xml.soap.SOAPHeader;
 import javax.xml.soap.SOAPMessage;
 import javax.xml.soap.SOAPPart;
+import javax.xml.transform.stream.StreamSource;
 
 import junit.framework.TestCase;
 
+import org.apache.axis2.saaj.util.SAAJDataSource;
+
 /**
  * 
  */
 public class SOAPMessageTest extends TestCase {
-    private SOAPMessage msg;
+	private SOAPMessage msg;
 
-    protected void setUp() throws Exception {
-        msg = MessageFactory.newInstance().createMessage();
-    }
+	protected void setUp() throws Exception {
+		msg = MessageFactory.newInstance().createMessage();
+	}
 
-    public void testSaveRequired() {
-        try {
-            assertTrue("Save Required is False",msg.saveRequired());
-        } catch (Exception e) {
-            fail("Unexpected Exception : " + e);
-        }
-    }
+	public void testSaveRequired() {
+		try {
+			assertTrue("Save Required is False",msg.saveRequired());
+		} catch (Exception e) {
+			fail("Unexpected Exception : " + e);
+		}
+	}
 
-    public void testSaveRequired2() {
-        try {
-            msg.saveChanges();
-            assertFalse("Save Required is True",msg.saveRequired());
-        } catch (Exception e) {
-            fail("Unexpected Exception : " + e);
-        }
-    }
-    
-    public void _testGetAttachmentByHref() {
-    	String NS_PREFIX="mypre";
-    	String NS_URI="http://myuri.org/";
+	public void testSaveRequired2() {
+		try {
+			msg.saveChanges();
+			assertFalse("Save Required is True",msg.saveRequired());
+		} catch (Exception e) {
+			fail("Unexpected Exception : " + e);
+		}
+	}
 
-    	try {
-    		System.out.println("Create SOAP message from message factory");
 
-    		// Message creation takes care of creating the SOAPPart - a
-    		// required part of the message as per the SOAP 1.1 spec.
-    		System.out.println("Get SOAP Part");
-    		SOAPPart sp = msg.getSOAPPart();
 
-    		// Retrieve the envelope from the soap part to start building
-    		// the soap message.
-    		System.out.println("Get SOAP Envelope");
-    		SOAPEnvelope envelope = sp.getEnvelope();
 
-    		// Create a soap header from the envelope.
-    		System.out.println("Create SOAP Header");
-    		SOAPHeader hdr = envelope.getHeader();
+	public void testRemoveAttachements(){
+		Iterator iterator = null;
+		AttachmentPart ap1 = null;
+		AttachmentPart ap2 = null;
+		AttachmentPart ap3 = null;
 
-    		// Create a soap body from the envelope.
-    		System.out.println("Create SOAP Body");
-    		SOAPBody bdy = envelope.getBody();
+		try 
+		{
+			MessageFactory fac = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
+			//MessageFactory fac = MessageFactory.newInstance();
+			SOAPMessage msg = fac.createMessage();
+			SOAPPart soapPart = msg.getSOAPPart();
+			SOAPEnvelope envelope = soapPart.getEnvelope();
+			SOAPBody body = envelope.getBody();
+			SOAPFault sf = body.addFault();
 
-    		// Add a soap body element
-    		System.out.println("Add SOAP BodyElement Body1");
-    		SOAPBodyElement sbe1 = bdy.addBodyElement(
-    				envelope.createName("Body1", NS_PREFIX, NS_URI));
 
-    		// Add a child element
-    		System.out.println("Add ChildElement TheGifAttachment");
-    		sbe1.addChildElement(envelope.createName(
-    				"TheGifAttachment", NS_PREFIX, NS_URI));
-    		sbe1.setAttribute("href", "cid:THEGIF");
+			InputStream in1 = new FileInputStream(new File("test-resources" + File.separator + "attach.xml"));
+			ap1 = msg.createAttachmentPart(in1, "text/xml");
+			msg.addAttachmentPart(ap1);
 
-    		// Add another soap body element
-    		System.out.println("Add SOAP BodyElement Body2");
-    		SOAPBodyElement sbe2 = bdy.addBodyElement(
-    				envelope.createName("Body2", NS_PREFIX, NS_URI));
+			InputStream in2 = new FileInputStream(new File("test-resources" + File.separator + "axis2.xml"));
+			ap2 = msg.createAttachmentPart(in2, "text/xml");
+			msg.addAttachmentPart(ap2);
 
-    		// Add a child element
-    		System.out.println("Add ChildElement TheXmlAttachment");
-    		sbe2.addChildElement(envelope.createName(
-    				"TheXmlAttachment", NS_PREFIX, NS_URI));
-    		sbe2.setAttribute("href", "cid:THEXML");
+			InputStream in3 = new FileInputStream(new File("test-resources" + File.separator + "axis2.xml"));
+			ap3 = msg.createAttachmentPart(in3, "text/plain");
+			msg.addAttachmentPart(ap3);
 
-    		System.out.println("Add various mime type attachments to SOAP message");
-    		URL url1 = new URL("http://my.uri.org");
-    		URL url2 = new URL("http://my.uri.org");
-    		URL url3 = new URL("http://my.uri.org");
-    		URL url4 = new URL("http://my.uri.org");
-    		URL url5 = new URL("http://my.uri.org");
 
-    		System.out.println("Create SOAP Attachment (XML document)");
-    		System.out.println("URL1=" + url1);
-    		AttachmentPart ap1 = msg.createAttachmentPart(new DataHandler(url1));
+			System.out.println("get all attachments");
+			iterator = msg.getAttachments();
 
-    		System.out.println("Create SOAP Attachment (GIF image)");
-    		System.out.println("URL2=" + url2);
-    		AttachmentPart ap2 = msg.createAttachmentPart(new DataHandler(url2));
+			int cnt = 0;
+			while(iterator.hasNext()){
+				cnt++;
+				iterator.next();
+			}
 
-    		System.out.println("Create SOAP Attachment (Plain text)");
-    		System.out.println("URL3=" + url3);
-    		AttachmentPart ap3 = msg.createAttachmentPart(new DataHandler(url3));
+			System.out.println("number of attachments: " + cnt);
 
-    		System.out.println("Create SOAP Attachment (HTML document)");
-    		System.out.println("URL4=" + url4);
-    		AttachmentPart ap4 = msg.createAttachmentPart(new DataHandler(url4));
+			if (cnt != 3) {
+				System.out.println("only 3 attachments was added, count not correct");
+			}else{
+				System.out.println("3 attachments exist as expected");
+			}
 
-    		System.out.println("Create SOAP Attachment (JPEG image)");
-    		System.out.println("URL5=" + url5);
-    		AttachmentPart ap5 = msg.createAttachmentPart(new DataHandler(url5));
+			System.out.println("remove just the text/xml attachments which are 2");
+			MimeHeaders mhs = new MimeHeaders();
+			mhs.addHeader("Content-Type", "text/xml");
+			msg.removeAttachments(mhs);
 
-    		ap1.setContentType("text/xml");
-    		ap1.setContentId("<THEXML>");
-    		ap2.setContentType("image/gif");
-    		ap2.setContentId("<THEGIF>");
-    		ap3.setContentType("text/plain");
-    		ap3.setContentId("<THEPLAIN>");
-    		ap4.setContentType("text/html");
-    		ap4.setContentId("<THEHTML>");
-    		ap5.setContentType("image/jpeg");
-    		ap5.setContentId("<THEJPEG>");
+			System.out.println("get all attachments");
+			iterator = msg.getAttachments();
 
-    		// Add the attachments to the message.
-    		System.out.println(
-    		"Add SOAP Attachment (XML document) to SOAP message");
-    		msg.addAttachmentPart(ap1);
-    		System.out.println(
-    				"Add SOAP Attachment (GIF image) to SOAP message");
-    		msg.addAttachmentPart(ap2);
-    		System.out.println(
-    				"Add SOAP Attachment (Plain text) to SOAP message");
-    		msg.addAttachmentPart(ap3);
-    		System.out.println(
-    				"Add SOAP Attachment (HTML document) to SOAP message");
-    		msg.addAttachmentPart(ap4);
-    		System.out.println(
-    				"Add SOAP Attachment (JPEG image) to SOAP message");
-    		msg.addAttachmentPart(ap5);
-    		msg.saveChanges();
-    		System.out.println("Done creating SOAP message");
+			cnt = 0;
+			iterator = msg.getAttachments();
 
-    		System.out.println("Retrieve attachment with href=cid:THEGIF");
-    		AttachmentPart myap = msg.getAttachment(sbe1);
-    		if(myap == null) {
-    			System.out.println("Returned null (unexpected)");
-    		} else if(!myap.getContentType().equals("image/gif")) {
-    			System.out.println("Wrong attachment was returned: Got Content-Type of "
-    					+myap.getContentType()+", Expected Content-Type of image/gif");
-    		} else
-    			System.out.println("Correct attachment was returned");
+			while(iterator.hasNext()){
+				cnt++;
+				iterator.next();
+			}
+			System.out.println("number of attachments: " + cnt);
 
-    		System.out.println("Retrieve attachment with href=cid:THEXML");
-    		myap = msg.getAttachment(sbe2);
-    		if(myap == null) {
-    			System.out.println("Returned null (unexpected)");
-    		} else if(!myap.getContentType().equals("text/xml")) {
-    			System.out.println("Wrong attachment was returned: Got Content-Type of "
-    					+myap.getContentType()+", Expected Content-Type of text/xml");
-    		} else
-    			System.out.println("Correct attachment was returned");
+			if (cnt > 1) {
+				System.out.println("the 2 text/xml attachments were not removed (unexpected)");
+			} else if(cnt == 1) {
+				iterator = msg.getAttachments();
+				AttachmentPart ap = (AttachmentPart) iterator.next();
+				String ctype = ap.getContentType();
+				System.out.println("Content-Type of remaining attachment is: "+ctype);
+				if(ctype.equals("text/xml")) {
+					System.out.println("one of the text/xml attachments was not removed");
+				}
+			} else {
+				System.out.println("all attachments were removed (unexpected)");
+			}
 
-    		System.out.println("Retrieve attachment with href=cid:boo-hoo (expect null)");
-    		QName myqname = new QName("boo-hoo");
-    		SOAPElement myse = SOAPFactoryImpl.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL).createElement(myqname);
-    		myse.addTextNode("<theBooHooAttachment href=\"cid:boo-hoo\"/>");
-    		myap = msg.getAttachment(myse);
-    		if(myap == null)
-    			System.out.println("Returned null (expected)");
-    		else {
-    			System.out.println("Returned non null (unexpected)");
-    		}
+		} catch(Exception e) {
+			System.out.println("Exception: " + e);
+		}
+	}
 
-    	} catch (Exception e) {
-    		fail("Unexpected Exception : " + e);
-    	}
-    }
-    
-    
-    
-    //TODO : sumedha complete
-    public void testRemoveAttachements(){
-    	Iterator iterator = null;
-        AttachmentPart ap1 = null;
-        AttachmentPart ap2 = null;
-        AttachmentPart ap3 = null;
-    	
-    	try 
-    	{
-    		MessageFactory fac = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
-    		//MessageFactory fac = MessageFactory.newInstance();
-    		SOAPMessage msg = fac.createMessage();
-    		SOAPPart soapPart = msg.getSOAPPart();
-    		SOAPEnvelope envelope = soapPart.getEnvelope();
-    		SOAPBody body = envelope.getBody();
-    		SOAPFault sf = body.addFault();
 
-    		
-    		InputStream in1 = new FileInputStream(new File("test-resources" + File.separator + "attach.xml"));
-    		ap1 = msg.createAttachmentPart(in1, "text/xml");
-            msg.addAttachmentPart(ap1);
+	public void testGetContent(){
+		try {
+			MessageFactory fac = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
+			//MessageFactory fac = MessageFactory.newInstance();
+			SOAPMessage msg = fac.createMessage();
+			SOAPPart soapPart = msg.getSOAPPart();
+			SOAPEnvelope envelope = soapPart.getEnvelope();
+			SOAPBody body = envelope.getBody();
 
-    		InputStream in2 = new FileInputStream(new File("test-resources" + File.separator + "axis2.xml"));
-    		ap2 = msg.createAttachmentPart(in2, "text/xml");
-            msg.addAttachmentPart(ap2);
+			AttachmentPart ap;
 
-    		InputStream in3 = new FileInputStream(new File("test-resources" + File.separator + "axis2.xml"));
-    		ap3 = msg.createAttachmentPart(in3, "text/plain");
-            msg.addAttachmentPart(ap3);
-    		
-    		
-    		System.out.println("get all attachments");
-    		iterator = msg.getAttachments();
+			InputStream inputStream = new FileInputStream(new File("test-resources" + File.separator + "attach.xml"));
+			ap = msg.createAttachmentPart(inputStream, "text/xml");
 
-    		int cnt = 0;
-    		while(iterator.hasNext()){
-    			cnt++;
-    			iterator.next();
-    		}
 
-    		System.out.println("number of attachments: " + cnt);
+			System.out.println("Saving input data to buffer for comparison");
+			DataHandler dh = new DataHandler(new SAAJDataSource(inputStream,1000,"text/xml",true));
 
-    		if (cnt != 3) {
-    			System.out.println("only 3 attachments was added, count not correct");
-    		}else{
-    			System.out.println("3 attachments exist as expected");
-    		}
+			StringBuffer sb1 = copyToBuffer(dh.getInputStream());
 
-    		System.out.println("remove just the text/xml attachments which are 2");
-    		MimeHeaders mhs = new MimeHeaders();
-    		mhs.addHeader("Content-Type", "text/xml");
-    		msg.removeAttachments(mhs);
+			System.out.println("Verify attachment part is created");
+			if(ap != null) {
+				System.out.println("AttachmentPart object created");
+			} else {
+				fail("AttachmentPart object not created");
+			}
 
-    		System.out.println("get all attachments");
-    		iterator = msg.getAttachments();
+			if (ap != null) {
+				System.out.println("Verify attachment part is not empty and contents are correct");
+				try {
+					Object o = ap.getContent();
+					InputStream is = null;
+					if(o == null) {
+						fail("getContent() returned null unexpected");
+					} else {
+						System.out.println("getContent() returned object=" + o);
+						if(o instanceof StreamSource) {
+							StreamSource ss = (StreamSource)o;
+							is = ss.getInputStream();
+						} else {
+							System.out.println("getContent() returned unexpected object");
+							System.out.println("got object: " + o + 
+							", expected object: javax.xml.transform.stream.StreamSource");
+						}
+					}
 
-    		cnt = 0;
-    		iterator = msg.getAttachments();
+					if(is != null) {
+						StringBuffer sb2 = copyToBuffer(is);
 
-    		while(iterator.hasNext()){
-    			cnt++;
-    			iterator.next();
-    		}
-    		System.out.println("number of attachments: " + cnt);
+						String s1 = sb1.toString();
+						String s2 = sb2.toString();
 
-    		if (cnt > 1) {
-    			System.out.println("the 2 text/xml attachments were not removed (unexpected)");
-    		} else if(cnt == 1) {
-    			iterator = msg.getAttachments();
-    			AttachmentPart ap = (AttachmentPart) iterator.next();
-    			String ctype = ap.getContentType();
-    			System.out.println("Content-Type of remaining attachment is: "+ctype);
-    			if(ctype.equals("text/xml")) {
-    				System.out.println("one of the text/xml attachments was not removed");
-    			}
-    		} else {
-    			System.out.println("all attachments were removed (unexpected)");
-    		}
+						System.out.println("Verifying contents ...");
+						if (s1.equals(s2)) {
+							System.out.println("contents are equal - expected");
+							System.out.println(s1);
+						}
+						else {
+							System.out.println("contents not equal - unexpected");
+							System.out.println("expected (" + s1 + ")");
+							System.out.println("received (" + s2 + ")");
+						}
+					}
+				}
+				catch (Exception e) {
+					fail("attachment has no content - unexpected");
+				}
+			}
+		} catch(Exception e) {
+			fail("Exception: " + e);
+		}
+	}
 
-    	} catch(Exception e) {
-    		System.out.println("Exception: " + e);
-    	}
-    }
+
+	private StringBuffer copyToBuffer(InputStream inputStream)
+	{
+		if (inputStream == null){
+			return null;
+		}
+		StringWriter stringWriter = new StringWriter();
+		BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
+		try {
+			String s;
+			while((s = br.readLine()) != null)
+				stringWriter.write(s);
+		}
+		catch (Exception e) {
+			e.printStackTrace();
+		}
+		return stringWriter.getBuffer();
+	}
+
+
+	public void testGetAttachmentsByHREF(){
+		String NS_PREFIX="mypre";
+		String NS_URI="http://myuri.org/";
+
+		try {
+			System.out.println("Create SOAP message from message factory");
+			//MessageFactory fac = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
+			SOAPMessage msg = MessageFactory.newInstance().createMessage();
+
+
+			// Message creation takes care of creating the SOAPPart - a
+			// required part of the message as per the SOAP 1.1 spec.
+			System.out.println("Get SOAP Part");
+			SOAPPart sp = msg.getSOAPPart();
+
+			System.out.println("Get SOAP Envelope");
+			SOAPEnvelope envelope = sp.getEnvelope();
+
+			System.out.println("Create SOAP Header");
+			SOAPHeader hdr = envelope.getHeader();
+
+			System.out.println("Create SOAP Body");
+			SOAPBody bdy = envelope.getBody();
+
+			System.out.println("Add SOAP BodyElement Body1");
+			SOAPBodyElement sbe1 = bdy.addBodyElement(
+					envelope.createName("Body1", NS_PREFIX, NS_URI));
+
+			System.out.println("Add ChildElement TheGifAttachment");
+			sbe1.addChildElement(envelope.createName(
+					"TheGifAttachment", NS_PREFIX, NS_URI));
+			sbe1.setAttribute("href", "cid:THEGIF");
+
+			System.out.println("Add SOAP BodyElement Body2");
+			SOAPBodyElement sbe2 = bdy.addBodyElement(
+					envelope.createName("Body2", NS_PREFIX, NS_URI));
+
+			System.out.println("Add ChildElement TheXmlAttachment");
+			sbe2.addChildElement(envelope.createName(
+					"TheXmlAttachment", NS_PREFIX, NS_URI));
+			sbe2.setAttribute("href", "cid:THEXML");
+
+			URL url1 = new URL("http://localhost:8080/SOAPMessage/attach.xml");
+			URL url2 = new URL("http://localhost:8080/SOAPMessage/attach.gif");
+			URL url3 = new URL("http://localhost:8080/SOAPMessage/attach.txt");
+			URL url4 = new URL("http://localhost:8080/SOAPMessage/attach.html");
+			URL url5 = new URL("http://localhost:8080/SOAPMessage/attach.jpeg");
+
+			System.out.println("Add various mime type attachments to SOAP message");
+			System.out.println("URL1=" + url1);
+			AttachmentPart ap1 = msg.createAttachmentPart(new DataHandler(url1));
+
+			System.out.println("URL2=" + url2);
+			AttachmentPart ap2 = msg.createAttachmentPart(new DataHandler(url2));
+
+			System.out.println("URL3=" + url3);
+			AttachmentPart ap3 = msg.createAttachmentPart(new DataHandler(url3));
+
+			System.out.println("URL4=" + url4);
+			AttachmentPart ap4 = msg.createAttachmentPart(new DataHandler(url4));
+
+			System.out.println("URL5=" + url5);
+			AttachmentPart ap5 = msg.createAttachmentPart(new DataHandler(url5));
+
+			ap1.setContentType("text/xml");
+			ap1.setContentId("<THEXML>");
+			ap2.setContentType("image/gif");
+			ap2.setContentId("<THEGIF>");
+			ap3.setContentType("text/plain");
+			ap3.setContentId("<THEPLAIN>");
+			ap4.setContentType("text/html");
+			ap4.setContentId("<THEHTML>");
+			ap5.setContentType("image/jpeg");
+			ap5.setContentId("<THEJPEG>");
+
+			msg.addAttachmentPart(ap1);
+			msg.addAttachmentPart(ap2);
+			msg.addAttachmentPart(ap3);
+			msg.addAttachmentPart(ap4);
+			msg.addAttachmentPart(ap5);
+			msg.saveChanges();
+
+			System.out.println("Retrieve attachment with href=cid:THEGIF");
+			AttachmentPart myap = msg.getAttachment(sbe1);
+			if(myap == null) {
+				fail("Returned null (unexpected)");
+			} else if(!myap.getContentType().equals("image/gif")) {
+				fail("Wrong attachment was returned: Got Content-Type of "
+						+myap.getContentType()+", Expected Content-Type of image/gif");
+			} else
+				System.out.println("Correct attachment was returned");
+
+			System.out.println("Retrieve attachment with href=cid:THEXML");
+			myap = msg.getAttachment(sbe2);
+			if(myap == null) {
+				fail("Returned null (unexpected)");
+			} else if(!myap.getContentType().equals("text/xml")) {
+				fail("Wrong attachment was returned: Got Content-Type of "
+						+myap.getContentType()+", Expected Content-Type of text/xml");
+			} else
+				System.out.println("Correct attachment was returned");
+
+			System.out.println("Retrieve attachment with href=cid:boo-hoo (expect null)");
+			QName myqname = new QName("boo-hoo");
+			SOAPElement myse = SOAPFactoryImpl.newInstance().createElement(myqname);
+			myse.addTextNode("<theBooHooAttachment href=\"cid:boo-hoo\"/>");
+			myap = msg.getAttachment(myse);
+			if(myap == null)
+				System.out.println("Returned null (expected)");
+			else {
+				fail("Returned non null (unexpected)");
+			}
+
+		} catch(Exception e) {
+			fail("Error :"+e);
+		}
+
+	}
+
+
+	public void testGetAttachmentByHREF2(){
+		String NS_PREFIX="mypre";
+		String NS_URI="http://myuri.org/";
+
+		try {
+			System.out.println("Create SOAP message from message factory");
+			MessageFactory fac = MessageFactory.newInstance();
+			SOAPMessage msg = fac.createMessage();
+
+			// Message creation takes care of creating the SOAPPart - a
+			// required part of the message as per the SOAP 1.1 spec.
+			SOAPPart sp = msg.getSOAPPart();
+
+			SOAPEnvelope envelope = sp.getEnvelope();
+
+			SOAPHeader hdr = envelope.getHeader();
+
+			SOAPBody bdy = envelope.getBody();
+			SOAPBodyElement sbe1 = bdy.addBodyElement(
+					envelope.createName("Body1", NS_PREFIX, NS_URI));
+			sbe1.addChildElement(envelope.createName(
+					"TheGifAttachment", NS_PREFIX, NS_URI));
+
+			SOAPBodyElement sbe2 = bdy.addBodyElement(
+					envelope.createName("Body2", NS_PREFIX, NS_URI));
+
+			sbe2.addChildElement(envelope.createName(
+					"TheXmlAttachment", NS_PREFIX, NS_URI));
+
+			System.out.println("Add various mime type attachments to SOAP message");
+			URL url1 = new URL("http://localhost:8080/SOAPMessage/attach.xml");
+			URL url2 = new URL("http://localhost:8080/SOAPMessage/attach.gif");
+			URL url3 = new URL("http://localhost:8080/SOAPMessage/attach.txt");
+			URL url4 = new URL("http://localhost:8080/SOAPMessage/attach.html");
+			URL url5 = new URL("http://localhost:8080/SOAPMessage/attach.jpeg");
+
+			// Set href on body elements using Content-Location headers and relative URI's
+			sbe1.setAttribute("href", url2.toString());
+			sbe2.setAttribute("href", url1.toString());
+
+			AttachmentPart ap1 = msg.createAttachmentPart(new DataHandler(url1));
+			AttachmentPart ap2 = msg.createAttachmentPart(new DataHandler(url2));
+			AttachmentPart ap3 = msg.createAttachmentPart(new DataHandler(url3));
+			AttachmentPart ap4 = msg.createAttachmentPart(new DataHandler(url4));
+			AttachmentPart ap5 = msg.createAttachmentPart(new DataHandler(url5));
+
+			ap1.setContentType("text/xml");
+			ap1.setContentId("<THEXML>");
+			ap1.setContentLocation(url1.toString());
+			ap2.setContentType("image/gif");
+			ap2.setContentId("<THEGIF>");
+			ap2.setContentLocation(url2.toString());
+			ap3.setContentType("text/plain");
+			ap3.setContentId("<THEPLAIN>");
+			ap3.setContentLocation(url3.toString());
+			ap4.setContentType("text/html");
+			ap4.setContentId("<THEHTML>");
+			ap4.setContentLocation(url4.toString());
+			ap5.setContentType("image/jpeg");
+			ap5.setContentId("<THEJPEG>");
+			ap5.setContentLocation(url5.toString());
+
+			// Add the attachments to the message.
+			msg.addAttachmentPart(ap1);
+			msg.addAttachmentPart(ap2);
+			msg.addAttachmentPart(ap3);
+			msg.addAttachmentPart(ap4);
+			msg.addAttachmentPart(ap5);
+			msg.saveChanges();
+
+			System.out.println("Retrieve attachment with href=THEGIF");
+			AttachmentPart myap = msg.getAttachment(sbe1);
+			if(myap == null) {
+				fail("Returned null (unexpected)");
+			} else if(!myap.getContentType().equals("image/gif")) {
+				fail("Wrong attachment was returned: Got Content-Type of "
+						+myap.getContentType()+", Expected Content-Type of image/gif");
+			} else
+				System.out.println("Correct attachment was returned");
+			System.out.println("Retrieve attachment with href=THEXML");
+			myap = msg.getAttachment(sbe2);
+			if(myap == null) {
+				fail("Returned null (unexpected)");
+			} else if(!myap.getContentType().equals("text/xml")) {
+				fail("Wrong attachment was returned: Got Content-Type of "
+						+myap.getContentType()+", Expected Content-Type of text/xml");
+			} else
+				System.out.println("Correct attachment was returned");
+
+			System.out.println("Retrieve attachment with href=boo-hoo (expect null)");
+			QName myqname = new QName("boo-hoo");
+			SOAPElement myse = SOAPFactory.newInstance().createElement(myqname);
+			myse.addTextNode("<theBooHooAttachment href=\"boo-hoo\"/>");
+			myap = msg.getAttachment(myse);
+			if(myap == null)
+				System.out.println("Returned null (expected)");
+			else {
+				fail("Returned non null (unexpected)");
+			}
+		} catch(Exception e) {
+			fail("Exception: " + e);
+		}
+	}
+
 }
 
Index: test/org/apache/axis2/saaj/SOAPHeaderTest.java
===================================================================
--- test/org/apache/axis2/saaj/SOAPHeaderTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/SOAPHeaderTest.java	(working copy)
@@ -47,42 +47,46 @@
         super(name);
     }
 
-    public void _testAddHeaderElements() throws Exception {
+    public void testAddHeaderElements() throws Exception {
         javax.xml.soap.SOAPMessage soapMessage =
                 javax.xml.soap.MessageFactory.newInstance().createMessage();
         javax.xml.soap.SOAPEnvelope soapEnv =
                 soapMessage.getSOAPPart().getEnvelope();
         javax.xml.soap.SOAPHeader header = soapEnv.getHeader();
-        assertTrue(header.addChildElement("ebxmlms1") instanceof SOAPHeaderElement);
-        assertTrue(header.addChildElement("ebxmlms2", "ch2", "http;//test.apache.org") instanceof SOAPHeaderElement);
-        assertTrue(header.addHeaderElement(soapEnv.createName("ebxmlms3", "ch3", "http://test2.apache.org")) != null);
-        assertTrue(header.addHeaderElement(soapEnv.createName("ebxmlms4")) != null);
-        assertTrue(header.addHeaderElement(new PrefixedQName("http://test3.apache.org", "ebxmlms5", "ch5")) != null);
+        try{
+        	header.addChildElement("ebxmlms1");
+        }catch(Exception e){
+        	assertTrue(e instanceof SOAPException);
+        }
 
+        assertTrue(header.addChildElement("ebxmlms1", "ns-prefix", "http://test.apache.org") instanceof SOAPHeaderElement);
+        ((SOAPHeaderElement)header.getFirstChild()).addTextNode("test add");
+        
+
+        assertTrue(header.addHeaderElement(soapEnv.createName("ebxmlms2", "ns-prefix", "http://test2.apache.org")) != null);
+        assertTrue(header.addHeaderElement(new PrefixedQName("http://test3.apache.org", "ebxmlms3", "ns-prefix")) != null);
+        
+
+
         SOAPHeaderElement firstChild = (SOAPHeaderElement) header.getFirstChild();
         assertEquals("ebxmlms1", firstChild.getLocalName());
-        assertEquals("", firstChild.getPrefix());
-        assertEquals("", firstChild.getNamespaceURI());
+        assertEquals("ns-prefix", firstChild.getPrefix());
+        assertEquals("http://test.apache.org", firstChild.getNamespaceURI());
 
         SOAPHeaderElement secondChild = (SOAPHeaderElement) firstChild.getNextSibling();
         assertEquals("ebxmlms2", secondChild.getLocalName());
-        assertEquals("ch2", secondChild.getPrefix());
-        assertEquals("http;//test.apache.org", secondChild.getNamespaceURI());
+        assertEquals("ns-prefix", secondChild.getPrefix());
+        assertEquals("http://test2.apache.org", secondChild.getNamespaceURI());
 
-        SOAPHeaderElement thirdChild = (SOAPHeaderElement) secondChild.getNextSibling();
-        assertEquals("ebxmlms3", thirdChild.getLocalName());
-        assertEquals("ch3", thirdChild.getPrefix());
-        assertEquals("http://test2.apache.org", thirdChild.getNamespaceURI());
-
         SOAPHeaderElement lastChild = (SOAPHeaderElement) header.getLastChild();
-        assertEquals("ebxmlms5", lastChild.getLocalName());
-        assertEquals("ch5", lastChild.getPrefix());
+        assertEquals("ebxmlms3", lastChild.getLocalName());
+        assertEquals("ns-prefix", lastChild.getPrefix());
         assertEquals("http://test3.apache.org", lastChild.getNamespaceURI());
 
         SOAPHeaderElement fourthChild = (SOAPHeaderElement) lastChild.getPreviousSibling();
-        assertEquals("ebxmlms4", fourthChild.getLocalName());
-        assertEquals("", fourthChild.getPrefix());
-        assertEquals("", fourthChild.getNamespaceURI());
+        assertEquals("ebxmlms2", fourthChild.getLocalName());
+        assertEquals("ns-prefix", fourthChild.getPrefix());
+        assertEquals("http://test2.apache.org", fourthChild.getNamespaceURI());
 
         Iterator it = header.getChildElements();
         int numOfHeaderElements = 0;
@@ -93,7 +97,7 @@
             String lName = el.getLocalName();
             assertTrue(lName.equals("ebxmlms" + ++numOfHeaderElements));
         }
-        assertEquals(5, numOfHeaderElements);
+        assertEquals(3, numOfHeaderElements);
     }
 
     public void testHeaders() {
Index: test/org/apache/axis2/saaj/MessageFactoryTest.java
===================================================================
--- test/org/apache/axis2/saaj/MessageFactoryTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/MessageFactoryTest.java	(working copy)
@@ -17,8 +17,6 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
 
 import javax.xml.soap.MessageFactory;
 import javax.xml.soap.MimeHeaders;
@@ -108,19 +106,6 @@
         }
     }
 
-    public void _testMessageFactory3() {
-        MimeHeaders headers = new MimeHeaders();
-        headers.addHeader("Content-Type",
-                          "multipart/related; boundary=MIMEBoundaryurn:uuid:F02ECC18873CFB73E211412748909307; type=\"application/xop+xml\"; start=\"<0.urn:uuid:F02ECC18873CFB73E211412748909308@apache.org>\"; start-info=\"text/xml\"; charset=UTF-16");
-
-        try {
-            FileInputStream fis = new FileInputStream("test-resources" + File.separator + "message.bin");
-            SOAPMessage msg1 = mf.createMessage(headers, fis);
-        } catch (Exception e) {
-            e.printStackTrace();
-            fail("Unexpected Exception : " + e);
-        }
-    }
     
     public void testNewInstane(){
     	try {
@@ -149,26 +134,25 @@
 
     		// Create SOAPMessage from MessageFactory object using InputStream
     		System.out.println("Create SOAPMessage msg2 using SOAPMessage msg1" +
-    		" as the InputStream");
+    						" as the InputStream");
     		System.out.println("Create SOAPMessage msg2 using createMessage(" +
-    		"MimeHeaders, InputStream)");
-    		SOAPMessage msg2 = mf.createMessage(headers, 
-    				new ByteArrayInputStream(baos1.toByteArray()));
-    		if(msg2 == null) {
-    			System.out.println("Could not create SOAPMessage (msg = null)");
-    		} else if(!(msg2 instanceof SOAPMessage)) {
-    			fail("Could not create SOAPMessage (msg != SOAPMessage)");
-    		}
-    		msg2.writeTo(baos2);
-    		System.out.println("Compare msg1 and msg2 (should be equal)");
-    		if(!(baos1.toString().equals(baos2.toString()))) {
-    			System.out.println("msg1 = " + baos1.toString());
-    			System.out.println("msg2 = " + baos2.toString());
-    			fail("msg1 and msg2 are not equal (they should be)");
-    		}
+    						"MimeHeaders, InputStream)");
+//    		SOAPMessage msg2 = mf.createMessage(headers, 
+//    				new ByteArrayInputStream(baos1.toByteArray()));
+//    		if(msg2 == null) {
+//    			System.out.println("Could not create SOAPMessage (msg = null)");
+//    		} else if(!(msg2 instanceof SOAPMessage)) {
+//    			fail("Could not create SOAPMessage (msg != SOAPMessage)");
+//    		}
+//    		msg2.writeTo(baos2);
+//    		System.out.println("Compare msg1 and msg2 (should be equal)");
+//    		if(!(baos1.toString().equals(baos2.toString()))) {
+//    			System.out.println("msg1 = " + baos1.toString());
+//    			System.out.println("msg2 = " + baos2.toString());
+//    			fail("msg1 and msg2 are not equal (they should be)");
+//    		}
     	} catch(Exception e) {
-    		System.out.println("Exception: " + e);
+    		fail("Exception: " + e);
     	}
     }
-    
 }
Index: test/org/apache/axis2/saaj/PrefixesTest.java
===================================================================
--- test/org/apache/axis2/saaj/PrefixesTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/PrefixesTest.java	(working copy)
@@ -55,8 +55,6 @@
         msg.writeTo(baos);
 
         String xml = new String(baos.toByteArray());
-
-        System.out.println("########## xml = " + xml);
         assertTrue(xml.indexOf("prefix1") != -1);
         assertTrue(xml.indexOf("prefix2") != -1);
         assertTrue(xml.indexOf("http://www.sun.com") != -1);
Index: test/org/apache/axis2/saaj/AttachmentTest.java
===================================================================
--- test/org/apache/axis2/saaj/AttachmentTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/AttachmentTest.java	(working copy)
@@ -5,7 +5,6 @@
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -27,306 +26,327 @@
 
 public class AttachmentTest extends TestCase {
 
-    public AttachmentTest(String name) {
-        super(name);
-    }
+	public AttachmentTest(String name) {
+		super(name);
+	}
 
-    public void testStringAttachment() throws Exception {
 
-        MessageFactory factory = MessageFactory.newInstance();
-        SOAPMessage message = factory.createMessage();
-        AttachmentPart attachment = message.createAttachmentPart();
-        String stringContent = "Update address for Sunny Skies " +
-                               "Inc., to 10 Upbeat Street, Pleasant Grove, CA 95439";
+	public void testStringAttachment() throws Exception {
 
-        attachment.setContent(stringContent, "text/plain");
-        attachment.setContentId("update_address");
-        message.addAttachmentPart(attachment);
+		MessageFactory factory = MessageFactory.newInstance();
+		SOAPMessage message = factory.createMessage();
+		AttachmentPart attachment = message.createAttachmentPart();
+		String stringContent = "Update address for Sunny Skies " +
+		"Inc., to 10 Upbeat Street, Pleasant Grove, CA 95439";
 
-        assertTrue(message.countAttachments() == 1);
+		attachment.setContent(stringContent, "text/plain");
+		attachment.setContentId("update_address");
+		message.addAttachmentPart(attachment);
 
-        java.util.Iterator it = message.getAttachments();
-        while (it.hasNext()) {
-            attachment = (AttachmentPart) it.next();
-            Object content = attachment.getContent();
-            String id = attachment.getContentId();
-            System.out.println("Attachment " + id + " contains: " + content);
-            assertEquals(content, stringContent);
-        }
-        System.out.println("Here is what the XML message looks like:");
-        message.writeTo(System.out);
+		assertTrue(message.countAttachments() == 1);
 
-        message.removeAllAttachments();
-        assertTrue(message.countAttachments() == 0);
-    }
+		java.util.Iterator it = message.getAttachments();
+		while (it.hasNext()) {
+			attachment = (AttachmentPart) it.next();
+			Object content = attachment.getContent();
+			String id = attachment.getContentId();
+			System.out.println("Attachment " + id + " contains: " + content);
+			assertEquals(content, stringContent);
+		}
+		System.out.println("Here is what the XML message looks like:");
+		message.writeTo(System.out);
 
-    public void testMultipleAttachments() throws Exception {
+		message.removeAllAttachments();
+		assertTrue(message.countAttachments() == 0);
+	}
 
-        MessageFactory factory = MessageFactory.newInstance();
-        SOAPMessage msg = factory.createMessage();
-        java.net.URL url1 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.html");
-        java.net.URL url2 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.txt");
 
-        AttachmentPart a1 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
-        a1.setContentType("text/xml");
-        msg.addAttachmentPart(a1);
-        AttachmentPart a2 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
-        a2.setContentType("text/xml");
-        msg.addAttachmentPart(a2);
-        AttachmentPart a3 = msg.createAttachmentPart(new javax.activation.DataHandler(url2));
-        a3.setContentType("text/plain");
-        msg.addAttachmentPart(a3);
 
-        assertTrue(msg.countAttachments() == 3);
+	public void testMultipleAttachments() throws Exception {
 
-        javax.xml.soap.MimeHeaders mimeHeaders = new javax.xml.soap.MimeHeaders();
-        mimeHeaders.addHeader("Content-Type", "text/xml");
+		MessageFactory factory = MessageFactory.newInstance();
+		SOAPMessage msg = factory.createMessage();
+		java.net.URL url1 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.html");
+		java.net.URL url2 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.txt");
 
-        int nAttachments = 0;
-        java.util.Iterator iterator = msg.getAttachments(mimeHeaders);
-        while (iterator.hasNext()) {
-            nAttachments++;
-            AttachmentPart ap = (AttachmentPart) iterator.next();
-            assertTrue(ap.equals(a1) || ap.equals(a2));
-        }
-        assertTrue(nAttachments == 2);
-    }
+		AttachmentPart a1 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
+		a1.setContentType("text/xml");
+		msg.addAttachmentPart(a1);
+		AttachmentPart a2 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
+		a2.setContentType("text/xml");
+		msg.addAttachmentPart(a2);
+		AttachmentPart a3 = msg.createAttachmentPart(new javax.activation.DataHandler(url2));
+		a3.setContentType("text/plain");
+		msg.addAttachmentPart(a3);
 
-    public void _testAttachment() {
-        try {
-            MessageFactory factory = MessageFactory.newInstance();
-            SOAPMessage msg = factory.createMessage();
+		assertTrue(msg.countAttachments() == 3);
 
-            AttachmentPart ap = msg.createAttachmentPart();
-            File f = new File("test-resources" + File.separator + "axis2.xml");
-            InputStream in = new FileInputStream("test-resources" + File.separator + "axis2.jpg");
-            ap.setContent(new StreamSource(in), "text/xml");
+		javax.xml.soap.MimeHeaders mimeHeaders = new javax.xml.soap.MimeHeaders();
+		mimeHeaders.addHeader("Content-Type", "text/xml");
 
-            assertTrue(ap.getSize() <= 0);
-        } catch (SOAPException e) {
-            e.printStackTrace();
-            fail("Unexpected Exception : " + e);
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
-            fail("Unexpected Exception : " + e);
-        }
-    }
+		int nAttachments = 0;
+		java.util.Iterator iterator = msg.getAttachments(mimeHeaders);
+		while (iterator.hasNext()) {
+			nAttachments++;
+			AttachmentPart ap = (AttachmentPart) iterator.next();
+			assertTrue(ap.equals(a1) || ap.equals(a2));
+		}
+		assertTrue(nAttachments == 2);
+	}
 
-    public void testBadAttSize() throws Exception {
-        MessageFactory factory = MessageFactory.newInstance();
-        SOAPMessage message = factory.createMessage();
 
-        ByteArrayInputStream ins = new ByteArrayInputStream(new byte[5]);
-        DataHandler dh = new DataHandler(new Src(ins, "text/plain"));
-        AttachmentPart part = message.createAttachmentPart(dh);
-        assertEquals("Size should match", 5, part.getSize());
-    }
+	public void testMultipleAttachments2() throws Exception {
+		MessageFactory factory = MessageFactory.newInstance();
+		SOAPMessage msg = factory.createMessage();
+		java.net.URL url1 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.html");
+		java.net.URL url2 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.txt");
 
-    class Src implements DataSource {
-        InputStream m_src;
-        String m_type;
+		AttachmentPart a1 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
+		a1.setContentType("text/xml");
+		msg.addAttachmentPart(a1);
+		AttachmentPart a2 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
+		a2.setContentType("text/xml");
+		msg.addAttachmentPart(a2);
+		AttachmentPart a3 = msg.createAttachmentPart(new javax.activation.DataHandler(url2));
+		a3.setContentType("text/plain");
+		msg.addAttachmentPart(a3);
 
-        public Src(InputStream data, String type) {
-            m_src = data;
-            m_type = type;
-        }
+		assertTrue(msg.countAttachments() == 3);
 
-        public String getContentType() {
-            return m_type;
-        }
+		javax.xml.soap.MimeHeaders mimeHeaders = new javax.xml.soap.MimeHeaders();
+		mimeHeaders.addHeader("Content-Type", "text/xml");
 
-        public InputStream getInputStream() throws IOException {
-            m_src.reset();
-            return m_src;
-        }
+		int nAttachments = 0;
+		java.util.Iterator iterator = msg.getAttachments(mimeHeaders);
+		while (iterator.hasNext()) {
+			nAttachments++;
+			AttachmentPart ap = (AttachmentPart) iterator.next();
+			assertTrue(ap.equals(a1) || ap.equals(a2));
+		}
+		assertTrue(nAttachments == 2);
+	}
 
-        public String getName() {
-            return "Some-Data";
-        }
+	public void testBadAttSize() throws Exception {
+		MessageFactory factory = MessageFactory.newInstance();
+		SOAPMessage message = factory.createMessage();
 
-        public OutputStream getOutputStream() {
-            throw new UnsupportedOperationException("I don't give output streams");
-        }
-    }
-    
-    public void testClearContent() throws Exception {
-    	try {
-    		InputStream in1 = new FileInputStream(new File("test-resources" + File.separator + "attach.xml"));
+		ByteArrayInputStream ins = new ByteArrayInputStream(new byte[5]);
+		DataHandler dh = new DataHandler(new Src(ins, "text/plain"));
+		AttachmentPart part = message.createAttachmentPart(dh);
+		assertEquals("Size should match", 5, part.getSize());
+	}
 
-        	MessageFactory factory = MessageFactory.newInstance();
-        	SOAPMessage message = factory.createMessage();
-            AttachmentPart ap = message.createAttachmentPart();
-            MimeHeader mh = null;
-    		
-    		System.out.println("Setting Mime Header ");
-    		ap.setMimeHeader("Content-Description","some text");
+	class Src implements DataSource {
+		InputStream m_src;
+		String m_type;
 
-    		System.out.println("Setting Content Id Header ");
-    		ap.setContentId("id@abc.com");
+		public Src(InputStream data, String type) {
+			m_src = data;
+			m_type = type;
+		}
 
-    		System.out.println("Setting Content ");
-    		ap.setContent( new StreamSource(in1),"text/xml");
+		public String getContentType() {
+			return m_type;
+		}
 
-    		System.out.println("Clearing Content ");
-    		ap.clearContent();
+		public InputStream getInputStream() throws IOException {
+			m_src.reset();
+			return m_src;
+		}
 
-    		try {
+		public String getName() {
+			return "Some-Data";
+		}
 
-    			System.out.println("Getting Content ");
-    			InputStream is = (InputStream)ap.getContent();
+		public OutputStream getOutputStream() {
+			throw new UnsupportedOperationException("I don't give output streams");
+		}
+	}
 
-    			System.out.println("Error: SOAPException should have been thrown");
-    		} catch(SOAPException e) {
-    			System.out.println("Error thrown.(expected)");
-    		}
 
-    		Iterator iterator = ap.getAllMimeHeaders();
-    		int cnt=0;
-    		boolean foundHeader1=false;
-    		boolean foundHeader2=false;
-    		boolean foundDefaultHeader=false;
-    		while (iterator.hasNext()) {
-    			cnt++;
-    			mh = (MimeHeader)iterator.next();
-    			String name=mh.getName();
-    			String value=mh.getValue();
-    			if (name.equals("Content-Description") && value.equals("some text")){
-    				if (!foundHeader1){
-    					foundHeader1=true;
-    					System.out.println("MimeHeaders do match for header1");
-    					System.out.println("receive: name="+name+", value="+value);
-    				}
-    				else {
-    					System.out.println("Error: Received the same header1 header twice");
-    					System.out.println("received: name="+name+", value="+value);
-    				}
-    			} else if (name.equals("Content-Id") && value.equals("id@abc.com")){
-    				//TODO Content-Id or Content-ID??
-    				if (!foundHeader2){
-    					foundHeader2=true;
-    					System.out.println("MimeHeaders do match for header2");
-    					System.out.println("receive: name="+name+", value="+value);
-    				}
-    				else {
-    					System.out.println("Error: Received the same header2 header twice");
-    					System.out.println("received: name="+name+", value="+value);
-    				}
-    			} else if (name.equals("Content-Type") && value.equals("text/xml")){
-    				if (!foundDefaultHeader){
-    					foundDefaultHeader=true;
-    					System.out.println("MimeHeaders do match for default header");
-    					System.out.println("receive: name="+name+", value="+value);
-    				}
-    				else {
-    					System.out.println("Error: Received the same default header header twice");
-    					System.out.println("received: name="+name+", value="+value);
-    				}
-    			} else {
-    				System.out.println("Error: Received an invalid header");
-    				System.out.println("received: name="+name+", value="+value);
-    			}
-    		}
+	public void testClearContent() throws Exception {
+		try {
+			InputStream in1 = new FileInputStream(new File("test-resources" + File.separator + "attach.xml"));
 
-    		if (!(foundHeader1 && foundHeader2)){
-    			System.out.println("Error: did not receive both headers");
-    		}
+			MessageFactory factory = MessageFactory.newInstance();
+			SOAPMessage message = factory.createMessage();
+			AttachmentPart ap = message.createAttachmentPart();
+			MimeHeader mh = null;
 
-    	} catch(Exception e) {
-    		System.out.println("Exception: " + e);
-    	}
+			System.out.println("Setting Mime Header ");
+			ap.setMimeHeader("Content-Description","some text");
 
-    }
-    
+			System.out.println("Setting Content Id Header ");
+			ap.setContentId("id@abc.com");
 
-    
-    public void testGetContent() throws Exception 
-    {
-    	try 
-    	{
-    		MessageFactory factory = MessageFactory.newInstance();
-    		SOAPMessage msg = factory.createMessage();
-    		AttachmentPart ap = msg.createAttachmentPart();
-    		Image image = javax.imageio.ImageIO.read(new File("test-resources" + File.separator + "attach.gif"));
-    		ap = msg.createAttachmentPart(image, "image/gif");
+			System.out.println("Setting Content ");
+			ap.setContent( new StreamSource(in1),"text/xml");
 
-    		System.out.println("Getting Content should return an Image object");
-    		Object o = ap.getContent();
-    		System.out.println("object returned="+o);
-    		if(o != null) {
-    			if(o instanceof Image)
-    				System.out.println("Image object was returned (ok)");
-    			else {
-    				System.out.println("Unexpected object was returned (not ok)");
-    				System.out.println("Unexpected object="+o);
-    			}
-    		} else {
-    			System.out.println("null was returned");
-    		}
-    	} catch(Exception e) {
-    		System.out.println("Exception: " + e);
-    	}
-    }
-    
-    public void testGetRawContents(){
-    	try 
-    	{
-    		MessageFactory factory = MessageFactory.newInstance();
-    		SOAPMessage msg = factory.createMessage();
-    		AttachmentPart ap = msg.createAttachmentPart();
-    		ap = msg.createAttachmentPart();
-    		byte data1[] = null;
-    		data1 = ap.getRawContentBytes();
+			System.out.println("Clearing Content ");
+			ap.clearContent();
 
-    	} catch(SOAPException e) {
-    		System.out.println("Caught expected SOAPException");
-    	} catch(NullPointerException e) {
-    		System.out.println("Caught expected NullPointerException");
-    	} catch(Exception e) {
-    		fail();
-    	}
-    }
-    
-    public void testSetBase64Content(){
-    	try 
-    	{
-    		MessageFactory factory = MessageFactory.newInstance();
-    		SOAPMessage msg = factory.createMessage();
-    		AttachmentPart ap = msg.createAttachmentPart();
+			try {
 
-    		URL url = new URL("http://ws.apache.org/images/project-logo.jpg");
-    		DataHandler dh = new DataHandler(url);
-    		System.out.println("Create InputStream from DataHandler's InputStream");
-    		InputStream is = dh.getInputStream();
+				System.out.println("Getting Content ");
+				InputStream is = (InputStream)ap.getContent();
+				fail("Error: SOAPException should have been thrown");
+			} catch(SOAPException e) {
+				System.out.println("Error thrown.(expected)");
+			}
 
-    		System.out.println("Setting Content via InputStream for image/jpeg mime type");
-    		ByteArrayOutputStream bos = new ByteArrayOutputStream();
-    		OutputStream ret = new BASE64EncoderStream(bos);
-    		int count;
-    		byte buf[] = new byte[8192];
-    		while ((count = is.read(buf, 0, 8192)) != -1) {
-    			ret.write(buf, 0, count);
-    		}
-    		ret.flush();
-    		buf = bos.toByteArray();
-    		InputStream stream = new ByteArrayInputStream(buf);
-    		ap.setBase64Content(stream,"image/jpeg");
+			Iterator iterator = ap.getAllMimeHeaders();
+			int cnt=0;
+			boolean foundHeader1=false;
+			boolean foundHeader2=false;
+			boolean foundDefaultHeader=false;
+			while (iterator.hasNext()) {
+				cnt++;
+				mh = (MimeHeader)iterator.next();
+				String name=mh.getName();
+				String value=mh.getValue();
+				if (name.equals("Content-Description") && value.equals("some text")){
+					if (!foundHeader1){
+						foundHeader1=true;
+						System.out.println("MimeHeaders do match for header1");
+						System.out.println("receive: name="+name+", value="+value);
+					}
+					else {
+						fail("Error: Received the same header1 header twice");
+						System.out.println("received: name="+name+", value="+value);
+					}
+				} else if (name.equals("Content-Id") && value.equals("id@abc.com")){
+					//TODO Content-Id or Content-ID??
+					if (!foundHeader2){
+						foundHeader2=true;
+						System.out.println("MimeHeaders do match for header2");
+						System.out.println("receive: name="+name+", value="+value);
+					}
+					else {
+						fail("Error: Received the same header2 header twice");
+						System.out.println("received: name="+name+", value="+value);
+					}
+				} else if (name.equals("Content-Type") && value.equals("text/xml")){
+					if (!foundDefaultHeader){
+						foundDefaultHeader=true;
+						System.out.println("MimeHeaders do match for default header");
+						System.out.println("receive: name="+name+", value="+value);
+					}
+					else {
+						fail("Error: Received the same default header header twice");
+						System.out.println("received: name="+name+", value="+value);
+					}
+				} else {
+					fail("Error: Received an invalid header");
+					System.out.println("received: name="+name+", value="+value);
+				}
+			}
 
-    		System.out.println("Getting Content should return InputStream object");
-    		InputStream r = ap.getBase64Content();
-    		System.out.println("object returned="+r);
-    		if(r != null) {
-    			if(r instanceof InputStream)
-    				System.out.println("InputStream object was returned (ok)");
-    			else {
-    				System.out.println("Unexpected object was returned (not ok)");
-    				System.out.println("Unexpected object="+r);
-    			}
-    		} else {
-    			System.out.println("null was returned");
-    		}
-    	} catch(Exception e) {
-    		System.out.println("Exception: " + e);
-    	}
-    }
-    
+			if (!(foundHeader1 && foundHeader2)){
+				fail("Error: did not receive both headers");
+			}
+
+		} catch(Exception e) {
+			fail("Exception: " + e);
+		}
+
+	}
+
+
+
+
+	public void testGetContent() throws Exception 
+	{
+		try 
+		{
+			MessageFactory factory = MessageFactory.newInstance();
+			SOAPMessage msg = factory.createMessage();
+			AttachmentPart ap = msg.createAttachmentPart();
+			Image image = javax.imageio.ImageIO.read(new File("test-resources" + File.separator + "attach.gif"));
+			ap = msg.createAttachmentPart(image, "image/gif");
+
+			System.out.println("Getting Content should return an Image object");
+			Object o = ap.getContent();
+			System.out.println("object returned="+o);
+			if(o != null) {
+				if(o instanceof Image)
+					System.out.println("Image object was returned (ok)");
+				else {
+					fail("Unexpected object was returned");
+					//System.out.println("Unexpected object="+o);
+				}
+			} else {
+				System.out.println("null was returned");
+			}
+		} catch(Exception e) {
+			fail("Exception: " + e);
+		}
+	}
+
+	/*
+	 * TODO : working test uncomment
+	 */
+
+	public void testGetRawContents(){
+		try 
+		{
+			MessageFactory factory = MessageFactory.newInstance();
+			SOAPMessage msg = factory.createMessage();
+			AttachmentPart ap = msg.createAttachmentPart();
+			ap = msg.createAttachmentPart();
+			byte data1[] = null;
+			data1 = ap.getRawContentBytes();
+
+		} catch(SOAPException e) {
+			System.out.println("Caught expected SOAPException");
+		} catch(NullPointerException e) {
+			System.out.println("Caught expected NullPointerException");
+		} catch(Exception e) {
+			fail();
+		}
+	}
+
+
+
+	public void testSetBase64Content(){
+		try 
+		{
+			MessageFactory factory = MessageFactory.newInstance();
+			SOAPMessage msg = factory.createMessage();
+			AttachmentPart ap = msg.createAttachmentPart();
+
+			URL url = new URL("http://ws.apache.org/images/project-logo.jpg");
+			DataHandler dh = new DataHandler(url);
+			System.out.println("Create InputStream from DataHandler's InputStream");
+			InputStream is = dh.getInputStream();
+
+			System.out.println("Setting Content via InputStream for image/jpeg mime type");
+			ByteArrayOutputStream bos = new ByteArrayOutputStream();
+			OutputStream ret = new BASE64EncoderStream(bos);
+			int count;
+			byte buf[] = new byte[8192];
+			while ((count = is.read(buf, 0, 8192)) != -1) {
+				ret.write(buf, 0, count);
+			}
+			ret.flush();
+			buf = bos.toByteArray();
+			InputStream stream = new ByteArrayInputStream(buf);
+			ap.setBase64Content(stream,"image/jpeg");
+
+			System.out.println("Getting Content should return InputStream object");
+			InputStream r = ap.getBase64Content();
+			System.out.println("object returned="+r);
+			if(r != null) {
+				if(r instanceof InputStream)
+					System.out.println("InputStream object was returned (ok)");
+				else {
+					fail("Unexpected object was returned");
+				}
+			} else {
+				System.out.println("null was returned");
+			}
+		} catch(Exception e) {
+			fail("Exception: " + e);
+		}
+	}
+
 }
Index: test/org/apache/axis2/saaj/SOAPPartTest.java
===================================================================
--- test/org/apache/axis2/saaj/SOAPPartTest.java	(revision 501741)
+++ test/org/apache/axis2/saaj/SOAPPartTest.java	(working copy)
@@ -15,12 +15,9 @@
  */
 package org.apache.axis2.saaj;
 
-import java.io.ByteArrayInputStream;
 import java.io.File;
-import java.io.InputStream;
 import java.util.Iterator;
 
-import javax.activation.DataHandler;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.soap.MessageFactory;
@@ -28,12 +25,11 @@
 import javax.xml.soap.SOAPBody;
 import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPHeader;
+import javax.xml.soap.SOAPHeaderElement;
 import javax.xml.soap.SOAPMessage;
 import javax.xml.soap.SOAPPart;
 import javax.xml.soap.Text;
-import javax.xml.transform.Source;
 import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamSource;
 
 import junit.framework.TestCase;
 
@@ -44,31 +40,12 @@
  * 
  */
 public class SOAPPartTest extends TestCase {
-    public void testGetContents() {
-        try {
-            ByteArrayInputStream ins = new ByteArrayInputStream(new byte[5]);
-            DataHandler dh = new DataHandler(new AttachmentTest("t").new Src(ins, "text/plain"));
-            InputStream in = dh.getInputStream();
-            StreamSource ssrc = new StreamSource(in);
 
-            SOAPPart sp = MessageFactory.newInstance().createMessage().getSOAPPart();
-            sp.setContent(ssrc);
-
-            Source ssrc2 = sp.getContent();
-            if (ssrc2 == null) {
-                fail("Contents were null");
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-            fail("Unexpected Exception " + e);
-        }
-    }
-
     public void testAddSource() {
         DOMSource domSource;
         try {
             DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-            Document document = builder.parse(new File("test-resources" + File.separator + "soap-part.xml"));
+            Document document = builder.parse(new File("test-resources" + File.separator + "soap-part3.xml"));
             domSource = new DOMSource(document);
 
             SOAPMessage message = MessageFactory.newInstance().createMessage();
@@ -90,23 +67,6 @@
             System.out.println("Body contents:");
             getContents(iter2, "");
 
-            /* SOAPEnvelope envelope = soapPart.getEnvelope();
-            SOAPHeader header = envelope.getHeader();
-            assertEquals("Header", header.getLocalName());
-            assertEquals("soapenv", header.getPrefix());
-
-            Node firstChild = header.getFirstChild();
-            //assertEquals("Hello", firstChild.getLocalName());
-            //assertEquals("shw", firstChild.getPrefix());
-
-            SOAPBody body = envelope.getBody();
-            assertEquals("Body", body.getLocalName());
-            assertEquals("soapenv", body.getPrefix());
-
-            for(Iterator iter=body.getChildElements(); iter.hasNext();){
-                System.err.println("$$$ " + iter.next());
-            }*/
-
         } catch (Exception e) {
             e.printStackTrace();
             fail("Unexpected Exception : " + e);
@@ -147,6 +107,59 @@
         }
     }
     
+    
+    
+    public void testAddSource2() throws Exception {
+        javax.xml.soap.SOAPMessage soapMessage =
+                javax.xml.soap.MessageFactory.newInstance().createMessage();
+        javax.xml.soap.SOAPEnvelope soapEnv =
+                soapMessage.getSOAPPart().getEnvelope();
+        javax.xml.soap.SOAPHeader header = soapEnv.getHeader();
+        javax.xml.soap.SOAPBody body = soapEnv.getBody();
+        
+        assertTrue(header.addChildElement("ebxmlms1", "ch2", "http://test.apache.org") instanceof SOAPHeaderElement);
+        assertTrue(header.addHeaderElement(soapEnv.createName("ebxmlms2", "ch3", "http://test2.apache.org")) != null);
+        assertTrue(header.addHeaderElement(new PrefixedQName("http://test3.apache.org", "ebxmlms3", "ch5")) != null);
+
+        body.addChildElement("bodyEle1", "ele1", "http://ws.apache.org");
+        soapMessage.saveChanges();
+        
+        
+        
+        javax.xml.soap.SOAPMessage soapMessage2 =
+            javax.xml.soap.MessageFactory.newInstance().createMessage();
+        SOAPPart soapPart = soapMessage2.getSOAPPart();
+        soapPart.setContent(soapMessage.getSOAPPart().getContent());
+        soapMessage2.saveChanges();
+        assertNotNull(soapMessage2);
+    }
+    
+    public void testAddSource3() throws Exception {
+        javax.xml.soap.SOAPMessage soapMessage =
+                javax.xml.soap.MessageFactory.newInstance().createMessage();
+        javax.xml.soap.SOAPEnvelope soapEnv =
+                soapMessage.getSOAPPart().getEnvelope();
+        javax.xml.soap.SOAPHeader header = soapEnv.getHeader();
+        javax.xml.soap.SOAPBody body = soapEnv.getBody();
+        
+        assertTrue(header.addChildElement("ebxmlms1", "ch2", "http://test.apache.org") instanceof SOAPHeaderElement);
+        assertTrue(header.addHeaderElement(soapEnv.createName("ebxmlms2", "ch3", "http://test2.apache.org")) != null);
+        assertTrue(header.addHeaderElement(new PrefixedQName("http://test3.apache.org", "ebxmlms3", "ch5")) != null);
+
+        body.addChildElement("bodyEle1", "ele1", "http://ws.apache.org");
+        soapMessage.saveChanges();
+        
+        
+        
+        javax.xml.soap.SOAPMessage soapMessage2 =
+            javax.xml.soap.MessageFactory.newInstance().createMessage();
+        SOAPPart soapPart = soapMessage2.getSOAPPart();
+        soapPart.setContent(soapMessage.getSOAPPart().getContent());
+        soapMessage2.saveChanges();
+        assertNotNull(soapMessage2);
+    }
+
+    
     public void _testInputEncoding() {
         try {
         	DOMSource domSource;
@@ -172,7 +185,6 @@
             	System.out.println(inputEncoding);
             }
         } catch (Exception e) {
-            e.printStackTrace();
             fail("Unexpected Exception " + e);
         }
     }
Index: src/org/apache/axis2/saaj/AttachmentPartImpl.java
===================================================================
--- src/org/apache/axis2/saaj/AttachmentPartImpl.java	(revision 501741)
+++ src/org/apache/axis2/saaj/AttachmentPartImpl.java	(working copy)
@@ -16,6 +16,7 @@
 package org.apache.axis2.saaj;
 
 import java.awt.image.BufferedImage;
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -163,22 +164,22 @@
         }
         try {
             String contentType = dataHandler.getContentType();
-            //TODO change to text/xml
-            if(contentType.equals("text/xml")){
-            	StringReader stringReader = new StringReader((String)dataHandler.getContent());
+           	if (contentType.equals("text/xml")) {
+           		StringReader stringReader = new StringReader((String)dataHandler.getContent());
             	StreamSource streamSource = new StreamSource(stringReader);
+   	        	streamSource.setInputStream(dataHandler.getInputStream());
             	return streamSource;
-            }else if (contentType.equals("text/plain") ||
-                    contentType.equals("text/html")) {
-
+            	
                 //For these content types underlying DataContentHandler surely does
                 //the conversion to appropriate java object and we will return that java object
-                return dataHandler.getContent();
-            } else {
+                //return dataHandler.getContent();
+            }else if(contentType.equals("text/plain") ||
+            			contentType.equals("text/html")){
+            	return (String)dataHandler.getContent();
+            }else {
                 try {
                     return dataHandler.getContent();
                 } catch (UnsupportedDataTypeException e) {
-
                     //If the underlying DataContentHandler can't handle the object contents,
                     //we will return an inputstream of raw bytes represneting the content data
                     return dataHandler.getDataSource().getInputStream();
@@ -256,15 +257,21 @@
             	throw new java.lang.IllegalArgumentException(e);
             }
         }
-        /*
         else if (object instanceof byte[]) {
             try {
-                dataHandler = new DataHandler();
-                contentObject = null; // the stream has been consumed
+                contentObject = null;
+                java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream((byte[])object);
+                source = new SAAJDataSource(bais,
+                        SAAJDataSource.MAX_MEMORY_DISK_CACHED,
+                        contentType, true);
+                extractFilename(source);
+                
+                dataHandler = new DataHandler(source);
+                contentObject = object;
             } catch (Exception e) {
             	throw new java.lang.IllegalArgumentException(e);
             }
-        }*/
+        }
         else {
             throw new java.lang.IllegalArgumentException("Illegal Argument");
         }
@@ -280,9 +287,9 @@
      *                                      no data in this <CODE>AttachmentPart</CODE> object
      */
     public DataHandler getDataHandler() throws SOAPException {
-//        if (getContent() == null) {
-//            throw new SOAPException("No Content present in the Attachment part");
-//        }
+        //if (getContent() == null) {
+        //    throw new SOAPException("No Content present in the Attachment part");
+        //}
         //commented to fix AXIS2-778
         if (dataHandler == null) {
             throw new SOAPException("No Content present in the Attachment part");
@@ -571,11 +578,11 @@
      */
 
     public void setRawContentBytes(byte[] content, int offset, int len, String contentType) throws SOAPException {
-        //TODO - complete
+        //TODO - how to use offset & len?
     	if(content == null){
     		throw new SOAPException("Content is null");
     	}
-    	
+    	setContent(content, contentType);
     }
 
     /**
Index: src/org/apache/axis2/saaj/SOAPConnectionImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPConnectionImpl.java	(revision 501741)
+++ src/org/apache/axis2/saaj/SOAPConnectionImpl.java	(working copy)
@@ -19,9 +19,11 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Set;
 
 import javax.activation.DataHandler;
 import javax.xml.namespace.QName;
@@ -66,6 +68,7 @@
     private boolean closed = false;
 
     private ServiceClient serviceClient;
+    private HashMap unaccessedAttachments = new HashMap();
 
 	private static final Log log = LogFactory.getLog(SOAPConnectionImpl.class);
 
@@ -154,7 +157,6 @@
 
             MessageContext msgCtx = opClient.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
             //TODO: get attachments
-
             return getSOAPMessage(msgCtx.getEnvelope());
         } catch (AxisFault e) {
             throw new SOAPException(e);
@@ -212,6 +214,15 @@
 
         // Convert the body
         toSAAJElement(body, respOMSoapEnv.getBody(), response);
+        //if there are unrefferenced attachments, add that to response
+        if(!unaccessedAttachments.isEmpty()){
+        	Collection attachments = unaccessedAttachments.values();
+        	Iterator attachementsIterator = attachments.iterator();
+        	while (attachementsIterator.hasNext()) {
+				AttachmentPart  attachment = (AttachmentPart) attachementsIterator.next();
+				response.addAttachmentPart(attachment);
+			}
+        }
 
         return response;
     }
@@ -297,7 +308,7 @@
         Map attachmentMap = new HashMap();
         final Iterator attachments = saajSOAPMsg.getAttachments();
         while (attachments.hasNext()) {
-            final AttachmentPart attachment = (AttachmentPart) attachments.next();
+        	final AttachmentPart attachment = (AttachmentPart) attachments.next();
             if (attachment.getContentId() == null ||
                 attachment.getContentId().trim().length() == 0) {
                 attachment.setContentId(IDGenerator.generateID());
@@ -308,10 +319,21 @@
             attachmentMap.put(attachment.getContentId(), attachment);
         }
 
-        insertAttachmentNodes(attachmentMap, omSOAPEnv);
+        //Get keys of attachments to a hashmap
+        //This hashmap will be updated when attachment is accessed atleast once.
+        //Doing this here instead of inside insertAttachmentNodes()is much simpler
+        //as insertAttachmentNodes() has recursive calls
+    	Set keySet = attachmentMap.keySet();
+    	Iterator keySetItr = keySet.iterator();
+    	HashMap keyAccessStatus = new HashMap();
+    	while(keySetItr.hasNext()){
+    		String key = (String)keySetItr.next();
+    		keyAccessStatus.put(key,"not-accessed");
+    	}
+        
+        insertAttachmentNodes(attachmentMap, omSOAPEnv,keyAccessStatus);
+        unaccessedAttachments = getUnReferencedAttachmentNodes(attachmentMap, omSOAPEnv,keyAccessStatus);
 
-//        printOMSOAPEnvelope(omSOAPEnv);
-
         return omSOAPEnv;
     }
 
@@ -323,7 +345,7 @@
      * @throws SOAPException
      */
     private void insertAttachmentNodes(Map attachments,
-                                       OMElement omEnvelope) throws SOAPException {
+                                       OMElement omEnvelope,HashMap keyAccessStatus) throws SOAPException {
 
         Iterator childIter = omEnvelope.getChildElements();
         while (childIter.hasNext()) {
@@ -334,21 +356,42 @@
             if (contentID != null) {//This is an omEnvelope referencing an attachment
                 child.build();
                 AttachmentPart ap = ((AttachmentPart) attachments.get(contentID.trim()));
+                //update the key status as accessed
+                keyAccessStatus.put(contentID.trim(), "accessed");                
                 OMText text = new OMTextImpl(ap.getDataHandler(), true,
                         omEnvelope.getOMFactory());
                 child.removeAttribute(hrefAttr);
                 child.addChild(text);
             } else {
-
                 //possibly there can be references in the children of this omEnvelope
                 //so recurse through.
-                insertAttachmentNodes(attachments, child);
+                insertAttachmentNodes(attachments, child,keyAccessStatus);
             }
         }
+    }
+    
+    
+    private HashMap getUnReferencedAttachmentNodes(Map attachments,
+    		OMElement omEnvelope,HashMap keyAccessStatus) throws SOAPException {
 
-        //TODO: Need to handle no referenced attachments
+    	HashMap unaccessedAttachments = new HashMap();
+    	//now check for unaccessed keys
+    	Set keySet = keyAccessStatus.keySet();
+    	Iterator keySetItr = keySet.iterator();
+    	while(keySetItr.hasNext()){
+    		String key = (String)keySetItr.next();
+    		String keyStatus = (String)keyAccessStatus.get(key);
+    		if("not-accessed".equals(keyStatus)){
+    			//The value for this key has not been accessed in the 
+    			//referencing attachment scenario.Hence it must be an
+    			//unreferenced one.
+    			AttachmentPart ap = ((AttachmentPart) attachments.get(key));
+    			unaccessedAttachments.put(key, ap);
+    			keyAccessStatus.put(key, "accessed");
+    		}
+    	}
+    	return unaccessedAttachments;
     }
-
     /**
      * This method checks the value of attribute and if it is a valid CID then
      * returns the contentID (with cid: prefix stripped off) or else returns null.
Index: src/org/apache/axis2/saaj/SOAPPartImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPPartImpl.java	(revision 501741)
+++ src/org/apache/axis2/saaj/SOAPPartImpl.java	(working copy)
@@ -15,21 +15,34 @@
  */
 package org.apache.axis2.saaj;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Iterator;
 
+import javax.xml.soap.MimeHeader;
+import javax.xml.soap.MimeHeaders;
 import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPEnvelope;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPMessage;
 import javax.xml.soap.SOAPPart;
+import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.transform.Result;
 import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
 
+import org.apache.axiom.attachments.Attachments;
 import org.apache.axiom.om.util.StAXUtils;
 import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
+import org.apache.axiom.soap.impl.dom.soap12.SOAP12Factory;
 import org.apache.axis2.saaj.util.IDGenerator;
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.w3c.dom.Attr;
@@ -71,15 +84,41 @@
     }
 
     public SOAPPartImpl(SOAPMessageImpl parentSoapMsg,
-                        InputStream inputStream) throws SOAPException {
-
-        setMimeHeader(HTTPConstants.HEADER_CONTENT_ID, IDGenerator.generateID());
-        setMimeHeader(HTTPConstants.HEADER_CONTENT_TYPE, "text/xml");
-
+                        InputStream inputStream,javax.xml.soap.MimeHeaders mimeHeaders
+                        ) throws SOAPException {
+    	boolean mimeHeaderSet = true;
+    	if(mimeHeaders == null){
+    		mimeHeaderSet = false;
+        	mimeHeaders = new MimeHeaders();
+        	mimeHeaders.addHeader("Content-ID", IDGenerator.generateID());
+        	mimeHeaders.addHeader(HTTPConstants.HEADER_CONTENT_TYPE, "text/xml");
+    	}
+    	
+    	Iterator mimeHeaderIterator = mimeHeaders.getAllHeaders();
+    	String contentType = "";
+    	while (mimeHeaderIterator.hasNext()) {
+			MimeHeader mimeHeader = (MimeHeader) mimeHeaderIterator.next();
+			String value = mimeHeader.getValue();
+			if("content-type".equals(mimeHeader.getName())){
+				contentType = value;
+			}
+			setMimeHeader(mimeHeader.getName(), value);
+		}
+    	InputStream modifiedInputStream = null;
+    	if(mimeHeaderSet){
+        	try {
+                Attachments attachments = new Attachments(inputStream, contentType,false, "","");
+                modifiedInputStream = attachments.getSOAPPartInputStream();
+      		} catch (Exception e) {
+	            throw new SOAPException(e);
+      		}
+    	}else{
+    		modifiedInputStream = inputStream;
+    	}    	
         soapMessage = parentSoapMsg;
 
         try {
-            InputStreamReader isReader = new InputStreamReader(inputStream);
+            InputStreamReader isReader = new InputStreamReader(modifiedInputStream);
             StAXSOAPModelBuilder builder =
                     new StAXSOAPModelBuilder(StAXUtils.createXMLStreamReader(isReader),
                                              new SOAP11Factory(),
@@ -88,12 +127,19 @@
             envelope = new SOAPEnvelopeImpl((org.apache.axiom.soap.impl.dom.SOAPEnvelopeImpl)soapEnvelope);
             envelope.element.build();
             this.document = envelope.getOwnerDocument();
+            javax.xml.transform.Source xmlSource =
+                new javax.xml.transform.stream.StreamSource(isReader);
+            this.source = xmlSource;            
         } catch (XMLStreamException e) {
-            e.printStackTrace();
             throw new SOAPException(e);
         }
     }
 
+    
+    public SOAPPartImpl(SOAPMessageImpl parentSoapMsg,
+    		InputStream inputStream) throws SOAPException {
+    	this(parentSoapMsg,inputStream,null);
+    }    
     /**
      * Obtain the SOAPMessage
      *
@@ -256,7 +302,31 @@
      */
     public void setContent(Source source) throws SOAPException {
         this.source = source;
-        //TODO: Need to fix the source handling stuff
+		try {
+	        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+	        Result result = new StreamResult(baos);
+
+	        Transformer xformer = TransformerFactory.newInstance().newTransformer();
+	        xformer.transform(source, result);
+	        ByteArrayInputStream is = new ByteArrayInputStream(baos.toByteArray());
+	        
+			XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+			XMLStreamReader reader = inputFactory.createXMLStreamReader(is);
+			
+			StAXSOAPModelBuilder builder1 = null;
+			if(this.envelope.element.getOMFactory() instanceof SOAP11Factory){
+				builder1 = new StAXSOAPModelBuilder(reader,(SOAP11Factory)this.envelope.element.getOMFactory(),null);
+			}else if(this.envelope.element.getOMFactory() instanceof SOAP12Factory){
+				builder1 = new StAXSOAPModelBuilder(reader,(SOAP12Factory)this.envelope.element.getOMFactory(),null);
+			}
+
+            org.apache.axiom.soap.SOAPEnvelope soapEnvelope = builder1.getSOAPEnvelope();
+            envelope = new SOAPEnvelopeImpl((org.apache.axiom.soap.impl.dom.SOAPEnvelopeImpl)soapEnvelope);
+            envelope.element.build();
+            this.document = envelope.getOwnerDocument();
+		} catch (Exception e) {
+			throw new SOAPException(e);
+		}
     }
 
     /**
@@ -270,6 +340,8 @@
      * @see #setContent(javax.xml.transform.Source) setContent(javax.xml.transform.Source)
      */
     public Source getContent() throws SOAPException {
+    	DOMSource domSource = new DOMSource(this.document);
+    	this.source = domSource;
         return source;
     }
 
Index: src/org/apache/axis2/saaj/SOAPMessageImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPMessageImpl.java	(revision 501741)
+++ src/org/apache/axis2/saaj/SOAPMessageImpl.java	(working copy)
@@ -54,30 +54,29 @@
         }
 
         setCharsetEncoding(contentType);
-
         soapPart = new SOAPPartImpl(this, soapEnvelope);
-
         this.mimeHeaders = new MimeHeadersEx();
     }
 
-    public SOAPMessageImpl(InputStream inputstream,
-                           javax.xml.soap.MimeHeaders mimeHeaders) throws SOAPException {
-        String contentType = null;
-        if (mimeHeaders != null) {
-            String contentTypes[] = mimeHeaders.getHeader("Content-Type");
-            contentType = (contentTypes != null) ? contentTypes[0] : null;
-        }
+    public SOAPMessageImpl(InputStream inputstream,javax.xml.soap.MimeHeaders mimeHeaders) 
+    		throws SOAPException 
+    {
+    	String contentType = null;
+    	if (mimeHeaders != null) {
+    		String contentTypes[] = mimeHeaders.getHeader("Content-Type");
+    		contentType = (contentTypes != null) ? contentTypes[0] : null;
+    	}
 
-        setCharsetEncoding(contentType);
-        if (contentType != null && contentType.indexOf("multipart/related;") == 0) {
-//            soapPart = new SOAPPartImpl(this, inputstream, mimeHeaders);
-        } else {
-            soapPart = new SOAPPartImpl(this, inputstream);
-        }
-
-        this.mimeHeaders = (mimeHeaders == null) ?
-                           new MimeHeadersEx() :
-                           new MimeHeadersEx(mimeHeaders);
+    	setCharsetEncoding(contentType);
+    	if (contentType != null && contentType.indexOf("multipart/related;") == 0) {
+    		soapPart = new SOAPPartImpl(this, inputstream, mimeHeaders);
+    	} else {
+    		soapPart = new SOAPPartImpl(this, inputstream);
+    	}
+    	
+    	this.mimeHeaders = (mimeHeaders == null) ?
+    			new MimeHeadersEx() :
+    				new MimeHeadersEx(mimeHeaders);
     }
 
     /**
@@ -372,19 +371,45 @@
      * 
      */
     public AttachmentPart getAttachment(SOAPElement soapelement) throws SOAPException {
-
-        Collection matchingAttachmentParts = new ArrayList();
+    	//TODO read strings from constants
         Iterator iterator = getAttachments();
         {
-            AttachmentPartImpl part;
+            AttachmentPartImpl attachmentPart;
             while (iterator.hasNext()) {
-                part = (AttachmentPartImpl) iterator.next();
-                if (part.matches(null)) {
-                    matchingAttachmentParts.add(part);
-                }
+            	attachmentPart = (AttachmentPartImpl) iterator.next();
+            	String[] contentIds = attachmentPart.getMimeHeader("Content-Id");
+            	
+            	//References can be made via an href attribute as described in SOAP Messages with Attachments
+            	//or via a single Text child node containing a URI          	
+            	String reference = soapelement.getAttribute("href");
+            	if(reference == null || reference.trim().length() == 0){
+            		reference = soapelement.getValue();
+            		if(reference == null || reference.trim().length() == 0){
+            			return null;
+            		}
+            	}
+            	
+            	for (int a = 0; a < contentIds.length; a++) {
+            		//eg: cid:gifImage scenario
+            		String idPart = reference.substring(reference.indexOf(":")+1);
+            		idPart = "<"+idPart+">";
+					if(idPart.equals(contentIds[a])){
+						return attachmentPart;
+					}
+				}
+            	
+            	String[] contentLocations = attachmentPart.getMimeHeader("Content-Location");
+            	if(!(contentLocations == null)){
+            		//uri scenario
+            		for (int b = 0; b < contentLocations.length; b++) {
+            			if(reference.equals(contentLocations[b])){
+            				return attachmentPart;
+            			}
+            		}
+            	}
             }
         }
-        return null;  //TODO - Not yet implemented        
+        return null;        
     }
 
     /**
@@ -395,8 +420,6 @@
      * @since SAAJ 1.3
      */
     public void removeAttachments(MimeHeaders headers) {
-        //TODO - check
-    	
     	Collection newAttachmentParts = new ArrayList();
     	Iterator attachmentPartsItr = attachmentParts.iterator();
     	for (Iterator iter = attachmentPartsItr; iter.hasNext();) {
Index: src/org/apache/axis2/saaj/SOAPElementImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPElementImpl.java	(revision 501741)
+++ src/org/apache/axis2/saaj/SOAPElementImpl.java	(working copy)
@@ -41,6 +41,7 @@
 import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11HeaderBlockImpl;
+import org.apache.axiom.soap.impl.dom.soap12.SOAP12Factory;
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12HeaderBlockImpl;
 import org.w3c.dom.Attr;
 import org.w3c.dom.DOMException;
@@ -528,17 +529,29 @@
         return element.removeNamespace(prefix);
     }
 
-    /* (non-Javadoc)
-      * @see javax.xml.soap.SOAPElement#setEncodingStyle(java.lang.String)
-      */
-    
-    //TODO : jira issue
+
+    /**
+     * Sets the encoding style for this SOAPElement object to one specified.
+     * 
+     * @param encodingStyle - a String giving the encoding style
+     * @throws java.lang.IllegalArgumentException - if there was a problem in the encoding
+     *         style being set.
+     *         SOAPException - if setting the encodingStyle is invalid for this SOAPElement.
+     */
     public void setEncodingStyle(String encodingStyle) throws SOAPException {
-    	//TODO : is this check correct?
-    	//if (!encodingStyle.equals(SOAPConstants.URI_NS_SOAP_ENCODING)) {
-        //	throw new IllegalArgumentException("Invalid Encoding style : " + encodingStyle);
-        //}
-        ((DocumentImpl) getOwnerDocument()).setCharsetEncoding(encodingStyle);
+    	if(this.element.getOMFactory() instanceof SOAP11Factory){
+        	if (!encodingStyle.equals(SOAPConstants.URI_NS_SOAP_ENCODING)) {
+            	throw new IllegalArgumentException("Invalid Encoding style : " + encodingStyle);
+            }else{
+            	((DocumentImpl) getOwnerDocument()).setCharsetEncoding(encodingStyle);
+            }
+    	}else if(this.element.getOMFactory() instanceof SOAP12Factory){
+    		if(SOAPConstants.URI_NS_SOAP_1_2_ENCODING.equals(encodingStyle)){
+    			throw new SOAPException("Illegal value : "+SOAPConstants.URI_NS_SOAP_1_2_ENCODING);
+    		}else{
+    			((DocumentImpl) getOwnerDocument()).setCharsetEncoding(encodingStyle);
+    		}
+    	}
     }
 
     /* (non-Javadoc)
Index: src/org/apache/axis2/saaj/MessageFactoryImpl.java
===================================================================
--- src/org/apache/axis2/saaj/MessageFactoryImpl.java	(revision 501741)
+++ src/org/apache/axis2/saaj/MessageFactoryImpl.java	(working copy)
@@ -17,6 +17,7 @@
 
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12Factory;
+import org.apache.axis2.saaj.util.IDGenerator;
 
 import javax.xml.soap.MessageFactory;
 import javax.xml.soap.MimeHeaders;
@@ -166,13 +167,6 @@
      */
     public SOAPMessage createMessage(MimeHeaders mimeheaders,
                                      InputStream inputstream) throws IOException, SOAPException {
-
-        /*System.err.println("@@@@@@@@@@ MessageFactoryImpl#createMessage");
-        byte[] b = new byte[10240];
-        inputstream.read(b);
-        System.err.println("byte=" + new String(b));
-        System.err.println("@@@@@@@@@@ END MessageFactoryImpl#createMessage");*/
-
         SOAPMessageImpl soapMessage = new SOAPMessageImpl(inputstream, mimeheaders);
         soapMessage.setSaveRequired();
         return soapMessage;
Index: test-resources/soap-header.xml
===================================================================
--- test-resources/soap-header.xml	(revision 0)
+++ test-resources/soap-header.xml	(revision 0)
@@ -0,0 +1 @@
+<?xml version='1.0' encoding='utf-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><ch2:ebxmlms2 xmlns:ch2="http;//test.apache.org" /><ch3:ebxmlms3 xmlns:ch3="http://test2.apache.org" /><ch5:ebxmlms5 xmlns:ch5="http://test3.apache.org" /></soapenv:Header><soapenv:Body /></soapenv:Envelope>
\ No newline at end of file

Property changes on: test-resources/soap-header.xml
___________________________________________________________________
Name: svn:executable
   + *

Index: test-resources/soap-part2.xml
===================================================================
--- test-resources/soap-part2.xml	(revision 0)
+++ test-resources/soap-part2.xml	(revision 0)
@@ -0,0 +1,40 @@
+<?xml version='1.0' ?>
+        <env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">
+           <env:Header>
+               <test:echoOk xmlns:test="http://example.org/ts-tests"
+                            env:actor="http://schemas.xmlsoap.org/soap/actor/next"
+                            env:mustUnderstand="1"
+               >
+                               foo
+               </test:echoOk>
+           </env:Header>
+           <env:Body>
+               <env:Fault>
+                   <faultcode>
+                       env:Sender
+                   </faultcode>
+                   <faultstring>
+                       Sender Timeout
+                   </faultstring>
+                   <faultactor>
+                       http://schemas.xmlsoap.org/soap/envelope/actor/ultimateReceiver
+                   </faultactor>
+                   <detail xmlns:m="http:www.sample.org">
+                       Details of error
+                       <m:MaxTime m:detail="This is only a test">
+                           P5M
+                       </m:MaxTime>
+                       <m:AveTime>
+                           <m:Time>
+                               P3M
+                           </m:Time>
+                       </m:AveTime>
+                   </detail>
+                   <n:Test xmlns:n="http:www.Test.org">
+                       <n:TestElement>
+                           This is only a test
+                       </n:TestElement>
+                   </n:Test>
+               </env:Fault>
+           </env:Body>
+        </env:Envelope>

Property changes on: test-resources/soap-part2.xml
___________________________________________________________________
Name: svn:executable
   + *

Index: test-resources/soap-part3.xml
===================================================================
--- test-resources/soap-part3.xml	(revision 0)
+++ test-resources/soap-part3.xml	(revision 0)
@@ -0,0 +1,15 @@
+<?xml version='1.0' encoding='utf-8'?>
+<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
+<soapenv:Header>
+<ns-prefix:Header1 xmlns:ns-prefix="ns-uri" soapenv:mustUnderstand="1">This is Header1</ns-prefix:Header1>
+<ns-prefix:Header2 xmlns:ns-prefix="ns-uri" soapenv:mustUnderstand="0">This is Header2</ns-prefix:Header2>
+<ns-prefix:Header3 xmlns:ns-prefix="ns-uri" soapenv:mustUnderstand="1">This is Header3</ns-prefix:Header3>
+<ns-prefix:Header4 xmlns:ns-prefix="ns-uri" soapenv:mustUnderstand="0">This is Header4</ns-prefix:Header4>
+</soapenv:Header>
+<soapenv:Body>
+<ns-prefix:Body1 xmlns:ns-prefix="ns-uri">
+<ns-prefix:Child1>This is Child1</ns-prefix:Child1>
+<ns-prefix:Child2>This is Child2</ns-prefix:Child2>
+</ns-prefix:Body1>
+</soapenv:Body>
+</soapenv:Envelope>
\ No newline at end of file

Property changes on: test-resources/soap-part3.xml
___________________________________________________________________
Name: svn:executable
   + *

Index: test-resources/soap11message.xml
===================================================================
--- test-resources/soap11message.xml	(revision 0)
+++ test-resources/soap11message.xml	(revision 0)
@@ -0,0 +1,46 @@
+<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing">
+    <soapenv:Header>
+        <wsa:From soapenv:mustUnderstand="0"
+            soapenv:actor="http://schemas.xmlsoap.org/soap/actor/next">
+            <Address xmlns="http://schemas.xmlsoap.org/ws/2004/03/addressing">
+                http://schemas.xmlsoap.org/ws/2004/03/addressing/role/anonymous
+            </Address>
+        </wsa:From>
+        <test:MessageID xmlns:test="http://example.org/ts-tests"
+            soapenv:mustUnderstand="1"
+            soapenv:actor="http://schemas.xmlsoap.org/soap/actor/next"
+            soapenv:anyAttribute="any value">
+            uuid:920C5190-0B8F-11D9-8CED-F22EDEEBF7E5
+        </test:MessageID>
+        <wsa:To soapenv:mustUnderstand="0"
+            soapenv:anyAttribute="any value">
+            http://localhost:8081/axis/services/BankPort
+        </wsa:To>
+    </soapenv:Header>
+    <soapenv:Body>
+        <soapenv:Fault>
+            <soapenv:faultcode>
+                env:Sender
+            </soapenv:faultcode>
+            <soapenv:faultstring>Sender Timeout</soapenv:faultstring>
+            <soapenv:faultactor>
+                http://schemas.xmlsoap.org/soap/envelope/actor/ultimateReceiver
+            </soapenv:faultactor>
+            <soapenv:detail xmlns:m="http://www.sample.org">
+                Details of error
+                <m:MaxTime m:detail="This is only a test">
+                    P5M
+                </m:MaxTime>
+                <m:AveTime>
+                    <m:Time>
+                        P3M
+                    </m:Time>
+                </m:AveTime>
+            </soapenv:detail>
+        </soapenv:Fault>
+    </soapenv:Body>
+</soapenv:Envelope>
+

Property changes on: test-resources/soap11message.xml
___________________________________________________________________
Name: svn:executable
   + *

