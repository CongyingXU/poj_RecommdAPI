Index: org/apache/axis2/context/MessageContext.java
===================================================================
--- org/apache/axis2/context/MessageContext.java	(revision 419043)
+++ org/apache/axis2/context/MessageContext.java	(working copy)
@@ -97,6 +97,9 @@
      */
     public static final String TRANSPORT_NON_BLOCKING = "transportNonBlocking";
 
+    public static final String BASIC_HTTP_AUTH_USER_NAME = "basicHttpAuthUserName";
+    public static final String BASIC_HTTP_AUTH_USER_PASSWORD = "basicHttpAuthPassword";
+
     /**
      * Field processingFault
      */
Index: org/apache/axis2/transport/http/AxisServlet.java
===================================================================
--- org/apache/axis2/transport/http/AxisServlet.java	(revision 419043)
+++ org/apache/axis2/transport/http/AxisServlet.java	(working copy)
@@ -342,19 +342,10 @@
 //        msgContext.setProperty(MessageContext.TRANSPORT_OUT, resp.getOutputStream());
 
         // set the transport Headers
-        msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, getHeaders(req));
+        msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, getTransportHeaders(req));
         msgContext.setServiceGroupContextId(UUIDGenerator.getUUID());
         msgContext.setProperty(Constants.SERVLET_CONTEXT, servletConfig.getServletContext());
         return msgContext;
     }
 
-    protected Map getHeaders(HttpServletRequest request) {
-        HashMap headerMap = new HashMap();
-        Enumeration e = request.getAttributeNames();
-        while (e.hasMoreElements()) {
-            String field = (String) e.nextElement();
-            headerMap.put(field, request.getAttribute(field));
-        }
-        return headerMap;
-    }
 }
Index: org/apache/axis2/transport/http/TransportHeaders.java
===================================================================
--- org/apache/axis2/transport/http/TransportHeaders.java	(revision 419043)
+++ org/apache/axis2/transport/http/TransportHeaders.java	(working copy)
@@ -105,7 +105,7 @@
         if (headerMap == null) {
             init();
         }
-        return headerMap.entrySet();
+        return headerMap.keySet();
     }
 
     public Object get(Object key) {
Index: org/apache/axis2/handlers/HttpBasicAuthHandler.java
===================================================================
--- org/apache/axis2/handlers/HttpBasicAuthHandler.java	(revision 0)
+++ org/apache/axis2/handlers/HttpBasicAuthHandler.java	(revision 0)
@@ -0,0 +1,69 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.handlers;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.MessageContext;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.axiom.om.util.Base64;
+
+import java.util.Map;
+import java.io.ByteArrayInputStream;
+
+public class HttpBasicAuthHandler extends AbstractHandler {
+
+    public static final String HTTP_AUTHORIZATION_HEADER = "Authorization";
+    private static final Log log = LogFactory.getLog(HttpBasicAuthHandler.class);
+
+    /**
+     * @param msgContext
+     * @throws AxisFault
+     */
+    public void invoke(MessageContext msgContext) throws AxisFault {
+
+        log.debug("Invoking Http basic handler");
+        // getting the http headers using transport headers
+        Map headers = (Map) msgContext.getProperty(MessageContext.TRANSPORT_HEADERS);
+        Object basicAuthorizationObject = headers.get(HTTP_AUTHORIZATION_HEADER);
+        if ((basicAuthorizationObject != null) && (basicAuthorizationObject instanceof String)) {
+            String basicAuthorizationValue = (String) basicAuthorizationObject;
+            log.debug("Decoding basic value ==> " + basicAuthorizationValue);
+            String userName = getUserName(basicAuthorizationValue);
+            String password = getPassword(basicAuthorizationValue);
+            msgContext.setProperty(MessageContext.BASIC_HTTP_AUTH_USER_NAME,userName);
+            msgContext.setProperty(MessageContext.BASIC_HTTP_AUTH_USER_PASSWORD,password);
+        }
+
+    }
+
+    protected String getPassword(String authenticationValue) {
+        // authenticated value is similare to -Basic dXNlcm5hbWU6cGFzc3dvcmQ=
+        String encodedValue = authenticationValue.substring(6, authenticationValue.length());
+        String decodedString = new String(Base64.decode(encodedValue));
+        String password = decodedString.substring(decodedString.indexOf(":") + 1, decodedString.length());
+        return password;
+    }
+
+    protected String getUserName(String authenticationValue) {
+        // authenticated value is similare to -Basic dXNlcm5hbWU6cGFzc3dvcmQ=
+        String encodedValue = authenticationValue.substring(6, authenticationValue.length());
+        String decodedString = new String(Base64.decode(encodedValue));
+        String userName = decodedString.substring(0, decodedString.indexOf(":"));
+        return userName;
+    }
+}
