Index: modules/core/project.xml
===================================================================
--- modules/core/project.xml	(revision 423632)
+++ modules/core/project.xml	(working copy)
@@ -197,6 +197,46 @@
                 <module>true</module>
             </properties>
         </dependency>
+        <dependency>
+            <groupId>beehive</groupId>
+            <artifactId>beehive-wsm</artifactId>
+            <version>${beehive.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>beehive</groupId>
+            <artifactId>beehive-jsr181</artifactId>
+            <version>${beehive.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>beehive</groupId>
+            <artifactId>beehive-jsr181-annogen</artifactId>
+            <version>${beehive.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>asm</groupId>
+            <artifactId>asm</artifactId>
+            <version>${asm.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>asm</groupId>
+            <artifactId>asm-commons</artifactId>
+            <version>${asm.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
     </dependencies>
     <build>
 		<resources>
Index: modules/core/src/org/apache/axis2/deployment/DeploymentEngine.java
===================================================================
--- modules/core/src/org/apache/axis2/deployment/DeploymentEngine.java	(revision 423632)
+++ modules/core/src/org/apache/axis2/deployment/DeploymentEngine.java	(working copy)
@@ -600,6 +600,17 @@
                         case TYPE_SERVICE :
                             currentArchiveFile.setClassLoader(explodedDir,
                                                               axisConfig.getServiceClassLoader());
+
+			    // check for JSR 181 annotated files	            
+			    if (currentArchiveFile.getFile().getName().endsWith(".jar")){
+				    JSR181ServiceBuilder.processsAnnotatedClasses(axisConfig,phasesinfo,currentArchiveFile);
+				    /*
+				     * Can we assume, that if annotated POJOs are found there is no service.xml
+				     * If so we can continue the loop instead of going through the logic below
+				     * as in the absence of a services.xml file the jar file will be listed as a 
+				     * failed service in the admin console.
+				     */
+			    }		
                             archiveReader = new ArchiveReader();
                             String serviceStatus = "";
                             try {
Index: modules/core/src/org/apache/axis2/deployment/JSR181ServiceBuilder.java
===================================================================
--- modules/core/src/org/apache/axis2/deployment/JSR181ServiceBuilder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/deployment/JSR181ServiceBuilder.java	(revision 0)
@@ -0,0 +1,97 @@
+/**
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.deployment;
+
+import org.apache.axis2.deployment.repository.util.ArchiveFileData;
+import org.apache.axis2.deployment.util.PhasesInfo;
+import org.apache.axis2.description.WSMToAxisServiceBuilder;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import org.objectweb.asm.ClassReader;
+
+import java.io.File;
+import java.io.InputStream;
+import java.io.FileInputStream;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.zip.ZipInputStream;
+import java.util.zip.ZipEntry;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class JSR181ServiceBuilder {
+
+	private static final Log log = LogFactory.getLog(JSR181ServiceBuilder.class);
+	
+	/*
+	 * Scan each zip entry using ASM to figure out if they are marked with @WebService
+	 * The marked classes are then fed through the WSMToAxisServiceBuilder to generate
+	 * an Axis Service.   
+	 */
+	public static void processsAnnotatedClasses(AxisConfiguration axisConfig,
+			PhasesInfo phaseInfo, ArchiveFileData archiveFileData) {
+
+		try {
+			ZipInputStream zin = new ZipInputStream(new FileInputStream(
+					archiveFileData.getFile()));
+			ZipEntry entry;
+			ArrayList classList = new ArrayList();
+			while ((entry = zin.getNextEntry()) != null) {
+				String entryName = entry.getName();
+				
+				if (entryName.endsWith(".class")) {
+
+					try {
+						ClassReader classReader = new ClassReader(zin);
+						ASMClassVisitor classVisitor = new ASMClassVisitor();
+						classReader.accept(classVisitor, false);
+
+						if (classVisitor.getMarked()) {
+							classList.add(classVisitor.getClassName());
+						}
+					} catch (Exception e) {
+						e.printStackTrace();
+					}
+				}
+			}
+			
+			for (Iterator it = classList.iterator(); it.hasNext();) {
+				String className = (String) it.next();
+				Class clazz = archiveFileData.getClassLoader().loadClass(className);
+				// Interface will be picked up by the implementing class
+				// as it should specify the enpointInterface attribute
+				if (clazz.isInterface()){					
+					System.out.println(className + " is an interface, skipping");
+					continue;
+				}
+				log.debug("Class " + className
+						+ " is selected to be deployed as a Web Service");
+				WSMToAxisServiceBuilder serviceBuilder = new WSMToAxisServiceBuilder(
+						className, phaseInfo, archiveFileData.getAbsolutePath(),archiveFileData.getClassLoader());
+				AxisService axisService = serviceBuilder.populateService();
+                                axisConfig.addService(axisService); 
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+	}
+
+}
Index: modules/core/src/org/apache/axis2/deployment/ASMClassVisitor.java
===================================================================
--- modules/core/src/org/apache/axis2/deployment/ASMClassVisitor.java	(revision 0)
+++ modules/core/src/org/apache/axis2/deployment/ASMClassVisitor.java	(revision 0)
@@ -0,0 +1,83 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+
+package org.apache.axis2.deployment;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.objectweb.asm.ClassVisitor;
+import org.objectweb.asm.AnnotationVisitor;
+import org.objectweb.asm.FieldVisitor;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Attribute;
+import org.objectweb.asm.commons.EmptyVisitor;
+
+import java.util.Vector;
+
+public class ASMClassVisitor implements ClassVisitor {
+
+	private static final Log log = LogFactory.getLog(ASMClassVisitor.class);
+	public static final String TYPE = "Ljavax/jws/WebService;";
+    private String className;
+    private boolean marked;
+
+    public ASMClassVisitor(){
+    }
+
+    public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) {
+        log.debug("visitAnnotation: desc " + desc + " visible " + visible);
+
+	if (TYPE.equals(desc)){
+		marked = true;
+	}
+        return new EmptyVisitor();
+    }
+
+    public boolean getMarked(){
+	return marked;
+    }
+
+    public String getClassName(){
+	return className;    
+    }
+
+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces){
+        className = name;
+
+        //log.debug("visit: name " + name + " signature " + signature + " access " + access);
+        System.out.println("visit: name " + name + " signature " + signature + " access " + access);
+    }
+    
+    public  void visitAttribute(Attribute attr){}
+    
+    public void visitEnd(){}
+    
+    public  FieldVisitor visitField(int access, String name, String desc, String signature, Object value){
+        return new EmptyVisitor();
+    }
+
+    public void visitInnerClass(String name, String outerName, String innerName, int access){}
+
+    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions){
+        return new EmptyVisitor();
+    }
+
+    public void visitOuterClass(String owner, String name, String desc){}
+
+    public void visitSource(String source, String debug){}
+
+}
Index: modules/core/src/org/apache/axis2/description/WSMToAxisServiceBuilder.java
===================================================================
--- modules/core/src/org/apache/axis2/description/WSMToAxisServiceBuilder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/description/WSMToAxisServiceBuilder.java	(revision 0)
@@ -0,0 +1,102 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ *
+ *
+ */
+package org.apache.axis2.description;
+
+import java.util.Iterator;
+
+import javax.wsdl.Operation;
+import javax.wsdl.OperationType;
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.beehive.wsm.processor.model.factory.WsmServiceFactory;
+import org.apache.beehive.wsm.processor.model.factory.WsmServiceStyleFactory;
+import org.apache.beehive.wsm.processor.model.factory.reflection.ReflectionTypeResolver;
+import org.apache.beehive.wsm.model.*;
+import org.apache.axis2.engine.MessageReceiver;
+import org.apache.axis2.deployment.util.PhasesInfo;
+
+public class WSMToAxisServiceBuilder{
+
+    private WsmService wsmService;    
+    private PhasesInfo phaseInfo;
+
+    /**
+     * We need to figure out a way to extract classes that
+     * are marked with @WebService  
+    */	 
+    public WSMToAxisServiceBuilder(String serviceClassName,PhasesInfo phaseInfo, String baseLocation, ClassLoader cl)throws AxisFault {
+
+		WsmServiceFactory serviceFactory = WsmServiceStyleFactory.create(WsmServiceStyleFactory.FactoryType.REFLECT);
+		wsmService = serviceFactory.create(serviceClassName,new ReflectionTypeResolver(cl),baseLocation);
+	}
+	
+	public AxisService populateService(){
+		AxisService axisService = new AxisService();
+	
+		axisService.setName(wsmService.getServiceName());
+		axisService.setTargetNamespace(wsmService.getTargetNamespace());
+		
+		// Add operations
+		for(Iterator it = wsmService.getOperations().iterator(); it.hasNext();){
+			WsmOperation wsmOperation = (WsmOperation)it.next();
+			AxisOperation axisOperation = null;
+			try {
+				String MEP = getMEP(wsmOperation);
+				axisOperation = AxisOperationFactory.getOperationDescription(MEP);
+			} catch (Exception e) {
+				AxisFault ex = new AxisFault("Error building operation " + wsmOperation);
+				ex.initCause(e);
+			}
+			
+			if (axisOperation != null){
+				axisOperation.setName(new QName(wsmOperation.getOperationName()));
+				axisOperation.setSoapAction(wsmOperation.getAction());
+				// need to add a message receiver
+				String messageReceiverClass = "org.apache.axis2.rpc.receivers.RPCMessageReceiver";
+				if(wsmOperation.isOneWay()){
+					messageReceiverClass = "org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver";
+				}
+				try{
+					MessageReceiver msgReceiver = (MessageReceiver)Class.forName(messageReceiverClass).newInstance();
+					axisOperation.setMessageReceiver(msgReceiver);
+
+				}catch(Exception e){
+				}
+			}
+			axisService.addOperation(axisOperation);
+		}
+		
+		return axisService;
+    } 
+	    
+    private String getMEP(WsmOperation operation) throws Exception {
+        if (null != operation) {
+            if (operation.isOneWay()){
+            	return WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_ONLY;
+            }else{
+            	return WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OUT;
+            }
+            	
+        }else{
+        	throw new Exception("Cannot Determine the MEP");
+        }
+    }
+
+}
Index: modules/webapp/project.xml
===================================================================
--- modules/webapp/project.xml	(revision 423632)
+++ modules/webapp/project.xml	(working copy)
@@ -224,7 +224,46 @@
                 <module>true</module>
             </properties>
         </dependency>
-
+        <dependency>
+            <groupId>beehive</groupId>
+            <artifactId>beehive-wsm</artifactId>
+            <version>${beehive.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>beehive</groupId>
+            <artifactId>beehive-jsr181</artifactId>
+            <version>${beehive.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>beehive</groupId>
+            <artifactId>beehive-jsr181-annogen</artifactId>
+            <version>${beehive.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>asm</groupId>
+            <artifactId>asm</artifactId>
+            <version>${asm.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>asm</groupId>
+            <artifactId>asm-commons</artifactId>
+            <version>${asm.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
     </dependencies>
 
     <reports/>
Index: etc/project.properties
===================================================================
--- etc/project.properties	(revision 423632)
+++ etc/project.properties	(working copy)
@@ -135,6 +135,8 @@
 xmlsec.version=1.3.0
 xmlunit.version=1.0
 log4j.version=1.2.13
+beehive.version=1.0-SNAPSHOT
+asm.version=2.2
 # ------------------------------------------------------------------------
 # M A V E N  J A R  O V E R R I D E
 # ------------------------------------------------------------------------
