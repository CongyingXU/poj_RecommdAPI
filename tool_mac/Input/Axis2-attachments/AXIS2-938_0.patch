Index: /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 426351)
+++ /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -23,6 +23,7 @@
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.phaseresolver.PhaseResolver;
 import org.apache.axis2.util.SessionUtils;
+import org.apache.axis2.util.ThreadContextMigrator;
 import org.apache.axis2.util.Utils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -82,6 +83,8 @@
 
     private HashMap messageReceivers;
 
+    private LinkedList threadContextMigrators;
+    
     private ClassLoader moduleClassLoader;
 
     private HashMap moduleConfigmap;
@@ -120,6 +123,7 @@
         serviceClassLoader = Thread.currentThread().getContextClassLoader();
         moduleClassLoader = Thread.currentThread().getContextClassLoader();
         this.phasesinfo = new PhasesInfo();
+        threadContextMigrators = new LinkedList();
     }
 
     public void addMessageReceiver(String mepURL,
@@ -798,6 +802,30 @@
         }
     }
 
+    /**
+     * Register a new ThreadContextMigrator.
+     */
+    public void addThreadContextMigrator(ThreadContextMigrator migrator)
+    {
+      threadContextMigrators.add(migrator);
+    }
+    
+    /**
+     * Test whether or not any ThreadContextMigrators have been registered.
+     */
+    public boolean hasRegisteredThreadContextMigrators()
+    {
+      return (threadContextMigrators.size() > 0);
+    }
+
+    /**
+     * Get a ListIterator over the registered ThreadContextMigrators.
+     */
+    public ListIterator getThreadContextMigrators()
+    {
+      return threadContextMigrators.listIterator();
+    }
+    
     public ArrayList getObserversList() {
         return observersList;
     }
Index: /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/util/ThreadContextMigrator.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/util/ThreadContextMigrator.java	(revision 0)
+++ /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/util/ThreadContextMigrator.java	(revision 0)
@@ -0,0 +1,111 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.util;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.MessageContext;
+
+/**
+ * This is the interface for a piece of code that will plug into the user
+ * programming model impl (e.g. JAX-WS impl) and will be invoked while on the
+ * ultimate thread of execution.  It is intended to provide a mechanism to
+ * allow information to be migrated between the Axis2 contexts and thread
+ * local storage.
+ * 
+ * For each general MEP, here is the invocation pattern:
+ * 
+ * [one-way inbound]
+ * migrateContextToThread(req)
+ * cleanupThread(req)
+ * 
+ * [req/rsp inbound]
+ * migrateContextToThread(req)
+ * migrateThreadToContext(rsp)
+ * cleanupContext(rsp)
+ * cleanupThread(req)
+ * 
+ * [one-way outbound]
+ * migrateThreadToContext(req)
+ * cleanupContext(req)
+ * 
+ * [req/rsp outbound (both sync and async)]
+ * migrateThreadToContext(req)
+ * cleanupContext(rsp)
+ * migrateContextToThread(rsp)
+ * Note: there is no corresponding cleanupContext(rsp); one of the inbound
+ *       cases would need to handle this
+ * 
+ * If a fault occurs during execution of one of the migrators, it will be
+ * treated like any other service fault (i.e. like what will happen if we can't
+ * deliver the message to a service or if a handler fails.
+ * 
+ * The cleanup* methods can be expected to be invoked after any exeception
+ * that occurs within the scope of the migration that would cause that scope
+ * to be left so that the thread and/or context may be cleaned up properly. 
+ */
+public interface ThreadContextMigrator
+{
+  /**
+   * This method will be invoked when the processing of the message is
+   * guaranteed to be on the thread of execution that will be used in
+   * user space.  It will be invoked for incoming messages.
+   * Implementations of this interface can use the information found in the
+   * MessageContext to determine whether a request or response is being
+   * processed.
+   * (e.g. MessageContext.getAxisOperation().getMessageExchangePattern())
+   * 
+   * @param messageContext
+   * @throws AxisFault
+   */
+  void migrateContextToThread(MessageContext messageContext) throws AxisFault;
+
+  /**
+   * This method will be invoked when the processing of the message is
+   * guaranteed to still be on the thread of execution that was used in user
+   * space, after all processing has completed (i.e. when the particular
+   * processing of a message is unwinding.)  It provides a mechanism which can
+   * be used to clean up the TLS.
+   *   
+   * @param messageContext
+   */
+  void cleanupThread(MessageContext messageContext);
+
+  /**
+   * This method will be invoked when the processing of the message is
+   * guaranteed to still be on the thread of execution that was used in
+   * user space.  It will be invoked for both outgoing messages.
+   * Implementations of this interface can use the information found in the
+   * MessageContext to determine whether a request or response is being
+   * processed.
+   * (e.g. MessageContext.getAxisOperation().getMessageExchangePattern())
+   * 
+   * @param messageContext
+   * @throws AxisFault
+   */
+  void migrateThreadToContext(MessageContext messageContext) throws AxisFault;
+  
+  /**
+   * This method will be invoked when the processing of the message is
+   * guaranteed to be on the thread of execution that will be used in user
+   * space, after all processing has completed (i.e. when the particular
+   * processing of a message is unwinding.)  It provides a mechanism which can
+   * be used to clean up the MessageContext or restore TLS.
+   *   
+   * @param messageContext
+   */
+  void cleanupContext(MessageContext messageContext);
+}
Index: /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/util/ThreadContextMigratorUtil.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/util/ThreadContextMigratorUtil.java	(revision 0)
+++ /home/nagy/work/apache/axis2/modules/core/src/org/apache/axis2/util/ThreadContextMigratorUtil.java	(revision 0)
@@ -0,0 +1,124 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.util;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.engine.AxisConfiguration;
+
+import java.util.ListIterator;
+
+/**
+ * This is a utility class to make it easier/cleaner for user programming
+ * model-level implementations (e.g. the Axis2 JAX-WS code) to invoke the
+ * ThreadContextMigrators. 
+ */
+public class ThreadContextMigratorUtil
+{
+  /**
+   * Activate any registered ThreadContextMigrators to move context info
+   * to the thread of execution.
+   * 
+   * @param msgContext
+   * @throws AxisFault
+   */
+  public static void performMigrationToThread(MessageContext msgContext)
+  throws AxisFault
+  {
+    AxisConfiguration axisConfiguration
+      = msgContext.getAxisService().getAxisConfiguration();
+
+    if (axisConfiguration.hasRegisteredThreadContextMigrators())
+    {
+      ListIterator threadContextMigrators
+        = axisConfiguration.getThreadContextMigrators();
+      while (threadContextMigrators.hasNext())
+      {
+        ((ThreadContextMigrator)threadContextMigrators.next()).migrateContextToThread(msgContext);
+      }
+    }
+  }
+
+  /**
+   * Activate any registered ThreadContextMigrators to remove information
+   * from the thread of execution if necessary.
+   * 
+   * @param msgContext
+   */
+  public static void performThreadCleanup(MessageContext msgContext)
+  {
+    AxisConfiguration axisConfiguration
+      = msgContext.getAxisService().getAxisConfiguration();
+    
+    if (axisConfiguration.hasRegisteredThreadContextMigrators())
+    {
+      ListIterator threadContextMigrators
+        = axisConfiguration.getThreadContextMigrators();
+      while (threadContextMigrators.hasNext())
+      {
+        ((ThreadContextMigrator)threadContextMigrators.next()).cleanupThread(msgContext);
+      }
+    }
+  }
+
+  /**
+   * Activate any registered ThreadContextMigrators to move info from the
+   * thread of execution into the context.
+   * 
+   * @param msgContext
+   * @throws AxisFault
+   */
+  public static void performMigrationToContext(MessageContext msgContext)
+  throws AxisFault
+  {
+    AxisConfiguration axisConfiguration
+      = msgContext.getAxisService().getAxisConfiguration();
+
+    if (axisConfiguration.hasRegisteredThreadContextMigrators())
+    {
+      ListIterator threadContextMigrators
+        = axisConfiguration.getThreadContextMigrators();
+      while (threadContextMigrators.hasNext())
+      {
+        ((ThreadContextMigrator)threadContextMigrators.next()).migrateThreadToContext(msgContext);
+      }
+    }
+  }
+  
+  /**
+   * Activate any registered ThreadContextMigrators to remove information from
+   * the context if necessary.
+   * 
+   * @param msgContext
+   */
+  public static void performContextCleanup(MessageContext msgContext)
+  {
+    AxisConfiguration axisConfiguration
+      = msgContext.getAxisService().getAxisConfiguration();
+    
+    if (axisConfiguration.hasRegisteredThreadContextMigrators())
+    {
+      ListIterator threadContextMigrators
+        = axisConfiguration.getThreadContextMigrators();
+      while (threadContextMigrators.hasNext())
+      {
+        ((ThreadContextMigrator)threadContextMigrators.next()).cleanupContext(msgContext);
+      }
+    }
+  }
+}
Index: /home/nagy/work/apache/axis2/modules/core/test/org/apache/axis2/util/ThreadContextMigratorTest.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/core/test/org/apache/axis2/util/ThreadContextMigratorTest.java	(revision 0)
+++ /home/nagy/work/apache/axis2/modules/core/test/org/apache/axis2/util/ThreadContextMigratorTest.java	(revision 0)
@@ -0,0 +1,97 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.util;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisServiceGroup;
+import org.apache.axis2.engine.AxisConfiguration;
+
+import junit.framework.TestCase;
+
+public class ThreadContextMigratorTest extends TestCase
+{
+  private MessageContext messageContext;
+  
+  public void setUp()
+  {
+    AxisService axisService = new AxisService();
+    axisService.setParent(new AxisServiceGroup(new AxisConfiguration()));
+    messageContext = new MessageContext();
+    messageContext.setAxisService(axisService);
+  }
+  
+  public void testEmptyMigratorStructure()
+  throws Exception
+  {
+    ThreadContextMigratorUtil.performMigrationToThread(messageContext);
+    ThreadContextMigratorUtil.performMigrationToContext(messageContext);
+    ThreadContextMigratorUtil.performThreadCleanup(messageContext);
+    ThreadContextMigratorUtil.performContextCleanup(messageContext);
+  }
+  
+  public void testMigration()
+  throws Exception
+  {
+    TestMigrator testMigrator1 = new TestMigrator();
+    TestMigrator testMigrator2 = new TestMigrator();
+    messageContext.getAxisService().getAxisConfiguration().addThreadContextMigrator(testMigrator1);
+    messageContext.getAxisService().getAxisConfiguration().addThreadContextMigrator(testMigrator2);
+    ThreadContextMigratorUtil.performMigrationToThread(messageContext);
+    assertTrue(testMigrator1.migratedToThread);
+    assertTrue(testMigrator2.migratedToThread);
+    ThreadContextMigratorUtil.performMigrationToContext(messageContext);
+    assertTrue(testMigrator1.migratedToContext);
+    assertTrue(testMigrator2.migratedToContext);
+    ThreadContextMigratorUtil.performThreadCleanup(messageContext);
+    assertTrue(testMigrator1.cleanedThread);
+    assertTrue(testMigrator2.cleanedThread);
+    ThreadContextMigratorUtil.performContextCleanup(messageContext);
+    assertTrue(testMigrator1.cleanedContext);
+    assertTrue(testMigrator2.cleanedContext);
+  }
+  
+  class TestMigrator implements ThreadContextMigrator
+  {
+    boolean migratedToThread;
+    boolean cleanedThread;
+    boolean migratedToContext;
+    boolean cleanedContext;
+    
+    public void migrateContextToThread(MessageContext messageContext) throws AxisFault
+    {
+      migratedToThread = true;
+    }
+
+    public void cleanupThread(MessageContext messageContext)
+    {
+      cleanedThread = true;
+    }
+
+    public void migrateThreadToContext(MessageContext messageContext) throws AxisFault
+    {
+      migratedToContext = true;
+    }
+
+    public void cleanupContext(MessageContext messageContext)
+    {
+      cleanedContext = true;
+    }
+    
+  }
+}
Index: /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/AxisCallback.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/AxisCallback.java	(revision 426351)
+++ /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/AxisCallback.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.apache.axis2.util.ThreadContextMigratorUtil;
 
 /**
  * The AxisCallback is the touch point for asynchronous invocations 
@@ -49,6 +50,9 @@
         responseMsgCtx = new MessageContext(axisMsgCtx);
         
         try {
+            //REVIEW: Are we on the final thread of execution here or does this get handed off to the executor?
+            ThreadContextMigratorUtil.performMigrationToThread(axisMsgCtx);
+          
             OMElement responseEnv = result.getResponseEnvelope();
             
             MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
Index: /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(revision 426351)
+++ /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(working copy)
@@ -42,6 +42,7 @@
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.axis2.jaxws.util.Constants;
+import org.apache.axis2.util.ThreadContextMigratorUtil;
 import org.apache.axis2.wsdl.WSDLConstants;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -123,7 +124,11 @@
 
                 // Set the Axis2 request MessageContext
                 opClient.addMessageContext(axisRequestMsgCtx);
+
+                //This assumes that we are on the ultimate execution thread
+                ThreadContextMigratorUtil.performMigrationToContext(axisRequestMsgCtx);
                 opClient.execute(true);
+                ThreadContextMigratorUtil.performContextCleanup(axisRequestMsgCtx);
                 
                 // Collect the response MessageContext and envelope
                 org.apache.axis2.context.MessageContext axisResponseMsgCtx = 
@@ -129,6 +134,9 @@
                 org.apache.axis2.context.MessageContext axisResponseMsgCtx = 
                     opClient.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                 
+                //This assumes that we are on the ultimate execution thread
+                ThreadContextMigratorUtil.performMigrationToThread(axisResponseMsgCtx);
+                
                 SOAPEnvelope rspEnvelope = axisResponseMsgCtx.getEnvelope();
                 Message responseMsg = null;
                 if (rspEnvelope != null) {
Index: /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java
===================================================================
--- /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(revision 426351)
+++ /home/nagy/work/apache/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(working copy)
@@ -18,6 +18,9 @@
 package org.apache.axis2.jaxws.server;
 
 import javax.xml.ws.Service.Mode;
+
+import java.util.ListIterator;
+
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.MessageContext;
@@ -22,6 +25,7 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.description.AxisService;
+import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.engine.AxisEngine;
 import org.apache.axis2.engine.MessageReceiver;
 import org.apache.axis2.jaxws.param.Parameter;
@@ -26,6 +30,8 @@
 import org.apache.axis2.engine.MessageReceiver;
 import org.apache.axis2.jaxws.param.Parameter;
 import org.apache.axis2.jaxws.param.ParameterFactory;
+import org.apache.axis2.util.ThreadContextMigrator;
+import org.apache.axis2.util.ThreadContextMigratorUtil;
 import org.apache.axis2.util.Utils;
 
 
@@ -66,7 +72,10 @@
     	}
                 
         try {
-        	
+
+            //This assumes that we are on the ultimate execution thread
+            ThreadContextMigratorUtil.performMigrationToThread(reqMsgContext);
+          
         	// Get the appropriate endpoint dispatcher for this service
         	EndpointDispatcher endpointDispatcher = new EndpointController(reqMsgContext).getDispatcher();
         	Object response = endpointDispatcher.execute();
@@ -74,11 +83,20 @@
             Parameter rspParam = ParameterFactory.createParameter(response);
             SOAPEnvelope rspEnvelope = rspParam.toEnvelope(Mode.PAYLOAD, null);
             rspMsgContext.setEnvelope(rspEnvelope);
-            
+
+            //This assumes that we are on the ultimate execution thread
+            ThreadContextMigratorUtil.performMigrationToContext(rspMsgContext);
+
             // Create the AxisEngine for the response and send it.
             AxisEngine engine = new AxisEngine(rspMsgContext.getConfigurationContext());
             engine.send(rspMsgContext);
+
+            //This assumes that we are on the ultimate execution thread
+            ThreadContextMigratorUtil.performContextCleanup(rspMsgContext);
+            ThreadContextMigratorUtil.performThreadCleanup(reqMsgContext);
+            
         } catch (Exception e) {
+            //TODO: If we get an exception, we need to take the correct threadContextMigration steps (e.g. allow them to cleanup)
         	//TODO: This temp code for alpha till we add fault processing on client code.
         	Exception ex = new Exception("Server Side Exception :" +e.getMessage());
             throw AxisFault.makeFault(ex);
@@ -84,4 +102,5 @@
             throw AxisFault.makeFault(ex);
         } 
     }
+    
 }
