Index: modules/kernel/test/org/apache/axis2/xmlfilter/PickUpFilter.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/PickUpFilter.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/PickUpFilter.java	(revision 0)
@@ -0,0 +1,117 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.util.StreamReaderDelegate;
+
+import org.apache.axiom.om.impl.builder.BuilderAwareReader;
+import org.apache.axiom.om.impl.builder.StAXBuilder;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.FilterDescription;
+import org.apache.axis2.description.Parameter;
+
+/**
+ * PickUpFilter is implementation of Filter and BuilderAwareReader.
+ * This filter pickup OMNode which meets some conditions specified 
+ * by user and add it to list. The list has some references to the
+ * OMNode. Then we can access OMNodes which we want to access without
+ * traversing tree. 
+ * 
+ */
+public class PickUpFilter extends StreamReaderDelegate implements Filter, BuilderAwareReader {
+
+    public static final String PICKUP_FILTER_LIST_KEY = "candidate list key";
+    public static final String PICKUP_FILTER_TARGET_NAME = "target local name";
+
+    protected boolean disable = false;
+
+    protected StAXBuilder builder; // to get OMDocument and current built OMElement.
+    protected MessageContext messageContext; // to get request information and to set result of this filter
+
+    protected List candidateList;
+    protected boolean pickupLastNode;
+
+    protected String targetLocalName;
+
+    public XMLStreamReader init(XMLStreamReader reader, MessageContext context) {
+        super.setParent(reader);
+        this.messageContext = context;
+
+        // get parameter value
+        FilterDescription filterDescription = context
+                                                .getConfigurationContext()
+                                                .getAxisConfiguration()
+                                                .getFilterDescription(PickUpFilter.class.getName());
+        Parameter param = filterDescription.getParameter("default_length");
+        String defaultLength = (String) param.getValue();
+        int length;
+        try {
+            length = Integer.parseInt(defaultLength);
+        } catch (NumberFormatException e) {
+            e.printStackTrace();
+            length=10;
+        }
+        
+        candidateList = (List) context.getProperty(PICKUP_FILTER_LIST_KEY);
+        if (candidateList == null) {
+            candidateList = new ArrayList(length);
+            context.setProperty(PICKUP_FILTER_LIST_KEY, candidateList);
+        }
+
+        targetLocalName = (String) context.getProperty(PICKUP_FILTER_TARGET_NAME);
+        if (targetLocalName == null)
+            disable = true;
+        
+
+        return this;
+    }
+
+    public void setBuilder(StAXBuilder builder) {
+        this.builder = builder;
+    }
+
+    public void setTargetLocalName(String targetLocalName) {
+        this.targetLocalName = targetLocalName;
+    }
+
+    public int next() throws XMLStreamException {
+        int eventType = super.next();
+
+        if (disable)
+            return eventType;
+
+        if (pickupLastNode) {
+            candidateList.add(builder.getLastNode());
+            pickupLastNode = false;
+        }
+
+        switch (eventType) {
+        case XMLStreamConstants.START_ELEMENT:
+            if (super.getLocalName().equals(targetLocalName)) {
+                pickupLastNode = true;
+            }
+        }
+
+        return eventType;
+    }
+}
Index: modules/kernel/test/org/apache/axis2/xmlfilter/TestFilterImpl1.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/TestFilterImpl1.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/TestFilterImpl1.java	(revision 0)
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.util.StreamReaderDelegate;
+
+import org.apache.axiom.om.impl.builder.BuilderAwareReader;
+import org.apache.axiom.om.impl.builder.StAXBuilder;
+import org.apache.axis2.context.MessageContext;
+
+/**
+ * This filter do nothing. This is just for unit test.
+ */
+public class TestFilterImpl1 extends StreamReaderDelegate implements Filter, BuilderAwareReader {
+
+    XMLStreamReader reader = null;
+    Object context = null;
+    StAXBuilder builder = null;
+
+    public XMLStreamReader init(XMLStreamReader reader, MessageContext context) {
+
+        super.setParent(reader);
+        this.reader = reader;
+        this.context = context;
+
+        return this;
+    }
+
+    public void setBuilder(StAXBuilder builder) {
+        this.builder = builder;
+    }
+
+    public int next() throws XMLStreamException {
+        int eventType = super.next();
+
+        return eventType;
+    }
+}
Index: modules/kernel/test/org/apache/axis2/xmlfilter/TestFilterImpl2.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/TestFilterImpl2.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/TestFilterImpl2.java	(revision 0)
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.util.StreamReaderDelegate;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.FilterDescription;
+import org.apache.axis2.description.Parameter;
+
+/**
+ * This filter do nothing. This is just for unit test.
+ */
+public class TestFilterImpl2 extends StreamReaderDelegate implements Filter {
+
+    Object context = null;
+    String defaultLength = null;
+
+    public XMLStreamReader init(XMLStreamReader reader, MessageContext context) {
+
+        super.setParent(reader);
+        this.context = context;
+        
+        // get parameter value
+        FilterDescription filterDescription = context
+                                                .getConfigurationContext()
+                                                .getAxisConfiguration()
+                                                .getFilterDescription(TestFilterImpl2.class.getName());
+        Parameter param = filterDescription.getParameter("default_length");
+        defaultLength = (String) param.getValue();
+        
+        
+        return this;
+    }
+
+    public int next() throws XMLStreamException {
+        int eventType = super.next();
+
+        return eventType;
+    }
+}
Index: modules/kernel/test/org/apache/axis2/xmlfilter/ExtractMyActorSOAPHeaderFilter.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/ExtractMyActorSOAPHeaderFilter.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/ExtractMyActorSOAPHeaderFilter.java	(revision 0)
@@ -0,0 +1,170 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.util.StreamReaderDelegate;
+
+import org.apache.axiom.om.OMDocument;
+import org.apache.axiom.om.impl.builder.BuilderAwareReader;
+import org.apache.axiom.om.impl.builder.StAXBuilder;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.xmlfilter.Filter;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * ExtractMyActorSOAPHeaderFilter is implementation of filter.
+ * SOAP header can have some child elements. Their actor indicates who 
+ * should process the element. This filter extracts SOAP header which 
+ * should be proccessed by this web service and remove other's SOAP header.
+
+ */
+public class ExtractMyActorSOAPHeaderFilter extends StreamReaderDelegate implements Filter, BuilderAwareReader {
+
+    private static final Log log = LogFactory.getLog(StAXOMBuilder.class);
+    private boolean doDebug = true;
+
+    static final int STATE_WAIT_SOAPHEADER = 1;
+    static final int STATE_WAIT_OTHERS_SOAPHEADER = 2;
+    static final int STATE_IN_MYACTOR_SOAPHEADER = 3;
+    static final int STATE_OUTSIDE_SOAPHEADER = 4;
+
+    static final String NS_SOAP11 = "http://schemas.xmlsoap.org/soap/envelope/";
+
+    protected XMLStreamReader reader;
+    protected StAXBuilder builder; // to get OMDocument and current built OMElement.
+    protected MessageContext messageContext; // to get request information and to set result of this filter
+    protected OMDocument omDoc; // to get past information from OMDocument. (Caching on filter is very fruitness.)
+
+    protected int state;
+    protected String myActor;
+    protected int depth;
+
+    public XMLStreamReader init(XMLStreamReader reader, MessageContext context) {
+        super.setParent(reader);
+
+        state = STATE_WAIT_SOAPHEADER;
+        myActor = null;
+        depth = 0;
+
+        this.reader = reader;
+        if (context instanceof MessageContext) {
+            this.messageContext = (MessageContext) context;
+            setMyActor(messageContext);
+        }
+        return this;
+    }
+
+    public void setBuilder(StAXBuilder builder) {
+        this.builder = builder;
+    }
+
+    private void setMyActor(MessageContext messageContext) {
+        myActor = (String) messageContext.getProperty("myactor");
+    }
+
+    public int next() throws XMLStreamException {
+        int eventType = reader.next();
+        if (doDebug) {
+            switch (eventType) {
+            case XMLStreamConstants.START_ELEMENT:
+                log.debug("<" + reader.getPrefix() + ":" + reader.getLocalName() + ">");
+                break;
+            case XMLStreamConstants.END_ELEMENT:
+                log.debug("</" + reader.getPrefix() + ":" + reader.getLocalName() + ">");
+                break;
+            }
+
+        }
+
+        switch (state) {
+        case STATE_WAIT_SOAPHEADER: {
+            // wait SOAP Header
+            if (eventType != XMLStreamConstants.START_ELEMENT)
+                return eventType;
+            if (!"Header".equals(reader.getLocalName()) || !NS_SOAP11.equals(reader.getNamespaceURI()))
+                return eventType;
+            state = STATE_WAIT_OTHERS_SOAPHEADER;
+            break;
+        }
+        case STATE_WAIT_OTHERS_SOAPHEADER: {
+            // wait others header
+            switch (eventType) {
+            case XMLStreamConstants.START_ELEMENT:
+                String actor = reader.getAttributeValue(NS_SOAP11, "actor");
+
+                if (actor == null) {
+                    //TODO check ultimate recipient.
+                    return eventType;
+                } else if (actor.equals(myActor)) {
+                    state = STATE_IN_MYACTOR_SOAPHEADER;
+                    depth++;
+                    return eventType;
+                } else {
+                    // skip others header
+                    int d = 1;
+                    while (d > 0) {
+                        int et = reader.next();
+                        switch (et) {
+                        case XMLStreamConstants.START_ELEMENT:
+                            d++;
+                            break;
+                        case XMLStreamConstants.END_ELEMENT:
+                            d--;
+                            break;
+                        }
+                    }
+                    return this.next();
+                }
+            case XMLStreamConstants.END_ELEMENT:
+                if (!"Header".equals(reader.getLocalName()) || !NS_SOAP11.equals(reader.getNamespaceURI()))
+                    return eventType;
+
+                state = STATE_OUTSIDE_SOAPHEADER;
+
+                break;
+            }
+            break;
+        }
+        case STATE_IN_MYACTOR_SOAPHEADER: {
+            // 
+            switch (eventType) {
+            case XMLStreamConstants.START_ELEMENT:
+                depth++;
+                return eventType;
+            case XMLStreamConstants.END_ELEMENT:
+                depth--;
+                if (depth == 0) {
+                    state = STATE_WAIT_OTHERS_SOAPHEADER;
+                }
+            }
+            break;
+        }
+        case STATE_OUTSIDE_SOAPHEADER: {
+            // do nothing
+            return eventType;
+        }
+        }
+
+        return eventType;
+    }
+}
+
Index: modules/kernel/test/org/apache/axis2/xmlfilter/FilterDemo1.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/FilterDemo1.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/FilterDemo1.java	(revision 0)
@@ -0,0 +1,113 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.axiom.soap.SOAP11Constants;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.context.MessageContext;
+/**
+ * This demo shows how filter works and how to add your filter to axis2.
+ * ExtractMyActorSOAPHeaderFilter is implementation of Filter interface.
+ * SOAP header can have some child elements. Their actor indicates who 
+ * should process the element. This filter extracts SOAP header which 
+ * should be proccessed by this web service and remove other's SOAP header.
+ */
+public class FilterDemo1 {
+
+    public static void main(String[] args) {
+
+        try {
+            if (System.getProperty("basedir") == null)
+                System.setProperty("basedir", "modules/kernel"); // for standalone test
+
+            // create message context
+            MessageContext messageContext = new MessageContext();
+
+            // load axis2.xml
+            String filelocation = System.getProperty("basedir") + "/test-resources/deployment/filter/demo1";
+            String filename = filelocation + "/axis2.xml";
+            ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(filelocation, filename);
+            messageContext.setConfigurationContext(configContext);
+
+            // prepare byte array
+            String xmlfile = System.getProperty("basedir") + "/test-resources/deployment/filter/demo1/soapsample.xml";
+            ByteArrayInputStream bais = getByteArray(xmlfile);
+
+            // set myactor to MessageContext
+            messageContext.setProperty("myactor", "webservice1");
+
+            // create XML StAX parser
+            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(bais);
+
+            // set filter
+            xmlReader = messageContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlReader, messageContext);
+
+            // create Builder. If xmlReader is implementation of BuilderAwareReader, builder is set to the xmlReader
+            StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(xmlReader, SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
+
+            // create SOAP envelope
+            SOAPEnvelope soapEnvelope = builder.getSOAPEnvelope();
+
+            // build SOAP enveloap
+            soapEnvelope.build();
+
+            System.out.println(soapEnvelope);
+
+        } catch (XMLStreamException e) {
+            e.printStackTrace();
+        } catch (AxisFault e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static ByteArrayInputStream getByteArray(String xmlfile) {
+        try {
+            ByteArrayInputStream bais;
+            ByteArrayOutputStream tmpOS;
+
+            byte[] buffer = new byte[1024];
+            FileInputStream in = new FileInputStream(xmlfile);
+            tmpOS = new ByteArrayOutputStream();
+            int length;
+            while ((length = in.read(buffer)) != -1) {
+                tmpOS.write(buffer, 0, length);
+            }
+            in.close();
+            bais = new ByteArrayInputStream(tmpOS.toByteArray());
+            return bais;
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: modules/kernel/test/org/apache/axis2/xmlfilter/FilterDemo2.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/FilterDemo2.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/FilterDemo2.java	(revision 0)
@@ -0,0 +1,121 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMNode;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.context.MessageContext;
+
+/**
+ * This demo shows how filter works and how to add your filter to axis2.
+ * PickUpFilter is implementation of Filter interface. This filter pick
+ * up an element which meets condition specified beforehand and make 
+ * reference list to add the element.
+ */
+public class FilterDemo2 {
+
+    public static void main(String[] args) {
+
+        try {
+            if (System.getProperty("basedir") == null)
+                System.setProperty("basedir", "modules/kernel"); // for standalone test
+
+            // create message context
+            MessageContext messageContext = new MessageContext();
+
+            // load axis2.xml
+            String filelocation = System.getProperty("basedir") + "/test-resources/deployment/filter/demo2";
+            String filename = filelocation + "/axis2.xml";
+            ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(filelocation, filename);
+            messageContext.setConfigurationContext(configContext);
+
+            // prepare byte array
+            String xmlfile = System.getProperty("basedir") + "/test-resources/deployment/filter/demo2/sample.xml";
+            ByteArrayInputStream bais = getByteArray(xmlfile);
+
+            // set candidate list to MessageContext
+            messageContext.setProperty(PickUpFilter.PICKUP_FILTER_LIST_KEY, new ArrayList());
+
+            // set pick up target
+            messageContext.setProperty(PickUpFilter.PICKUP_FILTER_TARGET_NAME, "e1");
+
+            // create XML StAX parser
+            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(bais);
+
+            // set filter
+            xmlReader = messageContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlReader, messageContext);
+
+            // create Builder. If xmlReader is implementation of BuilderAwareReader, builder is set to the xmlReader
+            StAXOMBuilder builder = new StAXOMBuilder(xmlReader);
+
+            OMElement omElem = builder.getDocumentElement();
+            omElem.build();
+
+            List candidateList = (List) messageContext.getProperty(PickUpFilter.PICKUP_FILTER_LIST_KEY);
+            Iterator ite = candidateList.iterator();
+            while (ite.hasNext()) {
+                OMNode node = (OMNode) ite.next();
+                System.out.println(node);
+            }
+
+        } catch (XMLStreamException e) {
+            e.printStackTrace();
+        } catch (AxisFault e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static ByteArrayInputStream getByteArray(String xmlfile) {
+        try {
+            ByteArrayInputStream bais;
+            ByteArrayOutputStream tmpOS;
+
+            byte[] buffer = new byte[1024];
+            FileInputStream in = new FileInputStream(xmlfile);
+            tmpOS = new ByteArrayOutputStream();
+            int length;
+            while ((length = in.read(buffer)) != -1) {
+                tmpOS.write(buffer, 0, length);
+            }
+            in.close();
+            bais = new ByteArrayInputStream(tmpOS.toByteArray());
+            return bais;
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: modules/kernel/test/org/apache/axis2/xmlfilter/FilterRegistryTest.java
===================================================================
--- modules/kernel/test/org/apache/axis2/xmlfilter/FilterRegistryTest.java	(revision 0)
+++ modules/kernel/test/org/apache/axis2/xmlfilter/FilterRegistryTest.java	(revision 0)
@@ -0,0 +1,203 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.util.StreamReaderDelegate;
+
+import junit.framework.TestCase;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.impl.builder.BuilderAwareReader;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.FilterDescription;
+import org.apache.axis2.description.Parameter;
+
+/**
+ * This unit test is for filter and filter frame work.
+ * This test includes all of unit tests related filter.
+ */
+public class FilterRegistryTest extends TestCase {
+
+    XMLStreamReader reader;
+    MessageContext messageContext;
+
+    String className1 = "org.apache.axis2.xmlfilter.TestFilterImpl1";
+    String className2 = "org.apache.axis2.xmlfilter.TestFilterImpl2";
+
+    public FilterRegistryTest(String arg0) {
+        super(arg0);
+    }
+
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        if (System.getProperty("basedir") == null)
+            System.setProperty("basedir", "modules/kernel"); // for standalone test
+
+        String xmlfile = System.getProperty("basedir") + "/test-resources/deployment/filter/test/test.xml";
+        ByteArrayInputStream bais = getByteArray(xmlfile);
+        reader = StAXUtils.createXMLStreamReader(bais);
+
+        String filelocation = System.getProperty("basedir") + "/test-resources/deployment/filter/test";
+        String filename = filelocation + "/axis2.xml";
+
+        messageContext = new MessageContext();
+        ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(filelocation, filename);
+        messageContext.setConfigurationContext(configContext);
+
+    }
+
+    public void testRegisterFilterClassLoaderString() {
+        ClassLoader classloader = Thread.currentThread().getContextClassLoader();
+
+        FilterRegistry filterRegistry = new FilterRegistry();
+        filterRegistry.registerFilter(classloader, className1);
+        filterRegistry.registerFilter(classloader, className2);
+
+        checkRegisteredFilter(className1, filterRegistry, 0);
+        checkRegisteredFilter(className2, filterRegistry, 1);
+        
+        // filters should be inserted as  [StAXBuilder] -> [TestFilterImpl1] -> [TestFilterImpl2] -> [XMLStreamReader]
+        // registeredFilter should be sotred as ArrayList{ [filter1], [filter2] }  
+    }
+
+    public void testRegisterFilterArrayList() {
+        FilterRegistry filterRegistry = new FilterRegistry();
+        ArrayList filterOrder = messageContext.getConfigurationContext().getAxisConfiguration().getFilterOrder();
+
+        filterRegistry.registerFilter(filterOrder);
+
+        checkRegisteredFilter(className1, filterRegistry, 0);
+        checkRegisteredFilter(className2, filterRegistry, 1);
+    }
+
+    public void testEnableFilter() {
+        // [StAXBuilder] -> [TestFilterImpl1] -> [TestFilterImpl2] -> [XMLStreamReader]
+        XMLStreamReader readerA, readerB, readerC;
+        StreamReaderDelegate delegate;
+
+        FilterRegistry filterRegistry = messageContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry();
+        readerA = filterRegistry.enableFilter(reader, messageContext);
+
+        delegate = (StreamReaderDelegate) readerA;
+        readerB = delegate.getParent();
+
+        delegate = (StreamReaderDelegate) readerB;
+        readerC = delegate.getParent();
+
+        assertTrue(readerA instanceof TestFilterImpl1);
+        assertTrue(readerB instanceof TestFilterImpl2);
+        assertEquals(reader, readerC);
+    }
+
+    public void testFilterDescription() {
+        FilterDescription filterDescription;
+        ArrayList filterOrder = messageContext.getConfigurationContext().getAxisConfiguration().getFilterOrder();
+
+        filterDescription = (FilterDescription) filterOrder.get(0);
+        assertEquals(filterDescription.getClassname(), className1);
+
+        filterDescription = (FilterDescription) filterOrder.get(1);
+        assertEquals(filterDescription.getClassname(), className2);
+
+        // parameter
+        Parameter param = filterDescription.getParameter("default_length");
+        assertNotNull(param);
+        assertEquals("1024", param.getValue());
+
+    }
+
+    public void testScenario() {
+        XMLStreamReader readerA, readerB;
+        StreamReaderDelegate delegate;
+
+        // set filter
+        readerA = messageContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(reader, messageContext);
+
+        // create Builder.
+        StAXOMBuilder builder = new StAXOMBuilder(readerA);
+
+        TestFilterImpl1 filter = (TestFilterImpl1) readerA;
+
+        // check that messagecontext is set by init(reader, messageContext)
+        assertTrue(readerA instanceof Filter);
+        assertEquals(messageContext, filter.context);
+
+        // check that builder is set by setBuilder of BuilderAwareReader in StAXBuilder 
+        assertTrue(readerA instanceof BuilderAwareReader);
+        assertEquals(builder, filter.builder);
+
+        // check that parameter of FilterDescription can be read in init(reader, messageContext);
+        delegate = (StreamReaderDelegate) readerA;
+        readerB = delegate.getParent();
+        assertTrue(readerB instanceof TestFilterImpl2);
+        TestFilterImpl2 testFilterImpl2 = (TestFilterImpl2) readerB;
+        assertEquals(testFilterImpl2.defaultLength, "1024");
+        
+        // get OM Document
+        OMElement elem = builder.getDocumentElement();
+
+        assertEquals("abcd", elem.getText());
+    }
+
+    /*
+     * The following methods are not for unit test.
+     */
+
+    private void checkRegisteredFilter(String className, FilterRegistry filterRegistry, int i) {
+        assertTrue(filterRegistry.enable);
+        assertNotNull(filterRegistry.registeredFilter);
+
+        Class cls = (Class) filterRegistry.registeredFilter.get(i);
+        assertEquals(className, cls.getName());
+    }
+
+    private static ByteArrayInputStream getByteArray(String xmlfile) {
+        try {
+            ByteArrayInputStream bais;
+            ByteArrayOutputStream tmpOS;
+
+            byte[] buffer = new byte[1024];
+            FileInputStream in = new FileInputStream(xmlfile);
+            tmpOS = new ByteArrayOutputStream();
+            int length;
+            while ((length = in.read(buffer)) != -1) {
+                tmpOS.write(buffer, 0, length);
+            }
+            in.close();
+            bais = new ByteArrayInputStream(tmpOS.toByteArray());
+            return bais;
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: modules/kernel/src/org/apache/axis2/deployment/AxisConfigBuilder.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.axis2.transport.TransportSender;
 import org.apache.axis2.util.TargetResolver;
 import org.apache.axis2.util.Loader;
+import org.apache.axis2.xmlfilter.FilterRegistry;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -91,7 +92,12 @@
             Iterator trs_Reivers = config_element.getChildrenWithName(new QName(TAG_TRANSPORT_RECEIVER));
 
             processTransportReceivers(trs_Reivers);
-
+            
+            // Processing filter order
+            Iterator filterOrder_ite = config_element.getChildrenWithName(new QName(TAG_FILTER_ORDER));
+            
+            processFilterOrder(filterOrder_ite);
+            
             // Process Observers
             Iterator obs_ittr = config_element.getChildrenWithName(new QName(TAG_LISTENER));
 
@@ -424,4 +430,52 @@
         Class phaseClass = Loader.loadClass(axisConfig.getSystemClassLoader(), className);
         return (Phase) phaseClass.newInstance();
     }
+    
+    /*
+     * <filterOrder>
+     *     <filter name="" class="" />
+     *     <filter name="" class="">
+     *         <parameter name="" locked="">xxx</parameter>
+     *     </filter>
+     * </filterOrder>
+     */
+    private void processFilterOrder(Iterator filterOrder_ite) throws DeploymentException {
+        while (filterOrder_ite.hasNext()) {
+            
+            // create filter description
+            OMElement filterOrderElem = (OMElement) filterOrder_ite.next();
+            Iterator filter_ite = filterOrderElem.getChildrenWithName(new QName(TAG_FILTER));
+            while(filter_ite.hasNext()) {
+                OMElement filterElem = (OMElement) filter_ite.next();
+
+                // get filter name
+                OMAttribute filterName = filterElem.getAttribute(new QName(ATTRIBUTE_NAME));
+                if(filterName == null)
+                    continue;
+                
+                // get filter class name
+                OMAttribute filterClassName = filterElem.getAttribute(new QName(TAG_CLASS_NAME));
+                if(filterClassName == null)
+                    continue;
+                
+                String name = filterName.getAttributeValue();
+                String className = filterClassName.getAttributeValue();
+                FilterDescription filterDescription = new FilterDescription(new QName(name));
+                filterDescription.setClassname(className);
+                
+                try {
+                    Iterator itr = filterElem.getChildrenWithName(new QName(TAG_PARAMETER));
+                    processParameters(itr, filterDescription, axisConfig);
+                    axisConfig.addFilterDescription(filterDescription);
+                } catch (AxisFault axisFault) {
+                    throw new DeploymentException(axisFault);
+                }
+            }
+        }
+        
+        // register filter
+        FilterRegistry filterRegistry = axisConfig.getFilterRegistry();
+        ArrayList filterOrder = axisConfig.getFilterOrder();
+        filterRegistry.registerFilter(filterOrder);
+    }
 }
Index: modules/kernel/src/org/apache/axis2/deployment/DeploymentConstants.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/DeploymentConstants.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/deployment/DeploymentConstants.java	(working copy)
@@ -48,6 +48,8 @@
     String TAG_TARGET_RESOLVER = "targetResolver";
     String TAG_TRANSPORT_SENDER = "transportSender";
     String TAG_TRANSPORT_RECEIVER = "transportReceiver";
+    String TAG_FILTER_ORDER = "filterOrder";
+    String TAG_FILTER = "filter";
     String TAG_SERVICE_GROUP = "serviceGroup";
     String TAG_SERVICE = "service";
     String TAG_REFERENCE = "ref";
Index: modules/kernel/src/org/apache/axis2/description/FilterDescription.java
===================================================================
--- modules/kernel/src/org/apache/axis2/description/FilterDescription.java	(revision 0)
+++ modules/kernel/src/org/apache/axis2/description/FilterDescription.java	(revision 0)
@@ -0,0 +1,57 @@
+package org.apache.axis2.description;
+
+import java.util.ArrayList;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.AxisFault;
+
+public class FilterDescription implements ParameterInclude {
+    
+    protected QName name;
+    protected String classname;
+    protected final ParameterInclude paramInclude;
+
+    public FilterDescription(QName name) {
+        paramInclude = new ParameterIncludeImpl();
+        this.name = name;
+    }
+    
+    public QName getName() {
+        return name;
+    }
+
+    public String getClassname() {
+        return classname;
+    }
+
+    public void setClassname(String classname) {
+        this.classname = classname;
+    }
+
+    public void addParameter(Parameter param) throws AxisFault {
+        paramInclude.addParameter(param);
+    }
+
+    public void removeParameter(Parameter param) throws AxisFault {
+        paramInclude.removeParameter(param);
+    }
+
+    public void deserializeParameters(OMElement parameterElement) throws AxisFault {
+        this.paramInclude.deserializeParameters(parameterElement);
+    }
+
+    public Parameter getParameter(String name) {
+        return paramInclude.getParameter(name);
+    }
+
+    public ArrayList getParameters() {
+        return paramInclude.getParameters();
+    }
+
+    public boolean isParameterLocked(String parameterName) {
+        return paramInclude.isParameterLocked(parameterName);
+    }
+
+}
Index: modules/kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(working copy)
@@ -247,6 +247,7 @@
                         }
 
                         // it is SOAP 1.2
+                        xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                         builder =
                                 new StAXSOAPModelBuilder(xmlreader,
                                                          SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
@@ -269,12 +270,14 @@
 
                                 SOAPFactory soapFactory = new SOAP11Factory();
 
+                                xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                                 builder = new StAXOMBuilder(xmlreader);
                                 builder.setOMBuilderFactory(soapFactory);
                                 envelope = soapFactory.getDefaultEnvelope();
                                 envelope.getBody().addChild(builder.getDocumentElement());
                             }
                         } else {
+                            xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                             builder = new StAXSOAPModelBuilder(
                                     xmlreader, SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                             envelope = (SOAPEnvelope) builder.getDocumentElement();
@@ -290,6 +293,7 @@
                 // Set the encoding scheme in the message context
                 msgContext.setProperty(Constants.Configuration.CHARACTER_SET_ENCODING,
                                        MessageContext.DEFAULT_CHAR_SET_ENCODING);
+                xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                 builder = new StAXSOAPModelBuilder(
                         xmlreader, SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                 envelope = (SOAPEnvelope) builder.getDocumentElement();
Index: modules/kernel/src/org/apache/axis2/transport/http/util/RESTUtil.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/http/util/RESTUtil.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/http/util/RESTUtil.java	(working copy)
@@ -198,7 +198,9 @@
                     msgCtxt.setProperty(Constants.Configuration.CHARACTER_SET_ENCODING, charSetEnc);
                 }
 
-                OMNodeEx documentElement = (OMNodeEx)new StAXOMBuilder(xmlreader).getDocumentElement();
+                xmlreader = msgCtxt.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgCtxt);
+                StAXOMBuilder builder = new StAXOMBuilder(xmlreader);
+                OMNodeEx documentElement = (OMNodeEx) builder.getDocumentElement();
                 documentElement.setParent(null);
                 body.addChild(documentElement);
 
Index: modules/kernel/src/org/apache/axis2/transport/mail/SimpleMailListener.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/mail/SimpleMailListener.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/mail/SimpleMailListener.java	(working copy)
@@ -308,6 +308,7 @@
                 return null;
             }
 
+            reader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(reader, msgContext);
             StAXBuilder builder = new StAXSOAPModelBuilder(reader, soapNamespaceURI);
             SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();
             msgContext.setEnvelope(envelope);
Index: modules/kernel/src/org/apache/axis2/transport/mail/server/MailSorter.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/mail/server/MailSorter.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/mail/server/MailSorter.java	(working copy)
@@ -126,6 +126,7 @@
                 soapNamespaceURI = SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI;
             }
 
+            reader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(reader, msgContext);
             StAXBuilder builder = new StAXSOAPModelBuilder(reader, soapNamespaceURI);
             SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();
 
Index: modules/kernel/src/org/apache/axis2/transport/tcp/TCPWorker.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/tcp/TCPWorker.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/tcp/TCPWorker.java	(working copy)
@@ -82,6 +82,7 @@
                 // create the SOAP Envelope
                 Reader in = new InputStreamReader(socket.getInputStream());
                 XMLStreamReader xmlreader = StAXUtils.createXMLStreamReader(in);
+                xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                 StAXBuilder builder = new StAXSOAPModelBuilder(xmlreader, null);
                 SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();
 
Index: modules/kernel/src/org/apache/axis2/transport/jms/JMSUtils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/jms/JMSUtils.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/jms/JMSUtils.java	(working copy)
@@ -331,6 +331,9 @@
                     msgContext.setProperty(Constants.Configuration.CHARACTER_SET_ENCODING, charSetEnc);
                 }
 
+
+                xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
+
                 if (contentType.indexOf(SOAP12Constants.SOAP_12_CONTENT_TYPE) > -1) {
                     // it is SOAP 1.2
                     builder = new StAXSOAPModelBuilder(xmlreader,
@@ -352,6 +355,7 @@
             // Set the encoding scheme in the message context
             msgContext.setProperty(Constants.Configuration.CHARACTER_SET_ENCODING,
                                    MessageContext.DEFAULT_CHAR_SET_ENCODING);
+            xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
             builder = new StAXOMBuilder(xmlreader);
             SOAPFactory soapFactory = new SOAP11Factory();
             builder.setOMBuilderFactory(soapFactory);
Index: modules/kernel/src/org/apache/axis2/transport/local/LocalTransportReceiver.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/local/LocalTransportReceiver.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/local/LocalTransportReceiver.java	(working copy)
@@ -73,6 +73,7 @@
 
             XMLStreamReader reader = StAXUtils.createXMLStreamReader(
                     new BufferedReader(new InputStreamReader(in)));
+            reader = msgCtx.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(reader, msgCtx);
             StAXBuilder builder = new StAXSOAPModelBuilder(reader, null);
             SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();
 
Index: modules/kernel/src/org/apache/axis2/transport/TransportUtils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/TransportUtils.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/transport/TransportUtils.java	(working copy)
@@ -103,6 +103,7 @@
                         StAXUtils.createXMLStreamReader(inStream, charSetEnc);
                 SOAPFactory soapFactory = new SOAP11Factory();
 
+                xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                 builder = new StAXOMBuilder(xmlreader);
                 builder.setOMBuilderFactory(soapFactory);
                 envelope = soapFactory.getDefaultEnvelope();
@@ -117,6 +118,7 @@
                 XMLStreamReader xmlreader =
                         StAXUtils.createXMLStreamReader(inStream, charSetEnc);
 
+                xmlreader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(xmlreader, msgContext);
                 builder = new StAXSOAPModelBuilder(xmlreader, soapNamespaceURI);
                 envelope = (SOAPEnvelope) builder.getDocumentElement();
             }
@@ -267,9 +269,11 @@
             /*
             * Creates the MTOM specific MTOMStAXSOAPModelBuilder
             */             
+            streamReader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(streamReader, msgContext);
             builder = new MTOMStAXSOAPModelBuilder(streamReader, attachments, soapEnvelopeNamespaceURI);
         	 
         } else if (attachments.getAttachmentSpecType().equals(MTOMConstants.SWA_TYPE)& null!=soapEnvelopeNamespaceURI) {
+            streamReader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(streamReader, msgContext);            
             builder = new StAXSOAPModelBuilder(streamReader,
                     soapEnvelopeNamespaceURI);
         }
@@ -278,10 +282,12 @@
         else
         {
             if (attachments.getAttachmentSpecType().equals(MTOMConstants.MTOM_TYPE)) {            
+                streamReader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(streamReader, msgContext);
                 XOPAwareStAXOMBuilder stAXOMBuilder = new XOPAwareStAXOMBuilder(streamReader,attachments);
                 builder= stAXOMBuilder;
             	 
             } else if (attachments.getAttachmentSpecType().equals(MTOMConstants.SWA_TYPE)) {
+                streamReader = msgContext.getConfigurationContext().getAxisConfiguration().getFilterRegistry().enableFilter(streamReader, msgContext);
                 builder = new StAXOMBuilder(streamReader);
             }
         }
Index: modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 467118)
+++ modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.axis2.phaseresolver.PhaseResolver;
 import org.apache.axis2.util.TargetResolver;
 import org.apache.axis2.util.Utils;
+import org.apache.axis2.xmlfilter.FilterRegistry;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.ws.java2wsdl.Java2WSDLConstants;
@@ -54,6 +55,9 @@
     private final HashMap transportsIn = new HashMap();
 
     private final HashMap transportsOut = new HashMap();
+    
+    private final ArrayList filterOrder = new ArrayList();
+    private final FilterRegistry filterRegistry = new FilterRegistry();
 
     private final HashMap policySupportedModules = new HashMap();
 
@@ -879,4 +883,31 @@
     public boolean isAssertionLocal(QName name) {
         return this.localPolicyAssertions.contains(name);
     }
+    
+    public void addFilterDescription(FilterDescription filterDesc) throws AxisFault {
+        filterOrder.add(filterDesc);
+    }
+    
+    public ArrayList getFilterOrder() {
+        return filterOrder;
+    }
+    
+    public FilterRegistry getFilterRegistry() {
+        return filterRegistry;
+    }
+    
+    public FilterDescription getFilterDescription(String classname) {
+        if(classname==null)
+            return null;
+        FilterDescription ret = null;
+        Iterator ite = filterOrder.iterator();
+        while(ite.hasNext()) {
+            FilterDescription filterDescription = (FilterDescription) ite.next();
+            if(classname.equals(filterDescription.getClassname())){
+                ret = filterDescription;
+                break;
+            }
+        }
+        return ret;
+    }
 }
Index: modules/kernel/src/org/apache/axis2/xmlfilter/Filter.java
===================================================================
--- modules/kernel/src/org/apache/axis2/xmlfilter/Filter.java	(revision 0)
+++ modules/kernel/src/org/apache/axis2/xmlfilter/Filter.java	(revision 0)
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import javax.xml.stream.XMLStreamReader;
+
+import org.apache.axis2.context.MessageContext;
+
+/**
+ * Filter has XMLStreamreader interface, but it is not
+ * implementation of XMLStreamReader. It does not actually
+ * create StAX event. Filter can transform message, extract
+ * data or do some process before StAX event reaches
+ * StAXBuilder. In other words, Filter is inserted between
+ * XMLStreamReader and StAXBuilder. Filter gets StAX event
+ * from XMLStreamReader and do some process here, then
+ * passes it to StAXBuilder. We also add two or more filters
+ * like a chain.
+ */
+public interface Filter extends XMLStreamReader {
+
+    /**
+     * Called to initialize filter. Returns top filter of this filter chain.
+     * 
+     * @param reader is wrapped by this filter. 
+     * @param context is used for an exchange of data with other component.
+     * @return top filter of this filter chain. 
+     */
+    public XMLStreamReader init(XMLStreamReader reader, MessageContext context);
+
+}
Index: modules/kernel/src/org/apache/axis2/xmlfilter/FilterRegistry.java
===================================================================
--- modules/kernel/src/org/apache/axis2/xmlfilter/FilterRegistry.java	(revision 0)
+++ modules/kernel/src/org/apache/axis2/xmlfilter/FilterRegistry.java	(revision 0)
@@ -0,0 +1,120 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.xmlfilter;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import javax.xml.stream.XMLStreamReader;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.FilterDescription;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * FilterRegistry has Class objects of filter. When enableFilter
+ * is invoked, filter is created and inserted to filter chain by
+ * the registered order if one or more filter is registered.
+ */
+public class FilterRegistry {
+
+    private static final Log log = LogFactory.getLog(FilterRegistry.class);
+    private static boolean doDebug = log.isDebugEnabled();
+
+    boolean enable = false;
+    ArrayList registeredFilter;
+
+    /**
+     * Add Class object of filter to registered filter array.  
+     * 
+     * @param classloader Class object is loaded from this class loader
+     * @param className of filter implementation  
+     */
+    public void registerFilter(ClassLoader classloader, String className) {
+        try {
+            Class cls = classloader.loadClass(className);
+            if (cls != null) {
+                if (registeredFilter == null)
+                    registeredFilter = new ArrayList();
+                registeredFilter.add(cls);
+                enable = true;
+                if (doDebug) log.debug("FilterRegistry.registerFilter() success to register filter : " + className);
+            }
+        } catch (ClassNotFoundException e) {
+            if (doDebug) log.debug("FilterRegistry.registerFilter(), failed to get Class object of classname=" + className);
+            // class not found
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Add all Class objects of filter in this list to registered filter array. 
+     * 
+     * @param filterOrder list of FilterDescryption.
+     */
+    public void registerFilter(ArrayList filterOrder) {
+        ClassLoader classloader = null;
+
+        classloader = Thread.currentThread().getContextClassLoader();
+        Iterator ite = filterOrder.iterator();
+        while (ite.hasNext()) {
+            FilterDescription filterDesc = (FilterDescription) ite.next();
+            registerFilter(classloader, filterDesc.getClassname());
+        }
+    }
+
+    /**
+     * Create and insert all registered filters by the registered order. Returnes top filter of this filter chain. 
+     * 
+     * @param reader is wrapped by this filter. 
+     * @param context is used for an exchange of data with other component.
+     * @return top filter of this filter chain. 
+     */
+    private XMLStreamReader insertFilter(XMLStreamReader reader, MessageContext context) {
+        XMLStreamReader ret = reader;
+        
+        int size = registeredFilter.size();
+        for (int i = size - 1; i >= 0; i--) {
+            Class cls = (Class) registeredFilter.get(i);
+            try {
+                Filter filter = (Filter) cls.newInstance();
+                ret = filter.init(ret, context);
+                if (doDebug) log.debug("FilterRegistry.insertFilter() : " + filter);
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            } catch (InstantiationException e) {
+                e.printStackTrace();
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * Create and insert all registered filters by the registered order. Returnes top filter of this filter chain.
+     * 
+     * @param reader is wrapped by this filter. 
+     * @param context is used for an exchange of data with other component.
+     * @return top filter of this filter chain. 
+     */
+    public XMLStreamReader enableFilter(XMLStreamReader reader, MessageContext context) {
+        if (enable) {
+            return insertFilter(reader, context);
+        } else
+            return reader;
+    }
+}
Index: modules/kernel/test-resources/deployment/filter/test/axis2.xml
===================================================================
--- modules/kernel/test-resources/deployment/filter/test/axis2.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/filter/test/axis2.xml	(revision 0)
@@ -0,0 +1,282 @@
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment" locked="false">true</parameter>
+    <parameter name="hotupdate" locked="false">false</parameter>
+    <parameter name="enableMTOM" locked="false">false</parameter>
+    <parameter name="enableSwA" locked="false">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments" locked="false">true</parameter>
+    <parameter name="attachmentDIR" locked="false"></parameter>
+    <parameter name="sizeThreshold" locked="false">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in seconds-->
+    <parameter name="ConfigContextTimeoutInterval" locked="false">30</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behaviour.-->
+    <parameter name="sendStacktraceDetailsWithFaults" locked="false">true</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the expcetion-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set then, Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason" locked="false">false</parameter>
+
+    <parameter name="userName" locked="false">admin</parameter>
+    <parameter name="password" locked="false">axis2</parameter>
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot" locked="false">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distingiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <!--<parameter name="servicePath" locked="false">services</parameter>-->
+    <!--<parameter name="restPath" locked="false">rest</parameter>-->
+
+
+    <!--Set the flag to true if you want to enable transport level session mangment-->
+    <parameter name="manageTransportSession" locked="false">false</parameter>
+
+    <!--Following two parameters will be used to handle REST in Axis2. The default settings will make Axis2 to have two-->
+    <!--different endpoints, one for REST (AxisRESTServlet) one for SOAP message handling (AxisServlet). But following-->
+    <!--parameters help to tweak the message handling of two main servlets. -->
+
+    <!-- If the enableRESTInAxis2MainServlet is true, then Axis2MainServlet will handle both SOAP and REST messages -->
+    <parameter name="enableRESTInAxis2MainServlet" locked="true">false</parameter>
+
+    <!-- Following parameter will completely disable REST handling in both the servlets-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- This will disable the separate servlet we have for REST handling. -->
+    <parameter name="disableSeparateEndpointForREST" locked="true">false</parameter>
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl" locked="false">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL" locked="false">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the Deafult Message Receiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovride this for particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port" locked="false">6060</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills us         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname"                  locked="false">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer"              locked="false">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout"            locked="false">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay"         locked="false">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize" locked="false">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize"  locked="false">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime"       locked="false">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit"   locked="false">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+    
+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)
+    <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">TopicConnectionFactory</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
+        </parameter>
+
+        <parameter name="default" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
+        </parameter>
+    </transportReceiver>-->
+
+    <!--Uncomment if you want to have SMTP transport support-->
+    <!--<transportReceiver name="mail" class="org.apache.axis2.transport.mail.SimpleMailListener">-->
+    <!--<parameter name="transport.mail.pop3.host" locked="false">127.0.0.1</parameter>-->
+    <!--<parameter name="transport.mail.pop3.user" locked="false">axis2</parameter>-->
+    <!--<parameter name="transport.mail.pop3.password" locked="false">axis2</parameter>-->
+    <!--<parameter name="transport.mail.pop3.port" locked="false">110</parameter>-->
+    <!--<parameter name="transport.mail.replyToAddress" locked="false">axis2@127.0.0.1</parameter>-->
+    <!--</transportReceiver>-->
+
+    <transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port" locked="false">6060</parameter>
+        <!--If you want to give your own host address for EPR generation-->
+        <!--uncommet following paramter , and set as you required.-->
+        <!--<parameter name="hostname" locked="false">tcp://myApp.com/ws</parameter>-->
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/>
+    <transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
+    </transportSender>
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
+    </transportSender>
+    <transportSender name="jms"
+                     class="org.apache.axis2.transport.jms.JMSSender"/>
+
+    <!-- Uncomment this one with the appropriate papameters to enable the SMTP transport Receiver
+   <transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+       <parameter name="transport.mail.smtp.host" locked="false">127.0.0.1</parameter>
+       <parameter name="transport.mail.smtp.user" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.password" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.port" locked="false">25</parameter>
+   </transportSender>
+   -->
+
+    <!-- ================================================= -->
+    <!-- StAX filter                                       -->
+    <!-- ================================================= -->
+    <filterOrder>
+        <filter name="TestFilterImpl1" class="org.apache.axis2.xmlfilter.TestFilterImpl1" />
+        <filter name="TestFilterImpl2" class="org.apache.axis2.xmlfilter.TestFilterImpl2">
+            <parameter name="default_length" locked="false">1024</parameter>
+        </filter>
+    </filterOrder>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <!-- <module ref="addressing"/> -->
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara" locked="false">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+        </phase>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="PostDispatch"/>
+            </handler>
+        </phase>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+</axisconfig>
+
Index: modules/kernel/test-resources/deployment/filter/test/test.xml
===================================================================
--- modules/kernel/test-resources/deployment/filter/test/test.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/filter/test/test.xml	(revision 0)
@@ -0,0 +1 @@
+<a>abcd</a>
Index: modules/kernel/test-resources/deployment/filter/demo1/soapsample.xml
===================================================================
--- modules/kernel/test-resources/deployment/filter/demo1/soapsample.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/filter/demo1/soapsample.xml	(revision 0)
@@ -0,0 +1,23 @@
+<soapenv:Envelope
+xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
+xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
+xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+  <soapenv:Header>
+    <wsse:Security soapenv:mustUnderstand="1" soapenv:actor="anyone" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
+      <securityheader1 />
+    </wsse:Security>
+    <wsse:Security soapenv:actor="webservice1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
+      <securityheader2 />
+    </wsse:Security>
+    <wsse:Security soapenv:actor="webservice2" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
+      <securityheader3 />
+    </wsse:Security>
+    <wsse:Security soapenv:actor="webservice3" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
+      <securityheader4 />
+    </wsse:Security>
+  </soapenv:Header>
+  <soapenv:Body>
+    <test />
+  </soapenv:Body>
+</soapenv:Envelope>

\ No newline at end of file
Index: modules/kernel/test-resources/deployment/filter/demo1/axis2.xml
===================================================================
--- modules/kernel/test-resources/deployment/filter/demo1/axis2.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/filter/demo1/axis2.xml	(revision 0)
@@ -0,0 +1,279 @@
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment" locked="false">true</parameter>
+    <parameter name="hotupdate" locked="false">false</parameter>
+    <parameter name="enableMTOM" locked="false">false</parameter>
+    <parameter name="enableSwA" locked="false">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments" locked="false">true</parameter>
+    <parameter name="attachmentDIR" locked="false"></parameter>
+    <parameter name="sizeThreshold" locked="false">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in seconds-->
+    <parameter name="ConfigContextTimeoutInterval" locked="false">30</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behaviour.-->
+    <parameter name="sendStacktraceDetailsWithFaults" locked="false">true</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the expcetion-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set then, Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason" locked="false">false</parameter>
+
+    <parameter name="userName" locked="false">admin</parameter>
+    <parameter name="password" locked="false">axis2</parameter>
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot" locked="false">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distingiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <!--<parameter name="servicePath" locked="false">services</parameter>-->
+    <!--<parameter name="restPath" locked="false">rest</parameter>-->
+
+
+    <!--Set the flag to true if you want to enable transport level session mangment-->
+    <parameter name="manageTransportSession" locked="false">false</parameter>
+
+    <!--Following two parameters will be used to handle REST in Axis2. The default settings will make Axis2 to have two-->
+    <!--different endpoints, one for REST (AxisRESTServlet) one for SOAP message handling (AxisServlet). But following-->
+    <!--parameters help to tweak the message handling of two main servlets. -->
+
+    <!-- If the enableRESTInAxis2MainServlet is true, then Axis2MainServlet will handle both SOAP and REST messages -->
+    <parameter name="enableRESTInAxis2MainServlet" locked="true">false</parameter>
+
+    <!-- Following parameter will completely disable REST handling in both the servlets-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- This will disable the separate servlet we have for REST handling. -->
+    <parameter name="disableSeparateEndpointForREST" locked="true">false</parameter>
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl" locked="false">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL" locked="false">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the Deafult Message Receiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovride this for particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port" locked="false">6060</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills us         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname"                  locked="false">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer"              locked="false">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout"            locked="false">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay"         locked="false">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize" locked="false">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize"  locked="false">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime"       locked="false">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit"   locked="false">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+    
+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)
+    <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">TopicConnectionFactory</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
+        </parameter>
+
+        <parameter name="default" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
+        </parameter>
+    </transportReceiver>-->
+
+    <!--Uncomment if you want to have SMTP transport support-->
+    <!--<transportReceiver name="mail" class="org.apache.axis2.transport.mail.SimpleMailListener">-->
+    <!--<parameter name="transport.mail.pop3.host" locked="false">127.0.0.1</parameter>-->
+    <!--<parameter name="transport.mail.pop3.user" locked="false">axis2</parameter>-->
+    <!--<parameter name="transport.mail.pop3.password" locked="false">axis2</parameter>-->
+    <!--<parameter name="transport.mail.pop3.port" locked="false">110</parameter>-->
+    <!--<parameter name="transport.mail.replyToAddress" locked="false">axis2@127.0.0.1</parameter>-->
+    <!--</transportReceiver>-->
+
+    <transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port" locked="false">6060</parameter>
+        <!--If you want to give your own host address for EPR generation-->
+        <!--uncommet following paramter , and set as you required.-->
+        <!--<parameter name="hostname" locked="false">tcp://myApp.com/ws</parameter>-->
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/>
+    <transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
+    </transportSender>
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
+    </transportSender>
+    <transportSender name="jms"
+                     class="org.apache.axis2.transport.jms.JMSSender"/>
+
+    <!-- Uncomment this one with the appropriate papameters to enable the SMTP transport Receiver
+   <transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+       <parameter name="transport.mail.smtp.host" locked="false">127.0.0.1</parameter>
+       <parameter name="transport.mail.smtp.user" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.password" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.port" locked="false">25</parameter>
+   </transportSender>
+   -->
+
+    <!-- ================================================= -->
+    <!-- StAX filter                                       -->
+    <!-- ================================================= -->
+    <filterOrder>
+        <filter name="TestFilter1" class="org.apache.axis2.xmlfilter.ExtractMyActorSOAPHeaderFilter" />
+    </filterOrder>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <!-- <module ref="addressing"/> -->
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara" locked="false">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+        </phase>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="PostDispatch"/>
+            </handler>
+        </phase>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+</axisconfig>
+
Index: modules/kernel/test-resources/deployment/filter/demo2/sample.xml
===================================================================
--- modules/kernel/test-resources/deployment/filter/demo2/sample.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/filter/demo2/sample.xml	(revision 0)
@@ -0,0 +1,15 @@
+<doc> 
+   <e1></e1> 
+   <e2></e2> 
+   <e3 id="elem3" name="elem3"></e3> 
+   <e1 id="elem4" name="elem4"></e1> 
+   <e5 xmlns="http://example.org" xmlns:a="http://www.w3.org" xmlns:b="http://www.ietf.org" attr="I'm" attr2="all" b:attr="sorted" a:attr="out"></e5> 
+   <e6 xmlns:a="http://www.w3.org"> 
+      <e7 xmlns="http://www.ietf.org"> 
+         <e1 xmlns=""> 
+            <e9 xmlns:a="http://www.ietf.org" attr="default"></e9> 
+         </e1> 
+      </e7> 
+      <e1/>
+   </e6> 
+</doc>

\ No newline at end of file
Index: modules/kernel/test-resources/deployment/filter/demo2/axis2.xml
===================================================================
--- modules/kernel/test-resources/deployment/filter/demo2/axis2.xml	(revision 0)
+++ modules/kernel/test-resources/deployment/filter/demo2/axis2.xml	(revision 0)
@@ -0,0 +1,281 @@
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment" locked="false">true</parameter>
+    <parameter name="hotupdate" locked="false">false</parameter>
+    <parameter name="enableMTOM" locked="false">false</parameter>
+    <parameter name="enableSwA" locked="false">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments" locked="false">true</parameter>
+    <parameter name="attachmentDIR" locked="false"></parameter>
+    <parameter name="sizeThreshold" locked="false">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in seconds-->
+    <parameter name="ConfigContextTimeoutInterval" locked="false">30</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behaviour.-->
+    <parameter name="sendStacktraceDetailsWithFaults" locked="false">true</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the expcetion-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set then, Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason" locked="false">false</parameter>
+
+    <parameter name="userName" locked="false">admin</parameter>
+    <parameter name="password" locked="false">axis2</parameter>
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot" locked="false">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distingiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <!--<parameter name="servicePath" locked="false">services</parameter>-->
+    <!--<parameter name="restPath" locked="false">rest</parameter>-->
+
+
+    <!--Set the flag to true if you want to enable transport level session mangment-->
+    <parameter name="manageTransportSession" locked="false">false</parameter>
+
+    <!--Following two parameters will be used to handle REST in Axis2. The default settings will make Axis2 to have two-->
+    <!--different endpoints, one for REST (AxisRESTServlet) one for SOAP message handling (AxisServlet). But following-->
+    <!--parameters help to tweak the message handling of two main servlets. -->
+
+    <!-- If the enableRESTInAxis2MainServlet is true, then Axis2MainServlet will handle both SOAP and REST messages -->
+    <parameter name="enableRESTInAxis2MainServlet" locked="true">false</parameter>
+
+    <!-- Following parameter will completely disable REST handling in both the servlets-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- This will disable the separate servlet we have for REST handling. -->
+    <parameter name="disableSeparateEndpointForREST" locked="true">false</parameter>
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl" locked="false">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL" locked="false">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the Deafult Message Receiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovride this for particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port" locked="false">6060</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills us         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname"                  locked="false">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer"              locked="false">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout"            locked="false">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay"         locked="false">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize" locked="false">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize"  locked="false">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime"       locked="false">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit"   locked="false">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+    
+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)
+    <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">TopicConnectionFactory</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
+        </parameter>
+
+        <parameter name="default" locked="false">        	        	
+        	<parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>        	
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
+        </parameter>
+    </transportReceiver>-->
+
+    <!--Uncomment if you want to have SMTP transport support-->
+    <!--<transportReceiver name="mail" class="org.apache.axis2.transport.mail.SimpleMailListener">-->
+    <!--<parameter name="transport.mail.pop3.host" locked="false">127.0.0.1</parameter>-->
+    <!--<parameter name="transport.mail.pop3.user" locked="false">axis2</parameter>-->
+    <!--<parameter name="transport.mail.pop3.password" locked="false">axis2</parameter>-->
+    <!--<parameter name="transport.mail.pop3.port" locked="false">110</parameter>-->
+    <!--<parameter name="transport.mail.replyToAddress" locked="false">axis2@127.0.0.1</parameter>-->
+    <!--</transportReceiver>-->
+
+    <transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port" locked="false">6060</parameter>
+        <!--If you want to give your own host address for EPR generation-->
+        <!--uncommet following paramter , and set as you required.-->
+        <!--<parameter name="hostname" locked="false">tcp://myApp.com/ws</parameter>-->
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/>
+    <transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
+    </transportSender>
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL" locked="false">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding" locked="false">chunked</parameter>
+    </transportSender>
+    <transportSender name="jms"
+                     class="org.apache.axis2.transport.jms.JMSSender"/>
+
+    <!-- Uncomment this one with the appropriate papameters to enable the SMTP transport Receiver
+   <transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+       <parameter name="transport.mail.smtp.host" locked="false">127.0.0.1</parameter>
+       <parameter name="transport.mail.smtp.user" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.password" locked="false">axis2</parameter>
+       <parameter name="transport.mail.smtp.port" locked="false">25</parameter>
+   </transportSender>
+   -->
+
+    <!-- ================================================= -->
+    <!-- StAX filter                                       -->
+    <!-- ================================================= -->
+    <filterOrder>
+        <filter name="PickUpFilter" class="org.apache.axis2.xmlfilter.PickUpFilter">
+            <parameter name="default_length" locked="false">1024</parameter>
+        </filter>
+    </filterOrder>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <!-- <module ref="addressing"/> -->
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara" locked="false">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+        </phase>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.engine.RequestURIBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPActionBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.engine.AddressingBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher">
+                <order phase="Dispatch"/>
+            </handler>
+            <handler name="InstanceDispatcher"
+                     class="org.apache.axis2.engine.InstanceDispatcher">
+                <order phase="PostDispatch"/>
+            </handler>
+        </phase>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+    </phaseOrder>
+</axisconfig>
+
