Index: src/org/apache/axis2/deployment/DeploymentLifeCycleListner.java
===================================================================
--- src/org/apache/axis2/deployment/DeploymentLifeCycleListner.java	(revision 0)
+++ src/org/apache/axis2/deployment/DeploymentLifeCycleListner.java	(revision 0)
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.deployment;
+
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.AxisFault;
+
+/**
+ * this interface is used to inform deployment lifecycle realated events to
+ * listners
+ */
+public interface DeploymentLifeCycleListner {
+
+    /**
+     * calls before creating the configuration context to do any initializing work.
+     * @param axisConfig
+     * @throws AxisFault
+     */
+    public void preDeploy(AxisConfiguration axisConfig) throws AxisFault;
+
+    /**
+     * calls after starting the configuration context to resume any activity.
+     * @param configurationContext
+     * @throws AxisFault
+     */
+    public void postDeploy(ConfigurationContext configurationContext) throws AxisFault;
+
+}
Index: src/org/apache/axis2/context/ConfigurationContextFactory.java
===================================================================
--- src/org/apache/axis2/context/ConfigurationContextFactory.java	(revision 681632)
+++ src/org/apache/axis2/context/ConfigurationContextFactory.java	(working copy)
@@ -21,11 +21,7 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
-import org.apache.axis2.deployment.AxisConfigBuilder;
-import org.apache.axis2.deployment.DeploymentConstants;
-import org.apache.axis2.deployment.DeploymentEngine;
-import org.apache.axis2.deployment.FileSystemConfigurator;
-import org.apache.axis2.deployment.URLBasedAxisConfigurator;
+import org.apache.axis2.deployment.*;
 import org.apache.axis2.deployment.util.Utils;
 import org.apache.axis2.description.AxisModule;
 import org.apache.axis2.description.AxisServiceGroup;
@@ -66,6 +62,27 @@
     public static ConfigurationContext createConfigurationContext(
             AxisConfigurator axisConfigurator) throws AxisFault {
         AxisConfiguration axisConfig = axisConfigurator.getAxisConfiguration();
+        // call to the deployment listners
+        Parameter param = axisConfig.getParameter(Constants.Configuration.DEPLOYMENT_LIFE_CYCLE_LISTNER);
+        DeploymentLifeCycleListner deploymentLifeCycleListner = null;
+        if (param != null){
+            String className = (String) param.getValue();
+            try {
+                deploymentLifeCycleListner = (DeploymentLifeCycleListner) Class.forName(className).newInstance();
+            } catch (InstantiationException e) {
+                log.error("Can not instantiate deployment Listner " + className, e);
+                throw new AxisFault("Can not instantiate deployment Listner " + className);
+            } catch (IllegalAccessException e) {
+                log.error("Illegal Access deployment Listner " + className, e);
+                throw new AxisFault("Illegal Access deployment Listner " + className);
+            } catch (ClassNotFoundException e) {
+                log.error("Class not found deployment Listner " + className, e);
+                throw new AxisFault("Class not found deployment Listner " + className);
+            }
+        }
+        if (deploymentLifeCycleListner != null){
+            deploymentLifeCycleListner.preDeploy(axisConfig);
+        }
         ConfigurationContext configContext = new ConfigurationContext(axisConfig);
 
         if (axisConfig.getClusterManager() != null) {
@@ -86,6 +103,9 @@
         initApplicationScopeServices(configContext);
 
         axisConfig.setStart(true);
+        if (deploymentLifeCycleListner != null){
+            deploymentLifeCycleListner.postDeploy(configContext);
+        }
         return configContext;
     }
 
Index: src/org/apache/axis2/Constants.java
===================================================================
--- src/org/apache/axis2/Constants.java	(revision 681632)
+++ src/org/apache/axis2/Constants.java	(working copy)
@@ -397,5 +397,11 @@
          */
         public static final String DISABLE_RESPONSE_ACK = "DisableResponseAck";
 
+        /**
+         * This constant is used to add an deployment life cycle listner to Axis2
+         */
+
+        public static final String DEPLOYMENT_LIFE_CYCLE_LISTNER = "deploymentLifeCycleListner";
+
     }
 }
