Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 509631)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -32,7 +32,7 @@
 createDispatchFail1=Dispatch creation failed. The {0} port cannot be found.  Verify that the port has been added to the service.
 createDispatchFail2=Dispatch creation failed. The service cannot find Port data for the {0} port.
 addPortDup=An attempt was made to add the {0} port to the ServiceDelegate. The port already exists.
-addPortErr0=Only the SOAP11HTTP_BINDING and SOAP12HTTP_BINDING ports are supported at this time. The {0} port cannot be added to the ServiceDelegate.
+addPortErr0=Only the SOAP11HTTP_BINDING, SOAP12HTTP_BINDING, SOAP11HTTP_MTOM_BINDING, SOAP12HTTP_MTOM_BINDING and HTTP_BINDING ports are supported at this time. The {0} port cannot be added to the ServiceDelegate.
 # The key addPortErr1 is not currently used
 # addPortErr1=An attempt was made to add the {0} port with the {1} endpoint address, which is not valid, to the ServiceDelegate. This addition is not allowed.
 addPortErr2=An attempt was made to add a port without a name to the ServiceDelegate object. This addition is not allowed.
Index: C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(working copy)
@@ -1251,6 +1251,7 @@
     private boolean validateClientBindingID(String bindingId) {
         boolean isValid = true;
         if (bindingId != null && !(bindingId.equals(SOAPBinding.SOAP11HTTP_BINDING) ||
+                bindingId.equals(javax.xml.ws.http.HTTPBinding.HTTP_BINDING) ||
                 bindingId.equals(SOAPBinding.SOAP12HTTP_BINDING) ||
                 bindingId.equals(SOAPBinding.SOAP11HTTP_MTOM_BINDING) ||
                 bindingId.equals(SOAPBinding.SOAP12HTTP_MTOM_BINDING))) {
Index: C:/workspace/live/axis2/modules/kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java
===================================================================
--- C:/workspace/live/axis2/modules/kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(working copy)
@@ -246,7 +246,11 @@
 						.indexOf(SOAP11Constants.SOAP_11_CONTENT_TYPE) > -1) {
 					soapVersion = VERSION_SOAP11;
 					soapNS = SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI;
-				}
+				} else if (isRESTRequest(contentType)) {
+                    soapVersion = VERSION_SOAP11; 
+                    soapNS = SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI;
+                    msgContext.setDoingREST(true);
+                }
 				if (JavaUtils.indexOfIgnoreCase(contentType,
 						HTTPConstants.HEADER_ACCEPT_MULTIPART_RELATED) > -1) {
 					// It is MIME (MTOM or SwA)
@@ -334,4 +338,11 @@
 
         return enableREST;
     }
+    
+    private static boolean isRESTRequest(String contentType) {
+        return ((contentType == null ||
+                 contentType.indexOf(HTTPConstants.MEDIA_TYPE_APPLICATION_XML) > -1 ||
+                 contentType.indexOf(HTTPConstants.MEDIA_TYPE_X_WWW_FORM) > -1 ||
+                 contentType.indexOf(HTTPConstants.MEDIA_TYPE_MULTIPART_FORM_DATA) > -1));
+    }
 }
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageTests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageTests.java	(revision 510104)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageTests.java	(working copy)
@@ -408,7 +408,7 @@
 		// The JAX-WS layer creates a Message from the OM
 		MessageFactory mf = (MessageFactory)
 			FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.createFrom(omElement);
+		Message m = mf.createFrom(omElement,null);
 		
 		// Check to see if the message is a fault.  The client/server will always call this method.
         // The Message must respond appropriately without doing a conversion.
@@ -464,7 +464,7 @@
 		// The JAX-WS layer creates a Message from the OM
 		MessageFactory mf = (MessageFactory)
 			FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.createFrom(omElement);
+		Message m = mf.createFrom(omElement, null);
 		
 		// Check to see if the message is a fault.  The client/server will always call this method.
         // The Message must respond appropriately without doing a conversion.
@@ -534,7 +534,7 @@
 		// The JAX-WS layer creates a Message from the OM
 		MessageFactory mf = (MessageFactory)
 			FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.createFrom(omElement);
+		Message m = mf.createFrom(omElement, null);
 		
         // Check to see if the message is a fault.  The client/server will always call this method.
         // The Message must respond appropriately without doing a conversion.
@@ -596,7 +596,7 @@
         // The JAX-WS layer creates a Message from the OM
         MessageFactory mf = (MessageFactory)
             FactoryRegistry.getFactory(MessageFactory.class);
-        Message m = mf.createFrom(omElement);
+        Message m = mf.createFrom(omElement, null);
         
         // Check to see if the message is a fault.  The client/server will always call this method.
         // The Message must respond appropriately without doing a conversion.
@@ -790,7 +790,7 @@
         // Create a SOAP 1.1 Message from the sample incoming XML
         MessageFactory mf = (MessageFactory)
             FactoryRegistry.getFactory(MessageFactory.class);
-        Message m = mf.createFrom(omElement);
+        Message m = mf.createFrom(omElement, null);
         
         // Check to see if the message is a fault.  The client/server will always call this method.
         // The Message must respond appropriately without doing a conversion.
@@ -834,7 +834,7 @@
             XMLStreamReader saveMsgReader = inputFactory.createXMLStreamReader(sr);
             builder = new StAXSOAPModelBuilder(saveMsgReader, null);
             omElement = builder.getSOAPEnvelope();
-            m = mf.createFrom(omElement);
+            m = mf.createFrom(omElement, null);
         } 
         
         
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/SOAP12Tests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/SOAP12Tests.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/SOAP12Tests.java	(working copy)
@@ -129,7 +129,7 @@
         Block block = f.createFrom(sampleSoap12Envelope, null, null);
         
         // Create a Message with the full XML contents that we have
-        Message m = mf.createFrom(block.getXMLStreamReader(true));
+        Message m = mf.createFrom(block.getXMLStreamReader(true), null);
         
         // Assuming no handlers are installed, the next thing that will happen
         // is a XMLStreamReader will be requested...to go to OM.   At this point the
@@ -168,7 +168,7 @@
         // The JAX-WS layer creates a Message from the OM
         MessageFactory mf = (MessageFactory)
             FactoryRegistry.getFactory(MessageFactory.class);
-        Message m = mf.createFrom(omElement);
+        Message m = mf.createFrom(omElement, null);
         
         // Make sure the right Protocol was set on the Message
         assertTrue(m.getProtocol().equals(Protocol.soap12));
@@ -206,7 +206,7 @@
         // The JAX-WS layer creates a Message from the OM
         MessageFactory mf = (MessageFactory)
             FactoryRegistry.getFactory(MessageFactory.class);
-        Message m = mf.createFrom(omElement);
+        Message m = mf.createFrom(omElement, null);
         
         // Make sure the right Protocol was set on the Message
         assertTrue(m.getProtocol().equals(Protocol.soap12));
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageRPCTests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageRPCTests.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageRPCTests.java	(working copy)
@@ -263,7 +263,7 @@
         // Create a SOAP 1.1 Message from the sample incoming XML
         MessageFactory mf = (MessageFactory)
             FactoryRegistry.getFactory(MessageFactory.class);
-        Message m = mf.createFrom(omElement);
+        Message m = mf.createFrom(omElement, null);
         
         // Check to see if the message is a fault.  The client/server will always call this method.
         // The Message must respond appropriately without doing a conversion.
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/FaultTests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/FaultTests.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/FaultTests.java	(working copy)
@@ -132,7 +132,7 @@
 		// The JAX-WS layer creates a Message from the OM
 		MessageFactory mf = (MessageFactory)
 			FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.createFrom(omElement);
+		Message m = mf.createFrom(omElement, null);
 		
 		assertTrue(m.isFault());
 		
@@ -169,7 +169,7 @@
 			// The JAX-WS layer creates a Message from the OM
 			MessageFactory mf = (MessageFactory) FactoryRegistry
 					.getFactory(MessageFactory.class);
-			Message m = mf.createFrom(omElement);
+			Message m = mf.createFrom(omElement, null);
 
 			assertTrue(m.isFault());
 			
@@ -224,7 +224,7 @@
 		// The JAX-WS layer creates a Message from the OM
 		MessageFactory mf = (MessageFactory)
 			FactoryRegistry.getFactory(MessageFactory.class);
-		Message m = mf.createFrom(omElement);
+		Message m = mf.createFrom(omElement, null);
 		
 		assertTrue(m.isFault());
 		
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 509789)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -74,6 +74,7 @@
 import org.apache.axis2.jaxws.sample.WSGenTests;
 import org.apache.axis2.jaxws.sample.WrapTests;
 import org.apache.axis2.jaxws.security.BasicAuthSecurityTests;
+import org.apache.axis2.jaxws.xmlhttp.clientTests.dispatch.string.DispatchXPayloadString;
 import org.apache.log4j.BasicConfigurator;
 
 public class JAXWSTest extends TestCase {
@@ -158,6 +159,7 @@
         suite.addTestSuite(PolymorphicTests.class);
         suite.addTestSuite(NS2PkgTest.class);
         suite.addTestSuite(JAXBContextTest.class);
+        suite.addTestSuite(DispatchXPayloadString.class);
         
         // Start (and stop) the server only once for all the tests
         TestSetup testSetup = new TestSetup(suite) {
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/clientTests/dispatch/string/DispatchXPayloadString.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/clientTests/dispatch/string/DispatchXPayloadString.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/clientTests/dispatch/string/DispatchXPayloadString.java	(revision 0)
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.xmlhttp.clientTests.dispatch.string;
+
+import javax.xml.namespace.QName;
+import javax.xml.ws.Dispatch;
+import javax.xml.ws.Service;
+import javax.xml.ws.http.HTTPBinding;
+
+import junit.framework.TestCase;
+
+public class DispatchXPayloadString extends TestCase {
+
+    public String HOSTPORT = "http://localhost:8080";
+        
+    private String ENDPOINT_URL = HOSTPORT + "/axis2/services/XPayloadStringProvider";
+    private QName SERVICE_NAME  = new QName("http://ws.apache.org/axis2", "XPayloadStringProvider");
+    private QName PORT_NAME  = new QName("http://ws.apache.org/axis2", "XPayloadStringProviderPort");
+ 
+    String XML_TEXT = "<p:echo xmlns:p=\"http://sample\">hello world</p:echo>";
+    public Dispatch<String> getDispatch() {
+       Service service = Service.create(SERVICE_NAME);
+       service.addPort(PORT_NAME, HTTPBinding.HTTP_BINDING,ENDPOINT_URL);
+       Dispatch<String> dispatch = service.createDispatch(PORT_NAME, String.class, Service.Mode.PAYLOAD);
+       return dispatch;
+    }
+    public void testSimple() throws Exception {
+        Dispatch<String> dispatch = getDispatch();
+        String request = XML_TEXT;
+        System.out.println("Request  = " + request);
+        String response = dispatch.invoke(request);
+        System.out.println("Response = " + response);
+        assertTrue(response != null);
+        assertTrue(request.equals(response));
+    }
+}
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/META-INF/services.xml
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/META-INF/services.xml	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/META-INF/services.xml	(revision 0)
@@ -0,0 +1,14 @@
+<serviceGroup>
+ <service name="XPayloadStringProvider">
+  <messageReceivers>
+   <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" class="org.apache.axis2.jaxws.server.JAXWSMessageReceiver"/>
+  </messageReceivers>
+  <parameter locked="false" name="ServiceClass">org.apache.axis2.jaxws.xmlhttp.provider.payload.string.XPayloadStringProvider</parameter>
+  <excludeOperations>
+     <operation>invoke</operation>
+  </excludeOperations>
+  <operation name="echo" mep="http://www.w3.org/2004/08/wsdl/in-out">
+    <actionMapping/>
+  </operation>
+ </service>
+</serviceGroup>
\ No newline at end of file
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/META-INF/MANIFEST.MF
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/META-INF/MANIFEST.MF	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/META-INF/MANIFEST.MF	(revision 0)
@@ -0,0 +1 @@
+Manifest-Version: 1.0
\ No newline at end of file
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/XPayloadStringProvider.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/XPayloadStringProvider.java	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string/XPayloadStringProvider.java	(revision 0)
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.xmlhttp.provider.payload.string;
+
+import javax.xml.ws.BindingType;
+import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
+import javax.xml.ws.http.HTTPBinding;
+
+@WebServiceProvider()
+@BindingType(HTTPBinding.HTTP_BINDING)
+public class XPayloadStringProvider implements Provider<String> {
+
+    public String invoke(String input) {
+        return input;
+    }
+
+}
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/README.txt
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/README.txt	(revision 0)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/xmlhttp/README.txt	(revision 0)
@@ -0,0 +1,28 @@
+The xmlhttp test the XML HTTP protocol.
+
+The structure of the tests will be 
+
+org.apache.axis2.jaxws.xmlhttp.
+                               provider.
+                                        payload.
+                                                string. ...META_INF, etc.
+                                                source. ...META_INF, etc.
+                                        message.
+                                                string. ...META_INF, etc.
+                                                source. ...META_INF, etc.
+                                                datasource ...META_INF, etc.
+                               webservice.
+                                          sei.
+                                          impl.
+                                               META_INF ...
+                               
+                               clientTests. dispatch.
+                                                     string
+                                                     source
+                                                     datasource
+                                                     jaxb
+                                            proxy.
+                               
+
+                                           
+                                               
\ No newline at end of file
Index: C:/workspace/live/axis2/modules/jaxws/maven.xml
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/maven.xml	(revision 509789)
+++ C:/workspace/live/axis2/modules/jaxws/maven.xml	(working copy)
@@ -442,6 +442,18 @@
 			</ant:fileset>
 		</ant:copy>
 		<!-- ================================================================ -->
+        <!--- XML HTTP Tests -->
+        <!-- ================================================================ -->
+        <ant:copy toDir="target/test-classes/services/XPayloadStringProvider/">
+		  <ant:fileset dir="target/test-classes">
+		    <ant:include name="org/apache/axis2/jaxws/xmlhttp/provider/payload/string/*.class"/>
+		  </ant:fileset>
+		  <ant:fileset dir="test/org/apache/axis2/jaxws/xmlhttp/provider/payload/string">
+		    <ant:include name="META-INF/**"/>
+		  </ant:fileset>
+		</ant:copy>
+		
+		<!-- ================================================================ -->
         <!--- Java Bean Endpoint Samples -->
         <!-- ================================================================ -->
 		<ant:copy toDir="target/test-classes/services/WSGenService/">
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartFactoryImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartFactoryImpl.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartFactoryImpl.java	(working copy)
@@ -42,17 +42,17 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.XMLPartFactory#createFrom(javax.xml.stream.XMLStreamReader)
 	 */
-	public XMLPart createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException {
+	public XMLPart createFrom(XMLStreamReader reader, Protocol protocol) throws XMLStreamException, WebServiceException {
 		StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(reader, null);  // Pass null has the version to trigger autodetection
 		SOAPEnvelope omEnvelope = builder.getSOAPEnvelope();
-		return createFrom(omEnvelope);
+		return createFrom(omEnvelope, protocol);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.MessageFactory#createFrom(org.apache.axiom.om.OMElement)
 	 */
-	public XMLPart createFrom(OMElement omElement) throws XMLStreamException, WebServiceException {
-		return new XMLPartImpl(omElement);
+	public XMLPart createFrom(OMElement omElement, Protocol protocol) throws XMLStreamException, WebServiceException {
+		return new XMLPartImpl(omElement, protocol);
 	}
 
 	/* (non-Javadoc)
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(revision 510548)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(working copy)
@@ -85,15 +85,18 @@
      * @param protocol Protocol
      * @param style Style
      * @param indirection (0 or 1) indicates location of body blocks
-     * @param opQName QName if the Style is RPC
+     * @param initialPayload (OMElement or null...used to add rest payload)
 	 */
-	public XMLSpineImpl(Protocol protocol, Style style, int indirection) {
+	public XMLSpineImpl(Protocol protocol, Style style, int indirection, OMElement payload) {
 		super();
 		this.protocol = protocol;
         this.style = style;
         this.indirection = indirection;
 		soapFactory = _getFactory(protocol);
-		root = _createEmptyEnvelope(protocol, style, soapFactory);
+		root = _createEmptyEnvelope(style, soapFactory);
+        if (payload != null) {
+            ((SOAPEnvelope) root).getBody().addChild(payload);
+        }
 	}
 	
 	/**
@@ -103,19 +106,20 @@
      * @param indirection (0 or 1) indicates location of body blocks
 	 * @throws WebServiceException
 	 */
-	public XMLSpineImpl(SOAPEnvelope envelope, Style style, int indirection) throws WebServiceException {
+	public XMLSpineImpl(SOAPEnvelope envelope, Style style, int indirection, Protocol protocol) throws WebServiceException {
 		super();
         this.style = style;
         this.indirection = indirection;
+        this.protocol = protocol;
 		init(envelope);
-		if (root.getNamespace().getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
-			protocol = Protocol.soap11;
-		} else if (root.getNamespace().getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
-			protocol = Protocol.soap12;
-		} else {
-			// TODO Support for REST
-			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
-		}
+        // If null, detect protocol from soap namespace
+        if (protocol == null) {
+            if (root.getNamespace().getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
+                this.protocol = Protocol.soap11;
+            } else if (root.getNamespace().getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
+                this.protocol = Protocol.soap12;
+            }
+        }
 	} 
 
 	/**
@@ -540,8 +544,11 @@
             soapFactory = new SOAP11Factory();
         } else if (protocol == Protocol.soap12) {
             soapFactory = new SOAP12Factory();
+        } else if (protocol == Protocol.rest) {
+            // For REST, create a SOAP 1.1 Envelope to contain the message
+            // This is consistent with Axis.
+            soapFactory = new SOAP11Factory();
         } else {
-            // TODO REST Support is needed
             throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"), null);
         }
         return soapFactory;
@@ -554,7 +561,7 @@
      * @param factory
      * @return
      */
-    private static SOAPEnvelope _createEmptyEnvelope(Protocol protocol, Style style, SOAPFactory factory) {
+    private static SOAPEnvelope _createEmptyEnvelope(Style style, SOAPFactory factory) {
         SOAPEnvelope env = factory.createSOAPEnvelope();
         // Add an empty body and header
         factory.createSOAPBody(env);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(revision 509869)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(working copy)
@@ -116,13 +116,11 @@
 	 */
 	XMLPartBase(Protocol protocol) throws WebServiceException {
 		super();
-		this.protocol = protocol;
 		if (protocol.equals(Protocol.unknown)) {
 			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ProtocolIsNotKnown"));
-		} else if (protocol.equals(Protocol.rest)) {
-			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
-		}
-		content = _createSpine(protocol);
+		} 
+		content = _createSpine(protocol, getStyle(), getIndirection(), null);
+		this.protocol = ((XMLSpine) content).getProtocol();
 		contentType = SPINE;
 	}
 	
@@ -130,19 +128,30 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor creates an XMLPart from the specified root.
 	 * @param root
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws WebServiceException
 	 */
-	XMLPartBase(OMElement root) throws WebServiceException {
+	XMLPartBase(OMElement root, Protocol protocol) throws WebServiceException {
 		content = root;
 		contentType = OM;
 		QName qName = root.getQName();
-		if (qName.getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
-			protocol = Protocol.soap11;
-		} else if (qName.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
-			protocol = Protocol.soap12;
-		} else {
-			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
-		}
+        if (protocol == null) {
+            if (qName.getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
+                this.protocol = Protocol.soap11;
+            } else if (qName.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
+                this.protocol = Protocol.soap12;
+            } 
+        } else if (protocol == Protocol.rest) {
+            this.protocol = Protocol.rest;
+            // Axis2 stores XML/HTTP messages inside a soap11 envelope.  We will mimic this behavior
+            if (qName.getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
+                // Okay
+            } else if (qName.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
+                throw ExceptionFactory.makeWebServiceException("UNEXPECTED");  // TODO NLS
+            } else {
+                _createSpine(Protocol.rest, Style.DOCUMENT, 0, root);
+            }
+        }
 	}
 	
 	/**
@@ -645,10 +654,10 @@
 	 * @return 
 	 * @throws WebServiceException
 	 */
-	protected XMLSpine _createSpine(Protocol protocol) throws WebServiceException {
+	protected static XMLSpine _createSpine(Protocol protocol, Style style, int indirection, OMElement payload) throws WebServiceException {
 		// Default implementation is to simply construct the spine. 
 		// Derived classes may wish to construct a different kind of XMLSpine
-		return new XMLSpineImpl(protocol, getStyle(), getIndirection());
+		return new XMLSpineImpl(protocol, style, indirection, payload);
 	}
 	
 	private void setConsumed(boolean consume) { 
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(revision 509869)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(working copy)
@@ -90,15 +90,17 @@
 	 * Message is constructed by the MessageFactory.
 	 * This constructor creates a message from the specified root.
 	 * @param root
+     * @param protocol or null
 	 */
-	MessageImpl(OMElement root) throws WebServiceException, XMLStreamException  {
-		createXMLPart(root);
+	MessageImpl(OMElement root, Protocol protocol) throws WebServiceException, XMLStreamException  {
+		createXMLPart(root, protocol);
 	}
 	
 	/**
 	 * Message is constructed by the MessageFactory.
 	 * This constructor creates a message from the specified root.
 	 * @param root
+     * @param protocol or null
 	 */
 	MessageImpl(SOAPEnvelope root) throws WebServiceException, XMLStreamException  {
 	    createXMLPart(root);
@@ -113,7 +115,7 @@
     private void createXMLPart(SOAPEnvelope root) throws WebServiceException, XMLStreamException {
         XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
         xmlPart = factory.createFrom(root);
-        protocol = xmlPart.getProtocol();
+        this.protocol = xmlPart.getProtocol();
         xmlPart.setParent(this); 
     }
     
@@ -123,10 +125,10 @@
      * @throws WebServiceException
      * @throws XMLStreamException
      */
-    private void createXMLPart(OMElement root) throws WebServiceException, XMLStreamException {
+    private void createXMLPart(OMElement root, Protocol protocol) throws WebServiceException, XMLStreamException {
         XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
-        xmlPart = factory.createFrom(root);
-        protocol = xmlPart.getProtocol();
+        xmlPart = factory.createFrom(root, protocol);
+        this.protocol = xmlPart.getProtocol();
         xmlPart.setParent(this);
     }
     
@@ -140,10 +142,7 @@
         this.protocol = protocol;
         if (protocol.equals(Protocol.unknown)) {
             throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ProtocolIsNotKnown"));
-        } else if (protocol.equals(Protocol.rest)) {
-            // TODO Need REST support
-            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("RESTIsNotSupported"));
-        }
+        } 
         XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
         xmlPart = factory.create(protocol);
         xmlPart.setParent(this);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartImpl.java	(revision 509869)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartImpl.java	(working copy)
@@ -51,10 +51,11 @@
 	 * XMLPart should be constructed via the XMLPartFactory.
 	 * This constructor creates an XMLPart from the specified root.
 	 * @param root
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws WebServiceException
 	 */
-	XMLPartImpl(OMElement root) throws WebServiceException {
-		super(root);
+	XMLPartImpl(OMElement root, Protocol protocol) throws WebServiceException {
+		super(root, protocol);
 	}
 	
 	/**
@@ -91,19 +92,13 @@
 
 	@Override
 	protected XMLSpine _convertOM2Spine(OMElement om) throws WebServiceException {
-		return new XMLSpineImpl((org.apache.axiom.soap.SOAPEnvelope) om, getStyle(), getIndirection());
+		return new XMLSpineImpl((org.apache.axiom.soap.SOAPEnvelope) om, getStyle(), getIndirection(), getProtocol());
 	}
 
 	@Override
 	protected XMLSpine _convertSE2Spine(SOAPEnvelope se) throws WebServiceException {
 		return _convertOM2Spine(_convertSE2OM(se));
 	}
-
-	@Override
-	protected XMLSpine _createSpine(Protocol protocol) throws WebServiceException {
-		// Use the default implementation provided in XMLPartBase
-		return super._createSpine(protocol);
-	}
 	
 	/**
 	 * Load the SAAJConverter
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageFactoryImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageFactoryImpl.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageFactoryImpl.java	(working copy)
@@ -51,17 +51,17 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.MessageFactory#createFrom(javax.xml.stream.XMLStreamReader)
 	 */
-	public Message createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException {
+	public Message createFrom(XMLStreamReader reader, Protocol protocol) throws XMLStreamException, WebServiceException {
 		StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(reader, null);  // Pass null has the version to trigger autodetection
 		SOAPEnvelope omEnvelope = builder.getSOAPEnvelope();
-		return createFrom(omEnvelope);
+		return createFrom(omEnvelope, protocol);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.MessageFactory#createFrom(org.apache.axiom.om.OMElement)
 	 */
-	public Message createFrom(OMElement omElement) throws XMLStreamException, WebServiceException {
-		return new MessageImpl(omElement);
+	public Message createFrom(OMElement omElement, Protocol protocol) throws XMLStreamException, WebServiceException {
+		return new MessageImpl(omElement, protocol);
 	}
 
 	/* (non-Javadoc)
@@ -96,13 +96,13 @@
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.message.factory.MessageFactory#createFrom(org.apache.axis2.jaxws.message.Block, java.lang.Object)
 	 */
-	public Message createFrom(Block block, Object context) throws XMLStreamException, WebServiceException {
+	public Message createFrom(Block block, Object context, Protocol protocol) throws XMLStreamException, WebServiceException {
 		
 		// Small optimization to quickly consider the SOAPEnvelope case
 		if (block instanceof SOAPEnvelopeBlock) {
-			return new MessageImpl((SOAPEnvelope) block.getBusinessObject(true));
+			return new MessageImpl((SOAPEnvelope) block.getBusinessObject(true), protocol);
 		}
-		return createFrom(block.getXMLStreamReader(true));
+		return createFrom(block.getXMLStreamReader(true), protocol);
 	}
 
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/Protocol.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/Protocol.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/Protocol.java	(working copy)
@@ -19,6 +19,7 @@
 package org.apache.axis2.jaxws.message;
 
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.http.HTTPBinding;
 import javax.xml.ws.soap.SOAPBinding;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
@@ -69,6 +70,11 @@
                 log.debug("SOAP 1.2 protocol configured for message");
             }
             return Protocol.soap12;
+        } else if (namespaceEquals(HTTPBinding.HTTP_BINDING, url)) {
+            if (debug) {
+                log.debug("XML/HTTP protocol configured for message");
+            }
+            return Protocol.rest;
         }
         else {
             if (debug) {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockImpl.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SOAPEnvelopeBlockImpl.java	(working copy)
@@ -60,7 +60,7 @@
 	protected Object _getBOFromReader(XMLStreamReader reader, Object busContext)
 			throws XMLStreamException, WebServiceException {
 		MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
-		Message message = mf.createFrom(reader);
+		Message message = mf.createFrom(reader, null);
 		SOAPEnvelope env = message.getAsSOAPEnvelope();
 		this.setQName(getQName(env));
 		return env;
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/XMLPartFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/XMLPartFactory.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/XMLPartFactory.java	(working copy)
@@ -39,16 +39,18 @@
 	/**
 	 * create XMLPart from XMLStreamReader
 	 * @param reader XMLStreamReader
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws MessageStreamException
 	 */
-	public XMLPart createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException;
+	public XMLPart createFrom(XMLStreamReader reader, Protocol protocol) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create XMLPart from OMElement
 	 * @param omElement OMElement
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws WebServiceException
 	 */
-	public XMLPart createFrom(OMElement omElement) throws XMLStreamException, WebServiceException;
+	public XMLPart createFrom(OMElement omElement, Protocol protocol) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create XMLPart from SOAPEnvelope
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/MessageFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/MessageFactory.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/factory/MessageFactory.java	(working copy)
@@ -41,28 +41,32 @@
 	/**
 	 * create Message with the xml from the XMLStreamReader
 	 * @param reader XMLStreamReader
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws XMLStreamException
 	 */
-	public Message createFrom(XMLStreamReader reader) throws XMLStreamException, WebServiceException;
+	public Message createFrom(XMLStreamReader reader, Protocol protocol) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create Message with the xml from the OMElement
 	 * @param omElement OMElement
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws XMLStreamException
 	 */
-	public Message createFrom(OMElement omElement) throws XMLStreamException, WebServiceException;
+	public Message createFrom(OMElement omElement, Protocol protocol) throws XMLStreamException, WebServiceException;
 	
 	/**
 	 * create Message from a Block
 	 * @param block
 	 * @param context Associated Context or null
+     * @param protocol (if null, the soap protocol is inferred from the namespace)
 	 * @throws XMLStreamException
 	 */
-	public Message createFrom(Block other, Object context) throws XMLStreamException, WebServiceException;
+	public Message createFrom(Block other, Object context, Protocol protocol) throws XMLStreamException, WebServiceException;
 
 	/**
 	 * create Message from SOAPMessage
 	 * The xml and attachments from the SOAPMessage are used to populate the new Message
+     * The protocol is inferred from the SOAPMessage
 	 * @param SOAPMessage
 	 * @throws XMLStreamException, WebServiceException
 	 */
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(working copy)
@@ -50,6 +50,7 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.message.Attachment;
 import org.apache.axis2.jaxws.message.Message;
+import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.attachments.AttachmentUtils;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
@@ -168,7 +169,8 @@
         if (soapEnv != null) {
             MessageFactory msgFactory = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
             try {
-                message = msgFactory.createFrom(soapEnv);
+                Protocol protocol = msgContext.isDoingREST() ? Protocol.rest : null;
+                message = msgFactory.createFrom(soapEnv, protocol);
             } catch (Exception e) {
                 throw ExceptionFactory.makeWebServiceException("Could not create new Message");
             }
@@ -273,6 +275,10 @@
         }
         msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, headerMap);
         
+        if (message.getProtocol() == Protocol.rest) {
+            msgContext.setDoingREST(true);
+        }
+        
         // Enable MTOM Attachments 
         if (message.isMTOMEnabled()) {
             if (log.isDebugEnabled()) {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(working copy)
@@ -20,6 +20,7 @@
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.ws.WebServiceContext;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.http.HTTPBinding;
 
 import java.io.StringReader;
 import java.security.PrivilegedExceptionAction;
@@ -97,7 +98,7 @@
         ServiceDescription serviceDesc = getServiceDescription(requestMsgCtx, implClass);
         requestMsgCtx.setServiceDescription(serviceDesc);
 
-        if (!soapVersionsMatch(requestMsgCtx, serviceDesc)) {
+        if (!bindingTypesMatch(requestMsgCtx, serviceDesc)) {
             Protocol protocol = requestMsgCtx.getMessage().getProtocol();
             // only if protocol is soap12 and MISmatches the endpoint do we halt processing
             if (protocol.equals(Protocol.soap12)) {
@@ -327,7 +328,7 @@
    }
    
 
-   private boolean soapVersionsMatch(MessageContext requestMsgCtx, ServiceDescription serviceDesc) {
+   private boolean bindingTypesMatch(MessageContext requestMsgCtx, ServiceDescription serviceDesc) {
        // compare soap versions and respond appropriately under SOAP 1.2 Appendix 'A'
        EndpointDescription[] eds = serviceDesc.getEndpointDescriptions();
        // dispatch endpoints do not have SEIs, so watch out for null or empty array
@@ -341,6 +342,8 @@
            else if (protocol.equals(Protocol.soap12)) {
                return (SOAPBinding.SOAP12HTTP_BINDING.equalsIgnoreCase(endpointBindingType)) ||
                        (SOAPBinding.SOAP12HTTP_MTOM_BINDING.equalsIgnoreCase(endpointBindingType));
+           } else if (protocol.equals(Protocol.rest)) {
+               return HTTPBinding.HTTP_BINDING.equalsIgnoreCase(endpointBindingType);
            }
        }
        // safe to assume?
@@ -399,7 +402,8 @@
                    XMLStreamReader xmlreader = StAXUtils.createXMLStreamReader(sr);
                    MessageFactory mf = (MessageFactory) 
                        FactoryRegistry.getFactory(MessageFactory.class);
-                   Message msg = mf.createFrom(xmlreader);
+                   Protocol protocol = requestMsgContext.getAxisMessageContext().isDoingREST() ? Protocol.rest : null ;
+                   Message msg = mf.createFrom(xmlreader, protocol);
                    requestMsgContext.setMessage(msg);
                } catch (Throwable e) {
                    ExceptionFactory.makeWebServiceException(e);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/ProviderDispatcher.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/ProviderDispatcher.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/ProviderDispatcher.java	(working copy)
@@ -288,7 +288,7 @@
                 }
                 else {
                     Block block = factory.createFrom(value, null, null);
-                    message = msgFactory.createFrom(block, null);
+                    message = msgFactory.createFrom(block, null, messageProtocol);
                 }
             }
             else {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/XMLDispatch.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/XMLDispatch.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/XMLDispatch.java	(working copy)
@@ -97,16 +97,17 @@
         if (log.isDebugEnabled()) {
             log.debug("Loaded block factory type [" + blockFactoryType.getName());
         }
-        
+        // The protocol of the Message that is created should be based
+        // on the binding information available.
+        Protocol proto = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID());
         Message message = null;
         if (mode.equals(Mode.PAYLOAD)) {
             try {
                 MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
                 block = factory.createFrom(value, null, null);
                 
-                // The protocol of the Message that is created should be based
-                // on the binding information available.
-                Protocol proto = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID());               
+                
+                               
                 message = mf.create(proto);
                 message.setBodyBlock(block);
             } catch (Exception e) {
@@ -123,7 +124,7 @@
             		message = mf.createFrom((SOAPMessage) value);
             	} else {
             		block = factory.createFrom(value, null, null);
-            		message = mf.createFrom(block, null);
+            		message = mf.createFrom(block, null, proto);
             	}
             } catch (Exception e) {
             	throw ExceptionFactory.makeWebServiceException(e);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/JAXBDispatch.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/JAXBDispatch.java	(revision 509631)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/JAXBDispatch.java	(working copy)
@@ -73,6 +73,10 @@
             } else {
                 context = new JAXBBlockContext(clazz.getPackage().getName());
             }
+            // The protocol of the Message that is created should be based
+            // on the binding information available.
+            Protocol proto = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID());
+
             // Create a block from the value
             QName qName = XMLRootElementUtil.getXmlRootElementQNameFromObject(value);
             Block block = factory.createFrom(value, context, qName);
@@ -81,16 +85,13 @@
             if (mode.equals(Mode.PAYLOAD)) {
                 // Normal case
                 
-                // The protocol of the Message that is created should be based
-                // on the binding information available.
-                Protocol proto = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID());
                 message = mf.create(proto);
                 message.setBodyBlock(block);
             } else {
                 // Message mode..rare case
                 
                 // Create Message from block
-                message = mf.createFrom(block, null);
+                message = mf.createFrom(block, null, proto);
             }
             
         } catch (Exception e) {
