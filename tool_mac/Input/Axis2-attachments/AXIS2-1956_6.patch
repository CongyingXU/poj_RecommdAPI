Index: src/org/apache/axis2/saaj/AttachmentPartImpl.java
===================================================================
--- src/org/apache/axis2/saaj/AttachmentPartImpl.java	(revision 498541)
+++ src/org/apache/axis2/saaj/AttachmentPartImpl.java	(working copy)
@@ -32,6 +32,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.StringReader;
 import java.util.Iterator;
 
 /**
@@ -160,8 +161,12 @@
         }
         try {
             String contentType = dataHandler.getContentType();
-            if (contentType.equals("text/plain") ||
-                    contentType.equals("text/xml") ||
+            //TODO change to text/xml
+            if(contentType.equals("text/xml")){
+            	StringReader stringReader = new StringReader((String)dataHandler.getContent());
+            	StreamSource streamSource = new StreamSource(stringReader);
+            	return streamSource;
+            }else if (contentType.equals("text/plain") ||
                     contentType.equals("text/html")) {
 
                 //For these content types underlying DataContentHandler surely does
@@ -408,7 +413,7 @@
     public InputStream getBase64Content() throws SOAPException {
         try {
             if (dataHandler == null) {
-                return null;
+                throw new SOAPException();
             }
             return dataHandler.getInputStream();
         } catch (IOException e) {
Index: src/org/apache/axis2/saaj/DetailImpl.java
===================================================================
--- src/org/apache/axis2/saaj/DetailImpl.java	(revision 498541)
+++ src/org/apache/axis2/saaj/DetailImpl.java	(working copy)
@@ -99,8 +99,17 @@
         return details.iterator();
     }
 
+    /**
+     * Creates a new DetailEntry object with the given name and adds it to this Detail object.
+     * @param name - a Name object identifying the new DetailEntry object
+     * @throws SOAPException - thrown when there is a problem in adding a DetailEntry object to this
+     * Detail object.
+     */
     public DetailEntry addDetailEntry(QName qname) throws SOAPException {
-        return null;  //TODO: Fixme.
+        SOAPElementImpl childElement = (SOAPElementImpl) addChildElement(qname);
+        DetailEntryImpl detailEntry = new DetailEntryImpl(childElement.element);
+        childElement.element.setUserData(SAAJ_NODE, detailEntry, null);
+        return detailEntry;
     }
 
     public SOAPElement addAttribute(QName qname, String value) throws SOAPException {
Index: src/org/apache/axis2/saaj/MessageFactoryImpl.java
===================================================================
--- src/org/apache/axis2/saaj/MessageFactoryImpl.java	(revision 498541)
+++ src/org/apache/axis2/saaj/MessageFactoryImpl.java	(working copy)
@@ -126,6 +126,8 @@
      *
      * @return a new <CODE>SOAPMessage</CODE> object
      * @throws SOAPException if a SOAP error occurs
+     * 		   java.lang.UnsupportedOperationException - if the protocol of this
+     * 		   MessageFactory instance is DYNAMIC_SOAP_PROTOCOL
      */
     public SOAPMessage createMessage() throws SOAPException {
         SOAPEnvelopeImpl soapEnvelope;
@@ -133,7 +135,10 @@
             soapEnvelope =
                     new SOAPEnvelopeImpl((org.apache.axiom.soap.impl.dom.SOAPEnvelopeImpl)
                             new SOAP12Factory().getDefaultEnvelope());
-        } else {
+        }else if(soapVersion.equals(SOAPConstants.DYNAMIC_SOAP_PROTOCOL)){
+        	throw new UnsupportedOperationException("createMessage() is not supported for DYNAMIC_SOAP_PROTOCOL");
+        }else {
+        	//SOAP 1.1
             soapEnvelope =
                     new SOAPEnvelopeImpl((org.apache.axiom.soap.impl.dom.SOAPEnvelopeImpl)
                             new SOAP11Factory().getDefaultEnvelope());
Index: src/org/apache/axis2/saaj/PrefixedQName.java
===================================================================
--- src/org/apache/axis2/saaj/PrefixedQName.java	(revision 498541)
+++ src/org/apache/axis2/saaj/PrefixedQName.java	(working copy)
@@ -116,7 +116,9 @@
         if (!qName.equals(((PrefixedQName) obj).qName)) {
             return false;
         }
-        return prefix.equals(((PrefixedQName) obj).prefix);
+        return true;
+        //Is this correct?
+        //return prefix.equals(((PrefixedQName) obj).prefix);
     }
 
     public int hashCode() {
Index: src/org/apache/axis2/saaj/SOAPBodyImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPBodyImpl.java	(revision 498541)
+++ src/org/apache/axis2/saaj/SOAPBodyImpl.java	(working copy)
@@ -44,8 +44,11 @@
 import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11FaultImpl;
+import org.apache.axiom.soap.impl.dom.soap11.SOAP11HeaderBlockImpl;
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12Factory;
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12FaultImpl;
+import org.apache.axiom.soap.impl.dom.soap12.SOAP12HeaderBlockImpl;
+import org.apache.axis2.namespace.Constants;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.NamedNodeMap;
@@ -510,8 +513,20 @@
     }
 
     public QName createQName(String localName, String prefix) throws SOAPException {
-        //TODO : check
-        return super.createQName(localName, prefix);
+        if (this.element.getOMFactory() instanceof SOAP11Factory) {
+        	return super.createQName(localName, prefix);
+        }
+        else if(this.element.getOMFactory() instanceof SOAP12Factory) {
+        {
+        	if(this.element.findNamespaceURI(prefix) == null){
+        		throw new SOAPException("Only Namespace Qualified elements are allowed");
+        	}else{
+        		return super.createQName(localName, prefix);
+        	}
+        }
+        }else{
+        	throw new UnsupportedOperationException();
+        }
     }
 
 
Index: src/org/apache/axis2/saaj/SOAPConnectionImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPConnectionImpl.java	(revision 498541)
+++ src/org/apache/axis2/saaj/SOAPConnectionImpl.java	(working copy)
@@ -15,14 +15,35 @@
  */
 package org.apache.axis2.saaj;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import javax.activation.DataHandler;
+import javax.xml.namespace.QName;
+import javax.xml.soap.AttachmentPart;
+import javax.xml.soap.MessageFactory;
+import javax.xml.soap.SOAPBody;
+import javax.xml.soap.SOAPConnection;
+import javax.xml.soap.SOAPElement;
+import javax.xml.soap.SOAPException;
+import javax.xml.soap.SOAPHeader;
+import javax.xml.soap.SOAPHeaderElement;
+import javax.xml.soap.SOAPMessage;
+import javax.xml.soap.SOAPPart;
+
 import org.apache.axiom.om.OMAttribute;
 import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMException;
 import org.apache.axiom.om.OMNode;
 import org.apache.axiom.om.OMText;
 import org.apache.axiom.om.impl.llom.OMTextImpl;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
-import org.apache.axis2.wsdl.WSDLConstants;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.OperationClient;
 import org.apache.axis2.client.Options;
@@ -30,27 +51,10 @@
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.saaj.util.IDGenerator;
 import org.apache.axis2.saaj.util.SAAJUtil;
+import org.apache.axis2.wsdl.WSDLConstants;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import javax.activation.DataHandler;
-import javax.xml.namespace.QName;
-import javax.xml.soap.AttachmentPart;
-import javax.xml.soap.MessageFactory;
-import javax.xml.soap.SOAPBody;
-import javax.xml.soap.SOAPConnection;
-import javax.xml.soap.SOAPElement;
-import javax.xml.soap.SOAPException;
-import javax.xml.soap.SOAPHeader;
-import javax.xml.soap.SOAPHeaderElement;
-import javax.xml.soap.SOAPMessage;
-import javax.xml.soap.SOAPPart;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
 /**
  *
  */
@@ -368,6 +372,36 @@
         return null;
     }
 
+    /**
+     * overrided SOAPConnection's get() method 
+     */
+	
+	public SOAPMessage get(Object to) throws SOAPException {
+    	URL url = null;
+    	try 
+    	{
+    		url = (to instanceof URL) ? (URL) to : new URL(to.toString());
+    		if(url != null){
+    			InputStream in = url.openStream();
+    			//TODO : setting null for mime headers
+    			// close the connection??
+    			SOAPMessage soapMessage = new SOAPMessageImpl(in,null);
+    			return soapMessage;
+    		}
+    		return null;
+    	}catch (MalformedURLException e) {
+    		throw new SOAPException(e);
+    	}catch (IOException e) {
+    		throw new SOAPException(e);
+    	}catch (OMException e){
+    		throw new SOAPException(e);
+    	}
+    	
+	}
+
+    
+
+    
     /* private void printOMSOAPEnvelope(final org.apache.axiom.soap.SOAPEnvelope omSOAPEnv) {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         try {
Index: src/org/apache/axis2/saaj/SOAPElementImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPElementImpl.java	(revision 498541)
+++ src/org/apache/axis2/saaj/SOAPElementImpl.java	(working copy)
@@ -31,13 +31,17 @@
 import org.apache.axiom.om.OMException;
 import org.apache.axiom.om.OMNamespace;
 import org.apache.axiom.om.OMNode;
-import org.apache.axiom.om.impl.dom.DOOMAbstractFactory;
+import org.apache.axiom.om.impl.OMNamespaceImpl;
 import org.apache.axiom.om.impl.dom.DocumentImpl;
 import org.apache.axiom.om.impl.dom.ElementImpl;
 import org.apache.axiom.om.impl.dom.NodeImpl;
 import org.apache.axiom.om.impl.dom.TextImpl;
 import org.apache.axiom.soap.SOAP11Constants;
 import org.apache.axiom.soap.SOAP12Constants;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
+import org.apache.axiom.soap.impl.dom.soap11.SOAP11HeaderBlockImpl;
+import org.apache.axiom.soap.impl.dom.soap12.SOAP12HeaderBlockImpl;
 import org.w3c.dom.Attr;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.Document;
@@ -398,8 +402,24 @@
         return addChildElement(qname.getLocalPart(), "".equals(prefix) ? null : prefix  , qname.getNamespaceURI());
     }
 
+    /**
+     * Creates a QName whose namespace URI is the one associated with the parameter, prefix, 
+     * in the context of this SOAPElement. The remaining elements of the new QName are taken 
+     * directly from the parameters, localName and prefix.
+     * 
+     * @param localName - a String 