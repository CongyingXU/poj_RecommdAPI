Index: C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java
===================================================================
--- C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java	(revision 556683)
+++ C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java	(working copy)
@@ -18,6 +18,7 @@
  */
 package org.apache.axis2.jaxws.core;
 
+import org.apache.axis2.AxisFault;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
@@ -73,6 +74,7 @@
     // If a local exception is thrown, the exception is placed on the message context.
     // It is not converted into a Message.
     private Throwable localException = null;
+    private AxisFault causedByException = null;
 
     /**
      * Construct a MessageContext without a prior Axis2 MessageContext
@@ -253,6 +255,21 @@
     }
     
     /**
+     * @param t
+     */
+    public void setCausedByException (AxisFault t){
+        this.causedByException = t;
+    }
+    
+    /**
+     * @return
+     */
+    public AxisFault getCausedByException(){
+        return this.causedByException;
+    }
+    
+
+    /**
      * Set the wrapper MEPContext.  Internally, this method also sets
      * the MEPContext's children so the pointer is bi-directional; you can
      * get the MEPContext from the MessageContext and vice-versa.
Index: C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java
===================================================================
--- C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java	(revision 556683)
+++ C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java	(working copy)
@@ -34,6 +34,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import javax.xml.ws.soap.SOAPBinding;
+import org.apache.axis2.AxisFault;
 import java.lang.reflect.Method;
 
 /**
@@ -126,6 +127,14 @@
         if (faultThrown) {
             responseMsgCtx = MessageContextUtils.createFaultMessageContext(mc);
             responseMsgCtx.setMessage(message);
+
+            AxisFault axisFault = new AxisFault("An error was detected during JAXWS processing",
+                                              responseMsgCtx.getAxisMessageContext(),
+                                              fault);
+            
+            responseMsgCtx.setCausedByException(axisFault);
+
+
         } else {
             responseMsgCtx = MessageContextUtils.createResponseMessageContext(mc);
             responseMsgCtx.setMessage(message);
Index: C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java
===================================================================
--- C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(revision 556683)
+++ C:/wasx/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(working copy)
@@ -126,9 +126,17 @@
                 // If this is a fault message, we want to throw it as an
                 // exception so that the transport can do the appropriate things
                 if (responseMsgCtx.getMessage().isFault()) {
-                    faultToReturn = new AxisFault("An error was detected during JAXWS processing",
-                                                  axisResponseMsgCtx);
-                } else {
+                    
+                    //Rather than create a new AxisFault, we should use the AxisFault that was
+                    //created at the causedBy
+                    if (responseMsgCtx.getCausedByException() != null)
+                        faultToReturn = responseMsgCtx.getCausedByException();
+                    else {
+                        faultToReturn = new AxisFault("An error was detected during JAXWS processing",
+                                                                                 axisResponseMsgCtx);
+                        
+                    }
+                                    } else {
                     //This assumes that we are on the ultimate execution thread
                     ThreadContextMigratorUtil.performMigrationToContext(
                             Constants.THREAD_CONTEXT_MIGRATOR_LIST_ID, axisResponseMsgCtx);
