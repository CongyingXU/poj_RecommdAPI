Index: modules/adb-codegen/src/org/apache/axis2/schema/template/ADBBeanTemplate.xsl
===================================================================
--- modules/adb-codegen/src/org/apache/axis2/schema/template/ADBBeanTemplate.xsl	(revision 430985)
+++ modules/adb-codegen/src/org/apache/axis2/schema/template/ADBBeanTemplate.xsl	(working copy)
@@ -345,7 +345,7 @@
                         <xsl:when test="(@restrictionBaseType)">
                    		
                    		<xsl:if test="(@patternFacet)">
-                    		if ( param.matches( <xsl:value-of select="$patternFacet"/> ) {  
+                    		if ( param.matches( "<xsl:value-of select="$patternFacet"/>" ) {  
                    				this.<xsl:value-of select="$varName"/>=param;
                    			}
                    			else {
@@ -354,7 +354,7 @@
                    		</xsl:if>
 						
 						<xsl:if test="(@enumFacet)">
-                    		if ( param.matches( <xsl:value-of select="$enumFacet"/> ) {  
+                    		if ( param.matches( "<xsl:value-of select="$enumFacet"/>" ) {  
                    				this.<xsl:value-of select="$varName"/>=param;
                    			}
                    			else {
Index: modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java
===================================================================
--- modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java	(revision 430985)
+++ modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java	(working copy)
@@ -651,6 +651,27 @@
         }
         return generatedTypeName;
     }
+    
+    /**
+     * Generate a unique attribute Qname using the ref name
+     * @param attrRefName
+     * @param parentSchema
+     * @return Returns the generated attribute name
+     */
+    private QName generateAttributeQName(QName attrRefName, XmlSchema parentSchema) {
+    	
+    	if (typeCounter==Integer.MAX_VALUE){
+            typeCounter = 0;
+        }
+        QName generatedAttrName = new QName(attrRefName.getNamespaceURI(),
+        		attrRefName.getLocalPart() + typeCounter++);
+        
+        while (parentSchema.getTypeByName(generatedAttrName)!= null){
+            generatedAttrName = new QName(attrRefName.getNamespaceURI(),
+            		attrRefName.getLocalPart() + typeCounter++);
+        }
+        return generatedAttrName;
+    }
 
     /**
      * Finds whether a given class is already made
@@ -813,7 +834,7 @@
         while (attribIterator.hasNext()) {
             Object o = attribIterator.next();
             if (o instanceof XmlSchemaAttribute) {
-                processAttribute((XmlSchemaAttribute) o, metaInfHolder);
+                processAttribute((XmlSchemaAttribute) o, metaInfHolder,parentSchema);
 
             }
         }
@@ -1040,7 +1061,7 @@
             while (attribIterator.hasNext()) {
                 Object attr = attribIterator.next();
                 if (attr instanceof XmlSchemaAttribute) {
-                    processAttribute((XmlSchemaAttribute) attr, metaInfHolder);
+                    processAttribute((XmlSchemaAttribute) attr, metaInfHolder,parentSchema);
 
                 }
             }
@@ -1224,16 +1245,43 @@
      * @param att
      * @param metainf
      */
-    public void processAttribute(XmlSchemaAttribute att, BeanWriterMetaInfoHolder metainf) {
+    public void processAttribute(XmlSchemaAttribute att, BeanWriterMetaInfoHolder metainf, XmlSchema parentSchema) 
+                throws SchemaCompilationException {
+    	
         //for now we assume (!!!) that attributes refer to standard types only
         QName schemaTypeName = att.getSchemaTypeName();
-        if (baseSchemaTypeMap.containsKey(schemaTypeName)) {
-            metainf.registerMapping(att.getQName(),
-                    schemaTypeName,
-                    baseSchemaTypeMap.get(schemaTypeName).toString(), SchemaConstants.ATTRIBUTE_TYPE);
-        } else {
-            //todo his attribute refers to a custom type, probably one of the extended simple types.
-            //todo handle it here
+        if (schemaTypeName != null) {
+        	if (baseSchemaTypeMap.containsKey(schemaTypeName)) {
+        		if (att.getQName() != null) {
+        			metainf.registerMapping(att.getQName(),schemaTypeName,
+        					baseSchemaTypeMap.get(schemaTypeName).toString(), SchemaConstants.ATTRIBUTE_TYPE);
+        		} 
+        	}
+        } else if (att.getRefName() != null) {
+        	XmlSchema currentParentSchema = resolveParentSchema(att.getRefName(),parentSchema);
+        	QName attrQname = generateAttributeQName(att.getRefName(),parentSchema);
+        	
+        	XmlSchemaObjectCollection items = currentParentSchema.getItems();
+        	Iterator itemIterator = items.getIterator();
+            
+        	while (itemIterator.hasNext()) {
+                Object attr = itemIterator.next();
+                
+                if (attr instanceof XmlSchemaAttribute) {
+                	XmlSchemaAttribute attribute  = (XmlSchemaAttribute) attr;
+                	
+                	if (attribute.getName().equals(att.getRefName().getLocalPart())) {
+                		QName attrTypeName = attribute.getSchemaTypeName();
+                		
+                		metainf.registerMapping(attrQname,attrQname,
+                    			baseSchemaTypeMap.get(attrTypeName).toString(), SchemaConstants.ATTRIBUTE_TYPE);
+                	}
+                }
+            }
+        	
+    	} else {
+    		//todo his attribute refers to a custom type, probably one of the extended simple types.
+    		//todo handle it here
         }
     }
 
