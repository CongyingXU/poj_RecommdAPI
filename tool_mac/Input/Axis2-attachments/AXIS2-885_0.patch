Index: modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingFinalInHandlerTest.java
===================================================================
--- modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingFinalInHandlerTest.java	(revision 422752)
+++ modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingFinalInHandlerTest.java	(working copy)
@@ -90,7 +90,10 @@
     
     public void testMessageWithOmittedFaultTo() {
         try {
-            testMessageWithOmittedHeaders("noFaultTo");
+            Options options = testMessageWithOmittedHeaders("noFaultTo");
+            EndpointReference epr = options.getFaultTo();
+            
+            assertNull("The FaultTo endpoint reference is not null.", epr);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -106,7 +109,10 @@
     
     public void testMessageWithOmittedFrom() {
         try {
-            testMessageWithOmittedHeaders("noFrom");
+            Options options = testMessageWithOmittedHeaders("noFrom");
+            EndpointReference epr = options.getFrom();
+            
+            assertNull("The From endpoint reference is not null.", epr);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -122,7 +128,10 @@
     
     public void testMessageWithOmittedMessageID() {
         try {
-            testMessageWithOmittedHeaders("noMessageID");
+            Options options = testMessageWithOmittedHeaders("noMessageID");
+            String messageID = options.getMessageId();
+            
+            assertNull("The message id is not null.", messageID);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -138,7 +147,11 @@
     
     public void testMessageWithOmittedReplyTo() {
         try {
-            testMessageWithOmittedHeaders("noReplyTo");
+            Options options = testMessageWithOmittedHeaders("noReplyTo");
+            EndpointReference epr = options.getReplyTo();
+            String address = epr.getAddress();
+            
+            assertEquals("The address of the ReplyTo endpoint reference is not the anonymous URI.", AddressingConstants.Final.WSA_ANONYMOUS_URL, address);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -154,7 +167,11 @@
     
     public void testMessageWithOmittedTo() {
         try {
-            testMessageWithOmittedHeaders("noTo");
+            Options options = testMessageWithOmittedHeaders("noTo");
+            EndpointReference epr = options.getTo();
+            String address = epr.getAddress();
+            
+            assertEquals("The address of the To endpoint reference is not the anonymous URI.", AddressingConstants.Final.WSA_ANONYMOUS_URL, address);
         }
         catch (AxisFault af) {
             af.printStackTrace();
Index: modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingInHandlerTestBase.java
===================================================================
--- modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingInHandlerTestBase.java	(revision 422752)
+++ modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingInHandlerTestBase.java	(working copy)
@@ -158,11 +158,13 @@
         }
     }
     
-    protected void testMessageWithOmittedHeaders(String testName) throws Exception {
+    protected Options testMessageWithOmittedHeaders(String testName) throws Exception {
         String testfile = "omitted-header-messages/"+versionDirectory+"/"+testName+"Message.xml";
         
         MessageContext mc = new MessageContext();
         basicExtractAddressingInformationFromHeaders(testfile, mc);
+        
+        return mc.getOptions();
     }
     
     public void testExtractAddressingInformationFromHeadersInvalidCardinalityReplyTo() {
Index: modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandlerTest.java
===================================================================
--- modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandlerTest.java	(revision 422752)
+++ modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandlerTest.java	(working copy)
@@ -18,6 +18,7 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.Options;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -70,7 +71,10 @@
     
     public void testMessageWithOmittedFaultTo() {
         try {
-            testMessageWithOmittedHeaders("noFaultTo");
+            Options options = testMessageWithOmittedHeaders("noFaultTo");
+            EndpointReference epr = options.getFaultTo();
+            
+            assertNull("The FaultTo endpoint reference is not null.", epr);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -86,7 +90,10 @@
     
     public void testMessageWithOmittedFrom() {
         try {
-            testMessageWithOmittedHeaders("noFrom");
+            Options options = testMessageWithOmittedHeaders("noFrom");
+            EndpointReference epr = options.getFrom();
+            
+            assertNull("The From endpoint reference is not null.", epr);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -117,7 +124,10 @@
     
     public void testMessageWithOmittedMessageIDReplyToAndFaultTo() {
         try {
-            testMessageWithOmittedHeaders("noMessageIDNoReplyToNoFaultTo");
+            Options options = testMessageWithOmittedHeaders("noMessageIDNoReplyToNoFaultTo");
+            String messageID = options.getMessageId();
+            
+            assertNull("The message id is not null.", messageID);
         }
         catch (AxisFault af) {
             af.printStackTrace();
@@ -133,7 +143,11 @@
     
     public void testMessageWithOmittedReplyTo() {
         try {
-            testMessageWithOmittedHeaders("noReplyTo");
+            Options options = testMessageWithOmittedHeaders("noReplyTo");
+            EndpointReference epr = options.getReplyTo();
+            String address = epr.getAddress();
+            
+            assertEquals("The address of the ReplyTo endpoint reference is not the none URI.", AddressingConstants.Final.WSA_NONE_URI, address);
         }
         catch (AxisFault af) {
             af.printStackTrace();
Index: modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingFinalInHandler.java
===================================================================
--- modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingFinalInHandler.java	(revision 422752)
+++ modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingFinalInHandler.java	(working copy)
@@ -9,6 +9,9 @@
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.Options;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.engine.AxisEngine;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 import javax.xml.namespace.QName;
 
@@ -34,6 +37,7 @@
 
 public class AddressingFinalInHandler extends AddressingInHandler {
 
+    private static final Log log = LogFactory.getLog(AddressingFinalInHandler.class);
     private static final long serialVersionUID = -4020680449342946484L;
 
     public AddressingFinalInHandler() {
@@ -95,5 +99,36 @@
             throwFault(messageContext, WSA_ACTION, Final.FAULT_ADDRESSING_HEADER_REQUIRED, null);
         } 
     }
-
+    
+    protected void setDefaults(ArrayList alreadyFoundAddrHeader, MessageContext messageContext) {
+        if (!alreadyFoundAddrHeader.contains(WSA_TO)) {
+            Options messageContextOptions = messageContext.getOptions();
+            EndpointReference epr = messageContextOptions.getTo();
+            
+            if (epr == null) {
+                epr = new EndpointReference("");
+                messageContextOptions.setTo(epr);
+            }
+            
+            if (log.isTraceEnabled())
+                log.trace("setDefaults: Setting WS-Addressing default value for the To property.");
+            
+            epr.setAddress(Final.WSA_ANONYMOUS_URL);
+        }
+        
+        if (!alreadyFoundAddrHeader.contains(WSA_REPLY_TO)) {
+            Options messageContextOptions = messageContext.getOptions();
+            EndpointReference epr = messageContextOptions.getReplyTo();
+            
+            if (epr == null) {
+                epr = new EndpointReference("");
+                messageContextOptions.setReplyTo(epr);
+            }
+            
+            if (log.isTraceEnabled())
+                log.trace("setDefaults: Setting WS-Addressing default value for the ReplyTo property.");
+            
+            epr.setAddress(Final.WSA_ANONYMOUS_URL);
+        }        
+    }
 }
Index: modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandler.java
===================================================================
--- modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandler.java	(revision 422752)
+++ modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandler.java	(working copy)
@@ -7,7 +7,11 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.AddressingConstants;
 import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.AddressingConstants.Final;
+import org.apache.axis2.client.Options;
 import org.apache.axis2.context.MessageContext;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 import javax.xml.namespace.QName;
 
@@ -33,6 +37,7 @@
 
 public class AddressingSubmissionInHandler extends AddressingInHandler {
 
+    private static final Log log = LogFactory.getLog(AddressingSubmissionInHandler.class);
     private static final long serialVersionUID = 365417374773955107L;
 
     public AddressingSubmissionInHandler() {
@@ -107,4 +112,24 @@
             }
         }
     }
+    
+    protected void setDefaults(ArrayList alreadyFoundAddrHeader, MessageContext messageContext) {
+        //The none URI is not defined in the 2004/08 spec, but it is used here anyway
+        //as a flag to indicate the correct semantics to apply, i.e. in the 2004/08 spec
+        //the absence of a ReplyTo header indicates that a response is NOT required.
+        if (!alreadyFoundAddrHeader.contains(WSA_REPLY_TO)) {
+            Options messageContextOptions = messageContext.getOptions();
+            EndpointReference epr = messageContextOptions.getReplyTo();
+            
+            if (epr == null) {
+                epr = new EndpointReference("");
+                messageContextOptions.setReplyTo(epr);
+            }
+            
+            if (log.isTraceEnabled())
+                log.trace("setDefaults: Setting WS-Addressing default value for the ReplyTo property.");
+            
+            epr.setAddress(Final.WSA_NONE_URI);
+        }        
+    }
 }
Index: modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java
===================================================================
--- modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java	(revision 422752)
+++ modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java	(working copy)
@@ -160,12 +160,17 @@
         
         // check for the presence of madatory addressing headers
         checkForMandatoryHeaders(checkedHeaderNames, messageContext);
-
+         
+        // provide default values for headers that have not been found.
+        setDefaults(checkedHeaderNames, messageContext);
+         
         return messageContextOptions;
     }
     
     protected abstract void checkForMandatoryHeaders(ArrayList alreadyFoundAddrHeader, MessageContext messageContext) throws AxisFault;
 
+    protected abstract void setDefaults(ArrayList alreadyFoundAddrHeader, MessageContext messageContext) throws AxisFault;
+
     private boolean checkDuplicateHeaders(String addressingHeaderName, ArrayList checkedHeaderNames, ArrayList duplicateHeaderNames) {//throws AxisFault {
     	// If the header name has been seen before then we should return true and add it to the list
     	// of duplicate header names. Otherwise it is the first time we've seen the header so add it
Index: modules/core/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(working copy)
@@ -206,7 +206,12 @@
                     writeMessageWithCommons(msgContext, epr, dataOut, format);
                 }
             } else {
-                sendUsingOutputStream(msgContext, format, dataOut);
+                if (msgContext.getProperty(MessageContext.TRANSPORT_OUT) != null) {
+                    sendUsingOutputStream(msgContext, format, dataOut);
+                }
+                else {
+                    throw new AxisFault("Both the TO and Property MessageContext.TRANSPORT_OUT is Null, No where to send");
+                }
             }
 
             if (msgContext.getOperationContext() != null) {
Index: modules/core/src/org/apache/axis2/transport/AbstractTransportSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/AbstractTransportSender.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/transport/AbstractTransportSender.java	(working copy)
@@ -88,16 +88,18 @@
         }
 
         if (epr != null) {
-            out = openTheConnection(epr, msgContext);
-
-            OutputStream newOut = startSendWithToAddress(msgContext, out);
-
-            if (newOut != null) {
-                out = newOut;
+            if (!epr.getAddress().equals(AddressingConstants.Final.WSA_NONE_URI)) {
+                out = openTheConnection(epr, msgContext);
+    
+                OutputStream newOut = startSendWithToAddress(msgContext, out);
+    
+                if (newOut != null) {
+                    out = newOut;
+                }
+    
+                writeMessage(msgContext, out);
+                finalizeSendWithToAddress(msgContext, out);
             }
-
-            writeMessage(msgContext, out);
-            finalizeSendWithToAddress(msgContext, out);
         } else {
             out = (OutputStream) msgContext.getProperty(MessageContext.TRANSPORT_OUT);
 
@@ -107,7 +109,7 @@
                 finalizeSendWithOutputStreamFromIncomingConnection(msgContext, out);
             } else {
                 throw new AxisFault(
-                        "Both the TO and Property MessageContext.TRANSPORT_WRITER is Null, No where to send");
+                        "Both the TO and Property MessageContext.TRANSPORT_OUT is Null, No where to send");
             }
         }
 
Index: modules/core/src/org/apache/axis2/engine/AxisEngine.java
===================================================================
--- modules/core/src/org/apache/axis2/engine/AxisEngine.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/engine/AxisEngine.java	(working copy)
@@ -237,15 +237,30 @@
             faultContext.setTo(processingContext.getReplyTo());
         }
 
-        if (faultTo == null || AddressingConstants.Final.WSA_ANONYMOUS_URL.equals(faultTo.getAddress())
-                || AddressingConstants.Submission.WSA_ANONYMOUS_URL.equals(faultTo.getAddress())
-                || AddressingConstants.Final.WSA_NONE_URI.equals(faultTo.getAddress())) {
-            Object writer = processingContext.getProperty(MessageContext.TRANSPORT_OUT);
-            if (writer != null) {
-                faultContext.setProperty(MessageContext.TRANSPORT_OUT, writer);
-            } else {
-                throw new AxisFault(Messages.getMessage("nowhereToSendError"));
+        //Determine that we have the correct transport available.
+        TransportOutDescription transportOut = faultContext.getTransportOut();
+
+        try {
+            if (faultContext.isServerSide() && faultContext.getTo() != null) {
+                String replyToAddress = faultContext.getTo().getAddress();
+                if (!(AddressingConstants.Final.WSA_ANONYMOUS_URL.equals(replyToAddress)
+                        || AddressingConstants.Submission.WSA_ANONYMOUS_URL.equals(replyToAddress)
+                        || AddressingConstants.Final.WSA_NONE_URI.equals(replyToAddress))) {
+                    URI uri = new URI(replyToAddress);
+                    String scheme = uri.getScheme();
+                    if (!transportOut.getName().getLocalPart().equals(scheme)) {
+                        ConfigurationContext configurationContext = faultContext.getConfigurationContext();
+                        transportOut = configurationContext.getAxisConfiguration()
+                                .getTransportOut(new QName(scheme));
+                        if (transportOut == null) {
+                            throw new AxisFault("Can not find the transport sender : " + scheme);
+                        }
+                        faultContext.setTransportOut(transportOut);
+                    }
+                }
             }
+        } catch (URISyntaxException urise) {
+            throw new AxisFault(urise);
         }
 
         faultContext.setOperationContext(processingContext.getOperationContext());
@@ -254,9 +269,6 @@
 
         SOAPEnvelope envelope;
 
-        faultContext.setProperty(Constants.OUT_TRANSPORT_INFO,
-                processingContext.getProperty(Constants.OUT_TRANSPORT_INFO));
-
         if (processingContext.isSOAP11()) {
             envelope = OMAbstractFactory.getSOAP11Factory().getDefaultFaultEnvelope();
         } else {
@@ -268,6 +280,8 @@
         extractFaultInformationFromMessageContext(processingContext, envelope.getBody().getFault(),
                 e);
         faultContext.setEnvelope(envelope);
+        faultContext.setProperty(MessageContext.TRANSPORT_OUT,
+                processingContext.getProperty(MessageContext.TRANSPORT_OUT));
         faultContext.setProperty(Constants.OUT_TRANSPORT_INFO,
                 processingContext.getProperty(Constants.OUT_TRANSPORT_INFO));
 
Index: modules/core/src/org/apache/axis2/util/Utils.java
===================================================================
--- modules/core/src/org/apache/axis2/util/Utils.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/util/Utils.java	(working copy)
@@ -109,7 +109,6 @@
 
         // write the Message to the Wire
         TransportOutDescription transportOut = newmsgCtx.getTransportOut();
-        TransportSender sender = transportOut.getSender();
 
         //there may be instance where you want to send the response to replyTo
         //and this default behaviour should happen if somebody (e.g. a module) has not already provided
@@ -118,7 +117,8 @@
             if (newmsgCtx.isServerSide() && newmsgCtx.getTo() != null) {
                 String replyToAddress = newmsgCtx.getTo().getAddress();
                 if (!(AddressingConstants.Final.WSA_ANONYMOUS_URL.equals(replyToAddress)
-                        || AddressingConstants.Submission.WSA_ANONYMOUS_URL.equals(replyToAddress))) {
+                        || AddressingConstants.Submission.WSA_ANONYMOUS_URL.equals(replyToAddress)
+                        || AddressingConstants.Final.WSA_NONE_URI.equals(replyToAddress))) {
                     URI uri = new URI(replyToAddress);
                     String scheme = uri.getScheme();
                     if (!transportOut.getName().getLocalPart().equals(scheme)) {
