Index: mail-transport.html
===================================================================
--- mail-transport.html	(Revision 530979)
+++ mail-transport.html	(Arbeitskopie)
@@ -2,7 +2,7 @@
 <html>
 <head>
   <meta http-equiv="content-type" content="">
-  <title>Invoking a service using a mail</title>
+  <title>Invoking a service using mail</title>
   <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
   media="all">
 </head>
@@ -47,7 +47,7 @@
 
 <p>First, you need to go through the <a href="mail-configuration.html"
 target="_blank">Mail Transport Configuration</a> document. It provides first
-hand experience in setting up the mail transports to co-exist with Axis2.</p>
+hand experience in setting up the mail transports to operate with Axis2.</p>
 
 <p>Broadly speaking, there are three ways of calling a service through
 mail.</p>
@@ -86,7 +86,7 @@
 <source><pre>        // Start the mail server using the default configurations.
         ConfigurationContext configContext = UtilsMailServer.start();
 
-        // Start the default mail listener. It will starting poling for mail
+        // Start the default mail listener. It will starting polling for mail
         // using the configuration from the XML file.
         SimpleMailListener ml = new SimpleMailListener();
         ml.init(configContext,
@@ -172,7 +172,7 @@
 
 <h2>2. Using a Generic Mail Server</h2>
 
-<p>First you need two email accounts that work with POP/SMTP. One will act as
+<p>First you will need two email accounts that work with POP/SMTP. One will act as
 a server and the other will act as the client. For the time being, we will
 use server@somewhere.org and client@somewhere.org as the server and the
 client email addresses. Now that we have the email addresses, you will have
Index: tcp-transport.html
===================================================================
--- tcp-transport.html	(Revision 530979)
+++ tcp-transport.html	(Arbeitskopie)
@@ -13,8 +13,8 @@
 <p><i>Send your feedback or questions to: <a
 href="mailto:axis-dev@ws.apache.org?subject=[Axis2]">axis-dev@ws.apache.org</a></i>.
 Prefix subject with [Axis2]. Subscription details are available on the <a
-href="http://ws.apache.org/axis2/mail-lists.html">Axis2 site</a>. <a
-href="http://ws.apache.org/axis2/mail-lists.html"></a></p>
+href="http://ws.apache.org/axis2/mail-lists.html">Axis2 site</a>.
+</p>
 
 <h2>Content</h2>
 <ul>
@@ -28,9 +28,9 @@
 
 <h2>Introduction</h2>
 
-<p>Axis2 supports TCP as a transport. It supports both send and receive SOAP
+<p>Axis2 supports TCP as a transport. It supports both sending and receiving SOAP
 messages via TCP. A TCP transport does not have any application level headers
-and the SOAP message that is sent should be self contained. This makes the
+and the SOAP message that is sent should be self-contained. This makes the
 interaction fast and simple. However, since there are no application headers,
 it does not have the privilege of having a request URI, and Service
 dispatching should be done by an alternative method. Thus,
@@ -54,7 +54,7 @@
 href="../faq.html#c5">repository</a> and port number, as arguments. This
 class needs all the Axis dependency JARs in the classpath. New services can
 be added in the usual way by dropping the archives to the repository (See <a
-href="adv-userguide.html">Advance User's Guide</a> for more information)</p>
+href="adv-userguide.html">Advanced User's Guide</a> for more information)</p>
 <!--<p>Alternatively the TCP Server can run with tcp-server.bat/ tcp-server.sh
 file in the bin directory of the Binary distribution of TCP Server.</p>-->
 <a name="send"></a>
@@ -62,14 +62,14 @@
 <h2>How to Send SOAP Messages Using TCP Transport</h2>
 
 <p>TCP transport can be enabled easily from the call API. The following code
-segment demonstrates how it can be done.</p>
+segment demonstrates how this can be done.</p>
 <source><pre>OMElement payload = ...
 ServiceClient serviceClient = new ServiceClient();
 Options options = new Options();
 options.setTo(targetEPR);
 <!--options.useSeperateListener(false);-->
 
-<!--commented off as their is an error: "The method useSeperateListener(boolean)is undefined for the type Options"-->
+<!--commented off as there is an error: "The method useSeperateListener(boolean)is undefined for the type Options"-->
 
 serviceClient.setOptions(options);
 
@@ -105,13 +105,9 @@
 <p>The Axis2 TCP transport has two components, a transport Listener for
 receiving the messages and a transport Sender to send the SOAP Messages. The
 Axis2 installation has both the components built into itself by default. In
-the axis2.xml configuration file, the two TCP transport components would look
-as follows.</p>
+the axis2.xml configuration file, the two TCP transport components can be 
+configured as shown below.</p>
 
-<p>If the TCP server is started manually, this configuration does not take
-effect. In return, this affects the transport Listener's start by Axis2.
-(e.g. Listener started by the Complete Async interaction)</p>
-
 <p>The following XML lines initialize the TCPTransport Receiver:</p>
 <source><pre>&lt;transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer"&gt;
     &lt;parameter name="port" locked="false"&gt;6060&lt;/parameter&gt;
@@ -119,5 +115,11 @@
 </source>
 <p>The following XML lines add the TCPTransport Sender:</p>
 <source><pre>&lt;transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/&gt;</pre>
-</source></body>
+</source>
+
+<p>Note: If the TCP server is started manually, this configuration does not take
+effect. In return, this affects the transport Listener's start by Axis2.
+(e.g. Listener started by the Complete Async interaction)</p>
+
+</body>
 </html>
Index: mail-configuration.html
===================================================================
--- mail-configuration.html	(Revision 530979)
+++ mail-configuration.html	(Arbeitskopie)
@@ -170,7 +170,7 @@
 
 <h2>Configure James as SMTP and POP Server</h2>
 
-<p>Download the <a href="http://james.apache.org/">Apache James</a> and start
+<p>Download <a href="http://james.apache.org/">Apache James</a> and start
 James. Connect to the James server via Telnet as administrator James using
 the following code:</p>
 <source><pre>$telnet 127.0.0.1 4555
@@ -198,7 +198,7 @@
 <h2>Using the Included Mail Server</h2>
 
 <p>The inbuilt mail server can be started from the command line using the
-following piece of code when all the necessary JARS are in the class path.</p>
+following command when all the necessary JARS are in the class path.</p>
 <source><pre>java org.apache.axis2.transport.mail.server.MailServer</pre>
 </source>
 <p>The server itself does not need any configuration or tinkering to work. A
Index: transport_howto.html
===================================================================
--- transport_howto.html	(Revision 530979)
+++ transport_howto.html	(Arbeitskopie)
@@ -17,7 +17,7 @@
 
 <p></p>
 <ul>
-  <li><b>HTTP</b> - In the HTTP transport, the transport Listener is a
+  <li><b>HTTP</b> - In the HTTP transport, the transport Listener is either a
     Servlet or a Simple HTTP server provided by Axis2. The transport Sender
     uses sockets to connect and send the SOAP message. Currently we have the
     commons-httpclient based HTTP Transport sender as the default
@@ -44,18 +44,17 @@
 In the outgoing message, all transport specific information, like headers,
 are added and sent.</p>
 
-<p>To write your own transport, you will need to primarily write two classes:
+<p>To write your own transport, you will primarily need to write two classes:
 one is the TransportSender and the other is the TransportReceiver. To
-register a transport with Axis2 you will need to put two entries in the
-axis2.xml file. One for the transport receiver and the other for the
-transport sender. I will take you through the process of adding the entries
-in the relevent sections.</p>
+register a transport with Axis2 you will need to put entries corresponding
+to these two classes in the axis2.xml file. I will take you through the 
+process of adding the entries in the relevant sections.</p>
 
 <h2>Transport Receiver</h2>
 
 <p>Any message that is coming into Axis2 needs to go through a transport
 receiver. All information about how the message is received at the Axis2
-server from the wire (or via an e-mail ) is isolated inside the transport
+server from the wire (or via an e-mail) is isolated inside the transport
 receiver. It extracts the data that is coming on the wire and transforms it
 into a state that the Axis2 server understands.</p>
 
@@ -66,7 +65,7 @@
 <p></p>
 
 <p>To get things stared, you will first need to extend from the
-org.apache.Axis2.transport.TransportListener class and write you own
+org.apache.Axis2.transport.TransportListener class and write your own
 transport listener. To create an engine to process the MessageContext, we
 need a configuration context. The following code fragment will do this. This
 should ideally be only done once for the lifetime of the Transport
@@ -163,7 +162,7 @@
 </source>
 <p>By using a code fragment like
 <code>Utils.getParameterValue(transportOut.getParameter(MailSrvConstants.SMTP_USER))</code>
-we can extract the parameters that we insert into the axis2.xml file.</p>
+we can extract the parameters that we inserted into the axis2.xml file.</p>
 
 <p>As you can see, getting a new transport receiver up and running is a task
 that requires very little effort.</p>
@@ -176,7 +175,7 @@
 
 <p>The following bit of code from the abstract transport sender will call the
 Transport Sender that you wrote.</p>
-<source><pre>// If an EPR is present then the message is going on a diffrent channel.
+<source><pre>// If an EPR is present then the message is going on a different channel.
 if (epr != null) {
         out = openTheConnection(epr, msgContext);
         OutputStream newOut = startSendWithToAddress(msgContext, out);
@@ -203,7 +202,7 @@
 
 <p>After implementing the necessary methods, you can let Axis2 know about
 your new transport sender by adding an entry to the axis2.xml file, like you
-did for the Transport Receiver.</p>
+did for the transport receiver.</p>
 <source><pre>  &lt;transportSender name="TRANSPORT_NAME" class="org.apache.Axis2.transport.TRANSPORT_NAME.TRANSPORT_SENDER_CLASS"&gt;
         &lt;parameter name="PROPERTY_NAME" locked="false"&gt;PROPERTY_VALUE&lt;/parameter&gt;
         &lt;parameter name="PROPERTY_NAME_2" locked="false"&gt;PROPERTY_VALUE_2&lt;/parameter&gt;
