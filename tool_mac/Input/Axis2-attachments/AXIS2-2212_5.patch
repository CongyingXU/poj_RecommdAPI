Index: modules/kernel/src/org/apache/axis2/deployment/repository/util/WSInfoList.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/repository/util/WSInfoList.java	(revision 510498)
+++ modules/kernel/src/org/apache/axis2/deployment/repository/util/WSInfoList.java	(working copy)
@@ -17,14 +17,15 @@
 
 package org.apache.axis2.deployment.repository.util;
 
-import org.apache.axis2.deployment.DeploymentConstants;
-import org.apache.axis2.deployment.DeploymentEngine;
-
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import org.apache.axis2.deployment.DeploymentConstants;
+import org.apache.axis2.deployment.DeploymentEngine;
+import org.apache.axis2.deployment.DeploymentException;
+
 public class WSInfoList implements DeploymentConstants {
 
     /**
@@ -158,8 +159,7 @@
             }
             if (!exist) {
                 tempvector.add(fileitem);
-                WSInfo wsInfo = new WSInfo(fileitem.getFileName(), fileitem.getLastModifiedDate(), fileitem.getType());
-
+                WSInfo wsInfo = new WSInfo(fileitem.getFileName(), fileitem.getLastModifiedDate());
                 deployer.addWSToUndeploy(wsInfo);    // this is to be undeployed
             }
         }
@@ -181,11 +181,13 @@
     /**
      *
      */
-    public void update() {
+    public void update() throws DeploymentException {
         synchronized (deployer) {
             checkForUndeployedServices();
-            deployer.unDeploy();
-            deployer.doDeploy();
+   	
+			deployer.unDeploy();
+			deployer.doDeploy();
+
         }
     }
 
Index: modules/kernel/src/org/apache/axis2/deployment/ServiceDeployer.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/ServiceDeployer.java	(revision 510498)
+++ modules/kernel/src/org/apache/axis2/deployment/ServiceDeployer.java	(working copy)
@@ -49,7 +49,7 @@
 
     //Will process the file and add that to axisConfig
 
-    public void deploy(DeploymentFileData deploymentFileData) {
+    public void deploy(DeploymentFileData deploymentFileData) throws DeploymentException {
         boolean explodedDir = deploymentFileData.getFile().isDirectory();
         ArchiveReader archiveReader;
         StringWriter errorWriter = new StringWriter();
@@ -93,6 +93,9 @@
             PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
             de.printStackTrace(error_ptintWriter);
             serviceStatus = "Error:\n" + errorWriter.toString();
+
+            	throw de;
+            
         } catch (AxisFault axisFault) {
             log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_SERVICE,
                     deploymentFileData.getName(),
@@ -101,6 +104,9 @@
             PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
             axisFault.printStackTrace(error_ptintWriter);
             serviceStatus = "Error:\n" + errorWriter.toString();
+             
+            throw new DeploymentException(axisFault);
+            
         } catch (Exception e) {
             if (log.isInfoEnabled()) {
                 StringWriter sw = new StringWriter();
@@ -114,6 +120,9 @@
             PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
             e.printStackTrace(error_ptintWriter);
             serviceStatus = "Error:\n" + errorWriter.toString();
+            
+            throw new DeploymentException(e);
+            
         } catch (Throwable t) {
             if (log.isInfoEnabled()) {
                 StringWriter sw = new StringWriter();
@@ -127,6 +136,9 @@
             PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
             t.printStackTrace(error_ptintWriter);
             serviceStatus = "Error:\n" + errorWriter.toString();
+            
+            throw new DeploymentException(new Exception(t));
+            
         } finally {
             if (serviceStatus.startsWith("Error:")) {
                 axisConfig.getFaultyServices().put(deploymentFileData.getFile().getAbsolutePath(),
@@ -141,7 +153,7 @@
     public void setExtension(String extension) {
     }
 
-    public void unDeploy(String fileName) {
+    public void unDeploy(String fileName) throws DeploymentException {
         try {
             fileName = DeploymentEngine.getAxisServiceName(fileName);
             AxisServiceGroup serviceGroup = axisConfig.removeServiceGroup(fileName);
@@ -151,6 +163,8 @@
         } catch (AxisFault axisFault) {
             //May be a faulty service
             axisConfig.removeFaultyService(fileName);
+            
+            throw new DeploymentException(axisFault);
         }
     }
 }
Index: modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(revision 510498)
+++ modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(working copy)
@@ -47,7 +47,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
-public class DeploymentEngine implements DeploymentConstants {
+public abstract class DeploymentEngine implements DeploymentConstants {
 
     private static final Log log = LogFactory.getLog(DeploymentEngine.class);
     protected boolean hotUpdate = true;    // to do hot update or not
@@ -530,12 +530,13 @@
         wsToUnDeploy.add(file);
     }
 
-    public void doDeploy() {
+    public void doDeploy() throws DeploymentException{
         if (wsToDeploy.size() > 0) {
             for (int i = 0; i < wsToDeploy.size(); i++) {
                 DeploymentFileData currentDeploymentFile = (DeploymentFileData) wsToDeploy.get(i);
                 String type = currentDeploymentFile.getType();
                 if(TYPE_SERVICE.equals(type)){
+                	
                     serviceDeployer.deploy(currentDeploymentFile);
                 } else if (TYPE_MODULE.equals(type)){
                     moduleDeployer.deploy(currentDeploymentFile);
@@ -606,7 +607,7 @@
         scheduler.schedule(new SchedulerTask(listener), new DeploymentIterator());
     }
 
-    public void unDeploy() {
+    public void unDeploy() throws DeploymentException {
         try {
             if (wsToUnDeploy.size() > 0) {
                 for (int i = 0; i < wsToUnDeploy.size(); i++) {
@@ -1015,4 +1016,8 @@
     public HashMap getDirectoryToExtensionMappingMap() {
         return directoryToExtensionMappingMap;
     }
+
+	public RepositoryListener getRepoListener() {
+		return repoListener;
+	}
 }
Index: modules/kernel/src/org/apache/axis2/deployment/Deployer.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/Deployer.java	(revision 510498)
+++ modules/kernel/src/org/apache/axis2/deployment/Deployer.java	(working copy)
@@ -31,8 +31,8 @@
     void init(ConfigurationContext configCtx);
 
     //Will process the file and add that to axisConfig
-    void deploy(DeploymentFileData deploymentFileData);
+    void deploy(DeploymentFileData deploymentFileData) throws DeploymentException;
     void setDirectory(String directory);
     void setExtension(String extension);
-    void unDeploy(String fileName);
+    void unDeploy(String fileName) throws DeploymentException;
 }
Index: modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java	(revision 510498)
+++ modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java	(working copy)
@@ -17,17 +17,18 @@
 
 package org.apache.axis2.deployment;
 
-import org.apache.axis2.deployment.repository.util.DeploymentFileData;
-import org.apache.axis2.deployment.repository.util.WSInfoList;
-import org.apache.axis2.util.Loader;
-
 import java.io.File;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.net.URLDecoder;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 
+import org.apache.axis2.deployment.repository.util.DeploymentFileData;
+import org.apache.axis2.deployment.repository.util.WSInfoList;
+import org.apache.axis2.util.Loader;
+
 public class RepositoryListener implements DeploymentConstants {
 
     protected DeploymentEngine deploymentEngine;
@@ -141,7 +142,11 @@
             cl = cl.getParent();
         }
 
-        deploymentEngine.doDeploy();
+        try {
+			deploymentEngine.doDeploy();
+		} catch (DeploymentException e) {
+			// no need to do anything here, it has already been logged at the DeploymentEngine call
+		}
     }
 
     /**
@@ -173,10 +178,15 @@
     /**
      * Finds a list of services in the folder and adds to wsInfoList.
      */
-    public void checkServices() {
+    public void checkServices() { 
         findServicesInDirectory();
         loadOtherDirectories();
-        update();
+        
+        try {
+			update();
+		} catch (DeploymentException e) {
+				// no need to log anything here, it has been logged at DeploymentEngine
+		}
     }
 
     /**
@@ -187,7 +197,11 @@
         wsInfoList.init();
         checkModules();
         directoryToExtensionMappingMap = deploymentEngine.getDirectoryToExtensionMappingMap();
-        deploymentEngine.doDeploy();
+        try {
+			deploymentEngine.doDeploy();
+		} catch (DeploymentException e) {
+			// no need to do anything here, it has already been logged
+		}
     }
 
     //This will load the files from the directories
@@ -259,13 +273,25 @@
     public void startListener() {
         checkServices();
         loadOtherDirectories();
-        update();
+        
+        try {
+			update();
+		} catch (DeploymentException e) {
+			// no need to log the exception once again
+		}
     }
 
     /**
      * Updates WSInfoList object.
      */
-    public void update() {
+    public void update() throws DeploymentException {
         wsInfoList.update();
     }
+    
+    public void updateRemote() throws Exception {
+    	
+    	findServicesInDirectory();
+    	update();
+    }
+    
 }
