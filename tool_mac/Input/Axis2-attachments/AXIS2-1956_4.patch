Index: src/org/apache/axis2/saaj/DetailEntryImpl.java
===================================================================
--- src/org/apache/axis2/saaj/DetailEntryImpl.java	(revision 494014)
+++ src/org/apache/axis2/saaj/DetailEntryImpl.java	(working copy)
@@ -37,4 +37,49 @@
     public DetailEntryImpl(ElementImpl element) {
         super(element);
     }
+
+    public SOAPElement addAttribute(QName qname, String value) throws SOAPException {
+    	//TODO - check
+    	return super.addAttribute(qname, value);
+    }
+
+    public SOAPElement addChildElement(QName qname) throws SOAPException {
+    	//TODO - check
+    	return super.addChildElement(qname);
+    }
+
+    public QName createQName(String localName, String prefix) throws SOAPException {
+    	//TODO - check
+    	return super.createQName(localName, prefix);
+    }
+
+    public Iterator getAllAttributesAsQNames() {
+    	//TODO - check
+    	return super.getAllAttributesAsQNames();
+    }
+
+    public String getAttributeValue(QName qname) {
+    	//TODO - check
+    	return super.getAttributeValue(qname);
+    }
+
+    public Iterator getChildElements(QName qname) {
+    	//TODO - check
+    	return super.getChildElements(qname);
+    }
+
+    public QName getElementQName() {
+    	//TODO - check
+    	return super.getElementQName();
+    }
+
+    public boolean removeAttribute(QName qname) {
+    	//TODO - check
+    	return super.removeAttribute(qname);
+    }
+
+    public SOAPElement setElementQName(QName newName) throws SOAPException {
+    	//TODO - check
+    	return super.setElementQName(newName);
+    }
 }
Index: src/org/apache/axis2/saaj/DetailImpl.java
===================================================================
--- src/org/apache/axis2/saaj/DetailImpl.java	(revision 494014)
+++ src/org/apache/axis2/saaj/DetailImpl.java	(working copy)
@@ -102,4 +102,49 @@
     public DetailEntry addDetailEntry(QName qname) throws SOAPException {
         return null;  //TODO: Fixme.
     }
+
+    public SOAPElement addAttribute(QName qname, String value) throws SOAPException {
+    	//TODO - check
+    	return super.addAttribute(qname, value);
+    }
+
+    public SOAPElement addChildElement(QName qname) throws SOAPException {
+    	//TODO - check
+    	return super.addChildElement(qname);
+    }
+
+    public QName createQName(String localName, String prefix) throws SOAPException {
+    	//TODO - check
+    	return super.createQName(localName, prefix);
+    }
+
+    public Iterator getAllAttributesAsQNames() {
+    	//TODO - check
+    	return super.getAllAttributesAsQNames();
+    }
+
+    public String getAttributeValue(QName qname) {
+    	//TODO - check
+        return super.getAttributeValue(qname);
+    }
+
+    public Iterator getChildElements(QName qname) {
+    	//TODO - check
+        return super.getChildElements(qname);
+    }
+
+    public QName getElementQName() {
+    	//TODO - check
+    	return super.getElementQName();
+    }
+
+    public boolean removeAttribute(QName qname) {
+    	//TODO - check
+    	return super.removeAttribute(qname);
+    }
+
+    public SOAPElement setElementQName(QName newName) throws SOAPException {
+    	//TODO - check
+    	return super.setElementQName(newName);
+    }
 }
Index: src/org/apache/axis2/saaj/MessageFactoryImpl.java
===================================================================
--- src/org/apache/axis2/saaj/MessageFactoryImpl.java	(revision 494014)
+++ src/org/apache/axis2/saaj/MessageFactoryImpl.java	(working copy)
@@ -126,14 +126,20 @@
      *
      * @return a new <CODE>SOAPMessage</CODE> object
      * @throws SOAPException if a SOAP error occurs
+     * 		   java.lang.UnsupportedOperationException - if the protocol of this
+     * 		   MessageFactory instance is DYNAMIC_SOAP_PROTOCOL
      */
     public SOAPMessage createMessage() throws SOAPException {
         SOAPEnvelopeImpl soapEnvelope;
-        if (soapVersion.equals(SOAPConstants.SOAP_1_2_PROTOCOL)) {
+        if (SOAPConstants.SOAP_1_2_PROTOCOL.equals(soapVersion)) {
             soapEnvelope =
                     new SOAPEnvelopeImpl((org.apache.axiom.soap.impl.dom.SOAPEnvelopeImpl)
                             new SOAP12Factory().getDefaultEnvelope());
-        } else {
+        }else if (SOAPConstants.DYNAMIC_SOAP_PROTOCOL.equals(soapVersion)){
+        	throw new UnsupportedOperationException("Protocol of the MessageFactory " +
+        			"instance cannot be DYNAMIC_SOAP_PROTOCOL");
+        }
+        else {
             soapEnvelope =
                     new SOAPEnvelopeImpl((org.apache.axiom.soap.impl.dom.SOAPEnvelopeImpl)
                             new SOAP11Factory().getDefaultEnvelope());
Index: src/org/apache/axis2/saaj/SOAPBodyElementImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPBodyElementImpl.java	(revision 494014)
+++ src/org/apache/axis2/saaj/SOAPBodyElementImpl.java	(working copy)
@@ -40,4 +40,49 @@
         }
         this.parentElement = parent;
     }
+
+    public SOAPElement addAttribute(QName qname, String value) throws SOAPException {
+    	//TODO - check
+    	return super.addAttribute(qname, value);
+    }
+
+    public SOAPElement addChildElement(QName qname) throws SOAPException {
+    	//TODO - check
+    	return super.addChildElement(qname);
+    }
+
+    public QName createQName(String localName, String prefix) throws SOAPException {
+    	//TODO - check
+    	return super.createQName(localName, prefix);
+    }
+
+    public Iterator getAllAttributesAsQNames() {
+    	//TODO - check
+    	return super.getAllAttributesAsQNames();
+    }
+
+    public String getAttributeValue(QName qname) {
+    	//TODO - check
+    	return super.getAttributeValue(qname);
+    }
+
+    public Iterator getChildElements(QName qname) {
+    	//TODO - check
+    	return super.getChildElements(qname);
+    }
+
+    public QName getElementQName() {
+    	//TODO - check
+    	return super.getElementQName();
+    }
+
+    public boolean removeAttribute(QName qname) {
+    	//TODO - check
+    	return super.removeAttribute(qname);
+    }
+
+    public SOAPElement setElementQName(QName newName) throws SOAPException {
+    	//TODO - check
+    	return super.setElementQName(newName);
+    }
 }
Index: src/org/apache/axis2/saaj/SOAPBodyImpl.java
===================================================================
--- src/org/apache/axis2/saaj/SOAPBodyImpl.java	(revision 494014)
+++ src/org/apache/axis2/saaj/SOAPBodyImpl.java	(working copy)
@@ -15,15 +15,36 @@
  */
 package org.apache.axis2.saaj;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Locale;
+
+import javax.xml.namespace.QName;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.soap.Name;
+import javax.xml.soap.Node;
+import javax.xml.soap.SOAPBody;
+import javax.xml.soap.SOAPBodyElement;
+import javax.xml.soap.SOAPConstants;
+import javax.xml.soap.SOAPElement;
+import javax.xml.soap.SOAPException;
+import javax.xml.soap.SOAPFault;
+
+import org.apache.axiom.om.OMNamespace;
 import org.apache.axiom.om.OMNode;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axiom.om.impl.dom.DocumentImpl;
 import org.apache.axiom.om.impl.dom.ElementImpl;
 import org.apache.axiom.om.impl.dom.NamespaceImpl;
 import org.apache.axiom.om.impl.dom.NodeImpl;
+import org.apache.axiom.soap.SOAP11Constants;
+import org.apache.axiom.soap.SOAP12Constants;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
 import org.apache.axiom.soap.impl.dom.soap11.SOAP11FaultImpl;
-import org.apache.axiom.soap.impl.dom.soap11.SOAP11Factory;
+import org.apache.axiom.soap.impl.dom.soap12.SOAP12Factory;
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12FaultImpl;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -31,19 +52,6 @@
 import org.w3c.dom.NodeList;
 import org.w3c.dom.Text;
 
-import javax.xml.namespace.QName;
-import javax.xml.soap.Name;
-import javax.xml.soap.Node;
-import javax.xml.soap.SOAPBody;
-import javax.xml.soap.SOAPBodyElement;
-import javax.xml.soap.SOAPElement;
-import javax.xml.soap.SOAPException;
-import javax.xml.soap.SOAPFault;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Locale;
-
 public class SOAPBodyImpl extends SOAPElementImpl implements SOAPBody {
 
     private org.apache.axiom.soap.SOAPBody omSOAPBody;
@@ -157,14 +165,22 @@
         if (isBodyElementAdded) {
             throw new SOAPException("A SOAPBodyElement has been already added to this SOAPBody");
         }
-        SOAPFactory omFactory = (SOAPFactory) this.element.getOMFactory();
-        org.apache.axiom.soap.SOAPFault fault;
-        if(omFactory instanceof SOAP11Factory) {
-            fault = new SOAP11FaultImpl(omSOAPBody,  omFactory);
-        } else {
-            fault = new SOAP12FaultImpl(omSOAPBody,  omFactory);
+        //TODO : check, added soap version check
+        OMNamespace omNamespace = omSOAPBody.getNamespace();
+        SOAPFaultImpl saajSOAPFault = null;
+
+        if(omNamespace.getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI) &&
+        		omNamespace.getPrefix().equals(SOAP11Constants.SOAP_DEFAULT_NAMESPACE_PREFIX))
+        {
+        	SOAP11FaultImpl fault = new SOAP11FaultImpl(omSOAPBody, (SOAPFactory)this.element.getOMFactory());
+        	saajSOAPFault = new SOAPFaultImpl(fault);
         }
-        SOAPFaultImpl saajSOAPFault = new SOAPFaultImpl(fault);
+        else if(omNamespace.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI) &&
+        		omNamespace.getPrefix().equals(SOAP12Constants.SOAP_DEFAULT_NAMESPACE_PREFIX))
+        {
+        	SOAP12FaultImpl fault = new SOAP12FaultImpl(omSOAPBody, (SOAPFactory)this.element.getOMFactory());
+        	saajSOAPFault = new SOAPFaultImpl(fault);
+        }
         ((NodeImpl) omSOAPBody.getFault()).setUserData(SAAJ_NODE, saajSOAPFault, null);
         return saajSOAPFault;
     }
@@ -289,20 +305,99 @@
         return bodyEle;
     }
 
+    /**
+     * Creates a new <code>SOAPBodyElement</code> object with the
+     * specified name and adds it to this <code>SOAPBody</code> object.
+     *
+     * @param name a <code>QName</code> object with the name for the new
+     *             <code>SOAPBodyElement</code> object
+     * @return the new <code>SOAPBodyElement</code> object
+     * @throws SOAPException if a SOAP error occurs
+     */
     public SOAPBodyElement addBodyElement(QName qname) throws SOAPException {
+    	//TODO : check
         return (SOAPBodyElement) addChildElement(qname);
     }
+    
 
-    public SOAPFault addFault(QName qname, String s) throws SOAPException {
-        return null;  //TODO: Fixme.
+    public SOAPFault addFault(QName faultcode, String faultString) throws SOAPException {
+        return addFault(faultcode, faultString, null);      
     }
 
-    public SOAPFault addFault(QName qname, String s, Locale locale) throws SOAPException {
-        return null;  //TODO: Fixme.
+    /**
+     * Creates a new <code>SOAPFault</code> object and adds it to this
+     * <code>SOAPBody</code> object. The new <code>SOAPFault</code> will have a
+     * <code>faultcode</code> element that is set to the <code>faultCode</code>
+     * parameter and a <code>faultstring</code> set to <code>faultstring</code>
+     * and localized to <code>locale</code>.
+     *
+     * @param faultCode   a <code>QName</code> object giving the fault code to be
+     * @param faultString a <code>String</code> giving an explanation of the
+     *                    fault
+     * @param locale      a <code>Locale</code> object indicating the native language
+     *                    of the <ocde>faultString</code>
+     * @return the new <code>SOAPFault</code> object
+     * @throws SOAPException if there is a SOAP error
+     */
+    public SOAPFault addFault(QName faultCode, String faultString, Locale locale) throws SOAPException {
+    	//TODO : check
+    	SOAPFaultImpl faultImpl = null;
+    	
+    	if(SOAPConstants.SOAP_1_1_PROTOCOL.equals(getSOAPVersion(this.element))){
+            SOAP11FaultImpl fault = new SOAP11FaultImpl(omSOAPBody, new Exception(
+                    faultString), (SOAPFactory) this.element.getOMFactory());
+            faultImpl = new SOAPFaultImpl(fault);
+    	}
+    	else if(SOAPConstants.SOAP_1_2_PROTOCOL.equals(getSOAPVersion(this.element))){
+            SOAP12FaultImpl fault = new SOAP12FaultImpl(omSOAPBody, new Exception(
+                    faultString), (SOAPFactory) this.element.getOMFactory());
+            faultImpl = new SOAPFaultImpl(fault);
+    	}
+
+    	faultImpl.setFaultCode(faultCode);
+        if (locale != null) {
+            faultImpl.setFau