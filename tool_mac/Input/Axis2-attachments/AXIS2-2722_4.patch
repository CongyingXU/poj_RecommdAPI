Index: test/org/apache/axis2/jaxws/description/feature/MTOMFeatureTests.java
===================================================================
--- test/org/apache/axis2/jaxws/description/feature/MTOMFeatureTests.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ test/org/apache/axis2/jaxws/description/feature/MTOMFeatureTests.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.description.feature;
+
+import org.apache.axis2.jaxws.description.DescriptionFactory;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.ServiceDescription;
+
+import javax.jws.WebService;
+import javax.xml.namespace.QName;
+import javax.xml.ws.soap.MTOM;
+
+import junit.framework.TestCase;
+
+public class MTOMFeatureTests extends TestCase {
+    
+    private static final String ns = "http://jaxws.axis2.apache.org/metadata/feature/mtom";
+    
+    private static final String defaultServicePortName = "DefaultServicePort";
+    private static final String plainServicePortName = "PlainServicePort";
+    private static final String disabledServicePortName = "DisabledServicePort";
+    private static final String thresholdServicePortName = "ThresholdServicePort";
+    private static final String badThresholdServicePortName = "BadThresholdServicePort";
+    
+    public void testNoAnnotation() {
+        ServiceDescription sd = DescriptionFactory.createServiceDescription(DefaultService.class);
+        
+        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, defaultServicePortName));
+        assertTrue("The EndpointDescription should not be null.", ed != null);
+        
+        boolean mtomEnabled = ed.isMTOMEnabled();
+        assertTrue("MTOM should not be enabled by default", mtomEnabled == false);
+    }
+    
+    public void testPlainAnnotation() {
+        ServiceDescription sd = DescriptionFactory.createServiceDescription(PlainService.class);
+        
+        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, plainServicePortName));
+        assertTrue("The EndpointDescription should not be null.", ed != null);
+        
+        boolean mtomEnabled = ed.isMTOMEnabled();
+        assertTrue("@MTOM included, but was not enabled.", mtomEnabled == true);
+        
+        int threshold = ed.getMTOMThreshold();
+        assertTrue("MTOM threshold should be 0 or less.", threshold <= 0);
+    }
+    
+    public void testDisabled() {
+        ServiceDescription sd = DescriptionFactory.createServiceDescription(DisabledService.class);
+        
+        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, disabledServicePortName));
+        assertTrue("The EndpointDescription should not be null.", ed != null);
+        
+        boolean mtomEnabled = ed.isMTOMEnabled();
+        assertTrue("@MTOM included, and should be disabled.", mtomEnabled == false);
+    }
+    
+    public void testThreshold() {
+        ServiceDescription sd = DescriptionFactory.createServiceDescription(ThresholdService.class);
+        
+        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, thresholdServicePortName));
+        assertTrue("The EndpointDescription should not be null.", ed != null);
+        
+        int threshold = ed.getMTOMThreshold();
+        assertTrue("MTOM threshold should be 2000.", threshold == 20000);
+    }
+    
+    public void testBadThreshold() {
+        ServiceDescription sd = DescriptionFactory.createServiceDescription(BadThresholdService.class);
+        
+        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, badThresholdServicePortName));
+        assertTrue("The EndpointDescription should not be null.", ed != null);
+        
+        int threshold = ed.getMTOMThreshold();
+        assertTrue("MTOM threshold should be [0], but was [" + threshold + "].", threshold == 0);
+    }
+    
+    @WebService(targetNamespace=ns, portName=defaultServicePortName)
+    class DefaultService {
+        public double getQuote(String symbol) {
+            return 101.01;
+        }
+    }
+    
+    @WebService(targetNamespace=ns, portName=plainServicePortName)
+    @MTOM
+    class PlainService {
+        public double getQuote(String symbol) {
+            return 101.01;
+        }
+    }
+    
+    @WebService(targetNamespace=ns, portName=disabledServicePortName)
+    @MTOM(enabled=false)
+    class DisabledService {
+        public double getQuote(String symbol) {
+            return 101.01;
+        }
+    }
+    
+    @WebService(targetNamespace=ns, portName=thresholdServicePortName)
+    @MTOM(threshold=20000)
+    class ThresholdService {
+        public double getQuote(String symbol) {
+            return 101.01;
+        }
+    }
+    
+    @WebService(targetNamespace=ns, portName=badThresholdServicePortName)
+    @MTOM(threshold=-1000)
+    class BadThresholdService {
+        public double getQuote(String symbol) {
+            return 101.01;
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/addressing/SubmissionAddressing.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/SubmissionAddressing.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/SubmissionAddressing.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing;                                                                                         
+                                                                                                              
+import java.lang.annotation.RetentionPolicy;                                                                  
+import java.lang.annotation.ElementType;                                                                      
+import java.lang.annotation.Retention;                                                                        
+import java.lang.annotation.Target;                                                                           
+import java.lang.annotation.Documented;
+
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
+                                                                                                              
+@Documented                                                                                                   
+@Retention(value=RetentionPolicy.RUNTIME)                                                                     
+@Target(value=ElementType.TYPE)                                                                               
+@WebServiceFeatureAnnotation(id=SubmissionAddressingFeature.ID, bean=SubmissionAddressingFeature.class)
+                                                                                                              
+public @interface SubmissionAddressing {                                                                            
+                                                                                                              
+    public boolean enabled() default true;
+    
+    public boolean required() default false;
+                                                                                                              
+}
Index: src/org/apache/axis2/jaxws/addressing/SubmissionAddressingFeature.java
===================================================================
--- src/org/apache/axis2/jaxws/addressing/SubmissionAddressingFeature.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/addressing/SubmissionAddressingFeature.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.addressing;
+
+import javax.xml.ws.WebServiceFeature;
+
+public final class SubmissionAddressingFeature extends WebServiceFeature {
+    public static final String ID = "org.apache.axis2.jaxws.addressing.SubmissionAddressingFeature";
+    
+    protected boolean required;
+    
+    public SubmissionAddressingFeature() {
+        this(true, false);
+    }
+    
+    public SubmissionAddressingFeature(boolean enabled) {
+        this(enabled, false);
+    }
+    
+    public SubmissionAddressingFeature(boolean enabled, boolean required) {
+        this.enabled  = enabled;
+        this.required = required;
+    }
+
+    public boolean isRequired() {
+        return required;
+    }
+    
+    @Override
+    public String getID() {
+        return ID;
+    }
+}
Index: src/org/apache/axis2/jaxws/description/builder/WebServiceContextAnnot.java
===================================================================
--- src/org/apache/axis2/jaxws/description/builder/WebServiceContextAnnot.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/builder/WebServiceContextAnnot.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -16,10 +16,13 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-
 package org.apache.axis2.jaxws.description.builder;
 
+import javax.xml.ws.EndpointReference;
 import javax.xml.ws.handler.MessageContext;
+
+import org.w3c.dom.Element;
+
 import java.lang.annotation.Annotation;
 import java.security.Principal;
 
@@ -90,10 +93,20 @@
         this.userPrincipal = userPrincipal;
     }
 
+    public <T extends EndpointReference> T getEndpointReference(Class<T> arg0, Element... arg1) {
+        // TODO Auto-generated method stub
+        return null;
+    }
 
+    public EndpointReference getEndpointReference(Element... arg0) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+
     //hmm, should we really do this
     public Class<Annotation> annotationType() {
         return Annotation.class;
-	}
+    }
 	
 }
Index: src/org/apache/axis2/jaxws/description/builder/DescriptionBuilderComposite.java
===================================================================
--- src/org/apache/axis2/jaxws/description/builder/DescriptionBuilderComposite.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/builder/DescriptionBuilderComposite.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -31,6 +31,7 @@
 
 import javax.wsdl.Definition;
 import javax.xml.namespace.QName;
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
 
 import java.io.InputStream;
 import java.lang.annotation.Annotation;
@@ -82,7 +83,9 @@
     private List<WebServiceRefAnnot> webServiceRefAnnotList;
     private BindingTypeAnnot bindingTypeAnnot;
     private WebServiceContextAnnot webServiceContextAnnot;
-
+    
+    private List<Annotation> features;
+    
     // Class information
     private String className;
     private String[] classModifiers; //public, abstract, final, strictfp...
@@ -91,7 +94,7 @@
     private boolean isInterface = false;
     private QName preferredPort;        // Port to use if no port QName given.  May be null
     private boolean isMTOMEnabled = false;
-
+    
     private List<MethodDescriptionComposite> methodDescriptions;
     private List<FieldDescriptionComposite> fieldDescriptions;
     
@@ -369,7 +372,15 @@
     public WebServiceContextAnnot getWebServiceContextAnnot() {
         return (WebServiceContextAnnot) webServiceContextAnnot;
     }
-
+    
+    public List<Annotation> getWebServiceFeatures() {
+        return features;
+    }
+    
+    public void setWebServiceFeatures(List<Annotation> list) {
+        features = list;
+    }
+    
     /** @return Returns the wsdlDefinition */
     public Definition getWsdlDefinition() {
         if (wsdlDefinition != null) {
Index: src/org/apache/axis2/jaxws/description/builder/converter/ConverterUtils.java
===================================================================
--- src/org/apache/axis2/jaxws/description/builder/converter/ConverterUtils.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/builder/converter/ConverterUtils.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -33,6 +33,8 @@
 import javax.jws.soap.SOAPBinding;
 import javax.xml.bind.annotation.XmlList;
 import javax.xml.ws.WebServiceRef;
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
+
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.GenericArrayType;
@@ -41,6 +43,7 @@
 import java.lang.reflect.Type;
 import java.lang.reflect.WildcardType;
 import java.security.PrivilegedAction;
+import java.util.ArrayList;
 import java.util.List;
 
 public class ConverterUtils {
@@ -60,6 +63,40 @@
             }
         });
      }
+    
+    /**
+     * Helper method to retrieve a list of all annotations that match the following
+     * conditions:
+     * 
+     * - Annotations that extend the parameterized type T
+     * - Annotations that themselves are annotated with type T
+     * 
+     * @param annotationClass
+     * @param element
+     * @return
+     */
+    public static <T extends Annotation> List<Annotation> getAnnotations(final Class<T> annotationClass, final AnnotatedElement element) {
+        List<Annotation> matches = new ArrayList<Annotation>();
+        Annotation[] annotations = null;
+        
+        // Get the complete list of annotations from the class that was provided.
+        annotations = (Annotation[]) AccessController.doPrivileged(new PrivilegedAction() {
+            public Object run() {
+                return element.getAnnotations();
+            }
+        });
+        
+        for (Annotation a: annotations) {        
+            // If the annotation matches the parameter type we're looking
+            // for, add it to the list.
+            if (a.annotationType().isAnnotationPresent(annotationClass) || 
+                annotationClass.isAssignableFrom(a.annotationType())) {
+                matches.add(a);
+            }
+        }
+        
+        return matches;
+    }
 
     /**
      * This is a helper method to create a <code>HandlerChainAnnot</code> since the
Index: src/org/apache/axis2/jaxws/description/builder/converter/JavaClassToDBCConverter.java
===================================================================
--- src/org/apache/axis2/jaxws/description/builder/converter/JavaClassToDBCConverter.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/builder/converter/JavaClassToDBCConverter.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -18,12 +18,14 @@
  */
 package org.apache.axis2.jaxws.description.builder.converter;
 
+import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import javax.jws.WebService;
 import javax.xml.ws.BindingType;
@@ -33,6 +35,7 @@
 import javax.xml.ws.WebServiceProvider;
 import javax.xml.ws.WebServiceRef;
 import javax.xml.ws.WebServiceRefs;
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
 
 import org.apache.axis2.jaxws.description.builder.BindingTypeAnnot;
 import org.apache.axis2.jaxws.description.builder.DescriptionBuilderComposite;
@@ -54,7 +57,15 @@
     private String seiClassName;
 
     private List<Class> classes;
-
+    
+    private static final Map<Class, Object> annotationProcessors;
+    
+    static {
+        annotationProcessors = new HashMap<Class, Object>();
+        
+        
+    }
+    
     public JavaClassToDBCConverter(Class serviceClass) {
         this.serviceClass = serviceClass;
         classes = new ArrayList<Class>();
@@ -185,6 +196,7 @@
         attachWebServiceProviderAnnotation(composite);
         attachWebServiceRefsAnnotation(composite);
         attachWebServiceRefAnnotation(composite);
+        attachWebServiceFeatureAnnotations(composite);
     }
 
     /**
@@ -348,6 +360,24 @@
         ConverterUtils.attachWebServiceRefAnnotation(composite, serviceClass);
 
     }
+    
+    /**
+     * Finds the list of WebServiceFeatureAnnotation instances, and set them on the composite.
+     * 
+     * @param composite
+     */
+    private void attachWebServiceFeatureAnnotations(DescriptionBuilderComposite composite) {
+        List<Annotation> features = ConverterUtils.getAnnotations(
+            WebServiceFeatureAnnotation.class, serviceClass); 
+        
+        if (features.size() > 0) {
+            if (log.isDebugEnabled()) {
+                log.debug("There were [" + features.size() + "] WebServiceFeature annotations found.");
+            }
+            
+            composite.setWebServiceFeatures(features);
+        }
+    }
 
     private void establishClassHierarchy(Class rootClass) {
         classes.add(rootClass);
Index: src/org/apache/axis2/jaxws/description/DescriptionFactory.java
===================================================================
--- src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -16,16 +16,16 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-
-
 package org.apache.axis2.jaxws.description;
 
+import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.ClientConfigurationFactory;
 import org.apache.axis2.jaxws.description.builder.DescriptionBuilderComposite;
 import org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl;
 
 import javax.xml.namespace.QName;
+
 import java.net.URL;
 import java.util.HashMap;
 import java.util.List;
@@ -170,9 +170,91 @@
             Object sparseCompositeKey) {
         return DescriptionFactoryImpl
                    .updateEndpoint(serviceDescription, sei, portQName, updateType, composite, sparseCompositeKey);
-}
+    }
 
     /**
+     * Retrieve or create the EndpointDescription hierachy associated with an existing CLIENT side
+     * ServiceDescription for a particular port.  If an EndpointDescritption already exists, it will
+     * be returned; if one does not already exist, it will be created.  Note that if the SEI is null
+     * then the EndpointDescription returned will be for a Dispatch client only and it will not have
+     * an EndpointInterfaceDescription hierachy associated with it.  If, at a later point, the same
+     * port is requested and an SEI is provided, the existing EndpointDescription will be updated
+     * with a newly-created EndpointInterfaceDescription hieracy.
+     *
+     * @param serviceDescription  An existing client-side ServiceDescription.  This must not be
+     *                            null.
+     * @param sei                 The ServiceInterface class.  This can be null for adding a port or
+     *                            creating a Dispatch; it can not be null when getting a port.
+     * @param epr                 The endpoint reference to the target port.
+     * @param addressingNamespace The addressing namespace of the endpoint reference.
+     * @param updateType          The type of the update: adding a port, creating a dispatch, or
+     *                            getting an SEI-based port.
+     * @return An EndpointDescription corresponding to the port.
+     * @see #createServiceDescription(URL, QName, Class)
+     * @see DescriptionFactory.UpdateType
+     */
+    public static EndpointDescription updateEndpoint(ServiceDescription serviceDescription,
+                                                     Class sei, EndpointReference epr,
+                                                     String addressingNamespace,
+                                                     DescriptionFactory.UpdateType updateType) {
+        return DescriptionFactoryImpl
+                .updateEndpoint(serviceDescription, sei, epr, addressingNamespace, updateType);
+    }
+    
+    /**
+     * Retrieve or create the EndpointDescription hierarchy associated with an existing CLIENT side
+     * ServiceDescription for a particular port.  This is identical to above, but this method has a 
+     * reference back to the ServiceDelegate (which invoked it) for purposes of properly caching 
+     * ServiceDescriptions that contain dynamic ports
+     *
+     * @param serviceDescription An existing client-side ServiceDescription.  This must not be
+     *                           null.
+     * @param sei                The ServiceInterface class.  This can be null for adding a port or
+     *                           creating a Dispatch; it can not be null when getting a port.
+     * @param epr                 The endpoint reference to the target port.
+     * @param addressingNamespace The addressing namespace of the endpoint reference.
+     * @param updateType         The type of the update: adding a port, creating a dispatch, or
+     *                           getting an SEI-based port.
+     * @param serviceDelegateKey A reference back to the ServiceDelegate that called it
+     * @return An EndpointDescription corresponding to the port.
+     * @see #createServiceDescription(URL, QName, Class)
+     * @see DescriptionFactory.UpdateType
+     */
+    public static EndpointDescription updateEndpoint(ServiceDescription serviceDescription,
+                                                     Class sei, EndpointReference epr,
+                                                     String addressingNamespace,
+                                                     DescriptionFactory.UpdateType updateType,
+                                                     Object serviceDelegateKey) {
+        return DescriptionFactoryImpl
+                   .updateEndpoint(serviceDescription, sei, epr, addressingNamespace, updateType, serviceDelegateKey);
+    }    
+
+    /**
+     * Retrieve or create an EndpointDescription hierachy associated with an existing CLIENT side
+     * ServiceDescription for a particular port.  Additonal metdata may be specified in a sparse
+     * composite.  That metadata may come from a JSR-109 client deployment descriptor, for example,
+     * or from resource injection of an WebServiceRef or other Resource annotation.
+     * 
+     * @see #updateEndpoint(ServiceDescription, Class, QName, org.apache.axis2.jaxws.description.DescriptionFactory.UpdateType)
+     *  
+     * @param serviceDescription
+     * @param sei
+     * @param portQName
+     * @param updateType
+     * @param composite
+     * @return
+     */
+    public static EndpointDescription updateEndpoint(ServiceDescription serviceDescription,
+            Class sei, EndpointReference epr,
+            String addressingNamespace,
+            DescriptionFactory.UpdateType updateType,
+            DescriptionBuilderComposite composite,
+            Object sparseCompositeKey) {
+        return DescriptionFactoryImpl
+        .updateEndpoint(serviceDescription, sei, epr, addressingNamespace, updateType, composite, sparseCompositeKey);
+    }
+    
+    /**
      * Create a full ServiceDescription hierarchy on the SERVER side for EACH service implementation
      * entry in the DescriptionBuilderComposite (DBC) map.  Note that the associated SERVER side
      * Axis description objects are also created.  To create a single ServiceDescription hierarchy
Index: src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -18,9 +18,45 @@
  */
 package org.apache.axis2.jaxws.description.impl;
 
+import java.io.InputStream;
+import java.lang.annotation.Annotation;
+import java.net.URL;
+import java.security.PrivilegedAction;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeSet;
+
+import javax.jws.HandlerChain;
+import javax.jws.WebService;
+import javax.wsdl.Binding;
+import javax.wsdl.Definition;
+import javax.wsdl.Port;
+import javax.wsdl.extensions.ExtensibilityElement;
+import javax.wsdl.extensions.http.HTTPBinding;
+import javax.wsdl.extensions.soap.SOAPAddress;
+import javax.wsdl.extensions.soap12.SOAP12Address;
+import javax.wsdl.extensions.soap12.SOAP12Binding;
+import javax.xml.namespace.QName;
+import javax.xml.ws.BindingType;
+import javax.xml.ws.RespectBindingFeature;
+import javax.xml.ws.Service;
+import javax.xml.ws.ServiceMode;
+import javax.xml.ws.WebServiceProvider;
+import javax.xml.ws.handler.PortInfo;
+import javax.xml.ws.soap.AddressingFeature;
+import javax.xml.ws.soap.MTOM;
+import javax.xml.ws.soap.MTOMFeature;
+import javax.xml.ws.soap.SOAPBinding;
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
+
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants.Configuration;
 import org.apache.axis2.client.ServiceClient;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.deployment.DeploymentException;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.OutInAxisOperation;
 import org.apache.axis2.description.OutOnlyAxisOperation;
@@ -30,6 +66,7 @@
 import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.SubmissionAddressingFeature;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
 import org.apache.axis2.jaxws.description.EndpointDescriptionWSDL;
@@ -42,42 +79,18 @@
 import org.apache.axis2.jaxws.description.builder.MDQConstants;
 import org.apache.axis2.jaxws.description.builder.WsdlComposite;
 import org.apache.axis2.jaxws.description.xml.handler.HandlerChainsType;
+import org.apache.axis2.jaxws.feature.ServerConfigurator;
+import org.apache.axis2.jaxws.feature.ServerFramework;
 import org.apache.axis2.jaxws.i18n.Messages;
+import org.apache.axis2.jaxws.server.config.AddressingConfigurator;
+import org.apache.axis2.jaxws.server.config.MTOMConfigurator;
+import org.apache.axis2.jaxws.server.config.RespectBindingConfigurator;
 import org.apache.axis2.jaxws.util.ClassLoaderUtils;
 import org.apache.axis2.jaxws.util.WSDL4JWrapper;
 import org.apache.axis2.wsdl.util.WSDLDefinitionWrapper;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import javax.jws.HandlerChain;
-import javax.jws.WebService;
-import javax.wsdl.Binding;
-import javax.wsdl.Definition;
-import javax.wsdl.Port;
-import javax.wsdl.extensions.ExtensibilityElement;
-import javax.wsdl.extensions.http.HTTPBinding;
-import javax.wsdl.extensions.soap.SOAPAddress;
-import javax.wsdl.extensions.soap12.SOAP12Address;
-import javax.wsdl.extensions.soap12.SOAP12Binding;
-import javax.xml.namespace.QName;
-import javax.xml.ws.BindingType;
-import javax.xml.ws.Service;
-import javax.xml.ws.ServiceMode;
-import javax.xml.ws.WebServiceProvider;
-import javax.xml.ws.handler.PortInfo;
-import javax.xml.ws.soap.SOAPBinding;
-
-import java.io.InputStream;
-import java.lang.annotation.Annotation;
-import java.net.URL;
-import java.security.PrivilegedAction;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeSet;
-
 /** @see ../EndpointDescription */
 /*
  * TODO: EndpointDescription should be created via AxisService objects and not directly from WSDL
@@ -87,6 +100,12 @@
  */
 class EndpointDescriptionImpl
         implements EndpointDescription, EndpointDescriptionJava, EndpointDescriptionWSDL {
+    private static final ServerConfigurator RESPECT_BINDING_CONFIGURATOR =
+        new RespectBindingConfigurator();
+    private static final ServerConfigurator ADDRESSING_CONFIGURATOR =
+        new AddressingConfigurator();
+    private static final ServerConfigurator MTOM_CONFIGURATOR =
+        new MTOMConfigurator();
 
     private ServiceDescriptionImpl parentServiceDescription;
     private AxisService axisService;
@@ -171,6 +190,10 @@
     
     private Map<String, CustomAnnotationProcessor> customAnnotationProcessors;
 
+    // Supports WebServiceFeatureAnnotations
+    private ServerFramework framework = new ServerFramework();
+
+    
     /**
      * Create a service-requester side EndpointDescription based on the WSDL port.  
      * Note that per the JAX-WS Spec (Final
@@ -471,6 +494,9 @@
                 processor.processTypeLevelAnnotation(this, annotation);
             }
         }
+        
+        // Configure any available WebServiceFeatures on the endpoint.
+        configureWebServiceFeatures();
     }
 
     /**
@@ -497,6 +523,8 @@
         addToAxisService();
 
         buildEndpointDescriptionFromAnnotations();
+        
+        configureWebServiceFeatures();
 
         // The anonymous AxisOperations are currently NOT added here.  The reason 
         // is that (for now) this is a SERVER-SIDE code path, and the anonymous operations
@@ -567,14 +595,18 @@
 
             if (composite.isDeprecatedServiceProviderConstruction()
                     || !composite.isServiceProvider()) {
+//            if (!getServiceDescriptionImpl().isDBCMap()) {
                 Class seiClass = null;
                 if (DescriptionUtils.isEmpty(seiClassName)) {
-                    // This is the client code path; the @WebServce will not have an endpointInterface member
-                    // so just build the EndpointInterfaceDesc based on the class itself.
+                    // TODO: (JLB) This is the client code path; the @WebServce will not have an endpointInterface member
+                    // For now, just build the EndpointInterfaceDesc based on the class itself.
+                    // TODO: The EID ctor doesn't correctly handle anything but an SEI at this
+                    //       point; e.g. it doesn't publish the correct methods of just an impl.
                     seiClass = composite.getCorrespondingClass();
                 } else {
-                    // This is the deprecated server-side introspection code for an impl that references an SEI
+                    // TODO: (JLB) This is the deprecated server-side introspection code for an impl that references an SEI
                     try {
+                        // TODO: Using Class forName() is probably not the best long-term way to get the SEI class from the annotation
                         seiClass = ClassLoaderUtils.forName(seiClassName, false,
                                                             ClassLoaderUtils.getContextClassLoader(this.axisService != null ? this.axisService.getClassLoader() : null));
                         // Catch Throwable as ClassLoader can throw an NoClassDefFoundError that
@@ -587,14 +619,17 @@
                 }
                 endpointInterfaceDescription = new EndpointInterfaceDescriptionImpl(seiClass, this);
             } else {
+                //TODO: Determine if we need logic here to determine implied SEI or not. This logic
+                //		may be handled by EndpointInterfaceDescription
+
                 if (DescriptionUtils.isEmpty(getAnnoWebServiceEndpointInterface())) {
 
-                    // Build the EndpointInterfaceDesc based on the class itself
+                    //TODO: Build the EndpointInterfaceDesc based on the class itself
                     endpointInterfaceDescription =
                             new EndpointInterfaceDescriptionImpl(composite, true, this);
 
                 } else {
-                    // Otherwise, build the EID based on the SEI composite
+                    //Otherwise, build the EID based on the SEI composite
                     endpointInterfaceDescription = new EndpointInterfaceDescriptionImpl(
                             getServiceDescriptionImpl().getDBCMap().get(seiClassName),
                             false,
@@ -1341,7 +1376,86 @@
 
         return handlerChainAnnotation;
     }
+
+    // ===========================================
+    // ANNOTATION: MTOM
+    // ===========================================
     
+    /*
+     * (non-Javadoc)
+     * @see org.apache.axis2.jaxws.description.EndpointDescription#isMTOMEnabled()
+     */
+    public boolean isMTOMEnabled() {
+        if (axisService != null) {
+            // We should cache this call here so we don't have to make
+            // it on every pass through.
+            Parameter enableMTOM = axisService.getParameter(Configuration.ENABLE_MTOM);
+            if (enableMTOM != null) {
+                return (Boolean) enableMTOM.getValue();
+            }
+        }
+        
+        return false;
+    }
+    
+    /*
+     * (non-Javadoc)
+     * @see org.apache.axis2.jaxws.description.EndpointDescription#getMTOMThreshold()
+     */
+    public int getMTOMThreshold() {
+        if (axisService != null) {
+            // We should cache this call here so we don't have to make
+            // it on every pass through.
+            Parameter mtomThreshold = axisService.getParameter(Configuration.MTOM_THRESHOLD);
+            if (mtomThreshold != null) {
+                return (Integer) mtomThreshold.getValue();
+            }
+        }
+        
+        return -1;
+    }
+    
+    // Get the specified WebServiceFeatureAnnotation
+    public Annotation getAnnoFeature(String id) {
+        return framework.getAnnotation(id);
+    }
+    
+    //The WebServiceFeatures should be configued last so that any other
+    //configuration can be overridden. Should only be called on the
+    //server side.
+    private void configureWebServiceFeatures() {
+    	framework.addConfigurator(RespectBindingFeature.ID, RESPECT_BINDING_CONFIGURATOR);
+    	
+    	String binding = getBindingType();
+    	
+    	if (isSOAPBinding(binding)) {
+    		framework.addConfigurator(AddressingFeature.ID, ADDRESSING_CONFIGURATOR);
+    		framework.addConfigurator(SubmissionAddressingFeature.ID, ADDRESSING_CONFIGURATOR);
+    		framework.addConfigurator(MTOMFeature.ID, MTOM_CONFIGURATOR);
+    	}
+    	
+        // The feature instances are stored on the composite from either the 
+        // Java class or from something else building the list and setting it there.
+        List<Annotation> features = composite.getWebServiceFeatures();
+        
+        if (features != null && features.size() > 0) {
+            // Add each of the annotation instances to the WebServiceFeature framework
+            Iterator<Annotation> itr = features.iterator();
+            while (itr.hasNext()) {
+                Annotation feature = (Annotation) itr.next();
+                framework.addAnnotation(feature);
+            }
+            
+            // Kick off the configuration of the WebServiceFeature instances.
+            framework.configure(this);
+        }
+        else {
+            if (log.isDebugEnabled()) {
+                log.debug("No WebServiceFeatureAnnotation instances were found on the composite.");
+            }
+        }   
+    }
+    
     private Definition getWSDLDefinition() {
         return ((ServiceDescriptionWSDL)getServiceDescription()).getWSDLDefinition();
     }
@@ -1465,6 +1579,16 @@
                     Messages.getMessage("addPortErr0", getPortQName().toString()));
         }
     }
+    
+    public static boolean isSOAPBinding(String url) {
+        if (url != null && (url.equals(SOAPBinding.SOAP11HTTP_BINDING) ||
+                url.equals(SOAPBinding.SOAP11HTTP_MTOM_BINDING) ||
+                url.equals(SOAPBinding.SOAP12HTTP_BINDING)|| 
+                url.equals(SOAPBinding.SOAP12HTTP_MTOM_BINDING))) {
+            return true;
+        }
+        return false;
+    }
 
     private boolean validateClientBindingID(String bindingId) {
         boolean isValid = true;
@@ -1756,6 +1880,20 @@
         }
         return string.toString();
     }
+    
+    /**
+     * Get an annotation.  This is wrappered to avoid a Java2Security violation.
+     * @param cls Class that contains annotation 
+     * @param annotation Class of requrested Annotation
+     * @return annotation or null
+     */
+    private static Annotation getAnnotation(final Class cls, final Class annotation) {
+        return (Annotation) AccessController.doPrivileged(new PrivilegedAction() {
+            public Object run() {
+                return cls.getAnnotation(annotation);
+            }
+        });
+    }
 }
 
 
Index: src/org/apache/axis2/jaxws/description/impl/DescriptionFactoryImpl.java
===================================================================
--- src/org/apache/axis2/jaxws/description/impl/DescriptionFactoryImpl.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/impl/DescriptionFactoryImpl.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -22,6 +22,9 @@
  * 
  */
 
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
+import org.apache.axis2.addressing.metadata.ServiceName;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.ClientConfigurationFactory;
@@ -328,6 +331,64 @@
         return endpointDesc;
     }
 
+    /**
+     * @see org.apache.axis2.jaxws.description.DescriptionFactory#updateEndpoint(ServiceDescription,
+     * Class, EndpointReference, String, DescriptionFactory.UpdateType)
+     */
+    public static EndpointDescription updateEndpoint(
+            ServiceDescription serviceDescription, Class sei, EndpointReference epr,
+            String addressingNamespace,
+            DescriptionFactory.UpdateType updateType) {
+        return updateEndpoint(serviceDescription, sei, epr, addressingNamespace, updateType, null, null);
+    }
+
+    /**
+     * @see org.apache.axis2.jaxws.description.DescriptionFactory#updateEndpoint(ServiceDescription,
+     * Class, EndpointReference, String, DescriptionFactory.UpdateType, Object)
+     */
+    public static EndpointDescription updateEndpoint(
+            ServiceDescription serviceDescription, Class sei, EndpointReference epr,
+            String addressingNamespace,
+            DescriptionFactory.UpdateType updateType,
+            Object sparseCompositeKey) {
+        return updateEndpoint(serviceDescription, sei, epr, addressingNamespace, updateType, null, sparseCompositeKey);
+    }
+
+    /**
+     * @see org.apache.axis2.jaxws.description.DescriptionFactory#updateEndpoint(ServiceDescription,
+     * Class, EndpointReference, String, DescriptionFactory.UpdateType, DescriptionBuilderComposite, Object)
+     */
+    public static EndpointDescription updateEndpoint(
+            ServiceDescription serviceDescription, Class sei, EndpointReference epr,
+            String addressingNamespace,
+            DescriptionFactory.UpdateType updateType,
+            DescriptionBuilderComposite composite,
+            Object sparseCompositeKey) {
+        QName portQName = null;
+        
+        try {
+            ServiceName serviceName = EndpointReferenceHelper.getServiceNameMetadata(epr, addressingNamespace);
+            QName serviceQName = serviceDescription.getServiceQName();
+            
+            //The javadoc says that a WebServiceException should be thrown if the service name
+            //in the EPR metadata does not match the service name in the WSDL of the JAX-WS
+            //service instance.
+            if (!serviceQName.equals(serviceName.getName()))
+                throw ExceptionFactory.makeWebServiceException("The service name of the endpoint reference does not match the service name of the service client.");
+            
+            //TODO The javadoc seems to suggest, inconsistently, that the port name can be
+            //resolved by looking in the following places: 1) the EPR metadata, 2) the SEI, and
+            //3) the WSDL. At the moment only 1) is implemented. May need to revisit the others.
+            portQName = new QName(serviceQName.getNamespaceURI(), serviceName.getEndpointName());
+        }
+        catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("An error occured updating the endpoint", e);
+        }
+        
+        return updateEndpoint(serviceDescription, sei, portQName, updateType, composite, sparseCompositeKey);
+    }
+
     public static ClientConfigurationFactory getClientConfigurationFactory() {
 
         if (clientConfigFactory == null) {
Index: src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- src/org/apache/axis2/jaxws/description/EndpointDescription.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/EndpointDescription.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -136,11 +136,27 @@
     public abstract QName getServiceQName();
 
     public abstract Service.Mode getServiceMode();
-
+    
     /**
+     * Signals whether or not MTOM has been turned on for the endpoint 
+     * based on the annotation configuration.
+     * 
+     * @return a boolean value 
+     */
+    public boolean isMTOMEnabled();
+    
+    /**
+     * If MTOM is enabled, returns the threshold value.
+     * 
+     * @return -1 if MTOM is not enabled, a positive integer value if 
+     * one was configured.
+     */
+    public int getMTOMThreshold();
+    
+    
+    /**
      * Return the DescriptionBuilderComposite, if any, used to build this service description.
      * @return
      */
     public DescriptionBuilderComposite getDescriptionBuilderComposite();
-
 }
\ No newline at end of file
Index: src/org/apache/axis2/jaxws/description/EndpointDescriptionJava.java
===================================================================
--- src/org/apache/axis2/jaxws/description/EndpointDescriptionJava.java	(.../trunk/java/modules/metadata)	(revision 614841)
+++ src/org/apache/axis2/jaxws/description/EndpointDescriptionJava.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -18,6 +18,8 @@
  */
 package org.apache.axis2.jaxws.description;
 
+import java.lang.annotation.Annotation;
+
 import javax.jws.WebService;
 import javax.xml.ws.BindingType;
 import javax.xml.ws.Service;
@@ -52,4 +54,6 @@
     public ServiceMode getAnnoServiceMode();
 
     public Service.Mode getAnnoServiceModeValue();
+    
+    public Annotation getAnnoFeature(String id);
 }
Index: src/org/apache/axis2/jaxws/server/config/MTOMConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/server/config/MTOMConfigurator.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/server/config/MTOMConfigurator.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.server.config;
+
+import javax.xml.ws.soap.MTOM;
+import javax.xml.ws.soap.MTOMFeature;
+
+import org.apache.axis2.Constants;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
+import org.apache.axis2.jaxws.feature.ServerConfigurator;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ *
+ */
+public class MTOMConfigurator implements ServerConfigurator {
+
+    private static Log log = LogFactory.getLog(MTOMConfigurator.class);
+    
+    /*
+     * (non-Javadoc)
+     * @see org.apache.axis2.jaxws.feature.WebServiceFeatureConfigurator#configure(org.apache.axis2.jaxws.description.EndpointDescription)
+     */
+    public void configure(EndpointDescription endpointDescription) {
+    	MTOM mtomAnnoation =
+    		(MTOM) ((EndpointDescriptionJava) endpointDescription).getAnnoFeature(MTOMFeature.ID);
+    	AxisService service = endpointDescription.getAxisService();
+    	
+    	//Disable MTOM
+    	Parameter enableMTOM = new Parameter(Constants.Configuration.ENABLE_MTOM, Boolean.FALSE);
+    	Parameter threshold = new Parameter(Constants.Configuration.MTOM_THRESHOLD, 0);
+        
+    	//TODO NLS enable.
+        if (mtomAnnoation == null)
+            throw ExceptionFactory.makeWebServiceException("The MTOM annotation was unspecified.");
+    	
+        //Enable MTOM.
+    	if (mtomAnnoation.enabled()) {
+            if (log.isDebugEnabled()) {
+                log.debug("Enabling MTOM via annotation.");
+            }
+    	    enableMTOM.setValue(Boolean.TRUE);
+    	}
+        
+        //Set the threshold value.
+        if (mtomAnnoation.threshold() > 0) {
+            if (log.isDebugEnabled()) {
+                log.debug("Setting MTOM threshold to [" + mtomAnnoation.threshold() + "].");
+            }
+            threshold.setValue(mtomAnnoation.threshold());
+        }
+    	
+    	try {
+    	    service.addParameter(enableMTOM);
+            service.addParameter(threshold);
+    	}
+    	catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Unable to enable MTOM.", e);    		
+    	}
+    }    
+}
Index: src/org/apache/axis2/jaxws/server/config/RespectBindingConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/server/config/RespectBindingConfigurator.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/server/config/RespectBindingConfigurator.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.server.config;
+
+import javax.xml.ws.RespectBinding;
+import javax.xml.ws.RespectBindingFeature;
+
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
+import org.apache.axis2.jaxws.feature.ServerConfigurator;
+
+/**
+ *
+ */
+public class RespectBindingConfigurator implements ServerConfigurator {
+
+    /*
+     *  (non-Javadoc)
+     * @see org.apache.axis2.jaxws.feature.WebServiceFeatureConfigurator#configure(org.apache.axis2.jaxws.description.EndpointDescription)
+     */
+    public void configure(EndpointDescription endpointDescription) {
+    	RespectBinding mtomAnnoation =
+    		(RespectBinding) ((EndpointDescriptionJava) endpointDescription).getAnnoFeature(RespectBindingFeature.ID);
+    	AxisService service = endpointDescription.getAxisService();
+    }
+}
Index: src/org/apache/axis2/jaxws/server/config/AddressingConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/server/config/AddressingConfigurator.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/server/config/AddressingConfigurator.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,138 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.server.config;
+
+import javax.xml.ws.soap.Addressing;
+import javax.xml.ws.soap.AddressingFeature;
+
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.addressing.SubmissionAddressing;
+import org.apache.axis2.jaxws.addressing.SubmissionAddressingFeature;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.feature.ServerConfigurator;
+
+/**
+ *
+ */
+public class AddressingConfigurator implements ServerConfigurator {
+
+    /*
+     *  (non-Javadoc)
+     * @see org.apache.axis2.jaxws.feature.WebServiceFeatureConfigurator#configure(org.apache.axis2.jaxws.description.EndpointDescription)
+     */
+    public void configure(EndpointDescription endpointDescription) {
+    	Addressing addressing =
+    		(Addressing) ((EndpointDescriptionJava) endpointDescription).getAnnoFeature(AddressingFeature.ID);
+    	SubmissionAddressing submissionAddressing =
+    		(SubmissionAddressing) ((EndpointDescriptionJava) endpointDescription).getAnnoFeature(SubmissionAddressingFeature.ID);
+    	AxisService service = endpointDescription.getAxisService();
+    	Parameter namespace = new Parameter(AddressingConstants.WS_ADDRESSING_VERSION, null);
+    	Parameter disable = new Parameter(AddressingConstants.DISABLE_ADDRESSING_HANDLERS, Boolean.FALSE);
+    	String addressingRequired = AddressingConstants.ADDRESSING_UNSPECIFIED;
+    	
+    	if (addressing != null && submissionAddressing != null) {
+            //Both annotations must have been specified.
+            boolean w3cAddressingEnabled = addressing.enabled();
+            boolean submissionAddressingEnabled = submissionAddressing.enabled();
+            
+            if (w3cAddressingEnabled && submissionAddressingEnabled) {
+            	namespace.setValue(null);
+
+                boolean w3cAddressingRequired = addressing.required();
+                boolean submissionAddressingRequired = submissionAddressing.required();
+
+                if (w3cAddressingRequired && submissionAddressingRequired)
+                	addressingRequired = AddressingConstants.ADDRESSING_REQUIRED;
+                else if (w3cAddressingRequired || submissionAddressingRequired)
+                	throw ExceptionFactory.makeWebServiceException("Illegal configuration.");
+            }
+            else if (w3cAddressingEnabled) {
+            	namespace.setValue(AddressingConstants.Final.WSA_NAMESPACE);
+            	
+            	if (addressing.required())
+            		addressingRequired = AddressingConstants.ADDRESSING_REQUIRED;
+            }
+            else if (submissionAddressingEnabled) {
+            	namespace.setValue(AddressingConstants.Submission.WSA_NAMESPACE);
+            	
+            	if (submissionAddressing.required())
+            		addressingRequired = AddressingConstants.ADDRESSING_REQUIRED;
+            }
+            else {
+            	disable.setValue(Boolean.TRUE);
+            }
+    	}
+    	else if (addressing != null) {
+            //The Addressing annotation must have been specified.
+            boolean w3cAddressingEnabled = addressing.enabled();
+
+            if (w3cAddressingEnabled) {
+            	namespace.setValue(AddressingConstants.Final.WSA_NAMESPACE);
+            	
+            	if (addressing.required())
+            		addressingRequired = AddressingConstants.ADDRESSING_REQUIRED;
+            }
+            else {
+            	namespace.setValue(AddressingConstants.Submission.WSA_NAMESPACE);
+            }
+    	}
+    	else if (submissionAddressing != null) {
+            //The SubmissionAddressing annotation must have been specified.
+            boolean submissionAddressingEnabled = submissionAddressing.enabled();
+
+            if (submissionAddressingEnabled) {
+            	namespace.setValue(AddressingConstants.Submission.WSA_NAMESPACE);
+            	
+            	if (submissionAddressing.required())
+            		addressingRequired = AddressingConstants.ADDRESSING_REQUIRED;
+            }
+            else {
+            	namespace.setValue(AddressingConstants.Final.WSA_NAMESPACE);
+            }                		
+    	}
+    	else {
+            //If neither were specified then this configurator should never run.
+            throw ExceptionFactory.makeWebServiceException("Both WS-Addressing annotations were unspecified.");
+    	}
+    	
+    	try {
+    		service.addParameter(namespace);
+    		service.addParameter(disable);
+    		service.setWSAddressingFlag(addressingRequired);
+            
+    		if (!(Boolean)disable.getValue()) {
+    			ServiceDescription sd = endpointDescription.getServiceDescription();
+    			AxisConfiguration axisConfig = sd.getAxisConfigContext().getAxisConfiguration();
+    			if (!axisConfig.isEngaged(Constants.MODULE_ADDRESSING))
+    				axisConfig.engageModule(Constants.MODULE_ADDRESSING);
+    		}
+    	}
+    	catch (Exception e) {
+            //TODO NLS enable.
+            throw ExceptionFactory.makeWebServiceException("Unable to engage the addressing module.", e);    		
+    	}
+    }
+}
Index: src/org/apache/axis2/jaxws/feature/ServerFramework.java
===================================================================
--- src/org/apache/axis2/jaxws/feature/ServerFramework.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/feature/ServerFramework.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.feature;
+
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
+
+import java.lang.annotation.Annotation;
+import java.util.HashMap;
+import java.util.IdentityHashMap;
+import java.util.Map;
+
+public class ServerFramework {
+    private static final Annotation[] ZERO_LENGTH_ARRAY = new Annotation[0];
+
+    private Map<String, ServerConfigurator> configuratorMap;
+    private Map<String, Annotation> annotationMap;
+    
+    public ServerFramework() {
+    	super();
+        configuratorMap = new HashMap<String, ServerConfigurator>();
+        annotationMap = new HashMap<String, Annotation>();
+    }
+    
+    public void addConfigurator(String id, ServerConfigurator configurator) {
+        configuratorMap.put(id, configurator);
+    }
+    
+    public boolean isValid(Annotation annotation) {
+        if (annotation == null)
+            return false;
+        
+        WebServiceFeatureAnnotation wsfAnnotation =
+        	annotation.annotationType().getAnnotation(WebServiceFeatureAnnotation.class);
+        
+        String id = null;
+        if (wsfAnnotation != null)
+        	id = wsfAnnotation.id();
+        
+        return configuratorMap.containsKey(id);
+    }
+    
+    public void addAnnotation(Annotation annotation) {
+        //TODO NLS enable.
+        if (!isValid(annotation))
+            throw ExceptionFactory.makeWebServiceException("Invalid or unsupported WebServiceFeature annotation, " + annotation);
+        
+        WebServiceFeatureAnnotation wsfAnnotation =
+        	annotation.annotationType().getAnnotation(WebServiceFeatureAnnotation.class);
+
+        annotationMap.put(wsfAnnotation.id(), annotation);
+    }
+    
+    public Annotation getAnnotation(String id) {
+        return annotationMap.get(id);
+    }
+    
+    public Annotation[] getAllAnnotations() {
+        return annotationMap.values().toArray(ZERO_LENGTH_ARRAY);
+    }
+    
+    public void configure(EndpointDescription endpointDescription) {
+        for (Annotation annotation : getAllAnnotations()) {
+            WebServiceFeatureAnnotation wsfAnnotation =
+            	annotation.annotationType().getAnnotation(WebServiceFeatureAnnotation.class);
+            
+            ServerConfigurator configurator = configuratorMap.get(wsfAnnotation.id());
+            configurator.configure(endpointDescription);
+        }
+    }
+}
Index: src/org/apache/axis2/jaxws/feature/ServerConfigurator.java
===================================================================
--- src/org/apache/axis2/jaxws/feature/ServerConfigurator.java	(.../trunk/java/modules/metadata)	(revision 0)
+++ src/org/apache/axis2/jaxws/feature/ServerConfigurator.java	(.../branches/java/jaxws21/modules/metadata)	(revision 614888)
@@ -0,0 +1,33 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.feature;
+
+import org.apache.axis2.jaxws.description.EndpointDescription;
+
+/**
+ * 
+ */
+public interface ServerConfigurator {
+    /**
+     * Perform server-side configuration for a <code>WebServiceFeature</code>.
+     * 
+     * @param endpointDescription
+     */
+    public void configure(EndpointDescription endpointDescription);
+}
