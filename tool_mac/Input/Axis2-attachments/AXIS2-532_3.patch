Index: maven.xml
===================================================================
--- maven.xml	(revision 390521)
+++ maven.xml	(working copy)
@@ -344,6 +344,8 @@
             <fileset dir="modules/addressing/target/classes"/>
             <fileset dir="modules/codegen/target/classes"/>
             <fileset dir="modules/adb/target/classes"/>
+	    <fileset dir="modules/clustering/target/classes"/>
+            <fileset dir="modules/session/target/classes"/>
             <fileset dir="modules/addressing/target/">
                 <include name="modules/addressing-${addressing_version}.mar"/>
             </fileset>
@@ -394,6 +396,16 @@
             <ant:fileset file="modules/java2wsdl/target/axis2-java2wsdl-${pom.currentVersion}.jar"/>
         </ant:copy>
 
+        <!-- Copy the clustering jar -->
+        <ant:copy toDir="target/temp/war/lib">
+            <ant:fileset file="modules/clustering/target/axis2-clustering-${pom.currentVersion}.jar"/>
+        </ant:copy>
+
+	<!-- Copy the session jar -->
+        <ant:copy toDir="target/temp/war/lib">
+            <ant:fileset file="modules/session/target/axis2-session-${pom.currentVersion}.jar"/>
+        </ant:copy>
+	
         <!-- Copy the codegen jar -->
         <ant:copy toDir="target/temp/war/lib">
             <ant:fileset file="modules/codegen/target/axis2-codegen-${pom.currentVersion}.jar"/>
@@ -624,6 +636,12 @@
         <ant:copy toDir="${std.bin.temp.dir}/lib">
             <ant:fileset file="modules/adb/target/axis2-adb-${pom.currentVersion}.jar"/>
             <ant:fileset file="modules/codegen/target/axis2-codegen-${pom.currentVersion}.jar"/>
+      
+            <!-- Copy the clustering jar -->
+	    <ant:fileset file="modules/clustering/target/axis2-clustering-${pom.currentVersion}.jar"/>
+           
+            <!-- Copy the session jar -->
+            <ant:fileset file="modules/session/target/axis2-session-${pom.currentVersion}.jar"/>
             <ant:fileset file="modules/jibx/target/axis2-jibx-${pom.currentVersion}.jar"/>
         </ant:copy>
 
@@ -678,7 +696,9 @@
                 <ant:include name="**/modules/codegen/**"/>
                 <ant:include name="**/modules/webapp/**"/>
                 <ant:include name="**/modules/jibx/**"/>
-                <ant:include name="**/modules/addressing/**"/>
+		<ant:include name="**/modules/addressing/**"/>
+		<ant:include name="**/modules/clustering/**"/>
+		<ant:include name="**/modules/session/**"/>
                 <ant:include name="**/modules/samples/**"/>
                 <ant:exclude name="**/SameServiceAddingTest.java"/>
                 <!-- TODO: This is failing in the distros. Must Fix it. -->
@@ -803,6 +823,8 @@
                 <ant:pathelement location="modules/java2wsdl/src"/>
                 <ant:pathelement location="modules/common/src"/>
                 <ant:pathelement location="modules/core/src"/>
+		<ant:pathelement location="modules/clustering/src"/>
+                <ant:pathelement location="modules/session/src"/>
                 <ant:pathelement location="modules/jaxws/src"/>
                 <ant:pathelement location="modules/jibx/src"/>
                 <ant:pathelement location="modules/saaj/src"/>
@@ -894,6 +916,8 @@
             <ant:fileset file="modules/common/target/axis2-common-${pom.currentVersion}.jar"/>
             <ant:fileset file="modules/adb/target/axis2-adb-${pom.currentVersion}.jar"/>
             <ant:fileset file="modules/codegen/target/axis2-codegen-${pom.currentVersion}.jar"/>
+            <ant:fileset file="modules/clustering/target/axis2-clustering-${pom.currentVersion}.jar"/>
+	    <ant:fileset file="modules/session/target/axis2-session-${pom.currentVersion}.jar"/>
             <ant:fileset file="modules/jibx/target/axis2-jibx-${pom.currentVersion}.jar"/>
             <ant:fileset file="modules/java2wsdl/target/axis2-java2wsdl-${pom.currentVersion}.jar"/>
         </ant:copy>
Index: modules/clustering/project.properties
===================================================================
--- modules/clustering/project.properties	(revision 0)
+++ modules/clustering/project.properties	(revision 0)
@@ -0,0 +1,17 @@
+# -------------------------------------------------------------------
+# Copyright 2001-2004 The Apache Software Foundation.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# -------------------------------------------------------------------
+
+maven.multiproject.type=jar
Index: modules/clustering/project.xml
===================================================================
--- modules/clustering/project.xml	(revision 0)
+++ modules/clustering/project.xml	(revision 0)
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<project>
+    <pomVersion>3</pomVersion>
+    <extend>../../etc/project.xml</extend>
+
+    <name>Apache Axis 2.0 - Clustering</name>
+    <id>axis2-clustering</id>
+    <groupId>axis2</groupId>
+    <description>Clsutering support for Axis 2.0</description>
+
+    <dependencies>        
+        <dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-core</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+	 <dependency>
+            <groupId>ws-commons</groupId>
+            <artifactId>axiom-api</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>ws-commons</groupId>
+            <artifactId>axiom-impl</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+       <dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-common</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+        <dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-session</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+
+        <!-- external JARs -->
+        <dependency>
+            <groupId>commons-logging</groupId>
+            <artifactId>commons-logging</artifactId>
+            <version>${commons.logging.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>log4j</groupId>
+            <artifactId>log4j</artifactId>
+            <version>${log4j.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>backport-util-concurrent</groupId>
+            <artifactId>backport-util-concurrent</artifactId>
+            <version>${backport_util_concurrent.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+    </dependencies>
+
+    <reports/>
+</project>
Index: modules/clustering/maven.xml
===================================================================
--- modules/clustering/maven.xml	(revision 0)
+++ modules/clustering/maven.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project default="jar"
+         xmlns:j="jelly:core"
+         xmlns:u="jelly:util"
+         xmlns:maven="jelly:maven"
+         xmlns:util="jelly:util"
+         xmlns:deploy="deploy"
+         xmlns:ant="jelly:ant">
+
+    <preGoal name="itest:compile">
+        <u:file var="file" name="${maven.itest.src}"/>
+        <j:if test="${!file.exists()}">
+            <j:expr value="${context.setVariable('maven.itest.skip', 'true')}"/>
+        </j:if>
+    </preGoal>
+</project>
Index: modules/clustering/src/org/apache/axis2/clustering/wadi/WADISessionManager.java
===================================================================
--- modules/clustering/src/org/apache/axis2/clustering/wadi/WADISessionManager.java	(revision 0)
+++ modules/clustering/src/org/apache/axis2/clustering/wadi/WADISessionManager.java	(revision 0)
@@ -0,0 +1,96 @@
+package org.apache.axis2.clustering.wadi;
+
+import java.util.Hashtable;
+
+import org.apache.axis2.session.Session;
+import org.apache.axis2.session.SessionIdFactory;
+import org.apache.axis2.session.SessionManager;
+
+public class WADISessionManager implements SessionManager {
+
+	public void touchSession(String sessionId) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void passivate(String sessionId) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public Session findSession(String id) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public long getCheckInterval() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public int getMaxActiveSessions() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public int getDefaultMaxInactiveInterval() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public Session createSession() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public Hashtable getSessions() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public void release(Session session) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setCheckInterval(int checkInterval) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setMaxActiveSessions(int max) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setSessions(Hashtable sessions) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setDefaultMaxInactiveInterval(int seconds) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void activateSession(String sessionId) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void passivateSession(String sessionId) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public SessionIdFactory getSessionIdFactory() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public void setSessionIdFactory(SessionIdFactory factory) {
+		// TODO Auto-generated method stub
+		
+	}
+
+}
Index: modules/clustering/src/org/apache/axis2/clustering/wadi/WADISession.java
===================================================================
--- modules/clustering/src/org/apache/axis2/clustering/wadi/WADISession.java	(revision 0)
+++ modules/clustering/src/org/apache/axis2/clustering/wadi/WADISession.java	(revision 0)
@@ -0,0 +1,65 @@
+package org.apache.axis2.clustering.wadi;
+
+import java.util.Enumeration;
+
+import org.apache.axis2.session.Session;
+
+public class WADISession implements Session {
+
+	public Object getAttribute(String name) throws IllegalStateException {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public Enumeration getAttributeNames() throws IllegalStateException {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public long getCreationTime() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public String getId() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public long getLastAccessedTime() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public int getMaxInactiveInterval() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public void invalidate() {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void removeAttribute(String name) throws IllegalStateException {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setAttribute(String name, Object value)
+			throws IllegalStateException {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setMaxInactiveInterval(int seconds) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void setLastAccessedTime(long time) {
+		// TODO Auto-generated method stub
+
+	}
+
+}
Index: modules/session/project.properties
===================================================================
--- modules/session/project.properties	(revision 0)
+++ modules/session/project.properties	(revision 0)
@@ -0,0 +1,17 @@
+# -------------------------------------------------------------------
+# Copyright 2001-2004 The Apache Software Foundation.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# -------------------------------------------------------------------
+
+maven.multiproject.type=jar
Index: modules/session/project.xml
===================================================================
--- modules/session/project.xml	(revision 0)
+++ modules/session/project.xml	(revision 0)
@@ -0,0 +1,95 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<project>
+    <pomVersion>3</pomVersion>
+    <extend>../../etc/project.xml</extend>
+
+    <name>Apache Axis 2.0 - Session</name>
+    <id>axis2-session</id>
+    <groupId>axis2</groupId>
+    <description>Session management for Axis 2.0</description>
+
+    <dependencies>        
+        <dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-core</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+	 <dependency>
+            <groupId>ws-commons</groupId>
+            <artifactId>axiom-api</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>ws-commons</groupId>
+            <artifactId>axiom-impl</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+       <dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-common</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+
+        <!-- external JARs -->
+        <dependency>
+            <groupId>commons-logging</groupId>
+            <artifactId>commons-logging</artifactId>
+            <version>${commons.logging.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>${stax.impl.groupid}</groupId>
+            <artifactId>${stax.impl.artifactid}</artifactId>
+            <version>${stax.impl.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>stax</groupId>
+            <artifactId>stax-api</artifactId>
+            <version>${stax.api.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+
+        <dependency>
+            <groupId>log4j</groupId>
+            <artifactId>log4j</artifactId>
+            <version>${log4j.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>backport-util-concurrent</groupId>
+            <artifactId>backport-util-concurrent</artifactId>
+            <version>${backport_util_concurrent.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+    </dependencies>
+
+    <reports/>
+</project>
Index: modules/session/maven.xml
===================================================================
--- modules/session/maven.xml	(revision 0)
+++ modules/session/maven.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project default="jar"
+         xmlns:j="jelly:core"
+         xmlns:u="jelly:util"
+         xmlns:maven="jelly:maven"
+         xmlns:util="jelly:util"
+         xmlns:deploy="deploy"
+         xmlns:ant="jelly:ant">
+
+    <preGoal name="itest:compile">
+        <u:file var="file" name="${maven.itest.src}"/>
+        <j:if test="${!file.exists()}">
+            <j:expr value="${context.setVariable('maven.itest.skip', 'true')}"/>
+        </j:if>
+    </preGoal>
+</project>
Index: modules/session/src/org/apache/axis2/session/SessionManagerProxy.java
===================================================================
--- modules/session/src/org/apache/axis2/session/SessionManagerProxy.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/SessionManagerProxy.java	(revision 0)
@@ -0,0 +1,94 @@
+package org.apache.axis2.session;
+
+import java.util.Hashtable;
+
+public class SessionManagerProxy implements SessionManager {
+
+	private SessionManager _delegate;
+	
+	public SessionManagerProxy(){
+		_delegate = new NullSessionManager();
+	}
+	
+	public SessionManagerProxy(SessionManager delegate){
+		_delegate = delegate;
+	}
+	
+	public void activateSession(String sessionId) {
+		_delegate.activateSession(sessionId);
+	}
+
+	public Session findSession(String id) {
+		return _delegate.findSession(id);
+	}
+
+	public long getCheckInterval() {
+		return _delegate.getCheckInterval();
+	}
+
+	public int getMaxActiveSessions() {
+		return _delegate.getMaxActiveSessions();
+	}
+
+	public int getDefaultMaxInactiveInterval() {
+		return _delegate.getDefaultMaxInactiveInterval();
+	}
+
+	/**
+	 * Session Manager Decorators can decorate this function
+	 * by either completly ignoring the delegate function
+	 * or by decorating the actual session obj
+	 */
+	public Session createSession() {
+		return _delegate.createSession();
+	}
+
+	public Hashtable getSessions() {
+		return _delegate.getSessions();
+	}
+
+	public void release(Session session) {
+		_delegate.release(session);	
+	}
+
+	public void setCheckInterval(int checkInterval) {
+		_delegate.setCheckInterval(checkInterval);
+
+	}
+
+	public void setMaxActiveSessions(int max) {
+		_delegate.setMaxActiveSessions(max);
+	}
+
+	public void setSessions(Hashtable sessions) {
+		_delegate.setSessions(sessions);
+	}
+
+	public void setDefaultMaxInactiveInterval(int seconds) {
+		_delegate.setDefaultMaxInactiveInterval(seconds);
+	}
+
+	public SessionManager getDelegate() {
+		return _delegate;
+	}
+
+	public void setDelegate(SessionManager _delegate) {
+		this._delegate = _delegate;
+	}
+	
+	public String toString(){
+		return this.getClass() + "(" + _delegate.toString() + ")";
+	}
+
+	public void passivateSession(String sessionId) {
+		this._delegate.passivateSession(sessionId);		
+	}
+
+	public void setSessionIdFactory(SessionIdFactory factory) {
+		_delegate.setSessionIdFactory(factory);		
+	}
+
+	public SessionIdFactory getSessionIdFactory() {
+		return _delegate.getSessionIdFactory();
+	}
+}
Index: modules/session/src/org/apache/axis2/session/persistance/TransientSessionManager.java
===================================================================
--- modules/session/src/org/apache/axis2/session/persistance/TransientSessionManager.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/persistance/TransientSessionManager.java	(revision 0)
@@ -0,0 +1,23 @@
+package org.apache.axis2.session.persistance;
+
+import org.apache.axis2.session.NullSessionManager;
+import org.apache.axis2.session.Session;
+import org.apache.axis2.session.SessionIdFactory;
+
+public class TransientSessionManager extends NullSessionManager {
+	
+	SessionIdFactory sessionIdFactory;
+	
+	public Session createSession() {	
+		Session session = new TransientSession(sessionIdFactory.generateSessionId());
+		return session;
+	}
+	
+	public void setSessionIdFactory(SessionIdFactory factory) {
+		sessionIdFactory = factory;
+	}
+
+	public SessionIdFactory getSessionIdFactory() {
+		return sessionIdFactory;
+	}
+}
Index: modules/session/src/org/apache/axis2/session/persistance/TransientSession.java
===================================================================
--- modules/session/src/org/apache/axis2/session/persistance/TransientSession.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/persistance/TransientSession.java	(revision 0)
@@ -0,0 +1,92 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.session.persistance;
+
+import java.util.Enumeration;
+import java.util.Hashtable;
+
+import org.apache.axis2.session.Session;
+
+/**
+ * Session attributes are going to be in memoery. * 
+ * This session will not survive a restart.
+
+ */
+public class TransientSession implements Session {
+	
+	private Hashtable _attributes = new Hashtable(); 
+	private String _sessionId;
+	private long _creationTime = 0L;
+	private long _lastAccessedTime = 0L;
+	
+	/**
+	 * Max inactive time is in seconds
+	 * and the default value is 5 mins
+	 */
+	private int _maxInactiveInterval = 300;
+	
+	public TransientSession(String sessionId) {
+		_sessionId = sessionId;
+		_creationTime = System.currentTimeMillis(); 
+	}
+	
+	public Object getAttribute(String name) {
+		return _attributes.get(name);
+	}
+
+	public Enumeration getAttributeNames() {
+		return _attributes.keys();
+	}
+
+	public long getCreationTime() {
+		return _creationTime;
+	}
+
+	public String getId() {
+		return _sessionId;
+	}
+
+	public long getLastAccessedTime() {
+		return _lastAccessedTime;
+	}
+
+	public int getMaxInactiveInterval() {
+		return _maxInactiveInterval;
+	}
+
+	public void invalidate() {
+		_attributes = null;
+	}
+
+	public void removeAttribute(String name) {
+		_attributes.remove(name);
+	}
+
+	public void setAttribute(String name, Object value) {
+		_attributes.put(name,value);
+
+	}
+
+	public void setMaxInactiveInterval(int seconds) {
+		_maxInactiveInterval = seconds;
+	}
+	
+	public void setLastAccessedTime(long time) {
+		_lastAccessedTime = time;
+	}
+
+}
Index: modules/session/src/org/apache/axis2/session/SessionHandler.java
===================================================================
--- modules/session/src/org/apache/axis2/session/SessionHandler.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/SessionHandler.java	(revision 0)
@@ -0,0 +1,94 @@
+package org.apache.axis2.session;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.handlers.AbstractHandler;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+public class SessionHandler extends AbstractHandler {
+
+	private static final long serialVersionUID = -8911008722617703329L;
+	private QName sessionIdHeader = new QName(Constants.AXIS2_NAMESPACE_URI,"sessionId");
+	protected Log logger = LogFactory.getLog(getClass());
+	
+	public void invoke(MessageContext msgContext) throws AxisFault {
+		
+		// check for sessionId header
+		EndpointReference refTo = msgContext.getTo();
+		
+		if(refTo != null && refTo.getAllReferenceParameters() != null ){
+			String sessionId = ((OMElement)refTo.getAllReferenceParameters().get(sessionIdHeader)).getText();
+						
+			// if sessionId header is present
+			if(sessionId == null || sessionId.trim().equals("")){
+				// else create a sessionId and request session manager to create new session
+				logger.debug("-----------Coundn't find the sesson id ref params-------------------");					
+				createSessionNewSession(msgContext);			
+				logger.debug("-----------creating new session "+ msgContext.getSession().getId() + "-------------------");	
+				logger.debug("----------- new session "+ msgContext.getSession() + "-------------------");	
+			}else{
+				logger.debug("-----------Found the sesson id ref params " + sessionId + "-------------------");			
+				retriveSession(msgContext,sessionId);
+				logger.debug("----------- old session "+ msgContext.getSession() + "-------------------");	
+			}			
+			
+		}else {
+			// else create a sessionId and request session manager to create new session
+			createSessionNewSession(msgContext);	
+		}
+
+	}
+	
+	private void retriveSession(MessageContext msgContext, String sessionId) throws AxisFault{
+		SessionManager sessionManager = retriveSessionManager(msgContext);
+		if (sessionManager == null || sessionManager instanceof NullSessionManager){
+			throw new AxisFault("Session Mannagement is not configured properly");
+		}
+		Session session = sessionManager.findSession(sessionId);
+		sessionManager.activateSession(sessionId);
+		msgContext.setSession(session); 
+	}
+
+	private void createSessionNewSession(MessageContext msgContext)throws AxisFault{
+		SessionManager sessionManager = retriveSessionManager(msgContext);
+		
+		logger.debug("----------- Session Manager "+ sessionManager + "-------------------");	
+		
+		if (sessionManager == null || sessionManager instanceof NullSessionManager){
+			throw new AxisFault("Session Mannagement is not configured properly");
+		}
+		Session session = sessionManager.createSession();
+		msgContext.setSession(session); 
+	}
+
+	private SessionManager retriveSessionManager(MessageContext msgContext) {
+		/*
+		
+		// first check if there is a session manager for the service
+		AxisService service = msgContext.getAxisService();
+		if (service !=null && service.getSessionManager() != null){
+			return service.getSessionManager();
+		}
+		
+		// then check if there is a session manager for the group
+		AxisServiceGroup serviceGrp = msgContext.getAxisServiceGroup();
+		if (serviceGrp !=null && serviceGrp.getSessionManager() != null){
+			return serviceGrp.getSessionManager();			
+		}*/		
+		
+		// if not then grab the gloabl session manager
+		AxisConfiguration axisConfig = msgContext.getConfigurationContext().getAxisConfiguration();
+		if (axisConfig !=null && axisConfig.getSessionManager() != null){
+			return axisConfig.getSessionManager();			
+		}
+		
+		return new NullSessionManager();
+	}	
+}
Index: modules/session/src/org/apache/axis2/session/EndOfRequestHandler.java
===================================================================
--- modules/session/src/org/apache/axis2/session/EndOfRequestHandler.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/EndOfRequestHandler.java	(revision 0)
@@ -0,0 +1,91 @@
+package org.apache.axis2.session;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.AddressingConstants.Submission;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ServiceContext;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.handlers.AbstractHandler;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+public class EndOfRequestHandler extends AbstractHandler {
+
+	private static final long serialVersionUID = -6745999612389939682L;
+	private QName sessionIdHeader = new QName(Constants.AXIS2_NAMESPACE_URI,"sessionId");
+	protected Log logger = LogFactory.getLog(getClass());
+	
+	public void invoke(MessageContext msgContext) throws AxisFault {
+		Session session =  msgContext.getSession();
+		if(session != null){
+			logger.debug("-----------Found the sesson " + session.getId() + "-------------------");
+			passivateSession(msgContext,session);
+			// need to add WSA headers to the out going SOAP envelope
+			addSessionIdToMessage(msgContext,session);
+	        
+		}else{
+			logger.debug("-----------Coundn't find the sesson-------------------");
+		}		
+	}
+	
+	private void passivateSession(MessageContext msgContext, Session session) throws AxisFault{
+		SessionManager sessionManager = retriveSessionManager(msgContext);
+		if (sessionManager == null || sessionManager instanceof NullSessionManager){
+			throw new AxisFault("Session Mannagement is not configured properly");
+		}		
+		sessionManager.passivateSession(session.getId());
+	}
+	
+	private SessionManager retriveSessionManager(MessageContext msgContext) {
+		/*
+		
+		// first check if there is a session manager for the service
+		AxisService service = msgContext.getAxisService();
+		if (service !=null && service.getSessionManager() != null){
+			return service.getSessionManager();
+		}
+		
+		// then check if there is a session manager for the group
+		AxisServiceGroup serviceGrp = msgContext.getAxisServiceGroup();
+		if (serviceGrp !=null && serviceGrp.getSessionManager() != null){
+			return serviceGrp.getSessionManager();			
+		}*/		
+		
+		// if not then grab the gloabl session manager
+		AxisConfiguration axisConfig = msgContext.getConfigurationContext().getAxisConfiguration();
+		if (axisConfig !=null && axisConfig.getSessionManager() != null){
+			return axisConfig.getSessionManager();			
+		}
+		
+		return new NullSessionManager();
+	}
+	
+	private void addSessionIdToMessage(MessageContext msgContext, Session session){
+		
+		EndpointReference epr = msgContext.getReplyTo();
+		if(epr == null){		
+            epr = msgContext.getOptions().getReplyTo();
+            if(epr == null){
+            	ServiceContext serviceContext = msgContext.getServiceContext();
+                if (serviceContext != null &&
+                        serviceContext.getMyEPR() != null) {
+                    epr = serviceContext.getMyEPR();
+                } else {
+                    // setting anonymous URI. Defaulting to Final.
+                    epr = new EndpointReference(Submission.WSA_ANONYMOUS_URL );
+                }
+            }
+	        epr.setName("ReplyTo");
+	        epr.addReferenceParameter(sessionIdHeader,session.getId());
+	        msgContext.setReplyTo(epr);
+		}else{
+			epr.addReferenceParameter(sessionIdHeader,session.getId());
+	        msgContext.setReplyTo(epr);
+		}
+	}
+}
+	
Index: modules/session/src/org/apache/axis2/session/Axis2SessionManager.java
===================================================================
--- modules/session/src/org/apache/axis2/session/Axis2SessionManager.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/Axis2SessionManager.java	(revision 0)
@@ -0,0 +1,170 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.session;
+
+import java.util.Hashtable;
+import java.util.Iterator;
+
+public class Axis2SessionManager extends SessionManagerProxy {
+
+	private Hashtable _sessions = new Hashtable();
+	private int _defaultMaxInactiveInterval = 300; // in seconds, and defaults to 5 mins
+	private long _checkInterval = 60000;  // in millis, default is 1 min 
+	private int _maxActiveSessions = -1; // Defaults to -1 which is unlimted 
+	
+	public Axis2SessionManager() {
+		super();
+		startHealthChecker();
+	}
+	
+	public Axis2SessionManager(SessionManager delegate) {
+		super(delegate);
+		_sessions = delegate.getSessions();
+		// if it was transient then no need to worry about the sessions
+		if(_sessions ==  null){
+			_sessions = new Hashtable();
+		}else{
+			wrapSessions();
+		}
+		startHealthChecker();
+	}
+	
+	private void startHealthChecker(){
+		Thread t = new Thread(new SessionHealthChecker(),"SessionMannager <Session Health Checker>");
+		t.start();
+	}
+	
+	private void wrapSessions(){
+		for (Iterator keys = _sessions.keySet().iterator(); keys.hasNext();) {
+			String key = (String)keys.next();
+			Axis2Session session = new Axis2Session((Session) _sessions
+					.get(key));
+			_sessions.put(key,session);
+		}
+	}
+	
+	public void activateSession(String sessionId) {
+		Session session = findSession(sessionId);
+		if(session != null){	
+			((Axis2Session)session).touch();
+		}
+		getDelegate().activateSession(sessionId);
+	}
+
+	public void passivateSession(String sessionId) {
+		Session session = findSession(sessionId);
+		if(session != null){	
+			((Axis2Session)session).passivate();
+		}
+		getDelegate().passivateSession(sessionId);
+	}
+	
+	public Session findSession(String id) {
+		Session session = (Session)_sessions.get(id);
+		// if session is not local then it will migrate the session
+		// if a replicated session manager is present
+		if(session == null){
+			session = getDelegate().findSession(id);
+		}
+		
+		return session;
+	}
+
+	public long getCheckInterval() {
+		return _checkInterval;
+	}
+
+	public int getMaxActiveSessions() {
+		return _maxActiveSessions;
+	}
+
+	public int getDefaultMaxInactiveInterval() {
+		return _defaultMaxInactiveInterval;
+	}
+
+	public Session createSession() {
+		Session delegate = getDelegate().createSession();
+		delegate.setMaxInactiveInterval(this._defaultMaxInactiveInterval);
+		
+		Axis2Session session = new Axis2Session(
+				new SerializableSession(delegate));
+		
+		session.touch();
+		_sessions.put(session.getId(),session);
+		
+		return session;
+	}
+
+	public Hashtable getSessions() {
+		return _sessions;
+	}
+
+	public void release(String sessionId) {
+		release((Session)_sessions.get(sessionId));
+	}
+	
+	public void release(Session session) {
+		if(session != null){	
+			session.invalidate();
+			_sessions.remove(session.getId());
+			getDelegate().release(session);
+			session = null;
+		}	
+	}
+
+	public void setCheckInterval(int checkInterval) {
+		_checkInterval = checkInterval;
+	}
+
+	public void setMaxActiveSessions(int maxActiveSessions) {
+		_maxActiveSessions = maxActiveSessions;
+	}
+
+	public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval) {
+		this._defaultMaxInactiveInterval = defaultMaxInactiveInterval;
+	}
+
+	public void setSessions(Hashtable sessions) {
+		_sessions = sessions;
+	}
+	
+	private class SessionHealthChecker implements Runnable{
+
+		public void run() {
+			
+			for(Iterator keys = _sessions.keySet().iterator();keys.hasNext();){
+				Session session = (Session)_sessions.get(keys.next());
+				if (session != null){
+					long checkInterval = System.currentTimeMillis() - session.getMaxInactiveInterval()*1000;
+					if(session.getLastAccessedTime() <= checkInterval){
+						//need to expire the session
+						session.invalidate();
+					}
+				}
+			}
+			
+			try{
+				
+				Thread.sleep(_checkInterval);
+				
+			}catch(Exception e){
+				e.printStackTrace();
+			}
+		}
+		
+	}
+}
Index: modules/session/src/org/apache/axis2/session/SessionProxy.java
===================================================================
--- modules/session/src/org/apache/axis2/session/SessionProxy.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/SessionProxy.java	(revision 0)
@@ -0,0 +1,68 @@
+package org.apache.axis2.session;
+
+import java.util.Enumeration;
+
+public class SessionProxy implements Session {
+
+	protected Session _delegate;
+	
+	public SessionProxy(Session delegate){
+		_delegate = delegate;
+	}
+	
+	public Object getAttribute(String name) {
+		return _delegate.getAttribute(name);
+	}
+
+	public Enumeration getAttributeNames() {
+		return _delegate.getAttributeNames();
+	}
+
+	public long getCreationTime() {
+		return _delegate.getCreationTime();
+	}
+
+	public String getId() {
+		return _delegate.getId();
+	}
+
+	public long getLastAccessedTime() {
+		return _delegate.getLastAccessedTime();
+	}
+
+	public int getMaxInactiveInterval() {
+		return _delegate.getMaxInactiveInterval();
+	}
+
+	public void invalidate() {
+		_delegate.invalidate();
+	}
+
+	public void removeAttribute(String name) {
+		_delegate.removeAttribute(name);
+	}
+
+	public void setAttribute(String name, Object value) {
+		_delegate.setAttribute(name,value);
+	}
+
+	public void setMaxInactiveInterval(int seconds) {
+		_delegate.setMaxInactiveInterval(seconds);
+	}
+
+	public void setLastAccessedTime(long time) {
+		_delegate.setLastAccessedTime(time);
+	}
+
+	public Session getDelegate() {
+		return _delegate;
+	}
+
+	public void setDelegate(Session _delegate) {
+		this._delegate = _delegate;
+	}
+	
+	public String toString(){
+		return this.getClass() + "(" + _delegate.toString() + ")";
+	}
+}
Index: modules/session/src/org/apache/axis2/session/Axis2Session.java
===================================================================
--- modules/session/src/org/apache/axis2/session/Axis2Session.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/Axis2Session.java	(revision 0)
@@ -0,0 +1,88 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.session;
+
+import java.util.Enumeration;
+
+/**
+ * 
+ * Attributes should be stored with care and should be serializable
+ * Storing large amounts of data are not recomended
+ * 
+ * This is intended to be a lightweight model
+ *
+ */
+public class Axis2Session extends SessionProxy{
+
+	  
+	public final static int PASSIVE = 0;
+	public final static int ACTIVE = 1;
+	public final static int EXPIRED = 2;
+
+	private int _state = ACTIVE;
+	
+	public Axis2Session(Session delegate){
+		super(delegate);
+	}
+	
+	public Object getAttribute(String name) {
+		if (getState() == EXPIRED){
+			throw new IllegalStateException("Session has Expired");
+		}
+		return _delegate.getAttribute(name);
+	}
+
+	public Enumeration getAttributeNames() {
+		if (getState() == EXPIRED){
+			throw new IllegalStateException("Session has Expired");
+		}
+		return _delegate.getAttributeNames();
+	}
+
+	public void removeAttribute(String name) {
+		if (getState() == EXPIRED){
+			throw new IllegalStateException("Session has Expired");
+		}
+		_delegate.removeAttribute(name);
+	}
+
+	public void setAttribute(String name, Object value) {
+		if (getState() == EXPIRED){
+			throw new IllegalStateException("Session has Expired");
+		}
+		_delegate.setAttribute(name,value);
+	}
+	
+	public int getState(){
+		return _state;
+	}
+
+	public void invalidate() {
+		_state = EXPIRED;
+		getDelegate().invalidate();
+	}
+
+	public void touch() {		
+		_state = ACTIVE;
+		setLastAccessedTime(System.currentTimeMillis());
+	}
+
+	public void passivate() {
+		_state = PASSIVE;
+		setLastAccessedTime(System.currentTimeMillis());
+	}
+
+}
Index: modules/session/src/org/apache/axis2/session/SerializableSession.java
===================================================================
--- modules/session/src/org/apache/axis2/session/SerializableSession.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/SerializableSession.java	(revision 0)
@@ -0,0 +1,18 @@
+package org.apache.axis2.session;
+
+import java.io.Serializable;
+
+public class SerializableSession extends SessionProxy {
+
+	public SerializableSession(Session delegate) {
+		super(delegate);
+	}
+	
+	public void setAttribute(String name, Object value) {
+		if(! (value instanceof Serializable) ){
+			throw new IllegalArgumentException("The value for attribute " + name + " is not serializable");
+		}
+		getDelegate().setAttribute(name,value);
+	}
+
+}
Index: modules/session/src/org/apache/axis2/session/DefaultSessionManagerFactory.java
===================================================================
--- modules/session/src/org/apache/axis2/session/DefaultSessionManagerFactory.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/DefaultSessionManagerFactory.java	(revision 0)
@@ -0,0 +1,51 @@
+/*
+* Copyright 2004-2006 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.session;
+
+/**
+ * a basic session manager factory that builds base 
+ * session manager and several decorators that wraps it
+ *
+ */
+public class DefaultSessionManagerFactory implements SessionManagerFactory{
+	
+	public SessionManager createSessionManager(ClassLoader classLoader,String[] classNames) throws IllegalArgumentException {
+		SessionManager sessionManager = null;
+		try{
+			// iterate through the list
+			for(int i=0; i<classNames.length; i++){
+				Class clazz = Class.forName(classNames[i], true,
+    							Thread.currentThread().getContextClassLoader());
+				Object obj = clazz.newInstance();
+				if(sessionManager == null){
+					sessionManager = (SessionManager)obj;
+				}else{
+					if (sessionManager instanceof SessionManagerProxy){
+						((SessionManagerProxy)sessionManager).setDelegate((SessionManager)obj);
+					}
+				}
+			}
+		}catch(Exception e){
+			IllegalArgumentException ex = new IllegalArgumentException("Error building Session Manager");
+			ex.initCause(e);
+			throw ex;
+		}
+		
+		return sessionManager;
+	}
+
+}
Index: modules/session/src/org/apache/axis2/session/DefaultSessionIdFactory.java
===================================================================
--- modules/session/src/org/apache/axis2/session/DefaultSessionIdFactory.java	(revision 0)
+++ modules/session/src/org/apache/axis2/session/DefaultSessionIdFactory.java	(revision 0)
@@ -0,0 +1,17 @@
+package org.apache.axis2.session;
+
+import org.apache.axis2.util.UUIDGenerator;
+
+public class DefaultSessionIdFactory implements SessionIdFactory {
+
+	private static SessionIdFactory instance_ = new DefaultSessionIdFactory();
+	
+	public SessionIdFactory instance(){
+		return instance_;
+	}
+	
+	public String generateSessionId() {
+		return UUIDGenerator.getUUID();
+	}
+
+}
Index: modules/core/conf/axis2.xml
===================================================================
--- modules/core/conf/axis2.xml	(revision 390521)
+++ modules/core/conf/axis2.xml	(working copy)
@@ -102,10 +102,10 @@
     <!-- Comment this to disable Addressing -->
     <module ref="addressing"/>
 
-    <!--Configuring module , providing parameters for modules whether they refer or not-->
-    <!--<moduleConfig name="addressing">-->
-    <!--<parameter name="addressingPara" locked="false">N/A</parameter>-->
-    <!--</moduleConfig>-->
+    <!-- -Configuring module , providing parameters for modules whether they refer or not-->
+    <moduleConfig name="addressing">
+      <parameter name="addressingPara" locked="false">N/A</parameter>
+    </moduleConfig>
 
     <!-- ================================================= -->
     <!-- Phases  -->
@@ -113,7 +113,12 @@
     <phaseOrder type="inflow">
         <!--  System pre defined phases       -->
         <phase name="TransportIn"/>
-        <phase name="PreDispatch"/>
+        <phase name="PreDispatch">
+	    <handler name="SessionHandler"
+                     class="org.apache.axis2.session.SessionHandler">
+                <order phase="PreDispatch" phaseLast="true"/>
+            </handler>
+	</phase>
         <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
             <handler name="RequestURIBasedDispatcher"
                      class="org.apache.axis2.engine.RequestURIBasedDispatcher">
@@ -149,7 +154,12 @@
         <!--system predefined phase-->
         <!--these phase will run irrespective of the service-->
         <phase name="PolicyDetermination"/>
-        <phase name="MessageOut"/>
+        <phase name="MessageOut">
+            <handler name="EndOfRequestHandler"
+                     class="org.apache.axis2.session.EndOfRequestHandler">
+                <order phase="MessageOut" phaseFirst="true"/>
+            </handler>
+	</phase>
     </phaseOrder>
     <phaseOrder type="INfaultflow">
         <!--      user can add his own phases to this area  -->
@@ -161,5 +171,39 @@
         <phase name="PolicyDetermination"/>
         <phase name="MessageOut"/>
     </phaseOrder>
+
+    <!-- ================================================= -->
+    <!-- Session Management and Clustering  -->
+    <!-- Comment this section on client side, no session management is needed for client side -->
+    <!-- ================================================= -->
+    <sessionManagerFactory class="org.apache.axis2.session.DefaultSessionManagerFactory">
+	<sessionManager class="org.apache.axis2.session.Axis2SessionManager">
+	   <maxNoOfActiveSessions>50</maxNoOfActiveSessions>
+	   <!-- in seconds, defaults to 5 mins -->
+	   <maxInactiveTime>300</maxInactiveTime>
+           <checkInterval>300</checkInterval>
+           <sessionIdFactory class="org.apache.axis2.session.DefaultSessionIdFactory"/>
+           <!--
+              The following options are available for Session Management
+              1.) Use TransientSessionManager if u only need in memory session management
+
+	      2.) Use PersistantSessionManager if u need to persist sessions localy, sessions
+                  will survive a restart (Not supported yet)
+	
+              3.) Use WADISessionManager if u need to cluster your sessions
+
+              4.) Use your own MySessionManager for your custom needs
+            -->
+
+	   <delegate class="org.apache.axis2.session.persistance.TransientSessionManager"/>
+
+	   <!-- (not supported yet)
+	   <delegate class="org.apache.axis2.session.persistance.PersistantSessionManager"/>
+           -->
+	   <!-- (not supported yet)
+	   <delegate class="org.apache.axis2.clustering.wadi.WADISessionManager"/>
+           -->
+       </sessionManager>
+    </sessionManagerFactory> 
 </axisconfig>
 
Index: modules/core/src/org/apache/axis2/deployment/AxisConfigBuilder.java
===================================================================
--- modules/core/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(revision 390521)
+++ modules/core/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(working copy)
@@ -17,6 +17,14 @@
 
 package org.apache.axis2.deployment;
 
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLStreamException;
+
 import org.apache.axiom.om.OMAttribute;
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
@@ -37,19 +45,12 @@
 import org.apache.axis2.transport.TransportListener;
 import org.apache.axis2.transport.TransportSender;
 
-import javax.xml.namespace.QName;
-import javax.xml.stream.XMLStreamException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-
 public class AxisConfigBuilder extends DescriptionBuilder {
 
     private DeploymentEngine engine;
 
     public AxisConfigBuilder(InputStream serviceInputStream, DeploymentEngine engine,
-                             AxisConfiguration axisConfiguration) {
+                             AxisConfiguration axisConfiguration) {    	
         super(serviceInputStream, axisConfiguration);
         this.engine = engine;
     }
@@ -126,13 +127,21 @@
             if (defaultModuleVerionElement != null) {
                 processDefaultModuleVersions(defaultModuleVerionElement);
             }
-
+            
+            // processing session management and clustering elements
+            OMElement sessionManagerFactoryElement = config_element.getFirstChildWithName(new QName(TAG_SESSION_MANAGER_FACTORY));
+            if(sessionManagerFactoryElement != null){
+	            System.out.println("Element : " + sessionManagerFactoryElement);
+	            SessionManagementBuilder sessionMgtBuilder = new SessionManagementBuilder(sessionManagerFactoryElement);	
+	            axisConfig.setSessionManager(sessionMgtBuilder.buildSessionManager());
+            }	
+            
         } catch (XMLStreamException e) {
             throw new DeploymentException(e);
         }
     }
 
-    protected void processModuleConfig(Iterator moduleConfigs, ParameterInclude parent,
+	protected void processModuleConfig(Iterator moduleConfigs, ParameterInclude parent,
                                        AxisConfiguration config)
             throws DeploymentException {
         while (moduleConfigs.hasNext()) {
@@ -442,5 +451,6 @@
         }
         Class phaseClass = axisConfig.getSystemClassLoader().loadClass(className);
         return (Phase) phaseClass.newInstance();
-    }
+    }  
+
 }
Index: modules/core/src/org/apache/axis2/deployment/DeploymentConstants.java
===================================================================
--- modules/core/src/org/apache/axis2/deployment/DeploymentConstants.java	(revision 390521)
+++ modules/core/src/org/apache/axis2/deployment/DeploymentConstants.java	(working copy)
@@ -58,8 +58,14 @@
     String TAG_TRANSPORT = "transport";
     String TAG_MEP = "mep";
     String TAG_DEFAULT_MODULE_VERSION = "defaultModuleVersions";
-
-
+    String TAG_SESSION_MANAGER_FACTORY = "sessionManagerFactory";
+    String TAG_SESSION_MANAGER = "sessionManager";
+    String TAG_SESSION_ID_FACTORY = "sessionIdFactory";
+    String TAG_SESSION_MANAGER_DELEGATE = "delegate";
+    String TAG_MAX_ACTIVE_SESSIONS = "maxNoOfActiveSessions";
+    String TAG_MAX_INACTIVE_TIME = "maxInactiveTime";    
+    String TAG_CHECK_INTERVAL = "checkInterval";
+    
     String TAG_FLOW_OUT_FAULT = "Outfaultflow";    // faultflow start tag
     String TAG_FLOW_OUT = "outflow";         // outflow start tag
     String TAG_FLOW_IN_FAULT = "INfaultflow";    // faultflow start tag
Index: modules/core/src/org/apache/axis2/deployment/SessionManagementBuilder.java
===================================================================
--- modules/core/src/org/apache/axis2/deployment/SessionManagementBuilder.java	(revision 0)
+++ modules/core/src/org/apache/axis2/deployment/SessionManagementBuilder.java	(revision 0)
@@ -0,0 +1,171 @@
+package org.apache.axis2.deployment;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.session.NullSessionIdFactory;
+import org.apache.axis2.session.NullSessionManager;
+import org.apache.axis2.session.SessionIdFactory;
+import org.apache.axis2.session.SessionManager;
+import org.apache.axis2.session.SessionManagerFactory;
+
+public class SessionManagementBuilder implements DeploymentConstants{
+	
+	OMElement sessionManagerFactoryElement;
+	
+	public SessionManagementBuilder(OMElement element){
+		sessionManagerFactoryElement = element;
+	}
+	
+	public SessionManager buildSessionManager()throws DeploymentException{
+		if(sessionManagerFactoryElement != null){
+    		OMAttribute attrib = sessionManagerFactoryElement.getAttribute(new QName(TAG_CLASS_NAME));
+    		
+    		if (attrib != null){
+    			String factoryClassName = attrib.getAttributeValue();  
+                // check for session manager entry
+    			OMElement sessionManagerElement = sessionManagerFactoryElement
+    					.getFirstChildWithName(new QName(TAG_SESSION_MANAGER));
+    			
+				SessionManager sessionManager = buildSessionManager(factoryClassName,sessionManagerElement);
+    			
+				try {
+					SessionIdFactory sessionidFactory = buildSessionIdFactory(sessionManagerElement
+							.getFirstChildWithName(new QName(TAG_SESSION_ID_FACTORY)));
+					sessionManager.setSessionIdFactory(sessionidFactory);	
+				} catch (Exception e) {
+					throw new DeploymentException(TAG_SESSION_ID_FACTORY + " element is not configured properly",e);
+				}							
+    			
+    			try {
+					int maxNofActiveSessions = getMaxNoOfActiveSessions(sessionManagerElement
+							.getFirstChildWithName(new QName(TAG_MAX_ACTIVE_SESSIONS)));
+					sessionManager.setMaxActiveSessions(maxNofActiveSessions);	
+				} catch (Exception e) {
+					throw new DeploymentException(TAG_MAX_ACTIVE_SESSIONS + " element is not configured properly",e);
+				} 
+    			
+    			try {
+					int maxInactiveTime = getMaxInactiveTime(sessionManagerElement
+							.getFirstChildWithName(new QName(TAG_MAX_INACTIVE_TIME)));
+					sessionManager.setDefaultMaxInactiveInterval(maxInactiveTime);
+				} catch (Exception e) {
+					throw new DeploymentException(TAG_MAX_INACTIVE_TIME + " element is not configured properly",e);
+				}
+				
+				try {
+					int checkInterval = getCheckInterval(sessionManagerElement
+							.getFirstChildWithName(new QName(TAG_CHECK_INTERVAL)));
+					sessionManager.setCheckInterval(checkInterval);
+				} catch (Exception e) {
+					throw new DeploymentException(TAG_CHECK_INTERVAL + " element is not configured properly",e);
+				}
+				
+				return sessionManager; 
+    		}
+    	}
+		
+		return new NullSessionManager();
+
+	}
+	
+	private SessionManager buildSessionManager(String factoryClassName, OMElement sessionManagerElement) throws DeploymentException{		
+		
+		String sessionManagerClass = sessionManagerElement.getAttribute(
+				new QName(TAG_CLASS_NAME)).getAttributeValue();
+
+		// check for delegate entry
+		OMElement delegateElement = sessionManagerElement
+				.getFirstChildWithName(new QName(TAG_SESSION_MANAGER_DELEGATE));
+		String delegateClass = delegateElement.getAttribute(
+				new QName(TAG_CLASS_NAME)).getAttributeValue();
+
+		if (sessionManagerClass == null || sessionManagerClass.equals("")) {
+			throw new DeploymentException(
+					"sessionManagerFactory element should have atleast one sessionManager element");
+		}
+
+		if (delegateClass == null || delegateClass.equals("")) {
+			throw new DeploymentException(
+					"sessionManager element should have atleast one delegate element");
+		}
+
+		try {
+			Class clazz = Class.forName(factoryClassName, true, Thread
+					.currentThread().getContextClassLoader());
+			SessionManagerFactory sessionManagerFactory = (SessionManagerFactory) clazz
+					.newInstance();
+
+			Method method = clazz.getMethod("createSessionManager",
+					new Class[] { ClassLoader.class, String[].class });
+
+			return (SessionManager) method
+					.invoke(sessionManagerFactory,
+							new Object[] {
+									Thread.currentThread()
+											.getContextClassLoader(),
+									new String[] { sessionManagerClass,
+											delegateClass } });
+
+		} catch (ClassNotFoundException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		} catch (SecurityException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		} catch (NoSuchMethodException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		} catch (IllegalArgumentException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		} catch (IllegalAccessException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		} catch (InvocationTargetException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		} catch (InstantiationException e) {
+			throw new DeploymentException(
+					"Error configuring Session Management", e);
+		}
+	}
+	
+	private SessionIdFactory buildSessionIdFactory(OMElement element) throws Exception{
+		if(element != null && element.getAttributeValue(new QName(TAG_CLASS_NAME)) != null){
+			Class clazz = Class.forName(element.getAttributeValue(new QName(TAG_CLASS_NAME)), true,Thread.currentThread().getContextClassLoader());
+			return (SessionIdFactory)clazz.newInstance();
+		}else{
+			return new NullSessionIdFactory();
+		}
+	}
+	
+	private int getMaxNoOfActiveSessions(OMElement element)throws Exception{
+		if(element != null && element.getText() != null){
+			return Integer.parseInt(element.getText());
+		}else{
+			return 50;
+		}
+	}
+	
+	private int getCheckInterval(OMElement element)throws Exception{
+		if(element != null && element.getText() != null){
+			return Integer.parseInt(element.getText());
+		}else{
+			return 300;
+		}
+	}
+	
+	private int getMaxInactiveTime(OMElement element)throws Exception{
+		if(element != null && element.getText() != null){
+			return Integer.parseInt(element.getText());
+		}else{
+			return 300;
+		}
+	}
+
+}
Index: modules/core/src/org/apache/axis2/session/Session.java
===================================================================
--- modules/core/src/org/apache/axis2/session/Session.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/Session.java	(revision 0)
@@ -0,0 +1,58 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.session;
+
+import java.util.Enumeration;
+
+/** 
+ * Modeled very closely on HttpSession
+ * 
+ */
+public interface Session {
+	
+	public Object getAttribute(String name) throws IllegalStateException;
+	
+	public Enumeration getAttributeNames() throws IllegalStateException;
+	
+	public long getCreationTime();
+	
+	public String getId();
+	
+	public long getLastAccessedTime();
+	
+	/**
+	 * returns the max no of seconds the session will be kept alive between requests
+	 */
+	public int getMaxInactiveInterval();
+	
+	/**
+	 * destroys the session object and unbounds any values 
+	 * associated with it.
+	 */
+	public void invalidate();
+	
+	public void removeAttribute(String name) throws IllegalStateException;
+	
+	public void setAttribute(String name, Object value) throws IllegalStateException;
+	
+	/**
+	 * sets the max no of seconds the session will be kept alive between requests
+	 */	
+	public void setMaxInactiveInterval(int seconds);
+	
+	public void setLastAccessedTime(long time);
+}
Index: modules/core/src/org/apache/axis2/session/NullSessionIdFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/session/NullSessionIdFactory.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/NullSessionIdFactory.java	(revision 0)
@@ -0,0 +1,11 @@
+package org.apache.axis2.session;
+
+public class NullSessionIdFactory implements SessionIdFactory {
+	
+	
+
+	public String generateSessionId() {
+		return "Error-Null-SessionIdFactory";
+	}
+
+}
Index: modules/core/src/org/apache/axis2/session/SessionManagerFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/session/SessionManagerFactory.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/SessionManagerFactory.java	(revision 0)
@@ -0,0 +1,6 @@
+package org.apache.axis2.session;
+
+public interface SessionManagerFactory {
+	
+	public SessionManager createSessionManager(ClassLoader classLoader,String[] classNames) throws IllegalArgumentException; 
+}
Index: modules/core/src/org/apache/axis2/session/SessionIdFactory.java
===================================================================
--- modules/core/src/org/apache/axis2/session/SessionIdFactory.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/SessionIdFactory.java	(revision 0)
@@ -0,0 +1,7 @@
+package org.apache.axis2.session;
+
+public interface SessionIdFactory {
+	
+	public String generateSessionId();
+	
+}
Index: modules/core/src/org/apache/axis2/session/NullSessionManager.java
===================================================================
--- modules/core/src/org/apache/axis2/session/NullSessionManager.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/NullSessionManager.java	(revision 0)
@@ -0,0 +1,77 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.session;
+
+import java.util.Hashtable;
+
+public class NullSessionManager implements SessionManager {
+		
+	public void activateSession(String sessionId) {
+	}
+
+	public Session findSession(String id) {
+		return null;
+	}
+
+	public long getCheckInterval() {
+		return 0;
+	}
+
+	public int getMaxActiveSessions() {
+		return 0;
+	}
+
+	public int getDefaultMaxInactiveInterval() {
+		return 0;
+	}
+
+	public Session createSession() {
+		return null;
+	}
+
+	public Hashtable getSessions() {
+		return null;
+	}
+
+	public void release(String sessionId) {		
+	}
+	
+	public void release(Session session) {		
+	}
+
+	public void setCheckInterval(int checkInterval) {
+	}
+
+	public void setMaxActiveSessions(int maxActiveSessions) {
+	}
+
+	public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval) {
+	}
+
+	public void setSessions(Hashtable sessions) {
+	}
+
+	public void passivateSession(String sessionId) {		
+	}
+
+	public void setSessionIdFactory(SessionIdFactory factory) {		
+	}
+
+	public SessionIdFactory getSessionIdFactory() {
+		return null;
+	}
+}
Index: modules/core/src/org/apache/axis2/session/NullSession.java
===================================================================
--- modules/core/src/org/apache/axis2/session/NullSession.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/NullSession.java	(revision 0)
@@ -0,0 +1,56 @@
+package org.apache.axis2.session;
+
+import java.util.Enumeration;
+
+public class NullSession implements Session {
+
+	private static NullSession _instance = new NullSession();
+	
+	public static Session instance(){
+		return _instance;
+	}
+	
+	public Object getAttribute(String name) {
+		return null;
+	}
+
+	public Enumeration getAttributeNames() {
+		return null;
+	}
+
+	public long getCreationTime() {
+		return 0;
+	}
+
+	public String getId() {
+		return null;
+	}
+
+	public long getLastAccessedTime() {
+		return 0;
+	}
+
+	public int getMaxInactiveInterval() {
+		return 0;
+	}
+
+	public int getState() {
+		return 0;
+	}
+	
+	public void invalidate() {
+	}
+
+	public void removeAttribute(String name) {
+	}
+
+	public void setAttribute(String name, Object value) {
+	}
+
+	public void setMaxInactiveInterval(int seconds) {
+	}
+
+	public void setLastAccessedTime(long time) {
+	}
+
+}
Index: modules/core/src/org/apache/axis2/session/SessionManager.java
===================================================================
--- modules/core/src/org/apache/axis2/session/SessionManager.java	(revision 0)
+++ modules/core/src/org/apache/axis2/session/SessionManager.java	(revision 0)
@@ -0,0 +1,59 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.session;
+
+import java.util.Hashtable;
+
+public interface SessionManager {
+
+	public void activateSession(String sessionId); 
+	
+	public void passivateSession(String sessionId);
+    
+	public Session findSession(String id);
+	
+	/**
+	 * returns the interval btw checking for session inactivity
+	 */
+    public long getCheckInterval(); 
+
+    public int getMaxActiveSessions();
+    
+    public int getDefaultMaxInactiveInterval(); 
+    
+    public SessionIdFactory getSessionIdFactory();
+    
+    public Session createSession();
+    
+    public Hashtable getSessions(); 
+    
+    public void release(Session session);
+    
+    public void setCheckInterval(int checkInterval);
+    
+    public void setMaxActiveSessions(int max);
+
+    /**
+     * Usefull when a server recovers from a power failure or server crash
+     */
+    public void setSessions(Hashtable sessions); 
+    
+    public void setDefaultMaxInactiveInterval(int seconds); 
+    
+    public void setSessionIdFactory(SessionIdFactory factory);
+
+}
Index: modules/core/src/org/apache/axis2/context/MessageContext.java
===================================================================
--- modules/core/src/org/apache/axis2/context/MessageContext.java	(revision 390521)
+++ modules/core/src/org/apache/axis2/context/MessageContext.java	(working copy)
@@ -33,7 +33,7 @@
 import org.apache.axis2.description.TransportInDescription;
 import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.engine.AxisConfiguration;
-
+import org.apache.axis2.session.Session;
 import javax.xml.namespace.QName;
 import java.util.ArrayList;
 
@@ -191,6 +191,8 @@
     //The value will be set by the tarnsport receiver and there will be validation for the transport
     //at the dispatch phase (its post condition)
     private String incomingTransportName;
+    
+    private Session session;
 
     public MessageContext() {
         super(null);
@@ -894,4 +896,12 @@
     public void setIncomingTransportName(String incomingTransportName) {
         this.incomingTransportName = incomingTransportName;
     }
+
+	public Session getSession() {
+		return session;
+	}
+
+	public void setSession(Session session) {
+		this.session = session;
+	}
 }
Index: modules/core/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java
===================================================================
--- modules/core/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java	(revision 390521)
+++ modules/core/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java	(working copy)
@@ -117,6 +117,10 @@
                 }
 
                 newmsgContext.setEnvelope(envelope);
+                
+                // pass in the session from the in msgContext to the out msgContext
+                newmsgContext.setSession(msgContext.getSession());
+                
             } else {
                 throw new AxisFault(Messages.getMessage("methodNotImplemented",
                         opDesc.getName().toString()));
Index: modules/core/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- modules/core/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 390521)
+++ modules/core/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -24,6 +24,8 @@
 import org.apache.axis2.description.*;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.phaseresolver.PhaseResolver;
+import org.apache.axis2.session.NullSessionManager;
+import org.apache.axis2.session.SessionManager;
 import org.apache.axis2.util.Utils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -78,6 +80,8 @@
     protected PhasesInfo phasesinfo;
     private ClassLoader serviceClassLoader;
     private ClassLoader systemClassLoader;
+    
+    private SessionManager defaultSessionManager;
 
     /**
      * Constructor AxisConfigurationImpl.
@@ -97,6 +101,7 @@
         serviceClassLoader = Thread.currentThread().getContextClassLoader();
         moduleClassLoader = Thread.currentThread().getContextClassLoader();
         this.phasesinfo = new PhasesInfo();
+        defaultSessionManager = new NullSessionManager();
     }
 
     public void addMessageReceiver(String mepURL, MessageReceiver messageReceiver) {
@@ -314,6 +319,7 @@
         }
     }
 
+    
     public void notifyObservers(int event_type, AxisService service) {
         AxisEvent event = new AxisEvent(event_type);
 
@@ -532,6 +538,10 @@
     public HashMap getTransportsOut() {
         return transportsOut;
     }
+    
+	public SessionManager getSessionManager() {
+		return defaultSessionManager;
+	}
 
     public boolean isEngaged(QName moduleName) {
         boolean b = engagedModules.contains(moduleName);
@@ -581,6 +591,11 @@
         this.systemClassLoader = classLoader;
     }
 
+
+	public void setSessionManager(SessionManager defaultSessionManager) {
+		this.defaultSessionManager = defaultSessionManager;
+	}
+	
     public static String getAxis2HomeDirectory() {
         // if user has set the axis2 home variable try to get that from System properties
         String axis2home = System.getProperty(Constants.AXIS2_HOME);
@@ -643,4 +658,5 @@
         service.setActive(true);
         notifyObservers(AxisEvent.SERVICE_START, service);
     }
+
 }
Index: modules/samples/maven.xml
===================================================================
--- modules/samples/maven.xml	(revision 390521)
+++ modules/samples/maven.xml	(working copy)
@@ -40,6 +40,8 @@
         <attainGoal name="mtomSample"/>
         <attainGoal name="groovy"/>
         <attainGoal name="securitySample"/>
+	<attainGoal name="sessionEchoSample"/>
+	<attainGoal name="sessionATMSample"/>
       <attainGoal name="sgccalculator"/>
     </goal>
 
@@ -348,6 +350,54 @@
             file="script/SGCCalculator/run.sh"/>
     </goal>
 
+    <!-- ================================================================ -->
+    <!--- Session ATM  Sample  -->
+    <!-- ================================================================ -->
+
+    <goal name="sessionATMSample">
+        <mkdir dir="${samples.dir}/sessionATM"/>
+        <mkdir dir="${samples.dir}/sessionATM/src"/>
+        <ant:copy todir="${samples.dir}/sessionATM/src">
+            <ant:fileset dir="src">
+                <ant:include name="sample/session/atm/**"/>
+            </ant:fileset>
+        </ant:copy>
+
+        <jar destfile="${samples.dir}/sessionATM/SessionATMService.aar">
+            <fileset dir="src/sample/session/atm">
+                <include name="META-INF/**"/>
+            </fileset>
+            <fileset dir="target/classes">
+                <include name="sample/session/atm/**/*.class"/>
+            </fileset>
+        </jar>
+
+    </goal>
+
+    <!-- ================================================================ -->
+    <!--- Session Echo Sample  -->
+    <!-- ================================================================ -->
+
+    <goal name="sessionEchoSample">
+        <mkdir dir="${samples.dir}/sessionEcho"/>
+        <mkdir dir="${samples.dir}/sessionEcho/src"/>
+        <ant:copy todir="${samples.dir}/sessionEcho/src">
+            <ant:fileset dir="src">
+                <ant:include name="sample/session/echo/**"/>
+            </ant:fileset>
+        </ant:copy>
+
+        <jar destfile="${samples.dir}/sessionEcho/SessionEchoService.aar">
+            <fileset dir="src/sample/session/echo">
+                <include name="META-INF/**"/>
+            </fileset>
+            <fileset dir="target/classes">
+                <include name="sample/session/echo/**/*.class"/>
+            </fileset>
+        </jar>
+
+    </goal>
+
     <preGoal name="itest:compile">
         <u:file var="file" name="${maven.itest.src}"/>
         <j:if test="${!file.exists()}">
Index: modules/samples/project.xml
===================================================================
--- modules/samples/project.xml	(revision 390521)
+++ modules/samples/project.xml	(working copy)
@@ -56,6 +56,12 @@
             <artifactId>axis2-common</artifactId>
             <version>${pom.currentVersion}</version>
         </dependency>
+	<dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-session</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+
         <!-- external JARs -->
         <dependency>
             <groupId>commons-logging</groupId>
Index: modules/samples/src/sample/session/atm/META-INF/services.xml
===================================================================
--- modules/samples/src/sample/session/atm/META-INF/services.xml	(revision 0)
+++ modules/samples/src/sample/session/atm/META-INF/services.xml	(revision 0)
@@ -0,0 +1,25 @@
+<serviceGroup>
+  <service name="AuthService" scope="soapsession">
+
+    <parameter name="ServiceClass" locked="xsd:false">sample.session.atm.AuthService</parameter>
+
+    <operation name="login" > 
+          <messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver" />
+    </operation>
+    
+    <operation name="logout" > 
+          <messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver" />
+    </operation>
+    
+  </service>
+  <service name="AccountService" scope="soapsession">
+
+    <parameter name="ServiceClass" locked="xsd:false">sample.session.atm.AccountService</parameter>
+
+    <operation name="getBalance" >
+          <messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver" />
+    </operation>
+
+  </service>
+
+</serviceGroup>

Property changes on: modules/samples/src/sample/session/atm/META-INF/services.xml
___________________________________________________________________
Name: svn:executable
   + *

Index: modules/samples/src/sample/session/atm/ATMClient.java
===================================================================
--- modules/samples/src/sample/session/atm/ATMClient.java	(revision 0)
+++ modules/samples/src/sample/session/atm/ATMClient.java	(revision 0)
@@ -0,0 +1,250 @@
+package sample.session.atm;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.FactoryConfigurationError;
+import javax.xml.stream.XMLStreamException;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMException;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.OperationClient;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.MessageContext;
+import org.apache.wsdl.WSDLConstants;
+
+public class ATMClient {
+	
+	private OMNamespace namespace;
+	private SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();
+	private BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
+	private Options options;
+	
+	private String authServiceUrl = "http://localhost:8080/axis2/services/AuthService";
+	private String acctServiceUrl = "http://localhost:8080/axis2/services/AccountService";
+	
+	public ATMClient(){		  
+	    namespace = fac.createOMNamespace(
+	            "http://axis2/test/namespace1", "ns1");
+	    options = new Options();
+        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+        options.setUseSeparateListener(false);
+	}
+	
+	public static void main(String[] args) throws IOException {
+		System.out.println("\nTHIS IS A SIMPLE APPLICATION TO DEMONSTRATE THE FUNCTIONALITY OF SESSIONS");
+        System.out.println("===============================================================================");
+        
+        ATMClient client =  new ATMClient();
+        String newTransaction = "y";
+        
+        while(newTransaction.equals("y")){
+        	
+        	try {
+				client.startTransaction();
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+			
+			System.out.print("\nDo you want to continue : (y) ");
+			newTransaction = client.reader.readLine();
+			
+        }
+	}
+
+	private void startTransaction() throws Exception{
+		Map eprParams = new HashMap();
+		
+		String loginStatus = login(eprParams);
+		System.out.println("\n----------------------\n");
+		System.out.println(loginStatus);
+		System.out.println("\n----------------------\n");
+		if(loginStatus.startsWith("Failed")){
+			return;
+		}
+		
+		prompt();
+		String response = reader.readLine();
+		
+		while(!response.equals("4")){
+			if(response.equals("1")){			
+				
+				String balanceMsg = checkBalance(eprParams);
+				System.out.println("\n----------------------\n");
+				System.out.println(balanceMsg);
+				System.out.println("\n----------------------\n");
+				
+			}else{
+				
+				System.out.println("\n***********************\n");
+				System.out.println("Are you kidding me !!!! :-)");
+				System.out.println("This is just a simple example");
+				System.out.println("\n***********************\n");
+				
+			}
+			prompt();	
+			response = reader.readLine();
+		}
+		
+		String logoutStatus = logout(eprParams);
+		System.out.println("\n----------------------\n");
+		System.out.println(logoutStatus);
+		System.out.println("\n----------------------\n");
+	}
+
+	private void prompt(){
+		System.out.print("\nPlease choose an option from the menu: ");
+		System.out.print("\nPress (1) for account balance");
+		System.out.print("\nPress (2) for last 10 transactions");
+		System.out.print("\nPress (3) to withdraw money");
+		System.out.print("\nPress (4) to logout");
+		System.out.print("\nEnter your selection : ");
+	}
+	
+	private String login(Map eprParams) throws IOException{
+		System.out.print("\n    ABC bank  ");
+		System.out.print("\nPlease enter Account Number: ");
+        String acctNum = reader.readLine();
+        
+        System.out.print("\nPlease enter Pin Number : ");
+        String pin = reader.readLine();
+        
+        SOAPEnvelope request = getLoginRequest(acctNum,pin);
+        
+        SOAPEnvelope reply = send(authServiceUrl,eprParams,request);
+        
+        return retriveAuthStatus(reply);        
+	}
+	
+	private String logout(Map eprParams) throws IOException{
+		        
+        SOAPEnvelope request = getLogoutRequest();
+        
+        SOAPEnvelope reply = send(authServiceUrl,eprParams,request);
+        
+        return retriveAuthStatus(reply);        
+	}
+	
+	private String checkBalance(Map eprParams) throws IOException{
+		
+        SOAPEnvelope request = getBalanceRequest();
+        
+        SOAPEnvelope reply = send(acctServiceUrl,eprParams,request);
+        
+        String balance = retriveBalance(reply);
+        
+        if (balance == null){
+        	balance = retriveAuthStatus(reply);
+        }else{
+        	balance = "Your account balance is : " + balance;
+        }
+        
+        return balance;
+	}
+  
+    private SOAPEnvelope getLoginRequest(String acctnum, String passwd){
+    	SOAPEnvelope envelope = fac.getDefaultEnvelope();
+        
+        OMElement params = fac.createOMElement("login", namespace);
+        OMElement param1OM = fac.createOMElement("acctNum", namespace);
+        OMElement param2OM = fac.createOMElement("passwd", namespace);
+        param1OM.setText(acctnum);
+        param2OM.setText(passwd);
+        params.addChild(param1OM);
+        params.addChild(param2OM);
+        envelope.getBody().setFirstChild(params);
+        
+        return envelope;
+    }
+    
+    private SOAPEnvelope getLogoutRequest(){
+    	SOAPEnvelope envelope = fac.getDefaultEnvelope();
+        OMElement params = fac.createOMElement("logout", namespace);
+        envelope.getBody().setFirstChild(params);
+        
+        return envelope;
+    }
+    
+    private SOAPEnvelope getBalanceRequest(){
+    	SOAPEnvelope envelope = fac.getDefaultEnvelope();
+        OMElement params = fac.createOMElement("getBalance", namespace);
+        envelope.getBody().setFirstChild(params);
+        
+        return envelope;
+    }
+    
+    private SOAPEnvelope send(String url,Map eprParams, SOAPEnvelope env) throws AxisFault{
+    	EndpointReference targetEPR = new EndpointReference(url);
+        targetEPR.setName("TO");
+        targetEPR.setReferenceParameters(eprParams);
+        
+        ServiceClient serviceClient = new ServiceClient();
+        options.setTo(targetEPR);
+        options.setAction("ANY-URI");         
+        options.setManageSession(true);
+        serviceClient.setOptions(options);           
+        
+        MessageContext requetMessageContext = new MessageContext();
+        requetMessageContext.setEnvelope(env);
+                        
+        OperationClient opClient = serviceClient.createClient(ServiceClient.ANON_OUT_IN_OP);
+        requetMessageContext.setTo(targetEPR);
+        opClient.addMessageContext(requetMessageContext);        
+        opClient.setOptions(options);
+                
+        opClient.execute(true);
+        
+        MessageContext reply = opClient.getMessageContext(
+                WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+        
+        eprParams.putAll(reply.getReplyTo().getAllReferenceParameters());
+        
+        return reply.getEnvelope();
+    }
+    
+	public static void printSOAPEnvelope(SOAPEnvelope env) {
+        try {
+        	System.out.println("\n-------------Printing SOAP envelope\n-------------------");
+            env.serialize(System.out);            
+            System.out.println("\n-------------End of SOAP envelope------------------------\n");
+        } catch (XMLStreamException e) {
+            e.printStackTrace();
+        } catch (FactoryConfigurationError e) {
+            e.printStackTrace();
+        }
+    } 
+	
+    private String retriveBalance(SOAPEnvelope reply) {
+    	if (reply != null) {
+            try {
+				OMElement resultOM = reply.getBody().getFirstChildWithName(new QName(ATMConstants.BALANCE));
+				return resultOM.getText();
+			} catch (OMException e) {
+				return null;
+			}
+        } else
+            return null;
+    }
+    
+    private String retriveAuthStatus(SOAPEnvelope reply) {
+    	if (reply != null) {
+            OMElement resultOM = reply.getBody().getFirstChildWithName(new QName(ATMConstants.STATUS_MESSAGE));
+            return resultOM.getText();
+        } else
+            return null;
+    }
+    
+
+}
Index: modules/samples/src/sample/session/atm/AuthService.java
===================================================================
--- modules/samples/src/sample/session/atm/AuthService.java	(revision 0)
+++ modules/samples/src/sample/session/atm/AuthService.java	(revision 0)
@@ -0,0 +1,93 @@
+package sample.session.atm;
+
+import java.util.Iterator;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.session.Session;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+public class AuthService {
+	
+	final static String USER1_ACCT_NUM = "12345";
+	final static String USER1_PIN = "911";
+	final static String USER2_ACCT_NUM = "678910";
+	final static String USER2_PIN = "311";
+	
+	MessageContext msgContext = null;
+	
+	public void init (MessageContext msgContext) {
+		this.msgContext = msgContext;
+	}
+	
+	public OMElement login (OMElement elem) {		
+		Iterator iter = elem.getChildElements();
+		String acctNum = ((OMElement) iter.next()).getText();
+		String pin = ((OMElement) iter.next()).getText();
+
+		if (msgContext != null){
+			Session session = msgContext.getSession();
+			if (session == null){
+				System.out.println ("Session is null");
+				return echoMessage("Session is null");
+			}else{
+				if(authenticate(acctNum,pin)){
+					session.setAttribute(ATMConstants.AUTH_STATUS,Boolean.TRUE);
+					session.setAttribute(ATMConstants.ACCT_NUM,acctNum);
+					return echoMessage("Success, Welcome to ABC bank");
+				}else{
+					return echoMessage("Failed Try again");
+				}
+				
+			}
+		}else{
+			System.out.println ("Message Context is null");
+			return echoMessage("Message Context is null");
+		}		
+		
+	}
+	
+	public OMElement logout (OMElement elem) {		
+		
+		if (msgContext != null){
+			Session session = msgContext.getSession();
+			if (session == null){
+				System.out.println ("Session is null");
+				return echoMessage("Session is null");
+			}else{
+				session.invalidate();
+				return echoMessage("Thank you for using ABC bank");
+				
+			}
+		}else{
+			System.out.println ("Message Context is null");
+			return echoMessage("Message Context is null");
+		}		
+		
+	}
+	
+	private boolean authenticate(String userName, String passwd){
+		if(userName == null || passwd == null){
+			return false;
+		}
+		
+		if(userName.equals(USER1_ACCT_NUM) && passwd.equals(USER1_PIN)){
+			return true;
+		} else if(userName.equals(USER2_ACCT_NUM) && passwd.equals(USER2_PIN)){
+			return true;		
+		}else{
+			return false;
+		}
+	}
+	
+	private OMElement echoMessage(String msg) {
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+		OMNamespace namespace = fac.createOMNamespace(ATMConstants.EXAMPLE_NAMESPACE_URL,ATMConstants.EXAMPLE_NAMESPACE);
+		
+		OMElement resultElem = fac.createOMElement(ATMConstants.STATUS_MESSAGE,namespace);
+		resultElem.setText(msg);
+		return resultElem;
+	}
+}
Index: modules/samples/src/sample/session/atm/AccountService.java
===================================================================
--- modules/samples/src/sample/session/atm/AccountService.java	(revision 0)
+++ modules/samples/src/sample/session/atm/AccountService.java	(revision 0)
@@ -0,0 +1,72 @@
+package sample.session.atm;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.session.Session;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+public class AccountService {
+	
+	final static String USER1_ACCT_NUM = "12345";
+	final static String USER1_BALANCE = "10,000";
+	final static String USER2_ACCT_NUM = "678910";
+	final static String USER2_BALANCE = "20,000";
+	
+	MessageContext msgContext = null;
+	
+	public void init (MessageContext msgContext) {
+		this.msgContext = msgContext;
+	}
+	
+	public OMElement getBalance (OMElement elem) {		
+		
+		if (msgContext != null){
+			Session session = msgContext.getSession();
+			if (session == null){
+				System.out.println ("Session is null");
+				return echoMessage(ATMConstants.STATUS_MESSAGE,"Session is null");
+			}else{
+				if(isAuthenticated(session)){
+					String balance = retriveBalance(session);
+					return echoMessage(ATMConstants.BALANCE,balance);
+				}else{
+					return echoMessage(ATMConstants.STATUS_MESSAGE,"Failed Try again");
+				}
+				
+			}
+		}else{
+			System.out.println ("Message Context is null");
+			return echoMessage(ATMConstants.STATUS_MESSAGE,"Message Context is null");
+		}		
+		
+	}
+	
+	private String retriveBalance(Session session) {
+		String acctNum = (String)session.getAttribute(ATMConstants.ACCT_NUM);
+		if(acctNum.equals(USER1_ACCT_NUM)){
+			return USER1_BALANCE;
+		}else{
+			return USER2_BALANCE;
+		}
+	}
+
+	private boolean isAuthenticated(Session session){
+		Boolean authStatus = (Boolean)session.getAttribute(ATMConstants.AUTH_STATUS);
+		if(authStatus != null && authStatus.booleanValue()){
+			return true;
+		}else{
+			return false;
+		}
+	}
+	
+	private OMElement echoMessage(String name,String msg) {
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+		OMNamespace namespace = fac.createOMNamespace(ATMConstants.EXAMPLE_NAMESPACE_URL,ATMConstants.EXAMPLE_NAMESPACE);
+		
+		OMElement resultElem = fac.createOMElement(name,namespace);
+		resultElem.setText(msg);
+		return resultElem;
+	}
+}
Index: modules/samples/src/sample/session/atm/ATMConstants.java
===================================================================
--- modules/samples/src/sample/session/atm/ATMConstants.java	(revision 0)
+++ modules/samples/src/sample/session/atm/ATMConstants.java	(revision 0)
@@ -0,0 +1,13 @@
+package sample.session.atm;
+
+public class ATMConstants {
+	
+	public final static String EXAMPLE_NAMESPACE = "ns1";
+	public final static String EXAMPLE_NAMESPACE_URL = "http://axis2/test/namespace1";
+	
+	public final static String AUTH_STATUS = "AUTH_STATUS";
+	public final static String ACCT_NUM = "ACCT_NUM";
+	public final static String PIN = "PIN";
+	public final static String BALANCE = "BALANCE";
+	public final static String STATUS_MESSAGE = "STATUS_MESSAGE";
+}
Index: modules/samples/src/sample/session/echo/META-INF/services.xml
===================================================================
--- modules/samples/src/sample/session/echo/META-INF/services.xml	(revision 0)
+++ modules/samples/src/sample/session/echo/META-INF/services.xml	(revision 0)
@@ -0,0 +1,13 @@
+  <service name="SessionEchoService" scope="soapsession">
+
+    <parameter name="ServiceClass" locked="xsd:false">sample.session.echo.SimpleSessionEchoService</parameter>
+
+    <operation name="echo" > 
+          <messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver" />
+    </operation>
+   <!-- 
+    <operation name="addPrevious" > 
+          <messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver" />
+    </operation>
+   --> 
+  </service>

Property changes on: modules/samples/src/sample/session/echo/META-INF/services.xml
___________________________________________________________________
Name: svn:executable
   + *

Index: modules/samples/src/sample/session/echo/SimpleSessionEchoClient.java
===================================================================
--- modules/samples/src/sample/session/echo/SimpleSessionEchoClient.java	(revision 0)
+++ modules/samples/src/sample/session/echo/SimpleSessionEchoClient.java	(revision 0)
@@ -0,0 +1,156 @@
+package sample.session.echo;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.FactoryConfigurationError;
+import javax.xml.stream.XMLStreamException;
+
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.addressing.AddressingConstants.Final;
+import org.apache.axis2.client.OperationClient;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.wsdl.WSDLConstants;
+
+public class SimpleSessionEchoClient {
+	
+	public static void main(String[] args) throws IOException {
+		System.out.println("\nTHIS IS A SIMPLE APPLICATION TO DEMONSTRATE THE FUNCTIONALITY OF SESSIONS");
+        System.out.println("===============================================================================");
+        Options options = new Options();
+        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+        options.setUseSeparateListener(false);
+        Map EPRs = null;
+        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
+        
+        boolean exit = false;
+        while (!exit) {
+            
+
+            System.out.print("\n\nNew Session (n) \nContinue with same session (c) \nExit (e)\n:");
+            String option = reader.readLine();
+            if ("e".equalsIgnoreCase(option)) {
+                System.out.println("Exiting Echo Service...");
+                return;
+            }
+
+            if (!"n".equalsIgnoreCase(option) && !"c".equalsIgnoreCase(option)) {
+                System.out.println("Error: Invalid option");
+                continue;
+            }else{            
+
+	            if ("n".equalsIgnoreCase(option)) {
+	            	EPRs = new HashMap();
+	
+	            } else if ("c".equalsIgnoreCase(option)) {
+	                if (EPRs == null) {
+	                    System.out.println("Error: Invalid option, need to start a new session. Please select 'n'");
+	                    continue;                
+	                }                
+	                
+	            }
+	            
+	            MessageContext reply = echoMessage(reader,options,EPRs);
+                EPRs = getEPRs(reply);	            
+            }
+
+        }
+	}
+	
+	private static Map getEPRs(MessageContext reply){      
+	 return reply.getReplyTo().getAllReferenceParameters();
+}
+
+	private static MessageContext echoMessage(BufferedReader reader,Options options,Map referenceParams) throws IOException{
+		System.out.print("Enter message to echo :  ");
+        String msg = reader.readLine();
+        String opStr = "echo";
+        
+        System.out.println("Invoking...");
+        
+        EndpointReference targetEPR = new EndpointReference("http://localhost:8080/axis2/services/SessionEchoService");
+        targetEPR.setName("TO");
+        targetEPR.setReferenceParameters(referenceParams);
+        
+        ServiceClient serviceClient = new ServiceClient();
+        options.setTo(targetEPR);
+        options.setAction("ANY-URI");         
+        options.setManageSession(true);
+        serviceClient.setOptions(options);           
+        
+        MessageContext requetMessageContext = new MessageContext();
+        requetMessageContext.setEnvelope(getRequestEnvelope(opStr, msg));
+                        
+        OperationClient opClient = serviceClient.createClient(ServiceClient.ANON_OUT_IN_OP);
+        requetMessageContext.setTo(targetEPR);
+        opClient.addMessageContext(requetMessageContext);        
+        opClient.setOptions(options);
+                
+        opClient.execute(true);
+
+        printSOAPEnvelope(requetMessageContext.getEnvelope());
+        
+        MessageContext reply = opClient.getMessageContext(
+                WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+
+        printSOAPEnvelope(reply.getEnvelope());
+                
+        printResult(reply.getEnvelope());
+        
+        return reply;
+	}
+
+	public static void printSOAPEnvelope(SOAPEnvelope env) {
+        try {
+        	System.out.println("\nPrinting SOAP envelope\n");
+            env.serialize(System.out);            
+            System.out.println("\nend of SOAP envelope\n");
+        } catch (XMLStreamException e) {
+            e.printStackTrace();
+        } catch (FactoryConfigurationError e) {
+            e.printStackTrace();
+        }
+    } 
+	
+    private static void printResult(SOAPEnvelope reply) {
+        try {
+            if (reply != null) {
+                OMElement resultOM = reply.getBody().getFirstChildWithName(new QName("serverMsg"));
+                System.out.println("Server Msg is:" + resultOM.getText());
+            } else
+                System.out.println("Server Msg is null");
+        }catch (FactoryConfigurationError e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static SOAPEnvelope getRequestEnvelope(String operationName,String msg) {
+        SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();
+        SOAPEnvelope envelope = fac.getDefaultEnvelope();
+        OMNamespace namespace = fac.createOMNamespace(
+                "http://axis2/test/namespace1", "ns1");
+
+        OMElement params = fac.createOMElement(operationName, namespace);
+        OMElement param1OM = fac.createOMElement("clientMessage", namespace);
+        param1OM.setText(msg);
+        params.addChild(param1OM);
+        envelope.getBody().setFirstChild(params);
+        return envelope;
+    }
+
+}
Index: modules/samples/src/sample/session/echo/SimpleSessionEchoService.java
===================================================================
--- modules/samples/src/sample/session/echo/SimpleSessionEchoService.java	(revision 0)
+++ modules/samples/src/sample/session/echo/SimpleSessionEchoService.java	(revision 0)
@@ -0,0 +1,95 @@
+/*
+ * Copyright 2004,2006 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package sample.session.echo;
+
+import java.util.Iterator;
+
+import javax.xml.stream.XMLStreamException;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.session.Session;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+public class SimpleSessionEchoService {
+
+	MessageContext msgContext = null;
+	
+	public void init (MessageContext msgContext) {
+		this.msgContext = msgContext;
+	}
+	
+	public OMElement echo (OMElement elem) {		
+		
+		try {
+			msgContext.getEnvelope().serialize(System.out);
+		} catch (XMLStreamException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		
+		Iterator iter = elem.getChildElements();
+		String clientMsg = ((OMElement) iter.next()).getText();
+
+		if (msgContext != null){
+			Session session = msgContext.getSession();
+			if (session == null){
+				System.out.println ("Session is null");
+				return errorMessage("Session is null");
+			}else{
+				System.out.println ("Session Id : " + session.getId());
+				String msg = addMessageToSession(session,clientMsg);
+				return echoMessage(msg);
+			}
+		}else{
+			System.out.println ("Message Context is null");
+			return errorMessage("Message Context is null");
+		}		
+		
+	}
+	
+	
+	
+	private OMElement errorMessage(String errorMsg) {
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+		OMNamespace namespace = fac.createOMNamespace("http://axis2/test/namespace1","ns1");
+		
+		OMElement resultElem = fac.createOMElement("serverMsg",namespace);
+		resultElem.setText(errorMsg);
+		return resultElem;
+	}
+
+	private OMElement echoMessage(String msg) {
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+		OMNamespace namespace = fac.createOMNamespace("http://axis2/test/namespace1","ns1");
+		
+		OMElement resultElem = fac.createOMElement("serverMsg",namespace);
+		resultElem.setText(msg);
+		return resultElem;
+	}
+
+	private String addMessageToSession(Session session, String clientMsg) {
+		StringBuffer strBuf = (StringBuffer)session.getAttribute("CLIENT_MESSAGE");
+		if(strBuf == null){
+			strBuf = new StringBuffer();
+		}
+		strBuf.append("\n" + clientMsg);
+		session.setAttribute("CLIENT_MESSAGE",strBuf);
+		return strBuf.toString();
+	}
+}

Property changes on: modules/samples/src/sample/session/echo/SimpleSessionEchoService.java
___________________________________________________________________
Name: svn:executable
   + *

Index: etc/project.properties
===================================================================
--- etc/project.properties	(revision 390521)
+++ etc/project.properties	(working copy)
@@ -60,7 +60,8 @@
 modules/security/project.xml,\
 modules/integration/project.xml,\
 modules/saaj/project.xml,\
-modules/doom/project.xml,\
+modules/session/project.xml,\
+modules/clustering/project.xml,\
 modules/jibx/project.xml,\
 ${optional.includes}
 
Index: build.xml
===================================================================
--- build.xml	(revision 390521)
+++ build.xml	(working copy)
@@ -227,6 +227,8 @@
       <include name="wsdl/src/**/*.java"/>
       <include name="xml/src/**/*.java"/>
       <include name="doom/src/**/*.java"/>
+      <include name="session/src/**/*.java"/>
+      <include name="clustering/src/**/*.java"/>
     </javac>
     <copy todir="${basedir}/target/classes/">
       <fileset dir="${basedir}/modules/common/src">
