package org.apache.axis2.databinding.utils;

import java.beans.BeanInfo;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class BeanInfoCache {
	protected static final int MAX_SIZE = 10;
	private static Map<Class<?>, BeanInfo> cache = new LinkedHashMap<Class<?>, BeanInfo>(MAX_SIZE) {
		private static final long serialVersionUID = 4541462406051569645L;

		protected boolean removeEldestEntry(java.util.Map.Entry<Class<?>, BeanInfo> eldest) {
			return this.size() > MAX_SIZE;
		};
	};
	private static ReadWriteLock rwLock = new ReentrantReadWriteLock();

	static BeanInfo get(final Object key) {
		rwLock.readLock().lock();
		try {
			return cache.get(key);
		} finally {
			rwLock.readLock().unlock();
		}
	}

	static int size() {
		rwLock.readLock().lock();
		try {
			return cache.size();
		} finally {
			rwLock.readLock().unlock();
		}
	}

	static BeanInfo put(final Class<?> key, final BeanInfo value) {
		if(key==null || value==null) {
			return null;
		}
		rwLock.writeLock().lock();
		try {
			return cache.put(key, value);
		} finally {
			rwLock.writeLock().unlock();
		}
	}

	static void clear() {
		rwLock.writeLock().lock();
		try {
			cache.clear();
		} finally {
			rwLock.writeLock().unlock();
		}
	}
}
