Index: userguide-installingtesting.html
===================================================================
--- userguide-installingtesting.html	(revision 525690)
+++ userguide-installingtesting.html	(working copy)
@@ -1,129 +1,132 @@
-<html lang="en">
-<head>
-  <meta http-equiv="content-type" content="">
-  <title>Apache Axis2 User's Guide-Installing and Testing Client Code</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all" />
-</head>
-
-<body lang="en">
-<a name="installingtesting"></a>
-
-<h1>Apache Axis2 User's Guide - Installing and Testing Client Code</h1>
-
-<p>The best way to make sure that your system is running Axis2 is to install
-and test both a service and a client. The process involves the following
-steps:</p>
-
-<h2>Content</h2>
-<ul>
-  <li><a href="userguide-intro.html#intro">Introducing Axis2</a><br>
-
-    <ul>
-      <li><a href="userguide.html#whatis">What is Axis2</a></li>
-      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
-      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
-        messages</a></li>
-      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
-      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
-        Distribution</a></li>
-      <li><a href="userguide.html#hierarchy">Axis2.war Directory
-      Hierarchy</a></li>
-      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
-      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
-    </ul>
-  </li>
-  <li><a
-    href="userguide-installingtesting.html#installingtesting"><strong>Installing
-    and testing client code</strong></a></li>
-  <li><a href="userguide-introtoservices.html#introservices">Introduction to
-    Services</a><br>
-
-    <ul>
-      <li><a href="userguide-introtoservices.html#messageexchange">Message
-        Exchange Patterns</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-creatingclients.html#createclients">Creating
-    Clients</a><br>
-
-    <ul>
-      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
-        Client Generation Method</a></li>
-      <li><a href="userguide-creatingclients.html#generating">Generating
-        Clients</a></li>
-      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
-        (ADB)</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-buildingservices.html#buildservices">Building
-    Services</a><br>
-
-    <ul>
-      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
-        Comfortable with Available Options</a></li>
-      <li><a href="userguide-buildingservices.html#createscratch">Creating a
-        service from scratch</a></li>
-      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
-        Plain Old Java Objects</a></li>
-      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
-        running an Axis2 service created from WSDL</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-samples.html">Samples</a></li>
-  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
-</ul>
-
-<p><b>The Short Story:</b></p>
-<ol>
-  <li>Install Axis2 into a suitable container such as Apache Tomcat by
-    copying the axis2.war file to the webapps directory.</li>
-  <li>Install the service into the Axis2 application by copying the *.aar
-    file into the Axis2 services directory.</li>
-  <li>Install the client on the system on which you want to run it and make
-    sure all of the Axis2 libraries are on the CLASSPATH.</li>
-  <li>Run the client</li>
-</ol>
-<!--stopped here-->
-
-<p><b>The Long Story:</b></p>
-
-<p>Start by installing a suitable container, such as <a
-href="http://tomcat.apache.org/">Apache Tomcat</a>. Any J2EE server will do.
-To install Axis2 on the server, download the Axis2 War distribution from <a
-href="http://ws.apache.org/axis2/download.cgi">http://ws.apache.org/axis2/download.cgi</a>
-and place the axis2.war file in the server's webapps directory. The server
-will then expand the distribution into its proper structure, seen in the <a
-href="userguide-intro.html#hierarchy">earlier section</a>.</p>
-
-<p>Axis2 services come bundled as *.aar files, which contain all of the
-pieces necessary to define the service, such as the necessary classes and
-libraries and the services.xml file that defines the service's behavior. You
-can install the service using the <a href="webadminguide.html">Web
-administration application</a>, but to make things simple for now, copy the
-*.aar file into the Axis2 services directory. For example, to install the
-MyService service distributed as one of the Axis2 samples, copy the file
-&lt;AXIS2_HOME&gt;/samples/userguide/build/MyService.aar file which is built
-using the <code>ant</code> command from &lt;AXIS2_HOME&gt;/samples/userguide,
-to the directory &lt;J2EE_HOME&gt;/webapps/axis2-1.1/WEB-INF/services (Note
-that if you installed a SNAPSHOT version of Axis2, this location might take a
-form such as
-&lt;J2EE_HOME&gt;/webapps/axis2-@axis2_version@-SNAPSHOT/WEB-INF/services)</p>
-
-<p>Your client can come in any number of forms, from a collection of files to
-a single *.jar file. The important thing is to ensure that all the
-appropriate classes are on the classpath. In addition to the classes that
-pertain to the actual client, you must also add the Axis2 jar files into the
-CLASSPATH. Normally you will do this by downloading and unpacking the <a
-href="http://ws.apache.org/axis2/download/@axis2_version_dir@/download.cgi#std-bin">Axis2
-Standard Distribution</a> and adding the *.jar files in the lib directory to
-your CLASSPATH, but you also have the option to run your client using the
-axis2.bat (or axis2.sh) script, which takes care of it for you. For example,
-you can run a client with the command: axis2
-org.apache.axis2.axis2userguide.Client.</p>
-
-<p><strong>See Next Section</strong>- <a
-href="userguide-introtoservices.html#introservices">Introduction to
-Services</a></p>
-</body>
-</html>
+<html lang="en">
+<head>
+  <meta http-equiv="content-type" content="">
+  <title>Apache Axis2 User's Guide-Installing and Testing Client Code</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
+</head>
+
+<body lang="en">
+<a name="installingtesting"></a>
+
+<h1>Apache Axis2 User's Guide - Installing and Testing Client Code</h1>
+
+<p>The best way to make sure that your system is running Apache Axis2 is to
+install and test both a service and a client. The process involves the
+following steps:</p>
+
+<h2>Content</h2>
+<ul>
+  <li><a href="userguide-intro.html#intro">Introducing Axis2</a><br>
+
+    <ul>
+      <li><a href="userguide.html#whatis">What is Axis2?</a></li>
+      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
+      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
+        messages</a></li>
+      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
+      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
+        Distribution</a></li>
+      <li><a href="userguide.html#hierarchy">Axis2.war Directory
+      Hierarchy</a></li>
+      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
+      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
+    </ul>
+  </li>
+  <li><a
+    href="userguide-installingtesting.html#installingtesting"><strong>Installing
+    and testing client code</strong></a></li>
+  <li><a href="userguide-introtoservices.html#introservices">Introduction to
+    Services</a><br>
+
+    <ul>
+      <li><a href="userguide-introtoservices.html#messageexchange">Message
+        Exchange Patterns</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-creatingclients.html#createclients">Creating
+    Clients</a><br>
+
+    <ul>
+      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
+        Client Generation Method</a></li>
+      <li><a href="userguide-creatingclients.html#generating">Generating
+        Clients</a></li>
+      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
+        (ADB)</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-buildingservices.html#buildservices">Building
+    Services</a><br>
+
+    <ul>
+      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
+        Comfortable with the Available Options</a></li>
+      <li><a href="userguide-buildingservices.html#createscratch">Creating a
+        service from scratch</a></li>
+      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
+        Plain Old Java Objects</a></li>
+      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
+        running an Axis2 service created from WSDL</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-samples.html">Samples</a></li>
+  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
+</ul>
+
+<p><b>The Short Story:</b></p>
+<ol>
+  <li>Install Apache Axis2 in a suitable container, such as Apache Tomcat, by
+    copying the axis2.war file to the webapps directory.</li>
+  <li>Install the service into the Axis2 application by copying the *.aar
+    file into the Axis2 services directory.</li>
+  <li>Install the client on the system on which you want to run it, and make
+    sure all the Axis2 libraries are on the CLASSPATH.</li>
+  <li>Run the client.</li>
+</ol>
+<!--stopped here-->
+
+<p><b>The Long Story:</b></p>
+
+<p>Start by installing a suitable container, such as <a
+href="http://tomcat.apache.org/">Apache Tomcat</a>. Any J2EE server will do.
+To install Apache Axis2 on the server, download the Axis2 WAR distribution
+from <a
+href="http://ws.apache.org/axis2/download.cgi">http://ws.apache.org/axis2/download.cgi</a>
+and place the axis2.war file in the server's webapps directory. The server
+will then expand the distribution into its proper structure, as seen in the
+<a href="userguide-intro.html#hierarchy">earlier section</a>.</p>
+
+<p>Apache Axis2 services come bundled as *.aar files, which contain all the
+pieces necessary to define the service, such as the necessary classes and
+libraries and the services.xml file that defines the service's behavior. You
+can install the service using the <a href="webadminguide.html">Web
+administration application</a>, but to make things simple for now, copy the
+*.aar file into the Axis2 services directory. For example, to install the
+MyService service distributed as one of the Axis2 samples, copy the file
+&lt;AXIS2_HOME&gt;/samples/userguide/build/MyService.aar file, which is built
+using the <code>ant</code> command, from
+&lt;AXIS2_HOME&gt;/samples/userguide, to the directory
+&lt;J2EE_HOME&gt;/webapps/axis2-@axis2_version@/WEB-INF/services (Note that
+if you installed a SNAPSHOT version of Apache Axis2, this location might take
+a form such as
+&lt;J2EE_HOME&gt;/webapps/axis2-@axis2_version@-SNAPSHOT/WEB-INF/services)</p>
+
+<p>Your client can come in any number of forms, from a collection of files to
+a single *.jar file. The important thing is to ensure that all the
+appropriate classes are on the classpath. In addition to the classes that
+pertain to the actual client, you must also add the Axis2 .jar files into the
+CLASSPATH. Normally you will do this by downloading and unpacking the <a
+href="http://ws.apache.org/axis2/download/@axis2_version_dir@/download.cgi#std-bin">Axis2
+Standard Distribution</a> and adding the *.jar files in the lib directory to
+your CLASSPATH, or you also have the option of running your client using the
+axis2.bat (or axis2.sh) script, which takes care of it for you. For example,
+you can run a client with the command: </p>
+
+<p>axis2 org.apache.axis2.axis2userguide.Client.</p>
+
+<p><strong>See Next Section</strong>- <a
+href="userguide-introtoservices.html#introservices">Introduction to
+Services</a></p>
+</body>
+</html>
Index: userguide-introtoservices.html
===================================================================
--- userguide-introtoservices.html	(revision 525690)
+++ userguide-introtoservices.html	(working copy)
@@ -1,164 +1,164 @@
-<html lang="en">
-<head>
-  <meta http-equiv="content-type" content="">
-  <title>Apache Axis2 User's Guide- Introduction to Services</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all" />
-</head>
-
-<body>
-<a name="introservices"></a>
-
-<h1>Apache Axis2 User's Guide - Introduction to Services</h1>
-
-<p>The term "Web services" can apply to a number of different ways to send
-information back and forth, but this guide focuses on the sending and
-receiving of SOAP messages. SOAP messages are XML documents that consist of
-an "envelope" containing a "payload" (see Code Listing 4):</p>
-
-<h2>Content</h2>
-<ul>
-  <li><a href="userguide.html#intro">Introducing Axis2</a><br>
-
-    <ul>
-      <li><a href="userguide.html#whatis">What is Axis2</a></li>
-      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
-      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
-        messages</a></li>
-      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
-      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
-        Distribution</a></li>
-      <li><a href="userguide.html#hierarchy">Axis2.war Directory
-      Hierarchy</a></li>
-      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
-      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-installingtesting.html#installingtesting">Installing
-    and testing client code</a></li>
-  <li><a
-    href="userguide-introtoservices.html#introservices"><strong>Introduction
-    to Services</strong></a><br>
-
-    <ul>
-      <li><a
-        href="userguide-introtoservices.html#messageexchange"><strong>Message
-        Exchange Patterns</strong></a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-creatingclients.html#createclients">Creating
-    Clients</a><br>
-
-    <ul>
-      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
-        Client Generation Method</a></li>
-      <li><a href="userguide-creatingclients.html#generating">Generating
-        Clients</a></li>
-      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
-        (ADB)</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-buildingservices.html#buildservices">Building
-    Services</a><br>
-
-    <ul>
-      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
-        Comfortable with Available Options</a></li>
-      <li><a href="userguide-buildingservices.html#createscratch">Creating a
-        service from scratch</a></li>
-      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
-        Plain Old Java Objects</a></li>
-      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
-        running an Axis2 service created from WSDL</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-samples.html">Samples</a></li>
-  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
-</ul>
-
-<h3>Code Listing 4: Example SOAP Message</h3>
-<pre>&lt;?xml version='1.0' ?&gt;
-&lt;env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
-xmlns:wsa="http://www.w3.org/2005/03/addressing"&gt; 
- &lt;env:Header&gt;
-
-    &lt;wsa:MessageID&gt;
-      http://ws.apache.org/9C21DE32-DB42-1228-C42E-66CB101421AD
-    &lt;/wsa:MessageID&gt;
-    &lt;wsa:ReplyTo&gt;
-      &lt;wsa:Address&gt;http://example.com/projects/clientApp&lt;/wsa:Address&gt;
-    &lt;/wsa:ReplyTo&gt;
-    
-&lt;wsa:To&gt;http://example.com/axis2/publishingService&lt;/wsa:To&gt;
-    
-&lt;wsa:Action&gt;http://example.com/axis2/addDocument&lt;/wsa:Action&gt;
- 
-&lt;/env:Header&gt;
- &lt;env:Body&gt;
-
-  &lt;addDocument&gt;
-   &lt;docTitle&gt;What I Did On My Summer Vacation&lt;/doctitle&gt;
-   &lt;docSubtitle&gt;Children's Essays from Accross the World&lt;/docSubtitle&gt;
-   &lt;docLocation&gt;contentRepos/summerVac.doc&lt;/docLocation&gt;
-  &lt;/addDocument&gt;
-
- &lt;/env:Body&gt;
-&lt;/env:Envelope&gt;</pre>
-
-<p>This XML document consists of the outer element, or the SOAP Envelope, and
-its contents. The SOAP Envelope is in the SOAP namespace,
-http://www.w3.org/2003/05/soap-envelope, prefixed as env:, and contains up to
-two children. This envelope is a standard format that pertains to every
-single SOAP message sent and received by any SOAP Web service.</p>
-
-<p>The contents of the Envelope consists of two parts, the first being the
-SOAP headers, the contents of the env:Header element. These headers, such as
-the WS-Addressing elements shown here, provide additional information about
-the message and how it should be handled. A SOAP message may carry headers
-relating to several aspects of the message, or it may carry no headers at
-all. These headers are typically processed by the message handlers.</p>
-
-<p>The third and arguably most important part of the message is the payload,
-which consists of the contents of the env:Body element. This is the actual
-message intended for the receiver, and is the information that the main
-application will ultimately process.</p>
-<a name="messageexchange"></a>
-
-<h2>Message Exchange Patterns</h2>
-
-<p>Although all SOAP messages carry the same structure, the ways in which use
-them can be combined into a number of different "message exchange patterns",
-or MEPs. The two major message exchange patterns are:</p>
-<ul>
-  <li>In-Out: in this MEP, the client sends a soap message to the server, in
-    which processes the message and sends a response back. This is probably
-    the most commonly used MEP, and is useful for tasks such as searching for
-    information, or submitting information in situations in which
-    acknowledgment is important.</li>
-  <li>In-Only: In this MEP, the client sends a message to the server without
-    the expectation of receiving a response. You may use this MEP for
-    activities such as pinging a server to wake it up, reporting logging
-    information for which you need no acknowledgment, and so on.</li>
-</ul>
-
-<p>Within these two MEPs, you also have several variables to consider:</p>
-<ul>
-  <li>Blocking versus non-blocking: When the client sends a message, the
-    application may wait to receive a response before moving on, or it may
-    simply send a message and then move on, specifying a callback action to
-    be completed when the response is received.</li>
-  <li>Number of parameters: Ultimately, a message sent from a client to
-    server is intended to execute a particular action. That action may
-    require no parameters, or it may require one or more parameters. These
-    parameters must be encoded as part of the payload of the message.</li>
-</ul>
-
-<p>Taking all of these options into consideration, you can create virtually
-any MEP. For example, you can create an Out-Only system by reversing roles
-for the In-Only MEP. Axis2 also includes support for less prominent MEPs,
-such as Robust-In-Only.</p>
-
-<p><strong>See Next Section</strong> - <a
-href="userguide-creatingclients.html#createclients">Creating Clients</a></p>
-</body>
-</html>
+<html lang="en">
+<head>
+  <meta http-equiv="content-type" content="">
+  <title>Apache Axis2 User's Guide- Introduction to Services</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
+</head>
+
+<body>
+<a name="introservices"></a>
+
+<h1>Apache Axis2 User's Guide - Introduction to Services</h1>
+
+<p>The term "Web services" can apply to a number of different ways of sending
+information back and forth. However, this guide focuses on the sending and
+receiving of SOAP messages. SOAP messages are XML documents that consist of
+an "envelope" containing a "payload" (see Code Listing 4).</p>
+
+<h2>Content</h2>
+<ul>
+  <li><a href="userguide.html#intro">Introducing Axis2</a><br>
+
+    <ul>
+      <li><a href="userguide.html#whatis">What is Axis2?</a></li>
+      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
+      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
+        messages</a></li>
+      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
+      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
+        Distribution</a></li>
+      <li><a href="userguide.html#hierarchy">Axis2.war Directory
+      Hierarchy</a></li>
+      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
+      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-installingtesting.html#installingtesting">Installing
+    and testing client code</a></li>
+  <li><a
+    href="userguide-introtoservices.html#introservices"><strong>Introduction
+    to Services</strong></a><br>
+
+    <ul>
+      <li><a
+        href="userguide-introtoservices.html#messageexchange"><strong>Message
+        Exchange Patterns</strong></a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-creatingclients.html#createclients">Creating
+    Clients</a><br>
+
+    <ul>
+      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
+        Client Generation Method</a></li>
+      <li><a href="userguide-creatingclients.html#generating">Generating
+        Clients</a></li>
+      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
+        (ADB)</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-buildingservices.html#buildservices">Building
+    Services</a><br>
+
+    <ul>
+      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
+        Comfortable with the Available Options</a></li>
+      <li><a href="userguide-buildingservices.html#createscratch">Creating a
+        service from scratch</a></li>
+      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
+        Plain Old Java Objects</a></li>
+      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
+        running an Axis2 service created from WSDL</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-samples.html">Samples</a></li>
+  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
+</ul>
+
+<h3>Code Listing 4: Example SOAP Message</h3>
+<pre>&lt;?xml version='1.0' ?&gt;
+&lt;env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
+xmlns:wsa="http://www.w3.org/2005/03/addressing"&gt; 
+ &lt;env:Header&gt;
+
+    &lt;wsa:MessageID&gt;
+      http://ws.apache.org/9C21DE32-DB42-1228-C42E-66CB101421AD
+    &lt;/wsa:MessageID&gt;
+    &lt;wsa:ReplyTo&gt;
+      &lt;wsa:Address&gt;http://example.com/projects/clientApp&lt;/wsa:Address&gt;
+    &lt;/wsa:ReplyTo&gt;
+    
+&lt;wsa:To&gt;http://example.com/axis2/publishingService&lt;/wsa:To&gt;
+    
+&lt;wsa:Action&gt;http://example.com/axis2/addDocument&lt;/wsa:Action&gt;
+ 
+&lt;/env:Header&gt;
+ &lt;env:Body&gt;
+
+  &lt;addDocument&gt;
+   &lt;docTitle&gt;What I Did On My Summer Vacation&lt;/doctitle&gt;
+   &lt;docSubtitle&gt;Children's Essays from Accross the World&lt;/docSubtitle&gt;
+   &lt;docLocation&gt;contentRepos/summerVac.doc&lt;/docLocation&gt;
+  &lt;/addDocument&gt;
+
+ &lt;/env:Body&gt;
+&lt;/env:Envelope&gt;</pre>
+
+<p>This XML document consists of the outer element or the SOAP Envelope, and
+its contents. The SOAP Envelope is in the SOAP namespace,
+http://www.w3.org/2003/05/soap-envelope, prefixed as env: and contains up to
+two children. This envelope is a standard format that pertains to every
+single SOAP message sent and received by any SOAP Web service.</p>
+
+<p>The contents of the Envelope consists of two parts; the first being the
+SOAP headers-the contents of the env:Header element. These headers, such as
+the WS-Addressing elements shown here, provide additional information about
+the message and how it should be handled. A SOAP message may carry headers
+relating to several aspects of the message, or it may carry no headers at
+all. These headers are typically processed by the message handlers.</p>
+
+<p>The second and arguably the most important part of the message is the
+payload, which consists of the contents of the env:Body element. This is the
+actual message intended for the receiver, and it is the information that the
+main application will ultimately process.</p>
+<a name="messageexchange"></a>
+
+<h2>Message Exchange Patterns</h2>
+
+<p>Although all SOAP messages carry the same structure, the ways in which
+they are used can be combined into a number of different "message exchange
+patterns", or MEPs. The two major message exchange patterns are:</p>
+<ul>
+  <li>In-Out: in this MEP, the client sends a SOAP message to the server,
+    which processes the message and sends a response back. This is probably
+    the most commonly used MEP, and is useful for tasks such as searching for
+    information or submitting information in situations in where
+    acknowledgment is important.</li>
+  <li>In-Only: In this MEP, the client sends a message to the server without
+    expecting a response. You may use this MEP for activities such as pinging
+    a server to wake it up, reporting logging information for which you do
+    not need an acknowledgment and so on.</li>
+</ul>
+
+<p>Within these two MEPs, you also have several variables to consider:</p>
+<ul>
+  <li>Blocking versus non-blocking: When the client sends a message, the
+    application may wait to receive a response before moving on, or it may
+    simply send a message and move on by specifying a callback action to be
+    completed when the response is received.</li>
+  <li>Number of parameters: Ultimately, a message sent from a client to
+    server is intended to execute a particular action. That action may not
+    require any parameters, or it may require one or more parameters. These
+    parameters must be encoded as part of the payload of the message.</li>
+</ul>
+
+<p>Taking all these options into consideration, you can create virtually any
+MEP. For example, you can create an Out-Only system by reversing roles for
+the In-Only MEP. Apache Axis2 also includes support for less prominent MEPs,
+such as Robust-In-Only.</p>
+
+<p><strong>See Next Section</strong> - <a
+href="userguide-creatingclients.html#createclients">Creating Clients</a></p>
+</body>
+</html>
Index: userguide-samples.html
===================================================================
--- userguide-samples.html	(revision 525690)
+++ userguide-samples.html	(working copy)
@@ -1,184 +1,183 @@
-<html lang="en">
-<head>
-  <meta http-equiv="content-type" content="">
-  <title>Apache Axis2 User's Guide- The Samples</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all" />
-</head>
-
-<body lang="en">
-<a name="samples"></a>
-
-<h1>Apache Axis2 User's Guide - The Samples</h1>
-
-<p>The Axis2 Standard Distribution provides a number of samples you can use
-as a guide for implementing specific features and capabilities. These
-services are listed in this section.</p>
-
-<h2>Content</h2>
-<ul>
-  <li><a href="userguide.html#intro">Introducing Axis2</a><br>
-
-    <ul>
-      <li><a href="userguide.html#whatis">What is Axis2</a></li>
-      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
-      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
-        messages</a></li>
-      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
-      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
-        Distribution</a></li>
-      <li><a href="userguide.html#hierarchy">Axis2.war Directory
-      Hierarchy</a></li>
-      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
-      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-installingtesting.html#installingtesting">Installing
-    and testing client code</a></li>
-  <li><a href="userguide-introtoservices.html#introservices">Introduction to
-    Services</a><br>
-
-    <ul>
-      <li><a href="userguide-introtoservices.html#messageexchange">Message
-        Exchange Patterns</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-creatingclients.html#createclients">Creating
-    Clients</a><br>
-
-    <ul>
-      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
-        Client Generation Method</a></li>
-      <li><a href="userguide-creatingclients.html#generating">Generating
-        Clients</a></li>
-      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
-        (ADB)</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-buildingservices.html#buildservices">Building
-    Services</a><br>
-
-    <ul>
-      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
-        Comfortable with Available Options</a></li>
-      <li><a href="userguide-buildingservices.html#createscratch">Creating a
-        service from scratch</a></li>
-      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
-        Plain Old Java Objects</a></li>
-      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
-        running an Axis2 service created from WSDL</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-samples.html"><strong>Samples</strong></a>
-    <ul>
-      <li><a
-        href="userguide-samples.html#clients"><strong>Clients</strong></a></li>
-      <li><a
-        href="userguide-samples.html#services"><strong>Services</strong></a></li>
-      <li><a href="userguide-samples.html#wsdl"><strong>Sample WSDL
-        files</strong></a></li>
-      <li><a href="userguide-samples.html#others"><strong>Other
-        Samples</strong></a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
-</ul>
-<a name="clients"></a>
-
-<h2>Clients (in samples/userguide/src/clients):</h2>
-
-<p>EchoBlockingClient.java: A basic example of the send/receive MEP.</p>
-
-<p>EchoBlockingDualClient.java: Specifies that the return message should be
-sent over a different channel than the request message.</p>
-
-<p>EchoBlockingWsaBasedClient.java: Provides an example of using the
-capabilities of WS-Addressing action mapping.</p>
-
-<p>EchoNonBlockingClient.java: Demonstrates an asynchronous request and using
-Callbacks.</p>
-
-<p>EchoNonBlockingDualClient.java: Similar to above, but uses a separate
-listener for the response.</p>
-
-<p>ClientForWebServiceWithModule.java: Simply makes a call to a service with
-engaged modules.</p>
-
-<p>ClientSideModuleEngagement.java: Demonstrates the use of modules on the
-client side, in addition to the server side.</p>
-
-<p>MailClient.java: Demonstrates the use of the Robust In-Only MEP.</p>
-
-<p>PingClient.java: A simple "fire and forget" client.</p>
-
-<p>RESTClient.java: Demonstrates the ability to request a REST response
-rather than a SOAP response. Also demonstrates setting arbitrary properties
-on the Options object.</p>
-
-<p>TCPClient.java: Provides an example of using the TCP transport rather than
-HTTP.</p>
-<a name="services"></a>
-
-<h2>Services (in samples/userguide):</h2>
-
-<p>groovyService.aar: Demonstrates how to use Groovy classes in the
-processing of SOAP messages.</p>
-
-<p>MyService.aar: Provides simple "echo" and "ping" operations.</p>
-
-<p>MyServiceWithModule.aar: Same as above, but demonstrates how to engage a
-module.</p>
-
-<p>WsaMappingService.aar: Demonstrates the mapping of WS-Addressing
-actions.</p>
-<a name="wsdl"></a>
-
-<h2>Sample WSDL files (in samples):</h2>
-
-<p>Axis2SampleDocLit.wsdl: Demonstrates the use of the Document/Literal WSDL
-pattern, rather than RPC.</p>
-
-<p>perf.wsdl: Demonstrates the use of array values as input values.</p>
-<a name="other"></a>
-
-<h2>Other samples (in samples):</h2>
-<!--<p><strong>amazonqs</strong>: Uses the Amazon Queue Service to store and
-retrieve String objects.</p>-->
-
-<p><strong>faulthandling</strong>: Demonstrates the use of SOAP faults and
-their definition in WSDL, enabling exception processing in the client.</p>
-<!--<p><strong>googlesearch</strong>: Creates a GUI-based application making use
-of Google Web Services asynchronously.</p>-->
-
-<p><strong>googleSpellcheck</strong>: Demonstrates both synchronous and
-non-synchronous use of the Google Web Service in a GUI.</p>
-
-<p><strong>mtom</strong>: Demonstrates the use of MTOM and SOAP with
-Attachments to send binary files to a service.</p>
-
-<p><strong>saopwithattachments</strong>: Demonstrates the capabilities and
-power of SOAP with Attachment support and the Attachment API of Axis2.</p>
-
-<p><strong>pojo</strong>: Example POJO (Plain Old Java Object) Web service.
-It shows how to expose the methods of a Java class as a Web service using
-Aixs2</p>
-
-<p><strong>servicelifecycle</strong>: Demonstrate usage of service life cycle
-and bit of session management. The main idea is to show where and how to use
-service life cycle interface and session related methods.</p>
-<!--<p><strong>sgccalculator</strong>: A simple calculator that demonstrates the
-use of Service Groups.</p>-->
-
-<p><strong>databinding</strong>: Demonstrates how to use WSDL2Java generated
-code with Castor.</p>
-
-<p><strong>version</strong>: A very simple service that simply outputs the
-Axis2 version.</p>
-
-<p><strong>yahoorestearch</strong>: Complete example of the use of a REST
-service rather than a SOAP service.</p>
-
-<p><strong>See Next Section</strong> - <a
-href="userguide-forfurtherstudy.html">For Further Study</a></p>
-</body>
-</html>
+<html lang="en">
+<head>
+  <meta http-equiv="content-type" content="">
+  <title>Apache Axis2 User's Guide- The Samples</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
+</head>
+
+<body lang="en">
+<a name="samples"></a>
+
+<h1>Apache Axis2 User's Guide - The Samples</h1>
+
+<p>The Apache Axis2 Standard Distribution provides a number of samples you
+can use as a guide for implementing specific features and capabilities. These
+services are listed in this section.</p>
+
+<h2>Content</h2>
+<ul>
+  <li><a href="userguide.html#intro">Introducing Axis2</a><br>
+
+    <ul>
+      <li><a href="userguide.html#whatis">What is Axis2?</a></li>
+      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
+      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
+        messages</a></li>
+      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
+      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
+        Distribution</a></li>
+      <li><a href="userguide.html#hierarchy">Axis2.war Directory
+      Hierarchy</a></li>
+      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
+      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-installingtesting.html#installingtesting">Installing
+    and testing client code</a></li>
+  <li><a href="userguide-introtoservices.html#introservices">Introduction to
+    Services</a><br>
+
+    <ul>
+      <li><a href="userguide-introtoservices.html#messageexchange">Message
+        Exchange Patterns</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-creatingclients.html#createclients">Creating
+    Clients</a><br>
+
+    <ul>
+      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
+        Client Generation Method</a></li>
+      <li><a href="userguide-creatingclients.html#generating">Generating
+        Clients</a></li>
+      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
+        (ADB)</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-buildingservices.html#buildservices">Building
+    Services</a><br>
+
+    <ul>
+      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
+        Comfortable with the Available Options</a></li>
+      <li><a href="userguide-buildingservices.html#createscratch">Creating a
+        service from scratch</a></li>
+      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
+        Plain Old Java Objects</a></li>
+      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
+        running an Axis2 service created from WSDL</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-samples.html"><strong>Samples</strong></a>
+    <ul>
+      <li><a
+        href="userguide-samples.html#clients"><strong>Clients</strong></a></li>
+      <li><a
+        href="userguide-samples.html#services"><strong>Services</strong></a></li>
+      <li><a href="userguide-samples.html#wsdl"><strong>Sample WSDL
+        files</strong></a></li>
+      <li><a href="userguide-samples.html#others"><strong>Other
+        Samples</strong></a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
+</ul>
+<a name="clients"></a>
+
+<h2>Clients (in samples/userguide/src/clients):</h2>
+
+<p>EchoBlockingClient.java: A basic example of the send/receive MEP.</p>
+
+<p>EchoBlockingDualClient.java: Specifies that the return message should be
+sent over a different channel than the request message.</p>
+
+<p>EchoBlockingWsaBasedClient.java: Provides an example of using the
+capabilities of WS-Addressing action mapping.</p>
+
+<p>EchoNonBlockingClient.java: Demonstrates an asynchronous request using
+Callbacks.</p>
+
+<p>EchoNonBlockingDualClient.java: Similar to the above, but uses a separate
+listener for the response.</p>
+
+<p>ClientForWebServiceWithModule.java: Simply makes a call to a service with
+engaged modules.</p>
+
+<p>ClientSideModuleEngagement.java: Demonstrates the use of modules on the
+client side, in addition to the server side.</p>
+
+<p>MailClient.java: Demonstrates the use of the Robust In-Only MEP.</p>
+
+<p>PingClient.java: A simple "fire and forget" client.</p>
+
+<p>RESTClient.java: Demonstrates the ability to request a REST response
+rather than a SOAP response. Also demonstrates setting arbitrary properties
+on the Options object.</p>
+
+<p>TCPClient.java: Provides an example of using the TCP transport rather than
+HTTP.</p>
+<a name="services"></a>
+
+<h2>Services (in samples/userguide):</h2>
+
+<p>groovyService.aar: Demonstrates how to use Groovy classes in the
+processing of SOAP messages.</p>
+
+<p>MyService.aar: Provides simple "echo" and "ping" operations.</p>
+
+<p>MyServiceWithModule.aar: Same as above, but demonstrates how to engage a
+module.</p>
+
+<p>WsaMappingService.aar: Demonstrates the mapping of WS-Addressing
+actions.</p>
+<a name="wsdl"></a>
+
+<h2>Sample WSDL files (in samples):</h2>
+
+<p>Axis2SampleDocLit.wsdl: Demonstrates the use of the Document/Literal WSDL
+pattern, rather than RPC.</p>
+
+<p>perf.wsdl: Demonstrates the use of array values as input values.</p>
+<a name="other"></a>
+
+<h2>Other samples (in samples):</h2>
+<!--<p><strong>amazonqs</strong>: Uses the Amazon Queue Service to store and
+retrieve String objects.</p>-->
+
+<p>faulthandling: Demonstrates the use of SOAP faults and their definitions
+in WSDL enabling exception processing in the client.</p>
+<!--<p><strong>googlesearch</strong>: Creates a GUI-based application making use
+of Google Web Services asynchronously.</p>-->
+
+<p>googleSpellcheck: Demonstrates both synchronous and non-synchronous use of
+the Google Web Service in a GUI.</p>
+
+<p>mtom: Demonstrates the use of MTOM and SOAP with Attachments to send
+binary files to a service.</p>
+
+<p>saopwithattachments: Demonstrates the capabilities and power of SOAP with
+Attachment support and the Attachment API of Axis2.</p>
+
+<p>pojo: Example of a POJO (Plain Old Java Object) Web service. It shows how
+to expose the methods of a Java class as a Web service using Apache Aixs2.</p>
+
+<p>servicelifecycle: Demonstrates the usage of a service life cycle and a bit
+of session management. The main idea is to show where and how to use the
+service life cycle interface and session related methods.</p>
+<!--<p><strong>sgccalculator</strong>: A simple calculator that demonstrates the
+use of Service Groups.</p>-->
+
+<p>databinding: Demonstrates how to use WSDL2Java generated code with
+Castor.</p>
+
+<p>version: A very simple service that simply outputs the Apache Axis2
+version.</p>
+
+<p>yahoorestearch: A complete example of the use of a REST service rather
+than a SOAP service.</p>
+
+<p><strong>See Next Section</strong> - <a
+href="userguide-forfurtherstudy.html">For Further Study</a></p>
+</body>
+</html>
Index: webadminguide.html
===================================================================
--- webadminguide.html	(revision 525690)
+++ webadminguide.html	(working copy)
@@ -2,21 +2,25 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
 <html>
 <head>
+  <meta http-equiv="content-type" content="">
   <title>Apache Axis2 Web Administrator's Guide</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
 </head>
 
 <body lang="en">
 <h1 align="center">Apache Axis2 Web Administrator's Guide</h1>
 
-<p>This document will give you detailed instructions on administration
-console of Axis2 Web application. Axis2 Administration is all about
-configuring Axis2 at the run time and the configuration will be transient.</p>
+<p>This document gives you detailed information on the administration console
+of the Apache Axis2 Web application. Apache Axis2 Administration is all about
+configuring Apache Axis2 at run time, where the configuration is
+transient.</p>
 
 <p><i>Send your feedback to: <a
-href="mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</a></i>. Prefix
-subject with [Axis2]. To subscribe to mailing list see <a
-href="http://ws.apache.org/axis2/mail-lists.html">here.</a></p>
+href="mailto:axis-dev@ws.apache.org?subject=[Axis2]">axis-dev@ws.apache.org</a></i>.
+(Subscription details are available on the <a
+href="http://ws.apache.org/axis2/mail-lists.html">Axis2 site</a>.) Kindly
+prefix every email subject with [Axis2].</p>
 
 <h2>Contents</h2>
 <ul>
@@ -66,43 +70,46 @@
   </li>
 </ul>
 <a name="Intro"></a>
+
 <h3>Introduction</h3>
 
-<p>Axis2 Web application has three main sections, 'Services'- lists all the
-available services deployed in this server, 'Validate'-checks the system to
-see whether all the required libraries are in place and views the system
-information, and 'Administration'- Axis2 Web Administration module which is
-the console for administering this Axis2 installation.</p>
+<p>The Apache Axis2 Web application has three main sections: 'Services' lists
+all the available services deployed in this server, 'Validate' checks the
+system to see whether all the required libraries are in place and views the
+system information, and 'Administration' is the Axis2 Web Administration
+module which is the console for administering the Apache Axis2
+installation.</p>
 
-<p>Axis2 Web Administration module provides a way to configure Axis2
+<p>The Axis2 Web Administration module provides a way to configure Axis2
 dynamically. It's important to note that this dynamic configuration will NOT
-be persistent, i.e. if the servlet container is restarted then all the
+be persistent, i.e., if the servlet container is restarted, then all the
 dynamic configuration changes will be lost.</p>
 <a name="login"></a>
-<h4>Login into Administration Site</h4>
 
-<p>Once Axis2 is successfully installed, the Web application can be accessed
-(See <a href="installationguide.html">Installation Guide</a> for
-instructions). From <a href="#homepage">Axis2 Web Application Home page</a>
-you can go to Administration page by following 'Administration' link, then
-login page shown below will appear requesting user name and a password. The
-default user name is 'admin' (without quotes) and default password is 'axis2'
-(without quotes).</p>
+<h4>Log on to the Administration Site</h4>
 
+<p>Once Apache Axis2 is successfully installed, the Web application can be
+accessed (see <a href="installationguide.html">Installation Guide</a> for
+instructions). From the <a href="#homepage">Axis2 Web Application Home
+page</a> you can go to the Administration page by clicking the
+'Administration' link. The Login page shown below will appear requesting the
+user name and password. The default user name is 'admin' (without quotes) and
+default password is 'axis2' (without quotes).</p>
+
 <p align="center"><img alt="" src="images/adminlogin.jpg"></p>
 
-<p>You can change the user name &amp; password values by changing following
-two parameters in axis2.xml as required.</p>
+<p>You can change the user name and password values by changing the following
+two parameters in the axis2.xml as required.</p>
 
 <p align="center"><img alt="" src="images/parameters.jpg"></p>
 
-<p>If the login is successful you will see the screen below. This is where
-you can view the configuration and the state of the running system and
+<p>If the log on is successful, you will see the screen below. This is where
+you can view the configuration and the status of the running system and
 dynamically configure it.</p>
 
 <p align="center"><img alt="" src="images/admin.jpg"></p>
+<a name="adminoptions"></a>
 
-<a name="adminoptions"></a>
 <h3>Administration Options</h3>
 <ul>
   <a name="tools"><b>Tools</b></a>
@@ -142,15 +149,17 @@
   </ul>
 </ul>
 <a name="homepage"></a>
-<h3>Axis2 Web Application Home Page</h3>
 
+<h3>Apache Axis2 Web Application Home Page</h3>
+
 <p align="center"><strong><img alt=""
 src="images/clip_image006.jpg"></strong></p>
 <a name="upservice"></a>
+
 <h3>Upload Services</h3>
 
-<p>You can upload packaged Axis2<em> </em>service archive files using this
-page. This can be done in two simple steps:</p>
+<p>You can upload packaged Apache Axis2<em> </em>service archive files using
+this page. This can be done in two simple steps:</p>
 <ul>
   <li>Browse to the location and select the axisService archive file you wish
     to upload</li>
@@ -162,62 +171,64 @@
 
 <h3>Available Services</h3>
 
-<p>The functionality of the 'Available Services' option is almost same as the
-functionality of Axis2 Web Application Home page 'Services' option where it
-displays a list of deployed services and their operations. But as an
-additional feature, the 'Available Services' page will list details of
-modules that are engaged to the deployed services and their operations on a
-global, service or on an operation level.</p>
+<p>The functionality of the 'Available Services' option is almost the same as
+the functionality of the 'Services' option on the Axis2 Web Application Home
+page, where it displays a list of deployed services and their operations. As
+an additional feature, the 'Available Services' page lists details of modules
+that are engaged to the deployed services and their operations on a global,
+service or on an operation level.</p>
 
-<p>Using the 'Disengage' link one can disengage the corresponding module, as
-long as the module is not globally engaged (engaged to all services and
-operations).</p>
+<p>Using the 'Disengage' link, you can disengage the corresponding module as
+long as the module is not globally engaged (i.e., engaged to all the services
+and operations).</p>
 
 <p>Click on a specific service and it will give you the WSDL file of that
 particular service.</p>
 
 <p><strong>Faulty services</strong> of this system will also be listed on
-this page. Click on each faulty service, it will take you to a page that
-lists the exception stack trace of the exception that caused service to be
-faulty.</p>
+this page. Click on a faulty service to view a page that lists the exception
+stack trace of the exception, which caused the service to be faulty.</p>
 
 <p align="center"><img alt="" src="images/adminmain.jpg"></p>
 <a name="servgroups"></a>
 
 <h3>Available Service Groups</h3>
 
-<p>Service group is a logical collection of related services and the
+<p>Service group is a logical collection of related services, and the
 'Available Service Groups' link will list all the available service groups in
 the system.</p>
 
 <p align="center"><img alt="" src="images/servicegroups.jpg"></p>
 <a name="avmodules"></a>
+
 <h3>Available Modules</h3>
 
 <p>To view the available modules in the 'modules' directory of the
-'repository' click 'Available Modules' link. This will show you all the
-available modules in the system. Those modules can be engaged dynamically.</p>
+repository, click 'Available Modules'. This will show you all the available
+modules in the system. Those modules can be engaged dynamically.</p>
 
 <p align="center"><img alt="" src="images/modules.jpg"></p>
 <br>
 <a name="globalmodules"></a>
+
 <h3>Globally Engaged Modules</h3>
 
-<p>From the 'Globally Engaged Modules' link you can view globally engaged
-modules, if any. If a module was engaged globally then the handlers that
-belong to that module will be executed irrespective of the service.</p>
+<p>Click the 'Globally Engaged Modules' to view the globally engaged modules,
+if any. If a module is engaged globally, then the handlers that belong to
+that module will be executed irrespective of the service.</p>
 <a name="phases"></a>
+
 <h3>Available Phases</h3>
 
 <p>The 'Available Phases' link will display all the available phases. In
-Axis2 there are two levels of phases:</p>
+Axis2, there are two levels of phases:</p>
 <ul>
   <li>System predefined phases (not allowed to be changed)</li>
   <li>User defined phases</li>
 </ul>
 
 <p>The main difference between these two levels is that system predefined
-phases will be invoked irrespective of the services, while user defined
+phases will be invoked irrespective of the services, while the user defined
 phases will be invoked when the dispatcher finds the operation. Note that it
 is essential for module developers and service writers to have a good
 understanding of phases and phase ordering.</p>
@@ -225,20 +236,22 @@
 <p align="center"><img alt="" src="images/viewphases.jpg"></p>
 <br>
 <a name="globalchains"></a>
+
 <h3>Global Chains</h3>
 
 <p>The 'Global Chains' link will display all the Global Execution Chains. The
-most interesting feature of Axis2 Web Administration Module is that it
-provides a very basic way of viewing the global phase list and handlers
-inside the phases depending on both phase and handler orders. This kind of
-information is extremely useful in debugging the system, as there is no other
-way to list out handlers in the global chains. If you engage a new module,
-the new handlers will be added to the global chains and will be displayed on
-this page.</p>
+most interesting feature of the Axis2 Web Administration Module is that it
+provides a very basic method of viewing the global phase list and handlers
+inside the phases depending on both the phase and handler orders. This kind
+of information is extremely useful in debugging the system, as there is no
+other way to list out handlers in the global chains. If you engage a new
+module, the new handlers will be added to the global chains and will be
+displayed on this page.</p>
 
 <p align="center"><img alt="" src="images/globalchain.jpg"></p>
 <br>
 <a name="operationchains"></a>
+
 <h3>Operation Specific Chains</h3>
 
 <p>The 'Operation Specific Chains' link can be used to view the handlers
@@ -249,81 +262,85 @@
 <br>
 
 
-<p>Select service of which service handlers you wish to view from the list
-box, and click on the 'View' button to view handlers. The page below shows
-service handlers of service <em>version</em></p>
+<p>Select the service of whose service handlers you wish to view from the
+list, and click 'View' to view the handlers. The page below shows the service
+handlers of the service <em>version</em></p>
 
 <p align="center"><img alt="" src="images/serviceHandlers.jpg"></p>
 <br>
 <a name="engaginmodule"></a>
+
 <h3>Engaging Modules</h3>
 
-<p>The 'Engaging Modules' link allows to engage modules either globally (to
-all services), to a service group, to a service or to an operation depending
-on the module implementation. If the module was designed to engage the
-handlers globally then handlers in the module can be included in any phase in
-the system. It can be either a system predefined phase or a user defined
-phase.</p>
+<p>The 'Engaging Modules' link allows you to engage modules either globally
+(to all services), to a service group, to a service, or to an operation
+depending on the module implementation. If the module was designed to engage
+the handlers globally, then the handlers in the module can be included in any
+phase in the system. It can be either a system predefined phase or a user
+defined phase.</p>
 
 <p>On the other hand, if the module was implemented in such a way that it is
 going to be deployed to a service or to an operation, then the module cannot
 be included in any of the <a href="#phases">System Predefined Phases</a>.
 Thus it can only be included in <a href="#phases">User Defined Phases</a>.</p>
 
-<p>Immediately after engaging the module you can see the status of engagement
-indicating whether it is engaged properly or not.</p>
+<p>Immediately after engaging the module, you can see the status of the
+engagement indicating whether it is engaged properly or not.</p>
 
 <p align="center"><img alt="" src="images/moduleengage.jpg"></p>
+<a name="turnoffservice"></a>
 
-<a name="turnoffservice"></a>
 <h3>Deactivate Service</h3>
 
-<p>The 'Deactivate Service' link under 'Services' list will lead to the page
-below. Deactivate service functionality provide a way to remove unnecessary
-services from the running system, but the removal is transient which means if
-you restart the system the service will be available.</p>
+<p>The 'Deactivate Service' link under the 'Services' list will lead to the
+page below. The Deactivate service functionality provides a way to remove
+unnecessary services from the running system, but the removal is
+transient--which means that if you restart the system, the service will be
+active.</p>
 
-<p>To deactivate service, select service from list box, tick 'Deactivate
-service' check box, then click on 'Deactivate' button. 'Clear' button will
-clear the 'Deactivate service' check box</p>
+<p>To deactivate a service, select a service from the list, select the
+'Deactivate service' check box, and then click 'Deactivate'.. The 'Clear'
+button will clear the 'Deactivate service' check box.</p>
 
 <p align="center"><img alt="" src="images/inactivate.jpg"></p>
 <br>
 <a name="turnonservice"></a>
+
 <h3>Activate Service</h3>
 
-<p>The 'Activate Service' link under 'Services' list will lead to the page
-below. Activate service functionality provides a way to activate services
-while the system is running, but the activation is transient which means if
-you restart the system the service will be inactive.</p>
+<p>The 'Activate Service' link under the 'Services' list will lead to the
+page below. The Activate service functionality provides a way to activate
+services while the system is running, but the activation is transient-- which
+means that if you restart the system, the service will be inactive.</p>
 
-<p>To activate service, select service from list box, tick 'Activate Service'
-check box, then click on 'Activate' button. 'Clear' button will clear the
-'Activate service' check box.</p>
+<p>To activate a service, select a service from the list, select the
+'Activate Service' check box, then click 'Activate'. The 'Clear' button will
+clear the 'Activate service' check box.</p>
 
 <p align="center"><img alt="" src="images/activate.jpg"></p>
 <br>
 <a name="editservicepara"></a>
+
 <h3>Edit Service Parameters</h3>
 
-<p>This functionality provides a way to change parameters in a service or its
-operations. These changes will be transient too, which means if you restart
-the system changes will not be reflected.</p>
+<p>This functionality provides a way to change the parameters in a service or
+its operations. These changes will be transient too, which means if you
+restart the system, the changes will not be reflected.</p>
 
-<p>The 'Edit Parameters' link under the 'Services' list on the navigation bar
-will link to the page where you can select services to edit Parameters. Once
-the service is selected click on the 'Edit Parameters' button. This will lead
-to the page below.</p>
+<p>The 'Edit Parameters' link under the 'Services' list (on the navigation
+bar) will link to the page where you can select the services of which you
+want to edit the parameters. Once the service is selected, click 'Edit
+Parameters'.. This will open the page shown below.</p>
 
 <p align="center"><img alt="" src="images/editserviecpara.jpg"></p>
 <br>
 <a name="viewhierarchy"></a>
+
 <h3>View Hierarchy</h3>
 
-<p>By listing current context hierarchy 'View Hierarchy' link provides a
-means to look at the system state at run time. This will list out all the
-available service group contexts, service contexts, operation context and
-etc.</p>
-
+<p>By listing the current context hierarchy, the 'View Hierarchy' link
+provides a means to look at the system state at run time. This will list out
+all the available service group contexts, service contexts, operation
+contexts, etc.</p>
 </body>
 </html>
Index: WS_policy.html
===================================================================
--- WS_policy.html	(revision 525690)
+++ WS_policy.html	(working copy)
@@ -5,19 +5,21 @@
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <title>WS Policy Support in Axis2</title>
   <meta name="generator" content="amaya 9.2.1, see http://www.w3.org/Amaya/">
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
 </head>
 
 <body lang="en">
-<h1 align="center">Web Services Policy Support In Axis2</h1>
+<h1 align="center">Web Services Policy Support In Apache Axis2</h1>
 
-<p>This document will give you an introduction to the role of Web services
-policy in Axis2.</p>
+<p>This document gives you an introduction to the role of Web services policy
+in Apache Axis2.</p>
 
-<p><i>E-mail comments/ suggestions to: <a
-href="mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</a></i>. Prefix
-subject with [Axis2]. To subscribe to mailing list see <a
-href="http://ws.apache.org/axis2/mail-lists.html">here.</a></p>
+<p>Send your feedback to: <a
+href="mailto:axis-dev@ws.apache.org?subject=[Axis2]">axis-dev@ws.apache.org</a>.
+(Subscription details are available on the <a
+href="http://ws.apache.org/axis2/mail-lists.html">Axis2 site</a>.) Kindly
+prefix every email subject with [Axis2].</p>
 
 <h2>Content</h2>
 <ul>
@@ -30,21 +32,21 @@
 
 <h2>What is Web Services (WS) Policy?</h2>
 
-<p>To consume non trivial web services one must fully understand its xml
-contract (WSDL) along with any other additional requirements, capabilities or
-preferences which translates to the configuration of the service, and
+<p>To consume non trivial web services you must fully understand its XML
+contract (WSDL) along with any other additional requirements, capabilities,
+or preferences that translate to the configuration of the service and
 essentially becomes the policies of the service.</p>
 
 <p>WS Policy framework provides a way to express the policies of a service in
-a machine-readable way. Web services infrastructure can be enhanced to
+a machine-readable way. A Web services infrastructure can be enhanced to
 understand and enforce policies at runtime. For instance, a service author
-might write a policy requiring digital signature and encryption, while
-service consumers could use the policy information to reason out whether they
-can adhere to this policy information to use the service or not.</p>
+might write a policy requiring a digital signature and encryption, while
+service consumers can use the policy information to reason out whether they
+can adhere to this policy information to use the service.</p>
 
-<p>Further more, web service infrastructure could be enhanced to enforce
-those requirements without requiring the service author to write even single
-line of code.</p>
+<p>Furthermore, Web service infrastructure can be enhanced to enforce those
+requirements without requiring the service author to write even a single line
+of code.</p>
 <a name="client"></a>
 
 <h2>Client Side WS-Policy Support</h2>
@@ -52,114 +54,119 @@
 <p>This release <strong>fully supports WS Policy at client-side</strong>. It
 means that when you codegen a stub against a WSLD which contains policies,
 the stub will contain the capability to engage the required modules with the
-appropriate configurations plus it will generate additional methods in stub 
-where the user can used set certain properties. For instance, if there is 
-a security policy attached to a binding, the generated stub will engage the
-security module for that service with the appropriate security
-configurations with some addtional methods that the user can used set properties 
-in the generated stub.</p>
+appropriate configurations, plus it will generate additional methods in the
+stub where the user can set certain properties. For instance, if there is a
+security policy attached to a binding, the generated stub will engage the
+security module for that service with the appropriate security configurations
+with some addtional methods that the user can use to set properties in the
+generated stub.</p>
 
 <h3>How it works:</h3>
 
 <h4>Phase 1: At PolicyEvaluator</h4>
 
-<p>Codegen engine runs few of its registered extensions before it generates
-the stub. When PolicyEvalutor (which is a registered Codegen extension) is
-initialized, it populates a registry of QNames of supported policy assertions to
-PolicyExtensions.</p>
+<p>The Codegen engine runs a few of its registered extensions before it
+generates the stub. When the PolicyEvalutor (which is a registered Codegen
+extension) is initialized, it populates a registry of QNames of supported
+policy assertions to PolicyExtensions.</p>
 
 <p>For instance, module Foo might have a mapping of assertion
-{http://test.com/foo, foo} which means any assertion that has this name will be 
-processed by this module. Foo module might implement the ModulePolicyExtension 
-interface through which PolicyExtension object can be obtained.</p>
+{http://test.com/foo, foo} which means any assertion that has this name will
+be processed by this module. The Foo module might implement the
+ModulePolicyExtension interface through which the PolicyExtension object can
+be obtained.</p>
 
 <p>A <strong>PolicyExtension</strong> is the access point for a module to add
-any additional methods to the stub. For instance Reliable Messaging module can add
-startSequence() and endSequence() methods to the stub, that the user must call to
-start and end an RM sequence.</p>
+any additional methods to the stub. For instance a Reliable Messaging module
+can add startSequence() and endSequence() methods to the stub, that the user
+must call to start and end an RM sequence.</p>
 
-<p>Then at the engagement of PolicyEvaluator, effective policy of each messages 
-of every operation is calculated based on policy information declared in the WSDL
-document. Here we assume that effective policy of an operation contains a
-single alternative (<strong>Multiple policy alternatives are not
-supported</strong>). Then we split that policy as follows into few other
-policies such that, each policy will contain assertions that can be processed
-by a single module.</p>
+<p>Then at the engagement of the PolicyEvaluator, the effective policy of
+each message of every operation is calculated based on policy information
+declared in the WSDL document. Here we assume that the effective policy of an
+operation contains a single alternative (<strong>Multiple policy alternatives
+are not supported</strong>). Then we split that policy as follows into few
+other policies such that, each policy will contain assertions that can be
+processed by a single module.</p>
 <pre>  &lt;wsp:Policy&gt;         &lt;wsp:Policy&gt;       &lt;wsp:Policy&gt;        
     &lt;a:Foo/&gt;             &lt;a:Foo/&gt;           &lt;b:Foo/&gt;               
-    &lt;b:Bar/&gt;      =&gt;    		           &lt;/wsp:Policy&gt;       
-    		               &lt;/wsp:Policy&gt;
+    &lt;b:Bar/&gt;      =&gt;                               &lt;/wsp:Policy&gt;       
+                                   &lt;/wsp:Policy&gt;
   &lt;/wsp:Policy&gt;</pre>
 
-<p>Then each policy is given to the appropriate PolicyExtension with an
+<p>Then each policy is given the appropriate PolicyExtension with an
 org.w3c.Element type object to which the module can append any other
 elements/attributes it wishes. Those attributes/elements should resolve to
-meaningful stub functions via Custom PolicyExtensionTemplate.xsl at latter point
-of time.</p>
+meaningful stub functions through the Custom PolicyExtensionTemplate.xsl at a
+latter point of time.</p>
 
-<p>For instance depending on the policy, Security module can append
+<p>For instance, depending on the policy, the Security module can append
 &lt;username&gt;, &lt;passwd&gt; elements to the given element as children,
 which are later resolved into setUsername(..), setPasswd(..), functions of
-the stub. This way a module can include additional methods to the stub which
+the stub. This way a module can include additional methods to the stub that
 can be used to get specific propreties from the user. These methods store any
-user input in the ServiceClient properties 
+user input in the ServiceClient properties
 (ServiceClient.getOptions().putProperty(...)) which can later be accessed by
 the module.</p>
 
 <h4>Phase 2: At AxisServiceBasedMultiLanguageClientEmitter</h4>
 
-<p>Further, policies (based on the WSDL) at appropriate levels
-(service level, operation level) are stored as policy strings in the stub. If 
-there are few policies at a given level they are merged together and represented
-as a single policy in the stub. Few more generic methods are also added to the 
-stub which are used to evaluate/process policies at runtime.</p>
+<p>Further, policies (based on the WSDL) at appropriate levels (service
+level, operation level) are stored as policy strings in the stub. If there
+are a few policies at a given level, they are merged together and represented
+as a single policy in the stub. Few more generic methods are also added to
+the stub which are used to evaluate and process the policies at runtime.</p>
 
 <h4>Phase 3: Runtime</h4>
 
 <p>When a new stub object is created, the policy strings in the stub are
-converted into policy objects and are set in the AxisDescription hierarchy that 
-is used in the stub. In other words, any policy information available in the 
-WSDL will be preserved in the AxisService object that is used in the stub.</p>
+converted into policy objects and are set in the AxisDescription hierarchy
+that is used in the stub. In other words, any policy information available in
+the WSDL will be preserved in the AxisService object that is used in the
+stub.</p>
 
-<p>Then based on its policy each AxisDescription is engaged to a set of
-modules. Modules can do a prior calculation of configurations if needed at the
-engagement.</p>
+<p>Then based on its policy, each AxisDescription is engaged to a set of
+modules. Modules can do a prior calculation of configurations if needed at
+the engagement.</p>
 
 <p>When the stub method is invoked, those modules which are engaged to that
-AxisDescription, access the policy for that operation via AxisDescription object.
-It can get other information needed from the MessageContext which get stored by 
-stub methods which the module has added to the stub earlier via 
-ModulePolicyExtension implementation. The modules are required to loads their 
-configurations according to the effective policy which is set at AxisDescription
-and properties they get via MessageContext.</p>
+AxisDescription, access the policy for that operation via the AxisDescription
+object. It can get the other required information from the MessageContext,
+which is stored by stub methods that the module has added to the stub
+earlier, through the ModulePolicyExtension implementation. The modules are
+required to load their configurations according to the effective policy,
+which is set at AxisDescription, and the properties they get via
+MessageContext.</p>
 <a name="server"></a>
 
 <h2>Server Side WS-Policy Support</h2>
 
-<p>In this current release Axis2 framework uses WS-Commons/Neethi framework
-to manipulate policy documents. All its description builders store any policy
-information included in description documents (services.xml, axis2.xml, ..
-etc) in the appropriate description classes. This information is available at
-both deployment and run time via these description classes.</p>
+<p>In this current release, the Apache Axis2 framework uses the
+WS-Commons/Neethi framework to manipulate policy documents. All its
+description builders store the policy information included in description
+documents (services.xml, axis2.xml, .. etc) in the appropriate description
+classes. This information is available at both deployment and run time via
+these description classes.</p>
 
 <p>When generating WSDL dynamically for each service, policy information in
 the description classes is included. For instance, if you declare a policy in
-axis2.xml then that policy is reflected in service elements of WSDL of every
-service. If a policy is declared in a services.xml, it is shown in the
-service element of WSDL for that particular service.</p>
+axis2.xml, then that policy is reflected in the service elements of the WSDL
+of every service. If a policy is declared in a services.xml, it is shown in
+the service element of WSDL for that particular service.</p>
 
-<p>Further when a service is deployed, an arbitary policy alternative is 
-selected and set for each AxisOperation and AxisMessages of the AxisService. If 
-the selected Policy alternative can not be supported by any modules that are 
-capable of processing the selective alternative, then the service is considered 
-as a faulty service. Else set of modules is engaged at appropriate levels to 
-support the requirments and capabilities that are defined in the Policies 
-that are associated with the AxisDescription.</p>
+<p>Further, when a service is deployed, an arbitary policy alternative is
+selected and set for each AxisOperation and AxisMessages of the AxisService.
+If the selected Policy alternative cannot be supported by any modules that
+are capable of processing the selective alternative, then the service is
+considered as a faulty service. Else, the set of modules is engaged at
+appropriate levels to support the requirments and capabilities that are
+defined in the Policies associated with the AxisDescription.</p>
 
-<p>It is evident that there is some work left to make axis2 a fully fledged 
-ws-policy supported web service infrastructure. But it is encouraging to note 
-that we've taken the first steps towards this goal. We appreciate any suggestions,
-patches etc you send us in this regard. Keep on contributing...!</p>
+<p>It is evident that there is some work left to make Apache Axis2 a fully
+fledged ws-policy supported Web service infrastructure. However, it is
+encouraging to note that we've taken the first steps towards this goal. We
+appreciate any suggestions, patches, etc., you send us in this regard. Keep
+on contributing!</p>
 <a name="resources"></a>
 
 <h2>Resources</h2>
Index: xmlbased-server.html
===================================================================
--- xmlbased-server.html	(revision 525690)
+++ xmlbased-server.html	(working copy)
@@ -2,40 +2,48 @@
 <head>
   <meta http-equiv="content-type" content="">
   <title>Writing Web Services Using Axis2's Primary APIs</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
 </head>
+
 <body>
-
 <a name="Writing_Web_Services_Using Axis2's_Primary_APIs"></a>
-<h1>Writing Web Services Using Axis2's Primary APIs</h1>
-<p>Axis2 dispatches a component called <strong>MessageReceiver</strong> while Receiving a Message in the server. Axis2 provides different implementations of this class and it can be configured by adding a messageReceiver tag to services.xml. Axis2 provides implementation for class of Message receivers called RawXml Message receivers. They work on XML level and could only handle OMElements as parameters. This Section explains how to write a service using them.</p>
 
-<p>In our example, the web service will have two operations.</p>
+<h1>Writing Web Services Using Apache Axis2's Primary APIs</h1>
+
+<p>Apache Axis2 dispatches a component called
+<strong>MessageReceiver</strong> when Receiving a Message to the server.
+Apache Axis2 provides different implementations of this class and it can be
+configured by adding a messageReceiver tag to services.xml. Apache Axis2
+provides an implementation for a class of Message receivers called RawXml
+Message receivers. They work at the XML level and can only handle OMElements
+as parameters. This section explains how to write a service using them.</p>
+
+<p>In our example, the Web service will have two operations.</p>
 <pre>public void ping(OMElement element){} //IN-ONLY operation, just accepts the OMElement and does some processing.
 public OMElement echo(OMElement element){}//IN-OUT operation, accepts an OMElement and  
                                           // sends back the same again </pre>
 <a name="How_to_write_the_Web_Service_"></a>
-<h4>How to write a Web Service?</h4>
-Writing a new Web service with Axis2 involves four steps:
+
+<h4>How to Write a Web Service?</h4>
+Writing a new Web service with Apache Axis2 involves four steps:
 <ol>
-  <li>Write the Implementation Class</li>
-  <li>Write a services.xml file to explain the
-    Web service</li>
-  <li>Create a *.aar archive (Axis Archive) for
-    the Web service</li>
-  <li>Deploy the Web service</li>
+  <li>Write the Implementation Class.</li>
+  <li>Write a services.xml file to explain the Web service.</li>
+  <li>Create a *.aar archive (Axis Archive) for the Web service.</li>
+  <li>Deploy the Web service.</li>
 </ol>
+<a name="Step1_:Write_the_Implementation_Class"></a>
 
-<a name="Step1_:Write_the_Implementation_Class"></a>
 <h4>Step1: Write the Implementation Class</h4>
 
 <p>An implementation class has the business logic for the Web service and
 implements the operations provided by the Web service. Unless you have data
-binding, the signature of the methods can have only one parameter of type
+binding, the signature of the methods can have only one parameter of the type
 OMElement.</p>
 
-<p>For more details on OMElement see <a href="http://ws.apache.org/commons/axiom/OMTutorial.html">OM
-Tutorial</a>.</p>
+<p>For more details on OMElement see the <a
+href="http://ws.apache.org/commons/axiom/OMTutorial.html">OM Tutorial</a>.</p>
 <pre>public class MyService{
     public void ping(OMElement element){
         // Business Logic     
@@ -45,12 +53,12 @@
      ......
     }
 }</pre>
+<a name="Step2_:Write_the_services_xml_file"></a>
 
-<a name="Step2_:Write_the_services_xml_file"></a>
 <h4>Step2: Write the services.xml file</h4>
 
 <p>"services.xml" has the configuration for a Web service. Each Web service,
-deployed in Axis2 , must have its configuration in "services.xml". The
+deployed in Apache Axis2 , must have its configuration in "services.xml". The
 configuration for MyService is as follows:</p>
 <pre>&lt;service &gt;
     &lt;description&gt;
@@ -67,7 +75,7 @@
     &lt;/operation&gt;
  &lt;/service&gt;</pre>
 
-<p><em>The above XML tags can be explained as follows:</em></p>
+<p>The above XML tags can be explained as follows:</p>
 
 <p>1. The description of the service class is provided in the description
 tag.</p>
@@ -79,7 +87,7 @@
 <p>2. The name of the service class is provided as a parameter.</p>
 <pre>&lt;parameter name="serviceClass" locked="false"&gt;userguide.example1.MyService&lt;/parameter&gt;</pre>
 
-<p>3. The "operation" xml tag describes the operations that are available in
+<p>3. The "operation" XML tag describes the operations that are available in
 this service with respective message receivers.</p>
 <pre>   &lt;operation name="echo"&gt;
             &lt;messageReceiver class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
@@ -91,23 +99,23 @@
    &lt;/operation&gt;</pre>
 
 <p>4. Every operation must map to a corresponding MessageReceiver class.
-After a message is processed by the handlers, Axis2 engine hands it over to a
-MessageReceiver.</p>
+After a message is processed by the handlers, the Axis2 engine hands it over
+to a MessageReceiver.</p>
 
 <p>5. For the "echo" operation, we have used a
 <strong>RawXMLINOutMessageReceiver</strong> since it is an IN-OUT operation.
-For IN-ONLY operation "ping", we have used
+For the IN-ONLY operation "ping", we have used
 <strong>RawXMLINOnlyMessageReceiver</strong> as the message receiver.</p>
 
 <p>6. The actionMapping is required only if you want to enable WS-Addressing.
 This will be used later in this user guide.</p>
 
 <p>7. You can write a services.xml file to include a group of services
-instead of a single service. This makes management and deployment of a set of
-related services very easy. At runtime you can share information between
-these services within a single interaction using the ServiceGroupContext. If
-you hope to use this functionality, the services.xml file should have the
-following format.</p>
+instead of a single service. This makes the management and deployment of a
+set of related services very easy. At runtime, you can share information
+between these services within a single interaction using the
+ServiceGroupContext. If you hope to use this functionality, the services.xml
+file should have the following format.</p>
 <pre>&lt;ServiceGroup&gt;
   &lt;service name="Service1"&gt;
     &lt;!-- details for Service1 --&gt;
@@ -119,44 +127,43 @@
   &lt;parameter name="serviceGroupParam1" locked="false"&gt;value 1&lt;/parameter&gt;
 &lt;/serviceGroup&gt;</pre>
 
-<p>Note : name of the service is a compulsory attribute.</p>
+<p>Note : The name of the service is a compulsory attribute.</p>
+<a name="Step3_:Create_the_Web_Service_Archive"></a>
 
-<a name="Step3_:Create_the_Web_Service_Archive"></a>
 <h4>Step3: Create the Web Service Archive</h4>
 
-<p>Axis2 uses ".aar" (Axis Archive) file as the deployment package for Web
-services. Therefore, for MyService we will use "MyService.aar" with the
-"services.xml" packaged in the META-INF in directory structure shown below.
-Please note that the name of the archive file will be same as that of the
-service only if the services.xml contains only one service element.</p>
+<p>Apache Axis2 uses the ".aar" (Axis Archive) file as the deployment package
+for Web services. Therefore, for MyService we will use "MyService.aar" with
+the "services.xml" packaged in the META-INF in the directory structure shown
+below. Please note that the name of the archive file will be the same as that
+of the service only if the services.xml contains only one service element.</p>
 
 <p><img src="images/userguide/ServiceItems.jpg" name="Graphic1"
 align="bottom" width="176" height="91" border="0"></p>
 
-<p>To create the archive file, you can create a jar file containing all the
-necessary files and then rename it to .aar file. This archive file can be
-found in the "Axis2_HOME/samples/userguide" directory. This file now has to
-be deployed.</p>
+<p>To create the archive file, you can create a .jar file containing all the
+necessary files and then rename it to a .aar file. This archive file can be
+found in the "Axis2_HOME/samples/userguide" directory. This file has to be
+deployed now.</p>
+<a name="Step4_:Deploy_the_Web_Service"></a>
 
-<a name="Step4_:Deploy_the_Web_Service"></a>
 <h4>Step4: Deploy the Web Service</h4>
 
-<p>The service can be deployed by dropping the ".aar" file into
+<p>The service can be deployed by dropping the ".aar" file into the
 "services" directory in "/webapps/axis2/WEB-INF" of your servlet container.
-Start the servlet container (if you have not already started) and check the
-link "Services" on the <a href="http://localhost:8080/axis2/"
-target="_blank">Home Page of Axis2 Web Application</a>
-(http://localhost:8080/axis2) and see whether the MyService is deployed
-properly. If you can see the following output then you have successfully
-deployed MyService on Axis2. Congratulations !!</p>
+Start the servlet container (if you have not already started), click the link
+"Services" on the <a href="http://localhost:8080/axis2/" target="_blank">Home
+Page of Axis2 Web Application</a> (http://localhost:8080/axis2) and see
+whether MyService is deployed properly. If you can see the following output,
+then you have successfully deployed MyService on Apache Axis2.
+Congratulations !!</p>
 
 <p align="center"><img src="images/userguide/MyServiceDeployed.jpg"
 name="Graphic2" align="bottom" border="0"></p>
 
-<p>Note: Axis2 provides an easy way to deploy Web services using the "Upload
-Service" tool on Axis2 Web Application's Administration module. Please refer
-to the <a href="webadminguide.html" target="_blank">Web Administration
-Guide</a> for more information.</p>
-
+<p>Note: Apache Axis2 provides an easy way to deploy Web services using the
+"Upload Service" tool on the Axis2 Web Application's Administration module.
+Please refer to the <a href="webadminguide.html" target="_blank">Web
+Administration Guide</a> for more information.</p>
 </body>
 </html>
