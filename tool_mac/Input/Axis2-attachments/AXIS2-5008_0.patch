/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.axis2.deployment;

import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.description.Parameter;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.axis2.engine.AxisConfigurator;
import org.apache.axis2.util.Loader;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class FileSystemConfigurator extends DeploymentEngine implements AxisConfigurator {

    private static final Log log = LogFactory.getLog(FileSystemConfigurator.class);

    private final File configFile; // axis2 xml config file in the repository; null if not found
    private File repoLocation; // where the repository is; starts with directory of config file; may be set from config file after that...
    
    /**
     * Helper to determine "repoLocation". Returns either null or a File that is the absolute to an 
     * existing and readable directory. Special case: repoLocationIn (or its replacement, defaultRepoLocation)
     * is "" or "." or ".." or a relative path: the returned File is the absolute path to the corresponding
     * location underneath the current working directory, whatever that is. 
     */
    
    private static File determineRepoLocation(String repoLocationIn, String defaultRepoLocation, boolean verifyRepoLocation) throws AxisFault {
        String repoLocation = (repoLocationIn != null) ? repoLocationIn : defaultRepoLocation;
        if (repoLocation != null) {
            File resDir = new File(new File(repoLocation).getAbsolutePath());
            if (verifyRepoLocation) {
                if (!resDir.exists()) {
                    String msg = "Repository location '" + resDir.getAbsolutePath() + "' doesn't exist";
                    log.info(msg);
                    throw new AxisFault(msg);
                }
                if (!resDir.isDirectory()) {
                    String msg = "Repository location '" + resDir.getAbsolutePath() + "' is not a directory";
                    log.info(msg);
                    throw new AxisFault(msg);
                }
                if (!resDir.canRead()) {
                    String msg = "Repository location '" + resDir.getAbsolutePath() + "' is not readable";
                    log.info(msg);
                    throw new AxisFault(msg);
                }
                // Unsure whether needed
                /*
                if (!resDir.canExecute()) {
                    String msg = "Repository location '" + resDir.getAbsolutePath() + "' is not executable";
                    log.info(msg);
                    throw new AxisFault(msg);
                }
                */
            }
            return resDir;
        } else {
            return null; // botched; in effect, we don't know where to get axis2.xml from
        }
    }
    
    /**
     * Helper to determine "axis2xml". Returns the name of the file as a "File" with an absolute path
     * or null, which means that no file was found. The passed "configDir" shall not be null!
     */
    
    private static File determineAxis2Xml(File configDir,String axis2xmlIn, String defaultAxis2xml) {
        assert configDir!=null;        
        String axis2xml = (axis2xmlIn != null) ? axis2xmlIn : defaultAxis2xml;
        // still unset, try the default of the default        
        axis2xml = (axis2xml != null) ? axis2xml : Constants.AXIS2_CONF;        
        assert axis2xml != null;        
        File actualFile = new File(configDir,axis2xml);        
        // Check that the file exists... if not we'll use the default axis2.xml on the classpath later on
        if (!actualFile.exists()) {
            log.debug("Config file '" + actualFile.getAbsolutePath() + "' doesn't exist, ignoring.");
            return null;
        }
        if (!actualFile.isFile()) {
            log.debug("Config file '" + actualFile.getAbsolutePath() + "' is not a file, ignoring.");
            return null;
        }
        if (!actualFile.canRead()) {
            log.debug("Config file '" + actualFile.getAbsolutePath() + "' is not readable, ignoring.");
            return null;
        }
        // victory
        return actualFile;
    }
    
    /**
     * Load an AxisConfiguration from the specified repository directory
     *
     * @param repoLocation Can be null; directory with "axis2xml" file
     * @param axis2xml Can be null; unqualified name of the "axis2xml" file
     */

    public FileSystemConfigurator(String repoLocation, String axis2xml) throws AxisFault {
        File configDir = determineRepoLocation(repoLocation,System.getProperty(Constants.AXIS2_REPO),true);
        if (configDir != null) {
            this.configFile = determineAxis2Xml(configDir, axis2xml, System.getProperty(Constants.AXIS2_CONF));
            // this.configFile may still be null, meaning no config file found
        }
        else {
            this.configFile=null;   
        }
        if (this.configFile!=null) {
            this.repoLocation = this.configFile.getParentFile(); // the first repo location
        }
    }
    
    /**
     * Helper to close stream
     */
    
    private static void closeStream(InputStream is) throws AxisFault {
        if (is != null) {
            try {
                is.close();
            } catch (IOException e) {
                throw AxisFault.makeFault(e);
            }
        }        
    }
    
    /**
     * Helper to read config from file
     */
    
    private AxisConfiguration readAxisConfigFromFile(File configFile) throws AxisFault {
        assert configFile != null;
        InputStream configStream = null;
        try {
            configStream = new FileInputStream(configFile);
            log.debug("Loading Axis Configuration from file " + configFile);
            return populateAxisConfiguration(configStream);
        } catch (IOException ex) {
            throw new AxisFault("Problem reading configuration file " + configFile, ex);
        } finally {
            closeStream(configStream);
        }
    }

    /**
     * Helper to read config from resource
     */

    private AxisConfiguration readAxisConfigFromResource(String resource) throws AxisFault {
        assert resource!=null;
        InputStream configStream = null;
        try {
            log.debug("Loading Axis Configuration from resource " + resource);
            configStream = Loader.getResourceAsStream(resource); // yields null if no such resource
            return populateAxisConfiguration(configStream);
        } catch (IOException ex) {
            throw new AxisFault("Problem reading configuration resource " + resource, ex);
        } finally {
            closeStream(configStream);
        }
    }
    
    /**
     * First create a Deployment engine, use that to create an AxisConfiguration.
     * TODO: Does this need synchronization?
     * @return Axis Configuration
     * @throws AxisFault
     */
    
    public synchronized AxisConfiguration getAxisConfiguration() throws AxisFault {
        if (configFile!=null) {
            this.axisConfig = readAxisConfigFromFile(configFile);
        }
        else {
            // FALLBACK TO RESOURCE
            this.axisConfig = readAxisConfigFromResource(DeploymentConstants.AXIS2_CONFIGURATION_RESOURCE);
        }
        assert this.axisConfig != null;
        // prefer the repository location from the axis config, otherwise use the directory of the config file (if it exists)        
        Parameter axis2repoPara = axisConfig.getParameter(DeploymentConstants.AXIS2_REPO);        
        if (axis2repoPara != null) {
            // override any existing "repoLocation"
            log.debug("Repository location set to " + axis2repoPara.getValue() + " set in axis config");
            this.repoLocation = determineRepoLocation((String) axis2repoPara.getValue(), null, true);
        }
        if (this.repoLocation != null) {
            log.debug("Loading repository from directory " + this.repoLocation);
            loadRepository(repoLocation.getAbsolutePath());
        }        
        else {
            log.debug("Loading repository from resources");
            loadFromClassPath();
        }        
        axisConfig.setConfigurator(this);
        return axisConfig;
    }

    
    public void engageGlobalModules() throws AxisFault {
        engageModules();
    }

    @Override
    public void loadServices() {
        // only "load services" (which calls getAxisConfiguration()) if a repolocation already exists (but why?, after all, getAxisConfiguration has fallbacks...)
        if (this.repoLocation!=null) {
            super.loadServices();
        }
    }
}

