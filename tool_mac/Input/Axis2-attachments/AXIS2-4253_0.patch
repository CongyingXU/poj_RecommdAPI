Index: modules/kernel/src/org/apache/axis2/description/AxisService.java
===================================================================
--- modules/kernel/src/org/apache/axis2/description/AxisService.java	(revision 749192)
+++ modules/kernel/src/org/apache/axis2/description/AxisService.java	(working copy)
@@ -21,6 +21,10 @@
 
 import org.apache.axiom.attachments.utils.IOUtils;
 import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axiom.om.impl.dom.DOOMAbstractFactory;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
 import org.apache.axis2.addressing.AddressingHelper;
@@ -52,8 +56,8 @@
 import org.apache.ws.commons.schema.utils.NamespaceMap;
 import org.apache.ws.commons.schema.utils.NamespacePrefixList;
 import org.w3c.dom.*;
-import org.xml.sax.SAXException;
 
+
 import javax.wsdl.*;
 import javax.wsdl.extensions.http.HTTPAddress;
 import javax.wsdl.extensions.schema.Schema;
@@ -63,7 +67,8 @@
 import javax.wsdl.xml.WSDLReader;
 import javax.wsdl.xml.WSDLWriter;
 import javax.xml.namespace.QName;
-import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
 import java.io.*;
 import java.lang.reflect.Method;
 import java.net.SocketException;
@@ -2094,34 +2099,61 @@
 	public static AxisService createClientSideAxisService(URL wsdlURL,
 			QName wsdlServiceName, String portName, Options options)
 			throws AxisFault {
-		try {
-			InputStream in = wsdlURL.openConnection().getInputStream();
-			Document doc = XMLUtils.newDocument(in);
-			WSDLReader reader = WSDLFactory.newInstance().newWSDLReader();
-			reader.setFeature("javax.wsdl.importDocuments", true);
-			Definition wsdlDefinition = reader.readWSDL(getBaseURI(wsdlURL
-					.toString()), doc);
-			if (wsdlDefinition != null) {
-				wsdlDefinition.setDocumentBaseURI(getDocumentURI(wsdlURL
-						.toString()));
-			}
-			return createClientSideAxisService(wsdlDefinition, wsdlServiceName,
-					portName, options);
-		} catch (IOException e) {
-			log.error(e.getMessage(), e);
-			throw AxisFault.makeFault(e);
-		} catch (ParserConfigurationException e) {
-			log.error(e.getMessage(), e);
-			throw AxisFault.makeFault(e);
-		} catch (SAXException e) {
-			log.error(e.getMessage(), e);
-			throw AxisFault.makeFault(e);
-		} catch (WSDLException e) {
-			log.error(e.getMessage(), e);
-			throw AxisFault.makeFault(e);
-		}
-	}
+        try {
+            
+            InputStream in = wsdlURL.openConnection().getInputStream();
+            OMElement documentElement = (OMElement) XMLUtils.toOM(in);
+            OMNamespace documentElementNS = documentElement.getNamespace();
+            if (documentElementNS != null) {
+                if (Constants.NS_URI_WSDL11.equals(documentElementNS.getNamespaceURI())) {
 
+                    XMLStreamReader llomReader = documentElement.getXMLStreamReader();
+                    OMFactory doomFactory = DOOMAbstractFactory.getOMFactory();
+                    StAXOMBuilder doomBuilder = new StAXOMBuilder(doomFactory, llomReader);
+                    WSDLReader reader = WSDLFactory.newInstance().newWSDLReader();
+                    reader.setFeature("javax.wsdl.importDocuments", true);
+                    Definition wsdlDefinition = reader.readWSDL(getBaseURI(wsdlURL
+                            .toString()), (Element) doomBuilder.getDocumentElement());
+                    if (wsdlDefinition != null) {
+                        wsdlDefinition.setDocumentBaseURI(getDocumentURI(wsdlURL
+                                .toString()));
+                    }
+
+                    return createClientSideAxisService(wsdlDefinition, wsdlServiceName,
+                                                       portName, options);
+
+                } else if (Constants.NS_URI_WSDL20.equals(documentElementNS.getNamespaceURI())) {
+
+                    ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+                    documentElement.serialize(outStream);
+                    InputStream inStream = new ByteArrayInputStream(outStream.toByteArray());
+
+                    return createClientSideAxisService(inStream, wsdlServiceName, portName,
+                                                       options);
+
+                } else {
+
+                    throw new AxisFault("Cannot Identify the namespace : Invalid WSDL");
+                }
+
+            } else {
+
+                throw new AxisFault("No namespace found : Invalid WSDL");
+
+            }
+
+        } catch (IOException e) {
+            log.error(e.getMessage(), e);
+            throw AxisFault.makeFault(e);
+        } catch (WSDLException e) {
+            log.error(e.getMessage(), e);
+            throw AxisFault.makeFault(e);
+        } catch (XMLStreamException e) {
+            log.error(e.getMessage(), e);
+            throw AxisFault.makeFault(e);
+        }
+    }
+
 	private static String getBaseURI(String currentURI) {
 		try {
 			File file = new File(currentURI);
@@ -2163,7 +2195,39 @@
 		return axisService;
 	}
 
-	/**
+    /**
+     * returns a axisService given a input Stream of WSDL2.0 document.
+     * @param input
+     * @param wsdlServiceName
+     * @param endPoint
+     * @param options
+     * @return
+     * @throws AxisFault
+     */
+     public static AxisService createClientSideAxisService(
+			InputStream input, QName wsdlServiceName, String endPoint,
+			Options options) throws AxisFault {
+
+         
+         WSDL20ToAxisServiceBuilder serviceBuilder=new WSDL20ToAxisServiceBuilder(input,wsdlServiceName,endPoint);
+         serviceBuilder.setServerSide(false);
+         AxisService axisService=serviceBuilder.populateService();
+         AxisEndpoint axisEndpoint=(AxisEndpoint)axisService.getEndpoint(axisService.getEndpointName());
+         
+         if(axisEndpoint != null){
+             options.setTo(new EndpointReference(axisEndpoint.getEndpointURL()));
+             options.setSoapVersionURI((String) axisEndpoint.getBinding()
+					.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION));
+         }
+
+       return axisService;
+     }
+
+
+
+
+
+    /**
 	 * To create an AxisService using given service impl class name first
 	 * generate schema corresponding to the given java class , next for each
 	 * methods AxisOperation will be created. If the method is in-out it will
