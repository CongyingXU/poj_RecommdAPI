Index: D:/eclipse321/workspace-svn/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -45,7 +45,7 @@
 builtOn=Built on #today#
 #############################################################################
 test01=This string is a test string 01.
-faultProcessingNotSupported=User fault processing is not supported. The exception is {0}
+faultProcessingNotSupported=User fault processing is not supported. The @WebFault faultbean is missing for {0}
 exceptionDuringExceptionFlow=An exception occurred during exception processing.  The exception is swallowed and is not propagated back to the caller.
 serviceClientCreateError=The ServiceClient cannot be created. 
 cannotSetExcutorToNull=An attempt was made to set the Executor to a null value. This is not allowed.
@@ -83,6 +83,7 @@
 ICCreateOpClientErr2=The system cannot create the OperationClient. The operation qname is null.
 proxyErr1=An attempt was made to invoke the {0} method, but this method is not available on the javax.xml.ws.BindingProvider or {1} class.
 proxyErr2=The @SOAPBinding annotation Style for the service endpoint interface (SEI) and the @SOAPBinding annotation Style for the method should be same.
+proxyErr3=Operation Description was not set.
 proxyPrivateMethod=Invalid method call.  The method {0} is not a valid method.
 proxyExcludedMethod=Invalid method call.  The method {0} has been excluded using the @WebMethod(exclude=true) annotation.
 proxyNullCallback=Invalid AsyncHandler object.  The AsynchHandler cannot be null for an asynchronous callback invocation.
@@ -161,7 +162,7 @@
 ClassUtilsErr3=An IOException error was thrown when trying to get all of the resources for {0}
 ClassUtilsErr4=An IOException error was thrown when trying to read the jar file.
 MethodMarshallerErr1=A JAX-WS service exception for the {0} fault bean cannot be created.
-MethodMarshallerUtilErr1=Empty Body Block Found in response Message for wsdl Operation defintion that expects an Output.
+MethodMarshallerUtilErr1=Empty Body Block Found in response Message for wsdl Operation defintion that expects an Output. Return type associated with SEI operation is not void, Body Block cannot be null.
 SourceReadErr=A problem was encountered while reading the Source object.  Please verify that your Source object is correct.  The class of the Source object is {0}
 JABGraphProblem=The system threw a StackOverflowError at the JAXB level.  This usually means that your JAXB object has a circular reference.  This is not supported by JAXB.
 SchemaReaderErr1=Invlid wsdl Definition provided.
@@ -170,7 +171,9 @@
 dispatchBadDOMSource=An invalid DOMSource was encountered during Dispatch.  Please use a DOMSource that contains a Node.
 convertProblem=An internal error occurred during JAX-WS marshalling. An object of type {0} cannot be converted into the destination type of {1}
 invalidPropValue=The value of property {0} was invalid.  {1} does not match expected type {2}.
-NullParamErr1=Argument {0} in operation {1} is null.  This is not allowed for messages {2}.
+NullParamErr1=Input argument(s) in operation method {0} is null.  This is not allowed for doc/lit messages.
+NullParamErr2=Input argument(s) in operation method {0} is null.  This is not allowed for rpc/lit messages.
+NullParamErr3=Return argument(s) in operation method {0} is null.  This is not allowed for rpc/lit messages.
 unknownHost=The host specified by the URL is unknown.
 connectionRefused=An attempt to connect to the URL was refused.
 urlStream=The WSDL file could not be located.
@@ -251,3 +254,66 @@
 validateSEIErr3=Validation error: Unsupported SOAPBinding annotation value. The ENCODED setting is not supported for SOAPBinding.Use. Implementation class: {0}
 handlerChainErr=EndpointDescriptionImpl: getHandlerChain: thrown when attempting to unmarshall JAXB content.
 createDispatchFail3=ServiceDescription.updateEndpointDescription: Can not specify an SEI when creating a Dispatch. PortQN: {0}
+soapBindingErr1=WebServiceException calling SAAJFactory.createMessageFactory({0})
+soapBindingErr2=SOAPException calling SAAJFactory.createMessageFactory({0})
+roleValidatioErr=The role of 'none' is not allowed.
+threadClsLoaderErr=Attemping to use ClassLoader of type {0}, which is incompatible with current ClassLoader of type {1}
+onCompleteErr=An error occurred while processing the response.
+getErr=The task was cancelled.
+getErr1=The client timed out while waiting for an asynchronous response.
+processRespErr=null response.
+asyncRespErr=An error occured while processing the async response. {0}
+executeErr=CallbackFuture.execute():  executor exception [{0}]
+executeErr1=cft.wait() was interrupted. Exception: {0}
+addPropertiesErr=Unable to convert WSDL location URL to URI.  URL: {0}; Service: {1}
+operClientErr=An error occured while creating an OperationClient for operation: {0}
+invokeAsyncErr=A client outbound handler cause a message flow direction reversal.  This case is not yet implemented.
+closeHandlerErr1=Invoking close on: {0}
+closeHandlerErr2=An Exception occurred while calling handler.close(). Exception: {0} : {1}
+handleMsgErr=An exception was thrown during the handleMessage() invocation. Exception: {0} : {1}
+faultProcessingErr= Exception while processing fault error: {0}
+cFaultMsgErr=We only support SOAP11 and SOAP12 for JAXWS handlers.
+handleInstanceErr=Handler instance creation error.
+getHeadersErr=Invalid QName, QName cannot be null.
+getHeadersErr1=Invalid JAXBContext. JAXBContext cannot be null.
+inputConvertionErr=Cannot convert from {0} to List<String>.
+inputConvertionErr1=Cannot convert from  {0} to String.
+pdElementErr=SWAREF and MTOM attachment parameters are not supported in this style/use.
+faultRspErr=An exception ({0}) occurred while marshalling exception ({1})
+forNameErr=Exception thrown from AccessController: {0}
+forNameErr1=PrivilegedActionException thrown from AccessController: {0}. Real Cause is: {1}
+staxErr=StAXSource is not present in the JDK. This is acceptable.  Processing continues.
+checkPkgErr=ObjectFactory Class Not Found...caused by {0}: {1}
+checkPkgErr1=package-info Class Not Found...caused by {0} : {1}
+clsNFErr=getClassesFromDirectory failed to get Classes.
+clsNFErr1=getClassesFromJarFile failed to get Classes.
+loadCommonArrayClsErr=Tried to load class {0} while constructing a JAXBContext. This class will be skipped.  Processing Continues. The reason the class could not be loaded: {1}; {2}
+partBaseErr=UNEXPECTED: {0} is equal to {1}
+bodyBlockErr=An attempt was made to pass a Source or String that does not have an xml element. Processing continues with an empty payload.
+blockfromOMErr=Builder next error: {0}; {1}
+fixFaultElemErr=An error occured while converting fault elements: {0}
+msgFromMsgErr=Could not create new Message.
+svcCntxErr=No Service Group!
+svcCntxErr1=No Operation Context.
+svcCntxErr2=No Service Context.
+loadClsErr=PackageSetBuilder cannot load the following class: {0}
+annotDescrErr=Cannot find JAXBElement.getValue method.
+annotDescrErr1=Exception occurred during cache processing.  This will impact performance: {0}
+claasDefErr=ArtifactProcessor cannot load the following class NoClassDefFoundError: {0}
+wsdlDefErr=Exception getting wsdlLocation: {0}
+createRespErr=Throwable caught: {0}
+createRespErr1=Throwable caught creating Response MessageContext: {0}
+pTypeErr=Provider cannot have more than one Generic Types defined as Per JAX-WS Specification.
+bFactoryErr=Unable to find BlockFactory for type: {0}
+initErr=The implementor object cannot be null.
+injectOnClsErr=WebServiceContext Injeciton on Class not yet supported.
+oprDescrErr=No operation found.  WSDL Operation name: {0}
+oprDescrErr1=More than one operation found. Overloaded WSDL operations are not supported.  WSDL Operation name: {0}
+invokeErr=No dispatcher found.
+nullMsgCtxErr=Null MessageContext.
+portErr=Unable to getPort for port QName {0}
+portErr1=Unable to load proxy classes.
+atomicValueErr=Ignoring null value for primitive type, this is the way to set default values defined in JAXBObject/xmlSchema for primitive types.
+pDescrErr=Null Descriptor. PropertyDescriptor not found.
+pDescrErr1=Method {0} not found.
+pDescrErr2=No read Method found to read property Value from jaxbObject: {0} 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/AnnotationBuilder.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/AnnotationBuilder.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/AnnotationBuilder.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ParameterDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.runtime.description.marshal.AnnotationDesc;
 import org.apache.axis2.jaxws.runtime.description.marshal.FaultBeanDesc;
 import org.apache.axis2.jaxws.utility.ClassUtils;
@@ -198,7 +199,7 @@
             } catch (Exception e) {
                 // We should never get here
                 if (log.isDebugEnabled()) {
-                    log.debug("Cannot find JAXBElement.getValue method.");
+                    log.debug(Messages.getMessage("annotDescrErr"));
                 }
             }
         } else {
@@ -257,7 +258,7 @@
         } catch (Throwable e) {
             // TODO Should the exception be swallowed ?
             if (log.isDebugEnabled()) {
-                log.debug("PackageSetBuilder cannot load the following class:" + className);
+                log.debug(Messages.getMessage("loadClsErr",className));
             }
         }
         return null;
@@ -287,7 +288,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+                log.debug(Messages.getMessage("forNameErr",e.getMessage()));
             }
             throw (ClassNotFoundException)e.getException();
         }
@@ -309,7 +310,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+            	log.debug(Messages.getMessage("forNameErr",e.getMessage()));
             }
             throw (RuntimeException)e.getException();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionBuilder.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionBuilder.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/MarshalServiceRuntimeDescriptionBuilder.java	(working copy)
@@ -20,6 +20,7 @@
 
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.runtime.description.marshal.AnnotationDesc;
 import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
 import org.apache.axis2.jaxws.utility.PropertyDescriptorPlus;
@@ -81,9 +82,7 @@
         } catch (Throwable t) {
             // Since we are building a cache, proceed without exception
             if (log.isDebugEnabled()) {
-                log.debug(
-                        "Exception occurred during cache processing.  This will impact performance:" +
-                                t);
+                log.debug(Messages.getMessage("annotDescrErr1",t.getMessage()),t);
             }
             map = new HashMap<String, AnnotationDesc>();
         }
@@ -97,9 +96,7 @@
         } catch (Throwable t) {
             // Since we are building a cache, proceed without exception
             if (log.isDebugEnabled()) {
-                log.debug(
-                        "Exception occurred during cache processing.  This will impact performance:" +
-                                t);
+            	log.debug(Messages.getMessage("annotDescrErr1",t.getMessage()),t);
             }
             cache = new HashMap<Class, Map<String, PropertyDescriptorPlus>>();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PropertyDescriptorMapBuilder.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PropertyDescriptorMapBuilder.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PropertyDescriptorMapBuilder.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axis2.jaxws.description.FaultDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.runtime.description.marshal.FaultBeanDesc;
 import org.apache.axis2.jaxws.utility.ClassUtils;
 import org.apache.axis2.jaxws.utility.PropertyDescriptorPlus;
@@ -219,7 +220,7 @@
         } catch (Throwable e) {
             // TODO Should the exception be swallowed ?
             if (log.isDebugEnabled()) {
-                log.debug("PackageSetBuilder cannot load the following class:" + className);
+                log.debug(Messages.getMessage("loadClsErr",className));
             }
         }
         return null;
@@ -249,7 +250,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+                log.debug(Messages.getMessage("forNameErr",e.getMessage()),e);
             }
             throw (ClassNotFoundException)e.getException();
         }
@@ -271,7 +272,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+            	log.debug(Messages.getMessage("forNameErr",e.getMessage()),e);
             }
             throw (RuntimeException)e.getException();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/ArtifactProcessor.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/ArtifactProcessor.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/ArtifactProcessor.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.axis2.jaxws.description.FaultDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.runtime.description.marshal.AnnotationDesc;
 import org.apache.axis2.jaxws.runtime.description.marshal.FaultBeanDesc;
 import org.apache.axis2.jaxws.utility.ClassUtils;
@@ -354,7 +355,7 @@
                         	} catch (NoClassDefFoundError e) {
                         		// TODO Should the exception be swallowed ?
                         		if (log.isDebugEnabled()) {
-                        			log.debug("ArtifactProcessor cannot load the following class NoClassDefFoundError:" + className);
+                        			log.debug(Messages.getMessage("claasDefErr",className));
                         		}
                         	}
                         	return cls;
@@ -363,7 +364,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+                log.debug(Messages.getMessage("forNameErr",e.getMessage()));
             }
             throw (ClassNotFoundException)e.getException();
         }
@@ -385,7 +386,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+            	log.debug(Messages.getMessage("forNameErr",e.getMessage()));
             }
             throw (RuntimeException)e.getException();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PackageSetBuilder.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PackageSetBuilder.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/PackageSetBuilder.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.axis2.jaxws.description.ParameterDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.runtime.description.marshal.AnnotationDesc;
 import org.apache.axis2.jaxws.runtime.description.marshal.FaultBeanDesc;
 import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
@@ -370,7 +371,7 @@
             } catch (Exception e) {
                 // We should never get here
                 if (log.isDebugEnabled()) {
-                    log.debug("Cannot find JAXBElement.getValue method.");
+                    log.debug(Messages.getMessage("annotDescrErr"));
                 }
                 return null;
             }
@@ -428,7 +429,7 @@
         } catch (Throwable e) {
             // TODO Should the exception be swallowed ?
             if (log.isDebugEnabled()) {
-                log.debug("PackageSetBuilder cannot load the following class:" + className);
+                log.debug(Messages.getMessage("loadClsErr",className));
             }
         }
         return null;
@@ -456,7 +457,7 @@
             } catch (PrivilegedActionException e) {
                 // Swallow and continue
                 if (log.isDebugEnabled()) {
-                    log.debug("Exception getting wsdlLocation: " +e.getException());
+                    log.debug(Messages.getMessage("wsdlDefErr",e.getException().getMessage()));
                 }
             }
         }
@@ -488,7 +489,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+                log.debug(Messages.getMessage("forNameErr",e.toString()),e);
             }
             throw (ClassNotFoundException)e.getException();
         }
@@ -510,7 +511,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+            	log.debug(Messages.getMessage("forNameErr",e.toString()),e);
             }
             throw (RuntimeException)e.getException();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(working copy)
@@ -399,9 +399,7 @@
                 bElement.addChild(newOM);
             } catch (Throwable t) {
                 if (log.isDebugEnabled()) {
-                    log.debug(
-                            "An attempt was made to pass a Source or String that does not " +
-                            "have an xml element. Processing continues with an empty payload.");
+                    log.debug(Messages.getMessage("bodyBlockErr"));
                 }
             }
         }
@@ -590,8 +588,7 @@
                 } catch (Exception e) {
                     // Log and continue
                     if (log.isDebugEnabled()) {
-                        log.debug("Builder next error:" + e.getMessage());
-                        log.debug(JavaUtils.stackToString(e));
+                        log.debug(Messages.getMessage("blockfromOMErr",e.getMessage(),JavaUtils.stackToString(e)));
                     }
                     
                 }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(working copy)
@@ -152,7 +152,10 @@
                 // Okay
             } else
             if (qName.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
-                throw ExceptionFactory.makeWebServiceException("UNEXPECTED");  // TODO NLS
+                throw ExceptionFactory.makeWebServiceException(                              
+                        Messages.getMessage("partBaseErr",qName.getNamespaceURI(),    
+                                        SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI));
+
             } else {
                 content = _createSpine(Protocol.rest, Style.DOCUMENT, 0, root);
                 contentType = SPINE;
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java	(working copy)
@@ -79,8 +79,7 @@
             staxSource = forName("javax.xml.transform.stax.StAXSource");
         } catch (Exception e) {
             if (log.isDebugEnabled()) {
-                log.debug("StAXSource is not present in the JDK.  " +
-                                "This is acceptable.  Processing continues");
+                log.debug(Messages.getMessage("staxErr"));
             }
         }
         try {
@@ -277,10 +276,9 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-            }
-            throw (ClassNotFoundException)e.getException();
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("forNameErr", e.toString()),
+            		(ClassNotFoundException)e.getException());
         }
 
         return cl;
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBUtils.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBUtils.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBUtils.java	(working copy)
@@ -529,8 +529,8 @@
             //does not extend Exception. So we will absorb any Throwable exception here.
         } catch (Throwable e) {
             if (log.isDebugEnabled()) {
-                log.debug("ObjectFactory Class Not Found " + e);
-                log.debug("...caused by " + e.getCause() + " " + JavaUtils.stackToString(e));
+                log.debug(Messages.getMessage(
+                		"checkPkgErr",e.getCause().toString(),JavaUtils.stackToString(e)));
             }
         }
 
@@ -543,8 +543,8 @@
             //does not extend Exception. So we will absorb any Throwable exception here.
         } catch (Throwable e) {
             if (log.isDebugEnabled()) {
-                log.debug("package-info Class Not Found " + e);
-                log.debug("...caused by " + e.getCause() + " " + JavaUtils.stackToString(e));
+                log.debug(Messages.getMessage(
+                		"checkPkgErr1",e.getCause().toString(),JavaUtils.stackToString(e)));
             }
         }
 
@@ -615,7 +615,7 @@
             classes.addAll(getClassesFromDirectory(pkg, cl));
         } catch (ClassNotFoundException e) {
             if (log.isDebugEnabled()) {
-                log.debug("getClassesFromDirectory failed to get Classes");
+                log.debug(Messages.getMessage("clsNFErr"));
             }
         }
         try {
@@ -629,7 +629,7 @@
             }
         } catch (ClassNotFoundException e) {
             if (log.isDebugEnabled()) {
-                log.debug("getClassesFromJarFile failed to get Classes");
+                log.debug(Messages.getMessage("clsNFErr1"));
             }
         }
 
@@ -650,16 +650,8 @@
                         URLDecoder.decode(resources.nextElement().getPath(), "UTF-8")));
             }
         } catch (UnsupportedEncodingException e) {
-            if (log.isDebugEnabled()) {
-                log.debug(
-                        pckgname + " does not appear to be a valid package (Unsupported encoding)");
-            }
             throw new ClassNotFoundException(Messages.getMessage("ClassUtilsErr2", pckgname));
         } catch (IOException e) {
-            if (log.isDebugEnabled()) {
-                log.debug(
-                        "IOException was thrown when trying to get all resources for " + pckgname);
-            }
             throw new ClassNotFoundException(Messages.getMessage("ClassUtilsErr3", pckgname));
         }
 
@@ -764,10 +756,8 @@
                 //does not extend Exception
             } catch (Throwable e) {
                 if (log.isDebugEnabled()) {
-                    log.debug("Tried to load class " + className +
-                            " while constructing a JAXBContext.  This class will be skipped.  Processing Continues.");
-                    log.debug("  The reason that class could not be loaded:" + e.toString());
-                    log.debug(JavaUtils.stackToString(e));
+                    log.debug(Messages.getMessage(
+                    		"loadCommonArrayClsErr",className,e.toString(),JavaUtils.stackToString(e)));
                 }
             }
         }
@@ -786,10 +776,8 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-            }
-            throw ExceptionFactory.makeWebServiceException(e.getException());
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("forNameErr",e.getMessage()),e.getException());
         }
 
         return cl;
@@ -818,10 +806,8 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-            }
-            throw (ClassNotFoundException)e.getException();
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("forNameErr"),(ClassNotFoundException)e.getException());
         }
 
         return cl;
@@ -856,10 +842,8 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-            }
-            throw e.getException();
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("forNameErr"),e.getException());
         }
 
         return jaxbContext;
@@ -893,14 +877,12 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-                log.debug("  Exception is " + e.getException());
-            }
             if (e.getException() instanceof JAXBException) {
-                throw (JAXBException)e.getException();
+            	throw ExceptionFactory.makeWebServiceException(
+                		Messages.getMessage("forNameErr"),(JAXBException)e.getException());
             } else if (e.getException() instanceof RuntimeException) {
-                throw ExceptionFactory.makeWebServiceException(e.getException());
+                throw ExceptionFactory.makeWebServiceException(
+                		Messages.getMessage("forNameErr"),e.getException());
             }
         }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java	(working copy)
@@ -508,9 +508,8 @@
     private void _unexpectedEvent(String event) throws WebServiceException {
         // Review We need NLS for this message, but this code will probably
         // be added to JAX-WS.  So for now we there is no NLS.
-        // TODO NLS
-        throw ExceptionFactory
-                .makeWebServiceException(Messages.getMessage("SAAJConverterErr2", event));
+        throw ExceptionFactory.makeWebServiceException(
+        		Messages.getMessage("SAAJConverterErr2", event));
     }
     
     
@@ -590,10 +589,8 @@
                 }
             }
         } catch (SOAPException e) {
-        	if (log.isDebugEnabled()) {
-        		log.debug("An error occured while converting fault elements: " + e.getMessage());
-        	}
-            throw ExceptionFactory.makeWebServiceException(e);
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("fixFaultElemErr",e.getMessage()),e);
         }
     }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(working copy)
@@ -40,6 +40,7 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.handler.AttachmentsAdapter;
 import org.apache.axis2.jaxws.handler.TransportHeadersAdapter;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.attachments.AttachmentUtils;
@@ -154,7 +155,8 @@
                 Protocol protocol = msgContext.isDoingREST() ? Protocol.rest : null;
                 message = msgFactory.createFrom(soapEnv, protocol);
             } catch (Exception e) {
-                throw ExceptionFactory.makeWebServiceException("Could not create new Message");
+                throw ExceptionFactory.makeWebServiceException(
+                		Messages.getMessage("msgFromMsgErr"));
             }
 
             Object property = msgContext.getProperty(Constants.Configuration.ENABLE_MTOM);
@@ -371,7 +373,8 @@
                 restoredMC.activateWithOperationContext(op);
             }
             if (restoredMC.getServiceContext() == null) {
-                throw ExceptionFactory.makeWebServiceException("No Service Group!");
+            	
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("svcCntxErr"));
             }
             if (cc != null) {
                 mc.activate(cc);
@@ -379,10 +382,10 @@
                 mc.activateWithOperationContext(op);
             }
             if (mc.getOperationContext() == null) {
-                throw new RuntimeException("No Operation Context");
+                throw new RuntimeException(Messages.getMessage("svcCntxErr1"));
             }
             if (mc.getOperationContext().getServiceContext() == null) {
-                throw new RuntimeException("No Service Context");
+                throw new RuntimeException(Messages.getMessage("svcCntxErr2"));
             }
             return;
         } catch (FileNotFoundException e) {
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -71,9 +72,8 @@
                         wsdlLocationURI = wsdlLocation.toURI();
                     }
                     catch (URISyntaxException ex) {
-                        // TODO: NLS/RAS
-                        log.warn("Unable to convert WSDL location URL to URI.  URL: " +
-                                wsdlLocation.toString() + "; Service: " + sd.getServiceQName(), ex);
+                        log.warn(Messages.getMessage("addPropertiesErr",
+                        		wsdlLocation.toString(),sd.getServiceQName().toString()), ex);
                     }
                     soapMessageContext
                             .put(javax.xml.ws.handler.MessageContext.WSDL_DESCRIPTION, wsdlLocationURI);
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(working copy)
@@ -449,8 +449,8 @@
             OperationClient client = sc.createClient(operation);
             return client;
         } catch (AxisFault e) {
-            //TODO: NLS and ExceptionFactory
-            throw ExceptionFactory.makeWebServiceException(e);
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("operClientErr",operation.toString()),e);
         }
     }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/InvocationController.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/InvocationController.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/InvocationController.java	(working copy)
@@ -306,10 +306,9 @@
             // response object
             // back to the client app without calling
             // AsyncResponse.processResponse or processFault
+        	
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("invokeAsyncErr"));
 
-            throw ExceptionFactory
-                            .makeWebServiceException("A client outbound handler cause a message flow direction reversal.  This case is not yet implemented.");
-
             // throw new AxisFault(request.getMessage());
         }
         return future;
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/LegacyExceptionUtil.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/LegacyExceptionUtil.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/LegacyExceptionUtil.java	(working copy)
@@ -150,14 +150,8 @@
                     log.debug("Completed creation of the fault bean.");
                 }
             } else {
-                //if (log.isErrorEnabled()) {
-                //    log.debug("The fault bean could not be loaded...Fallback to using the fault exception: " + t.getClass());
-                //}
-                //return t;
-                throw ExceptionFactory
-                        .makeWebServiceException(Messages.getMessage("faultProcessingNotSupported",
-                                                                     "the @WebFault faultbean is missing for " +
-                                                                             t.getClass()));
+                throw ExceptionFactory.makeWebServiceException(
+                		Messages.getMessage("faultProcessingNotSupported",t.getClass().getName()),t);
             }
 
         } catch (Exception e) {
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMinimalMethodMarshaller.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMinimalMethodMarshaller.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMinimalMethodMarshaller.java	(working copy)
@@ -90,16 +90,14 @@
             //to a method then an implementation MUST throw WebServiceException.
             if (pds.length > 0) {
                 if (signatureArguments == null) {
-                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                            "NullParamErr1", "Input", operationDesc.getJavaMethodName(),
-                            "doc/lit"));
+                	throw ExceptionFactory.makeWebServiceException(
+                			Messages.getMessage("NullParamErr1",operationDesc.getJavaMethodName()));
                 }
                 if (signatureArguments != null) {
                     for (Object argument : signatureArguments) {
                         if (argument == null) {
-                            throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                                    "NullParamErr1", "Input", operationDesc.getJavaMethodName(),
-                                    "doc/lit"));
+                        	throw ExceptionFactory.makeWebServiceException(
+                        			Messages.getMessage("NullParamErr1",operationDesc.getJavaMethodName()));
                         }
                     }
                 }
@@ -207,10 +205,8 @@
             if (sigArguments != null) {
                 for (Object argument : sigArguments) {
                     if (argument == null) {
-                        throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                                "NullParamErr1", "Input", operationDesc.getJavaMethodName(),
-                                "rpc/lit"));
-
+                        throw ExceptionFactory.makeWebServiceException(
+                    			Messages.getMessage("NullParamErr2",operationDesc.getJavaMethodName()));
                     }
                 }
             }
@@ -292,9 +288,8 @@
                 //As per JAXWS Specification section 3.6.2.3 if a null value is passes as an argument 
                 //to a method then an implementation MUST throw WebServiceException.
                 if (returnObject == null) {
-                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                            "NullParamErr1", "Return", operationDesc.getJavaMethodName(),
-                            "rpc/lit"));
+                    throw ExceptionFactory.makeWebServiceException(
+                			Messages.getMessage("NullParamErr3",operationDesc.getJavaMethodName()));
 
                 }
                 Element returnElement = null;
@@ -414,9 +409,8 @@
                 //As per JAXWS Specification section 3.6.2.3 if a null value is passes as an argument 
                 //to a method then an implementation MUST throw WebServiceException.
                 if (returnValue == null) {
-                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                            "NullParamErr1", "Return", operationDesc.getJavaMethodName(),
-                            "rpc/lit"));
+                	throw ExceptionFactory.makeWebServiceException(
+                			Messages.getMessage("NullParamErr3",operationDesc.getJavaMethodName()));
                 }
             }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(working copy)
@@ -90,16 +90,14 @@
             //to a method then an implementation MUST throw WebServiceException.
             if (pds.length > 0) {
                 if (signatureArguments == null) {
-                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                            "NullParamErr1", "Input", operationDesc.getJavaMethodName(),
-                            "rpc/lit"));
+                    throw ExceptionFactory.makeWebServiceException(
+                    		Messages.getMessage("NullParamErr2",operationDesc.getJavaMethodName()));
                 }
                 if (signatureArguments != null) {
                     for (Object argument : signatureArguments) {
                         if (argument == null) {
-                            throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                                    "NullParamErr1", "Input", operationDesc.getJavaMethodName(),
-                                    "rpc/lit"));
+                        	throw ExceptionFactory.makeWebServiceException(
+                            		Messages.getMessage("NullParamErr2",operationDesc.getJavaMethodName()));
                         }
                     }
                 }
@@ -212,9 +210,8 @@
             if (sigArguments != null) {
                 for (Object argument : sigArguments) {
                     if (argument == null) {
-                        throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                                "NullParamErr1", "Input", operationDesc.getJavaMethodName(),
-                                "rpc/lit"));
+                    	throw ExceptionFactory.makeWebServiceException(
+                        		Messages.getMessage("NullParamErr2",operationDesc.getJavaMethodName()));
 
                     }
                 }
@@ -301,9 +298,8 @@
                 //As per JAXWS Specification section 3.6.2.3 if a null value is passes as an argument 
                 //to a method then an implementation MUST throw WebServiceException.
                 if (returnObject == null) {
-                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                            "NullParamErr1", "Return", operationDesc.getJavaMethodName(),
-                            "rpc/lit"));
+                	throw ExceptionFactory.makeWebServiceException(
+                    		Messages.getMessage("NullParamErr3",operationDesc.getJavaMethodName()));
 
                 }
                 Element returnElement = null;
@@ -428,9 +424,8 @@
                 //As per JAXWS Specification section 3.6.2.3 if a null value is passes as an argument 
                 //to a method then an implementation MUST throw WebServiceException.
                 if (returnValue == null) {
-                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
-                            "NullParamErr1", "Return", operationDesc.getJavaMethodName(),
-                            "rpc/lit"));
+                	throw ExceptionFactory.makeWebServiceException(
+                    		Messages.getMessage("NullParamErr3",operationDesc.getJavaMethodName()));
                 }
             }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(working copy)
@@ -225,10 +225,7 @@
                     null, 
                     attachment);
         } else {
-            // TODO NLS and clean this up
-            throw ExceptionFactory.
-            makeWebServiceException("SWAREF and MTOM attachment parameters are not " +
-                        "supported in this style/use.");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("pdElementErr"));
         }
         return pde;
     }
@@ -344,10 +341,7 @@
                         pdeList.add(pde);
                         swaIndex++;
                     } else {
-                        // TODO NLS and clean this up
-                        throw ExceptionFactory.makeWebServiceException("SWAREF and MTOM " +
-                                        "attachment parameters are not supported " +
-                                        "in this style/use.");
+                        throw ExceptionFactory.makeWebServiceException(Messages.getMessage("pdElementErr"));
                     }
                 }
             }
@@ -555,10 +549,7 @@
                                            attachment.getContentID());
                     message.setDoingSWA(true);
                 } else {
-                    // TODO NLS and cleanup
-                    throw ExceptionFactory.
-                       makeWebServiceException("SWAREF and MTOM attachment parameters " +
-                                "are not supported in this style/use.");
+                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage("pdElementErr"));
                 }
             }
         }
@@ -658,10 +649,6 @@
         //We look for body block only when the return type associated with operation is not void.
         //If a null body block is returned in response on a operation that has non void return type, its a user error.
         if(isBody && block == null){
-           	if(log.isDebugEnabled()){
-           		log.debug("Empty Body Block Found in response Message for wsdl Operation defintion that expects an Output");
-           		log.debug("Return type associated with SEI operation is not void, Body Block cannot be null");
-           	}
            	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("MethodMarshallerUtilErr1"));	
         }
         // Get the business object.  We want to return the object that represents the type.
@@ -783,8 +770,7 @@
             // If an exception occurs while demarshalling an exception, 
             // then rinse and repeat with a system exception
             if (log.isDebugEnabled()) {
-                log.debug("An exception (" + e + ") occurred while marshalling exception (" + t +
-                        ")");
+                log.debug(Messages.getMessage("faultRspErr",e.toString(),t.toString()));
             }
             WebServiceException wse = ExceptionFactory.makeWebServiceException(e);
             xmlfault = createXMLFaultFromSystemException(wse);
@@ -1109,10 +1095,8 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-            }
-            throw ExceptionFactory.makeWebServiceException(e.getException());
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("forNameErr",e.getMessage()),e.getException());
         }
 
         return cl;
@@ -1131,10 +1115,8 @@
                     }
             );
         } catch (PrivilegedActionException e) {
-            if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
-            }
-            throw ExceptionFactory.makeWebServiceException(e.getException());
+        	throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("forNameErr",e.getMessage()),e.getException());
         }
 
         return cl;
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/factory/MethodMarshallerFactory.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/factory/MethodMarshallerFactory.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/factory/MethodMarshallerFactory.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ParameterDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.handler.HandlerResolverImpl;
 import org.apache.axis2.jaxws.marshaller.MethodMarshaller;
 import org.apache.axis2.jaxws.marshaller.impl.alt.DocLitBareMethodMarshaller;
 import org.apache.axis2.jaxws.marshaller.impl.alt.DocLitBareMinimalMethodMarshaller;
@@ -32,6 +33,8 @@
 import org.apache.axis2.jaxws.message.databinding.JAXBUtils;
 import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescription;
 import org.apache.axis2.jaxws.runtime.description.marshal.MarshalServiceRuntimeDescriptionFactory;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 import javax.jws.soap.SOAPBinding;
 import javax.xml.bind.JAXBContext;
@@ -43,8 +46,9 @@
  * SOAPBinding information
  */
 public class MethodMarshallerFactory {
-
-
+	
+	private static Log log = LogFactory.getLog(MethodMarshallerFactory.class);
+	
     private enum SUBTYPE {
         NORMAL, PLUS, MINIMAL }
 
@@ -243,13 +247,18 @@
                     MarshalServiceRuntimeDescriptionFactory.get(serviceDesc);
             String requestWrapper = marshalDesc.getRequestWrapperClassName(op);
             if (!exists(requestWrapper)) {
-                // TODO DEBUG
+            	if(log.isDebugEnabled()){
+            		log.debug("Request wrapper class name is NULL.");
+            	}
                 return true;
             }
 
-            String responseWrapper = marshalDesc.getRequestWrapperClassName(op);
+            //String responseWrapper = marshalDesc.getRequestWrapperClassName(op);
+            String responseWrapper = marshalDesc.getResponseWrapperClassName(op);
             if (!exists(responseWrapper)) {
-                // TODO DEBUG
+            	if(log.isDebugEnabled()){
+            		log.debug("Response wrapper class name is NULL.");
+            	}
                 return true;
             }
             // TODO Do the same for the fault beans
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/migrator/ApplicationContextMigratorUtil.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/migrator/ApplicationContextMigratorUtil.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/migrator/ApplicationContextMigratorUtil.java	(working copy)
@@ -23,6 +23,7 @@
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.handler.MEPContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -91,7 +92,8 @@
                                                         Map<String, Object> requestContext,
                                                         MessageContext messageContext) {
         if (messageContext == null) {
-            throw ExceptionFactory.makeWebServiceException("Null MessageContext");
+        	
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("nullMsgCtxErr"));
         }
 
         ServiceDescription sd = messageContext.getEndpointDescription().getServiceDescription();
@@ -133,7 +135,7 @@
                                                           Map<String, Object> responseContext,
                                                           MessageContext messageContext) {
         if (messageContext == null) {
-            throw ExceptionFactory.makeWebServiceException("Null MessageContext");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("nullMsgCtxErr"));
         }
 
         ServiceDescription sd = messageContext.getEndpointDescription().getServiceDescription();
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(working copy)
@@ -234,9 +234,8 @@
                 DescriptionFactory.updateEndpoint(serviceDescription, sei, portName,
                                                   DescriptionFactory.UpdateType.GET_PORT);
         if (endpointDesc == null) {
-            // TODO: NLS
             throw ExceptionFactory.makeWebServiceException(
-                    "Unable to getPort for port QName " + portName.toString());
+            		Messages.getMessage("portErr",portName.toString()));
         }
 
         String[] interfacesNames = 
@@ -255,8 +254,7 @@
             try {
                 interfaces = loadClasses(classLoader, interfacesNames);
             } catch (ClassNotFoundException e2) {
-                // TODO: NLS
-                throw ExceptionFactory.makeWebServiceException("Unable to load proxy classes", e2);
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("portErr1"), e2);
             }
         }
         
@@ -423,7 +421,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+                log.debug(Messages.getMessage("forNameErr",e.toString()));
             }
             throw ExceptionFactory.makeWebServiceException(e.getException());
         }
@@ -445,7 +443,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+            	log.debug(Messages.getMessage("forNameErr",e.toString()));
             }
             throw ExceptionFactory.makeWebServiceException(e.getException());
         }
@@ -472,7 +470,7 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Exception thrown from AccessController: " + e);
+            	log.debug(Messages.getMessage("forNameErr",e.toString()));
             }
             throw (ClassNotFoundException)e.getException();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/utility/PropertyDescriptorPlus.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/utility/PropertyDescriptorPlus.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/utility/PropertyDescriptorPlus.java	(working copy)
@@ -91,10 +91,7 @@
      */
     public Object get(Object targetBean) throws InvocationTargetException, IllegalAccessException {
             if(descriptor == null){
-                if(log.isDebugEnabled()){
-                    log.debug("Null Descriptor");
-                }
-                throw new RuntimeException("PropertyDescriptor not found");
+                throw new RuntimeException(Messages.getMessage("pDescrErr"));
             }
             Method method = descriptor.getReadMethod();
             if(method == null && descriptor.getPropertyType() == Boolean.class){
@@ -110,16 +107,13 @@
                        method = targetBean.getClass().getMethod(methodName, null);
                    }catch(NoSuchMethodException e){
                        if(log.isDebugEnabled()){
-                           log.debug("Mehtod not found" + methodName);
+                           log.debug(Messages.getMessage("pDescrErr1",methodName));
                        }
                    }
                 }
             }
             if(method == null){
-                if(log.isDebugEnabled()){
-                    log.debug("No read Method found to read propertyvalue");
-                }
-                throw new RuntimeException("No read Method found to read property Value from jaxbObject: "+targetBean.getClass().getName());
+                throw new RuntimeException(Messages.getMessage("pDescrErr2",targetBean.getClass().getName()));
             }
             return method.invoke(targetBean, null);
     }
@@ -184,11 +178,10 @@
             if(paramTypes !=null && paramTypes.length ==1){
                 Class paramType = paramTypes[0];
                 if(paramType.isPrimitive() && propValue == null){
-                    // TODO NLS
                     //Ignoring null value for primitive type, this could potentially be the way of a customer indicating to set
                     //default values defined in JAXBObject/xmlSchema.
                     if(DEBUG_ENABLED){
-                        log.debug("Ignoring null value for primitive type, this is the way to set default values defined in JAXBObject/xmlSchema. for primitive types");
+                        log.debug(Messages.getMessage("atomicValueErr"));
                     }
                     return;
                 }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/Utils.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/Utils.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/Utils.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.XMLFault;
@@ -171,14 +172,12 @@
             //       That means that overloading of wsdl operations is not supported (although that's not supported in 
             //       WSDL 1.1 anyway).
             if (ops == null || ops.length == 0) {
-                // TODO: RAS & NLS
-                throw ExceptionFactory.makeWebServiceException("No operation found.  WSDL Operation name: "
-                        + mc.getOperationName());
+                throw ExceptionFactory.makeWebServiceException(
+                		Messages.getMessage("oprDescrErr",mc.getOperationName().toString()));
             }
             if (ops.length > 1) {
-                // TODO: RAS & NLS
-                throw ExceptionFactory.makeWebServiceException("More than one operation found. Overloaded WSDL operations are not supported.  WSDL Operation name: "
-                        + mc.getOperationName());
+                throw ExceptionFactory.makeWebServiceException(
+                		Messages.getMessage("oprDescrErr1",mc.getOperationName().toString()));
             }
             op = ops[0];
             if (log.isDebugEnabled()) {
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/injection/impl/WebServiceContextInjectorImpl.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/injection/impl/WebServiceContextInjectorImpl.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/injection/impl/WebServiceContextInjectorImpl.java	(working copy)
@@ -126,8 +126,7 @@
       */
     public void injectOnClass(Object resource, Object instance, Class clazz)
             throws ResourceInjectionException {
-        throw new UnsupportedOperationException(
-                "WebServiceContext Injeciton on Class not yet supported");
+        throw new UnsupportedOperationException(Messages.getMessage("injectOnClsErr"));
 
     }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/EndpointImpl.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/EndpointImpl.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/EndpointImpl.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.axis2.jaxws.description.DescriptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.transport.http.HTTPWorkerFactory;
 import org.apache.axis2.transport.http.server.SimpleHttpServer;
 import org.apache.axis2.transport.http.server.WorkerFactory;
@@ -60,7 +61,8 @@
 
     private void initialize() {
         if (implementor == null) {
-            throw ExceptionFactory.makeWebServiceException("The implementor object cannot be null");
+        	
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("initErr"));
         }
         
         // If we don't have the necessary metadata, let's go ahead and
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(working copy)
@@ -96,7 +96,7 @@
                 eic.setResponseMessageContext(response);
             }
             else {
-                throw ExceptionFactory.makeWebServiceException("No dispatcher found.");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("invokeErr"));
             }
         } catch (Exception e) {
             throw ExceptionFactory.makeWebServiceException(e);
@@ -128,7 +128,7 @@
                 dispatcher.invokeAsync(request, eic.getCallback());    
             }
             else {
-                throw ExceptionFactory.makeWebServiceException("No dispatcher found.");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("invokeErr"));
             }
         } catch (Exception e) {
             throw ExceptionFactory.makeWebServiceException(e);
@@ -159,7 +159,7 @@
                 dispatcher.invokeOneWay(request);    
             }
             else {
-                throw ExceptionFactory.makeWebServiceException("No dispatcher found.");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("invokeErr"));
             }
         } catch (Exception e) {
             throw ExceptionFactory.makeWebServiceException(e);
@@ -362,8 +362,8 @@
             );
         } catch (PrivilegedActionException e) {
             if (log.isDebugEnabled()) {
-                log.debug("PrivilegedActionException thrown from AccessController: " + e);
-                log.debug("Real Cause is " + e.getException().getCause());
+                log.debug(Messages.getMessage(
+                		"forNameErr1",e.toString(),e.getException().getCause().toString()));
             }
             throw (ClassNotFoundException)e.getException();
         }
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/ProviderDispatcher.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/ProviderDispatcher.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/ProviderDispatcher.java	(working copy)
@@ -327,11 +327,8 @@
             Service.Mode mode = endpointDesc.getServiceMode();
             m = createMessageFromValue(output, request.getMessage().getProtocol(), mode);
         } catch (Throwable t) {
-            if (log.isDebugEnabled()) {
-                log.debug("Throwable caught");
-                log.debug("Throwable=" + t);
-            }
-            throw ExceptionFactory.makeWebServiceException(t);
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("createRespErr",t.getMessage()),t);
         }
 
         if (log.isDebugEnabled()) {
@@ -353,8 +350,8 @@
             response.setMessage(m);
         } catch (RuntimeException e) {
             if (log.isDebugEnabled()) {
-                log.debug("Throwable caught creating Response MessageContext");
-                log.debug("Throwable=" + e);
+            	
+                log.debug(Messages.getMessage("createRespErr1",e.getMessage()),e);
             }
         } finally {
             if (log.isDebugEnabled()) {
@@ -533,8 +530,7 @@
 
             if (interfaceName == javax.xml.ws.Provider.class) {
                 if (paramType.getActualTypeArguments().length > 1) {
-                    //TODO NLS
-                    throw ExceptionFactory.makeWebServiceException("Provider cannot have more than one Generic Types defined as Per JAX-WS Specification");
+                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage("pTypeErr"));
                 }
                 providerType = (Class)paramType.getActualTypeArguments()[0];
             }
@@ -588,8 +584,8 @@
             _blockFactory = (SOAPEnvelopeBlockFactory)FactoryRegistry.getFactory(
                     SOAPEnvelopeBlockFactory.class);
         } else {
-            throw ExceptionFactory.makeWebServiceException("Unable to find BlockFactory " +
-                    "for type: " + type.getClass().getName());
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("bFactoryErr",type.getClass().getName()));
         }
 
         return _blockFactory;
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/dispatcher/JavaBeanDispatcher.java	(working copy)
@@ -248,8 +248,7 @@
 
         OperationDescription opDesc = mc.getOperationDescription();
         if (opDesc == null) {
-            // TODO: NLS
-            throw ExceptionFactory.makeWebServiceException("Operation Description was not set");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("proxyErr3"));
         }
 
         Method returnMethod = opDesc.getMethodFromServiceImpl(serviceImplClass);
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/binding/SOAPBinding.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/binding/SOAPBinding.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/binding/SOAPBinding.java	(working copy)
@@ -80,14 +80,12 @@
         } catch (WebServiceException e) {
             // TODO log it and then what?
             if (log.isDebugEnabled()) {
-                log.debug("WebServiceException calling SAAJFactory.createMessageFactory(\""
-                                + bindingNamespace + "\")");
+                log.debug(Messages.getMessage("soapBindingErr1",bindingNamespace),e);
             }
         } catch (SOAPException e) {
             // TODO log it and then what?
             if (log.isDebugEnabled()) {
-                log.debug("SOAPException calling SAAJFactory.createMessageFactory(\""
-                                + bindingNamespace + "\")");
+                log.debug(Messages.getMessage("soapBindingErr2",bindingNamespace),e);
             }
         }
         return null;
@@ -134,14 +132,12 @@
         } catch (WebServiceException e) {
             // TODO log it and then what?
             if (log.isDebugEnabled()) {
-                log.debug("WebServiceException calling SAAJFactory.createSOAPFactory(\""
-                                + bindingNamespace + "\")");
+                log.debug(Messages.getMessage("soapBindingErr1",bindingNamespace),e);
             }
         } catch (SOAPException e) {
             // TODO log it and then what?
             if (log.isDebugEnabled()) {
-                log.debug("SOAPException calling SAAJFactory.createSOAPFactory(\""
-                                + bindingNamespace + "\")");
+                log.debug(Messages.getMessage("soapBindingErr2",bindingNamespace));
             }
         }
         return null;
@@ -176,8 +172,7 @@
             // Throw an exception for setting a role of "none"
             // Per JAXWS 2.0 Sec 10.1.1.1 SOAP Roles, page 116:
             if (set.contains(SOAPConstants.URI_SOAP_1_2_ROLE_NONE)) {
-                // TODO: RAS/NLS
-                throw ExceptionFactory.makeWebServiceException("The role of 'none' is not allowed.");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("roleValidatioErr"));
             }
         }
         
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java	(working copy)
@@ -122,15 +122,11 @@
                 // instanceof ProtocolHandler
                 protocolHandlers.add((SOAPHandler) handler);
             else if (Handler.class.isAssignableFrom(handler.getClass())) {
-                // TODO: NLS better error message
                 throw ExceptionFactory.makeWebServiceException(Messages
-                    .getMessage("handlerChainErr1", handler
-                            .getClass().getName()));
+                    .getMessage("handlerChainErr1", handler.getClass().getName()));
             } else {
-                // TODO: NLS better error message
                 throw ExceptionFactory.makeWebServiceException(Messages
-                    .getMessage("handlerChainErr2", handler
-                            .getClass().getName()));
+                    .getMessage("handlerChainErr2", handler.getClass().getName()));
             }
         }
         
@@ -242,14 +238,12 @@
                     callCloseHandlers(newStart_inclusive, newEnd, newDirection);
                 } catch (RuntimeException re) {
                     callCloseHandlers(newStart_inclusive, newEnd, newDirection);
-                    // TODO: NLS log and throw
-                    throw re;
+                    throw ExceptionFactory.makeWebServiceException(re);
                 }
             } else if (result == OTHER_EXCEPTION) {
                 callCloseHandlers(newStart_inclusive, newEnd, newDirection);
                 // savedException initialized in HandlerChainProcessor.handleMessage
-                // TODO: NLS log and throw
-                throw savedException;
+                throw ExceptionFactory.makeWebServiceException(savedException);
             }
         } else { // everything was successful OR finished processing handlers
             /*
@@ -282,7 +276,7 @@
                 // we have a saved exception, throw it (JAX-WS 9.3.2.1 "Throw 
                 // ProtocolException or any other runtime exception --> No 
                 // response" case.
-                throw savedException;
+            	throw ExceptionFactory.makeWebServiceException(savedException);
             }
         }
     }
@@ -353,8 +347,7 @@
         catch (RuntimeException re) { 
             // RuntimeException and ProtocolException
             if(log.isDebugEnabled()) {
-               log.debug("An exception was thrown during the handleMessage() invocation");
-               log.debug("Exception: " + re.getClass().getName() + ":" +re.getMessage());
+               log.debug(Messages.getMessage("handleMsgErr",re.getClass().getName(),re.getMessage()));
             }
             
             savedException = re;
@@ -388,7 +381,7 @@
                     switchContext(direction, i);
                     Handler handler = (Handler) handlers.get(i);
                     if (log.isDebugEnabled()) {
-                        log.debug("Invoking close on: " + handler.getClass().getName());
+                        log.debug(Messages.getMessage("closeHandlerErr1",handler.getClass().getName()));
                     }
                     handler.close(currentMC);
                     
@@ -397,8 +390,7 @@
                     // if we've cached the handler list somewhere.
                 } catch (Exception e) {
                     if (log.isDebugEnabled()) {
-                        log.debug("An Exception occurred while calling handler.close()");
-                        log.debug("Exception: " + e.getClass().getName() + ":" + e.getMessage());
+                        log.debug(Messages.getMessage("closeHandlerErr2",e.getClass().getName(),e.getMessage()));
                     }
                 }
             }
@@ -408,7 +400,7 @@
                     switchContext(direction, i);
                     Handler handler = (Handler) handlers.get(i);
                     if (log.isDebugEnabled()) {
-                        log.debug("Invoking close on: " + handler.getClass().getName());
+                    	log.debug(Messages.getMessage("closeHandlerErr1",handler.getClass().getName()));
                     }
                     handler.close(currentMC);
                     
@@ -417,8 +409,7 @@
                     // if we've cached the handler list somewhere.
                 } catch (Exception e) {
                     if (log.isDebugEnabled()) {
-                        log.debug("An Exception occurred while calling handler.close()");
-                        log.debug("Exception: " + e.getClass().getName() + ":" + e.getMessage());
+                    	log.debug(Messages.getMessage("closeHandlerErr2",e.getClass().getName(),e.getMessage()));
                     }
                 }
             }
@@ -452,8 +443,8 @@
                 callGenericHandleFault(handlers.size() - 1, 0, direction);
             }
         } catch (RuntimeException re) {
-            // TODO: log it
-            throw re;
+        	throw ExceptionFactory.makeWebServiceException(
+        			Messages.getMessage("faultProcessingErr",re.getMessage()),re);
         } finally {
             // we can close all the Handlers in reverse order
             if (direction == Direction.OUT) {
@@ -543,7 +534,7 @@
                 mepCtx.setMessage(msg);
 
             } else {
-                throw ExceptionFactory.makeWebServiceException("We only support SOAP11 and SOAP12 for JAXWS handlers");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("cFaultMsgErr"));
             }
 
         } catch (Exception ex) {
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java	(working copy)
@@ -184,8 +184,7 @@
                     handler = hlm.createHandlerInstance(ctx, loadClass(portHandler));
                 } catch (Exception e) {
                     // TODO: should we just ignore this problem?
-                    // TODO: NLS log and throw
-                    throw ExceptionFactory.makeWebServiceException(e);
+                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage("handleInstanceErr"),e);
                 }
                 
                 //TODO NLS
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/TransportHeadersAdapter.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/TransportHeadersAdapter.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/TransportHeadersAdapter.java	(working copy)
@@ -18,6 +18,7 @@
  */
 package org.apache.axis2.jaxws.handler;
 
+import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.transport.http.HTTPConstants;
@@ -143,8 +144,8 @@
             l.add(o);
             return l;
         } else {
-            throw ExceptionFactory.makeWebServiceException("Cannot convert from " + o.getClass()
-                    + " to List<String>");
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("inputConvertionErr",o.getClass().toString()));
         }
     }
 
@@ -162,8 +163,8 @@
                 return (String) l.get(0);
             }
         }
-        throw ExceptionFactory.makeWebServiceException("Cannot convert from " + o.getClass()
-                + " to String");
+        throw ExceptionFactory.makeWebServiceException(
+        		Messages.getMessage("inputConvertionErr1",o.getClass().toString()));
     }
 
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/SoapMessageContext.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/SoapMessageContext.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/SoapMessageContext.java	(working copy)
@@ -62,16 +62,10 @@
         }
 
         if(qname == null){
-            if(log.isDebugEnabled()){
-                log.debug("Invalid QName, QName cannot be null");
-            }
-            throw ExceptionFactory.makeWebServiceException(Messages.getMessage(""));
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("getHeadersErr"));
         }
         if(jaxbcontext == null){
-            if(log.isDebugEnabled()){
-                log.debug("Invalid JAXBContext, JAXBContext cannot be null");
-            }
-            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("SOAPMessageContextErr2"));
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("getHeadersErr1"));
         }
 
         // The header information is returned as a list of jaxb objects
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java	(working copy)
@@ -23,6 +23,7 @@
 import org.apache.axis2.client.async.Callback;
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -61,8 +62,7 @@
         } catch (WebServiceException e) {
             response.onError(e, null);
             if (debug) {
-                log.debug(
-                        "An error occured while processing the async response.  " + e.getMessage());
+                log.debug(Messages.getMessage("asyncRespErr",e.getMessage()));
             }
         }
 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java	(working copy)
@@ -23,6 +23,7 @@
 import org.apache.axis2.client.async.Callback;
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -105,8 +106,7 @@
         } catch (WebServiceException e) {
             cft.setError(e);
             if (debug) {
-                log.debug(
-                        "An error occured while processing the async response.  " + e.getMessage());
+                log.debug(Messages.getMessage("asyncRespErr",e.getMessage()));
             }
         }
 
@@ -156,8 +156,7 @@
                 }
                 catch (Exception executorExc) {
                     if (log.isDebugEnabled()) {
-                        log.debug("CallbackFuture.execute():  executor exception [" +
-                                executorExc.getClass().getName() + "]");
+                        log.debug(Messages.getMessage("executeErr",executorExc.getClass().getName()));
                     }
 
                     // attempt to cancel the FutureTask
@@ -196,8 +195,7 @@
                     }
                 } catch (InterruptedException e) {
                     if (debug) {
-                        log.debug("cft.wait() was interrupted");
-                        log.debug("Exception: " + e.getMessage());
+                        log.debug(Messages.getMessage("executeErr1",e.getMessage()));
                     }
                 }
                 
Index: D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java
===================================================================
--- D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java	(revision 597132)
+++ D:/eclipse321/workspace-svn/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java	(working copy)
@@ -26,6 +26,7 @@
 import org.apache.axis2.jaxws.handler.HandlerChainProcessor;
 import org.apache.axis2.jaxws.handler.HandlerInvokerUtils;
 import org.apache.axis2.jaxws.handler.TransportHeadersAdapter;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.attachments.AttachmentUtils;
 import org.apache.axis2.jaxws.spi.Constants;
 import org.apache.axis2.jaxws.spi.migrator.ApplicationContextMigratorUtil;
@@ -130,9 +131,8 @@
     private void setThreadClassLoader(final ClassLoader cl) {
         if (this.classLoader != null) {
             if (!this.classLoader.getClass().equals(cl.getClass())) {
-                throw ExceptionFactory.makeWebServiceException("Attemping to use ClassLoader of type " + cl.getClass().toString() +
-                                                               ", which is incompatible with current ClassLoader of type " +
-                                                               this.classLoader.getClass().toString());
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("threadClsLoaderErr",
+                		cl.getClass().toString(),this.classLoader.getClass().toString()));
             }
         }
         else {
@@ -188,8 +188,9 @@
             responseObject = processResponse();
         } catch (ExecutionException e) {
             savedException = e;
+            
             if (log.isDebugEnabled()) {
-                log.debug("An error occurred while processing the response: " + e.getCause());
+                log.debug(Messages.getMessage("onCompleteErr"),e.getCause());
             }
             latch.countDown();
         }
@@ -221,7 +222,7 @@
 
     public Object get() throws InterruptedException, ExecutionException {
         if (cancelled) {
-            throw new CancellationException("The task was cancelled.");
+            throw new CancellationException(Messages.getMessage("getErr"));
         }
 
         // Wait for the response to come back
@@ -244,7 +245,7 @@
     public Object get(long timeout, TimeUnit unit)
             throws InterruptedException, ExecutionException, TimeoutException {
         if (cancelled) {
-            throw new CancellationException("The task was cancelled.");
+            throw new CancellationException(Messages.getMessage("getErr"));
         }
 
         // Wait for the response to come back
@@ -264,8 +265,7 @@
         // If the response still hasn't been returned, then we've timed out
         // and must throw a TimeoutException
         if (latch.getCount() > 0) {
-            throw new TimeoutException(
-                    "The client timed out while waiting for an asynchronous response");
+            throw new TimeoutException(Messages.getMessage("getErr1"));
         }
 
         return responseObject;
@@ -288,7 +288,7 @@
         // If we don't have a fault, then we have to have a MessageContext for the response.
         if (response == null) {
             latch.countDown();
-            throw new ExecutionException(ExceptionFactory.makeWebServiceException("null response"));
+            throw new ExecutionException(ExceptionFactory.makeWebServiceException(Messages.getMessage("processRespErr")));
         }
 
         // Avoid a reparse of the message. If we already retrived the object, return
