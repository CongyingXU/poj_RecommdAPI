Index: test/org/apache/axis2/transport/tcp/TCPEchoRawXMLTest.java
===================================================================
--- test/org/apache/axis2/transport/tcp/TCPEchoRawXMLTest.java	(revision 948024)
+++ test/org/apache/axis2/transport/tcp/TCPEchoRawXMLTest.java	(working copy)
@@ -42,6 +42,7 @@
 import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.OutInAxisOperation;
+import org.apache.axis2.description.Parameter;
 import org.apache.axis2.util.Utils;
 import org.apache.axis2.wsdl.WSDLConstants;
 import org.apache.commons.logging.Log;
@@ -90,6 +91,7 @@
 
     protected void tearDown() throws Exception {
         UtilsTCPServer.stop();
+        configContext.getListenerManager().destroy();
     }
 
     private OMElement createPayload() {
@@ -179,6 +181,7 @@
         options.setUseSeparateListener(true);
 
         ServiceClient sender = new ServiceClient(configContext, clientService);
+        configContext.getListenerManager().start(); // TODO: This is because of a possible bug (?) in ListenerManager/ServiceClient
         sender.setOptions(options);
         OMElement result = sender.sendReceive(operationName, payloadElement);
 
@@ -188,10 +191,7 @@
 
     }
 
-    public void testEchoXMLSyncMC() throws Exception {
-        ConfigurationContext configContext =
-                ConfigurationContextFactory.createConfigurationContextFromFileSystem(Constants.TESTING_REPOSITORY, Constants.TESTING_REPOSITORY + "/conf/axis2.xml");
-
+    public void testEchoXMLSyncMC() throws Exception {        
         AxisOperation opdesc = new OutInAxisOperation(new QName("echoOMElement"));
         Options options = new Options();
         options.setTo(targetEPR);
Index: test/org/apache/axis2/transport/tcp/TCPTwoChannelEchoRawXMLTest.java
===================================================================
--- test/org/apache/axis2/transport/tcp/TCPTwoChannelEchoRawXMLTest.java	(revision 948024)
+++ test/org/apache/axis2/transport/tcp/TCPTwoChannelEchoRawXMLTest.java	(working copy)
@@ -79,6 +79,7 @@
 
     protected void tearDown() throws Exception {
         UtilsTCPServer.stop();
+        configContext.getListenerManager().destroy();
     }
 
     public void testEchoXMLCompleteASync() throws Exception {
@@ -122,6 +123,7 @@
                                                        operationName);
 
             sender = new ServiceClient(configContext, serviceClient);
+            configContext.getListenerManager().start(); // TODO: This is because of a possible bug (?) in ListenerManager/ServiceClient
             sender.setOptions(options);
 
             sender.sendReceiveNonBlocking(operationName, method, callback);
Index: test/org/apache/axis2/transport/tcp/UtilsTCPServer.java
===================================================================
--- test/org/apache/axis2/transport/tcp/UtilsTCPServer.java	(revision 948024)
+++ test/org/apache/axis2/transport/tcp/UtilsTCPServer.java	(working copy)
@@ -24,7 +24,6 @@
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.ConfigurationContextFactory;
 import org.apache.axis2.description.AxisService;
-import org.apache.axis2.transport.tcp.TCPServer;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -35,7 +34,7 @@
 public class UtilsTCPServer {
     private static int count = 0;
 
-    private static TCPServer receiver;
+    private static TCPTransportListener receiver;
 
     public static final int TESTING_PORT = 5555;
 
@@ -73,9 +72,9 @@
             } catch (InterruptedException e1) {
                 throw new AxisFault("Thread interuptted", e1);
             }
-            receiver = new TCPServer(TESTING_PORT, er);
+            receiver = new TCPTransportListener();
+            receiver.init(er, er.getAxisConfiguration().getTransportIn(Constants.TRANSPORT_TCP));
             receiver.start();
-
         }
         count++;
     }
@@ -84,6 +83,7 @@
         try {
             if (count == 1) {
                 receiver.stop();
+                receiver.destroy();
                 count = 0;
                 System.out.print("Server stopped .....");
             } else {
@@ -99,7 +99,7 @@
         File file = new File(prefixBaseDirectory(Constants.TESTING_REPOSITORY));
         ConfigurationContext configContext = 
             ConfigurationContextFactory.createConfigurationContextFromFileSystem(file.getAbsolutePath(), 
-                                                                                 file.getAbsolutePath() + "/conf/axis2.xml");
+                                                                                 file.getAbsolutePath() + "/conf/client_axis2.xml");
         return configContext;
     }
 
Index: conf/client_axis2.xml
===================================================================
--- conf/client_axis2.xml	(revision 0)
+++ conf/client_axis2.xml	(revision 0)
@@ -0,0 +1,246 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+
+    <!--If turned on with use the Accept header of the request to determine the contentType of the
+    response-->
+    <parameter name="httpContentNegotiation">false</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behaviour.-->
+    <parameter name="sendStacktraceDetailsWithFaults">true</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set then, Axis2 tries to get the first exception and set its messag