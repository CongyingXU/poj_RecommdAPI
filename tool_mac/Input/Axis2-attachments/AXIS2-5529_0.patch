Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectMessageFormatter.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectMessageFormatter.java	Wed Feb 17 15:16:41 IST 2010
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectMessageFormatter.java	Wed Feb 17 15:16:41 IST 2010
@@ -0,0 +1,133 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.axis2.transport.jms;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMNode;
+import org.apache.axiom.om.OMOutputFormat;
+import org.apache.axiom.om.OMText;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.transport.MessageFormatter;
+import org.apache.axis2.transport.base.BaseConstants;
+import org.apache.axis2.transport.http.util.URLTemplatingUtil;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.activation.DataHandler;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.net.URL;
+
+/**
+ * Message Formatter that encodes java object into XML and serializes
+ * Object is picked from the wrapper with name {@link BaseConstants.DEFAULT_OBJECT_WRAPPER}
+ */
+public class ObjectMessageFormatter implements MessageFormatter {
+
+    private static final Log log = LogFactory.getLog(ObjectMessageFormatter.class);
+
+    /**
+     *  Returns the bytes of the Java object in the ObjectDataSource
+     * @param messageContext Axis2 Message context
+     * @param format OMOutputFormat
+     * @return A byte array of the Java object in the ObjectDataSource
+     * @throws AxisFault
+     */
+    public byte[] getBytes(MessageContext messageContext,
+                           OMOutputFormat format) throws AxisFault {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        writeTo(messageContext, format, baos, true);
+        return baos.toByteArray();
+    }
+
+    /**
+     * Writes the data in the Java Object into the output stream   
+     */
+    public void writeTo(MessageContext messageContext,
+                        OMOutputFormat format, OutputStream out,
+                        boolean preserve) throws AxisFault {
+
+        DataHandler dh = getDataHandler(messageContext.getEnvelope());
+        if (dh != null) {
+            try {
+                dh.writeTo(out);
+            } catch (IOException e) {
+                handleException("Error serializing binary content of element : " +
+                        BaseConstants.DEFAULT_OBJECT_WRAPPER, e);
+            }
+        }
+    }
+
+    public String getContentType(MessageContext messageContext,
+                                 OMOutputFormat format,
+                                 String soapAction) {
+        String contentType = (String) messageContext.getProperty(
+                Constants.Configuration.CONTENT_TYPE);
+        if (contentType == null) {
+            contentType = "";
+        } else {
+            String encoding = format.getCharSetEncoding();
+            if (encoding != null) {
+                contentType += "; charset=" + encoding;
+            }
+        }
+        return contentType;
+    }
+
+    public URL getTargetAddress(MessageContext messageContext,
+                                OMOutputFormat format,
+                                URL targetURL) throws AxisFault {
+        return URLTemplatingUtil.getTemplatedURL(targetURL, messageContext, false);
+    }
+
+    public String formatSOAPAction(MessageContext messageContext,
+                                   OMOutputFormat format,
+                                   String soapAction) {
+        return soapAction;
+    }
+
+    private void handleException(String msg, Exception e) throws AxisFault {
+        log.error(msg, e);
+        throw new AxisFault(msg, e);
+    }
+
+    /**
+     * Extracts the <code>DataHandler</code> from the provided SOAP Message
+     *
+     * @param soapEnvelope the SOAP Message to be used to find the  <code>DataHandler</code>
+     * @return <code>DataHandler</code> if there is one wrapped with the
+     * @{code BaseConstants.DEFAULT_OBJECT_WRAPPER}. Otherwise , null
+     */
+    private DataHandler getDataHandler(SOAPEnvelope soapEnvelope) {
+        OMElement wrapper = soapEnvelope.getBody().getFirstChildWithName(
+                BaseConstants.DEFAULT_OBJECT_WRAPPER);
+        OMNode omNode = wrapper.getFirstOMChild();
+        if (omNode != null && omNode instanceof OMText) {
+            Object dh = ((OMText) omNode).getDataHandler();
+            if (dh != null && dh instanceof DataHandler) {
+                return (DataHandler) dh;
+            }
+        }
+        return null;
+    }
+}
Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectMessageBuilder.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectMessageBuilder.java	Wed Feb 17 15:23:06 IST 2010
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectMessageBuilder.java	Wed Feb 17 15:23:06 IST 2010
@@ -0,0 +1,125 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.axis2.transport.jms;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.builder.Builder;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.format.DataSourceMessageBuilder;
+import org.apache.axis2.transport.base.BaseConstants;
+import org.apache.axis2.transport.base.BaseUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.activation.DataHandler;
+import javax.activation.DataSource;
+import javax.xml.namespace.QName;
+import java.io.InputStream;
+import java.io.IOException;
+
+/**
+ * Message builder for java object payloads.
+ * <p/>
+ * This builder processes wraps the data in a wrapper element. The name of the wrapper element can
+ * be configured as a service parameter (see {@link BaseConstants#WRAPPER_PARAM}).
+ * It defaults to {@link BaseConstants#DEFAULT_OBJECT_WRAPPER}.
+ */
+public class ObjectMessageBuilder implements DataSourceMessageBuilder {
+
+    private static final Log log = LogFactory.getLog(ObjectMessageBuilder.class);
+
+    /**
+     * To be convert the object into some other representation such as an XML Infoset
+     */
+    private Builder builder;
+
+    public ObjectMessageBuilder() {
+    }
+
+    public ObjectMessageBuilder(Builder builder) {
+        this.builder = builder;
+    }
+
+    /**
+     * Process the input data and map into an OMElement representation
+     * @param dataSource Source of the message
+     * @param contentType  content type
+     * @param msgContext Axis2 Message context to be used to keep the payload
+     * @return  the payload corresponding to the data
+     * @throws AxisFault
+     */
+    public OMElement processDocument(DataSource dataSource,
+                                     String contentType,
+                                     MessageContext msgContext) throws AxisFault {
+        if (builder == null) {
+            QName wrapperQName = BaseConstants.DEFAULT_OBJECT_WRAPPER;
+            if (msgContext.getAxisService() != null) {
+                Parameter wrapperParameter = msgContext.getAxisService().getParameter(
+                        BaseConstants.WRAPPER_PARAM);
+                if (wrapperParameter != null) {
+                    wrapperQName = BaseUtils.getQNameFromString(wrapperParameter.getValue());
+                }
+            }
+            OMFactory factory = OMAbstractFactory.getOMFactory();
+            OMElement wrapper = factory.createOMElement(wrapperQName, null);
+            DataHandler dataHandler = new DataHandler(dataSource);
+            wrapper.addChild(factory.createOMText(dataHandler, true));
+            return wrapper;
+        } else if (builder instanceof DataSourceMessageBuilder) {
+            return ((DataSourceMessageBuilder) builder).processDocument(dataSource,
+                    contentType,
+                    msgContext);
+        } else {
+            try {
+                return builder.processDocument(dataSource.getInputStream(), contentType, msgContext);
+            } catch (IOException e) {
+                handleException("Error on getting an input stream from the object datasource",
+                        e);
+            }
+        }
+        return null;
+    }
+
+    /**
+     * This operation is not supported so calling this method will
+     * get <code>UnsupportedOperationException</code>
+     *
+     * @param inputStream    Message content as an input stream
+     * @param s              content type
+     * @param messageContext Axis2 Message context to be used to keep the payload
+     * @return throws UnsupportedOperationException
+     * @throws AxisFault
+     */
+    public OMElement processDocument(InputStream inputStream,
+                                     String s,
+                                     MessageContext messageContext) throws AxisFault {
+
+        throw new UnsupportedOperationException("The processDocument(InputStream inputStream," +
+                " String s, MessageContext messageContext) operation is not supported");
+    }
+
+    private void handleException(String msg, Exception e) throws AxisFault {
+        log.error(msg, e);
+        throw new AxisFault(msg, e);
+    }
+}
Index: modules/base/src/main/java/org/apache/axis2/transport/base/BaseConstants.java
===================================================================
--- modules/base/src/main/java/org/apache/axis2/transport/base/BaseConstants.java	(revision 759111)
+++ modules/base/src/main/java/org/apache/axis2/transport/base/BaseConstants.java	Wed Feb 17 14:44:45 IST 2010
@@ -71,6 +71,10 @@
    
     public static final QName DEFAULT_BINARY_WRAPPER =
             new QName(AXIOMPAYLOADNS, "binary");
+    
+    /** The wrapper element QName for for JMS Object Message*/
+    public static final QName DEFAULT_OBJECT_WRAPPER =
+            new QName(AXIOMPAYLOADNS, "object");
     /**
      * The name of the element which wraps plain text content into a SOAP envelope
      */
Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java	(revision 824281)
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java	Wed Feb 17 14:59:04 IST 2010
@@ -34,9 +34,11 @@
 
 import javax.jms.*;
 import javax.activation.DataHandler;
+import javax.activation.DataSource;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.StringWriter;
+import java.io.Serializable;
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.*;
 
@@ -394,7 +396,23 @@
             TextMessage txtMsg = (TextMessage) message;
             txtMsg.setText(msgContext.getEnvelope().getBody().
                 getFirstChildWithName(BaseConstants.DEFAULT_TEXT_WRAPPER).getText());
+        } else if (JMSConstants.JMS_OBJECT_MESSAGE.equals(jmsPayloadType)) {
+            message = session.createObjectMessage();
+            ObjectMessage objectMessage = (ObjectMessage) message;
+            OMElement wrapper = msgContext.getEnvelope().getBody().
+                    getFirstChildWithName(BaseConstants.DEFAULT_OBJECT_WRAPPER);
+            OMNode omNode = wrapper.getFirstOMChild();
+            if (omNode != null && omNode instanceof OMText) {
+                Object dh = ((OMText) omNode).getDataHandler();
+                if (dh != null && dh instanceof DataHandler) {
+                    DataSource dataSource = ((DataHandler) dh).getDataSource();
+                    if (dataSource instanceof ObjectDataSource) {
+                        objectMessage.setObject((Serializable)
+                                ((ObjectDataSource) dataSource).getObject());
-        }
+                    }
+                }
+            }
+        }
 
         // set the JMS correlation ID if specified
         String correlationId = getProperty(msgContext, JMSConstants.JMS_COORELATION_ID);
@@ -423,7 +441,8 @@
     /**
      * Guess the message type to use for JMS looking at the message contexts' envelope
      * @param msgContext the message context
-     * @return JMSConstants.JMS_BYTE_MESSAGE or JMSConstants.JMS_TEXT_MESSAGE or null
+     * @return JMSConstants.JMS_BYTE_MESSAGE or JMSConstants.JMS_TEXT_MESSAGE or
+     * JMSConstants.JMS_OBJECT_MESSAGE or null
      */
     private String guessMessageType(MessageContext msgContext) {
         OMElement firstChild = msgContext.getEnvelope().getBody().getFirstElement();
@@ -432,6 +451,8 @@
                 return JMSConstants.JMS_BYTE_MESSAGE;
             } else if (BaseConstants.DEFAULT_TEXT_WRAPPER.equals(firstChild.getQName())) {
                 return JMSConstants.JMS_TEXT_MESSAGE;
+            } else if (BaseConstants.DEFAULT_OBJECT_WRAPPER.equals(firstChild.getQName())) {
+                return JMSConstants.JMS_OBJECT_MESSAGE;
             }
         }
         return null;
Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/ctype/ContentTypeRuleFactory.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/ctype/ContentTypeRuleFactory.java	(revision 712036)
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/ctype/ContentTypeRuleFactory.java	Wed Feb 17 13:58:33 IST 2010
@@ -19,6 +19,7 @@
 
 import javax.jms.BytesMessage;
 import javax.jms.TextMessage;
+import javax.jms.ObjectMessage;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
@@ -39,6 +40,8 @@
             return new MessageTypeRule(TextMessage.class, value);
         } else if (name.equals("bytesMessage")) {
             return new MessageTypeRule(BytesMessage.class, value);
+        } else if (name.equals("objectMessage")) {
+            return new MessageTypeRule(ObjectMessage.class, value);
         } else if (name.equals("default")) {
             return new DefaultRule(value);
         } else {
Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectDataSource.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectDataSource.java	Wed Feb 17 15:16:41 IST 2010
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/ObjectDataSource.java	Wed Feb 17 15:16:41 IST 2010
@@ -0,0 +1,107 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.axis2.transport.jms;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.activation.DataSource;
+import java.beans.XMLEncoder;
+import java.io.*;
+
+/**
+ * Data source implementation wrapping a Java Object
+ * <p/>
+ * Underlying object can be accessed through the #getObject method
+ */
+public class ObjectDataSource implements DataSource {
+
+    private static final Log log = LogFactory.getLog(ObjectDataSource.class);
+
+    /** Underling java object */
+    private Object object;
+    /** Content type to be used to encode Object into different representations*/
+    private String contentType;
+
+    public ObjectDataSource(Object object, String contentType) {
+        this.object = object;
+        this.contentType = contentType;
+    }
+
+    /**
+     * Gets as a XML encoded byte stream
+     * @return an XML encoded byte stream
+     * @throws IOException
+     */
+    public InputStream getInputStream() throws IOException {
+        return new ByteArrayInputStream(serialize(object));
+    }
+
+    /**
+     * This operation it not supported
+     * @return throws UnsupportedOperationException
+     * @throws IOException
+     */
+    public OutputStream getOutputStream() throws IOException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String getContentType() {
+        return contentType;
+    }
+
+    public String getName() {
+        return "java.object";
+    }
+
+    /**
+     * Reruns the underlying java object
+     * @return the underlying java object
+     */
+    public Object getObject() {
+        return object;
+    }
+
+    /**
+     * Serialize the given object into a textual representation
+     *
+     * @param data given object
+     * @return an array of byte of the given object
+     */
+    private byte[] serialize(Object data) {
+
+        ByteArrayOutputStream binOut = null;
+        byte[] result = null;
+        try {
+            binOut = new ByteArrayOutputStream();
+            XMLEncoder encoder = new XMLEncoder(binOut);
+            encoder.writeObject(data);
+            encoder.close();
+            result = binOut.toByteArray();
+        } finally {
+            if (binOut != null) {
+                try {
+                    binOut.close();
+                } catch (IOException ignored) {
+                }
+            }
+        }
+        return result;
+    }
+}
Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSConstants.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSConstants.java	(revision 748389)
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSConstants.java	Wed Feb 17 13:58:33 IST 2010
@@ -207,6 +207,10 @@
      */
     public static final String JMS_TEXT_MESSAGE = "JMS_TEXT_MESSAGE";
     /**
+     * The message type indicating a ObjectMessage. See {@link JMS_MESSAGE_TYPE}
+     */
+    public static final String JMS_OBJECT_MESSAGE = "JMS_OBJECT_MESSAGE";
+    /**
      * A MessageContext property or client Option indicating the time to wait for a response JMS message
      */
     public static final String JMS_WAIT_REPLY = "JMS_WAIT_REPLY";
Index: modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSUtils.java
===================================================================
--- modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSUtils.java	(revision 824795)
+++ modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSUtils.java	Wed Feb 17 15:23:06 IST 2010
@@ -117,28 +117,34 @@
     public static void setSOAPEnvelope(Message message, MessageContext msgContext, String contentType)
         throws AxisFault, JMSException {
 
-        if (contentType == null) {
+          if (contentType == null) {
+            if (!isContentTypeIgnorable(message)) {
-            if (message instanceof TextMessage) {
-                contentType = "text/plain";
-            } else {
-                contentType = "application/octet-stream";
-            }
-            if (log.isDebugEnabled()) {
-                log.debug("No content type specified; assuming " + contentType);
-            }
-        }
+                if (message instanceof TextMessage) {
+                    contentType = "text/plain";
+                } else {
+                    contentType = "application/octet-stream";
+                }
+                if (log.isDebugEnabled()) {
+                    log.debug("No content type specified; assuming " + contentType);
+                }
+            }
+        }
-        
+
+        Builder builder = null;
+        if (contentType != null) {
-        int index = contentType.indexOf(';');
-        String type = index > 0 ? contentType.substring(0, index) : contentType;
+            int index = contentType.indexOf(';');
+            String type = index > 0 ? contentType.substring(0, index) : contentType;
-        Builder builder = BuilderUtil.getBuilderFromSelector(type, msgContext);
+            builder = BuilderUtil.getBuilderFromSelector(type, msgContext);
-        if (builder == null) {
-            if (log.isDebugEnabled()) {
+            if (builder == null) {
+                if (log.isDebugEnabled()) {
-                log.debug("No message builder found for type '" + type + "'. Falling back to SOAP.");
+                    log.debug("No message builder found for type '" + type + "'. Falling back" +
+                            " to SOAP.");
-            }
-            builder = new SOAPBuilder();
-        }
+                }
+                builder = new SOAPBuilder();
+            }
+        }
-        
+
-        OMElement documentElement;
+        OMElement documentElement = null;
         if (message instanceof BytesMessage) {
             // Extract the charset encoding from the content type and
             // set the CHARACTER_SET_ENCODING property as e.g. SOAPBuilder relies on this.
@@ -170,7 +176,21 @@
             }
             String content = ((TextMessage)message).getText();
             documentElement = textMessageBuilder.processDocument(content, contentType, msgContext);
+        } else if (message instanceof ObjectMessage) {
+            //processing incoming JMS Object messages 
+            ObjectMessage objectMessage = (ObjectMessage) message;
+            Object object = objectMessage.getObject();
+            ObjectMessageBuilder objectMessageBuilder;
+            if (builder == null) {
+                objectMessageBuilder = new ObjectMessageBuilder();
+            } else if (builder instanceof ObjectMessageBuilder) {
+                objectMessageBuilder = (ObjectMessageBuilder) builder;
-        } else {
+            } else {
+                objectMessageBuilder = new ObjectMessageBuilder(builder);
+            }
+            documentElement = objectMessageBuilder.processDocument(
+                    new ObjectDataSource(object, contentType), contentType, msgContext);
+        }  else {
             handleException("Unsupported JMS message type " + message.getClass().getName());
             return; // Make compiler happy
         }
@@ -496,6 +516,11 @@
             // TODO: Converting the whole message to a byte array is too much overhead just to determine the message size.
             //       Anyway, the result is not accurate since we don't know what encoding the JMS provider uses.
             return ((TextMessage) message).getText().getBytes().length;
+        } else if (message instanceof ObjectMessage) {
+            if (log.isDebugEnabled()) {
+                log.debug("Currently the size of the JMS ObjectMessage is not calculated.");
+            }
+            return 0;
         } else {
             log.warn("Can't determine size of JMS message; unsupported message type : "
                     + message.getClass().getName());
@@ -720,4 +745,13 @@
             throw e;
         }
     }
+
+    /**
+     * Based on the JMS message type, checks weather the content type can be ignored or not.
+     * @param message  JMS Message
+     * @return True if the content type can be ignored.
+     */
+    private static boolean isContentTypeIgnorable(Message message){
+        return message instanceof ObjectMessage;
-}
+    }
+}
