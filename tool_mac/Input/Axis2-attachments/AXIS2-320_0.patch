<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type" content="">
  <title>Axis 2 WSDL2Java Ant Task</title>
</head>

<body lang="en">
<h1>Axis 2 WSDL2Java Ant Task</h1>

<h2>This guide explains how to use ant with Axis 2 and WSDL2Java.</h2>

<p>Below is an example of a full build.xml needed to run WSDL2Java and generate the Java source files, compile the sources, and build an AAR file ready for deployment: </p>
<pre class="code">&lt;!DOCTYPE project&gt;

&lt;project name="wsdl2java-example" default="usage" basedir="."&gt;

  &lt;property name="project-name" value="wsdl2java-example"/&gt;
  &lt;property file="build.properties"/&gt;
  
  &lt;property name="build" value="build"/&gt;
  &lt;property name="src" value="src"/&gt;
  &lt;property name="build.classes"      value="build/classes" /&gt;

  &lt;path id="axis.classpath"&gt;
     &lt;pathelement location="build/classes" /&gt;
     &lt;fileset dir="${axis.home}/lib"&gt;
       &lt;include name="**/*.jar" /&gt;
     &lt;/fileset&gt;
     &lt;pathelement location="${build.classes}" /&gt;
  &lt;/path&gt;

  &lt;target name="usage" description="Build file usage info (default task)"&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message="${project-name} " /&gt;
    &lt;echo message="-------------------------------------------------------" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message="Available Targets:" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message=" Compiling:" /&gt;
    &lt;echo message="  compile           - Compiles the WSDL2Java source code" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message=" Compiling client:" /&gt;
    &lt;echo message="  compile_client           - Compiles the client source code" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message=" Cleaning up:" /&gt;
    &lt;echo message="  clean             - Delete class files" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message=" WSDL:" /&gt;
    &lt;echo message="  wsdl2java               - Generate source from WSDL" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message=" AAR:" /&gt;
    &lt;echo message="  aar               - Generate an .aar for deployment into WEB-INF/services" /&gt;
    &lt;echo message=" " /&gt;
    &lt;echo message=" Executing:" /&gt;
    &lt;echo message="  runLogin               - Execute the runLogin client" /&gt;
  &lt;/target&gt;

  &lt;target name="prepare" &gt;
    &lt;mkdir dir="${build.classes}" /&gt;
  &lt;/target&gt;

  &lt;target name="clean" &gt;
     &lt;delete dir="${build}" /&gt;
     &lt;delete dir="${dist}" /&gt;
  &lt;/target&gt;

  &lt;target name="compile"&gt;
    &lt;echo message="Compiling wsdl2 files"/&gt;

    &lt;javac
     srcdir="output"
     destdir="${build.classes}"
     deprecation="true"
     failonerror="true" debug="true"
    &gt;

     &lt;classpath refid="axis.classpath"/&gt; 
    &lt;/javac&gt;

  &lt;/target&gt;

  &lt;target name="wsdl2java" depends="clean,prepare"&gt;
      &lt;delete dir="output" /&gt;
      &lt;java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true"&gt;
          &lt;classpath refid="axis.classpath"/&gt; 
          &lt;arg value="-uri"/&gt;
          &lt;arg file="wsdl/LoginEndpoint.wsdl"/&gt;
          &lt;arg value="-ss"/&gt;
          &lt;arg value="-sd"/&gt;
          &lt;arg value="-o"/&gt;
          &lt;arg file="output"/&gt;
          &lt;arg value="-p"/&gt;
          &lt;arg value="org.example.types"/&gt;
      &lt;/java&gt;

      &lt;!-- Move the schema folder to classpath--&gt;
      &lt;move todir="${build.classes}"&gt;
          &lt;fileset dir="output"&gt;
              &lt;include name="**/*schema*/**/*.class"/&gt;
              &lt;include name="**/*schema*/**/*.xsb"/&gt;
          &lt;/fileset&gt;
      &lt;/move&gt;

  &lt;/target&gt;

  &lt;target name="jar_wsdl" depends="compile"&gt;
	  &lt;jar jarfile="lib/axis2_example_wsdl.jar" &gt;
		  &lt;fileset dir="${build}/classes" /&gt;
	  &lt;/jar&gt;
  &lt;/target&gt;
  
  &lt;!-- build an .aar file for axis2 web services --&gt;
  &lt;target name="aar" depends="compile"&gt;
     &lt;delete dir="${build.classes}/META-INF" /&gt;
     &lt;mkdir dir="${build.classes}/META-INF" /&gt;
     &lt;copy todir="${build.classes}/META-INF" &gt;
       &lt;fileset dir="output/service_descriptors/LoginEndpoint" &gt;
         &lt;!-- axis2 web services definitions file --&gt;
         &lt;include name="services.xml"/&gt;
       &lt;/fileset&gt;
       &lt;fileset dir="wsdl" &gt;
         &lt;include name="LoginEndpoint.wsdl"/&gt;
       &lt;/fileset&gt;
     &lt;/copy&gt;
     &lt;jar jarfile="dist/LoginEndpoint.aar" &gt;
       &lt;fileset dir="${build.classes}" /&gt;
     &lt;/jar&gt;
  &lt;/target&gt;

  &lt;target name="compile_client"&gt;
    &lt;echo message="Compiling client files"/&gt;

    &lt;javac
     srcdir="src"
     destdir="${build.classes}"
     deprecation="true"
     failonerror="true" debug="true"
    &gt;

     &lt;classpath refid="axis.classpath"/&gt; 
    &lt;/javac&gt;

  &lt;/target&gt;

  &lt;target name="runLogin" depends="compile_client" description="run webLogin client"&gt;
     &lt;echo message="running the webLogin client" /&gt;
     &lt;java classname="org.client.LoginClient" &gt;
      &lt;classpath refid="axis.classpath"/&gt; 
    &lt;/java&gt;
  &lt;/target&gt;

&lt;/project&gt;
</pre>

<p>The above build.xml depends on a build.properties file which defines 'axis.home', such as:</p>
<p>axis.home=/home/username/axis2-0.93-bin/</p>

<p>The above build.xml example also assumes three empty directories exist, 'dist', 'lib', and 'src'. </p>

<p>Below is a validated WSDL Document following the Document/Literal Style. The name of this file matches the name used in the WSDL2Java ant task above, LoginEndpoint.wsdl</p>
<pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;definitions name="LoginService" targetNamespace="http://login" xmlns:tns="http://login" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns2="http://login/types"&gt;
  &lt;types&gt;
    &lt;schema targetNamespace="http://login/types" xmlns:tns="http://login/types" xmlns:soap11-enc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://www.w3.org/2001/XMLSchema"&gt;
      &lt;import namespace="http://schemas.xmlsoap.org/soap/encoding/"/&gt;
      &lt;element name="returnWebLoginElement"&gt;
        &lt;complexType&gt;
          &lt;sequence&gt;
            &lt;element ref="tns:soap_session_idElement"/&gt;
            &lt;element ref="tns:web_user_nameElement"/&gt;
          &lt;/sequence&gt;
        &lt;/complexType&gt;
      &lt;/element&gt;
      &lt;element name="webLoginElement"&gt;
        &lt;complexType&gt;
          &lt;sequence&gt;
            &lt;element ref="tns:user_nameElement"/&gt;
            &lt;element ref="tns:user_passwordElement"/&gt;
          &lt;/sequence&gt;
        &lt;/complexType&gt;
      &lt;/element&gt;
      &lt;element name="user_nameElement" type="xsd:string"/&gt;
      &lt;element name="user_passwordElement" type="xsd:string"/&gt;
      &lt;element name="soap_session_idElement" type="xsd:string"/&gt;
      &lt;element name="web_user_nameElement" type="xsd:string"/&gt;
&lt;/schema&gt;&lt;/types&gt;
  &lt;message name="LoginEndpoint_webLogin"&gt;
     &lt;part name="parameters" element="ns2:webLoginElement"/&gt;
  &lt;/message&gt;
  &lt;message name="LoginEndpoint_webLoginResponse"&gt;
    &lt;part name="result" element="ns2:returnWebLoginElement"/&gt;
  &lt;/message&gt;
  &lt;portType name="LoginEndpoint"&gt;
    &lt;operation name="webLogin"&gt;
      &lt;input message="tns:LoginEndpoint_webLogin" name="LoginEndpoint_webLogin"/&gt;
      &lt;output message="tns:LoginEndpoint_webLoginResponse" name="LoginEndpoint_webLoginResponse"/&gt;
    &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;binding name="LoginEndpointBinding" type="tns:LoginEndpoint"&gt;
    &lt;soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/&gt;
    &lt;operation name="webLogin"&gt;
      &lt;soap:operation soapAction="webLogin"/&gt;
      &lt;input name="LoginEndpoint_webLogin"&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/input&gt;
      &lt;output name="LoginEndpoint_webLoginResponse"&gt; 
        &lt;soap:body use="literal"/&gt;
      &lt;/output&gt;
    &lt;/operation&gt;
  &lt;/binding&gt;
  &lt;service name="LoginService"&gt;
    &lt;port name="LoginEndpointPort" binding="tns:LoginEndpointBinding"&gt;
      &lt;soap:address location="http://localhost:8080/axis2/services/LoginEndpoint"/&gt;&lt;/port&gt;&lt;/service&gt;&lt;/definitions&gt;
</pre>
<p>Place the above file, named LoginEndpoint.wsdl, in the directory 'wsdl' below the build.xml file. Run the WSDL2Java command via the ant task defined above, and there will be a directory called 'output' created. This directory contains the WSDL2Java generated source. An important detail is that an XMLBean class file is also generated by WSDL2Java, TypeSystemHolder.class. That file is placed into build/classes by the above ant task and will be needed to compile the generated sources.</p> 
<p>The next step is to modify the generated Skeleton Java Source file - the Web Service. This file as generated returns null and needs to be updated to contain the business logic.</p> 
<p>After the WSDL2Java command runs the file LoginEndpoint.wsdl, edit the following file:</p> 
<p>output/org/example/types/LoginEndpointSkeleton.java. You should see the following code:</p> 
<pre class="code">package org.example.types;
    /**
     *  Auto generated java skeleton for the service by the Axis code generator
     */
    public class LoginEndpointSkeleton {
     
		 
        /**
         * Auto generated method signature
         
          * @param param0
         
         */
        public  org.example.types.databinding.login.ReturnWebLoginElementDocument webLogin
                  (org.example.types.databinding.login.WebLoginElementDocument param0 ){
                //Todo fill this with the necessary business logic
                return null;
        }
     
    }
</pre>    
<p>Replace the contents of this file with the following, which uses the complex types generated by WSDL2Java and the example wsdl file:</p> 
<pre class="code">package org.example.types;
import org.example.types.databinding.login.ReturnWebLoginElementDocument;
import org.example.types.databinding.login.WebLoginElementDocument.WebLoginElement;

/**
 *  Auto generated java skeleton for the service by the Axis code generator
 */
public class LoginEndpointSkeleton {
 
    /**
     * Auto generated method signature
     
      * @param webLoginElementDocument changed from param0
     
     */
    public  org.example.types.databinding.login.ReturnWebLoginElementDocument webLogin
              (org.example.types.databinding.login.WebLoginElementDocument webLoginElementDocument ){

            //Todo fill this with the necessary business logic
            System.out.println("LoginEndpointSkeleton.webLogin reached successfully!");

            // Get parameters passed in 
            WebLoginElement webLoginElement = webLoginElementDocument.getWebLoginElement();
            String userName = webLoginElement.getUserNameElement();
            String password = webLoginElement.getUserPasswordElement();
            System.out.println("LoginEndpointSkeleton.webLogin userName: " + userName);
            System.out.println("LoginEndpointSkeleton.webLogin password: " + password);
     
            // input paramaters would be used here 
    
            // prepare output
            org.example.types.databinding.login.ReturnWebLoginElementDocument retDoc =
                org.example.types.databinding.login.ReturnWebLoginElementDocument.Factory.newInstance();
            
            org.example.types.databinding.login.ReturnWebLoginElementDocument.ReturnWebLoginElement
            retElement =
             org.example.types.databinding.login.ReturnWebLoginElementDocument.ReturnWebLoginElement.Factory.newInstance();
            
            retElement.setWebUserNameElement("joe sixpack");
            retElement.setSoapSessionIdElement("some_random_string");
            System.out.println("validate retElement: " + retElement.validate());

            retDoc.setReturnWebLoginElement(retElement);
            System.out.println("validate retDoc: " + retDoc.validate());
            
            System.out.println("LoginEndpointSkeleton.webLogin returning...");
    
            return retDoc; 
    

    }
 
}

</pre>
<p>The next steps assume the axis2.war has been deployed and has expanded in a servlet container. </p> 
<p>Run the 'jar_wsdl' ant task from the example build.xml, which generates a jar file lib/axis2_example_wsdl.jar in the 'lib' directory under the build.xml . This jar will be used to compile the client, and also will be placed in the servlet container. Next, run the 'aar' ant task from the example build.xml, which generates the deployable axis2 web service. Place dist/LoginEndpoint.aar into axis2/WEB-INF/services . Place lib/axis2_example_wsdl.jar into axis2/WEB-INF/lib . Verify the happy axis page loaded the services correctly - there should be the service 'LoginEndpoint' with the available operation 'webLogin' displayed.</p> 

<p>The last step is to create and run the client. In the src directory create the file org.client.LoginClient.java, with the contents below:</p> 
<pre class="code">package org.client;

import org.apache.axis2.AxisFault;

import org.example.types.LoginEndpointStub;
import org.example.types.databinding.login.WebLoginElementDocument;
import org.example.types.databinding.login.WebLoginElementDocument.WebLoginElement;
import org.example.types.databinding.login.ReturnWebLoginElementDocument;
import org.example.types.databinding.login.WebLoginElementDocument;
import org.example.types.databinding.login.WebLoginElementDocument.WebLoginElement;

/**
 * Login.
 *
 */
public class LoginClient {

    public static void main(String[] args) {
        try {

            System.out.println("webLogin, firing...");
            LoginEndpointStub stub = 
                new LoginEndpointStub(null, 
                    "http://localhost:8080/axis2/services/LoginEndpoint");
                    
            WebLoginElementDocument webLoginElementDocument 
                = WebLoginElementDocument.Factory.newInstance();
            WebLoginElement webLoginElement = 
                WebLoginElement.Factory.newInstance();
            webLoginElement.setUserNameElement("joe");
            webLoginElement.setUserPasswordElement("sixpack");
            
            webLoginElementDocument.setWebLoginElement(webLoginElement);
            
            System.out.println("validate: " +  webLoginElement.validate());
             stub.webLogin(webLoginElementDocument);
 
            ReturnWebLoginElementDocument returnWebLoginElementDocument = 
                stub.webLogin(webLoginElementDocument);

            System.out.println("Client returned");

            org.example.types.databinding.login.ReturnWebLoginElementDocument.ReturnWebLoginElement
                retElement = returnWebLoginElementDocument.getReturnWebLoginElement();

            System.out.println("WebUserName: " + retElement.getWebUserNameElement());
            System.out.println("SOAPSessionId: " + retElement.getSoapSessionIdElement());
            System.out.println("webLogin, completed!!!");

        } catch (AxisFault axisFault) {
            axisFault.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}

</pre>
<p>Now run the ant task 'ant runLogin' . The following output should appear: </p> 
<pre class="code">runLogin:
     [echo] running the webLogin client
     [java] webLogin, firing...
     [java] validate: true
     [java] Client returned
     [java] WebUserName: joe sixpack
     [java] SOAPSessionId: some_random_string
     [java] webLogin, completed!!!
</pre>
</body>
</html>
