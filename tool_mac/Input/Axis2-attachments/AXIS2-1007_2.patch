Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/SOAP12Tests.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/SOAP12Tests.java	(revision 0)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/message/SOAP12Tests.java	(revision 0)
@@ -0,0 +1,235 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.message;
+
+import java.io.StringReader;
+
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
+import org.apache.axis2.jaxws.message.factory.MessageFactory;
+import org.apache.axis2.jaxws.message.factory.XMLStringBlockFactory;
+import org.apache.axis2.jaxws.message.util.Reader2Writer;
+import org.apache.axis2.jaxws.registry.FactoryRegistry;
+
+import junit.framework.TestCase;
+
+/**
+ * This suite is used to test the creation of messages based on SOAP 1.2
+ * with both inbound and outbound simulations. 
+ *
+ */
+public class SOAP12Tests extends TestCase {
+
+    private static final String sampleText = 
+        "<echo>test string</echo>";
+    
+    private static final String sampleSoap12EnvelopeHead =
+        "<soapenv:Envelope xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\">" +
+        "<soapenv:Header /><soapenv:Body>";
+    
+    private static final String sampleEnvelopeTail =
+        "</soapenv:Body></soapenv:Envelope>";    
+    
+    private static final String sampleSoap12Envelope = 
+        sampleSoap12EnvelopeHead + 
+        sampleText + 
+        sampleEnvelopeTail;
+    
+    private static final String SOAP12_NS_URI = 
+        "http://www.w3.org/2003/05/soap-envelope";
+    
+    public static final XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+    
+    public SOAP12Tests(String name) {
+        super(name);
+    }
+    
+    /**
+     * Simulate creating a SOAP 1.2 message when the business object
+     * provided is just the payload. 
+     */
+    public void testCreateSoap12FromPayload() throws Exception {
+        // Create a SOAP 1.2 Message
+        MessageFactory mf = (MessageFactory)
+            FactoryRegistry.getFactory(MessageFactory.class);
+        Message m = mf.create(Protocol.soap12);
+        
+        // Get the BlockFactory
+        XMLStringBlockFactory f = (XMLStringBlockFactory)
+            FactoryRegistry.getFactory(XMLStringBlockFactory.class);
+        
+        // Create a Block using the sample string as the content.  This simulates
+        // what occurs on the outbound JAX-WS dispatch<String> client
+        Block block = f.createFrom(sampleText, null, null);
+        
+        // Add the block to the message as normal body content.
+        m.setBodyBlock(0, block);
+        
+        // Assuming no handlers are installed, the next thing that will happen
+        // is a XMLStreamReader will be requested...to go to OM.   At this point the
+        // block should be consumed.
+        OMElement om = m.getAsOMElement();
+        
+        // The block should not be consumed yet...because the message has not been read
+        assertTrue(!block.isConsumed());
+        
+        // To check that the output is correct, get the String contents of the 
+        // reader
+        Reader2Writer r2w = new Reader2Writer(om.getXMLStreamReaderWithoutCaching());
+        String newText = r2w.getAsString();
+        System.out.println(newText);
+        assertTrue(newText.contains(sampleText));
+        assertTrue(newText.contains("soap"));
+        assertTrue(newText.contains("Envelope"));
+        assertTrue(newText.contains("Body"));
+        
+        assertTrue(m.getProtocol().equals(Protocol.soap12));
+        
+        SOAPEnvelope omSoapEnv = (SOAPEnvelope) m.getAsOMElement();
+        OMNamespace ns = omSoapEnv.getNamespace();
+        assertTrue(ns.getNamespaceURI().equals(SOAP12_NS_URI));
+        
+        // The block should be consumed at this point
+        assertTrue(block.isConsumed());
+    }
+    
+    /**
+     * Simulate creating a SOAP 1.2 message when the business object
+     * provided is the full message.
+     */
+    public void testCreateSoap12FromMessage() throws Exception {
+        // Create a SOAP 1.2 Message
+        MessageFactory mf = (MessageFactory)
+            FactoryRegistry.getFactory(MessageFactory.class);
+        
+        // Get the BlockFactory
+        XMLStringBlockFactory f = (XMLStringBlockFactory)
+            FactoryRegistry.getFactory(XMLStringBlockFactory.class);
+        
+        // Create a Block using the sample string as the content.  This simulates
+        // what occurs on the outbound JAX-WS dispatch<String> client
+        Block block = f.createFrom(sampleSoap12Envelope, null, null);
+        
+        // Create a Message with the full XML contents that we have
+        Message m = mf.createFrom(block.getXMLStreamReader(true));
+        
+        // Assuming no handlers are installed, the next thing that will happen
+        // is a XMLStreamReader will be requested...to go to OM.   At this point the
+        // block should be consumed.
+        OMElement om = m.getAsOMElement();
+        
+        // To check that the output is correct, get the String contents of the 
+        // reader
+        Reader2Writer r2w = new Reader2Writer(om.getXMLStreamReaderWithoutCaching());
+        String newText = r2w.getAsString();
+        System.out.println(newText);
+        assertTrue(newText.contains(sampleText));
+        assertTrue(newText.contains("soap"));
+        assertTrue(newText.contains("Envelope"));
+        assertTrue(newText.contains("Body"));
+        
+        assertTrue(m.getProtocol().equals(Protocol.soap12));
+        
+        SOAPEnvelope omSoapEnv = (SOAPEnvelope) m.getAsOMElement();
+        OMNamespace ns = omSoapEnv.getNamespace();
+        assertTrue(ns.getNamespaceURI().equals(SOAP12_NS_URI));
+        
+        // The block should be consumed at this point
+        assertTrue(block.isConsumed());
+    }
+    
+    public void testGetPayloadFromSoap12() throws Exception {
+        // On inbound, there will already be an OM
+        // which represents the message.  The following code simulates the input
+        // OM
+        StringReader sr = new StringReader(sampleSoap12Envelope);
+        XMLStreamReader inflow = inputFactory.createXMLStreamReader(sr);
+        StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(inflow, null);
+        OMElement omElement = builder.getSOAPEnvelope();
+        
+        // The JAX-WS layer creates a Message from the OM
+        MessageFactory mf = (MessageFactory)
+            FactoryRegistry.getFactory(MessageFactory.class);
+        Message m = mf.createFrom(omElement);
+        
+        // Make sure the right Protocol was set on the Message
+        assertTrue(m.getProtocol().equals(Protocol.soap12));
+        
+        // Check the SOAPEnvelope to make sure we've got the right
+        // protocol namespace there as well.
+        SOAPEnvelope soapEnv = (SOAPEnvelope) m.getAsOMElement();
+        OMNamespace ns = soapEnv.getNamespace();
+        assertTrue(ns.getNamespaceURI().equals(SOAP12_NS_URI));
+        
+        // Assuming no handlers are installed, the next thing that will happen
+        // is the proxy code will ask for the business object (String).
+        XMLStringBlockFactory blockFactory = 
+            (XMLStringBlockFactory) FactoryRegistry.getFactory(XMLStringBlockFactory.class);
+        Block block = m.getBodyBlock(0, null, blockFactory);
+        Object bo = block.getBusinessObject(true);
+        assertTrue(bo instanceof String);
+        
+        // The block should be consumed
+        assertTrue(block.isConsumed());
+        
+        // Check the String for accuracy
+        assertTrue(sampleText.equals(bo));
+    }
+    
+    public void testGetMessageFromSoap12() throws Exception {
+        // On inbound, there will already be an OM
+        // which represents the message.  The following code simulates the input
+        // OM
+        StringReader sr = new StringReader(sampleSoap12Envelope);
+        XMLStreamReader inflow = inputFactory.createXMLStreamReader(sr);
+        StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(inflow, null);
+        OMElement omElement = builder.getSOAPEnvelope();
+        
+        // The JAX-WS layer creates a Message from the OM
+        MessageFactory mf = (MessageFactory)
+            FactoryRegistry.getFactory(MessageFactory.class);
+        Message m = mf.createFrom(omElement);
+        
+        // Make sure the right Protocol was set on the Message
+        assertTrue(m.getProtocol().equals(Protocol.soap12));
+        
+        // Check the SOAPEnvelope to make sure we've got the right
+        // protocol namespace there as well.
+        SOAPEnvelope soapEnv = (SOAPEnvelope) m.getAsOMElement();
+        OMNamespace ns = soapEnv.getNamespace();
+        assertTrue(ns.getNamespaceURI().equals(SOAP12_NS_URI));
+        
+        // Assuming no handlers are installed, the next thing that will happen
+        // is the proxy code will ask for the business object (String).
+        XMLStringBlockFactory blockFactory = 
+            (XMLStringBlockFactory) FactoryRegistry.getFactory(XMLStringBlockFactory.class);
+        Block block = blockFactory.createFrom(m.getAsOMElement(), null, null);
+        Object bo = block.getBusinessObject(true);
+        assertTrue(bo instanceof String);
+        
+        // The block should be consumed
+        assertTrue(block.isConsumed());
+        
+        // Check the String for accuracy
+        assertTrue(sampleSoap12Envelope.equals(bo));
+    }
+}
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 430114)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -26,12 +26,14 @@
 import org.apache.axis2.jaxws.description.ServiceDescriptionTests;
 import org.apache.axis2.jaxws.description.WSDLDescriptionTests;
 import org.apache.axis2.jaxws.description.WSDLTests;
+import org.apache.axis2.jaxws.dispatch.SOAP12Dispatch;
 import org.apache.axis2.jaxws.exception.ExceptionFactoryTests;
 import org.apache.axis2.jaxws.handler.HandlerChainProcessorTests;
 import org.apache.axis2.jaxws.i18n.JaxwsMessageBundleTests;
 import org.apache.axis2.jaxws.message.BlockTests;
 import org.apache.axis2.jaxws.message.MessageTests;
 import org.apache.axis2.jaxws.message.SAAJConverterTests;
+import org.apache.axis2.jaxws.message.SOAP12Tests;
 import org.apache.axis2.jaxws.message.XMLStreamReaderSplitterTests;
 import org.apache.axis2.jaxws.provider.*;
 import org.apache.axis2.proxy.ProxyTests;
@@ -46,12 +48,13 @@
         
         // Add each of the test suites
         suite = DispatchTestSuite.addTestSuites(suite);
+        suite.addTestSuite(SOAP12Dispatch.class);
         
-        
         suite.addTestSuite(BlockTests.class);
         suite.addTestSuite(MessageTests.class);
         suite.addTestSuite(SAAJConverterTests.class);
         suite.addTestSuite(XMLStreamReaderSplitterTests.class);
+        suite.addTestSuite(SOAP12Tests.class);
         
         suite.addTestSuite(WSDLTests.class);
         suite.addTestSuite(ServiceDescriptionTests.class);
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/SOAP12Dispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/SOAP12Dispatch.java	(revision 0)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/SOAP12Dispatch.java	(revision 0)
@@ -0,0 +1,143 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.dispatch;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.ws.Dispatch;
+import javax.xml.ws.Service;
+import javax.xml.ws.Service.Mode;
+import javax.xml.ws.soap.SOAPBinding;
+
+import junit.framework.TestCase;
+
+/**
+ * This class uses the JAX-WS Dispatch API to test sending and receiving
+ * messages using SOAP 1.2.
+ */
+public class SOAP12Dispatch extends TestCase {
+    
+    private static final QName QNAME_SERVICE = new QName(
+            "http://org/apache/axis2/jaxws/test/SOAP12", "SOAP12Service");
+    private static final QName QNAME_PORT = new QName(
+            "http://org/apache/axis2/jaxws/test/SOAP12", "SOAP12Port");
+    private static final String URL_ENDPOINT = "http://localhost:8080/axis2/services/SOAP12ProviderService";    
+    
+    private static final String sampleRequest = 
+        "<test:echoString xmlns:test=\"http://org/apache/axis2/jaxws/test/SOAP12\">" +
+        "<test:input>SAMPLE REQUEST MESSAGE</test:input>" +
+        "</test:echoString>";
+    private static final String sampleEnvelopeHead = 
+        "<soapenv:Envelope xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\">" +
+        "<soapenv:Header /><soapenv:Body>";
+    private static final String sampleEnvelopeTail = 
+        "</soapenv:Body></soapenv:Envelope>";
+    private static final String sampleEnvelope = 
+        sampleEnvelopeHead + 
+        sampleRequest + 
+        sampleEnvelopeTail;
+    
+    public SOAP12Dispatch(String name) {
+        super(name);
+    }
+    
+    /**
+     * Test sending a SOAP 1.2 request in PAYLOAD mode
+     */
+    public void testSOAP12DispatchPayloadMode() throws Exception {
+        // Create the JAX-WS client needed to send the request
+        Service service = Service.create(QNAME_SERVICE);
+        service.addPort(QNAME_PORT, SOAPBinding.SOAP12HTTP_BINDING, URL_ENDPOINT);
+        Dispatch<Source> dispatch = service.createDispatch(
+                QNAME_PORT, Source.class, Mode.PAYLOAD);
+        
+        // Create the Source object with the payload contents.  Since
+        // we're in PAYLOAD mode, we don't have to worry about the envelope.
+        byte[] bytes = sampleRequest.getBytes();
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        StreamSource request = new StreamSource(bais);
+        
+        // Send the SOAP 1.2 request
+        Source response = dispatch.invoke(request);
+        
+        // Convert the response to a more consumable format
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        StreamResult result = new StreamResult(baos);
+        
+        TransformerFactory factory = TransformerFactory.newInstance();
+        Transformer trans = factory.newTransformer();
+        trans.transform(response, result);
+        
+        // Check to make sure the contents are correct.  Again, since we're
+        // in PAYLOAD mode, we shouldn't have anything related to the envelope
+        // in the return, just the contents of the Body.
+        String responseText = baos.toString();
+        assertTrue(!responseText.contains("soap"));
+        assertTrue(!responseText.contains("Envelope"));
+        assertTrue(!responseText.contains("Body"));
+        assertTrue(responseText.contains("echoStringResponse"));        
+    }
+    
+    /**
+     * Test sending a SOAP 1.2 request in MESSAGE mode
+     */
+    public void testSOAP12DispatchMessageMode() throws Exception {
+        // Create the JAX-WS client needed to send the request
+        Service service = Service.create(QNAME_SERVICE);
+        service.addPort(QNAME_PORT, SOAPBinding.SOAP12HTTP_BINDING, URL_ENDPOINT);
+        Dispatch<Source> dispatch = service.createDispatch(
+                QNAME_PORT, Source.class, Mode.MESSAGE);
+        
+        // Create the Source object with the message contents.  Since
+        // we're in MESSAGE mode, we'll need to make sure we create this
+        // with the right protocol.
+        byte[] bytes = sampleEnvelope.getBytes();
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        StreamSource request = new StreamSource(bais);
+        
+        Source response = dispatch.invoke(request);
+        
+        // Convert the response to a more consumable format
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        StreamResult result = new StreamResult(baos);
+        
+        TransformerFactory factory = TransformerFactory.newInstance();
+        Transformer trans = factory.newTransformer();
+        trans.transform(response, result);
+        
+        // Check to make sure the contents of the message are correct
+        String responseText = baos.toString();
+        assertTrue(responseText.contains("soap"));
+        assertTrue(responseText.contains("Body"));
+        assertTrue(responseText.contains("Envelope"));
+        assertTrue(responseText.contains("echoStringResponse"));
+        
+        // Check to make sure the message returned had the right protocol version
+        // TODO: Need to determine whether or not we should be using the hard 
+        // coded URLs here, or whether we should be using a constant for the 
+        // purposes of the test.
+        assertTrue(responseText.contains("http://www.w3.org/2003/05/soap-envelope"));
+        assertTrue(!responseText.contains("http://schemas.xmlsoap.org/soap/envelope"));
+    }
+}
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/SOAP12Provider.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/SOAP12Provider.java	(revision 0)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/SOAP12Provider.java	(revision 0)
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.dispatch.server;
+
+import javax.xml.ws.Provider;
+
+/**
+ * A Provider&lt;String&gt; implementation used to test sending and 
+ * receiving SOAP 1.2 messages.
+ */
+public class SOAP12Provider implements Provider<String> {
+
+    private static final String sampleResponse = 
+        "<test:echoStringResponse xmlns:test=\"http://org/apache/axis2/jaxws/test/SOAP12\">" +
+        "<test:output>SAMPLE REQUEST MESSAGE</test:output>" +
+        "</test:echoStringResponse>";
+    
+    public String invoke(String obj) {
+        System.out.println(">> request received");
+        System.out.println(obj);
+        return sampleResponse;
+    }
+
+}
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/META-INF/services.xml
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/META-INF/services.xml	(revision 0)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/META-INF/services.xml	(revision 0)
@@ -0,0 +1,12 @@
+<serviceGroup>
+  <service name="SOAP12ProviderService">
+      <messageReceivers>
+         <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" 
+	         class="org.apache.axis2.jaxws.server.JAXWSMessageReceiver"/>
+      </messageReceivers>
+      <parameter locked="false" name="ServiceClass">org.apache.axis2.jaxws.dispatch.server.SOAP12Provider</parameter>
+      <operation name="echoString" mep="http://www.w3.org/2004/08/wsdl/in-out">
+         <actionMapping/>
+      </operation>
+   </service>
+</serviceGroup>
\ No newline at end of file
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/META-INF/SOAP12ProviderService.wsdl
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/META-INF/SOAP12ProviderService.wsdl	(revision 0)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/server/META-INF/SOAP12ProviderService.wsdl	(revision 0)
@@ -0,0 +1,101 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wsdl:definitions targetNamespace="http://org/apache/axis2/jaxws/test/SOAP12" 
+    xmlns:impl="http://org/apache/axis2/jaxws/test/SOAP12" 
+    xmlns:intf="http://org/apache/axis2/jaxws/test/SOAP12" 
+    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
+    xmlns:wsdlsoap12="http://schemas.xmlsoap.org/wsdl/soap12/" 
+    xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+ <wsdl:types>
+  <schema elementFormDefault="qualified" targetNamespace="http://org/apache/axis2/jaxws/test/SOAP12" 
+        xmlns="http://www.w3.org/2001/XMLSchema" 
+        xmlns:impl="http://org/apache/axis2/jaxws/test/SOAP12" 
+        xmlns:intf="http://org/apache/axis2/jaxws/test/SOAP12" 
+        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+
+   <element name="echoString">
+    <complexType>
+     <sequence>
+      <element name="input" nillable="true" type="xsd:string"/>
+     </sequence>
+    </complexType>
+   </element>
+   <element name="echoStringResponse">
+    <complexType>
+     <sequence>
+      <element name="echoStringReturn" nillable="true" type="xsd:string"/>
+     </sequence>
+    </complexType>
+   </element>
+   
+   <!--
+   <element name="echoStringRequest">
+    <complexType>
+     <sequence>
+      <element name="echoStringInput" nillable="true" type="xsd:string"/>
+     </sequence>
+    </complexType>
+   </element>
+   -->
+        </schema>
+ </wsdl:types>
+
+   <wsdl:message name="echoStringResponse">
+
+      <wsdl:part element="impl:echoStringResponse" name="parameters"/>
+
+   </wsdl:message>
+
+   <wsdl:message name="echoStringRequest">
+
+      <wsdl:part element="impl:echoString" name="parameters"/>
+
+   </wsdl:message>
+
+   <wsdl:portType name="Echo">
+
+      <wsdl:operation name="echoString">
+
+         <wsdl:input message="impl:echoStringRequest" name="echoStringRequest"/>
+
+         <wsdl:output message="impl:echoStringResponse" name="echoStringResponse"/>
+
+      </wsdl:operation>
+
+   </wsdl:portType>
+
+   <wsdl:binding name="SOAP12Binding" type="impl:Echo">
+
+      <wsdlsoap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
+
+      <wsdl:operation name="echoString">
+
+         <wsdlsoap12:operation soapAction=""/>
+
+         <wsdl:input name="echoStringRequest">
+
+            <wsdlsoap12:body use="literal"/>
+
+         </wsdl:input>
+
+         <wsdl:output name="echoStringResponse">
+
+            <wsdlsoap12:body use="literal"/>
+
+         </wsdl:output>
+
+      </wsdl:operation>
+
+   </wsdl:binding>
+
+   <wsdl:service name="SOAP12Service">
+
+      <wsdl:port binding="impl:SOAP12Binding" name="SOAP12Port">
+
+         <wsdlsoap12:address location="http://localhost:9080/axis2/services/SOAP12Service"/>
+
+      </wsdl:port>
+
+   </wsdl:service>
+
+</wsdl:definitions>
