### Eclipse Workspace Patch 1.0
#P axis2_os_committer_tree_022210
Index: modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(working copy)
@@ -22,6 +22,7 @@
 
 import org.apache.axis2.client.ServiceClient;
 import org.apache.axis2.description.AxisService;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
 import org.apache.axis2.jaxws.description.builder.DescriptionBuilderComposite;
 import org.apache.axis2.jaxws.description.xml.handler.HandlerChainsType;
 
@@ -31,6 +32,7 @@
 import javax.xml.ws.soap.SOAPBinding;
 
 import java.util.List;
+import java.util.Set;
 
 /**
  * An EndpointDescription corresponds to a particular Service Implementation. It can correspond to
@@ -198,7 +200,7 @@
      * @param name
      * @return
      */
-    public boolean addRequiredBinding(QName name);
+    public boolean addRequiredBinding(WSDLValidatorElement element);
     
     /**
      * Returns a list of all known bindings that should be supported based
@@ -206,7 +208,7 @@
      * 
      * @return
      */
-    public List getRequiredBindings();
+    public Set<WSDLValidatorElement> getRequiredBindings();
     
     /**
      * Return the DescriptionBuilderComposite, if any, used to build this service description.
Index: modules/metadata/src/org/apache/axis2/jaxws/server/config/RespectBindingConfigurator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/server/config/RespectBindingConfigurator.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/server/config/RespectBindingConfigurator.java	(working copy)
@@ -19,24 +19,37 @@
 
 package org.apache.axis2.jaxws.server.config;
 
-import org.apache.axis2.jaxws.description.EndpointDescription;
-import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
-import org.apache.axis2.jaxws.description.EndpointDescriptionWSDL;
-import org.apache.axis2.jaxws.feature.ServerConfigurator;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 import javax.wsdl.Binding;
+import javax.wsdl.BindingFault;
+import javax.wsdl.BindingInput;
+import javax.wsdl.BindingOperation;
+import javax.wsdl.BindingOutput;
+import javax.wsdl.WSDLElement;
 import javax.wsdl.extensions.ExtensibilityElement;
 import javax.wsdl.extensions.UnknownExtensibilityElement;
 import javax.wsdl.extensions.soap.SOAPBinding;
 import javax.wsdl.extensions.soap12.SOAP12Binding;
+import javax.xml.namespace.QName;
 import javax.xml.ws.RespectBinding;
 import javax.xml.ws.RespectBindingFeature;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement.State;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
+import org.apache.axis2.jaxws.description.EndpointDescriptionWSDL;
+import org.apache.axis2.jaxws.feature.ServerConfigurator;
+import org.apache.axis2.jaxws.util.WSDLExtensionUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * An implementation of the <code>ServerConfigurator</code> interface that will
@@ -66,58 +79,15 @@
             // have the "required" flag set to true.
             EndpointDescriptionWSDL edw = (EndpointDescriptionWSDL) endpointDescription;
             Binding bnd = edw.getWSDLBinding();
-            if (bnd != null) {
-                List l = bnd.getExtensibilityElements();
-                if (l == null || l.size() == 0) {
-                    if (log.isDebugEnabled()) {
-                        log.debug("No extensibility elements found.");
-                    }
-                }
-                else {
-                    if (log.isDebugEnabled()) {
-                        log.debug("Checking list of " + l.size() + " extensibility elements for required bindings.");
-                    }
-                    
-                    Iterator i = l.iterator();
-                    List unusedElements = new ArrayList();
-                    while (i.hasNext()) {
-                        ExtensibilityElement e = (ExtensibilityElement) i.next();
-                        if (e instanceof SOAPBinding || e instanceof SOAP12Binding)
-                            continue;
-                        
-                        if (e instanceof UnknownExtensibilityElement) {
-                            UnknownExtensibilityElement ue = (UnknownExtensibilityElement) e;
-                            String reqd = ue.getElement().getAttribute("required");
-                            if (reqd.equals("true") || reqd.equals("TRUE")) {
-                                if (log.isDebugEnabled()) {
-                                    log.debug("Found a required element: " + e.getElementType());
-                                }
-                                endpointDescription.addRequiredBinding(e.getElementType());
-                            }
-                            else {
-                                unusedElements.add(e.getElementType());
-                            }
-                        }
-                        else {
-                            if (e.getRequired() != null && e.getRequired()) {
-                                if (log.isDebugEnabled()) {
-                                    log.debug("Found a required element: " + e.getElementType());
-                                }
-                                endpointDescription.addRequiredBinding(e.getElementType());
-                            }
-                            else {
-                                unusedElements.add(e.getElementType());
-                            }                            
-                        }
-
-                    }
-                    
-                    if (log.isDebugEnabled()) {
-                        log.debug("The following extensibility elements were found, but were not required.");
-                        for (int n = 0; n < unusedElements.size(); ++n)
-                            log.debug("[" + i + "] - " + unusedElements.get(n));
-                    }
-                }
+            Set<WSDLValidatorElement> requiredExtension = endpointDescription.getRequiredBindings();
+            List<QName> unusedExtensions = new ArrayList<QName>();
+            //invoke the search algorithm.
+            WSDLExtensionUtils.search(bnd, requiredExtension, unusedExtensions);
+                   
+            if (log.isDebugEnabled()) {
+                log.debug("The following extensibility elements were found, but were not required.");
+                for (int n = 0; n < unusedExtensions.size(); ++n)
+                    log.debug("[" + (n + 1) + "] - " + unusedExtensions.get(n));
             }
         }
         else {
@@ -126,7 +96,6 @@
             }
         }
     }
-    
     /*
      * (non-Javadoc)
      * @see org.apache.axis2.jaxws.feature.ServerConfigurator#supports(java.lang.String)
Index: modules/jaxws/test-resources/wsdl/wspolicySample.wsdl
===================================================================
--- modules/jaxws/test-resources/wsdl/wspolicySample.wsdl	(revision 0)
+++ modules/jaxws/test-resources/wsdl/wspolicySample.wsdl	(revision 0)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wsdl11:definitions name="StockQuote"
+	targetNamespace="http://www.example.com/stock/binding" xmlns:tns="http://www.example.com/stock/binding"
+	xmlns:fab="http://www.example.com/stock" xmlns:rmp="http://docs.oasis-open.org/ws-rx/wsrmp/200702"
+	xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
+	xmlns:wsdl11="http://schemas.xmlsoap.org/wsdl/" xmlns:wsoap12="http://schemas.xmlsoap.org/wsdl/soap12/"
+	xmlns:wsp="http://www.w3.org/ns/ws-policy"
+	xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
+	
+	<wsp:Policy wsu:Id="RmPolicy">
+		<rmp:RMAssertion>
+			<wsp:Policy />
+		</rmp:RMAssertion>
+	</wsp:Policy>
+	<wsp:Policy wsu:Id="X509EndpointPolicy">
+		<sp:AsymmetricBinding>
+			<wsp:Policy>
+				<!-- Details omitted for readability -->
+				<sp:IncludeTimestamp />
+				<sp:OnlySignEntireHeadersAndBody />
+			</wsp:Policy>
+		</sp:AsymmetricBinding>
+	</wsp:Policy>
+	<wsp:Policy wsu:Id="SecureMessagePolicy">
+		<sp:SignedParts>
+			<sp:Body />
+		</sp:SignedParts>
+		<sp:EncryptedParts>
+			<sp:Body />
+		</sp:EncryptedParts>
+	</wsp:Policy>
+	
+	<wsdl11:import namespace="http://www.example.com/stock"
+		location="stock.wsdl" />
+	
+	
+	<wsdl11:binding name="StockQuoteSoapBinding" type="fab:Quote">
+		<wsoap12:binding style="document"
+			transport="http://schemas.xmlsoap.org/soap/http" />
+		<wsp:PolicyReference URI="#RmPolicy"
+			wsdl11:required="true" />
+		<wsp:PolicyReference URI="#X509EndpointPolicy"
+			wsdl11:required="true" />
+		<wsdl11:operation name="GetLastTradePrice">
+			<wsoap12:operation
+				soapAction="http://www.example.com/stock/Quote/GetLastTradePriceRequest" />
+			<wsdl11:input>
+				<wsoap12:body use="literal" />
+				<wsp:PolicyReference URI="#SecureMessagePolicy"
+					wsdl11:required="true" />
+			</wsdl11:input>
+			<wsdl11:output>
+				<wsoap12:body use="literal" />
+				<wsp:PolicyReference URI="#SecureMessagePolicy"
+					wsdl11:required="true" />
+			</wsdl11:output>
+		</wsdl11:operation>
+	</wsdl11:binding>
+		<wsdl11:service name="StockQuoteService">
+		<wsdl11:port binding="tns:StockQuoteSoapBinding" name="Quote">
+			<wsoap12:address
+				location="http://@HOST@:@PORT@/RespectBinding/StockQuoteService" />
+		</wsdl11:port>
+	</wsdl11:service>
+</wsdl11:definitions>
Index: modules/metadata/src/org/apache/axis2/jaxws/description/DescriptionFactory.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/DescriptionFactory.java	(working copy)
@@ -493,6 +493,36 @@
              HashMap<String, DescriptionBuilderComposite> dbcMap,ConfigurationContext configContext) {
          return DescriptionFactoryImpl.createServiceDescriptionFromDBCMap(dbcMap, configContext);
     }
+    
+    /**
+     * Create a full ServiceDescription hierarchy on the SERVER side for EACH service implementation
+     * entry in the DescriptionBuilderComposite (DBC) map.  Note that the associated SERVER side
+     * Axis description objects are also created.  To create a single ServiceDescription hierarchy
+     * for a single service implementation class, use the factory method that takes a single class
+     * and returns a single ServiceDescription.
+     * <p/>
+     * A service implementation DBC entry is one that: (1) Is a class and not an interface (2)
+     * Carries a WebService or WebServiceProvider annotation.
+     * <p/>
+     * A DBC represents the information found in the service implementation class.  There will be
+     * other DBC entries in the map for classes and interfaces associated with the service
+     * implementation, such as super classes, super interfaces, fault classes, and such.
+     * <p/>
+     * Note that map may contain > 1 service implementation DBC.  A full ServiceDescriptionhierarchy
+     * will be created for each service implementation DBC entry.
+     * <p/>
+     * Note that each ServiceDescription will have exactly one EndpointDescription corresponding to
+     * each service implementation.
+     *
+     * @param dbcMap A HashMap keyed on class name with a value for the DBC for that classname
+     * @param configContext ConfigurationContext used to get WSDL Definition configuration parameters.
+     * @param isValid 
+     * @return A List of ServiceDescriptions with the associated SERVER side hierarchy created.
+     */
+    public static List<ServiceDescription> createServiceDescriptionFromDBCMap(
+        HashMap<String, DescriptionBuilderComposite> dbcMap,ConfigurationContext configContext, boolean performVaidation) {
+        return DescriptionFactoryImpl.createServiceDescriptionFromDBCMap(dbcMap, configContext, performVaidation);
+    }
 
     /**
      * Create a full ServiceDescription hierarchy on the SERVER side for a single service
Index: modules/jaxws/test-resources/xsd/extension.xsd
===================================================================
--- modules/jaxws/test-resources/xsd/extension.xsd	(revision 0)
+++ modules/jaxws/test-resources/xsd/extension.xsd	(revision 0)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema elementFormDefault="qualified"
+	targetNamespace="http://extension.RespectBinding.jaxws22" xmlns:tns="http://extension.RespectBinding.jaxws22"
+	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
+
+	<xs:import namespace="http://schemas.xmlsoap.org/wsdl/"
+		schemaLocation="http://schemas.xmlsoap.org/wsdl/" />
+
+	<!-- extension Element -->
+	<!--
+		My Binding Extension Element imports wsdl ExtensibilityElement Schema
+		The web services tooling will generate appropriate java objects for
+		this schema definition. Note that MyBinding is a custom binding that
+		will be added to wsdl:binding and is not understood by Websphere. if
+		wsdl:binding uses MyBinding and marks it required=true any request to
+		this endpoint will fail if RespectBinding is enabled. The request will
+		be accepted and processed by the server if and only if the server
+		understands this customer binding.
+	-->
+	<!-- Making copy of same element so we can use it in different sections of
+	wsdl binding for test cases.
+	 -->
+	<xs:element name="rootBinding">
+		<xs:complexType>
+			<xs:complexContent>
+				<xs:extension base="wsdl:tExtensibilityElement">
+					<xs:sequence />
+					<xs:attribute name="uri" type="xs:anyURI" use="required" />
+				</xs:extension>
+			</xs:complexContent>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="opBinding">
+		<xs:complexType>
+			<xs:complexContent>
+				<xs:extension base="wsdl:tExtensibilityElement">
+					<xs:sequence />
+					<xs:attribute name="uri" type="xs:anyURI" use="required" />
+				</xs:extension>
+			</xs:complexContent>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="inputBinding">
+		<xs:complexType>
+			<xs:complexContent>
+				<xs:extension base="wsdl:tExtensibilityElement">
+					<xs:sequence />
+					<xs:attribute name="uri" type="xs:anyURI" use="required" />
+				</xs:extension>
+			</xs:complexContent>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="outputBinding">
+		<xs:complexType>
+			<xs:complexContent>
+				<xs:extension base="wsdl:tExtensibilityElement">
+					<xs:sequence />
+					<xs:attribute name="uri" type="xs:anyURI" use="required" />
+				</xs:extension>
+			</xs:complexContent>
+		</xs:complexType>
+	</xs:element>
+	<xs:element name="faultBinding">
+		<xs:complexType>
+			<xs:complexContent>
+				<xs:extension base="wsdl:tExtensibilityElement">
+					<xs:sequence />
+					<xs:attribute name="uri" type="xs:anyURI" use="required" />
+				</xs:extension>
+			</xs:complexContent>
+		</xs:complexType>
+	</xs:element>
+</xs:schema>
\ No newline at end of file
Index: modules/jaxws/test-resources/wsdl/RespectBinding.wsdl
===================================================================
--- modules/jaxws/test-resources/wsdl/RespectBinding.wsdl	(revision 0)
+++ modules/jaxws/test-resources/wsdl/RespectBinding.wsdl	(revision 0)
@@ -0,0 +1,100 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wsdl:definitions name="AddNumbers" targetNamespace="http://RespectBinding.jaxws22" xmlns:ns1="http://extension.RespectBinding.jaxws22" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://RespectBinding.jaxws22" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+	<wsdl:types>
+		<xsd:schema elementFormDefault="qualified" targetNamespace="http://RespectBinding.jaxws22" xmlns="http://www.w3.org/2001/XMLSchema">
+			
+			<xsd:import namespace="http://extension.RespectBinding.jaxws22" schemaLocation="../xsd/extension.xsd"/>
+			    
+			<element name="addNumbersResponse">
+				<complexType>
+					<sequence>
+						<element name="return" type="xsd:int"/>
+					</sequence>
+				</complexType>
+			</element>
+
+			<element name="addNumbers">
+				<complexType>
+					<sequence>
+						<element name="arg0" type="xsd:int"/>
+						<element name="arg1" type="xsd:int"/>
+					</sequence>
+				</complexType>
+			</element>
+
+			<element name="headerPart0">
+				<complexType>
+					<sequence>
+						<element name="headerType" type="xsd:string"/>
+					</sequence>
+				</complexType>
+			</element>
+
+			<element name="headerPart1">
+				<complexType>
+					<sequence>
+						<element name="headerType" type="xsd:string"/>
+					</sequence>
+				</complexType>
+			</element>
+			
+			<element name="AddNumbersFault">
+				<complexType>
+					<sequence>
+						<element name="faultInfo" type="xsd:string" />
+						<element name="message" type="xsd:string" />
+					</sequence>
+				</complexType>
+			</element>
+		</xsd:schema>
+	</wsdl:types>
+
+	<wsdl:message name="addNumbers">
+		<wsdl:part element="tns:addNumbers" name="parameters"/>
+		<wsdl:part element="tns:headerPart1" name="header1"/>
+	</wsdl:message>
+
+	<wsdl:message name="addNumbersResponse">
+		<wsdl:part element="tns:addNumbersResponse" name="result"/>
+	</wsdl:message>
+	
+	<wsdl:message name="addNumbersFault">
+		<wsdl:part name="AddNumbersFault" element="tns:AddNumbersFault" />
+	</wsdl:message>
+
+	<wsdl:portType name="AddNumbersPortType">
+		<wsdl:operation name="addNumbers" parameterOrder="parameters header1">
+			<wsdl:input message="tns:addNumbers"/>
+			<wsdl:output message="tns:addNumbersResponse"/>
+			<wsdl:fault name="addNumbersFault" message="tns:addNumbersFault" />
+		</wsdl:operation>
+	</wsdl:portType>
+
+	<wsdl:binding name="AddNumbersBinding" type="tns:AddNumbersPortType">
+		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
+		<ns1:rootBinding uri="http://test/extension" required="true"/> 
+		<wsdl:operation name="addNumbers">
+			<ns1:opBinding uri="http://test/extension" required="true"/> 
+			<soap:operation soapAction=""/>
+			<wsdl:input>
+				<ns1:inputBinding uri="http://test/extension" required="true"/> 
+				<soap:body parts="parameters" use="literal"/>	
+				<soap:header message="tns:addNumbers" part="header1" use="literal"/>	
+			</wsdl:input>
+			<wsdl:output>
+				<ns1:outputBinding uri="http://test/extension" required="true"/> 
+				<soap:body use="literal"/>
+			</wsdl:output>
+			<wsdl:fault name="addNumbersFault">
+				<ns1:faultBinding uri="http://test/extension" required="true"/> 
+				<soap:fault name="addNumbersFault" use="literal" />
+			</wsdl:fault>
+		</wsdl:operation>
+	</wsdl:binding>
+	
+	<wsdl:service name="AddNumbersService">
+		<wsdl:port binding="tns:AddNumbersBinding" name="AddNumbersPort">
+			<soap:address location="http://@HOST@:@PORT@/RespectBindingFAT/AddNumbersService"/>
+		</wsdl:port>
+	</wsdl:service>
+</wsdl:definitions>
\ No newline at end of file
Index: modules/metadata/src/org/apache/axis2/jaxws/description/validator/EndpointDescriptionValidator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/validator/EndpointDescriptionValidator.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/validator/EndpointDescriptionValidator.java	(working copy)
@@ -19,27 +19,28 @@
 
 package org.apache.axis2.jaxws.description.validator;
 
+import java.util.Set;
+
+import javax.wsdl.Definition;
+import javax.wsdl.Port;
+import javax.wsdl.Service;
+import javax.xml.namespace.QName;
+import javax.xml.ws.http.HTTPBinding;
+import javax.xml.ws.soap.SOAPBinding;
+
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement.State;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
 import org.apache.axis2.jaxws.description.EndpointDescriptionWSDL;
 import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
+import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
 import org.apache.axis2.jaxws.description.builder.MDQConstants;
 import org.apache.axis2.jaxws.description.impl.DescriptionUtils;
 import org.apache.axis2.jaxws.i18n.Messages;
+import org.apache.axis2.jaxws.util.WSDLExtensionValidatorUtil;
 
-import javax.wsdl.Port;
-import javax.wsdl.Service;
-import javax.xml.namespace.QName;
-import javax.xml.ws.WebServiceFeature;
-import javax.xml.ws.http.HTTPBinding;
-import javax.xml.ws.soap.AddressingFeature;
-import javax.xml.ws.soap.SOAPBinding;
-import javax.xml.ws.spi.WebServiceFeatureAnnotation;
-
-import java.lang.annotation.Annotation;
-import java.util.Iterator;
-import java.util.List;
-
 /**
  * 
  */
@@ -54,8 +55,9 @@
         endpointDescWSDL = (EndpointDescriptionWSDL)endpointDesc;
     }
 
-    public boolean validate() {
-
+    @Override
+    public boolean validate(boolean performValidation) {
+       
         if (getValidationLevel() == ValidationLevel.OFF) {
             return VALID;
         }
@@ -69,18 +71,23 @@
             if (!validateWSDLBindingType()) {
                 return INVALID;
             }
-            
-            if (!validateRespectBinding()) {
-                return INVALID;
-            }
         }
-
+        //Perform this validation only if performValidaiton is marked true.
+        //RespectBinding Validation should happen on Server and client.
+        if (!validateRespectBinding(performValidation)) {
+            return INVALID;
+        }
+        
         if (!validateEndpointInterface()) {
             return INVALID;
         }
         return VALID;
     }
 
+    public boolean validate() {
+        return validate(false);
+    }
+
     private boolean validateWSDLBindingType() {
         boolean isBindingValid = false;
         
@@ -217,59 +224,66 @@
     /*
      * If the @RespectBinding annotation is present, then we must also have a WSDL 
      */
-    private boolean validateRespectBinding() {
+    private boolean validateRespectBinding(boolean performValidation) {
+        //if we don't have to perform validation then return true.
+        if(!performValidation){
+            return Validator.VALID;
+        }
         // If a WSDL with a valid <wsdl:port> was present, then the WSDL is considered
         // fully specified.  Without that, the @RespectBinding annotation is invalid.
         if (endpointDesc.respectBinding()) {
             String wsdlLocation = null;
-            if (!endpointDesc.isProviderBased()) {
-                wsdlLocation = endpointDescJava.getAnnoWebServiceWSDLLocation();
+            if(endpointDesc.getServiceDescription().isServerSide()){
+                if (!endpointDesc.isProviderBased()) {
+                    wsdlLocation = endpointDescJava.getAnnoWebServiceWSDLLocation();
+                }
+                else {
+                    wsdlLocation = endpointDescJava.getAnnoWebServiceProvider().wsdlLocation();
+                }
+                
+                if (wsdlLocation == null || wsdlLocation.length() == 0) {
+                    addValidationFailure(this, "Annotation @RespectBinding requires that a WSDL file be specified.");    
+                    return Validator.INVALID;
+                }
             }
-            else {
-                wsdlLocation = endpointDescJava.getAnnoWebServiceProvider().wsdlLocation();
-            }
             
-            if (wsdlLocation == null || wsdlLocation.length() == 0) {
-                addValidationFailure(this, "Annotation @RespectBinding requires that a WSDL file be specified.");    
-                return Validator.INVALID;
-            }
-            
             // We will validate the configured bindings based on their mapping
             // to a known WebServiceFeature element.  If there is not a WebServiceFeature
             // annotation for a given binding, a validation error will be returned.
-            List required = endpointDesc.getRequiredBindings();
-            if (required.size() > 0) {
-                Iterator i = required.iterator();
-                while (i.hasNext()) {
-                    QName name = (QName) i.next();
-                    String featureName = getFeatureForBinding(name);
-                    if (featureName != null && featureName.length() > 0) {
-                        EndpointDescriptionJava edj = (EndpointDescriptionJava) endpointDesc;
-                        Annotation anno = edj.getAnnoFeature(featureName);
-                        WebServiceFeatureAnnotation feature = getFeatureFromAnnotation(anno);
-                        
-                        if (feature == null) {
-                            addValidationFailure(this, "Annotation @RespectBinding was enabled, but the " +
-                                        "corresponding feature " + featureName + " was not enabled.");
-                            return Validator.INVALID;                            
-                        }
-                    }
-                    else {
-                       addValidationFailure(this, "Annotation @RespectBinding was enabled, but extensibility element " +
-                           name + " was not recognized.");
-                       return Validator.INVALID;
-                    }                    
+            Set<WSDLValidatorElement> extensionSet = endpointDesc.getRequiredBindings();
+            Definition wsdlDefinition = endpointDescWSDL.getWSDLDefinition();
+            AxisConfiguration axisConfiguration = endpointDesc.getServiceDescription().getAxisConfigContext().getAxisConfiguration();
+            
+            //This call will update the extensionSet with extension elements that are undersood by engine.
+            WSDLExtensionValidatorUtil.performValidation(axisConfiguration , extensionSet, wsdlDefinition, endpointDesc);
+            
+            //lets check here if there are any extension calls that fail validation.
+            WSDLValidatorElement[] elements = extensionSet.toArray(new WSDLValidatorElement[0]);
+            for(WSDLValidatorElement element:elements) {
+                State state = element.getState();
+                if(state  == State.NOT_SUPPORTED){
+                    QName type = element.getExtensionElement().getElementType();
+                    addValidationFailure(this, "Annotation @RespectBinding was enabled, but the " +
+                        "Extension Element " + type  + " is not supported.");
+                    return Validator.INVALID;  
                 }
-                 
+                if(state == State.NOT_RECOGNIZED){
+                    QName type = element.getExtensionElement().getElementType();
+                    addValidationFailure(this, "Annotation @RespectBinding was enabled, but the " +
+                        "Extension Element " + type  + " is not Recognized.");
+                    return Validator.INVALID;  
+                }  
+                if(state == State.ERROR){
+                    QName type = element.getExtensionElement().getElementType();
+                    addValidationFailure(this, "Annotation @RespectBinding was enabled, but following " +
+                        "Error occured while processing the Extension Element " + type  + " "+element.getErrorMessage());
+                    return Validator.INVALID;  
+                }   
             }
-        }        
+         }        
         return Validator.VALID;
     }
     
-    private WebServiceFeatureAnnotation getFeatureFromAnnotation(Annotation a) {
-        return a.annotationType().getAnnotation(WebServiceFeatureAnnotation.class);
-    }
-    
     private static String bindingHumanReadableDescription(String ns) {
         if (SOAPBinding.SOAP11HTTP_BINDING.equals(ns)) {
             return "SOAP 1.1 HTTP Binding";
@@ -293,13 +307,4 @@
             return "Unknown Binding";
         }
     }
-    
-    private static String getFeatureForBinding(QName name) {
-        if (name.equals(new QName("http://www.w3.org/2006/05/addressing/wsdl", "UsingAddressing"))) {
-            return AddressingFeature.ID;
-        }
-        else {
-            return null;
-        }
-    }
 }
Index: modules/metadata/src/org/apache/axis2/jaxws/description/validator/ServiceDescriptionValidator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/validator/ServiceDescriptionValidator.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/validator/ServiceDescriptionValidator.java	(working copy)
@@ -49,25 +49,30 @@
      * @return true if the ServiceDescription is valid
      */
     public boolean validate() {
+        return validate(false);
+    }
+
+    @Override
+    public boolean validate(boolean performValidation) {
         if (getValidationLevel() == ValidationLevel.OFF) {
             return VALID;
         }
 
-        if (!validateEndpointDescriptions()) {
+        if (!validateEndpointDescriptions(performValidation)) {
             return INVALID;
         }
 
         return VALID;
     }
 
-    private boolean validateEndpointDescriptions() {
+    private boolean validateEndpointDescriptions(boolean performValidation) {
         boolean areAllValid = true;
         // Validate all the Endpoints that were created under this Service Description
         Collection<EndpointDescription> endpointDescs = serviceDesc.getEndpointDescriptions_AsCollection();
         for (EndpointDescription endpointDesc:endpointDescs) {
             EndpointDescriptionValidator endpointValidator = new EndpointDescriptionValidator(endpointDesc);
 
-            boolean isEndpointValid = endpointValidator.validate();
+            boolean isEndpointValid = endpointValidator.validate(performValidation);
             if (!isEndpointValid) {
                 addValidationFailure(endpointValidator, "Endpoint failed validation");
                 areAllValid = false;
Index: modules/jaxws/test-resources/wsdl/stock.wsdl
===================================================================
--- modules/jaxws/test-resources/wsdl/stock.wsdl	(revision 0)
+++ modules/jaxws/test-resources/wsdl/stock.wsdl	(revision 0)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wsdl11:definitions name="stock"
+	targetNamespace="http://www.example.com/stock" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
+	xmlns:wsoap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="http://www.example.com/stock"
+	xmlns:wsdl11="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+
+	<wsdl11:types>
+		<xsd:schema elementFormDefault="qualified"
+			targetNamespace="http://www.example.com/stock" xmlns="http://www.w3.org/2001/XMLSchema">
+			<element name="GetLastTradePriceResponse">
+				<complexType>
+					<sequence>
+						<element name="return" type="xsd:int" />
+					</sequence>
+				</complexType>
+			</element>
+
+			<element name="GetLastTradePrice">
+				<complexType>
+					<sequence>
+						<element name="arg0" type="xsd:string" />
+					</sequence>
+				</complexType>
+			</element>
+		</xsd:schema>
+	</wsdl11:types>
+
+	<wsdl11:message name="GetLastTradePrice">
+		<wsdl11:part element="tns:GetLastTradePrice" name="symbol" />
+	</wsdl11:message>
+
+	<wsdl11:message name="GetLastTradePriceResponse">
+		<wsdl11:part element="tns:GetLastTradePriceResponse" name="result" />
+	</wsdl11:message>
+
+	<wsdl11:portType name="Quote">
+		<wsdl11:operation name="GetLastTradePrice">
+			<wsdl11:input message="tns:GetLastTradePrice" />
+			<wsdl11:output message="tns:GetLastTradePriceResponse" />
+		</wsdl11:operation>
+	</wsdl11:portType>
+
+
+</wsdl11:definitions>
\ No newline at end of file
Index: modules/metadata/src/org/apache/axis2/jaxws/description/validator/Validator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/validator/Validator.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/validator/Validator.java	(working copy)
@@ -36,6 +36,22 @@
     private ValidationLevel validationLevel = ValidationLevel.FULL;
 
     abstract public boolean validate();
+    
+    /**
+     * This validate method gives us flexibility to bypass a validation from set of
+     * validation that we need to perform.
+     * For example we may skip RespectBinding Validation if this flag is set to
+     * false.
+     * performVaidation = false - Means validation can be bypassed.
+     * performVaidation = true - Means validation cannot be bypassed.
+     * @param performVaidation - When performVaidation is false we will bypass validation 
+     * @return
+     */
+    protected boolean validate(boolean performVaidation){
+        //override the implementation where necessary.
+        //return validation successful here. 
+        return true;
+    }
 
     void addValidationFailure(Validator failingValidator, String message) {
         validationFailures.add(failingValidator, message);
Index: modules/metadata/src/org/apache/axis2/jaxws/util/WSDLExtensionValidatorUtil.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/WSDLExtensionValidatorUtil.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/WSDLExtensionValidatorUtil.java	(revision 0)
@@ -0,0 +1,133 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.jaxws.util;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.jaxws.common.config.WSDLExtensionValidator;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.util.LinkedList;
+import java.util.List;
+import java.util.ListIterator;
+import java.util.Set;
+
+import javax.wsdl.Definition;
+
+/**
+ * This is a utility class to make it easier/cleaner for the JAX-WS code
+ * to invoke the WSDLExtensionValidators.
+ */
+public class WSDLExtensionValidatorUtil
+{
+  private static final Log log = LogFactory.getLog(WSDLExtensionValidatorUtil.class);
+  private static final boolean debug = log.isDebugEnabled();
+ 
+  /**
+   * Register a new WSDLExtensionValidator
+   *
+   * @param configurationContext
+   * @param validator
+   */
+  public static void addWSDLExtensionValidator(ConfigurationContext configurationContext,
+                                               WSDLExtensionValidator validator)
+  throws AxisFault {
+      AxisConfiguration axisConfiguration = configurationContext.getAxisConfiguration();
+      addWSDLExtensionValidator(axisConfiguration, validator);
+  }
+
+  /**
+   * Register a new WSDLExtensionValidator.
+   *
+   * @param axisConfiguration
+   * @param validator
+   */
+    public static void addWSDLExtensionValidator(AxisConfiguration axisConfiguration, WSDLExtensionValidator validator) throws AxisFault {
+        Parameter param = axisConfiguration.getParameter(Constants.WSDL_EXTENSION_VALIDATOR_LIST_ID);
+
+        if (param == null) {
+            param = new Parameter(Constants.WSDL_EXTENSION_VALIDATOR_LIST_ID, new LinkedList());
+            axisConfiguration.addParameter(param);
+        }
+
+        List validatorList = (List) param.getValue();
+        validatorList.add(validator);
+
+        if (debug) {
+            log.debug("Registered WSDLExtensionValidator [" + validator + "] with AxisConfiguration: " + axisConfiguration);
+        }
+    }
+
+  /**
+   * Activate any registered WSDLExtensionValidators to perform the validation
+   * of...
+   *
+   * @param wsdlExtensionValidatorListID The name of the parameter in the
+   *                                     AxisConfiguration that contains
+   *                                     the list of validators.
+   * @param msgContext
+   * @throws AxisFault
+   */
+    public static void performValidation(AxisConfiguration axisConfiguration, Set<WSDLValidatorElement> extensionSet, Definition wsdlDefinition,
+    EndpointDescription endpointDescription) {
+        if (debug) {
+            log.debug("Entered performValidation(AxisConfiguration, Set<WSDLValidatorElement>, Definition, EndpointDescription)");
+            log.debug("axisConfiguration=" + axisConfiguration);
+        }
+        
+        if (axisConfiguration == null) {
+            if (debug) {
+                log.debug("The AxisConfiguration was null, so we can't fetch any validators");
+            }
+            return;
+        }
+
+        if ((extensionSet == null) || (extensionSet.isEmpty())) {
+            if (debug) {
+                log.debug("There were no extensions to validate");
+            }
+            return;
+        }
+
+        Parameter param = axisConfiguration.getParameter(Constants.WSDL_EXTENSION_VALIDATOR_LIST_ID);
+
+        if (param != null) {
+            List validatorList = (List) param.getValue();
+            ListIterator wsdlExtensionValidators = validatorList.listIterator();
+            while (wsdlExtensionValidators.hasNext()) {
+                WSDLExtensionValidator wev = (WSDLExtensionValidator) wsdlExtensionValidators.next();
+                if (debug) {
+                    log.debug("Calling validate() on WSDLExtensionValidator: " + wev);
+                }
+                
+                wev.validate(extensionSet, wsdlDefinition, endpointDescription);
+                
+                if (debug) {
+                    log.debug("Returned from WSDLExtensionValidator: " + wev);
+                }
+            }
+        }
+    }
+}
Index: modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescriptionWSDL.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescriptionWSDL.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescriptionWSDL.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.axis2.jaxws.util.Constants;
 
 import javax.wsdl.Binding;
+import javax.wsdl.Definition;
 import javax.wsdl.Port;
 import javax.wsdl.Service;
 import javax.xml.namespace.QName;
@@ -43,6 +44,7 @@
     public static final QName SOAP_12_ADDRESS_ELEMENT =
             new QName(Constants.URI_WSDL_SOAP12, "address");
 
+    public Definition getWSDLDefinition();
     public Service getWSDLService();
 
     public Port getWSDLPort();
Index: modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(working copy)
@@ -36,6 +36,7 @@
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
 import org.apache.axis2.jaxws.description.EndpointDescriptionWSDL;
@@ -87,6 +88,7 @@
 import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -186,7 +188,7 @@
     
     // ANNOTATION: @RespectBinding
     private Boolean respectBinding = false;
-    private List requiredBindings;
+    private Set<WSDLValidatorElement> requiredBindings = new HashSet<WSDLValidatorElement>();
     
     private Integer portCompositeIndex = null;
     
@@ -1661,16 +1663,11 @@
     }
 
 
-    public boolean addRequiredBinding(QName name) {
-        if (requiredBindings == null)
-            requiredBindings = new ArrayList();
-
-        return requiredBindings.add(name);
+    public boolean addRequiredBinding(WSDLValidatorElement element) {
+      return requiredBindings.add(element);
     }
 
-    public List getRequiredBindings() {
-        if (requiredBindings == null)
-            requiredBindings = new ArrayList();
+    public Set<WSDLValidatorElement> getRequiredBindings() {
         return requiredBindings;
     }
 
@@ -1732,7 +1729,7 @@
         }   
     }
     
-    private Definition getWSDLDefinition() {
+    public Definition getWSDLDefinition() {
         return ((ServiceDescriptionWSDL)getServiceDescription()).getWSDLDefinition();
     }
 
Index: modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -202,6 +202,8 @@
 endpointDescriptionErr6=Either WebService or WebServiceProvider annotation must be present on {0}
 endpointDescriptionErr7=Both WebService or WebServiceProvider annotations cannot be presenton {0}
 endpointDescriptionErr8=Can't create SEI class:
+RespectBindingConfiguratorErr1=Client side RespectBindingConfiguration failed, EndpointDescription was NULL.
+RespectBindingConfiguratorErr2=Client side RespectBindingConfiguration failed, EndpointDescriptionWSDL was NULL.
 operationDescriptionErr1=OperationDescription: Unable to add parameters to AxisOperation
 updateWithSEIErr1=Can not update an SEI on a dynamic port.  PortQName: {0}
 updateWithSEIErr2=EndpointDescription.updateWithSEI was passed a null SEI.  PortQName: {0}
Index: modules/metadata/test/org/apache/axis2/jaxws/description/feature/RespectBindingFeatureTests.java
===================================================================
--- modules/metadata/test/org/apache/axis2/jaxws/description/feature/RespectBindingFeatureTests.java	(revision 931259)
+++ modules/metadata/test/org/apache/axis2/jaxws/description/feature/RespectBindingFeatureTests.java	(working copy)
@@ -20,12 +20,17 @@
 package org.apache.axis2.jaxws.description.feature;
 
 import junit.framework.TestCase;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.jaxws.common.config.AddressingWSDLExtensionValidator;
 import org.apache.axis2.jaxws.description.DescriptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.description.builder.DescriptionBuilderComposite;
 import org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter;
 import org.apache.axis2.jaxws.util.WSDL4JWrapper;
+import org.apache.axis2.jaxws.util.WSDLExtensionValidatorUtil;
+import org.apache.axis2.util.JavaUtils;
 
 import javax.jws.WebService;
 import javax.xml.namespace.QName;
@@ -68,7 +73,7 @@
         
         List<ServiceDescription> sdList = null;
         try {
-            sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map);
+            sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map, null, true);
         }
         catch (Exception e) {
             // An exception is expected.
@@ -89,7 +94,7 @@
         composite.setwsdlURL(wsdlUrl);
         composite.setWsdlDefinition(wrapper.getDefinition());
         
-        List<ServiceDescription> sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map);
+        List<ServiceDescription> sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map, null, true);
         ServiceDescription sd = sdList.get(0);
         
         EndpointDescription ed = sd.getEndpointDescription(new QName(ns, disabledServicePortName));
@@ -113,7 +118,7 @@
         
         List<ServiceDescription> sdList = null;
         try {
-            sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map);
+            sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map, null, true);
         }
         catch (Exception e) {
             // An exception is expected.
@@ -128,15 +133,31 @@
         
         DescriptionBuilderComposite composite = map.get(CompleteService.class.getName());
         
+        
+        //Register 
         URL wsdlUrl = new URL("file:./" + wsdlLocation);
         WSDL4JWrapper wrapper = new WSDL4JWrapper(wsdlUrl, false, 0);
         
         composite.setwsdlURL(wsdlUrl);
         composite.setWsdlDefinition(wrapper.getDefinition());
+        ConfigurationContext configCtx = null;
         
-        List<ServiceDescription> sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map);
+        //Create ConfigContext here, we need it so we can register the WSDLAddressingExtensionValditor.
+        try{
+            List<ServiceDescription> sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map, null, false);
+            ServiceDescription sd = sdList.get(0);
+            sd.getAxisConfigContext();
+            //Register Addressing WSDL Extensions
+            configCtx = sd.getAxisConfigContext();
+            WSDLExtensionValidatorUtil.addWSDLExtensionValidator(configCtx, new AddressingWSDLExtensionValidator());
+        }catch(Exception e){
+            String stack = JavaUtils.callStackToString();
+            fail(e.getMessage() + " \n stack trace = "+stack);
+        }
+        
+        //Create ServiceDescription
+        List<ServiceDescription> sdList = DescriptionFactory.createServiceDescriptionFromDBCMap(map, configCtx, true);
         ServiceDescription sd = sdList.get(0);
-        
         EndpointDescription ed = sd.getEndpointDescription(new QName(ns, completeServicePortName));
         assertTrue("The EndpointDescription should not be null.", ed != null);
 
Index: modules/metadata/src/org/apache/axis2/jaxws/common/config/WSDLExtensionValidator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/common/config/WSDLExtensionValidator.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/common/config/WSDLExtensionValidator.java	(revision 0)
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.jaxws.common.config;
+
+
+import java.util.Set;
+import javax.wsdl.Definition;
+
+import org.apache.axis2.jaxws.description.EndpointDescription;
+
+
+/**
+ * 
+ * An implementation of the <code>WSDLExtensionValidator</code> will perform validation
+ * on required=true wsdl extensibility elements.
+ * The RespectBindingConfigurator will collect all the required=true extensions from wsdl these
+ * set of extensions will then have to be validated by WSDLExtensionValidator to check if jax-ws 
+ * runtime can process these required extension. The job of WSDLExtensionValidator is to perform
+ * these validation.
+ */
+
+public interface WSDLExtensionValidator {
+    /**
+     * Performs validation of input extensionSets from RespectBindingConfigurator.
+     * @param extensionSet - Set of found required=true extensions from wsdl, read WSDLValidatorElement object definition.
+     * @param wsdlDefinition - a wsdl definition instance.
+     * @param endpointDesc - EndpointDescription that describes JAX-WS Endpoint definition.
+     */
+    public void validate(Set<WSDLValidatorElement> extensionSet, Definition wsdlDefinition, EndpointDescription endpointDesc);
+}
Index: modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(revision 931598)
+++ modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.description.validator.EndpointDescriptionValidator;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.marshaller.factory.MethodMarshallerFactory;
 import org.apache.axis2.jaxws.message.Message;
@@ -39,6 +40,7 @@
 import org.apache.axis2.jaxws.spi.Constants;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 import org.apache.axis2.jaxws.spi.migrator.ApplicationContextMigratorUtil;
+import org.apache.axis2.jaxws.util.WSDLExtensionUtils;
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -200,6 +202,23 @@
                 request.setProperty(org.apache.axis2.Constants.Configuration.MTOM_THRESHOLD, 
                         new Integer(threshold));
             }
+            if (((org.apache.axis2.jaxws.binding.SOAPBinding)bnd).isRespectBindingEnabled()) {
+                //lets invoke Utility to configure RespectBinding.
+                EndpointDescription endpointDescription = getEndpointDescription();
+                endpointDescription.setRespectBinding(true);
+                WSDLExtensionUtils.processExtensions(endpointDescription);
+                //We have build up set of extensions from wsdl
+                //let go ahead and validate these extensions now.
+                EndpointDescriptionValidator endpointValidator = new EndpointDescriptionValidator(endpointDescription);
+                 
+                boolean isEndpointValid = endpointValidator.validate(true);
+                //throw Exception if extensions are not understood by Engine.
+                if (!isEndpointValid) {
+                    String msg = Messages.getMessage("endpointDescriptionValidationErrors",
+                                                     endpointValidator.toString());
+                    throw ExceptionFactory.makeWebServiceException(msg);
+                }
+            }
         }
         
         /*
Index: modules/metadata/src/org/apache/axis2/jaxws/description/impl/DescriptionFactoryImpl.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/impl/DescriptionFactoryImpl.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/impl/DescriptionFactoryImpl.java	(working copy)
@@ -228,12 +228,12 @@
         }
         return serviceDesc;
     }
-
+    
     /** @see org.apache.axis2.jaxws.description.DescriptionFactory#createServiceDescriptionFromDBCMap(HashMap) */
     public static List<ServiceDescription> createServiceDescriptionFromDBCMap(
-            HashMap<String, DescriptionBuilderComposite> dbcMap, ConfigurationContext configContext) {
+            HashMap<String, DescriptionBuilderComposite> dbcMap, ConfigurationContext configContext, boolean performVaidation) {
         if (log.isDebugEnabled()) {
-            log.debug("createServiceDescriptionFromDBCMap(Hashmap<String,DescriptionBuilderComposite>,ConfigurationContext " );
+            log.debug("createServiceDescriptionFromDBCMap(Hashmap<String,DescriptionBuilderComposite>,ConfigurationContext,boolean isValid " );
         }
 
         List<ServiceDescription> serviceDescriptionList = new ArrayList<ServiceDescription>();
@@ -242,7 +242,6 @@
             DescriptionBuilderComposite serviceImplComposite = nameIter.next();
             if (isImpl(serviceImplComposite)) {
                 // process this impl class
-                
                 // the implementation class represented by this DBC represents a single wsdl:service 
                 Set<QName> sQNames = serviceImplComposite.getServiceQNames();
                 if(sQNames == null
@@ -256,7 +255,7 @@
                                                                                            dbcMap, serviceImplComposite, configContext);
                     ServiceDescriptionValidator validator =
                         new ServiceDescriptionValidator(serviceDescription);
-                    if (validator.validate()) {
+                    if (validator.validate(performVaidation)) {
                         serviceDescriptionList.add(serviceDescription);
                         if (log.isDebugEnabled()) {
                             log.debug("Service Description created from DescriptionComposite: " +
@@ -286,7 +285,7 @@
                                                                                                sQName);
                         ServiceDescriptionValidator validator =
                             new ServiceDescriptionValidator(serviceDescription);
-                        if (validator.validate()) {
+                        if (validator.validate(performVaidation)) {
                             serviceDescriptionList.add(serviceDescription);
                             if (log.isDebugEnabled()) {
                                 log.debug("Service Description created from DescriptionComposite: " +
@@ -318,6 +317,16 @@
         return serviceDescriptionList;
     }
 
+    /** @see org.apache.axis2.jaxws.description.DescriptionFactory#createServiceDescriptionFromDBCMap(HashMap) */
+    public static List<ServiceDescription> createServiceDescriptionFromDBCMap(
+            HashMap<String, DescriptionBuilderComposite> dbcMap, ConfigurationContext configContext) {
+        if (log.isDebugEnabled()) {
+            log.debug("createServiceDescriptionFromDBCMap(Hashmap<String,DescriptionBuilderComposite>,ConfigurationContext " );
+        }
+        return createServiceDescriptionFromDBCMap(dbcMap, configContext, false);
+        
+    }
+
     /**
      * @see org.apache.axis2.jaxws.description.DescriptionFactory#updateEndpoint(ServiceDescription,
      *      Class, QName, org.apache.axis2.jaxws.description.DescriptionFactory.UpdateType)
Index: modules/jaxws/test/org/apache/axis2/jaxws/respectbinding/WSDLBindingsTest.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/respectbinding/WSDLBindingsTest.java	(revision 0)
+++ modules/jaxws/test/org/apache/axis2/jaxws/respectbinding/WSDLBindingsTest.java	(revision 0)
@@ -0,0 +1,247 @@
+package org.apache.axis2.jaxws.respectbinding;
+
+import java.io.File;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.jws.WebService;
+import javax.xml.namespace.QName;
+import javax.xml.ws.RespectBinding;
+import javax.xml.ws.RespectBindingFeature;
+import javax.xml.ws.Service;
+
+import junit.framework.TestCase;
+
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
+import org.apache.axis2.jaxws.description.DescriptionFactory;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.description.DescriptionFactory.UpdateType;
+import org.apache.axis2.jaxws.description.builder.DescriptionBuilderComposite;
+import org.apache.axis2.jaxws.description.builder.MDQConstants;
+import org.apache.axis2.jaxws.description.builder.RespectBindingAnnot;
+import org.apache.axis2.jaxws.feature.ServerFramework;
+import org.apache.axis2.jaxws.server.config.RespectBindingConfigurator;
+import org.apache.axis2.jaxws.spi.ServiceDelegate;
+
+
+
+public class WSDLBindingsTest extends TestCase{
+    private final static String namespaceURI="http://RespectBinding.jaxws22";
+    private final static String serviceName="AddNumbersService";
+    private final static String portName = "AddNumbersPort";
+    private final static String wsdl = "RespectBinding.wsdl";
+
+    private final static String policySample = "wspolicySample.wsdl";
+    private final static String policySampleURI="http://www.example.com/stock/binding";
+    private final static String policyServiceName="StockQuoteService";
+    private final static String policyPortName = "Quote";
+
+    /**
+     * This test does the following
+     * 1) Defines RespectBindingAnnotation with enabled=true
+     * 2) Fakes creation of an EndpointDescription with RespectBinding
+     * 3) Invokes RespectBindingConfigurator.
+     * 4) Checks for all Extensibility Element definition in wsdl:binding .
+     * 5) fails if it does not find expected elements in bindings.
+     */
+    
+    public void testExtenisbilityElementAtBinding() throws Exception{
+        QName serviceQName = new QName(namespaceURI, serviceName);
+        URL wsdlUrl = getWsdlURL(wsdl);
+        assertNotNull(wsdl);
+
+        DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
+
+        Map<String, List<Annotation>> map = new HashMap<String, List<Annotation>>();
+        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
+
+        RespectBindingAnnot wsFeature = new RespectBindingAnnot();
+        // Define RespectBinding and set as enabled
+        wsFeature.setEnabled(true);
+        wsFeatures.add(wsFeature);
+
+        map.put(AddNumbersPortTypeSEI.class.getName(), wsFeatures);
+        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);       
+        ServiceDelegate.setServiceMetadata(serviceDBC);
+        try{
+            //create service with wsdlurl.
+            Service service = Service.create(wsdlUrl, serviceQName);
+            assertNotNull("Service is null",service);
+
+            //Fetch Service Delegate so we can read EndpointDescription.
+            ServiceDelegate sd = getDelegate(service);
+            assertNotNull("ServiceDelegate is null", sd);
+
+            ServiceDescription serviceDesc = sd.getServiceDescription();
+            assertNotNull("ServiceDescription is null", serviceDesc);
+
+            //Create EndpointDescription
+            DescriptionFactory.updateEndpoint(serviceDesc, AddNumbersPortTypeSEI.class, new QName(namespaceURI, portName), UpdateType.GET_PORT);
+
+            //Read EndpointDescription
+            EndpointDescription ed = serviceDesc.getEndpointDescription(new QName(namespaceURI, portName));
+            assertNotNull("EndpointDescription is null", ed);
+
+            //Use RespectBindingConfigurator to read extensibility element in wsdlBindings.
+            RespectBindingConfigurator rbc = new RespectBindingConfigurator();
+            //Mock Object Server Framework.
+            ServerFramework sf = new ServerFramework();
+            Annotation a = wsFeature;
+            sf.addConfigurator(RespectBindingFeature.ID, rbc);
+            sf.addAnnotation(a);
+            //lets hang the RespectBinding annotation to the EndpointDefinition
+            addAnnotation(ed, sf);           
+            rbc.configure(ed);
+            Set<WSDLValidatorElement> elements = ed.getRequiredBindings();
+            assertNotNull("Set of WSDLValidatorElement was null", elements);
+            assertEquals("Expecting 5 Extension elements from wsdl in Set of WSDLValidatorElements but found "+elements.size(),elements.size(), 5);
+
+        }catch(Exception e){
+            e.printStackTrace();
+            fail(e.getMessage());
+        }
+
+    }
+     
+    public void testPolicySetSample() throws Exception{
+        QName serviceQName = new QName(policySampleURI, policyServiceName);
+        URL wsdlUrl = getWsdlURL(policySample);
+        assertNotNull(policySample);
+
+       DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
+
+        Map<String, List<Annotation>> map = new HashMap<String, List<Annotation>>();
+        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
+
+        RespectBindingAnnot wsFeature = new RespectBindingAnnot();
+        // Define RespectBinding and set as enabled
+        wsFeature.setEnabled(true);
+        wsFeatures.add(wsFeature);
+        
+        map.put(StockQuoteSEI.class.getName(), wsFeatures);
+        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);       
+        ServiceDelegate.setServiceMetadata(serviceDBC);
+        try{
+            //create service with wsdlurl.
+            Service service = Service.create(wsdlUrl, serviceQName);
+            assertNotNull("Service is null",service);
+
+            //Fetch Service Delegate so we can read EndpointDescription.
+            ServiceDelegate sd = getDelegate(service);
+            assertNotNull("ServiceDelegate is null", sd);
+            
+            ServiceDescription serviceDesc = sd.getServiceDescription();
+            assertNotNull("ServiceDescription is null", serviceDesc);
+            
+            QName name = new QName(policySampleURI, policyPortName);
+            //Create EndpointDescription
+            DescriptionFactory.updateEndpoint(serviceDesc, StockQuoteSEI.class, name, UpdateType.GET_PORT);
+
+            //Read EndpointDescription
+            EndpointDescription ed = serviceDesc.getEndpointDescription(name);
+            assertNotNull("EndpointDescription is null", ed);
+
+            //Use RespectBindingConfigurator to read extensibility element in wsdlBindings.
+            RespectBindingConfigurator rbc = new RespectBindingConfigurator();
+            //Mock Object Server Framework.
+            ServerFramework sf = new ServerFramework();
+            Annotation a = wsFeature;
+            sf.addConfigurator(RespectBindingFeature.ID, rbc);
+            sf.addAnnotation(a);
+            //lets hang the RespectBinding annotation to the EndpointDefinition
+            addAnnotation(ed, sf);           
+            rbc.configure(ed);
+            Set<WSDLValidatorElement> elements = ed.getRequiredBindings();
+            assertNotNull("Set of WSDLValidatorElement was null", elements);
+            assertEquals("Expecting 4 Extension elements from wsdl in Set of WSDLValidatorElements but found "+elements.size(),elements.size(), 4);
+        }catch(Exception e){
+            e.printStackTrace();
+            fail(e.getMessage());
+        }
+
+    }
+
+    private void addAnnotation(EndpointDescription ed, ServerFramework sf){
+        try {
+            try {
+                Field framework = ed.getClass().getDeclaredField("framework");
+                framework.setAccessible(true);
+                framework.set(ed, sf);
+            } catch (NoSuchFieldException e) {
+                // This may be a generated service subclass, so get the delegate from the superclass
+                Field framework = ed.getClass().getSuperclass().getDeclaredField("framework");
+                framework.setAccessible(true);
+                framework.set(ed, sf);
+            }
+        } catch (SecurityException e) {
+            throw new RuntimeException(e);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        }catch (NoSuchFieldException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private ServiceDelegate getDelegate(Service service){
+        // Need to get to the private Service._delegate
+        ServiceDelegate returnServiceDelegate = null;
+        try {
+            try {
+                Field serviceDelgateField = service.getClass().getDeclaredField("delegate");
+                serviceDelgateField.setAccessible(true);
+                returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
+            } catch (NoSuchFieldException e) {
+                // This may be a generated service subclass, so get the delegate from the superclass
+                Field serviceDelegateField = service.getClass().getSuperclass().getDeclaredField("delegate");
+                serviceDelegateField.setAccessible(true);
+                returnServiceDelegate = (ServiceDelegate) serviceDelegateField.get(service);
+            } 
+        } catch (SecurityException e) {
+            throw new RuntimeException(e);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException(e);
+        } catch (NoSuchFieldException e) {
+            throw new RuntimeException(e);
+        }
+        return returnServiceDelegate;
+    }
+
+    private URL getWsdlURL(String wsdlFileName) {
+        URL url = null;
+        String wsdlLocation = getWsdlLocation(wsdlFileName);
+        try {
+            File file = new File(wsdlLocation);
+            url = file.toURI().toURL();
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+            fail("Exception converting WSDL file to URL: " + e.toString());
+        }
+        return url;
+    }
+
+    static String getWsdlLocation(String wsdlFileName) {
+        String wsdlLocation = null;
+        String baseDir = System.getProperty("basedir",".");
+        wsdlLocation = baseDir + "/test-resources/wsdl/" + wsdlFileName;
+        return wsdlLocation;
+    }
+
+
+    @WebService(name="AddNumbersPortType", targetNamespace="http://RespectBinding.jaxws22")
+    interface AddNumbersPortTypeSEI {
+        public int sum(int num1, int num2);
+    }
+
+    @WebService(name="StockQuotePortType", targetNamespace="http://www.example.com/stock/binding")
+    interface StockQuoteSEI {
+        public int GetLastTradePrice(String symbol);
+    }
+}
Index: modules/jaxws/src/org/apache/axis2/jaxws/client/config/RespectBindingConfigurator.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/client/config/RespectBindingConfigurator.java	(revision 915040)
+++ modules/jaxws/src/org/apache/axis2/jaxws/client/config/RespectBindingConfigurator.java	(working copy)
@@ -19,25 +19,41 @@
 
 package org.apache.axis2.jaxws.client.config;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+
+import javax.xml.namespace.QName;
+import javax.xml.ws.RespectBindingFeature;
+
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.binding.SOAPBinding;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.validator.EndpointDescriptionValidator;
 import org.apache.axis2.jaxws.feature.ClientConfigurator;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.spi.Binding;
 import org.apache.axis2.jaxws.spi.BindingProvider;
+import org.apache.axis2.jaxws.util.WSDLExtensionUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
-import javax.xml.ws.RespectBindingFeature;
-
 /**
  *
  */
 public class RespectBindingConfigurator implements ClientConfigurator {
-
+    private static final Log log = LogFactory.getLog(RespectBindingConfigurator.class);
     /*
      *  (non-Javadoc)
      * @see org.apache.axis2.jaxws.feature.util.WebServiceFeatureConfigurator#performConfiguration(org.apache.axis2.jaxws.core.MessageContext, org.apache.axis2.jaxws.spi.BindingProvider)
      */
     public void configure(MessageContext messageContext, BindingProvider provider) {
+        if(log.isDebugEnabled()){
+            log.debug("Invoking RespectBindingConfiguration.configure() on client");
+        }
         Binding bnd = (Binding) provider.getBinding();
         RespectBindingFeature respectBindingFeature =
             (RespectBindingFeature) bnd.getFeature(RespectBindingFeature.ID);
@@ -46,9 +62,32 @@
             throw ExceptionFactory.makeWebServiceException(
                  Messages.getMessage("respectBindingNotSpecified"));
         }
-        if (respectBindingFeature.isEnabled()) {
-            //TODO Implementation required.
+        boolean isEnabled = respectBindingFeature.isEnabled();
+        if(isEnabled){
+            if(bnd instanceof SOAPBinding){
+                ((SOAPBinding)bnd).setRespectBindingEnabled(isEnabled);
+            }
+            //Get the wsdl document location, if wsdl is not found throw a WebservicesException.
+            //If wsdl is found, look for wsdl extensions.
+            EndpointDescription endpointDescription = provider.getEndpointDescription();
+            endpointDescription.setRespectBinding(isEnabled);
+            WSDLExtensionUtils.processExtensions(endpointDescription);
+            
+            //We have build up set of extensions from wsdl
+            //let go ahead and validate these extensions now.
+            EndpointDescriptionValidator endpointValidator = new EndpointDescriptionValidator(endpointDescription);
+             
+            boolean isEndpointValid = endpointValidator.validate(true);
+            //throw Exception if extensions are not understood by Engine.
+            if (!isEndpointValid) {
+                String msg = Messages.getMessage("endpointDescriptionValidationErrors",
+                                                 endpointValidator.toString());
+                throw ExceptionFactory.makeWebServiceException(msg);
+            }
         }
+        if(log.isDebugEnabled()){
+            log.debug("Exit from RespectBindingConfiguration.configure() on client.");
+        }
     }
 
     /*
Index: modules/metadata/src/org/apache/axis2/jaxws/common/config/WSDLValidatorElement.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/common/config/WSDLValidatorElement.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/common/config/WSDLValidatorElement.java	(revision 0)
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.jaxws.common.config;
+
+import javax.wsdl.extensions.ExtensibilityElement;
+
+/**
+ * WSDLValidator Element is used to store the state of the WSDL:Binding required=true
+ * Elements.
+ * State can be SUPPORTED, NOT_SUPPORTED, NOT_RECOGNIZED.
+ * NOT_RECOGNIZED - This means JAX-WS runtime does not recoginze this element, this is default behavior.
+ * 
+ * SUPPORTED - This required element is recognized and understood by JAX-WS runtime.
+ * 
+ * NOT_SUPPORTED - This required element is NOT understood by JAX-WS runtime. 
+ * This means that runtime recognize the element, but due to the current config we can't honor it
+ * 
+ * ERROR - There where errors while processing the extension, this state will populate the error 
+ * message field.
+ */
+public class WSDLValidatorElement {
+    private ExtensibilityElement extensionElement = null;
+    private State state = State.NOT_RECOGNIZED;
+    private String errorMessage = "";
+    
+    public ExtensibilityElement getExtensionElement() {
+        return extensionElement;
+    }
+    public void setExtensionElement(ExtensibilityElement extensionElement) {
+        this.extensionElement = extensionElement;
+    }
+    public String getErrorMessage() {
+        return errorMessage;
+    }
+    public void setErrorMessage(String errorMessage) {
+        this.errorMessage = errorMessage;
+    }
+
+    public State getState() {
+        return state;
+    }
+    public void setState(State state) {
+        this.state = state;
+    }
+    
+    public enum State {
+        NOT_RECOGNIZED, 
+        SUPPORTED, 
+        NOT_SUPPORTED,
+        ERROR
+    }
+}
Index: modules/metadata/src/org/apache/axis2/jaxws/util/Constants.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/Constants.java	(revision 931259)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/Constants.java	(working copy)
@@ -39,7 +39,8 @@
     public static String USE_ASYNC_MEP = "org.apache.axis2.jaxws.use.async.mep";
 
     public static final String THREAD_CONTEXT_MIGRATOR_LIST_ID = "JAXWS-ThreadContextMigrator-List";
-
+    public static final String WSDL_EXTENSION_VALIDATOR_LIST_ID = "JAXWS-WSDLExtensionValidator-List";
+    
     public static final String INVOCATION_PATTERN = "org.apache.axis2.jaxws.invocation.pattern";
     
     public static final String METADATA_REGISTRY_CONFIG_FILE = 
Index: modules/metadata/src/org/apache/axis2/jaxws/util/WSDLExtensionUtils.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/WSDLExtensionUtils.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/WSDLExtensionUtils.java	(revision 0)
@@ -0,0 +1,203 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.util;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.wsdl.Binding;
+import javax.wsdl.BindingFault;
+import javax.wsdl.BindingInput;
+import javax.wsdl.BindingOperation;
+import javax.wsdl.BindingOutput;
+import javax.wsdl.WSDLElement;
+import javax.wsdl.extensions.ExtensibilityElement;
+import javax.wsdl.extensions.UnknownExtensibilityElement;
+import javax.wsdl.extensions.soap.SOAPBinding;
+import javax.wsdl.extensions.soap12.SOAP12Binding;
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement;
+import org.apache.axis2.jaxws.common.config.WSDLValidatorElement.State;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionWSDL;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+/**
+ * This utility class stores methods that can be used to fetch extension elements
+ * from wsdl and will be used from RespectBindingConfigurator on Client and Server.
+ */
+public class WSDLExtensionUtils {
+    private static final Log log = LogFactory.getLog(WSDLExtensionUtils.class);
+    /**
+     * This method will search for all wsdl extensibility elements marked as required=true in wsdl:bindings
+     * As per the wsdl 2.2 specification section 2.5 here is how a wsdl:binding is defined:
+     * <wsdl:definitions .... >
+     *      <wsdl:binding name="nmtoken" type="qname"> *
+     *       <-- extensibility element (1) --> *
+     *       <wsdl:operation name="nmtoken"> *
+     *          <-- extensibility element (2) --> *
+     *          <wsdl:input name="nmtoken"? > ?
+     *              <-- extensibility element (3) --> 
+     *          </wsdl:input>
+     *          <wsdl:output name="nmtoken"? > ?
+     *              <-- extensibility element (4) --> *
+     *          </wsdl:output>
+     *          <wsdl:fault name="nmtoken"> *
+     *              <-- extensibility element (5) --> *
+     *          </wsdl:fault>
+     *       </wsdl:operation>
+     *   </wsdl:binding>
+     * </wsdl:definitions>
+     * we will look for wsdl extensions in binding root, wsdl:operation, wsdl:input, wsdl:output and wsdl:fault.
+     * If the extensibility element is defines outside of these sections it will not be picked up by this method.
+     * 
+     * @param wsdlBinding - WSDLBinding Object read from WSDL Definition.
+     * @param set - Set that will be filled with list of required=true extension elements.
+     * @return
+     */
+    public static void search(WSDLElement element, Set<WSDLValidatorElement> set, List<QName> unusedExtensions) {
+        if(log.isDebugEnabled()){
+            log.debug("Start Searching for WSDLExtensions");
+        }
+        if(element == null){
+            return;
+        }
+        //This search method uses a simple BFS technique to search for Extension elements in WSDLBindings.
+        //I will Queue all available WSDLElements starting in wsdl:binding and traverse them looking for 
+        //extensions. Queue will be empty when I have processed everything.
+        //NOTE:Binding, Operation, OperationInput, OperationOutput and OperationFault are all WSDLElements.
+        LinkedList<WSDLElement> queue = new LinkedList<WSDLElement>();
+        queue.offer(element);
+        
+        while(!queue.isEmpty()){
+            WSDLElement wsdlElement = queue.remove();
+            //WSDLElement in Queue could be wsdl Binding, BindingOperations, Input, Output or Fault
+            //Find Extensibility Elements in wsdlElement.
+            processWSDLElement(wsdlElement, set, unusedExtensions);
+            //check if we are dealing with wsdlBinding;
+            //store all BindingOpeations from wsdlBindings
+            if(wsdlElement instanceof Binding){
+                //lets get all operations and add to queue
+                //TODO: WSDLDef API's don't use generics, hence we use Iterator below and type cast.
+                List operations = ((Binding)wsdlElement).getBindingOperations();
+                Iterator iter = operations.iterator();
+                while(iter.hasNext()){
+                    BindingOperation op =(BindingOperation) iter.next();
+                    queue.offer(op);
+                }
+            }
+            //check if we are dealing with Bindingoperations
+            //Store all input, output and faults.
+            if(wsdlElement instanceof BindingOperation){
+                BindingInput bi = ((BindingOperation)wsdlElement).getBindingInput();
+                queue.offer(bi);
+                BindingOutput bo = ((BindingOperation)wsdlElement).getBindingOutput();
+                queue.offer(bo);
+                Map map = ((BindingOperation)wsdlElement).getBindingFaults();
+                Collection c = map.values();
+                Iterator iter = c.iterator();
+                while(iter.hasNext()){
+                    Object o = iter.next();
+                    if(o instanceof BindingFault){
+                        BindingFault bf = (BindingFault)o;
+                        queue.offer(bf);
+                    }
+                }
+            }          
+        }
+        if(log.isDebugEnabled()){
+            log.debug("End Searching for WSDLExtensions");
+        }
+    }
+    
+    private static void processWSDLElement(WSDLElement wsdlElement, Set<WSDLValidatorElement> set, List<QName> unusedExtensions){
+        List list = wsdlElement.getExtensibilityElements();
+        if (list == null || list.size() == 0) {
+            return;
+        }
+        Iterator iter = list.iterator();
+        while (iter.hasNext()) {
+            ExtensibilityElement e = (ExtensibilityElement) iter.next();
+            //TODO in JAX-WS 2.1 Respect Binding implementation we are ignoring
+            //SOAPBinding, review the reason behind this.
+            if (e instanceof SOAPBinding || e instanceof SOAP12Binding)
+                continue;
+
+            if (e instanceof UnknownExtensibilityElement) {              
+                UnknownExtensibilityElement ue = (UnknownExtensibilityElement) e;
+                String reqd = ue.getElement().getAttribute("required");
+                //check if extension element is required.
+                //one can set extension as required two different ways in wsdl
+                //lets check both ways here
+                boolean wsdl_required = e.getRequired() != null && e.getRequired();
+                boolean wsdl_attribute = reqd!=null && reqd.equalsIgnoreCase("true");
+                
+                if (wsdl_attribute || wsdl_required) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Found a required element: " + e.getElementType());
+                    }
+                    WSDLValidatorElement element = new WSDLValidatorElement();
+                    element.setExtensionElement(e);
+                    element.setState(State.NOT_RECOGNIZED);
+                    set.add(element);
+                }
+                else {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Found a NOT required element: " + e.getElementType());
+                    }
+                    unusedExtensions.add(e.getElementType());
+                }
+            }
+        }
+    }
+    
+    public static void processExtensions(EndpointDescription endpointDescription){
+        if(endpointDescription == null){
+            throw ExceptionFactory.makeWebServiceException("RespectBindingConfiguratorErr1");
+        }
+
+        EndpointDescriptionWSDL edw = (EndpointDescriptionWSDL) endpointDescription;
+        if(endpointDescription == null){
+            throw ExceptionFactory.makeWebServiceException("RespectBindingConfiguratorErr2");
+        }
+        javax.wsdl.Binding wsdlBinding = edw.getWSDLBinding();
+        Set<WSDLValidatorElement> set = endpointDescription.getRequiredBindings();
+        if(set.size()>0){
+            //we have already looked for wsdl extension once, no need to 
+            //find them again. WSDL is shared for all serviceDesc artifacts.
+            return;
+        }
+        List<QName> unusedExtensions = new ArrayList<QName>();
+        
+        WSDLExtensionUtils.search(wsdlBinding, set, unusedExtensions);
+        if (log.isDebugEnabled()) {
+            log.debug("The following extensibility elements were found, but were not required.");
+            for (int n = 0; n < unusedExtensions.size(); ++n)
+                log.debug("[" + (n + 1) + "] - " + unusedExtensions.get(n));
+        }           
+        
+    }
+}
Index: modules/metadata/src/org/apache/axis2/jaxws/common/config/AddressingWSDLExtensionValidator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/common/config/AddressingWSDLExtensionValidator.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/common/config/AddressingWSDLExtensionValidator.java	(revision 0)
@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.common.config;
+
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.description.EndpointDescriptionJava;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.lang.annotation.Annotation;
+import java.util.Iterator;
+import java.util.Set;
+
+import javax.wsdl.Definition;
+import javax.wsdl.extensions.ExtensibilityElement;
+import javax.xml.namespace.QName;
+import javax.xml.ws.soap.AddressingFeature;
+import javax.xml.ws.spi.WebServiceFeatureAnnotation;
+
+public class AddressingWSDLExtensionValidator implements WSDLExtensionValidator
+{
+  private static final Log log = LogFactory.getLog(AddressingWSDLExtensionValidator.class);
+  private static final boolean debug = log.isDebugEnabled();
+
+  /**
+   * Performs validation of input extensionSets from RespectBindingConfigurator.
+   * @param extensionSet - Set of found required=true extensions from WSDL, read WSDLValidatorElement object definition.
+   * @param wsdlDefinition - a WSDL definition instance.
+   * @param endpointDesc - EndpointDescription that describes JAX-WS Endpoint definition.
+   */
+  public void validate(Set<WSDLValidatorElement> extensionSet, Definition wsdlDefinition, EndpointDescription endpointDesc)
+  {
+    if (debug) {
+      log.debug("Looking for WSDL extension elements to validate");
+    }
+    
+    if (extensionSet.isEmpty()) {
+      if (debug) {
+        log.debug("No WSDL extension elements found to validate");
+      }
+      return;
+    }
+    
+    if (debug) {
+      log.debug("Processing WSDL extension elements");
+    }
+    
+    Iterator<WSDLValidatorElement> extensionIterator = extensionSet.iterator();
+    
+    WSDLValidatorElement elementToValidate;
+    while (extensionIterator.hasNext()) {
+      elementToValidate = extensionIterator.next();
+      
+      if (elementToValidate.getState() == WSDLValidatorElement.State.NOT_RECOGNIZED)
+      {
+        ExtensibilityElement ee = elementToValidate.getExtensionElement();
+        QName name = (ee!=null)?ee.getElementType():null;
+        if ((name!=null) && (name.equals(new QName("http://www.w3.org/2006/05/addressing/wsdl", "UsingAddressing")))) {
+          
+          if (debug) {
+            log.debug("Found WSDL extension element {http://www.w3.org/2006/05/addressing/wsdl,UsingAddressing} -- validating");
+          }
+          
+          EndpointDescriptionJava edj = (EndpointDescriptionJava) endpointDesc;
+          Annotation anno = edj.getAnnoFeature(AddressingFeature.ID);
+          if (getFeatureFromAnnotation(anno) == null) {
+            if (debug) {
+              log.debug("Enabling addressing annotation was not found, so this extension element is not supported");
+            }
+            elementToValidate.setState(WSDLValidatorElement.State.NOT_SUPPORTED);
+          }
+          else {
+            if (debug) {
+              log.debug("The matching addressing annotation was found, so this extension element is supported");
+            }
+            elementToValidate.setState(WSDLValidatorElement.State.SUPPORTED);
+          }
+        }
+      }
+    }
+  }
+
+  private WebServiceFeatureAnnotation getFeatureFromAnnotation(Annotation a) {
+    return a.annotationType().getAnnotation(WebServiceFeatureAnnotation.class);
+}
+
+
+}
\ No newline at end of file
