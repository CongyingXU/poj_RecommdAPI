Index: modules/kernel/test/org/apache/axis2/addressing/EndpointReferenceTypeTest.java
===================================================================
--- modules/kernel/test/org/apache/axis2/addressing/EndpointReferenceTypeTest.java	(revision 446602)
+++ modules/kernel/test/org/apache/axis2/addressing/EndpointReferenceTypeTest.java	(working copy)
@@ -90,48 +90,4 @@
         EndpointReference epr200408anon = new EndpointReference(AddressingConstants.Submission.WSA_ANONYMOUS_URL);
         assertTrue(epr200408anon.hasAnonymousAddress());
     }
-    
-    public void testToAndFromOM() throws Exception{
-        OMFactory omf = OMAbstractFactory.getOMFactory();
-        OMNamespace ns1 = omf.createOMNamespace("http://uri1","prefix1");
-        OMAttribute attr1 = omf.createOMAttribute("attr1",ns1,"attr1value");
-        OMNamespace ns2 = omf.createOMNamespace("http://uri2","prefix2");
-        OMAttribute attr2 = omf.createOMAttribute("attr2",ns2,"attr2value");
-        endpointReference.addAttribute(attr1);
-        endpointReference.addAttribute(attr2);
-        OMElement md1 = omf.createOMElement("md1", "http://mduri1", "md1prefix"); 
-        OMElement md2 = omf.createOMElement("md2", "http://mduri2", "md2prefix");
-        endpointReference.addMetaData(md1);
-        endpointReference.addMetaData(md2);
-        OMElement ext1 = omf.createOMElement("ext1", "http://exturi1", "ext1prefix"); 
-        OMElement ext2 = omf.createOMElement("ext2", "http://exturi2", "ext2prefix");
-        endpointReference.addExtensibleElement(ext1);
-        endpointReference.addExtensibleElement(ext2);
-        QName rp1Qname = new QName("http://rp1uri","refParm1","rp1prefix");
-        QName rp2Qname = new QName("http://rp2uri","refParm2","rp2prefix");
-        endpointReference.addReferenceParameter(rp1Qname,"rp1");
-        endpointReference.addReferenceParameter(rp2Qname,"rp2");
-        
-        OMElement om = endpointReference.toOM("http://nsurl","localName","prefix");
-        
-        EndpointReference deser = new EndpointReference("");
-        deser.fromOM(om);
-        
-        assertEquals(endpointReference.getAddress(),deser.getAddress());
-        ArrayList attrs = deser.getAttributes();
-        assertEquals(attr1,attrs.get(0));
-        assertEquals(attr2,attrs.get(1));
-        
-        ArrayList metadata = deser.getMetaData();
-        assertEquals(md1, metadata.get(0));
-        assertEquals(md2, metadata.get(1));
-        
-        ArrayList extelts = deser.getExtensibleElements();
-        assertEquals(ext1,extelts.get(0));
-        assertEquals(ext2,extelts.get(1));
-        
-        Map m = deser.getAllReferenceParameters();
-        assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
-        assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
-    }
 }
Index: modules/kernel/src/org/apache/axis2/addressing/EndpointReference.java
===================================================================
--- modules/kernel/src/org/apache/axis2/addressing/EndpointReference.java	(revision 446602)
+++ modules/kernel/src/org/apache/axis2/addressing/EndpointReference.java	(working copy)
@@ -196,10 +196,20 @@
 
     }
 
+    /**
+     * 
+     * @return
+     * @deprecated
+     */
     public String getName() {
         return name;
     }
 
+    /**
+     * 
+     * @param name
+     * @deprecated
+     */
     public void setName(String name) {
         this.name = name;
     }
@@ -214,6 +224,11 @@
         this.referenceParameters = referenceParameters;
     }
 
+    /**
+     * 
+     * @param eprOMElement
+     * @deprecated use {@link org.apache.axis2.addressing.EndpointReferenceHelper#fromOM(OMElement)} instead.
+     */
     public void fromOM(OMElement eprOMElement) {
         setAddress(eprOMElement.getFirstChildWithName(new QName("Address")).getText());
         OMElement refParamElement = eprOMElement.getFirstChildWithName(new QName(AddressingConstants.EPR_REFERENCE_PARAMETERS));
@@ -260,6 +275,15 @@
         }
     }
 
+    /**
+     * 
+     * @param nsurl
+     * @param localName
+     * @param prefix
+     * @return
+     * @throws AxisFault
+     * @deprecated  use {@link org.apache.axis2.addressing.EndpointReferenceHelper#toOM(EndpointReference, QName, String)} instead.
+     */
     public OMElement toOM(String nsurl, String localName, String prefix) throws AxisFault {
         OMFactory fac = OMAbstractFactory.getOMFactory();
         if (prefix != null) {
Index: modules/kernel/src/org/apache/axis2/engine/AxisEngine.java
===================================================================
--- modules/kernel/src/org/apache/axis2/engine/AxisEngine.java	(revision 446602)
+++ modules/kernel/src/org/apache/axis2/engine/AxisEngine.java	(working copy)
@@ -191,15 +191,10 @@
         }
 
         EndpointReference faultTo = processingContext.getFaultTo();
-        SOAPEnvelope env = processingContext.getEnvelope();
         if (faultTo != null && !doNotSendFaultUsingFaultTo) {
             faultContext.setTo(processingContext.getFaultTo());
-        } else if (env != null && !doNotSendFaultUsingFaultTo && processingContext.isHeaderPresent() && env.getHeader().getFirstChildWithName(new QName("FaultTo")) != null) {
-            OMElement faultToElement = env.getHeader().getFirstChildWithName(new QName("FaultTo"));
-            faultTo = new EndpointReference("");
-            faultTo.fromOM(faultToElement);
-            faultContext.setTo(faultTo);
-        } else if (processingContext.getReplyTo() != null) {
+        }
+        else {
             faultContext.setTo(processingContext.getReplyTo());
         }
         
Index: modules/addressing/test/org/apache/axis2/addressing/EndpointReferenceHelperTest.java
===================================================================
--- modules/addressing/test/org/apache/axis2/addressing/EndpointReferenceHelperTest.java	(revision 0)
+++ modules/addressing/test/org/apache/axis2/addressing/EndpointReferenceHelperTest.java	(revision 0)
@@ -0,0 +1,207 @@
+/*
+* Copyright 2006 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.addressing;
+
+import java.util.ArrayList;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.context.MessageContext;
+
+import junit.framework.TestCase;
+
+public class EndpointReferenceHelperTest extends TestCase {
+
+    public void testToAndFromOMForFinalSpecEPR() throws Exception{
+        String address = "http://ws.apache.org/axis2";
+        EndpointReference epr = new EndpointReference(address);
+        
+        OMFactory omf = OMAbstractFactory.getOMFactory();
+        OMNamespace ns1 = omf.createOMNamespace("http://uri1","prefix1");
+        OMAttribute attr1 = omf.createOMAttribute("attr1",ns1,"attr1value");
+        OMNamespace ns2 = omf.createOMNamespace("http://uri2","prefix2");
+        OMAttribute attr2 = omf.createOMAttribute("attr2",ns2,"attr2value");
+        epr.addAttribute(attr1);
+        epr.addAttribute(attr2);
+        OMElement md1 = omf.createOMElement("md1", "http://mduri1", "md1prefix"); 
+        OMElement md2 = omf.createOMElement("md2", "http://mduri2", "md2prefix");
+        epr.addMetaData(md1);
+        epr.addMetaData(md2);
+        OMElement ext1 = omf.createOMElement("ext1", "http://exturi1", "ext1prefix"); 
+        OMElement ext2 = omf.createOMElement("ext2", "http://exturi2", "ext2prefix");
+        epr.addExtensibleElement(ext1);
+        epr.addExtensibleElement(ext2);
+        QName rp1Qname = new QName("http://rp1uri","refParm1","rp1prefix");
+        QName rp2Qname = new QName("http://rp2uri","refParm2","rp2prefix");
+        epr.addReferenceParameter(rp1Qname,"rp1");
+        epr.addReferenceParameter(rp2Qname,"rp2");
+        
+        OMElement om = EndpointReferenceHelper.toOM(epr, new QName("http://nsurl","localName","prefix"), AddressingConstants.Final.WSA_NAMESPACE);
+        
+        //Test deserialize using fromOM(OMElement)
+        EndpointReference deser = EndpointReferenceHelper.fromOM(om);
+        
+        assertEquals(epr.getAddress(),deser.getAddress());
+        ArrayList attrs = deser.getAttributes();
+        assertEquals(attr1,attrs.get(0));
+        assertEquals(attr2,attrs.get(1));
+        
+        ArrayList metadata = deser.getMetaData();
+        assertEquals(md1, metadata.get(0));
+        assertEquals(md2, metadata.get(1));
+        
+        ArrayList extelts = deser.getExtensibleElements();
+        assertEquals(ext1,extelts.get(0));
+        assertEquals(ext2,extelts.get(1));
+        
+        Map m = deser.getAllReferenceParameters();
+        assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
+        assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
+        
+        //Test deserialize using fromOM(EndpointReference, OMElement, String)
+        deser = new EndpointReference("");
+        EndpointReferenceHelper.fromOM(deser, om, AddressingConstants.Final.WSA_NAMESPACE);
+        
+        assertEquals(epr.getAddress(),deser.getAddress());
+        attrs = deser.getAttributes();
+        assertEquals(attr1,attrs.get(0));
+        assertEquals(attr2,attrs.get(1));
+        
+        metadata = deser.getMetaData();
+        assertEquals(md1, metadata.get(0));
+        assertEquals(md2, metadata.get(1));
+        
+        extelts = deser.getExtensibleElements();
+        assertEquals(ext1,extelts.get(0));
+        assertEquals(ext2,extelts.get(1));
+        
+        m = deser.getAllReferenceParameters();
+        assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
+        assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
+        
+        //Failure test
+        try {
+            deser = new EndpointReference("");
+            EndpointReferenceHelper.fromOM(deser, om, AddressingConstants.Submission.WSA_NAMESPACE);
+            fail("An exception should have been thrown due to failure to locate a wsa:Address field.");
+        }
+        catch (Exception e) {
+            //pass
+        }
+    }
+    
+    public void testToAndFromOMForSubmissionSpecEPR() throws Exception{
+        String address = "http://ws.apache.org/axis2";
+        EndpointReference epr = new EndpointReference(address);
+        
+        OMFactory omf = OMAbstractFactory.getOMFactory();
+        OMNamespace ns1 = omf.createOMNamespace("http://uri1","prefix1");
+        OMAttribute attr1 = omf.createOMAttribute("attr1",ns1,"attr1value");
+        OMNamespace ns2 = omf.createOMNamespace("http://uri2","prefix2");
+        OMAttribute attr2 = omf.createOMAttribute("attr2",ns2,"attr2value");
+        epr.addAttribute(attr1);
+        epr.addAttribute(attr2);
+        OMElement md1 = omf.createOMElement("md1", "http://mduri1", "md1prefix"); 
+        OMElement md2 = omf.createOMElement("md2", "http://mduri2", "md2prefix");
+        epr.addMetaData(md1);
+        epr.addMetaData(md2);
+        OMElement ext1 = omf.createOMElement("ext1", "http://exturi1", "ext1prefix"); 
+        OMElement ext2 = omf.createOMElement("ext2", "http://exturi2", "ext2prefix");
+        epr.addExtensibleElement(ext1);
+        epr.addExtensibleElement(ext2);
+        QName rp1Qname = new QName("http://rp1uri","refParm1","rp1prefix");
+        QName rp2Qname = new QName("http://rp2uri","refParm2","rp2prefix");
+        epr.addReferenceParameter(rp1Qname,"rp1");
+        epr.addReferenceParameter(rp2Qname,"rp2");
+        
+        OMElement om = EndpointReferenceHelper.toOM(epr, new QName("http://nsurl","localName","prefix"), AddressingConstants.Submission.WSA_NAMESPACE);
+        
+        //Add some reference properties.
+        QName p1Qname = new QName("http://p1uri","refProp1","p1prefix");
+        QName p2Qname = new QName("http://p2uri","refProp2","p2prefix");
+        QName qname = new QName(AddressingConstants.Submission.WSA_NAMESPACE, "ReferenceProperties", AddressingConstants.WSA_DEFAULT_PREFIX);
+        OMElement referenceProperties = omf.createOMElement(qname, om);
+        OMElement prop1 = omf.createOMElement(p1Qname, referenceProperties);
+        OMElement prop2 = omf.createOMElement(p2Qname, referenceProperties);
+        prop1.setText("p1");
+        prop2.setText("p2");
+        
+        //Test deserialize using fromOM(OMElement)
+        EndpointReference deser = EndpointReferenceHelper.fromOM(om);
+        
+        assertEquals(epr.getAddress(),deser.getAddress());
+        ArrayList attrs = deser.getAttributes();
+        assertEquals(attr1,attrs.get(0));
+        assertEquals(attr2,attrs.get(1));
+        
+        //Metadata will be lost unless it is saved as an extensibility element.
+        ArrayList metadata = deser.getMetaData();
+        assertNull(metadata);
+        
+        ArrayList extelts = deser.getExtensibleElements();
+        assertEquals(ext1,extelts.get(0));
+        assertEquals(ext2,extelts.get(1));
+        
+        //All reference properties are returned as reference parameters.
+        Map m = deser.getAllReferenceParameters();
+        assertEquals(4, m.size());
+        assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
+        assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
+        assertEquals("p1", ((OMElement)m.get(p1Qname)).getText());
+        assertEquals("p2", ((OMElement)m.get(p2Qname)).getText());
+        
+        //Test deserialize using fromOM(EndpointReference, OMElement, String)
+        deser = new EndpointReference("");
+        EndpointReferenceHelper.fromOM(deser, om, AddressingConstants.Submission.WSA_NAMESPACE);
+        
+        assertEquals(epr.getAddress(),deser.getAddress());
+        attrs = deser.getAttributes();
+        assertEquals(attr1,attrs.get(0));
+        assertEquals(attr2,attrs.get(1));
+        
+        //Metadata will be lost unless it is saved as an extensibility element.
+        metadata = deser.getMetaData();
+        assertNull(metadata);
+        
+        extelts = deser.getExtensibleElements();
+        assertEquals(ext1,extelts.get(0));
+        assertEquals(ext2,extelts.get(1));
+        
+        //All reference properties are returned as reference parameters.
+        m = deser.getAllReferenceParameters();
+        assertEquals(4, m.size());
+        assertEquals("rp1", ((OMElement)m.get(rp1Qname)).getText());
+        assertEquals("rp2", ((OMElement)m.get(rp2Qname)).getText());
+        assertEquals("p1", ((OMElement)m.get(p1Qname)).getText());
+        assertEquals("p2", ((OMElement)m.get(p2Qname)).getText());
+        
+        //Failure test
+        try {
+            deser = new EndpointReference("");
+            EndpointReferenceHelper.fromOM(deser, om, AddressingConstants.Final.WSA_NAMESPACE);
+            fail("An exception should have been thrown due to failure to locate a wsa:Address field.");
+        }
+        catch (Exception e) {
+            //pass
+        }
+    }
+}
Index: modules/addressing/src/org/apache/axis2/addressing/EndpointReferenceHelper.java
===================================================================
--- modules/addressing/src/org/apache/axis2/addressing/EndpointReferenceHelper.java	(revision 0)
+++ modules/addressing/src/org/apache/axis2/addressing/EndpointReferenceHelper.java	(revision 0)
@@ -0,0 +1,283 @@
+/*
+* Copyright 2006 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.addressing;
+
+import java.util.IdentityHashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.OMNode;
+import org.apache.axis2.AxisFault;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * The methods in this class are used to process {@link EndpointReference} objects
+ * according to the rules of the 2005/08 (Final) and 2004/08 (submission) WS-Addressing
+ * specifications.
+ *
+ */
+public class EndpointReferenceHelper {
+
+    private static final Log log = LogFactory.getLog(EndpointReferenceHelper.class);
+
+    private final static Map finalQNames      = new IdentityHashMap();
+    private final static Map submissionQNames = new IdentityHashMap();
+     
+    /**
+     * Populates an endpoint reference based on the <code>OMElement</code> and
+     * WS-Addressing namespace that is passed in. If the string passed in is not
+     * recognized as a valid WS-Addressing namespace then this method behaves as
+     * if http://www.w3.org/2005/08/addressing has been passed in.
+     * 
+     * @param epr an endpoint reference instance to hold the info.
+     * @param eprOMElement an element of endpoint reference type 
+     * @param addressingNamespace the namespace of the WS-Addressing spec to comply with.
+     * @throws AxisFault if unable to locate an address element
+     * @see #fromOM(OMElement)
+     */
+    public static void fromOM(EndpointReference epr, OMElement eprOMElement, String addressingNamespace) throws AxisFault {
+        boolean isFinalAddressingNamespace = false;
+        Map map = null;
+
+        //First pass, identify the addressing namespace.
+        if (AddressingConstants.Submission.WSA_NAMESPACE.equals(addressingNamespace)) {
+            OMElement address = eprOMElement.getFirstChildWithName((QName) submissionQNames.get(AddressingConstants.EPR_ADDRESS));
+            
+            if (address != null) {
+                map = submissionQNames;
+                isFinalAddressingNamespace = false;
+                
+                if (log.isDebugEnabled())
+                    log.debug("fromOM: Found address element for namespace, " + AddressingConstants.Submission.WSA_NAMESPACE);                
+            }
+            else {
+                throw new AxisFault("Unable to locate an address element for the endpoint reference type.");
+            }
+        }
+        else {
+            OMElement address = eprOMElement.getFirstChildWithName((QName) finalQNames.get(AddressingConstants.EPR_ADDRESS));
+            
+            if (address != null) {
+                map = finalQNames;
+                isFinalAddressingNamespace = true;
+                
+                if (log.isDebugEnabled())
+                    log.debug("fromOM: Found address element for namespace, " + AddressingConstants.Final.WSA_NAMESPACE);                
+            }
+            else {
+                throw new AxisFault("Unable to locate an address element for the endpoint reference type.");
+            }
+        }
+        
+        //Second pass, identify the properties.
+        fromOM(epr, eprOMElement, map, isFinalAddressingNamespace);
+    }
+    
+    /**
+     * Populates an endpoint reference based on the <code>OMElement</code> that is
+     * passed in. If the http://schemas.xmlsoap.org/ws/2004/08/addressing namespace
+     * is in effect then any reference properties will be saved as reference parameters.
+     * Regardless of the addressing namespace in effect, any elements present in the
+     * <code>OMElement</code> that are not recognised are saved as extensibility elements.
+     * 
+     * @param eprOMElement an element of endpoint reference type 
+     * @throws AxisFault if unable to locate an address element
+     */
+    public static EndpointReference fromOM(OMElement eprOMElement) throws AxisFault {
+        EndpointReference epr = new EndpointReference("");
+        boolean isFinalAddressingNamespace = false;
+        Map map = null;
+        
+        //First pass, identify the addressing namespace.
+        OMElement address = eprOMElement.getFirstChildWithName((QName) finalQNames.get(AddressingConstants.EPR_ADDRESS));
+        
+        if (address != null) {
+            map = finalQNames;
+            isFinalAddressingNamespace = true;
+            
+            if (log.isDebugEnabled())
+                log.debug("fromOM: Found address element for namespace, " + AddressingConstants.Final.WSA_NAMESPACE);                
+        }
+        else {
+            address = eprOMElement.getFirstChildWithName((QName) submissionQNames.get(AddressingConstants.EPR_ADDRESS));
+            
+            if (address != null) {
+                map = submissionQNames;
+                isFinalAddressingNamespace = false;
+                
+                if (log.isDebugEnabled())
+                    log.debug("fromOM: Found address element for namespace, " + AddressingConstants.Submission.WSA_NAMESPACE);                
+            }
+            else {
+                throw new AxisFault("Unable to locate an address element for the endpoint reference type.");
+            }
+        }
+        
+        //Second pass, identify the properties.
+        fromOM(epr, eprOMElement, map, isFinalAddressingNamespace);
+        
+        return epr;
+    }
+    
+    /**
+     * Creates an <code>OMElement</code> based on the properties of the endpoint
+     * reference. The output may differ based on the addressing namespace that is
+     * in effect when this method is called. If the http://www.w3.org/2005/08/addressing
+     * namespace is in effect, and a metadata property has been defined for the
+     * endpoint reference, then there will be a metadata element to contain the
+     * property in the output. If the http://schemas.xmlsoap.org/ws/2004/08/addressing
+     * namespace is in effect, however, then no metadata element will be included
+     * in the output, even if a metadata property element has been defined.
+     * 
+     * @param epr
+     * @param qname
+     * @param addressingNamespace
+     * @return
+     * @throws AxisFault
+     */
+    public static OMElement toOM(EndpointReference epr, QName qname, String addressingNamespace) throws AxisFault {
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMElement eprElement = null;
+        
+        if (log.isDebugEnabled()) {
+            log.debug("toOM: Endpoint reference, " + epr);
+            log.debug("toOM: Element qname, " + qname);
+            log.debug("toOM: Addressing namespace, " + addressingNamespace);
+        }
+        
+        if (qname.getPrefix() != null) {
+            OMNamespace wrapNs = fac.createOMNamespace(qname.getNamespaceURI(), qname.getPrefix());
+            eprElement = fac.createOMElement(qname.getLocalPart(), wrapNs);
+            
+            OMNamespace wsaNS = fac.createOMNamespace(addressingNamespace, AddressingConstants.WSA_DEFAULT_PREFIX);
+            OMElement addressE = fac.createOMElement(AddressingConstants.EPR_ADDRESS, wsaNS, eprElement);
+            String address = epr.getAddress();
+            addressE.setText(address);
+            
+            List metaData = epr.getMetaData();
+            if (metaData != null && AddressingConstants.Final.WSA_NAMESPACE.equals(addressingNamespace)) {
+                OMElement metadataE = fac.createOMElement(AddressingConstants.Final.WSA_METADATA, wsaNS, eprElement);
+                for (int i = 0, size = metaData.size(); i < size; i++) {
+                    OMNode omNode = (OMNode) metaData.get(i);
+                    metadataE.addChild(omNode);
+                }
+            }
+
+            Map referenceParameters = epr.getAllReferenceParameters();
+            if (referenceParameters != null) {
+                OMElement refParameterElement = fac.createOMElement(AddressingConstants.EPR_REFERENCE_PARAMETERS, wsaNS, eprElement);
+                Iterator iterator = referenceParameters.values().iterator();
+                while (iterator.hasNext()) {
+                    OMNode omNode = (OMNode) iterator.next();
+                    refParameterElement.addChild(omNode);
+                }
+            }
+            
+            List attributes = epr.getAttributes();
+            if (attributes != null) {
+                for (int i = 0, size = attributes.size(); i < size; i++) {
+                    OMAttribute omAttribute = (OMAttribute) attributes.get(i);
+                    eprElement.addAttribute(omAttribute);
+                }
+            }
+            
+            // add xs:any
+            List extensibleElements = epr.getExtensibleElements();
+            if (extensibleElements != null) {
+                for (int i = 0, size = extensibleElements.size(); i < size; i++) {
+                    OMNode omNode = (OMNode) extensibleElements.get(i);
+                    eprElement.addChild(omNode);
+                }
+            }
+        } else {
+            throw new AxisFault("prefix must be specified");
+        }
+        
+        return eprElement;
+    }
+    
+    private static void fromOM(EndpointReference epr, OMElement eprOMElement, Map map, boolean isFinalAddressingNamespace) {
+        Iterator childElements = eprOMElement.getChildElements();
+        
+        while (childElements.hasNext()) {
+            OMElement eprChildElement = (OMElement) childElements.next();
+            QName qname = eprChildElement.getQName();
+            
+            if (map.get(AddressingConstants.EPR_ADDRESS).equals(qname)) {
+                //We need to identify the address element again in order to ensure
+                //that it is not included with the extensibility elements.
+                epr.setAddress(eprChildElement.getText());
+            }
+            else if (map.get(AddressingConstants.EPR_REFERENCE_PARAMETERS).equals(qname)) {
+                Iterator iterator = eprChildElement.getChildElements();
+                while (iterator.hasNext()) {
+                    OMElement element = (OMElement) iterator.next();
+                    epr.addReferenceParameter(element);
+                }
+            }
+            else if (isFinalAddressingNamespace &&
+                    map.get(AddressingConstants.Final.WSA_METADATA).equals(qname)) {
+                Iterator iterator = eprChildElement.getChildElements();
+                while (iterator.hasNext()) {
+                    OMNode node = (OMNode) iterator.next();
+                    epr.addMetaData(node);
+                }
+            }
+            else if (!isFinalAddressingNamespace &&
+                    map.get(AddressingConstants.Submission.EPR_REFERENCE_PROPERTIES).equals(qname)) {
+                // since we have the model for WS-Final, we don't have a place to keep this reference properties.
+                // The only compatible place is reference properties
+                Iterator iterator = eprChildElement.getChildElements();
+                while (iterator.hasNext()) {
+                    OMElement element = (OMElement) iterator.next();
+                    epr.addReferenceParameter(element);
+                }
+            }
+            else {
+                epr.addExtensibleElement(eprChildElement);
+            }
+        }
+
+        Iterator attributes = eprOMElement.getAllAttributes();
+        while (attributes.hasNext()) {
+            OMAttribute attribute = (OMAttribute) attributes.next();
+            epr.addAttribute(attribute);
+        }
+        
+        if (log.isDebugEnabled()) {
+            log.debug("fromOM: Endpoint reference, " + epr);
+        }
+    }
+
+    static {
+        finalQNames.put(AddressingConstants.EPR_ADDRESS, new QName(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.EPR_ADDRESS));
+        finalQNames.put(AddressingConstants.EPR_REFERENCE_PARAMETERS, new QName(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.EPR_REFERENCE_PARAMETERS));
+        finalQNames.put(AddressingConstants.Final.WSA_METADATA, new QName(AddressingConstants.Final.WSA_NAMESPACE, AddressingConstants.Final.WSA_METADATA));
+        
+        submissionQNames.put(AddressingConstants.EPR_ADDRESS, new QName(AddressingConstants.Submission.WSA_NAMESPACE, AddressingConstants.EPR_ADDRESS));
+        submissionQNames.put(AddressingConstants.EPR_REFERENCE_PARAMETERS, new QName(AddressingConstants.Submission.WSA_NAMESPACE, AddressingConstants.EPR_REFERENCE_PARAMETERS));
+        submissionQNames.put(AddressingConstants.Submission.EPR_REFERENCE_PROPERTIES, new QName(AddressingConstants.Submission.WSA_NAMESPACE, AddressingConstants.Submission.EPR_REFERENCE_PROPERTIES));
+    }
+}
Index: modules/savan/project.xml
===================================================================
--- modules/savan/project.xml	(revision 446602)
+++ modules/savan/project.xml	(working copy)
@@ -79,6 +79,13 @@
             <version>${pom.currentVersion}</version>
         </dependency>
         
+        <!-- Following dependency was required due to the EndpointReferenceHelper class-->
+        <dependency>
+            <groupId>axis2</groupId>
+            <artifactId>axis2-addressing</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+        
         <!-- external JARs -->
         <dependency>
             <groupId>commons-logging</groupId>
Index: modules/savan/src/org/apache/savan/eventing/EventingSubscriptionProcessor.java
===================================================================
--- modules/savan/src/org/apache/savan/eventing/EventingSubscriptionProcessor.java	(revision 446602)
+++ modules/savan/src/org/apache/savan/eventing/EventingSubscriptionProcessor.java	(working copy)
@@ -32,6 +32,8 @@
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axiom.soap.SOAPHeader;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.databinding.types.Duration;
@@ -104,9 +106,15 @@
 		
 		OMElement endToElement = subscribeElement.getFirstChildWithName(new QName (EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.EndTo));
 		if (endToElement!=null) {
-			EndpointReference endToEPR = new EndpointReference ("");
-			endToEPR.fromOM(endToElement);
-			
+			EndpointReference endToEPR = null;
+            
+            try {
+                endToEPR = EndpointReferenceHelper.fromOM(endToElement);
+            }
+            catch (AxisFault af) {
+                throw new SavanException(af);
+            }
+            
 			eventingSubscriber.setEndToEPr(endToEPR);
 		}
 		
@@ -118,9 +126,15 @@
 		if (notifyToElement==null)
 			throw new SavanException ("NotifyTo element is null");
 		
-		EndpointReference notifyToEPr = new EndpointReference ("");
-		notifyToEPr.fromOM(notifyToElement);
-		
+		EndpointReference notifyToEPr = null;
+        
+        try {
+            notifyToEPr = EndpointReferenceHelper.fromOM(notifyToElement);
+        }
+        catch (AxisFault af) {    
+            throw new SavanException(af);
+        }
+        
 		OMAttribute deliveryModeAttr = deliveryElement.getAttribute(new QName (EventingConstants.ElementNames.Mode));
 		String deliveryMode = null;
 		if (deliveryModeAttr!=null) {
Index: modules/savan/src/org/apache/savan/eventing/EventingMessageReceiverDeligater.java
===================================================================
--- modules/savan/src/org/apache/savan/eventing/EventingMessageReceiverDeligater.java	(revision 446602)
+++ modules/savan/src/org/apache/savan/eventing/EventingMessageReceiverDeligater.java	(working copy)
@@ -25,6 +25,8 @@
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.databinding.utils.ConverterUtil;
@@ -81,7 +83,7 @@
 		OMElement subscribeResponseElement = factory.createOMElement(EventingConstants.ElementNames.SubscribeResponse,ens);
 		OMElement subscriptionManagerElement = null;
 		try {
-			subscriptionManagerElement = subscriptionManagerEPR.toOM(EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.SubscriptionManager,EventingConstants.EVENTING_PREFIX);
+			subscriptionManagerElement = EndpointReferenceHelper.toOM(subscriptionManagerEPR, new QName(EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.SubscriptionManager,EventingConstants.EVENTING_PREFIX), AddressingConstants.Submission.WSA_NAMESPACE);
 		} catch (AxisFault e) {
 			throw new SavanException (e);
 		}
Index: modules/savan/src/org/apache/savan/eventing/client/EventingClient.java
===================================================================
--- modules/savan/src/org/apache/savan/eventing/client/EventingClient.java	(revision 446602)
+++ modules/savan/src/org/apache/savan/eventing/client/EventingClient.java	(working copy)
@@ -32,6 +32,8 @@
 import org.apache.axiom.soap.SOAPBody;
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.addressing.AddressingConstants;
+import org.apache.axis2.addressing.EndpointReferenceHelper;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.Options;
 import org.apache.axis2.client.ServiceClient;
@@ -187,8 +189,7 @@
 		SubscriptionResponseData data = new SubscriptionResponseData ();
 		
 		OMElement subscriberManagerElement = responseMessagePayload.getFirstChildWithName(new QName (EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.SubscriptionManager));
-		EndpointReference managerEPR = new EndpointReference ("");
-		managerEPR.fromOM(subscriberManagerElement);
+		EndpointReference managerEPR = EndpointReferenceHelper.fromOM(subscriberManagerElement);
 		data.setSubscriptionManager(managerEPR);
 		
 		OMElement expiresElement = responseMessagePayload.getFirstChildWithName(new QName (EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.Expires));
@@ -243,8 +244,7 @@
 		
 		EndpointReference endToEPR = bean.getEndToEPR();
 		if (bean.getEndToEPR()!=null) {
-			//TODO when Axis2 get corrected, use the method which takes an addressing version as a param.
-			OMElement endToElement = endToEPR.toOM(EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.EndTo,EventingConstants.EVENTING_PREFIX);
+			OMElement endToElement = EndpointReferenceHelper.toOM(endToEPR, new QName(EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.EndTo,EventingConstants.EVENTING_PREFIX), AddressingConstants.Submission.WSA_NAMESPACE);
 			subscriptionElement.addChild(endToElement);
 		}
 		
@@ -253,7 +253,7 @@
 			throw new Exception ("Delivery EPR is not set");
 		
 		OMElement deliveryElement = factory.createOMElement(EventingConstants.ElementNames.Delivery,ens);
-		OMElement notifyToElement = deliveryEPR.toOM(EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.NotifyTo,EventingConstants.EVENTING_PREFIX);
+		OMElement notifyToElement = EndpointReferenceHelper.toOM(deliveryEPR, new QName(EventingConstants.EVENTING_NAMESPACE,EventingConstants.ElementNames.NotifyTo,EventingConstants.EVENTING_PREFIX), AddressingConstants.Submission.WSA_NAMESPACE);
 
 		deliveryElement.addChild(notifyToElement);
 		subscriptionElement.addChild(deliveryElement);
