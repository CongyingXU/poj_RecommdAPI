package org.apache.axis2.receivers;

import java.lang.reflect.Method;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPFactory;
import org.apache.axis2.AxisFault;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.description.AxisOperation;
import org.apache.axis2.description.AxisService;
import org.apache.axis2.engine.DependencyManager;
import org.apache.axis2.engine.MessageReceiver;
import org.apache.axis2.i18n.Messages;
import org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver;


public class RawXMLINOutMessageReceiver  extends AbstractInOutSyncMessageReceiver
implements MessageReceiver {

  /**
   * Constructor RawXMLProvider
   */
  public RawXMLINOutMessageReceiver () {
  }

  public Method findOperation(AxisOperation op, Class ImplClass) {
      
  	Method method = null;
    String methodName = op.getName().getLocalPart();
    Method[] methods = ImplClass.getMethods();

    for (int i = 0; i < methods.length; i++) {
        if (methods[i].getName().equals(methodName)) {
            method = methods[i];

            break;
        }
    }

    return method;
  }

  public void invokeBusinessLogic(MessageContext msgContext, MessageContext newmsgContext)
  throws AxisFault {
    try {

        // get the implementation class for the Web Service
        Object obj = getTheImplementationObject(msgContext);

        // find the WebService method
        Class ImplClass = obj.getClass();

        // Inject the Message Context if it is asked for
        DependencyManager.configureBusinessLogicProvider(obj,
                msgContext.getOperationContext());

        AxisOperation opDesc = msgContext.getOperationContext().getAxisOperation();
        Method method = findOperation(opDesc, ImplClass);

        if (method != null) {
            Class[]  parameters = method.getParameterTypes();
            Object[] args;

            if ((parameters == null) || (parameters.length == 0)) {
                args = new Object[0];
            } else if (parameters.length == 1) {
                OMElement omElement = msgContext.getEnvelope().getBody().getFirstElement();
                args = new Object[]{omElement};
            } else {
                throw new AxisFault(Messages.getMessage("rawXmlProivdeIsLimited"));
            }

            OMElement result;
            try {
                result = (OMElement) method.invoke(obj, args);
            } catch (Exception e) {
                throw new AxisFault(e.getMessage());
            }

            AxisService service = msgContext.getAxisService();
            service.getTargetNamespace();
            
            // body can be empty
            if(result != null)
	            result.declareNamespace(service.getTargetNamespace(),
	                    service.getTargetNamespacePrefix());
            
            OMElement bodyContent;

            SOAPFactory fac = getSOAPFactory(msgContext);
            bodyContent = result;

            SOAPEnvelope envelope = fac.getDefaultEnvelope();

            if (bodyContent != null) {
                envelope.getBody().addChild(bodyContent);
            }

            newmsgContext.setEnvelope(envelope);
        } else {
            throw new AxisFault(Messages.getMessage("methodNotImplemented",
                    opDesc.getName().toString()));
        }
    } catch (Exception e) {
        throw AxisFault.makeFault(e);
    }
  }
	

}

