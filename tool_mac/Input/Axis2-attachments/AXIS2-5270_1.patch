Index: modules/parent/pom.xml
===================================================================
--- modules/parent/pom.xml	(revision 1358150)
+++ modules/parent/pom.xml	(working copy)
@@ -89,6 +89,7 @@
         <geronimo.spec.metadata.version>1.1.2</geronimo.spec.metadata.version>
         <geronimo.spec.saaj.version>1.0.1</geronimo.spec.saaj.version>
         <geronimo.spec.jaxws.version>1.0</geronimo.spec.jaxws.version>
+        <google.gson.version>2.1</google.gson.version>
         <httpcore.version>4.2</httpcore.version>
         <httpclient.version>4.2</httpclient.version>
         <intellij.version>5.0</intellij.version>
@@ -581,6 +582,11 @@
                 </exclusions>
             </dependency>
             <dependency>
+                <groupId>com.google.code.gson</groupId>
+                <artifactId>gson</artifactId>
+                <version>${google.gson.version}</version>
+            </dependency>
+            <dependency>
                 <groupId>org.jibx</groupId>
                 <artifactId>jibx-bind</artifactId>
                 <version>${jibx.version}</version>
Index: modules/json/src/org/apache/axis2/json/impl/JsonBuilder.java
===================================================================
--- modules/json/src/org/apache/axis2/json/impl/JsonBuilder.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/impl/JsonBuilder.java	(revision 0)
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.json.impl;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.builder.Builder;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.json.impl.utils.JsonConstant;
+
+import java.io.InputStream;
+
+public class JsonBuilder implements Builder {
+    @Override
+    public OMElement processDocument(InputStream inputStream, String s, MessageContext messageContext) throws AxisFault {
+        messageContext.setProperty(JsonConstant.INPUT_STREAM ,inputStream);
+        messageContext.setProperty(JsonConstant.IS_JSON_STREAM , true);
+        // dummy envelop
+        SOAPFactory soapFactory = OMAbstractFactory.getSOAP11Factory();
+        SOAPEnvelope soapEnvelope = soapFactory.getDefaultEnvelope();
+
+        return soapEnvelope;
+    }
+
+}
Index: modules/json/src/org/apache/axis2/json/impl/utils/JsonConstant.java
===================================================================
--- modules/json/src/org/apache/axis2/json/impl/utils/JsonConstant.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/impl/utils/JsonConstant.java	(revision 0)
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.json.impl.utils;
+
+
+public class JsonConstant {
+
+
+    public static final String RESPONSE = "response";
+
+    public static final String INPUT_STREAM = "inputStream";
+    public static final String RETURN_OBJECT = "returnObject";
+    public static final String RETURN_TYPE = "returnType";
+
+    public static final String IS_JSON_STREAM = "isJsonStream";
+
+}
Index: modules/json/src/org/apache/axis2/json/impl/utils/JsonUtils.java
===================================================================
--- modules/json/src/org/apache/axis2/json/impl/utils/JsonUtils.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/impl/utils/JsonUtils.java	(revision 0)
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.json.impl.utils;
+
+import com.google.gson.Gson;
+import com.google.gson.stream.JsonReader;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+
+public class JsonUtils {
+
+    public static Object invokeServiceClass(InputStream inputStream ,
+                                            Object service,
+                                            Method operation ,
+                                            Class[] paramClasses ,
+                                            int paramCount , String charSetEncoding ) throws InvocationTargetException,
+            IllegalAccessException, IOException  {
+
+        Object[] methodParam = new Object[paramCount];
+        Gson gson = new Gson();
+        String[] argNames = new String[paramCount];
+        JsonReader jsonReader = null;
+
+        jsonReader = new JsonReader(new InputStreamReader(inputStream,charSetEncoding));
+
+        if( ! jsonReader.isLenient()){
+            jsonReader.setLenient(true);
+        }
+        jsonReader.beginObject();
+        String requestMethodName=jsonReader.nextName();     // get request method name from input json stream
+        if (paramCount > 1) {
+            jsonReader.beginArray();
+        }
+        int i = 0;
+        for (Class paramType : paramClasses) {
+            jsonReader.beginObject();
+            argNames[i] = jsonReader.nextName();
+            methodParam[i] = gson.fromJson(jsonReader, paramType);   // gson handle all types well and retuen an object from it
+            jsonReader.endObject();
+            i++;
+        }
+        if (paramCount > 1) {
+            jsonReader.endArray();
+        }
+        jsonReader.endObject();
+
+        return  operation.invoke(service, methodParam);
+
+    }
+
+    public static Method getOpMethod(String methodName, Method[] methodSet) {
+        for (Method method : methodSet) {
+            String mName = method.getName();
+            if (mName.equals(methodName)) {
+                return method;
+            }
+        }
+        return null;
+    }
+
+}
Index: modules/json/src/org/apache/axis2/json/impl/rpc/JsonInOnlyRPCMessageReceiver.java
===================================================================
--- modules/json/src/org/apache/axis2/json/impl/rpc/JsonInOnlyRPCMessageReceiver.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/impl/rpc/JsonInOnlyRPCMessageReceiver.java	(revision 0)
@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.json.impl.rpc;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.json.impl.utils.JsonConstant;
+import org.apache.axis2.json.impl.utils.JsonUtils;
+import org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+public class JsonInOnlyRPCMessageReceiver extends RPCInOnlyMessageReceiver {
+
+    private static Log log = LogFactory.getLog(JsonInOnlyRPCMessageReceiver.class);
+    @Override
+    public void invokeBusinessLogic(MessageContext inMessage) throws AxisFault {
+        InputStream inputStream = (InputStream)inMessage.getProperty(JsonConstant.INPUT_STREAM);
+        if (inputStream != null) {
+            Method method = null;
+            String msg;
+
+            Object serviceObj = getTheImplementationObject(inMessage);
+            Class implClass = serviceObj.getClass();
+            Method[] allmethods =  implClass.getDeclaredMethods();
+            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
+            String operation = op.getName().getLocalPart();
+            method = JsonUtils.getOpMethod(operation, allmethods);
+            Class [] paramClasses = method.getParameterTypes();
+            String charSetEncoding = (String) inMessage.getProperty(Constants.Configuration.CHARACTER_SET_ENCODING);
+            try {
+                int paramCount=paramClasses.length;
+
+                 JsonUtils.invokeServiceClass(inputStream,
+                        serviceObj, method, paramClasses, paramCount, charSetEncoding);
+
+            } catch (IllegalAccessException e) {
+                msg = "Does not have access to " +
+                        "the definition of the specified class, field, method or constructor";
+                log.error(msg, e);
+                throw AxisFault.makeFault(e);
+
+            } catch (InvocationTargetException e) {
+                msg = "Exception occurred while trying to invoke service method " +
+                        (method != null ? method.getName() : "null");
+                log.error(msg, e);
+                throw AxisFault.makeFault(e);
+            } catch (IOException e) {
+                msg = "Exception occur while encording or " +
+                        "access to the input string at the JsonRpcMessageReceiver";
+                log.error(msg, e);
+                throw AxisFault.makeFault(e);
+            }
+        } else{
+            super.invokeBusinessLogic(inMessage);   // call RPCMessageReceiver if inputstream is null
+        }
+    }
+}
Index: modules/json/src/org/apache/axis2/json/impl/rpc/JsonRpcMessageReceiver.java
===================================================================
--- modules/json/src/org/apache/axis2/json/impl/rpc/JsonRpcMessageReceiver.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/impl/rpc/JsonRpcMessageReceiver.java	(revision 0)
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.json.impl.rpc;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.json.impl.utils.JsonConstant;
+import org.apache.axis2.json.impl.utils.JsonUtils;
+import org.apache.axis2.rpc.receivers.RPCMessageReceiver;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+
+public class JsonRpcMessageReceiver extends RPCMessageReceiver {
+
+    private static Log log = LogFactory.getLog(RPCMessageReceiver.class);
+    @Override
+    public void invokeBusinessLogic(MessageContext inMessage, MessageContext outMessage) throws AxisFault {
+        Object tempObj = inMessage.getProperty(JsonConstant.IS_JSON_STREAM);
+        boolean isJsonStream = false;
+        if (tempObj != null) {
+            isJsonStream = Boolean.valueOf(tempObj.toString());
+        }
+
+        if (isJsonStream) {
+            InputStream inputStream = (InputStream) inMessage.getProperty(JsonConstant.INPUT_STREAM);
+            Method method = null;
+            String msg;
+
+            if (inputStream == null) {
+                msg = "Input Stream is null";
+                log.error(msg);
+                throw new AxisFault(msg);
+            }
+
+            Object serviceObj = getTheImplementationObject(inMessage);
+            Class implClass = serviceObj.getClass();
+            Method[] allMethods = implClass.getDeclaredMethods();
+            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
+            String operation = op.getName().getLocalPart();
+            method = JsonUtils.getOpMethod(operation, allMethods);
+            Class[] paramClasses = method.getParameterTypes();
+            String charSetEncoding = (String) inMessage.getProperty(Constants.Configuration.CHARACTER_SET_ENCODING);
+            try {
+                int paramCount = paramClasses.length;
+
+                Object retObj = JsonUtils.invokeServiceClass(inputStream,
+                        serviceObj, method, paramClasses, paramCount, charSetEncoding);
+
+                outMessage.setProperty(JsonConstant.RETURN_OBJECT, retObj);
+                outMessage.setProperty(JsonConstant.RETURN_TYPE, method.getReturnType());
+
+            } catch (IllegalAccessException e) {
+                msg = "Does not have access to " +
+                        "the definition of the specified class, field, method or constructor";
+                log.error(msg, e);
+                throw AxisFault.makeFault(e);
+
+            } catch (InvocationTargetException e) {
+                msg = "Exception occurred while trying to invoke service method " +
+                        (method != null ? method.getName() : "null");
+                log.error(msg, e);
+                throw AxisFault.makeFault(e);
+            } catch (IOException e) {
+                msg = "Exception occur while encording or " +
+                        "access to the input string at the JsonRpcMessageReceiver";
+                log.error(msg, e);
+                throw AxisFault.makeFault(e);
+            }
+        } else {
+            super.invokeBusinessLogic(inMessage, outMessage);   // call RPCMessageReceiver if inputstream is null
+        }
+    }
+
+
+}
Index: modules/json/src/org/apache/axis2/json/impl/JsonFormatter.java
===================================================================
--- modules/json/src/org/apache/axis2/json/impl/JsonFormatter.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/impl/JsonFormatter.java	(revision 0)
@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.json.impl;
+
+import com.google.gson.Gson;
+import com.google.gson.stream.JsonWriter;
+import org.apache.axiom.om.OMOutputFormat;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.json.impl.utils.JsonConstant;
+import org.apache.axis2.transport.MessageFormatter;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Type;
+import java.net.URL;
+
+
+public class JsonFormatter implements MessageFormatter {
+    private static final Log log = LogFactory.getLog(JsonFormatter.class);
+
+    @Override
+    public byte[] getBytes(MessageContext messageContext, OMOutputFormat omOutputFormat) throws AxisFault {
+        return new byte[0];
+    }
+
+    @Override
+    public void writeTo(MessageContext outMsgCtxt, OMOutputFormat omOutputFormat, OutputStream outputStream, boolean b) throws AxisFault {
+        JsonWriter writer = null;
+        String msg;
+
+        try {
+            String charSetEncoding = (String) outMsgCtxt.getProperty(Constants.Configuration.CHARACTER_SET_ENCODING);
+            writer = new JsonWriter(new OutputStreamWriter(outputStream, charSetEncoding ));
+            Gson gson = new Gson();
+            Object retObj = outMsgCtxt.getProperty(JsonConstant.RETURN_OBJECT);
+            writer.beginObject();
+            writer.name(JsonConstant.RESPONSE);
+            Type returnType = (Type) outMsgCtxt.getProperty(JsonConstant.RETURN_TYPE);
+
+            gson.toJson(retObj, returnType, writer);
+            writer.endObject();
+            writer.flush();
+        } catch (UnsupportedEncodingException e) {
+            msg = "Exception occur when try to encode output stream usig  " +
+                    Constants.Configuration.CHARACTER_SET_ENCODING + " charset";
+            log.error(msg , e);
+            throw AxisFault.makeFault(e);
+        } catch (IOException e) {
+            msg = "Exception occur while writting to JsonWriter at the JsonFormatter ";
+            log.error(msg, e);
+            throw AxisFault.makeFault(e);
+        }
+    }
+
+    @Override
+    public String getContentType(MessageContext outMsgCtxt, OMOutputFormat omOutputFormat, String s) {
+        String contentType = (String)outMsgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE);
+        outMsgCtxt.setProperty(Constants.Configuration.CONTENT_TYPE , "application/json-impl");
+        return "application/json-impl";
+    }
+
+    @Override
+    public URL getTargetAddress(MessageContext messageContext, OMOutputFormat omOutputFormat, URL url) throws AxisFault {
+        return null;
+    }
+
+    @Override
+    public String formatSOAPAction(MessageContext messageContext, OMOutputFormat omOutputFormat, String s) {
+        return null;
+    }
+}
Index: modules/json/pom.xml
===================================================================
--- modules/json/pom.xml	(revision 1358150)
+++ modules/json/pom.xml	(working copy)
@@ -65,8 +65,11 @@
             <groupId>${project.groupId}</groupId>
             <artifactId>axis2-adb</artifactId>
             <version>${project.version}</version>
-            <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+        </dependency>
     </dependencies>
     <url>http://axis.apache.org/axis2/java/core/</url>
     <scm>
