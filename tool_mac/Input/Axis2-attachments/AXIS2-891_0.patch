Index: modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingFinalInHandlerTest.java
===================================================================
--- modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingFinalInHandlerTest.java	(revision 422752)
+++ modules/addressing/test/org/apache/axis2/handlers/addressing/AddressingFinalInHandlerTest.java	(working copy)
@@ -168,6 +168,85 @@
         }
     }
     
+    public void testDifferentSoapActionProcessing() {
+        String testfile = "valid-messages/"+versionDirectory+"/soapmessage.xml";
+        MessageContext mc = new MessageContext();
+        
+        try {
+            mc.setSoapAction("http://ws.apache.org/tests/differentAction");
+            basicExtractAddressingInformationFromHeaders(testfile, mc);
+            fail("An AxisFault should have been thrown due to the soapaction being different to the ws-a action.");            
+        }
+        catch (AxisFault af) {
+            //Test passed.
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            log.error(e.getMessage());
+            fail(" An Exception has occured " + e.getMessage());                        
+        }
+    }
+    
+    public void testSameSoapAction() {
+        String testfile = "valid-messages/"+versionDirectory+"/soapmessage.xml";
+        MessageContext mc = new MessageContext();
+        
+        try {
+            mc.setSoapAction("http://ws.apache.org/tests/action");
+            basicExtractAddressingInformationFromHeaders(testfile, mc);
+        }
+        catch (AxisFault af) {
+            af.printStackTrace();
+            log.error(af.getMessage());
+            fail("An unexpected AxisFault was thrown while testing with a soapaction and ws-a action that are the same.");            
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            log.error(e.getMessage());
+            fail(" An Exception has occured " + e.getMessage());                        
+        }        
+    }
+    
+    public void testEmptySoapAction() {
+        String testfile = "valid-messages/"+versionDirectory+"/soapmessage.xml";
+        MessageContext mc = new MessageContext();
+        
+        try {
+            mc.setSoapAction("");
+            basicExtractAddressingInformationFromHeaders(testfile, mc);
+        }
+        catch (AxisFault af) {
+            af.printStackTrace();
+            log.error(af.getMessage());
+            fail("An unexpected AxisFault was thrown while testing with an empty soapaction.");            
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            log.error(e.getMessage());
+            fail(" An Exception has occured " + e.getMessage());                        
+        }
+    }
+    
+    public void testNullSoapAction() {
+        String testfile = "valid-messages/"+versionDirectory+"/soapmessage.xml";
+        MessageContext mc = new MessageContext();
+        
+        try {
+            mc.setSoapAction(null);
+            basicExtractAddressingInformationFromHeaders(testfile, mc);
+        }
+        catch (AxisFault af) {
+            af.printStackTrace();
+            log.error(af.getMessage());
+            fail("An unexpected AxisFault was thrown while testing with a null soapaction.");            
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            log.error(e.getMessage());
+            fail(" An Exception has occured " + e.getMessage());                        
+        }
+    }
+    
     private void assertEPRHasCorrectMetadata(EndpointReference epr){
     	ArrayList metadata = epr.getMetaData();
     	if(metadata != null){
Index: modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java
===================================================================
--- modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java	(revision 422752)
+++ modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java	(working copy)
@@ -144,8 +144,7 @@
                 messageContextOptions.setMessageId(soapHeaderBlock.getText());
                 soapHeaderBlock.setProcessed();
             } else if (WSA_ACTION.equals(soapHeaderBlock.getLocalName()) && !ignoreAction) {
-                messageContextOptions.setAction(soapHeaderBlock.getText());
-                soapHeaderBlock.setProcessed();
+                extractActionInformation(messageContextOptions, soapHeaderBlock, namespace, messageContext);
             } else if (WSA_RELATES_TO.equals(soapHeaderBlock.getLocalName())) {
                 extractRelatesToInformation(soapHeaderBlock, namespace, messageContextOptions);
             }
@@ -266,6 +265,24 @@
         soapHeaderBlock.setProcessed();
 
     }
+    
+    //We assume that any action that already exists in the message context must be the
+    //soapaction. We compare that action to the WS-Addressing action, and if they are
+    //different we throw a fault.
+    private void extractActionInformation(Options messageContextOptions, SOAPHeaderBlock soapHeaderBlock, String addressingNamespace, MessageContext messageContext) throws AxisFault {
+        String soapAction = messageContextOptions.getAction();
+        
+        if (soapAction != null && !"".equals(soapAction)) {
+            if (!soapAction.equals(soapHeaderBlock.getText())) {
+                throwFault(messageContext, WSA_ACTION, Final.FAULT_INVALID_HEADER, null);
+            }
+        }
+        else {
+            messageContextOptions.setAction(soapHeaderBlock.getText());            
+        }
+        
+        soapHeaderBlock.setProcessed();        
+    }
 
     /**
      * Given the soap header block, this should extract the information within EPR.
Index: modules/core/src/org/apache/axis2/transport/http/HTTPTransportUtils.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(working copy)
@@ -118,7 +118,6 @@
             soapAction = soapAction.substring(1, soapAction.length() - 1);
         }
 
-        msgContext.setWSAAction(soapAction);
         msgContext.setSoapAction(soapAction);
         msgContext.setTo(new EndpointReference(requestURI));
         msgContext.setProperty(MessageContext.TRANSPORT_OUT, out);
@@ -163,7 +162,6 @@
             }
 
             // fill up the Message Contexts
-            msgContext.setWSAAction(soapActionHeader);
             msgContext.setSoapAction(soapActionHeader);
             msgContext.setTo(new EndpointReference(requestURI));
             msgContext.setProperty(MessageContext.TRANSPORT_OUT, out);
Index: modules/core/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(working copy)
@@ -268,8 +268,10 @@
                 soapActionString = msgContext.getWSAAction();
             }
 
-
-            if (soapActionString == null) {
+            Boolean disableSoapAction =
+                (Boolean) msgContext.getOptions().getProperty(Constants.Configuration.DISABLE_SOAP_ACTION);
+            
+            if (soapActionString == null || Boolean.TRUE.equals(disableSoapAction)) {
                 soapActionString = "\"\"";
             } else if (soapActionString.startsWith("\"")) {  // SOAPAction string must be a quoted string
                 soapActionString = "\"" + soapActionString + "\"";
Index: modules/core/src/org/apache/axis2/transport/njms/JMSUtils.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/njms/JMSUtils.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/transport/njms/JMSUtils.java	(working copy)
@@ -249,11 +249,17 @@
     private static String getSOAPAction(MessageContext msgCtx) {
         String soapActionString = msgCtx.getSoapAction();
 
-        if (soapActionString == null ||
-            soapActionString.trim().length() == 0) {
+        if (soapActionString == null || soapActionString.trim().length() == 0) {
             soapActionString = msgCtx.getWSAAction();
         }
 
+        Boolean disableSoapAction =
+            (Boolean) msgCtx.getOptions().getProperty(Constants.Configuration.DISABLE_SOAP_ACTION);
+        
+        if (soapActionString == null || Boolean.TRUE.equals(disableSoapAction)) {
+            soapActionString = "";
+        }
+
         return soapActionString;
     }
 
Index: modules/core/src/org/apache/axis2/transport/jms/JMSSender.java
===================================================================
--- modules/core/src/org/apache/axis2/transport/jms/JMSSender.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/transport/jms/JMSSender.java	(working copy)
@@ -503,7 +503,10 @@
             soapActionString = msgCtx.getWSAAction();
         }
 
-        if (soapActionString == null) {
+        Boolean disableSoapAction =
+            (Boolean) msgCtx.getOptions().getProperty(Constants.Configuration.DISABLE_SOAP_ACTION);
+        
+        if (soapActionString == null || Boolean.TRUE.equals(disableSoapAction)) {
             soapActionString = "";
         }
 
Index: modules/core/src/org/apache/axis2/Constants.java
===================================================================
--- modules/core/src/org/apache/axis2/Constants.java	(revision 422752)
+++ modules/core/src/org/apache/axis2/Constants.java	(working copy)
@@ -219,7 +219,12 @@
         // this property once set to Boolean.TRUE will make the messages to skip Addressing Handler.
         // So you will not see Addressing Headers in the OUT path.
         public static final String DISABLE_ADDRESSING_FOR_OUT_MESSAGES = "disableAddressingForOutMessages";
-
+        
+        // if this property is set to Boolean.TRUE then the SOAPAction header, if present,
+        // will NOT be set to the value of Options.getAction(). The empty value, "", will
+        // be used instead.
+        public static final String DISABLE_SOAP_ACTION = "disableSoapAction";
+        
         public static final String TRANSPORT_IN_URL = "TransportInURL";
         String URL_PARAMETER_LIST = "URLParameterList";
     }
