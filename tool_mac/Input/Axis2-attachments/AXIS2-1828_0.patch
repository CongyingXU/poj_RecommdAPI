Index: modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(revision 482619)
+++ modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java	(working copy)
@@ -52,21 +52,21 @@
 public class DeploymentEngine implements DeploymentConstants {
 
     private static final Log log = LogFactory.getLog(DeploymentEngine.class);
-    private boolean hotUpdate = true;    // to do hot update or not
-    private boolean hotDeployment = true;    // to do hot deployment or not
-    private boolean antiJARLocking = false;    // to do hot deployment or not
+    protected boolean hotUpdate = true;    // to do hot update or not
+    protected boolean hotDeployment = true;    // to do hot deployment or not
+    protected boolean antiJARLocking = false;    // to do hot deployment or not
     /**
      * Stores all the web Services to deploy.
      */
-    private List wsToDeploy = new ArrayList();
+    protected List wsToDeploy = new ArrayList();
 
     /**
      * Stores all the web Services to undeploy.
      */
-    private List wsToUnDeploy = new ArrayList();
+    protected List wsToUnDeploy = new ArrayList();
 
     //to keep the web resource location if any
-    private String webLocationString = null;
+    protected String webLocationString = null;
 
     /**
      * to keep a ref to engine register
@@ -77,12 +77,12 @@
 
     protected ConfigurationContext configContext;
 
-    private RepositoryListener repoListener;
+    protected RepositoryListener repoListener;
 
-    private String servicesPath = null;
-    private File servicesDir = null;
-    private String modulesPath = null;
-    private File modulesDir = null;
+    protected String servicesPath = null;
+    protected File servicesDir = null;
+    protected String modulesPath = null;
+    protected File modulesDir = null;
 
     public void loadServices() {
         repoListener.checkServices();
@@ -216,7 +216,7 @@
         }
     }
 
-    private ArrayList populateService(AxisServiceGroup serviceGroup,
+    protected ArrayList populateService(AxisServiceGroup serviceGroup,
                                       URL servicesURL,
                                       String serviceName) throws DeploymentException {
         try {
@@ -317,7 +317,7 @@
         return axisConfig.getMessageReceiver(mepURL);
     }
 
-    private void addNewModule(AxisModule modulemetadata) throws AxisFault {
+    protected void addNewModule(AxisModule modulemetadata) throws AxisFault {
 
         Flow inflow = modulemetadata.getInFlow();
         ClassLoader moduleClassLoader = modulemetadata.getModuleClassLoader();
@@ -348,7 +348,7 @@
         log.debug(Messages.getMessage(DeploymentErrorMsgs.ADDING_NEW_MODULE));
     }
 
-    private void addServiceGroup(AxisServiceGroup serviceGroup,
+    protected void addServiceGroup(AxisServiceGroup serviceGroup,
                                  ArrayList serviceList,
                                  URL serviceLocation,
                                  ArchiveFileData currentArchiveFile)
@@ -361,7 +361,7 @@
         }
     }
 
-    private static void fillServiceGroup(AxisServiceGroup serviceGroup,
+    protected static void fillServiceGroup(AxisServiceGroup serviceGroup,
                                          ArrayList serviceList,
                                          URL serviceLocation,
                                          AxisConfiguration axisConfig) throws AxisFault {
@@ -437,7 +437,7 @@
         }
     }
 
-    private void addAsWebResources(File in, String serviceFileName, AxisServiceGroup serviceGroup) {
+    protected void addAsWebResources(File in, String serviceFileName, AxisServiceGroup serviceGroup) {
         try {
             if (webLocationString == null) {
                 return;
@@ -701,7 +701,7 @@
     /**
      * Starts the Deployment engine to perform Hot deployment and so on.
      */
-    private void startSearch(RepositoryListener listener) {
+    protected void startSearch(RepositoryListener listener) {
         Scheduler scheduler = new Scheduler();
 
         scheduler.schedule(new SchedulerTask(listener), new DeploymentIterator());
@@ -742,7 +742,7 @@
      *
      * @throws DeploymentException
      */
-    private void validateSystemPredefinedPhases() throws DeploymentException {
+    protected void validateSystemPredefinedPhases() throws DeploymentException {
         PhasesInfo phasesInfo = axisConfig.getPhasesInfo();
         axisConfig.setInPhasesUptoAndIncludingPostDispatch(phasesInfo.getGlobalInflow());
         axisConfig.setInFaultPhases(phasesInfo.getGlobalInFaultPhases());
@@ -766,7 +766,7 @@
      * @param fileName
      * @return Returns String.
      */
-    private String getAxisServiceName(String fileName) {
+    protected String getAxisServiceName(String fileName) {
         char seperator = '.';
         String value;
         int index = fileName.indexOf(seperator);
@@ -812,7 +812,7 @@
      * @param axis2repoURI : The repository folder of Axis2
      * @throws DeploymentException
      */
-    private void setClassLoaders(String axis2repoURI) throws DeploymentException {
+    protected void setClassLoaders(String axis2repoURI) throws DeploymentException {
         ClassLoader sysClassLoader =
                 Utils.getClassLoader(Thread.currentThread().getContextClassLoader(), axis2repoURI);
 
@@ -835,7 +835,7 @@
     /**
      * Sets hotDeployment and hot update.
      */
-    private void setDeploymentFeatures() {
+    protected void setDeploymentFeatures() {
         String value;
         Parameter parahotdeployment = axisConfig.getParameter(TAG_HOT_DEPLOYMENT);
         Parameter parahotupdate = axisConfig.getParameter(TAG_HOT_UPDATE);
@@ -883,7 +883,7 @@
      * @param repositoryName
      */
 
-    private void prepareRepository(String repositoryName) {
+    protected void prepareRepository(String repositoryName) {
         File repository = new File(repositoryName);
         if (servicesPath != null) {
             servicesDir = new File(servicesPath);
@@ -909,7 +909,7 @@
         }
     }
 
-    private String getRepositoryPath(File repository) {
+    protected String getRepositoryPath(File repository) {
         try {
             return repository.getCanonicalPath();
         } catch (IOException e) {
@@ -917,7 +917,7 @@
         }
     }
 
-    private ArrayList getFileList(URL fileListUrl) {
+    protected ArrayList getFileList(URL fileListUrl) {
         ArrayList fileList = new ArrayList();
         InputStream in;
         try {
Index: modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java
===================================================================
--- modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java	(revision 482619)
+++ modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java	(working copy)
@@ -27,7 +27,7 @@
 import java.net.URLDecoder;
 
 public class RepositoryListener implements DeploymentConstants {
-    private DeploymentEngine deploymentEngine;
+    protected DeploymentEngine deploymentEngine;
 
     /**
      * The parent directory of the modules and services directories
@@ -36,7 +36,7 @@
     /**
      * Reference to a WSInfoList
      */
-    private WSInfoList wsInfoList;
+    protected WSInfoList wsInfoList;
 
     /**
      * This constructor takes two arguments, a folder name and a reference to Deployment Engine
@@ -83,7 +83,7 @@
     }
 
 
-    private boolean isSourceControlDir(File file) {
+    protected boolean isSourceControlDir(File file) {
         if (file.isDirectory()) {
             String name = file.getName();
             if (name.equalsIgnoreCase("CVS") || name.equalsIgnoreCase(".svn")) {
@@ -93,7 +93,7 @@
         return false;
     }
 
-    private void loadClassPathModules() {
+    protected void loadClassPathModules() {
         String classPath = getLocation();
         int lstindex = classPath.lastIndexOf(File.separatorChar);
         if (lstindex > 0) {
@@ -145,7 +145,7 @@
      *
      * @return String (location of the axis2 jar)
      */
-    private String getLocation() {
+    protected String getLocation() {
         try {
             Class clazz = Loader.loadClass("org.apache.axis2.engine.AxisEngine");
             java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();
@@ -188,7 +188,7 @@
      * Searches a given folder for jar files and adds them to a list in the
      * WSInfolist class.
      */
-    private void findServicesInDirectory() {
+    protected void findServicesInDirectory() {
         File root = deploymentEngine.getServicesDir();
         File[] files = root.listFiles();
 
