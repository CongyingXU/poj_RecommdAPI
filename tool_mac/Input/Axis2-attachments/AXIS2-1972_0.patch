Index: modules/kernel/src/org/apache/axis2/description/OutInAxisOperation.java
===================================================================
--- modules/kernel/src/org/apache/axis2/description/OutInAxisOperation.java	(revision 495214)
+++ modules/kernel/src/org/apache/axis2/description/OutInAxisOperation.java	(working copy)
@@ -169,7 +169,18 @@
             mc.setTransportIn(options.getTransportIn());
         }
 
-        if (options.isUseSeparateListener()) {
+        /**
+         * If a module has set the USE_ASYNC_OPERATIONS option then we override the behaviour
+         * for sync calls, and effectively USE_CUSTOM_LISTENER too. However we leave real
+         * async calls alone.
+         */
+        boolean useAsync = false;
+        if(!options.isUseSeparateListener()) {
+        	Boolean useAsyncOption = (Boolean) mc.getProperty(Constants.Configuration.USE_ASYNC_OPERATIONS);
+        	if(useAsyncOption != null) useAsync = useAsyncOption.booleanValue();
+        }
+        
+        if (useAsync || options.isUseSeparateListener()) {
             CallbackReceiver callbackReceiver = (CallbackReceiver) axisOp
                     .getMessageReceiver();
             callbackReceiver.addCallback(mc.getMessageID(), callback);
@@ -180,6 +191,7 @@
              * response message.
              */
             Boolean useCustomListener = (Boolean) options.getProperty(Constants.Configuration.USE_CUSTOM_LISTENER);
+            if(useAsync) useCustomListener = Boolean.TRUE;
             if (useCustomListener==null || !useCustomListener.booleanValue()) {
 
                 EndpointReference replyToFromTransport = mc.getConfigurationContext().getListenerManager().
Index: modules/kernel/src/org/apache/axis2/Constants.java
===================================================================
--- modules/kernel/src/org/apache/axis2/Constants.java	(revision 495214)
+++ modules/kernel/src/org/apache/axis2/Constants.java	(working copy)
@@ -289,6 +289,11 @@
          * its own manner.
          */
         public static final String USE_CUSTOM_LISTENER = "UseCustomListener";
-
+        
+        /**
+         * If this is set to a Boolean 'true' value, then OutIn operations will always be treated
+         * as async. This is useful for modules that layer async behaviour on top of sync channels.
+         */
+        public static final String USE_ASYNC_OPERATIONS = "UseAsyncOperations";
     }
 }
Index: modules/kernel/src/org/apache/axis2/client/ServiceClient.java
===================================================================
--- modules/kernel/src/org/apache/axis2/client/ServiceClient.java	(revision 495214)
+++ modules/kernel/src/org/apache/axis2/client/ServiceClient.java	(working copy)
@@ -20,6 +20,7 @@
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.soap.*;
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.async.AsyncResult;
 import org.apache.axis2.client.async.Callback;
@@ -521,8 +522,18 @@
      */
     public OMElement sendReceive(QName operationQName, OMElement xmlPayload)
             throws AxisFault {
-        if (options.isUseSeparateListener()) {
+        /**
+         * If a module has set the USE_ASYNC_OPERATIONS option then we override the behaviour
+         * for sync calls. However we leave real async calls alone.
+         */
+        boolean useAsync = false;
+        if(!options.isUseSeparateListener()) {
+        	Boolean useAsyncOption = (Boolean) configContext.getProperty(Constants.Configuration.USE_ASYNC_OPERATIONS);
+        	if(useAsyncOption != null) useAsync = useAsyncOption.booleanValue();
+        }
 
+        if (useAsync || options.isUseSeparateListener()) {
+
             // Here we are trying to do a request-response invocation using two different channels for the request
             // and the response.
             // For example, if the IN and OUT transports are HTTP, then two different HTTP channels will be used. The first
@@ -622,7 +633,18 @@
         // progamming model is non blocking
         mepClient.setCallback(callback);
         mepClient.addMessageContext(mc);
-        if (options.isUseSeparateListener()) {
+
+        /**
+         * If a module has set the USE_ASYNC_OPERATIONS option then we override the behaviour
+         * for sync calls. However we leave real async calls alone.
+         */
+        boolean useAsync = false;
+        if(!options.isUseSeparateListener()) {
+        	Boolean useAsyncOption = (Boolean) configContext.getProperty(Constants.Configuration.USE_ASYNC_OPERATIONS);
+        	if(useAsyncOption != null) useAsync = useAsyncOption.booleanValue();
+        }
+
+        if (useAsync || options.isUseSeparateListener()) {
             MessageReceiver messageReceiver = axisService.getOperation(operation).getMessageReceiver();
             if (messageReceiver == null || !(messageReceiver instanceof CallbackReceiver)) {
                 CallbackReceiver callbackReceiver = new CallbackReceiver();
