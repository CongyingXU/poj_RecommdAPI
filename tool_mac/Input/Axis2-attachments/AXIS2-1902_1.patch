Index: modules/kernel/src/org/apache/axis2/transport/http/JSONMessageFormatter.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/http/JSONMessageFormatter.java	(revision 0)
+++ modules/kernel/src/org/apache/axis2/transport/http/JSONMessageFormatter.java	(revision 0)
@@ -0,0 +1,102 @@
+package org.apache.axis2.transport.http;
+
+import org.apache.axis2.transport.MessageFormatter;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axiom.om.OMElement;
+import org.codehaus.jettison.badgerfish.BadgerFishXMLStreamWriter;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.FactoryConfigurationError;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.ByteArrayOutputStream;
+import java.net.URL;
+
+
+public class JSONMessageFormatter implements MessageFormatter {
+    private byte[] bytes;
+    private String charSetEnc;
+    private URL targetURL;
+    private boolean chunked;
+    private OMElement element;
+    private MessageContext msgCtxt;
+
+    public JSONMessageFormatter(OMElement element, boolean chunked,
+                                MessageContext msgCtxt,
+                                String charSetEncoding, URL targetURL) {
+
+        this.element = element;
+        this.targetURL = targetURL;
+        this.chunked = chunked;
+        this.msgCtxt = msgCtxt;
+        this.charSetEnc = charSetEncoding;
+    }
+
+    public long getContentLength() {
+        try {
+            {
+                if (chunked) {
+                    return -1;
+                } else {
+                    if (bytes == null) {
+                        bytes = getBytes();
+                    }
+                    return bytes.length;
+                }
+            }
+        } catch (AxisFault e) {
+            return -1;
+        }
+    }
+
+    public String getContentType() {
+        String encoding = charSetEnc;
+            String contentType;
+            if (msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE) != null) {
+                contentType = (String) msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE);
+            } else {
+                contentType = HTTPConstants.MEDIA_TYPE_APPLICATION_JSON;
+            }
+
+            if (encoding != null) {
+                contentType += "; charset=" + encoding;
+            }
+            return contentType;
+    }
+
+    public byte[] getBytes() throws AxisFault {
+        try {
+            ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
+            BadgerFishXMLStreamWriter jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(bytesOut));
+            element.serializeAndConsume(jsonWriter);
+            jsonWriter.writeEndDocument();
+
+            return bytesOut.toByteArray();
+
+        } catch (XMLStreamException e) {
+            throw new AxisFault(e);
+        } catch (FactoryConfigurationError e) {
+            throw new AxisFault(e);
+        }
+    }
+
+    public String getSOAPAction() {
+        return null;
+    }
+
+    public void handleOMOutput(OutputStream out, boolean preserve) throws AxisFault {
+        BadgerFishXMLStreamWriter jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(out));
+        try {
+            element.serializeAndConsume(jsonWriter);
+            jsonWriter.writeEndDocument();
+        } catch (XMLStreamException e) {
+            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
+        }
+    }
+
+    public URL getTargetAddress() {
+        return targetURL;
+    }
+}
