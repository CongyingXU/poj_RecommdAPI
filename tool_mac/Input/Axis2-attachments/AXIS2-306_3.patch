Index: modules/saaj/test/org/apache/axis2/saaj/AttachmentTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/AttachmentTest.java	(revision 359202)
+++ modules/saaj/test/org/apache/axis2/saaj/AttachmentTest.java	(working copy)
@@ -19,46 +19,46 @@
     public AttachmentTest(String name) {
         super(name);
     }
-    
+
     public void testStringAttachment() throws Exception {
-    	SOAPConnectionFactory scFactory = SOAPConnectionFactory.newInstance();
-    	SOAPConnection con = scFactory.createConnection();
-    	
-    	MessageFactory factory = MessageFactory.newInstance();
-    	SOAPMessage message = factory.createMessage();
-    	AttachmentPart attachment = message.createAttachmentPart();
-    	String stringContent = "Update address for Sunny Skies " +
-    			"Inc., to 10 Upbeat Street, Pleasant Grove, CA 95439";
-    	
-    	attachment.setContent(stringContent, "text/plain");
-    	attachment.setContentId("update_address");
-    	message.addAttachmentPart(attachment);
-    	
-    	assertTrue(message.countAttachments()==1);
-    	
-    	java.util.Iterator it = message.getAttachments();
-    	while (it.hasNext()) {
-    		attachment = (AttachmentPart) it.next();
-    		Object content = attachment.getContent();
-    		String id = attachment.getContentId();
-    		System.out.println("Attachment " + id + " contains: " + content);
-    		assertEquals(content,stringContent);
-    	}
-    	System.out.println("Here is what the XML message looks like:");
-    	message.writeTo(System.out);
-    	
-    	message.removeAllAttachments();
-    	assertTrue(message.countAttachments()==0);
+        SOAPConnectionFactory scFactory = SOAPConnectionFactory.newInstance();
+        SOAPConnection con = scFactory.createConnection();
+
+        MessageFactory factory = MessageFactory.newInstance();
+        SOAPMessage message = factory.createMessage();
+        AttachmentPart attachment = message.createAttachmentPart();
+        String stringContent = "Update address for Sunny Skies " +
+                               "Inc., to 10 Upbeat Street, Pleasant Grove, CA 95439";
+
+        attachment.setContent(stringContent, "text/plain");
+        attachment.setContentId("update_address");
+        message.addAttachmentPart(attachment);
+
+        assertTrue(message.countAttachments() == 1);
+
+        java.util.Iterator it = message.getAttachments();
+        while (it.hasNext()) {
+            attachment = (AttachmentPart) it.next();
+            Object content = attachment.getContent();
+            String id = attachment.getContentId();
+            System.out.println("Attachment " + id + " contains: " + content);
+            assertEquals(content, stringContent);
+        }
+        System.out.println("Here is what the XML message looks like:");
+        message.writeTo(System.out);
+
+        message.removeAllAttachments();
+        assertTrue(message.countAttachments() == 0);
     }
-    
+
     public void testMultipleAttachments() throws Exception {
         SOAPConnectionFactory scFactory = SOAPConnectionFactory.newInstance();
         SOAPConnection con = scFactory.createConnection();
 
         MessageFactory factory = MessageFactory.newInstance();
         SOAPMessage msg = factory.createMessage();
-        java.net.URL url1 = new java.net.URL("http://slashdot.org/slashdot.xml");
-        java.net.URL url2 = new java.net.URL("http://www.apache.org/LICENSE.txt");
+        java.net.URL url1 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.html");
+        java.net.URL url2 = new java.net.URL("http://www.apache.org/licenses/LICENSE-2.0.txt");
 
         AttachmentPart a1 = msg.createAttachmentPart(new javax.activation.DataHandler(url1));
         a1.setContentType("text/xml");
@@ -70,54 +70,58 @@
         a3.setContentType("text/plain");
         msg.addAttachmentPart(a3);
 
-        assertTrue(msg.countAttachments()==3);
+        assertTrue(msg.countAttachments() == 3);
 
         javax.xml.soap.MimeHeaders mimeHeaders = new javax.xml.soap.MimeHeaders();
         mimeHeaders.addHeader("Content-Type", "text/xml");
 
         int nAttachments = 0;
         java.util.Iterator iterator = msg.getAttachments(mimeHeaders);
-	    while (iterator.hasNext()) {
+        while (iterator.hasNext()) {
             nAttachments++;
-	        AttachmentPart ap = (AttachmentPart)iterator.next();
-	        assertTrue(ap.equals(a1) || ap.equals(a2));
-	    }
-        assertTrue(nAttachments==2);
+            AttachmentPart ap = (AttachmentPart) iterator.next();
+            assertTrue(ap.equals(a1) || ap.equals(a2));
+        }
+        assertTrue(nAttachments == 2);
     }
-    
+
     public void testBadAttSize() throws Exception {
         MessageFactory factory = MessageFactory.newInstance();
         SOAPMessage message = factory.createMessage();
 
-        ByteArrayInputStream ins=new ByteArrayInputStream(new byte[5]);
-        DataHandler dh=new DataHandler(new Src(ins,"text/plain"));
+        ByteArrayInputStream ins = new ByteArrayInputStream(new byte[5]);
+        DataHandler dh = new DataHandler(new Src(ins, "text/plain"));
         AttachmentPart part = message.createAttachmentPart(dh);
-        assertEquals("Size should match",5,part.getSize());
+        assertEquals("Size should match", 5, part.getSize());
     }
 
-    class Src implements DataSource{
+    class Src implements DataSource {
         InputStream m_src;
         String m_type;
 
-        public Src(InputStream data, String type){
-            m_src=data;
-            m_type=type;
+        public Src(InputStream data, String type) {
+            m_src = data;
+            m_type = type;
         }
-        public String getContentType(){
+
+        public String getContentType() {
             return m_type;
         }
-        public InputStream getInputStream() throws IOException{
+
+        public InputStream getInputStream() throws IOException {
             m_src.reset();
             return m_src;
         }
-        public String getName(){
+
+        public String getName() {
             return "Some-Data";
         }
-        public OutputStream getOutputStream(){
+
+        public OutputStream getOutputStream() {
             throw new UnsupportedOperationException("I don't give output streams");
         }
     }
-    
+
     public static void main(String[] args) throws Exception {
         AttachmentTest tester = new AttachmentTest("TestSAAJ");
         tester.testMultipleAttachments();
Index: modules/saaj/src/org/apache/axis2/om/impl/dom/ParentNode.java
===================================================================
--- modules/saaj/src/org/apache/axis2/om/impl/dom/ParentNode.java	(revision 359202)
+++ modules/saaj/src/org/apache/axis2/om/impl/dom/ParentNode.java	(working copy)
@@ -116,7 +116,10 @@
 	///	
 	
 	public NodeList getChildNodes() {
-		return new NodeListImpl(this, null,null);
+        if(!this.done){
+            this.build();
+        }
+        return new NodeListImpl(this, null,null);
 	}
 	
 	public Node getFirstChild() {
Index: modules/saaj/src/org/apache/axis2/om/impl/dom/ChildNode.java
===================================================================
--- modules/saaj/src/org/apache/axis2/om/impl/dom/ChildNode.java	(revision 359202)
+++ modules/saaj/src/org/apache/axis2/om/impl/dom/ChildNode.java	(working copy)
@@ -23,152 +23,155 @@
 
 public abstract class ChildNode extends NodeImpl {
 
-	protected ChildNode previousSibling;
-	
-	protected ChildNode nextSibling;
-	
-	protected ParentNode parentNode;
-	
-	
-	/**
-	 * @param ownerNode
-	 */
-	protected ChildNode(DocumentImpl ownerDocument) {
-		super(ownerDocument);
-	}
-	
-	protected ChildNode() {
-		
-	}
-	
-	public OMNode getNextOMSibling() throws OMException {
+    protected ChildNode previousSibling;
+
+    protected ChildNode nextSibling;
+
+    protected ParentNode parentNode;
+
+
+    /**
+     * @param ownerDocument
+     */
+    protected ChildNode(DocumentImpl ownerDocument) {
+        super(ownerDocument);
+    }
+
+    protected ChildNode() {
+
+    }
+
+    public OMNode getNextOMSibling() throws OMException {
         while ((nextSibling == null) && !this.parentNode.done) {
             this.parentNode.buildNext();
         }
         return nextSibling;
-	}
-	public Node getNextSibling() {
-		return (Node)this.getNextOMSibling();
-	}
-	public OMNode getPreviousOMSibling() {
-		return this.previousSibling;
-	}
-	public Node getPreviousSibling() {
-		return this.previousSibling;
-	}
+    }
 
-	///
-	///OMNode methods
-	///
-	public void setNextOMSibling(OMNode node) {
-		if(node instanceof ChildNode)
-			this.nextSibling = (ChildNode)node;
-		else
-			throw new OMException("The node is not a " + ChildNode.class);
-	}
+    public Node getNextSibling() {
+        return (Node) this.getNextOMSibling();
+    }
 
-	public void setPreviousOMSibling(OMNode node) {
-		if(node instanceof ChildNode)
-			this.previousSibling = (ChildNode)node;
-		else
-			throw new OMException("The node is not a " + ChildNode.class);		
-	}
-	
-	public OMContainer getParent() throws OMException {
-		return (OMContainer)this.parentNode;
-	}
-	
-	public Node getParentNode() {
-		return this.parentNode;
-	}
-	
-	public void setParent(OMContainer element) {
-		if(element instanceof ParentNode)
-			this.parentNode = (ParentNode)element;
-		else
-			throw new OMException("The given parent is not of the type " + ParentNode.class);
+    public OMNode getPreviousOMSibling() {
+        return this.previousSibling;
+    }
 
-	}
-	
-	public OMNode detach() throws OMException{
-		if(this.parentNode == null) {
-			throw new OMException("Parent level elements cannot be ditached");
-		} else {
-			if(previousSibling == null) { // This is the first child
-				if(nextSibling != null) {
-					this.parentNode.setFirstChild(nextSibling);
-				} else {
-					this.parentNode.firstChild = null;
-					this.parentNode.lastChild = null;
-				}
-			} else {
-				((OMNodeEx)this.getPreviousOMSibling()).setNextOMSibling(nextSibling);
-			} if (this.nextSibling != null) {
-				this.nextSibling.setPreviousOMSibling(this.previousSibling);
-			}
-			this.parentNode = null; 
-		}
-		return this;
-	}
-	
-	public void discard() throws OMException {
-		throw new UnsupportedOperationException("Cannot discard this node");
-	}
-	
-	/**
-	 * Insert the given sibling next to this item
-	 */
-	public void insertSiblingAfter(OMNode sibling) throws OMException {
-		
-		if(this.parentNode != null) {
-			((OMNodeEx)sibling).setParent(this.parentNode);
-		}
-		
-		if(sibling instanceof ChildNode) {
-			ChildNode domSibling = (ChildNode)sibling;
-			domSibling.previousSibling = this;
-			if(this.nextSibling != null) {
-				this.nextSibling.previousSibling = domSibling;
-			}
-			domSibling.nextSibling = this.nextSibling;
-			this.nextSibling = domSibling;
-			
-		} else {
-			throw new OMException("The given child is not of type " + ChildNode.class);
-		}
-	}
-	
-	/**
-	 * Insert the given sibling before this item
-	 */
-	public void insertSiblingBefore(OMNode sibling) throws OMException {
-		((OMNodeEx)sibling).setParent(this.parentNode);
-		if(sibling instanceof ChildNode) {
-			ChildNode domSibling = (ChildNode)sibling;
-			domSibling.nextSibling = this;
-			if(this.previousSibling != null) {
-				this.previousSibling.nextSibling = domSibling;
-			}
-			domSibling.previousSibling = this.previousSibling;
-			this.previousSibling = domSibling;
-			
-		} else {
-			throw new OMException("The given child is not of type " + ChildNode.class);
-		}
-		
-	}
-	
-	
+    public Node getPreviousSibling() {
+        return this.previousSibling;
+    }
+
+    ///
+    ///OMNode methods
+    ///
+    public void setNextOMSibling(OMNode node) {
+        if (node instanceof ChildNode)
+            this.nextSibling = (ChildNode) node;
+        else
+            throw new OMException("The node is not a " + ChildNode.class);
+    }
+
+    public void setPreviousOMSibling(OMNode node) {
+        if (node instanceof ChildNode)
+            this.previousSibling = (ChildNode) node;
+        else
+            throw new OMException("The node is not a " + ChildNode.class);
+    }
+
+    public OMContainer getParent() throws OMException {
+        return this.parentNode;
+    }
+
+    public Node getParentNode() {
+        return this.parentNode;
+    }
+
+    public void setParent(OMContainer element) {
+        if (element instanceof ParentNode)
+            this.parentNode = (ParentNode) element;
+        else
+            throw new OMException("The given parent is not of the type " + ParentNode.class);
+
+    }
+
+    public OMNode detach() throws OMException {
+        if (this.parentNode == null) {
+            throw new OMException("Parent level elements cannot be detached");
+        } else {
+            if (previousSibling == null) { // This is the first child
+                if (nextSibling != null) {
+                    this.parentNode.setFirstChild(nextSibling);
+                } else {
+                    this.parentNode.firstChild = null;
+                    this.parentNode.lastChild = null;
+                }
+            } else if (nextSibling != null) {
+                ((OMNodeEx) this.getPreviousOMSibling()).setNextOMSibling(nextSibling);
+            }
+            if (this.nextSibling != null) {
+                this.nextSibling.setPreviousOMSibling(this.previousSibling);
+            }
+            this.parentNode = null;
+        }
+        return this;
+    }
+
+    public void discard() throws OMException {
+        throw new UnsupportedOperationException("Cannot discard this node");
+    }
+
+    /**
+     * Insert the given sibling next to this item
+     */
+    public void insertSiblingAfter(OMNode sibling) throws OMException {
+
+        if (this.parentNode != null) {
+            ((OMNodeEx) sibling).setParent(this.parentNode);
+        }
+
+        if (sibling instanceof ChildNode) {
+            ChildNode domSibling = (ChildNode) sibling;
+            domSibling.previousSibling = this;
+            if (this.nextSibling != null) {
+                this.nextSibling.previousSibling = domSibling;
+            }
+            domSibling.nextSibling = this.nextSibling;
+            this.nextSibling = domSibling;
+
+        } else {
+            throw new OMException("The given child is not of type " + ChildNode.class);
+        }
+    }
+
+    /**
+     * Insert the given sibling before this item
+     */
+    public void insertSiblingBefore(OMNode sibling) throws OMException {
+        ((OMNodeEx) sibling).setParent(this.parentNode);
+        if (sibling instanceof ChildNode) {
+            ChildNode domSibling = (ChildNode) sibling;
+            domSibling.nextSibling = this;
+            if (this.previousSibling != null) {
+                this.previousSibling.nextSibling = domSibling;
+            }
+            domSibling.previousSibling = this.previousSibling;
+            this.previousSibling = domSibling;
+
+        } else {
+            throw new OMException("The given child is not of type " + ChildNode.class);
+        }
+
+    }
+
     public Node cloneNode(boolean deep) {
 
-    	ChildNode newnode = (ChildNode) super.cloneNode(deep);
-    	
+        ChildNode newnode = (ChildNode) super.cloneNode(deep);
+
         // Need to break the association w/ original kids
-    	newnode.previousSibling = null;
-        newnode.nextSibling     = null;
+        newnode.previousSibling = null;
+        newnode.nextSibling = null;
         newnode.isFirstChild(false);
 
-    	return newnode;
+        return newnode;
     }
 
 }
