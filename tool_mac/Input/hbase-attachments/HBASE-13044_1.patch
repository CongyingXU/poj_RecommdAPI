From 01b0b72bc3df86d7d5b0e539dccf577640e498d5 Mon Sep 17 00:00:00 2001
From: Andrew Purtell <apurtell@apache.org>
Date: Fri, 13 Feb 2015 17:21:49 -0800
Subject: [PATCH] HBASE-13044 Configuration option for disabling coprocessor
 loading

---
 hbase-common/src/main/resources/hbase-default.xml  |  16 +++
 .../hadoop/hbase/coprocessor/CoprocessorHost.java  |  11 ++
 .../hbase/regionserver/RegionCoprocessorHost.java  |   8 ++
 .../coprocessor/TestCoprocessorConfiguration.java  | 141 +++++++++++++++++++++
 4 files changed, 176 insertions(+)
 create mode 100644 hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorConfiguration.java

diff --git a/hbase-common/src/main/resources/hbase-default.xml b/hbase-common/src/main/resources/hbase-default.xml
index 6dcd80d..af6822b 100644
--- a/hbase-common/src/main/resources/hbase-default.xml
+++ b/hbase-common/src/main/resources/hbase-default.xml
@@ -994,6 +994,22 @@ possible configurations would overwhelm and obscure the important.
                  the keys are hidden.</description>
   </property>
   <property>
+    <name>hbase.coprocessor.enabled</name>
+    <value>true</value>
+    <description>Enables or disables coprocessor loading. If 'false'
+    (disabled), any other coprocessor related configuration will be ignored.
+    </description>
+  </property>
+  <property>
+    <name>hbase.coprocessor.user.enabled</name>
+    <value>true</value>
+    <description>Enables or disables user (aka. table) coprocessor loading.
+    If 'false' (disabled), any table coprocessor attributes in table
+    descriptors will be ignored. If "hbase.coprocessor.enabled" is 'false'
+    this setting has no effect.
+    </description>
+  </property>
+  <property>
     <name>hbase.coprocessor.region.classes</name>
     <value></value>
     <description>A comma-separated list of Coprocessors that are loaded by
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
index eeb941a..237f617 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
@@ -73,6 +73,11 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     "hbase.coprocessor.wal.classes";
   public static final String ABORT_ON_ERROR_KEY = "hbase.coprocessor.abortonerror";
   public static final boolean DEFAULT_ABORT_ON_ERROR = true;
+  public static final String COPROCESSORS_ENABLED_CONF_KEY = "hbase.coprocessor.enabled";
+  public static final boolean DEFAULT_COPROCESSORS_ENABLED = true;
+  public static final String USER_COPROCESSORS_ENABLED_CONF_KEY =
+    "hbase.coprocessor.user.enabled";
+  public static final boolean DEFAULT_USER_COPROCESSORS_ENABLED = true;
 
   private static final Log LOG = LogFactory.getLog(CoprocessorHost.class);
   protected Abortable abortable;
@@ -123,6 +128,12 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * Called by constructor.
    */
   protected void loadSystemCoprocessors(Configuration conf, String confKey) {
+    boolean coprocessorsEnabled = conf.getBoolean(COPROCESSORS_ENABLED_CONF_KEY,
+      DEFAULT_COPROCESSORS_ENABLED);
+    if (!coprocessorsEnabled) {
+      return;
+    }
+
     Class<?> implClass = null;
 
     // load default coprocessors from configure file
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
index a32a478..d10141c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
@@ -328,6 +328,14 @@ public class RegionCoprocessorHost
   }
 
   void loadTableCoprocessors(final Configuration conf) {
+    boolean coprocessorsEnabled = conf.getBoolean(COPROCESSORS_ENABLED_CONF_KEY,
+      DEFAULT_COPROCESSORS_ENABLED);
+    boolean tableCoprocessorsEnabled = conf.getBoolean(USER_COPROCESSORS_ENABLED_CONF_KEY,
+      DEFAULT_USER_COPROCESSORS_ENABLED);
+    if (!(coprocessorsEnabled && tableCoprocessorsEnabled)) {
+      return;
+    }
+
     // scan the table attributes for coprocessor load specifications
     // initialize the coprocessors
     List<RegionEnvironment> configured = new ArrayList<RegionEnvironment>();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorConfiguration.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorConfiguration.java
new file mode 100644
index 0000000..7b9f164
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorConfiguration.java
@@ -0,0 +1,141 @@
+/*
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.coprocessor;
+
+import java.io.IOException;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import static org.mockito.Mockito.*;
+import static org.junit.Assert.*;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.CoprocessorEnvironment;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HRegionInfo;
+import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.regionserver.HRegion;
+import org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost;
+import org.apache.hadoop.hbase.regionserver.RegionServerServices;
+import org.apache.hadoop.hbase.testclassification.CoprocessorTests;
+import org.apache.hadoop.hbase.testclassification.SmallTests;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+/**
+ * Tests for global coprocessor loading configuration
+ */
+@Category({CoprocessorTests.class, SmallTests.class})
+public class TestCoprocessorConfiguration {
+
+  private static final Configuration CONF = HBaseConfiguration.create();
+  static {
+    CONF.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,
+      SystemCoprocessor.class.getName());
+  }
+  private static final TableName TABLENAME = TableName.valueOf("TestCoprocessorConfiguration");
+  private static final HRegionInfo REGIONINFO = new HRegionInfo(TABLENAME);
+  private static final HTableDescriptor TABLEDESC = new HTableDescriptor(TABLENAME);
+  static {
+    try {
+      TABLEDESC.addCoprocessor(TableCoprocessor.class.getName());
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private static AtomicBoolean systemCoprocessorLoaded = new AtomicBoolean();
+  private static AtomicBoolean tableCoprocessorLoaded = new AtomicBoolean();
+
+  public static class SystemCoprocessor implements Coprocessor {
+    @Override
+    public void start(CoprocessorEnvironment env) throws IOException {
+      systemCoprocessorLoaded.set(true);
+    }
+
+    @Override
+    public void stop(CoprocessorEnvironment env) throws IOException { }
+  }
+
+  public static class TableCoprocessor implements Coprocessor {
+    @Override
+    public void start(CoprocessorEnvironment env) throws IOException {
+      tableCoprocessorLoaded.set(true);
+    }
+
+    @Override
+    public void stop(CoprocessorEnvironment env) throws IOException { }
+  }
+
+  @Test
+  public void testDefaults() throws Exception {
+    Configuration conf = new Configuration(CONF);
+    HRegion region = mock(HRegion.class);
+    when(region.getRegionInfo()).thenReturn(REGIONINFO);
+    when(region.getTableDesc()).thenReturn(TABLEDESC);
+    RegionServerServices rsServices = mock(RegionServerServices.class);
+    systemCoprocessorLoaded.set(false);
+    tableCoprocessorLoaded.set(false);
+    new RegionCoprocessorHost(region, rsServices, conf);
+    assertEquals("System coprocessors loading default was not honored",
+      systemCoprocessorLoaded.get(),
+      CoprocessorHost.DEFAULT_COPROCESSORS_ENABLED);
+    assertEquals("Table coprocessors loading default was not honored",
+      tableCoprocessorLoaded.get(), 
+      CoprocessorHost.DEFAULT_COPROCESSORS_ENABLED &&
+      CoprocessorHost.DEFAULT_USER_COPROCESSORS_ENABLED);
+  }
+
+  @Test
+  public void testAllDisabled() throws Exception {
+    Configuration conf = new Configuration(CONF);
+    conf.setBoolean(CoprocessorHost.COPROCESSORS_ENABLED_CONF_KEY, false);
+    HRegion region = mock(HRegion.class);
+    when(region.getRegionInfo()).thenReturn(REGIONINFO);
+    when(region.getTableDesc()).thenReturn(TABLEDESC);
+    RegionServerServices rsServices = mock(RegionServerServices.class);
+    systemCoprocessorLoaded.set(false);
+    tableCoprocessorLoaded.set(false);
+    new RegionCoprocessorHost(region, rsServices, conf);
+    assertFalse("System coprocessors should not have been loaded",
+      systemCoprocessorLoaded.get());
+    assertFalse("Table coprocessors should not have been loaded",
+      tableCoprocessorLoaded.get());
+  }
+
+  @Test
+  public void testTableLoadingDisabled() throws Exception {
+    Configuration conf = new Configuration(CONF);
+    conf.setBoolean(CoprocessorHost.COPROCESSORS_ENABLED_CONF_KEY, true);
+    conf.setBoolean(CoprocessorHost.USER_COPROCESSORS_ENABLED_CONF_KEY, false);
+    HRegion region = mock(HRegion.class);
+    when(region.getRegionInfo()).thenReturn(REGIONINFO);
+    when(region.getTableDesc()).thenReturn(TABLEDESC);
+    RegionServerServices rsServices = mock(RegionServerServices.class);
+    systemCoprocessorLoaded.set(false);
+    tableCoprocessorLoaded.set(false);
+    new RegionCoprocessorHost(region, rsServices, conf);
+    assertTrue("System coprocessors should have been loaded",
+      systemCoprocessorLoaded.get());
+    assertFalse("Table coprocessors should not have been loaded",
+      tableCoprocessorLoaded.get());
+  }
+}
-- 
1.9.1

