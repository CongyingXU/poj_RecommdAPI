From fcd84e4f1cdfe398103c7e7219241a2fa0163321 Mon Sep 17 00:00:00 2001
From: David Harju <dharju@salesforce.com>
Date: Tue, 20 Jun 2017 16:04:18 -0700
Subject: [PATCH] HBASE-18023 Log multi-* requests for more than threshold
 number of rows

---
 .../java/org/apache/hadoop/hbase/HConstants.java   |  6 +-
 hbase-common/src/main/resources/hbase-default.xml  |  7 ++
 .../hadoop/hbase/regionserver/RSRpcServices.java   | 40 ++++++++++-
 .../hbase/regionserver/TestMultiLogThreshold.java  | 77 ++++++++++++++++++++++
 4 files changed, 128 insertions(+), 2 deletions(-)
 create mode 100644 hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiLogThreshold.java

diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
index dfc140b71e..fddbfcdb41 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
@@ -1336,7 +1336,7 @@ public final class HConstants {
 
   public static final String HBASE_CANARY_WRITE_TABLE_CHECK_PERIOD_KEY =
       "hbase.canary.write.table.check.period";
-  
+
   public static final String HBASE_CANARY_READ_RAW_SCAN_KEY = "hbase.canary.read.raw.enabled";
 
   /**
@@ -1363,6 +1363,10 @@ public final class HConstants {
   public static final String DEFAULT_SNAPSHOT_RESTORE_FAILSAFE_NAME =
       "hbase-failsafe-{snapshot.name}-{restore.timestamp}";
 
+  public static final String BATCH_ROWS_THRESHOLD_NAME = "hbase.rpc.rows.warning.threshold";
+
+  public static final int BATCH_ROWS_THRESHOLD_DEFAULT = 1000;
+
   private HConstants() {
     // Can't be instantiated with this ctor.
   }
diff --git a/hbase-common/src/main/resources/hbase-default.xml b/hbase-common/src/main/resources/hbase-default.xml
index 70c638b913..0fb774bab5 100644
--- a/hbase-common/src/main/resources/hbase-default.xml
+++ b/hbase-common/src/main/resources/hbase-default.xml
@@ -1758,4 +1758,11 @@ possible configurations would overwhelm and obscure the important.
        Timeout for regionservers to keep threads in snapshot request pool waiting
     </description>
    </property>
+   <property>
+    <name>hbase.rpc.rows.warning.threshold</name>
+    <value>1000</value>
+    <description>
+      Number of rows in a batch operation above which a warning will be logged.
+    </description>
+  </property>
 </configuration>
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
index e4da8db734..99dc710fd0 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
@@ -300,6 +300,11 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
    */
   private final long minimumScanTimeLimitDelta;
 
+  /**
+   * Row size threshold for multi requests above which a warning is logged
+   */
+  private final int rowSizeWarnThreshold;
+
   final AtomicBoolean clearCompactionQueues = new AtomicBoolean(false);
 
   /**
@@ -1116,9 +1121,30 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
     }
   }
 
+  //Exposed for testing
+  static interface LogDelegate {
+      void logBatchWarning(int sum, int rowSizeWarnThreshold);
+  }
+
+  private static LogDelegate DEFAULT_LOG_DELEGATE = new LogDelegate(){
+      @Override
+      public void logBatchWarning(int sum, int rowSizeWarnThreshold) {
+          LOG.warn("Large batch operation detected (greater than "+rowSizeWarnThreshold+") (HBASE-18023)."
+                  + " Requested Number of Rows: "+sum
+                  + " Client: "+RpcServer.getRequestUserName()+"/"+RpcServer.getRemoteAddress());
+      }};
+
+  private final LogDelegate ld;
+
   public RSRpcServices(HRegionServer rs) throws IOException {
-    regionServer = rs;
+      this(rs, DEFAULT_LOG_DELEGATE);
+  }
 
+  //Directly invoked only for testing
+  RSRpcServices(HRegionServer rs, LogDelegate ld) throws IOException {
+    this.ld = ld;
+    regionServer = rs;
+    rowSizeWarnThreshold = rs.conf.getInt(HConstants.BATCH_ROWS_THRESHOLD_NAME, HConstants.BATCH_ROWS_THRESHOLD_DEFAULT);
     RpcSchedulerFactory rpcSchedulerFactory;
     try {
       Class<?> rpcSchedulerFactoryClass = rs.conf.getClass(
@@ -2492,6 +2518,16 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
     return Result.create(results, get.isCheckExistenceOnly() ? !results.isEmpty() : null, stale);
   }
 
+  private void checkBatchSizeAndLogLargeSize(MultiRequest request) {
+      int sum = 0;
+      for (RegionAction regionAction : request.getRegionActionList()) {
+          sum += regionAction.getActionCount();
+      }
+      if (sum > rowSizeWarnThreshold) {
+          ld.logBatchWarning(sum, rowSizeWarnThreshold);
+      }
+  }
+
   /**
    * Execute multiple actions on a table: get, mutate, and/or execCoprocessor
    *
@@ -2508,6 +2544,8 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
       throw new ServiceException(ie);
     }
 
+    checkBatchSizeAndLogLargeSize(request);
+
     // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.
     // It is also the conduit via which we pass back data.
     HBaseRpcController controller = (HBaseRpcController)rpcc;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiLogThreshold.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiLogThreshold.java
new file mode 100644
index 0000000000..998b94d12e
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiLogThreshold.java
@@ -0,0 +1,77 @@
+package org.apache.hadoop.hbase.regionserver;
+
+import static org.mockito.Mockito.verify;
+
+import org.apache.hadoop.hbase.shaded.protobuf.RequestConverter;
+import org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos;
+import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos.Action;
+import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos.MultiRequest;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.HBaseTestingUtility;
+import org.apache.hadoop.hbase.HConstants;
+import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos.RegionAction;
+import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.shaded.com.google.protobuf.RpcController;
+import org.apache.hadoop.hbase.shaded.com.google.protobuf.ServiceException;
+
+public class TestMultiLogThreshold {
+
+    private static RSRpcServices SERVICES;
+
+    private static HBaseTestingUtility TEST_UTIL;
+    private static Configuration CONF ;
+    private static final byte[] TEST_FAM = Bytes.toBytes("fam");
+    private static RSRpcServices.LogDelegate LD;
+    private static int THRESHOLD;
+
+    @BeforeClass
+    public static void setup() throws Exception {
+        final TableName tableName = TableName.valueOf("tableName");
+        TEST_UTIL = HBaseTestingUtility.createLocalHTU();
+        CONF = TEST_UTIL.getConfiguration();
+        THRESHOLD = CONF.getInt(HConstants.BATCH_ROWS_THRESHOLD_NAME, HConstants.BATCH_ROWS_THRESHOLD_DEFAULT);
+        TEST_UTIL.startMiniCluster();
+        TEST_UTIL.createTable(tableName, TEST_FAM);
+        HRegionServer rs = TEST_UTIL.getRSForFirstRegionInTable(tableName);
+        LD = Mockito.mock(RSRpcServices.LogDelegate.class);
+        SERVICES = new RSRpcServices(rs, LD);
+    }
+
+    //sends a multi request with a certain amount of rows
+    private void sendMultiRequest(int rows) throws ServiceException {
+        RpcController rpcc = Mockito.mock(RpcController.class);
+        MultiRequest.Builder builder = MultiRequest.newBuilder();
+        for (int i = 0; i < rows; i++) {
+            RegionAction.Builder rab = RegionAction.newBuilder();
+            rab.setRegion(RequestConverter.buildRegionSpecifier(
+                    HBaseProtos.RegionSpecifier.RegionSpecifierType.REGION_NAME, new String("someStuff"+i).getBytes()));
+            for (int j = 0; j < 1; j++) {
+                Action.Builder ab = Action.newBuilder();
+                rab.addAction(ab.build());
+            }
+            builder.addRegionAction(rab.build());
+        }
+        try {
+            SERVICES.multi(rpcc, builder.build());
+        } catch (ClassCastException e) {
+            //swallow expected exception due to mocked RpcController
+        }
+    }
+
+    @Test
+    public void testMultiLogThreshold() throws ServiceException {
+        sendMultiRequest(THRESHOLD+1);
+        verify(LD, Mockito.times(1)).logBatchWarning(Mockito.anyInt(), Mockito.anyInt());
+    }
+
+    @Test
+    public void testMultiNoLogThreshold() throws ServiceException {
+        sendMultiRequest(THRESHOLD);
+        verify(LD, Mockito.never()).logBatchWarning(Mockito.anyInt(), Mockito.anyInt());
+    }
+
+}
-- 
2.11.0

