diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/metrics/BaseSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/metrics/BaseSourceImpl.java
index 7d76574..2ef2a35 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/metrics/BaseSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/metrics/BaseSourceImpl.java
@@ -28,7 +28,6 @@ import org.apache.hadoop.metrics2.lib.MetricMutableQuantiles;
 import org.apache.hadoop.metrics2.lib.MutableCounterLong;
 import org.apache.hadoop.metrics2.lib.MutableGaugeLong;
 import org.apache.hadoop.metrics2.lib.MutableHistogram;
-import org.apache.hadoop.metrics2.source.JvmMetrics;
 
 /**
  * Hadoop 2 implementation of BaseSource (using metrics2 framework).  It handles registration to
@@ -42,14 +41,11 @@ public class BaseSourceImpl implements BaseSource, MetricsSource {
   private static enum DefaultMetricsSystemInitializer {
     INSTANCE;
     private boolean inited = false;
-    private JvmMetrics jvmMetricsSource;
 
     synchronized void init(String name) {
       if (inited) return;
       inited = true;
       DefaultMetricsSystem.initialize(HBASE_METRICS_SYSTEM_NAME);
-      jvmMetricsSource = JvmMetrics.initSingleton(name, "");
-
     }
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/http/jmx/JMXJsonServlet.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/http/jmx/JMXJsonServlet.java
index 765b8fd..e736052 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/http/jmx/JMXJsonServlet.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/http/jmx/JMXJsonServlet.java
@@ -36,7 +36,6 @@ import javax.management.ObjectName;
 import javax.management.ReflectionException;
 import javax.management.RuntimeMBeanException;
 import javax.management.RuntimeErrorException;
-import javax.management.RuntimeMBeanException;
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.CompositeType;
 import javax.management.openmbean.TabularData;
@@ -124,6 +123,10 @@ public class JMXJsonServlet extends HttpServlet {
   private static final long serialVersionUID = 1L;
 
   private static final String CALLBACK_PARAM = "callback";
+  /**
+   * If query string includes 'description', then add bean and attribute descriptions to output.
+   */
+  private static final String INCLUDE_DESCRIPTION = "description";
 
   /**
    * MBean server.
@@ -155,8 +158,7 @@ public class JMXJsonServlet extends HttpServlet {
   @Override
   public void doGet(HttpServletRequest request, HttpServletResponse response) {
     try {
-      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),
-                                                     request, response)) {
+      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(), request, response)) {
         return;
       }
       JsonGenerator jg = null;
@@ -173,6 +175,11 @@ public class JMXJsonServlet extends HttpServlet {
         } else {
           response.setContentType("application/json; charset=utf8");
         }
+        // Should we output description on each attribute and bean?
+        String tmpStr = request.getParameter(INCLUDE_DESCRIPTION);
+        System.out.println("tmpStr=" + tmpStr);
+        boolean description = tmpStr != null && tmpStr.length() > 0;
+        System.out.println("description=" + description);
 
         jg = jsonFactory.createJsonGenerator(writer);
         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
@@ -190,8 +197,7 @@ public class JMXJsonServlet extends HttpServlet {
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
             return;
           }
-          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],
-              response);
+          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1], description, response);
           return;
         }
 
@@ -200,7 +206,7 @@ public class JMXJsonServlet extends HttpServlet {
         if (qry == null) {
           qry = "*:*";
         }
-        listBeans(jg, new ObjectName(qry), null, response);
+        listBeans(jg, new ObjectName(qry), null, description, response);
       } finally {
         if (jg != null) {
           jg.close();
@@ -222,23 +228,24 @@ public class JMXJsonServlet extends HttpServlet {
   }
 
   // --------------------------------------------------------- Private Methods
-  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, 
-      HttpServletResponse response) 
+  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute,
+      final boolean description, final HttpServletResponse response) 
   throws IOException {
     LOG.trace("Listing beans for "+qry);
     Set<ObjectName> names = null;
     names = mBeanServer.queryNames(qry, null);
-
     jg.writeArrayFieldStart("beans");
     Iterator<ObjectName> it = names.iterator();
     while (it.hasNext()) {
       ObjectName oname = it.next();
       MBeanInfo minfo;
       String code = "";
+      String descriptionStr = null;
       Object attributeinfo = null;
       try {
         minfo = mBeanServer.getMBeanInfo(oname);
         code = minfo.getClassName();
+        if (description) descriptionStr = minfo.getDescription();
         String prs = "";
         try {
           if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) {
@@ -302,12 +309,13 @@ public class JMXJsonServlet extends HttpServlet {
 
       jg.writeStartObject();
       jg.writeStringField("name", oname.toString());
-      
+      if (descriptionStr != null && descriptionStr.length() > 0) {
+        jg.writeStringField("description", descriptionStr);
+      }
       jg.writeStringField("modelerType", code);
-      if ((attribute != null) && (attributeinfo == null)) {
+      if (attribute != null && attributeinfo == null) {
         jg.writeStringField("result", "ERROR");
-        jg.writeStringField("message", "No attribute with name " + attribute
-            + " was found.");
+        jg.writeStringField("message", "No attribute with name " + attribute + " was found.");
         jg.writeEndObject();
         jg.writeEndArray();
         jg.close();
@@ -316,11 +324,11 @@ public class JMXJsonServlet extends HttpServlet {
       }
       
       if (attribute != null) {
-        writeAttribute(jg, attribute, attributeinfo);
+        writeAttribute(jg, attribute, descriptionStr, attributeinfo);
       } else {
         MBeanAttributeInfo attrs[] = minfo.getAttributes();
         for (int i = 0; i < attrs.length; i++) {
-          writeAttribute(jg, oname, attrs[i]);
+          writeAttribute(jg, oname, description, attrs[i]);
         }
       }
       jg.writeEndObject();
@@ -328,17 +336,18 @@ public class JMXJsonServlet extends HttpServlet {
     jg.writeEndArray();
   }
 
-  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr)
+  private void writeAttribute(JsonGenerator jg, ObjectName oname, final boolean description,
+      MBeanAttributeInfo attr)
   throws IOException {
     if (!attr.isReadable()) {
       return;
     }
     String attName = attr.getName();
+    String descriptionStr = description? attr.getDescription(): null;
     if ("modelerType".equals(attName)) {
       return;
     }
-    if (attName.indexOf("=") >= 0 || attName.indexOf(":") >= 0
-        || attName.indexOf(" ") >= 0) {
+    if (attName.indexOf("=") >= 0 || attName.indexOf(":") >= 0 || attName.indexOf(" ") >= 0) {
       return;
     }
     Object value = null;
@@ -387,15 +396,29 @@ public class JMXJsonServlet extends HttpServlet {
       return;
     }
 
-    writeAttribute(jg, attName, value);
+    writeAttribute(jg, attName, descriptionStr, value);
   }
   
-  private void writeAttribute(JsonGenerator jg, String attName, Object value) throws IOException {
-    jg.writeFieldName(attName);
-    writeObject(jg, value);
+  private void writeAttribute(JsonGenerator jg, String attName, final String descriptionStr,
+      Object value)
+  throws IOException {
+    System.out.println("attName=" + attName + " " + value);
+    boolean description = false;
+    if (descriptionStr != null && descriptionStr.length() > 0) {
+      description = true;
+      jg.writeFieldName("name");
+      jg.writeString(attName);
+      jg.writeFieldName("description");
+      jg.writeString(descriptionStr);
+      jg.writeFieldName("value");
+    } else {
+      jg.writeFieldName(attName);
+    }
+    writeObject(jg, description, value);
   }
   
-  private void writeObject(JsonGenerator jg, Object value) throws IOException {
+  private void writeObject(JsonGenerator jg, final boolean description, Object value)
+  throws IOException {
     if(value == null) {
       jg.writeNull();
     } else {
@@ -405,7 +428,7 @@ public class JMXJsonServlet extends HttpServlet {
         int len = Array.getLength(value);
         for (int j = 0; j < len; j++) {
           Object item = Array.get(value, j);
-          writeObject(jg, item);
+          writeObject(jg, description, item);
         }
         jg.writeEndArray();
       } else if(value instanceof Number) {
@@ -419,15 +442,15 @@ public class JMXJsonServlet extends HttpServlet {
         CompositeType comp = cds.getCompositeType();
         Set<String> keys = comp.keySet();
         jg.writeStartObject();
-        for(String key: keys) {
-          writeAttribute(jg, key, cds.get(key));
+        for (String key: keys) {
+         // writeAttribute(jg, key, description? comp.getDescription(): null, cds.get(key));
         }
         jg.writeEndObject();
       } else if(value instanceof TabularData) {
         TabularData tds = (TabularData)value;
         jg.writeStartArray();
         for(Object entry : tds.values()) {
-          writeObject(jg, entry);
+          writeObject(jg, description, entry);
         }
         jg.writeEndArray();
       } else {
@@ -435,4 +458,4 @@ public class JMXJsonServlet extends HttpServlet {
       }
     }
   }
-}
+}
\ No newline at end of file
