diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/security/access/AccessControlClient.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/security/access/AccessControlClient.java
index f571acf..d4ccb6e 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/security/access/AccessControlClient.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/security/access/AccessControlClient.java
@@ -23,8 +23,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.classification.InterfaceStability;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HTableDescriptor;
@@ -32,6 +30,8 @@ import org.apache.hadoop.hbase.MasterNotRunningException;
 import org.apache.hadoop.hbase.NamespaceDescriptor;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceStability;
 import org.apache.hadoop.hbase.client.HBaseAdmin;
 import org.apache.hadoop.hbase.client.HTable;
 import org.apache.hadoop.hbase.client.coprocessor.Batch;
@@ -121,6 +121,36 @@ public class AccessControlClient {
     }
   }
 
+  private static BlockingInterface getAccessControlServiceStub(Configuration conf, HTable ht) throws IOException {
+    TableName aclTableName =
+       TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, "acl");
+    ht = new HTable(conf, aclTableName.getName());
+    CoprocessorRpcChannel service = ht.coprocessorService(HConstants.EMPTY_START_ROW);
+    BlockingInterface protocol =
+       AccessControlProtos.AccessControlService.newBlockingStub(service);
+    return protocol;
+  }
+
+  /**
+   * Grants permission on the specified namespace for the specified user.
+   * @param conf
+   * @param namespace
+   * @param userName
+   * @param actions
+   * @throws Throwable
+   */
+  public static void grant(Configuration conf, final String namespace,
+      final String userName, final Permission.Action... actions) throws Throwable {
+    HTable ht = null;
+    try {
+      ProtobufUtil.grant(getAccessControlServiceStub(conf, ht), userName, namespace, actions);
+    } finally {
+      if (ht != null) {
+        ht.close();
+      }
+    }
+  }
+
   public static boolean isAccessControllerRunning(Configuration conf)
       throws MasterNotRunningException, ZooKeeperConnectionException, IOException {
     TableName aclTableName = TableName
@@ -202,6 +232,26 @@ public class AccessControlClient {
   }
 
   /**
+   * Revokes the permission on the table for the specified user.
+   * @param conf
+   * @param namespace
+   * @param userName
+   * @param actions
+   * @throws Throwable
+   */
+  public static void revoke(Configuration conf, final String namespace,
+    final String userName, final Permission.Action... actions) throws Throwable {
+    HTable ht = null;
+    try {
+      ProtobufUtil.revoke(getAccessControlServiceStub(conf, ht), userName, namespace, actions);
+    } finally {
+      if (ht != null) {
+        ht.close();
+      }
+    }
+  }
+
+  /**
    * List all the userPermissions matching the given pattern.
    * @param conf
    * @param tableRegex The regular expression string to match against
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java
index 046960e..2b5aa76 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java
@@ -96,7 +96,6 @@ import org.apache.hadoop.hbase.security.access.Permission.Action;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.JVMClusterUtil;
 import org.apache.hadoop.hbase.util.TestTableName;
-import org.apache.hadoop.hbase.security.access.AccessControlClient;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 import org.junit.After;
@@ -2158,4 +2157,68 @@ public class TestAccessController extends SecureTestUtil {
     verifyDenied(putWithReservedTag, USER_OWNER, USER_ADMIN, USER_CREATE, USER_RW, USER_RO);
   }
 
+  @Test
+  public void testAccessControlClientGrantOnNameSpace() throws Exception {
+    // Create user for testing, who has no READ privileges by default.
+    User testNsGrant = User.createUserForTesting(conf, "testNsGrant", new String[0]);
+    AccessTestAction getAction = new AccessTestAction() {
+      @Override
+      public Object run() throws Exception {
+        HTable t = new HTable(conf, TEST_TABLE.getTableName());
+        try {
+          return t.get(new Get(TEST_ROW));
+        } finally {
+          t.close();
+        }
+      }
+    };
+
+    verifyDenied(getAction, testNsGrant);
+
+    // Grant namespace READ to testNsGrant, this should supersede any table permissions
+    try {
+      AccessControlClient.grant(TEST_UTIL.getConfiguration(), TEST_TABLE.getTableName().getNamespaceAsString(),
+         testNsGrant.getShortName(),
+         Permission.Action.READ);
+    } catch (Throwable e) {
+      LOG.error("error during call of AccessControlClient.grant. " + e.getStackTrace());
+    }
+
+    // Now testNsGrant should be able to read also
+    verifyAllowed(getAction, testNsGrant);
+  }
+
+  @Test
+  public void testAccessControlClientRevokeOnNameSpace() throws Exception {
+    // Create user for testing, and grant READ privileges on our test table.
+    User testNsRevoke = User.createUserForTesting(conf, "testNsRevoke", new String[0]);
+    grantOnNamespace(TEST_UTIL, testNsRevoke.getShortName(),
+       TEST_TABLE.getTableName().getNamespaceAsString(),
+       Permission.Action.READ);
+
+    AccessTestAction getAction = new AccessTestAction() {
+      @Override
+      public Object run() throws Exception {
+        HTable t = new HTable(conf, TEST_TABLE.getTableName());
+        try {
+          return t.get(new Get(TEST_ROW));
+        } finally {
+          t.close();
+        }
+      }
+    };
+    verifyAllowed(getAction, testNsRevoke);
+
+    // Revoke namespace READ to testNsRevoke.
+    try {
+      AccessControlClient.revoke(conf, TEST_TABLE.getTableName().getNamespaceAsString(),
+         testNsRevoke.getShortName(), Permission.Action.READ);
+    } catch (Throwable e) {
+      LOG.error("error during call of AccessControlClient.revoke " + e.getStackTrace());
+    }
+
+    // Now testNsRevoke shouldn't be able read
+    verifyDenied(getAction, testNsRevoke);
+  }
+
 }
