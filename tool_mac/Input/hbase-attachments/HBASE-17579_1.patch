From 8763de7fbd14f03a0903bd5fd1221d920f07bc83 Mon Sep 17 00:00:00 2001
From: Ashu Pachauri <ashu210890@gmail.com>
Date: Wed, 1 Feb 2017 14:44:03 -0800
Subject: [PATCH] HBASE-17579: Backport HBASE-16302 to 1.3.1

---
 .../MetricsReplicationGlobalSourceSource.java      | 12 +++++--
 .../MetricsReplicationSinkSourceImpl.java          | 12 +++++--
 .../MetricsReplicationSourceSourceImpl.java        | 12 +++++--
 .../metrics2/lib/DynamicMetricsRegistry.java       | 38 ++++++++++++++++++++++
 .../hadoop/metrics2/lib/MutableHistogram.java      |  4 +++
 5 files changed, 69 insertions(+), 9 deletions(-)

diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationGlobalSourceSource.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationGlobalSourceSource.java
index 367c49b..f3a4ae5 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationGlobalSourceSource.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationGlobalSourceSource.java
@@ -20,11 +20,14 @@ package org.apache.hadoop.hbase.replication.regionserver;
 
 import org.apache.hadoop.metrics2.lib.MutableFastCounter;
 import org.apache.hadoop.metrics2.lib.MutableGaugeLong;
+import org.apache.hadoop.metrics2.lib.MutableHistogram;
 
 public class MetricsReplicationGlobalSourceSource implements MetricsReplicationSourceSource{
   private final MetricsReplicationSourceImpl rms;
 
+  @Deprecated
   private final MutableGaugeLong ageOfLastShippedOpGauge;
+  private final MutableHistogram ageOfLastShippedOpHist;
   private final MutableGaugeLong sizeOfLogQueueGauge;
   private final MutableFastCounter logReadInEditsCounter;
   private final MutableFastCounter logEditsFilteredCounter;
@@ -47,7 +50,9 @@ public class MetricsReplicationGlobalSourceSource implements MetricsReplicationS
   public MetricsReplicationGlobalSourceSource(MetricsReplicationSourceImpl rms) {
     this.rms = rms;
 
-    ageOfLastShippedOpGauge = rms.getMetricsRegistry().getGauge(SOURCE_AGE_OF_LAST_SHIPPED_OP, 0L);
+    ageOfLastShippedOpHist = rms.getMetricsRegistry().getHistogram(SOURCE_AGE_OF_LAST_SHIPPED_OP);
+    ageOfLastShippedOpGauge = rms.getMetricsRegistry()
+        .getCompatibilityRegistry().getGauge(SOURCE_AGE_OF_LAST_SHIPPED_OP, 0L);
 
     sizeOfLogQueueGauge = rms.getMetricsRegistry().getGauge(SOURCE_SIZE_OF_LOG_QUEUE, 0L);
 
@@ -80,7 +85,8 @@ public class MetricsReplicationGlobalSourceSource implements MetricsReplicationS
   }
 
   @Override public void setLastShippedAge(long age) {
-    ageOfLastShippedOpGauge.set(age);
+    ageOfLastShippedOpHist.add(age);
+    ageOfLastShippedOpGauge.set(getLastShippedAge());
   }
 
   @Override public void incrSizeOfLogQueue(int size) {
@@ -137,7 +143,7 @@ public class MetricsReplicationGlobalSourceSource implements MetricsReplicationS
 
   @Override
   public long getLastShippedAge() {
-    return ageOfLastShippedOpGauge.value();
+    return ageOfLastShippedOpHist.getMax();
   }
 
   @Override public void incrHFilesShipped(long hfiles) {
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSinkSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSinkSourceImpl.java
index 540212a..5511009 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSinkSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSinkSourceImpl.java
@@ -20,23 +20,29 @@ package org.apache.hadoop.hbase.replication.regionserver;
 
 import org.apache.hadoop.metrics2.lib.MutableFastCounter;
 import org.apache.hadoop.metrics2.lib.MutableGaugeLong;
+import org.apache.hadoop.metrics2.lib.MutableHistogram;
 
 public class MetricsReplicationSinkSourceImpl implements MetricsReplicationSinkSource {
 
+  @Deprecated
   private final MutableGaugeLong ageGauge;
+  private final MutableHistogram ageHist;
   private final MutableFastCounter batchesCounter;
   private final MutableFastCounter opsCounter;
   private final MutableFastCounter hfilesCounter;
 
   public MetricsReplicationSinkSourceImpl(MetricsReplicationSourceImpl rms) {
-    ageGauge = rms.getMetricsRegistry().getGauge(SINK_AGE_OF_LAST_APPLIED_OP, 0L);
+    ageGauge = rms.getMetricsRegistry().
+        getCompatibilityRegistry().getGauge(SINK_AGE_OF_LAST_APPLIED_OP, 0L);
+    ageHist = rms.getMetricsRegistry().getHistogram(SINK_AGE_OF_LAST_APPLIED_OP);
     batchesCounter = rms.getMetricsRegistry().getCounter(SINK_APPLIED_BATCHES, 0L);
     opsCounter = rms.getMetricsRegistry().getCounter(SINK_APPLIED_OPS, 0L);
     hfilesCounter = rms.getMetricsRegistry().getCounter(SINK_APPLIED_HFILES, 0L);
   }
 
   @Override public void setLastAppliedOpAge(long age) {
-    ageGauge.set(age);
+    ageHist.add(age);
+    ageGauge.set(getLastAppliedOpAge());
   }
 
   @Override public void incrAppliedBatches(long batches) {
@@ -49,7 +55,7 @@ public class MetricsReplicationSinkSourceImpl implements MetricsReplicationSinkS
 
   @Override
   public long getLastAppliedOpAge() {
-    return ageGauge.value();
+    return ageHist.getMax();
   }
 
   @Override
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSourceSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSourceSourceImpl.java
index f3e6533..3424845 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSourceSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/replication/regionserver/MetricsReplicationSourceSourceImpl.java
@@ -19,6 +19,7 @@ package org.apache.hadoop.hbase.replication.regionserver;
 
 import org.apache.hadoop.metrics2.lib.MutableFastCounter;
 import org.apache.hadoop.metrics2.lib.MutableGaugeLong;
+import org.apache.hadoop.metrics2.lib.MutableHistogram;
 
 public class MetricsReplicationSourceSourceImpl implements MetricsReplicationSourceSource {
 
@@ -38,7 +39,9 @@ public class MetricsReplicationSourceSourceImpl implements MetricsReplicationSou
   private final String shippedHFilesKey;
   private final String sizeOfHFileRefsQueueKey;
 
+  @Deprecated
   private final MutableGaugeLong ageOfLastShippedOpGauge;
+  private final MutableHistogram ageOfLastShippedOpHist;
   private final MutableGaugeLong sizeOfLogQueueGauge;
   private final MutableFastCounter logReadInEditsCounter;
   private final MutableFastCounter logEditsFilteredCounter;
@@ -71,7 +74,9 @@ public class MetricsReplicationSourceSourceImpl implements MetricsReplicationSou
     this.keyPrefix = "source." + this.id + ".";
 
     ageOfLastShippedOpKey = "source." + id + ".ageOfLastShippedOp";
-    ageOfLastShippedOpGauge = rms.getMetricsRegistry().getGauge(ageOfLastShippedOpKey, 0L);
+    ageOfLastShippedOpHist = rms.getMetricsRegistry().getHistogram(ageOfLastShippedOpKey);
+    ageOfLastShippedOpGauge = rms.getMetricsRegistry()
+        .getCompatibilityRegistry().getGauge(ageOfLastShippedOpKey, 0L);
 
     sizeOfLogQueueKey = "source." + id + ".sizeOfLogQueue";
     sizeOfLogQueueGauge = rms.getMetricsRegistry().getGauge(sizeOfLogQueueKey, 0L);
@@ -126,7 +131,8 @@ public class MetricsReplicationSourceSourceImpl implements MetricsReplicationSou
   }
 
   @Override public void setLastShippedAge(long age) {
-    ageOfLastShippedOpGauge.set(age);
+    ageOfLastShippedOpHist.add(age);
+    ageOfLastShippedOpGauge.set(getLastShippedAge());
   }
 
   @Override public void incrSizeOfLogQueue(int size) {
@@ -192,7 +198,7 @@ public class MetricsReplicationSourceSourceImpl implements MetricsReplicationSou
 
   @Override
   public long getLastShippedAge() {
-    return ageOfLastShippedOpGauge.value();
+    return ageOfLastShippedOpHist.getMax();
   }
 
   @Override
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/DynamicMetricsRegistry.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/DynamicMetricsRegistry.java
index 977536a..02acca8 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/DynamicMetricsRegistry.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/DynamicMetricsRegistry.java
@@ -19,6 +19,7 @@
 package org.apache.hadoop.metrics2.lib;
 
 import java.util.Collection;
+import java.util.Map;
 import java.util.concurrent.ConcurrentMap;
 
 import org.apache.commons.logging.Log;
@@ -53,6 +54,7 @@ public class DynamicMetricsRegistry {
       Maps.newConcurrentMap();
   private final ConcurrentMap<String, MetricsTag> tagsMap =
       Maps.newConcurrentMap();
+  private CompatibilityRegistry compatibilityRegistry;
   private final MetricsInfo metricsInfo;
   private final DefaultMetricsSystemHelper helper = new DefaultMetricsSystemHelper();
   private final static String[] histogramSuffixes = new String[]{
@@ -79,6 +81,7 @@ public class DynamicMetricsRegistry {
    */
   public DynamicMetricsRegistry(MetricsInfo info) {
     metricsInfo = info;
+    compatibilityRegistry = new CompatibilityRegistry();
   }
 
   /**
@@ -391,6 +394,7 @@ public class DynamicMetricsRegistry {
     for (MutableMetric metric : metrics()) {
       metric.snapshot(builder, all);
     }
+    compatibilityRegistry.snapshot(builder, all);
   }
 
   @Override public String toString() {
@@ -530,4 +534,38 @@ public class DynamicMetricsRegistry {
     }
     metricsMap.clear();
   }
+
+  public CompatibilityRegistry getCompatibilityRegistry() {
+    return this.compatibilityRegistry;
+  }
+
+  /**
+   * Provides compatibility interface for metrics type changes across HBase releases.
+   */
+  public class CompatibilityRegistry {
+
+    private Map<String, MutableGaugeLong> gaugesMap = Maps.newConcurrentMap();
+
+    public MutableGaugeLong getGauge(final String gaugeName, long potentialStartingValue) {
+      // Check if it's there already in the main registry
+      MutableMetric metric = metricsMap.get(gaugeName);
+      if (metric != null && metric instanceof MutableGaugeLong) {
+        return (MutableGaugeLong)metric;
+      } else {
+        // If it's not present in the main registry, reference the compatibility registry
+        MutableGaugeLong gauge = gaugesMap.get(gaugeName);
+        if (gauge == null) {
+          gauge = new MutableGaugeLong(new MetricsInfoImpl(gaugeName, ""), potentialStartingValue);
+          gaugesMap.putIfAbsent(gaugeName, gauge);
+        }
+        return gauge;
+      }
+    }
+
+    public void snapshot(MetricsRecordBuilder builder, boolean all) {
+      for (MutableGaugeLong gauge: gaugesMap.values()) {
+        gauge.snapshot(builder, all);
+      }
+    }
+  }
 }
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java
index a1cf933..1b8dab8 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java
@@ -76,6 +76,10 @@ public class MutableHistogram extends MutableMetric implements MetricHistogram {
     histogram.add(val, 1);
   }
 
+  public long getMax() {
+    return histogram.getMax();
+  }
+
   @Override
   public synchronized void snapshot(MetricsRecordBuilder metricsRecordBuilder, boolean all) {
     // Get a reference to the old histogram.
-- 
2.8.0-rc2
