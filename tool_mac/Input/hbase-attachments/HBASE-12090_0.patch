diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java
index 8aafab6..423effd 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java
@@ -40,6 +40,7 @@ import java.util.Iterator;
 import java.util.List;
 
 import com.google.protobuf.ByteString;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -784,13 +785,17 @@ public class Bytes implements Comparable<Bytes> {
   public static long toLong(byte[] bytes, int offset, final int length) {
     if (length != SIZEOF_LONG || offset + length > bytes.length) {
       throw explainWrongLengthOrOffset(bytes, offset, length, SIZEOF_LONG);
+    }    
+    if(LexicographicalComparerHolder.UnsafeComparer.isAvailable()){
+      return toLongUnsafe(bytes, offset);
+    } else{
+      long l = 0;
+      for(int i = offset; i < offset + length; i++) {
+        l <<= 8;
+        l ^= bytes[i] & 0xFF;
+      }
+      return l;
     }
-    long l = 0;
-    for(int i = offset; i < offset + length; i++) {
-      l <<= 8;
-      l ^= bytes[i] & 0xFF;
-    }
-    return l;
   }
 
   private static IllegalArgumentException
@@ -822,6 +827,9 @@ public class Bytes implements Comparable<Bytes> {
       throw new IllegalArgumentException("Not enough room to put a long at"
           + " offset " + offset + " in a " + bytes.length + " byte array");
     }
+    if (LexicographicalComparerHolder.UnsafeComparer.isAvailable()){
+      return putLongUnsafe(bytes, offset, val);
+    }
     for(int i = offset + 7; i > offset; i--) {
       bytes[i] = (byte) val;
       val >>>= 8;
@@ -829,7 +837,24 @@ public class Bytes implements Comparable<Bytes> {
     bytes[offset] = (byte) val;
     return offset + SIZEOF_LONG;
   }
-
+  
+  /**
+   * Put a long value out to the specified byte array position (Unsafe).
+   * @param bytes the byte array
+   * @param offset position in the array
+   * @param val long to write out
+   * @return incremented offset
+   */  
+  public static int putLongUnsafe(byte[] bytes, int offset, long val)
+  {
+    if (LexicographicalComparerHolder.UnsafeComparer.littleEndian){
+      val = Long.reverseBytes(val);
+    }
+    LexicographicalComparerHolder.UnsafeComparer.theUnsafe.putLong(bytes, (long) offset + 
+      LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET , val);    
+    return offset + SIZEOF_LONG;
+  }
+  
   /**
    * Presumes float encoded as IEEE 754 floating-point "single format"
    * @param bytes byte array
@@ -956,15 +981,67 @@ public class Bytes implements Comparable<Bytes> {
     if (length != SIZEOF_INT || offset + length > bytes.length) {
       throw explainWrongLengthOrOffset(bytes, offset, length, SIZEOF_INT);
     }
-    int n = 0;
-    for(int i = offset; i < (offset + length); i++) {
-      n <<= 8;
-      n ^= bytes[i] & 0xFF;
+    if (LexicographicalComparerHolder.UnsafeComparer.isAvailable()){
+      return toIntUnsafe(bytes, offset);
+    } else{    
+      int n = 0;
+      for(int i = offset; i < (offset + length); i++) {
+        n <<= 8;
+        n ^= bytes[i] & 0xFF;
+      }
+      return n;
+    }
+  }
+  
+  /**
+   * Converts a byte array to an int value (Unsafe version)
+   * @param bytes byte array
+   * @param offset offset into array
+   * @return the int value
+   */
+  public static int toIntUnsafe(byte[] bytes, int offset) {
+    if(LexicographicalComparerHolder.UnsafeComparer.littleEndian){
+      return Integer.reverseBytes(LexicographicalComparerHolder.UnsafeComparer.theUnsafe.getInt(
+        bytes, (long)offset + LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET));
+    } else{
+      return LexicographicalComparerHolder.UnsafeComparer.theUnsafe.getInt(bytes, 
+        (long) offset + LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET);
     }
-    return n;
   }
 
   /**
+   * Converts a byte array to an short value (Unsafe version)
+   * @param bytes byte array
+   * @param offset offset into array
+   * @return the short value
+   */  
+  public static short toShortUnsafe(byte[] bytes, int offset) {
+    if (LexicographicalComparerHolder.UnsafeComparer.littleEndian){
+      return Short.reverseBytes(LexicographicalComparerHolder.UnsafeComparer.theUnsafe.getShort(
+        bytes, (long)offset + LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET));
+    } else{
+      return LexicographicalComparerHolder.UnsafeComparer.theUnsafe.getShort(bytes, 
+        (long) offset + LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET);
+    }
+  }
+
+  /**
+   * Converts a byte array to an long value (Unsafe version)
+   * @param bytes byte array
+   * @param offset offset into array
+   * @return the long value
+   */   
+  public static long toLongUnsafe(byte[] bytes, int offset) {
+    if(LexicographicalComparerHolder.UnsafeComparer.littleEndian){
+      return Long.reverseBytes(LexicographicalComparerHolder.UnsafeComparer.theUnsafe.getLong(bytes, 
+        (long) offset + LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET));
+    } else{
+      return LexicographicalComparerHolder.UnsafeComparer.theUnsafe.getLong(bytes, 
+        (long) offset + LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET);
+    }
+  }
+  
+  /**
    * Converts a byte array to an int value
    * @param bytes byte array
    * @param offset offset into array
@@ -999,15 +1076,36 @@ public class Bytes implements Comparable<Bytes> {
     if (bytes.length - offset < SIZEOF_INT) {
       throw new IllegalArgumentException("Not enough room to put an int at"
           + " offset " + offset + " in a " + bytes.length + " byte array");
+    }    
+    if (LexicographicalComparerHolder.UnsafeComparer.isAvailable()){
+      return putIntUnsafe(bytes, offset, val);
+    } else{    
+      for(int i= offset + 3; i > offset; i--) {
+        bytes[i] = (byte) val;
+        val >>>= 8;
+      }
+      bytes[offset] = (byte) val;
+      return offset + SIZEOF_INT;
     }
-    for(int i= offset + 3; i > offset; i--) {
-      bytes[i] = (byte) val;
-      val >>>= 8;
+  }
+  
+  /**
+   * Put an int value out to the specified byte array position (Unsafe).
+   * @param bytes the byte array
+   * @param offset position in the array
+   * @param val int to write out
+   * @return incremented offset
+   */
+  public static int putIntUnsafe(byte[] bytes, int offset, int val)
+  {
+    if (LexicographicalComparerHolder.UnsafeComparer.littleEndian){
+      val = Integer.reverseBytes(val);
     }
-    bytes[offset] = (byte) val;
+    LexicographicalComparerHolder.UnsafeComparer.theUnsafe.putInt(bytes, (long) offset + 
+      LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET , val);    
     return offset + SIZEOF_INT;
-  }
-
+  }  
+  
   /**
    * Convert a short value to a byte array of {@link #SIZEOF_SHORT} bytes long.
    * @param val value
@@ -1027,7 +1125,7 @@ public class Bytes implements Comparable<Bytes> {
    * @return the short value
    */
   public static short toShort(byte[] bytes) {
-    return toShort(bytes, 0, SIZEOF_SHORT);
+    return toShortUnsafe(bytes, 0);
   }
 
   /**
@@ -1052,12 +1150,16 @@ public class Bytes implements Comparable<Bytes> {
   public static short toShort(byte[] bytes, int offset, final int length) {
     if (length != SIZEOF_SHORT || offset + length > bytes.length) {
       throw explainWrongLengthOrOffset(bytes, offset, length, SIZEOF_SHORT);
+    }    
+    if (LexicographicalComparerHolder.UnsafeComparer.isAvailable()){
+      return toShortUnsafe(bytes, offset);
+    } else{    
+      short n = 0;
+      n ^= bytes[offset] & 0xFF;
+      n <<= 8;
+      n ^= bytes[offset+1] & 0xFF;
+      return n;
     }
-    short n = 0;
-    n ^= bytes[offset] & 0xFF;
-    n <<= 8;
-    n ^= bytes[offset+1] & 0xFF;
-    return n;
   }
 
   /**
@@ -1092,7 +1194,24 @@ public class Bytes implements Comparable<Bytes> {
     bytes[offset] = (byte) val;
     return offset + SIZEOF_SHORT;
   }
-
+  
+  /**
+   * Put a short value out to the specified byte array position (Unsafe).
+   * @param bytes the byte array
+   * @param offset position in the array
+   * @param val short to write out
+   * @return incremented offset
+   */
+  public static int putShortUnsafe(byte[] bytes, int offset, short val)
+  {
+    if (LexicographicalComparerHolder.UnsafeComparer.littleEndian){
+      val = Short.reverseBytes(val);
+    }
+    LexicographicalComparerHolder.UnsafeComparer.theUnsafe.putShort(bytes, (long) offset + 
+      LexicographicalComparerHolder.UnsafeComparer.BYTE_ARRAY_BASE_OFFSET , val);    
+    return offset + SIZEOF_SHORT;
+  }  
+  
   /**
    * Put an int value as short out to the specified byte array position. Only the lower 2 bytes of
    * the short will be put into the array. The caller of the API need to make sure they will not
@@ -1397,12 +1516,37 @@ public class Bytes implements Comparable<Bytes> {
 
       /**
        * Returns true if x1 is less than x2, when both values are treated as
-       * unsigned.
+       * unsigned long.
        */
-      static boolean lessThanUnsigned(long x1, long x2) {
+      static boolean lessThanUnsignedLong(long x1, long x2) {
         return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);
       }
-
+      
+      /**
+       * Returns true if x1 is less than x2, when both values are treated as
+       * unsigned int.
+       */      
+      static boolean lessThanUnsignedInt(int x1, int x2) {
+        return (x1 & 0xffffffffL) < (x2 & 0xffffffffL);
+      }      
+      /**
+       * Returns true if x1 is less than x2, when both values are treated as
+       * unsigned short.
+       */
+      
+      static boolean lessThanUnsignedShort(short x1, short x2) {
+        return (x1 & 0xffff) < (x2 & 0xffff);
+      }             
+      
+      /**
+       * Checks if Unsafe is available
+       * @return true, if available, false - otherwise
+       */
+      public static boolean isAvailable()
+      {
+        return theUnsafe != null;
+      }
+      
       /**
        * Lexicographically compare two arrays.
        *
@@ -1417,16 +1561,17 @@ public class Bytes implements Comparable<Bytes> {
       @Override
       public int compareTo(byte[] buffer1, int offset1, int length1,
           byte[] buffer2, int offset2, int length2) {
+        
         // Short circuit equal case
         if (buffer1 == buffer2 &&
             offset1 == offset2 &&
             length1 == length2) {
           return 0;
         }
-        int minLength = Math.min(length1, length2);
-        int minWords = minLength / SIZEOF_LONG;
-        int offset1Adj = offset1 + BYTE_ARRAY_BASE_OFFSET;
-        int offset2Adj = offset2 + BYTE_ARRAY_BASE_OFFSET;
+        final int minLength = Math.min(length1, length2);
+        final int minWords = minLength / SIZEOF_LONG;
+        final long offset1Adj = offset1 + BYTE_ARRAY_BASE_OFFSET;
+        final long offset2Adj = offset2 + BYTE_ARRAY_BASE_OFFSET;
 
         /*
          * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a
@@ -1437,40 +1582,43 @@ public class Bytes implements Comparable<Bytes> {
           long lw = theUnsafe.getLong(buffer1, offset1Adj + (long) i);
           long rw = theUnsafe.getLong(buffer2, offset2Adj + (long) i);
           long diff = lw ^ rw;
-
+          if(littleEndian){
+            lw = Long.reverseBytes(lw);
+            rw = Long.reverseBytes(rw);
+          }
           if (diff != 0) {
-            if (!littleEndian) {
-              return lessThanUnsigned(lw, rw) ? -1 : 1;
-            }
-
-            // Use binary search
-            int n = 0;
-            int y;
-            int x = (int) diff;
-            if (x == 0) {
-              x = (int) (diff >>> 32);
-              n = 32;
-            }
-
-            y = x << 16;
-            if (y == 0) {
-              n += 16;
-            } else {
-              x = y;
-            }
-
-            y = x << 8;
-            if (y == 0) {
-              n += 8;
-            }
-            return (int) (((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));
+              return lessThanUnsignedLong(lw, rw) ? -1 : 1;         
           }
-        }
-
-        // The epilogue to cover the last (minLength % 8) elements.
-        for (int i = minWords * SIZEOF_LONG; i < minLength; i++) {
-          int a = (buffer1[offset1 + i] & 0xff);
-          int b = (buffer2[offset2 + i] & 0xff);
+        }                
+        int offset = minWords * SIZEOF_LONG;
+        
+        if( minLength - offset >= SIZEOF_INT){
+          int il = theUnsafe.getInt(buffer1, offset1Adj + offset);
+          int ir = theUnsafe.getInt(buffer2, offset2Adj + offset);
+          if(littleEndian){
+            il = Integer.reverseBytes(il);
+            ir = Integer.reverseBytes(ir);
+          }
+          if(il != ir){
+            return lessThanUnsignedInt(il, ir) ? -1: 1;
+          }
+           offset += SIZEOF_INT;
+        }        
+        if( minLength - offset >= SIZEOF_SHORT){
+          short sl = theUnsafe.getShort(buffer1, offset1Adj + offset);
+          short sr = theUnsafe.getShort(buffer2, offset2Adj + offset);
+          if(littleEndian){
+            sl = Short.reverseBytes(sl);
+            sr = Short.reverseBytes(sr);
+          }
+          if(sl != sr){
+            return lessThanUnsignedShort(sl, sr) ? -1: 1;
+          }
+          offset += SIZEOF_SHORT;
+        }        
+        if( minLength - offset == 1){
+          int a = (buffer1[(int)(offset1 + offset)] & 0xff);
+          int b = (buffer2[(int)(offset2 + offset)] & 0xff);
           if (a != b) {
             return a - b;
           }
