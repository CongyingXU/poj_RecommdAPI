From 6922bd66d01da2614bb9101191817472c94eadcc Mon Sep 17 00:00:00 2001
From: leochen4891 <leochen4891@gmail.com>
Date: Wed, 10 Jun 2015 18:22:32 -0400
Subject: [PATCH 1/5] moved code to a non-master branch

---
 conf/hbase-env.sh                                  |   9 +-
 conf/hbase-site.xml                                |  31 ++++
 conf/jmxremote.access                              |   2 +
 conf/jmxremote.passwd                              |   2 +
 go.sh                                              |   5 +
 .../balancer/MetricsStochasticBalancerSource.java  |   6 +
 .../MetricsStochasticBalancerSourceImpl.java       |  53 +++++++
 ...master.balancer.MetricsStochasticBalancerSource |   1 +
 hbase-server/go.sh                                 |   6 +
 .../hbase/master/balancer/BaseLoadBalancer.java    |  52 ++++++-
 .../hbase/master/balancer/MetricsBalancer.java     |   6 +-
 .../master/balancer/MetricsStochasticBalancer.java |  40 +++++
 .../master/balancer/StochasticLoadBalancer.java    |  94 ++++++++++-
 .../hbase/TestStochasticBalancerJmxMetrics.java    | 171 +++++++++++++++++++++
 14 files changed, 471 insertions(+), 7 deletions(-)
 create mode 100644 conf/jmxremote.access
 create mode 100644 conf/jmxremote.passwd
 create mode 100644 go.sh
 create mode 100644 hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSource.java
 create mode 100644 hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSourceImpl.java
 create mode 100644 hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.master.balancer.MetricsStochasticBalancerSource
 create mode 100644 hbase-server/go.sh
 create mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java
 create mode 100644 hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java

diff --git a/conf/hbase-env.sh b/conf/hbase-env.sh
index 58b2ed4..102b1da 100644
--- a/conf/hbase-env.sh
+++ b/conf/hbase-env.sh
@@ -90,6 +90,13 @@ export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:M
 # export HBASE_ZOOKEEPER_OPTS="$HBASE_ZOOKEEPER_OPTS $HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104"
 # export HBASE_REST_OPTS="$HBASE_REST_OPTS $HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10105"
 
+HBASE_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false"
+HBASE_JMX_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.password.file=$HBASE_HOME/conf/jmxremote.passwd"
+HBASE_JMX_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.access.file=$HBASE_HOME/conf/jmxremote.access"
+
+export HBASE_MASTER_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.port=10101"
+export HBASE_REGIONSERVER_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.port=10102"
+
 # File naming hosts on which HRegionServers will run.  $HBASE_HOME/conf/regionservers by default.
 # export HBASE_REGIONSERVERS=${HBASE_HOME}/conf/regionservers
 
@@ -127,7 +134,7 @@ export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:M
 # export HBASE_SLAVE_SLEEP=0.1
 
 # Tell HBase whether it should manage it's own instance of Zookeeper or not.
-# export HBASE_MANAGES_ZK=true
+export HBASE_MANAGES_ZK=true
 
 # The default log rolling policy is RFA, where the log file is rolled as per the size defined for the 
 # RFA appender. Please refer to the log4j.properties file to see more details on this appender.
diff --git a/conf/hbase-site.xml b/conf/hbase-site.xml
index c516ac7..510bb7c 100644
--- a/conf/hbase-site.xml
+++ b/conf/hbase-site.xml
@@ -21,4 +21,35 @@
  */
 -->
 <configuration>
+    <property>
+        <name>hbase.rootdir</name>
+        <value>hdfs://ubuntu:9000/hbase</value>
+    </property>
+
+    <property>
+        <name>hbase.cluster.distributed</name>
+        <value>true</value>
+    </property>
+
+    <property>
+        <name>hbase.zookeeper.property.dataDir</name>
+        <value>/home/leochen4891/zookeeper</value>
+    </property>
+
+    <!--property>
+        <name>hbase.zookeeper.property.clientPort</name>
+        <value>2181</value>
+    </property-->
+
+    <property>
+        <name>hbase.zookeeper.quorum</name>
+        <value>ubuntu</value>
+    </property>
+
+    <property>
+        <name>hbase.master.loadbalancer.class</name>
+        <value>org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer</value>
+    </property>
+
 </configuration>
+
diff --git a/conf/jmxremote.access b/conf/jmxremote.access
new file mode 100644
index 0000000..c5aab07
--- /dev/null
+++ b/conf/jmxremote.access
@@ -0,0 +1,2 @@
+monitorRole readonly
+controlRole readwrite
diff --git a/conf/jmxremote.passwd b/conf/jmxremote.passwd
new file mode 100644
index 0000000..a28ed44
--- /dev/null
+++ b/conf/jmxremote.passwd
@@ -0,0 +1,2 @@
+monitorRole monitorpass
+controlRole controlpass
diff --git a/go.sh b/go.sh
new file mode 100644
index 0000000..11b940f
--- /dev/null
+++ b/go.sh
@@ -0,0 +1,5 @@
+mvn clean package -DskipTests
+#bin/start-hbase.sh
+#sleep 5
+#bin/local-regionservers.sh start 2 3 4 
+#bin/hbase shell
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSource.java
new file mode 100644
index 0000000..4129d2d
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSource.java
@@ -0,0 +1,6 @@
+package org.apache.hadoop.hbase.master.balancer;
+
+public interface MetricsStochasticBalancerSource extends MetricsBalancerSource {
+  public void updateStochasticCost(String tableName, String costFunctionName,
+      String costFunctionDesc, Double value);
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSourceImpl.java
new file mode 100644
index 0000000..2abb853
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancerSourceImpl.java
@@ -0,0 +1,53 @@
+package org.apache.hadoop.hbase.master.balancer;
+
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+import org.apache.hadoop.metrics2.lib.Interns;
+
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+public class MetricsStochasticBalancerSourceImpl extends MetricsBalancerSourceImpl implements
+    MetricsStochasticBalancerSource {
+  private static final Log LOG = LogFactory.getLog(MetricsBalancerSourceImpl.class);
+  Map<String, Map<String, Double>> stochasticCosts =
+      new ConcurrentHashMap<String, Map<String, Double>>();
+
+  /**
+   * Save the costs to feed to JMX.
+   */
+  public void updateStochasticCost(String tableName, String costFunctionName,
+      String costFunctionDesc, Double value) {
+    if (null == tableName || null == costFunctionName) {
+      return;
+    }
+
+    Map<String, Double> map = stochasticCosts.get(tableName);
+    if (null == map) {
+      map = new ConcurrentHashMap<String, Double>();
+    }
+
+    map.put(costFunctionName, value);
+    stochasticCosts.put(tableName, map);
+  }
+
+  @Override
+  public void getMetrics(MetricsCollector metricsCollector, boolean all) {
+    MetricsRecordBuilder metricsRecordBuilder = metricsCollector.addRecord(metricsName);
+
+    if (null != stochasticCosts) {
+      for (String tableName : stochasticCosts.keySet()) {
+        Map<String, Double> costs = stochasticCosts.get(tableName);
+        for (String key : costs.keySet()) {
+          double cost = costs.get(key);
+          String attrName = tableName + ((tableName.length() <= 0) ? "" : "_") + key;
+          metricsRecordBuilder.addGauge(Interns.info(attrName, attrName), cost);
+        }
+      }
+    }
+    metricsRegistry.snapshot(metricsRecordBuilder, all);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.master.balancer.MetricsStochasticBalancerSource b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.master.balancer.MetricsStochasticBalancerSource
new file mode 100644
index 0000000..c3edc48
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.master.balancer.MetricsStochasticBalancerSource
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.master.balancer.MetricsStochasticBalancerSourceImpl
\ No newline at end of file
diff --git a/hbase-server/go.sh b/hbase-server/go.sh
new file mode 100644
index 0000000..69e210a
--- /dev/null
+++ b/hbase-server/go.sh
@@ -0,0 +1,6 @@
+cp ~/github/hbase/hbase-hadoop2-compat/target/hbase-hadoop2-compat-2.0.0-SNAPSHOT.jar ~/.m2/repository/org/apache/hbase/hbase-hadoop2-compat/2.0.0-SNAPSHOT/hbase-hadoop2-compat-2.0.0-SNAPSHOT.jar
+cp ~/github/hbase/hbase-hadoop2-compat/target/hbase-hadoop2-compat-2.0.0-SNAPSHOT-sources.jar ~/.m2/repository/org/apache/hbase/hbase-hadoop2-compat/2.0.0-SNAPSHOT/hbase-hadoop2-compat-2.0.0-SNAPSHOT-sources.jar
+
+mvn test -Dtest=org.apache.hadoop.hbase.TestStochasticBalancerJmxMetrics
+vim ./target/surefire-reports/org.apache.hadoop.hbase.TestStochasticBalancerJmxMetrics-output.txt
+
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
index f527931..efa6fb9 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
@@ -15,6 +15,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.hadoop.hbase.master.balancer;
 
 import java.util.ArrayList;
@@ -39,6 +40,8 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.ClusterStatus;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory.SingletonStorage;
 import org.apache.hadoop.hbase.HBaseIOException;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.RegionLoad;
@@ -72,6 +75,14 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
 
   private static final List<HRegionInfo> EMPTY_REGION_LIST = new ArrayList<HRegionInfo>(0);
 
+  /**
+   * The types that the getMetricsBalancer() can return. The type can be set using
+   * setMetricsBalancerType().
+   */
+  public enum MetricsBalancerType {
+    DEFAULT, STOCHASTIC,
+  }
+
   protected final RegionLocationFinder regionFinder = new RegionLocationFinder();
 
   private static class DefaultRackManager extends RackManager {
@@ -803,11 +814,50 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
     "hbase.balancer.tablesOnMaster";
 
   protected final Set<String> tablesOnMaster = new HashSet<String>();
-  protected final MetricsBalancer metricsBalancer = new MetricsBalancer();
   protected ClusterStatus clusterStatus = null;
   protected ServerName masterServerName;
   protected MasterServices services;
 
+  private Object metricsBalancerLock = new Object();
+  private MetricsBalancer metricsBalancer = null;
+  private MetricsBalancerType metricsBalancerType = MetricsBalancerType.DEFAULT;
+
+  /**
+   * Choose what metricsBalancer is used. NOTE: since metrics balancer can only be registered once,
+   * the type will not change after calling getMetricsBalancer
+   */
+  public void setMetricsBalancerType(MetricsBalancerType type) {
+    if (null == metricsBalancer) {
+      synchronized (metricsBalancerLock) {
+        metricsBalancerType = type;
+      }
+    }
+  }
+
+  /**
+   * Get the metricsBalancer of the type metricsBalancerType. The creation of the
+   * instance(registering to the MetricsSystem) only happen once, therefore the type cannot be
+   * changed after creation. NOTE, double null check is for implementing singleton
+   */
+  public MetricsBalancer getMetricsBalancer() {
+    if (null == metricsBalancer) {
+      synchronized (metricsBalancerLock) {
+        if (null == metricsBalancer) {
+          switch (metricsBalancerType) {
+            case STOCHASTIC:
+              metricsBalancer = new MetricsStochasticBalancer();
+              break;
+            case DEFAULT:
+            default:
+              metricsBalancer = new MetricsBalancer();
+          }
+        }
+      }
+    }
+
+    return metricsBalancer;
+  }
+
   /**
    * By default, regions of some small system tables such as meta,
    * namespace, and acl are assigned to the active master. If you don't
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java
index 518c2f0..26613a2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java
@@ -25,9 +25,13 @@ import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
  */
 public class MetricsBalancer {
 
-  private final MetricsBalancerSource source;
+  protected MetricsBalancerSource source = null;
 
   public MetricsBalancer() {
+    initSource();
+  }
+  
+  protected void initSource() {
     source = CompatibilitySingletonFactory.getInstance(MetricsBalancerSource.class);
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java
new file mode 100644
index 0000000..1d23b53
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java
@@ -0,0 +1,40 @@
+package org.apache.hadoop.hbase.master.balancer;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+public class MetricsStochasticBalancer extends MetricsBalancer {
+  /**
+   * Use the stochastic source instead of the default source.
+   */
+  protected MetricsStochasticBalancerSource stochasticSource = null;
+  private static final Log LOG = LogFactory.getLog(MetricsStochasticBalancer.class);
+
+  public MetricsStochasticBalancer() {
+    initSource();
+  }
+
+  /**
+   * This function overrides the initSource in the MetricsBalancer, use
+   * MetricsStochasticBalancerSource instead of the default MetricsBalancerSource.
+   */
+  @Override
+  protected void initSource() {
+    stochasticSource =
+        CompatibilitySingletonFactory.getInstance(MetricsStochasticBalancerSource.class);
+  }
+
+  public void balanceCluster(long time) {
+    stochasticSource.updateBalanceCluster(time);
+  }
+
+  public void incrMiscInvocations() {
+    stochasticSource.incrMiscInvocations();
+  }
+
+  public void updateStochasticCost(String tableName, String costFunctionName,
+      String costFunctionDesc, Double value) {
+    stochasticSource.updateStochasticCost(tableName, costFunctionName, costFunctionDesc, value);
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
index e58f855..3ff9bfd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
@@ -28,6 +28,7 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Random;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -38,6 +39,7 @@ import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.RegionLoad;
 import org.apache.hadoop.hbase.ServerLoad;
 import org.apache.hadoop.hbase.ServerName;
+import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.master.MasterServices;
 import org.apache.hadoop.hbase.master.RegionPlan;
 import org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer.Cluster.Action;
@@ -117,12 +119,24 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
   private CandidateGenerator[] candidateGenerators;
   private CostFromRegionLoadFunction[] regionLoadFunctions;
   private CostFunction[] costFunctions;
+
+  // to save and report costs to JMX
+  private Double curOverallCost;
+  private Double[] lastSubcosts;
+  private Double[] curSubcosts;
+
   // Keep locality based picker and cost function to alert them
   // when new services are offered
   private LocalityBasedCandidateGenerator localityCandidateGenerator;
   private LocalityCostFunction localityCost;
   private RegionReplicaHostCostFunction regionReplicaHostCostFunction;
   private RegionReplicaRackCostFunction regionReplicaRackCostFunction;
+  private MetricsStochasticBalancer metricsStochasticBalancer = null;
+  
+  public StochasticLoadBalancer() {
+    setMetricsBalancerType(MetricsBalancerType.STOCHASTIC);
+    metricsStochasticBalancer = (MetricsStochasticBalancer) getMetricsBalancer();
+  }
 
   @Override
   public void onConfigurationChange(Configuration conf) {
@@ -177,6 +191,10 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
       regionLoadFunctions[2],
       regionLoadFunctions[3],
     };
+    
+    lastSubcosts = new Double[costFunctions.length];
+    curSubcosts = new Double[costFunctions.length];
+
   }
 
   @Override
@@ -277,6 +295,11 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
       // Should this be kept?
       if (newCost < currentCost) {
         currentCost = newCost;
+
+        curOverallCost = currentCost;
+        for (int i = 0; i < this.curSubcosts.length; i++) {
+          curSubcosts[i] = lastSubcosts[i];
+        }
       } else {
         // Put things back the way they were before.
         // TODO: undo by remembering old values
@@ -293,7 +316,7 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
 
     long endTime = EnvironmentEdgeManager.currentTime();
 
-    metricsBalancer.balanceCluster(endTime - startTime);
+    metricsStochasticBalancer.balanceCluster(endTime - startTime);
 
     if (initCost > currentCost) {
       plans = createRegionPlans(cluster);
@@ -304,6 +327,21 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
             + plans.size() + " regions; Going from a computed cost of "
             + initCost + " to a new cost of " + currentCost);
       }
+
+      // send to metrics
+      String tableName = getTableNameFromCluster(clusterState);
+
+      // send values to metrics
+      metricsStochasticBalancer.updateStochasticCost(
+          tableName, "Overall", "Overall cost", curOverallCost);
+
+      for (int i = 0 ; i < costFunctions.length; i++) {
+        CostFunction costFunction = costFunctions[i];
+        String costFunctionName = costFunction.getClass().getSimpleName();
+        metricsStochasticBalancer.updateStochasticCost(
+            tableName, costFunctionName, costFunctionName, curSubcosts[i]);
+      }
+
       return plans;
     }
     if (LOG.isDebugEnabled()) {
@@ -389,6 +427,17 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
     }
   }
 
+  public String[] getCostFunctionNames() {
+    if (null == costFunctions) return null;
+    String[] ret = new String[costFunctions.length];
+    for (int i = 0; i < costFunctions.length; i++) {
+      CostFunction c = costFunctions[i];
+      ret[i] = c.getClass().getSimpleName();
+    }
+
+    return ret;
+  }
+
   /**
    * This is the main cost function.  It will compute a cost associated with a proposed cluster
    * state.  All different costs will be combined with their multipliers to produce a double cost.
@@ -401,17 +450,25 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
   protected double computeCost(Cluster cluster, double previousCost) {
     double total = 0;
 
-    for (CostFunction c:costFunctions) {
+    for (int i = 0; i < costFunctions.length; i++) {
+      CostFunction c = costFunctions[i];
+      this.lastSubcosts[i] = 0.0;
+      
       if (c.getMultiplier() <= 0) {
         continue;
       }
 
-      total += c.getMultiplier() * c.cost();
+      Float multiplier = c.getMultiplier();
+      Double cost = c.cost();
+
+      this.lastSubcosts[i] = multiplier*cost;
+      total += multiplier * cost;
 
       if (total > previousCost) {
-        return total;
+        break;
       }
     }
+    
     return total;
   }
 
@@ -1349,4 +1406,33 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
       return rl.getStorefileSizeMB();
     }
   }
+  
+  /**
+   * A temporary function to get the table name used as key in assignmentsByTable in HMaster's balance()
+   * // TODO: find better way to get the table name? 
+   */
+  public static String getTableNameFromCluster( Map<ServerName, List<HRegionInfo>> clusterState) {
+    String tableName = null;
+
+      // find the first region with not empty table name
+      for (List<HRegionInfo> list: clusterState.values()) {
+        for(HRegionInfo info : list) {
+          TableName name = info.getTable();
+          if (null != name) tableName = name.getNameAsString();
+          if (null != tableName) break;
+        }
+          if (null != tableName) break;
+      }
+      
+      // table name cannot be null
+      return (null == tableName?"":tableName);
+  }
+
+  /**
+   * A helper function to compose the attribute name from tablename and costfunction name
+   */
+  public static String composeAttributeName(String tableName, String costFunctionName) {
+    if (null == tableName) tableName = "";
+    return tableName + ((tableName.length() <= 0) ? "" : "_") + costFunctionName;
+  }
 }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java
new file mode 100644
index 0000000..72838de
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java
@@ -0,0 +1,171 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable
+ * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
+ * for the specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.hadoop.hbase;
+
+
+import static org.junit.Assert.assertTrue;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
+import org.apache.hadoop.hbase.master.balancer.BalancerTestBase;
+import org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer;
+import org.apache.hadoop.hbase.testclassification.MediumTests;
+import org.apache.hadoop.hbase.testclassification.MiscTests;
+import org.apache.hadoop.net.DNSToSwitchMapping;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.runners.MethodSorters;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Hashtable;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanInfo;
+import javax.management.MBeanServerConnection;
+import javax.management.ObjectName;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+
+
+
+@Category({ MiscTests.class, MediumTests.class })
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
+public class TestStochasticBalancerJmxMetrics extends BalancerTestBase {
+  private static final Log LOG = LogFactory.getLog(TestStochasticBalancerJmxMetrics.class);
+  private static HBaseTestingUtility UTIL = new HBaseTestingUtility();
+  private static int connectorPort = 61120;
+  private static StochasticLoadBalancer loadBalancer;
+  /**
+   * a simple cluster for testing JMX.
+   */
+  private static int[] mockCluster = new int[] { 0, 1, 2, 3 };
+
+  /**
+   * Setup the environment for the test.
+   */
+  @BeforeClass
+  public static void setupBeforeClass() throws Exception {
+
+    Configuration conf = UTIL.getConfiguration();
+
+    conf.setClass("hbase.util.ip.to.rack.determiner", MockMapping.class, DNSToSwitchMapping.class);
+    conf.setFloat("hbase.master.balancer.stochastic.maxMovePercent", 0.75f);
+    conf.setFloat("hbase.regions.slop", 0.0f);
+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, JMXListener.class.getName());
+    conf.setInt("regionserver.rmi.registry.port", connectorPort);
+
+    loadBalancer = new StochasticLoadBalancer();
+    loadBalancer.setConf(conf);
+
+    UTIL.startMiniCluster();
+  }
+
+  @AfterClass
+  public static void tearDownAfterClass() throws Exception {
+    UTIL.shutdownMiniCluster();
+  }
+
+  /**
+   * To test if the attributes of stochastic load balancer are added to JMX.
+   */
+  @Test
+  public void testJmxAttributes() throws Exception {
+
+    Map<ServerName, List<HRegionInfo>> clusterState = mockClusterServers(mockCluster);
+    loadBalancer.balanceCluster(clusterState);
+
+    String tableName = StochasticLoadBalancer.getTableNameFromCluster(clusterState);
+
+    JMXConnector connector =
+        JMXConnectorFactory.connect(JMXListener.buildJMXServiceURL(connectorPort, connectorPort));
+    MBeanServerConnection mb = connector.getMBeanServerConnection();
+
+    // confirm that all the attributes are in the attribute list
+    // create the object name
+    Hashtable<String, String> pairs = new Hashtable<>();
+    pairs.put("service", "HBase");
+    pairs.put("name", "Master");
+    pairs.put("sub", "Balancer");
+    ObjectName target = new ObjectName("Hadoop", pairs);
+    MBeanInfo beanInfo = mb.getMBeanInfo(target);
+
+    // put all the attributes in a hashset for quick search
+    Set<String> set = new HashSet<String>();
+    for (MBeanAttributeInfo attrInfo : beanInfo.getAttributes()) {
+      set.add(attrInfo.getName());
+    }
+    // printAttributesToLog(mb, target);
+
+    // confirm that all the required attributes are in the set
+    String[] functionNames = loadBalancer.getCostFunctionNames();
+    for (String functionName : functionNames) {
+      String attrName = StochasticLoadBalancer.composeAttributeName(tableName, functionName);
+      assertTrue("Attribute " + attrName + " can not be found in " + target, 
+          set.contains(attrName));
+    }
+
+    connector.close();
+  }
+
+  /**
+   * Print all the domains in the JMX.
+   */
+  private static void printDomainsToLog(MBeanServerConnection mb) {
+    try {
+      String[] domains = mb.getDomains();
+      Arrays.sort(domains);
+      for (int i = 0; i < domains.length; i++) {
+        LOG.info("++++ domain[" + i + "] = " + domains[i]);
+      }
+      LOG.info("++++ default domain = " + mb.getDefaultDomain());
+
+      LOG.info("++++");
+      LOG.info("++++ MBean count = " + mb.getMBeanCount());
+      int index = 0;
+      Set<ObjectName> names = new HashSet<ObjectName>(mb.queryNames(null, null));
+      for (ObjectName name : names) {
+        LOG.info("++++   " + index + ":" + name);
+        index++;
+      }
+    } catch (Exception e) {
+      LOG.info("++++ printDomainsToLog got exception: " + e.getMessage());
+    }
+  }
+
+  /** 
+   * Print all the attributes in the MBean.
+   */
+  private static void printAttributesToLog(MBeanServerConnection mb, ObjectName target) {
+    try {
+      MBeanInfo beanInfo = mb.getMBeanInfo(target);
+      LOG.info("++++ Attribute count = " + beanInfo.getAttributes().length);
+      int index = 0;
+      for (MBeanAttributeInfo attrInfo : beanInfo.getAttributes()) {
+        LOG.info("++++   " + index + ":" + attrInfo.getName() + ":"
+            + mb.getAttribute(target, attrInfo.getName()));
+        index++;
+      }
+    } catch (Exception e) {
+      LOG.info("++++ printAttributesToLog got exception: " + e.getMessage());
+    }
+  }
+}
\ No newline at end of file
-- 
2.1.4


From 0681213c75539e14d38e5308ca29460ef2b7e4e6 Mon Sep 17 00:00:00 2001
From: leochen4891 <leochen4891@gmail.com>
Date: Mon, 15 Jun 2015 15:12:04 -0400
Subject: [PATCH 2/5] removed the enum class that defines the types of
 MetricsBalancers, pass the class itself and use it to newInstance()

---
 .gitignore                                         |  1 +
 .../hbase/master/balancer/BaseLoadBalancer.java    | 41 ++++++++--------------
 .../master/balancer/MetricsStochasticBalancer.java |  5 ++-
 .../master/balancer/StochasticLoadBalancer.java    |  2 +-
 4 files changed, 19 insertions(+), 30 deletions(-)

diff --git a/.gitignore b/.gitignore
index 626a4d0..9a9156e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ hbase-*/test
 *.ipr
 patchprocess/
 dependency-reduced-pom.xml
+bin/
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
index efa6fb9..601e57c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
@@ -75,14 +75,6 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
 
   private static final List<HRegionInfo> EMPTY_REGION_LIST = new ArrayList<HRegionInfo>(0);
 
-  /**
-   * The types that the getMetricsBalancer() can return. The type can be set using
-   * setMetricsBalancerType().
-   */
-  public enum MetricsBalancerType {
-    DEFAULT, STOCHASTIC,
-  }
-
   protected final RegionLocationFinder regionFinder = new RegionLocationFinder();
 
   private static class DefaultRackManager extends RackManager {
@@ -820,36 +812,33 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
 
   private Object metricsBalancerLock = new Object();
   private MetricsBalancer metricsBalancer = null;
-  private MetricsBalancerType metricsBalancerType = MetricsBalancerType.DEFAULT;
+  private Class<?> metricsBalancerType = MetricsBalancer.class;
 
   /**
-   * Choose what metricsBalancer is used. NOTE: since metrics balancer can only be registered once,
-   * the type will not change after calling getMetricsBalancer
+   * Set what metricsBalancer will be used. This will be used when the getMetricsBalancer
+   * is called. and after which, this set type will not take effect
    */
-  public void setMetricsBalancerType(MetricsBalancerType type) {
-    if (null == metricsBalancer) {
-      synchronized (metricsBalancerLock) {
-        metricsBalancerType = type;
-      }
-    }
+  public void setMetricsBalancerType(Class<?> metricsBalancerType) {
+      this.metricsBalancerType = metricsBalancerType;
   }
 
   /**
    * Get the metricsBalancer of the type metricsBalancerType. The creation of the
-   * instance(registering to the MetricsSystem) only happen once, therefore the type cannot be
-   * changed after creation. NOTE, double null check is for implementing singleton
+   * instance(registering to the MetricsSystem) only happen once, therefore the type 
+   * can only be set before creation. Changed after creation will not take effect. 
+   * NOTE, double null check is for implementing singleton
+   * @throws IllegalAccessException 
+   * @throws InstantiationException 
    */
   public MetricsBalancer getMetricsBalancer() {
     if (null == metricsBalancer) {
       synchronized (metricsBalancerLock) {
         if (null == metricsBalancer) {
-          switch (metricsBalancerType) {
-            case STOCHASTIC:
-              metricsBalancer = new MetricsStochasticBalancer();
-              break;
-            case DEFAULT:
-            default:
-              metricsBalancer = new MetricsBalancer();
+          try {
+            metricsBalancer = (MetricsBalancer) metricsBalancerType.newInstance();
+          } catch (Exception e) {
+            LOG.error("BaseLoadBalancer.getMetricsBalancer had exception: " + e.getMessage());
+            metricsBalancer = new MetricsBalancer();
           }
         }
       }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java
index 1d23b53..f92a5f8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsStochasticBalancer.java
@@ -1,7 +1,5 @@
 package org.apache.hadoop.hbase.master.balancer;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
 
 public class MetricsStochasticBalancer extends MetricsBalancer {
@@ -9,7 +7,6 @@ public class MetricsStochasticBalancer extends MetricsBalancer {
    * Use the stochastic source instead of the default source.
    */
   protected MetricsStochasticBalancerSource stochasticSource = null;
-  private static final Log LOG = LogFactory.getLog(MetricsStochasticBalancer.class);
 
   public MetricsStochasticBalancer() {
     initSource();
@@ -25,10 +22,12 @@ public class MetricsStochasticBalancer extends MetricsBalancer {
         CompatibilitySingletonFactory.getInstance(MetricsStochasticBalancerSource.class);
   }
 
+  @Override
   public void balanceCluster(long time) {
     stochasticSource.updateBalanceCluster(time);
   }
 
+  @Override
   public void incrMiscInvocations() {
     stochasticSource.incrMiscInvocations();
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
index 3ff9bfd..6cc041d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
@@ -134,7 +134,7 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
   private MetricsStochasticBalancer metricsStochasticBalancer = null;
   
   public StochasticLoadBalancer() {
-    setMetricsBalancerType(MetricsBalancerType.STOCHASTIC);
+    setMetricsBalancerType(MetricsStochasticBalancer.class);
     metricsStochasticBalancer = (MetricsStochasticBalancer) getMetricsBalancer();
   }
 
-- 
2.1.4


From 667e3e1d39739ebcd42efccf56ff48255d045c27 Mon Sep 17 00:00:00 2001
From: leochen4891 <leochen4891@gmail.com>
Date: Tue, 16 Jun 2015 10:08:41 -0400
Subject: [PATCH 3/5] modified LOG info when rollback to MetricsBalancer

---
 .../java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
index 601e57c..31d73f6 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
@@ -837,7 +837,8 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
           try {
             metricsBalancer = (MetricsBalancer) metricsBalancerType.newInstance();
           } catch (Exception e) {
-            LOG.error("BaseLoadBalancer.getMetricsBalancer had exception: " + e.getMessage());
+            LOG.error("BaseLoadBalancer.getMetricsBalancer had exception: " 
+                + e.getMessage() + ", rollback to MetricsBalancer");
             metricsBalancer = new MetricsBalancer();
           }
         }
-- 
2.1.4


From a1e1baae3bcd787354be42f8bb981d586b488a59 Mon Sep 17 00:00:00 2001
From: leochen4891 <leochen4891@gmail.com>
Date: Wed, 17 Jun 2015 12:23:45 -0400
Subject: [PATCH 4/5] renamed variables

---
 .../org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java  | 2 +-
 .../org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java | 8 ++++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java
index 26613a2..b3e6b03 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/MetricsBalancer.java
@@ -25,7 +25,7 @@ import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
  */
 public class MetricsBalancer {
 
-  protected MetricsBalancerSource source = null;
+  private MetricsBalancerSource source = null;
 
   public MetricsBalancer() {
     initSource();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java
index 72838de..1eef2da 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestStochasticBalancerJmxMetrics.java
@@ -107,11 +107,11 @@ public class TestStochasticBalancerJmxMetrics extends BalancerTestBase {
     pairs.put("sub", "Balancer");
     ObjectName target = new ObjectName("Hadoop", pairs);
     MBeanInfo beanInfo = mb.getMBeanInfo(target);
-
+    
     // put all the attributes in a hashset for quick search
-    Set<String> set = new HashSet<String>();
+    Set<String> existingAttrs= new HashSet<String>();
     for (MBeanAttributeInfo attrInfo : beanInfo.getAttributes()) {
-      set.add(attrInfo.getName());
+      existingAttrs.add(attrInfo.getName());
     }
     // printAttributesToLog(mb, target);
 
@@ -120,7 +120,7 @@ public class TestStochasticBalancerJmxMetrics extends BalancerTestBase {
     for (String functionName : functionNames) {
       String attrName = StochasticLoadBalancer.composeAttributeName(tableName, functionName);
       assertTrue("Attribute " + attrName + " can not be found in " + target, 
-          set.contains(attrName));
+          existingAttrs.contains(attrName));
     }
 
     connector.close();
-- 
2.1.4


From 1af5cf962438227ba4d12339d45c596442af10e5 Mon Sep 17 00:00:00 2001
From: leochen4891 <leochen4891@gmail.com>
Date: Fri, 19 Jun 2015 13:13:06 -0400
Subject: [PATCH 5/5] using constructor instead of setMetricsBalancerType

---
 conf/hbase-env.sh                                  |  9 +---
 conf/hbase-site.xml                                | 31 ------------
 conf/jmxremote.access                              |  2 -
 conf/jmxremote.passwd                              |  2 -
 go.sh                                              |  5 --
 hbase-server/go.sh                                 |  6 ---
 .../hbase/master/balancer/BaseLoadBalancer.java    | 59 ++++++++--------------
 .../master/balancer/StochasticLoadBalancer.java    | 39 ++++++++------
 8 files changed, 44 insertions(+), 109 deletions(-)
 delete mode 100644 conf/jmxremote.access
 delete mode 100644 conf/jmxremote.passwd
 delete mode 100644 go.sh
 delete mode 100644 hbase-server/go.sh

diff --git a/conf/hbase-env.sh b/conf/hbase-env.sh
index 102b1da..58b2ed4 100644
--- a/conf/hbase-env.sh
+++ b/conf/hbase-env.sh
@@ -90,13 +90,6 @@ export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:M
 # export HBASE_ZOOKEEPER_OPTS="$HBASE_ZOOKEEPER_OPTS $HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104"
 # export HBASE_REST_OPTS="$HBASE_REST_OPTS $HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10105"
 
-HBASE_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false"
-HBASE_JMX_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.password.file=$HBASE_HOME/conf/jmxremote.passwd"
-HBASE_JMX_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.access.file=$HBASE_HOME/conf/jmxremote.access"
-
-export HBASE_MASTER_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.port=10101"
-export HBASE_REGIONSERVER_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.port=10102"
-
 # File naming hosts on which HRegionServers will run.  $HBASE_HOME/conf/regionservers by default.
 # export HBASE_REGIONSERVERS=${HBASE_HOME}/conf/regionservers
 
@@ -134,7 +127,7 @@ export HBASE_REGIONSERVER_OPTS="$HBASE_JMX_OPTS -Dcom.sun.management.jmxremote.p
 # export HBASE_SLAVE_SLEEP=0.1
 
 # Tell HBase whether it should manage it's own instance of Zookeeper or not.
-export HBASE_MANAGES_ZK=true
+# export HBASE_MANAGES_ZK=true
 
 # The default log rolling policy is RFA, where the log file is rolled as per the size defined for the 
 # RFA appender. Please refer to the log4j.properties file to see more details on this appender.
diff --git a/conf/hbase-site.xml b/conf/hbase-site.xml
index 510bb7c..c516ac7 100644
--- a/conf/hbase-site.xml
+++ b/conf/hbase-site.xml
@@ -21,35 +21,4 @@
  */
 -->
 <configuration>
-    <property>
-        <name>hbase.rootdir</name>
-        <value>hdfs://ubuntu:9000/hbase</value>
-    </property>
-
-    <property>
-        <name>hbase.cluster.distributed</name>
-        <value>true</value>
-    </property>
-
-    <property>
-        <name>hbase.zookeeper.property.dataDir</name>
-        <value>/home/leochen4891/zookeeper</value>
-    </property>
-
-    <!--property>
-        <name>hbase.zookeeper.property.clientPort</name>
-        <value>2181</value>
-    </property-->
-
-    <property>
-        <name>hbase.zookeeper.quorum</name>
-        <value>ubuntu</value>
-    </property>
-
-    <property>
-        <name>hbase.master.loadbalancer.class</name>
-        <value>org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer</value>
-    </property>
-
 </configuration>
-
diff --git a/conf/jmxremote.access b/conf/jmxremote.access
deleted file mode 100644
index c5aab07..0000000
--- a/conf/jmxremote.access
+++ /dev/null
@@ -1,2 +0,0 @@
-monitorRole readonly
-controlRole readwrite
diff --git a/conf/jmxremote.passwd b/conf/jmxremote.passwd
deleted file mode 100644
index a28ed44..0000000
--- a/conf/jmxremote.passwd
+++ /dev/null
@@ -1,2 +0,0 @@
-monitorRole monitorpass
-controlRole controlpass
diff --git a/go.sh b/go.sh
deleted file mode 100644
index 11b940f..0000000
--- a/go.sh
+++ /dev/null
@@ -1,5 +0,0 @@
-mvn clean package -DskipTests
-#bin/start-hbase.sh
-#sleep 5
-#bin/local-regionservers.sh start 2 3 4 
-#bin/hbase shell
diff --git a/hbase-server/go.sh b/hbase-server/go.sh
deleted file mode 100644
index 69e210a..0000000
--- a/hbase-server/go.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-cp ~/github/hbase/hbase-hadoop2-compat/target/hbase-hadoop2-compat-2.0.0-SNAPSHOT.jar ~/.m2/repository/org/apache/hbase/hbase-hadoop2-compat/2.0.0-SNAPSHOT/hbase-hadoop2-compat-2.0.0-SNAPSHOT.jar
-cp ~/github/hbase/hbase-hadoop2-compat/target/hbase-hadoop2-compat-2.0.0-SNAPSHOT-sources.jar ~/.m2/repository/org/apache/hbase/hbase-hadoop2-compat/2.0.0-SNAPSHOT/hbase-hadoop2-compat-2.0.0-SNAPSHOT-sources.jar
-
-mvn test -Dtest=org.apache.hadoop.hbase.TestStochasticBalancerJmxMetrics
-vim ./target/surefire-reports/org.apache.hadoop.hbase.TestStochasticBalancerJmxMetrics-output.txt
-
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
index 31d73f6..7e3b48d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java
@@ -15,7 +15,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.hadoop.hbase.master.balancer;
 
 import java.util.ArrayList;
@@ -83,6 +82,25 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
       return UNKNOWN_RACK;
     }
   }
+  
+  /**
+   * The default constructor that uses the default MetricsBalancer
+   */
+  protected BaseLoadBalancer() {
+    metricsBalancer = new MetricsBalancer();
+  }
+  
+  /**
+   * The constructor tha accepts a customed metricsBalancer, which will be used to replace the 
+   * default MetricsBalancer
+   * @param metricsBalancer The custom metricsBalancer that will be used
+   */
+  protected BaseLoadBalancer(MetricsBalancer metricsBalancer) {
+    if (null != metricsBalancer)
+      this.metricsBalancer = metricsBalancer; 
+    else
+      this.metricsBalancer = new MetricsBalancer();
+  }
 
   /**
    * An efficient array based implementation similar to ClusterState for keeping
@@ -806,48 +824,11 @@ public abstract class BaseLoadBalancer implements LoadBalancer {
     "hbase.balancer.tablesOnMaster";
 
   protected final Set<String> tablesOnMaster = new HashSet<String>();
+  protected MetricsBalancer metricsBalancer = null;
   protected ClusterStatus clusterStatus = null;
   protected ServerName masterServerName;
   protected MasterServices services;
 
-  private Object metricsBalancerLock = new Object();
-  private MetricsBalancer metricsBalancer = null;
-  private Class<?> metricsBalancerType = MetricsBalancer.class;
-
-  /**
-   * Set what metricsBalancer will be used. This will be used when the getMetricsBalancer
-   * is called. and after which, this set type will not take effect
-   */
-  public void setMetricsBalancerType(Class<?> metricsBalancerType) {
-      this.metricsBalancerType = metricsBalancerType;
-  }
-
-  /**
-   * Get the metricsBalancer of the type metricsBalancerType. The creation of the
-   * instance(registering to the MetricsSystem) only happen once, therefore the type 
-   * can only be set before creation. Changed after creation will not take effect. 
-   * NOTE, double null check is for implementing singleton
-   * @throws IllegalAccessException 
-   * @throws InstantiationException 
-   */
-  public MetricsBalancer getMetricsBalancer() {
-    if (null == metricsBalancer) {
-      synchronized (metricsBalancerLock) {
-        if (null == metricsBalancer) {
-          try {
-            metricsBalancer = (MetricsBalancer) metricsBalancerType.newInstance();
-          } catch (Exception e) {
-            LOG.error("BaseLoadBalancer.getMetricsBalancer had exception: " 
-                + e.getMessage() + ", rollback to MetricsBalancer");
-            metricsBalancer = new MetricsBalancer();
-          }
-        }
-      }
-    }
-
-    return metricsBalancer;
-  }
-
   /**
    * By default, regions of some small system tables such as meta,
    * namespace, and acl are assigned to the active master. If you don't
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
index c09222c..f2a1fd9 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java
@@ -131,11 +131,13 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
   private LocalityCostFunction localityCost;
   private RegionReplicaHostCostFunction regionReplicaHostCostFunction;
   private RegionReplicaRackCostFunction regionReplicaRackCostFunction;
-  private MetricsStochasticBalancer metricsStochasticBalancer = null;
   
+  /**
+   * The constructor that pass a MetricsStochasticBalancer to BaseLoadBalancer to replace its
+   * default MetricsBalancer
+   */
   public StochasticLoadBalancer() {
-    setMetricsBalancerType(MetricsStochasticBalancer.class);
-    metricsStochasticBalancer = (MetricsStochasticBalancer) getMetricsBalancer();
+    super(new MetricsStochasticBalancer());
   }
 
   @Override
@@ -316,7 +318,7 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
 
     long endTime = EnvironmentEdgeManager.currentTime();
 
-    metricsStochasticBalancer.balanceCluster(endTime - startTime);
+    metricsBalancer.balanceCluster(endTime - startTime);
 
     if (initCost > currentCost) {
       plans = createRegionPlans(cluster);
@@ -328,18 +330,20 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
             + initCost + " to a new cost of " + currentCost);
       }
 
-      // send to metrics
-      String tableName = getTableNameFromCluster(clusterState);
-
-      // send values to metrics
-      metricsStochasticBalancer.updateStochasticCost(
-          tableName, "Overall", "Overall cost", curOverallCost);
-
-      for (int i = 0 ; i < costFunctions.length; i++) {
-        CostFunction costFunction = costFunctions[i];
-        String costFunctionName = costFunction.getClass().getSimpleName();
-        metricsStochasticBalancer.updateStochasticCost(
-            tableName, costFunctionName, costFunctionName, curSubcosts[i]);
+      // check if the metricsBalancer is MetricsStochasticBalancer before casting
+      if (metricsBalancer instanceof MetricsStochasticBalancer) {
+        String tableName = getTableNameFromCluster(clusterState);
+        // overall cost
+        ((MetricsStochasticBalancer) metricsBalancer).updateStochasticCost(tableName, "Overall",
+          "Overall cost", curOverallCost);
+
+        // each cost function
+        for (int i = 0; i < costFunctions.length; i++) {
+          CostFunction costFunction = costFunctions[i];
+          String costFunctionName = costFunction.getClass().getSimpleName();
+          ((MetricsStochasticBalancer) metricsBalancer).updateStochasticCost(tableName,
+            costFunctionName, costFunctionName, curSubcosts[i]);
+        }
       }
 
       return plans;
@@ -427,6 +431,9 @@ public class StochasticLoadBalancer extends BaseLoadBalancer {
     }
   }
 
+  /**
+   * Get the names of the cost functions
+   */
   public String[] getCostFunctionNames() {
     if (null == costFunctions) return null;
     String[] ret = new String[costFunctions.length];
-- 
2.1.4

