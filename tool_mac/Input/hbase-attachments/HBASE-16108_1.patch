From 2d48b58a58be566deabb9881f49d23d65ebcbcb8 Mon Sep 17 00:00:00 2001
From: Konstantin Ryakhovskiy <ryakhovskiy.developer@gmail.com>
Date: Wed, 29 Jun 2016 14:13:39 +0200
Subject: [PATCH] HBASE-16108 RowCounter supports multiple key ranges

---
 .../apache/hadoop/hbase/mapreduce/RowCounter.java  | 65 +++++++++++++++-------
 .../hadoop/hbase/mapreduce/TestRowCounter.java     | 55 +++++++++++++++---
 2 files changed, 90 insertions(+), 30 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/RowCounter.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/RowCounter.java
index 720d4b1..b976676 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/RowCounter.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/RowCounter.java
@@ -19,6 +19,8 @@
 package org.apache.hadoop.hbase.mapreduce;
 
 import java.io.IOException;
+import java.util.List;
+import java.util.ArrayList;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -31,7 +33,9 @@ import org.apache.hadoop.conf.Configured;
 import org.apache.hadoop.hbase.HBaseConfiguration;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
+import org.apache.hadoop.hbase.filter.FilterBase;
 import org.apache.hadoop.hbase.filter.FirstKeyOnlyFilter;
+import org.apache.hadoop.hbase.filter.MultiRowRangeFilter;
 import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.mapreduce.Counter;
@@ -60,7 +64,7 @@ public class RowCounter extends Configured implements Tool {
    * Mapper that runs the count.
    */
   static class RowCounterMapper
-  extends TableMapper<ImmutableBytesWritable, Result> {
+      extends TableMapper<ImmutableBytesWritable, Result> {
 
     /** Counter enumeration to count the actual rows. */
     public static enum Counters {ROWS}
@@ -77,8 +81,8 @@ public class RowCounter extends Configured implements Tool {
      */
     @Override
     public void map(ImmutableBytesWritable row, Result values,
-      Context context)
-    throws IOException {
+                    Context context)
+        throws IOException {
       // Count every row containing data, whether it's in qualifiers or values
       context.getCounter(Counters.ROWS).increment(1);
     }
@@ -93,10 +97,9 @@ public class RowCounter extends Configured implements Tool {
    * @throws IOException When setting up the job fails.
    */
   public static Job createSubmittableJob(Configuration conf, String[] args)
-  throws IOException {
+      throws IOException {
     String tableName = args[0];
-    String startKey = null;
-    String endKey = null;
+    FilterBase filter = null;
     long startTime = 0;
     long endTime = 0;
 
@@ -110,14 +113,11 @@ public class RowCounter extends Configured implements Tool {
     // First argument is table name, starting from second
     for (int i = 1; i < args.length; i++) {
       if (args[i].startsWith(rangeSwitch)) {
-        String[] startEnd = args[i].substring(rangeSwitch.length()).split(",", 2);
-        if (startEnd.length != 2 || startEnd[1].contains(",")) {
-          printUsage("Please specify range in such format as \"--range=a,b\" " +
-              "or, with only one boundary, \"--range=,b\" or \"--range=a,\"");
+        try {
+          filter = parseRowRangeParameter(args[i], rangeSwitch);
+        } catch (IllegalArgumentException e) {
           return null;
         }
-        startKey = startEnd[0];
-        endKey = startEnd[1];
         continue;
       }
       if (args[i].startsWith(startTimeArgKey)) {
@@ -146,12 +146,10 @@ public class RowCounter extends Configured implements Tool {
     job.setJarByClass(RowCounter.class);
     Scan scan = new Scan();
     scan.setCacheBlocks(false);
-    if (startKey != null && !startKey.equals("")) {
-      scan.setStartRow(Bytes.toBytesBinary(startKey));
-    }
-    if (endKey != null && !endKey.equals("")) {
-      scan.setStopRow(Bytes.toBytesBinary(endKey));
-    }
+    if (null != filter)
+      scan.setFilter(filter);
+    else
+      scan.setFilter(new FirstKeyOnlyFilter());
     if (sb.length() > 0) {
       for (String columnName : sb.toString().trim().split(" ")) {
         String family = StringUtils.substringBefore(columnName, ":");
@@ -165,15 +163,40 @@ public class RowCounter extends Configured implements Tool {
         }
       }
     }
-    scan.setFilter(new FirstKeyOnlyFilter());
+    //scan.setFilter(new FirstKeyOnlyFilter());
     scan.setTimeRange(startTime, endTime == 0 ? HConstants.LATEST_TIMESTAMP : endTime);
     job.setOutputFormatClass(NullOutputFormat.class);
     TableMapReduceUtil.initTableMapperJob(tableName, scan,
-      RowCounterMapper.class, ImmutableBytesWritable.class, Result.class, job);
+        RowCounterMapper.class, ImmutableBytesWritable.class, Result.class, job);
     job.setNumReduceTasks(0);
     return job;
   }
 
+  private static FilterBase parseRowRangeParameter(String arg, String rangeSwitch) {
+    final String[] ranges = arg.substring(rangeSwitch.length()).split(";");
+    final List<MultiRowRangeFilter.RowRange> rangeList = new ArrayList<>();
+    for (String range : ranges) {
+      String[] startEnd = range.split(",", 2);
+      if (startEnd.length != 2 || startEnd[1].contains(",")) {
+        printUsage("Please specify range in such format as \"--range=a,b\" " +
+            "or, with only one boundary, \"--range=,b\" or \"--range=a,\"");
+        throw new IllegalArgumentException("Wrong range specification: " + range);
+      }
+      String startKey = startEnd[0];
+      String endKey = startEnd[1];
+      rangeList.add(new MultiRowRangeFilter.RowRange(
+          Bytes.toBytesBinary(startKey), true,
+          Bytes.toBytesBinary(endKey), false));
+
+    }
+    try {
+      return new MultiRowRangeFilter(rangeList);
+    } catch (IOException e) {
+      //the IOException should never be thrown. see HBASE-16145
+      throw new IllegalArgumentException("Cannot instantiate MultiRowRangeFilter");
+    }
+  }
+
   /*
    * @param errorMessage Can attach a message when error occurs.
    */
@@ -189,7 +212,7 @@ public class RowCounter extends Configured implements Tool {
   private static void printUsage() {
     System.err.println("Usage: RowCounter [options] <tablename> " +
         "[--starttime=[start] --endtime=[end] " +
-        "[--range=[startKey],[endKey]] [<column1> <column2>...]");
+        "[--range=[startKey],[endKey][;[startKey],[endKey]...]] [<column1> <column2>...]");
     System.err.println("For performance consider the following options:\n"
         + "-Dhbase.client.scanner.caching=100\n"
         + "-Dmapreduce.map.speculative=false");
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java
index 4a719dc..bf5554b 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java
@@ -149,12 +149,49 @@ public class TestRowCounter {
   @Test
   public void testRowCounterColumnAndRowRange() throws Exception {
     String[] args = new String[] {
-            TABLE_NAME, "--range=\\x00rov,\\x00rox", COL_FAM + ":" + COL1
+        TABLE_NAME, "--range=\\x00rov,\\x00rox", COL_FAM + ":" + COL1
     };
     runRowCount(args, 8);
   }
 
-   /**
+  /**
+   * Test a case when a range is specified with single range of start-end keys
+   * @throws Exception
+   */
+  @Test
+  public void testRowCounterRowSingleRange() throws Exception {
+    String[] args = new String[] {
+        TABLE_NAME, "--range=\\x00row1,\\x00row3"
+    };
+    runRowCount(args, 2);
+  }
+
+  /**
+   * Test a case when a range is specified with multiple ranges of start-end keys
+   * @throws Exception
+   */
+  @Test
+  public void testRowCounterRowMultiRange() throws Exception {
+    String[] args = new String[] {
+        TABLE_NAME, "--range=\\x00row1,\\x00row3;\\x00row5,\\x00row8"
+    };
+    runRowCount(args, 5);
+  }
+
+  /**
+   * Test a case when a range is specified with multiple ranges of start-end keys;
+   * one range is filled, another two are not
+   * @throws Exception
+   */
+  @Test
+  public void testRowCounterRowMultiEmptyRange() throws Exception {
+    String[] args = new String[] {
+        TABLE_NAME, "--range=\\x00row1,\\x00row3;;"
+    };
+    runRowCount(args, 2);
+  }
+
+  /**
    * Test a case when the timerange is specified with --starttime and --endtime options
    *
    * @throws Exception
@@ -287,9 +324,9 @@ public class TestRowCounter {
         assertTrue(data.toString().contains("Wrong number of parameters:"));
         assertTrue(data.toString().contains(
             "Usage: RowCounter [options] <tablename> " +
-            "[--starttime=[start] --endtime=[end] " +
-            "[--range=[startKey],[endKey]] " +
-            "[<column1> <column2>...]"));
+                "[--starttime=[start] --endtime=[end] " +
+                "[--range=[startKey],[endKey][;[startKey],[endKey]...]] " +
+                "[<column1> <column2>...]"));
         assertTrue(data.toString().contains("-Dhbase.client.scanner.caching=100"));
         assertTrue(data.toString().contains("-Dmapreduce.map.speculative=false"));
       }
@@ -304,12 +341,12 @@ public class TestRowCounter {
         assertEquals(-1, newSecurityManager.getExitCode());
         assertTrue(data.toString().contains(
             "Please specify range in such format as \"--range=a,b\" or, with only one boundary," +
-            " \"--range=,b\" or \"--range=a,\""));
+                " \"--range=,b\" or \"--range=a,\""));
         assertTrue(data.toString().contains(
             "Usage: RowCounter [options] <tablename> " +
-            "[--starttime=[start] --endtime=[end] " +
-            "[--range=[startKey],[endKey]] " +
-            "[<column1> <column2>...]"));
+                "[--starttime=[start] --endtime=[end] " +
+                "[--range=[startKey],[endKey][;[startKey],[endKey]...]] " +
+                "[<column1> <column2>...]"));
       }
 
     } finally {
-- 
1.8.3.1
