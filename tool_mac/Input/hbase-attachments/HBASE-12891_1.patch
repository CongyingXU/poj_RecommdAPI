From 348bd23e9c0b352a8152954ae0ea50902dedd06c Mon Sep 17 00:00:00 2001
From: rahulgidwani <rahul.gidwani@flurry.com>
Date: Tue, 20 Jan 2015 16:34:17 -0800
Subject: [PATCH] HBASE-12891 have hbck do region consistency checks in
 parallel

Signed-off-by: Andrew Purtell <apurtell@apache.org>
---
 .../org/apache/hadoop/hbase/util/HBaseFsck.java    | 31 ++++++++++++++++++++--
 1 file changed, 29 insertions(+), 2 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
index 7e6ee7b..7d2640d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
@@ -1699,9 +1699,11 @@ public class HBaseFsck extends Configured implements Closeable {
   throws IOException, KeeperException, InterruptedException {
     // Divide the checks in two phases. One for default/primary replicas and another
     // for the non-primary ones. Keeps code cleaner this way.
+    List<WorkItemRegionConsistency> workItems =
+        new ArrayList<WorkItemRegionConsistency>(2 * regionInfoMap.size());
     for (java.util.Map.Entry<String, HbckInfo> e: regionInfoMap.entrySet()) {
       if (e.getValue().getReplicaId() == HRegionInfo.DEFAULT_REPLICA_ID) {
-        checkRegionConsistency(e.getKey(), e.getValue());
+        workItems.add(new WorkItemRegionConsistency(e.getKey(), e.getValue()));
       }
     }
     boolean prevHdfsCheck = shouldCheckHdfs();
@@ -1710,10 +1712,19 @@ public class HBaseFsck extends Configured implements Closeable {
     // deployed/undeployed replicas.
     for (java.util.Map.Entry<String, HbckInfo> e: regionInfoMap.entrySet()) {
       if (e.getValue().getReplicaId() != HRegionInfo.DEFAULT_REPLICA_ID) {
-        checkRegionConsistency(e.getKey(), e.getValue());
+        workItems.add(new WorkItemRegionConsistency(e.getKey(), e.getValue()));
       }
     }
     setCheckHdfs(prevHdfsCheck);
+    List<Future<Void>> workFutures = executor.invokeAll(workItems);
+    for(Future<Void> f: workFutures) {
+      try {
+        f.get();
+      } catch(ExecutionException e) {
+        LOG.warn("Could not check region consistency " , e.getCause());
+      }
+    }
+    LOG.info("Completed checks for " + regionInfoMap.size() + " regions");
   }
 
   private void preCheckPermission() throws IOException, AccessDeniedException {
@@ -2351,6 +2362,22 @@ public class HBaseFsck extends Configured implements Closeable {
     }
   };
 
+  class WorkItemRegionConsistency implements Callable<Void> {
+    private final String key;
+    private final HbckInfo hbi;
+
+    WorkItemRegionConsistency(String key, HbckInfo hbi) {
+      this.key = key;
+      this.hbi = hbi;
+    }
+
+    @Override
+    public synchronized Void call() throws Exception {
+      checkRegionConsistency(key, hbi);
+      return null;
+    }
+  }
+
 
   /**
    * Maintain information about a particular table.
-- 
1.9.1

