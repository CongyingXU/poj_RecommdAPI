Index: kernel/test/org/apache/axis2/description/RegistryTest.java
===================================================================
--- kernel/test/org/apache/axis2/description/RegistryTest.java	(revision 483440)
+++ kernel/test/org/apache/axis2/description/RegistryTest.java	(working copy)
@@ -65,7 +65,7 @@
         assertEquals(p, parmInclude.getParameter(key));
     }
 
-    public void testFlowIncludeTest(FlowInclude flowInclude) {
+    public void testFlowIncludeTest(AxisModule flowInclude) {
         Flow flow1 = new Flow();
         Flow flow2 = new Flow();
         Flow flow3 = new Flow();
@@ -81,7 +81,6 @@
 
     public void testHandlers() throws AxisFault {
         Handler handler = new AbstractHandler() {
-            private static final long serialVersionUID = 196289132377245632L;
 
 			public InvocationResponse invoke(MessageContext msgContext)  {
                 return InvocationResponse.CONTINUE;        
Index: kernel/src/org/apache/axis2/description/AxisModule.java
===================================================================
--- kernel/src/org/apache/axis2/description/AxisModule.java	(revision 483440)
+++ kernel/src/org/apache/axis2/description/AxisModule.java	(working copy)
@@ -37,12 +37,12 @@
  * <p>Handler are registered once they are available. They are available to all services if axis2.xml
  * has a module ref="." or available to a single service if services.xml have module ref=".."</p>
  */
-public class AxisModule implements FlowInclude, ParameterInclude {
+public class AxisModule implements ParameterInclude {
 
     /**
      * Field flowInclude
      */
-    private final FlowInclude flowInclude = new FlowIncludeImpl();
+    private final FlowInclude flowInclude = new FlowInclude();
 
     /**
      * Field parameters
Index: kernel/src/org/apache/axis2/description/FlowInclude.java
===================================================================
--- kernel/src/org/apache/axis2/description/FlowInclude.java	(revision 483440)
+++ kernel/src/org/apache/axis2/description/FlowInclude.java	(working copy)
@@ -1,75 +0,0 @@
-/*
-* Copyright 2004,2005 The Apache Software Foundation.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-
-package org.apache.axis2.description;
-
-/**
- * Interface FlowInclude
- */
-public interface FlowInclude {
-
-    /**
-     * Method getFaultInFlow.
-     *
-     * @return Returns Flow.
-     */
-    public Flow getFaultInFlow();
-
-    public Flow getFaultOutFlow();
-
-    /**
-     * Method getInFlow.
-     *
-     * @return Returns Flow.
-     */
-    public Flow getInFlow();
-
-    /**
-     * Method getOutFlow.
-     *
-     * @return Returns Flow.
-     */
-    public Flow getOutFlow();
-
-    /**
-     * Method setFaultInFlow.
-     *
-     * @param faultFlow
-     */
-    public void setFaultInFlow(Flow faultFlow);
-
-    /**
-     * Method setFaultOutFlow.
-     *
-     * @param faultFlow
-     */
-    public void setFaultOutFlow(Flow faultFlow);
-
-    /**
-     * Method setInFlow.
-     *
-     * @param inFlow
-     */
-    public void setInFlow(Flow inFlow);
-
-    /**
-     * Method setOutFlow.
-     *
-     * @param outFlow
-     */
-    public void setOutFlow(Flow outFlow);
-}
Index: kernel/src/org/apache/axis2/description/FlowInclude.java
===================================================================
--- kernel/src/org/apache/axis2/description/FlowInclude.java	(revision 0)
+++ kernel/src/org/apache/axis2/description/FlowInclude.java	(revision 483330)
@@ -0,0 +1,102 @@
+/*
+* Copyright 2004,2005 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+
+package org.apache.axis2.description;
+
+/**
+ * Class FlowIncludeImpl
+ */
+public class FlowInclude  {
+
+    /**
+     * Field fault
+     */
+    private Flow In_fault;
+    private Flow Out_fault;
+
+    /**
+     * Field in
+     */
+    private Flow in;
+
+    /**
+     * Field out
+     */
+    private Flow out;
+
+    /**
+     * Method getFaultInFlow.
+     *
+     * @return Returns Flow.
+     */
+    public Flow getFaultInFlow() {
+        return In_fault;
+    }
+
+    public Flow getFaultOutFlow() {
+        return this.Out_fault;
+    }
+
+    /**
+     * Method getInFlow.
+     *
+     * @return Returns Flow.
+     */
+    public Flow getInFlow() {
+        return in;
+    }
+
+    /**
+     * Method getOutFlow.
+     *
+     * @return Returns Flow.
+     */
+    public Flow getOutFlow() {
+        return out;
+    }
+
+    /**
+     * Method setFaultInFlow.
+     *
+     * @param flow
+     */
+    public void setFaultInFlow(Flow flow) {
+        this.In_fault = flow;
+    }
+
+    public void setFaultOutFlow(Flow faultFlow) {
+        this.Out_fault = faultFlow;
+    }
+
+    /**
+     * Method setInFlow.
+     *
+     * @param flow
+     */
+    public void setInFlow(Flow flow) {
+        this.in = flow;
+    }
+
+    /**
+     * Method setOutFlow.
+     *
+     * @param flow
+     */
+    public void setOutFlow(Flow flow) {
+        this.out = flow;
+    }
+}
Index: kernel/src/org/apache/axis2/description/AxisOperation.java
===================================================================
--- kernel/src/org/apache/axis2/description/AxisOperation.java	(revision 483440)
+++ kernel/src/org/apache/axis2/description/AxisOperation.java	(working copy)
@@ -44,9 +44,6 @@
     private static final Log log = LogFactory.getLog(AxisOperation.class);
     private int mep = WSDL20_2004Constants.MEP_CONSTANT_INVALID;
 
-    public static final String SOAP_ACTION = "soapaction";
-
-
     // to store engaged modules
     private ArrayList engagedModules = new ArrayList();
 
@@ -336,20 +333,15 @@
                                                  ServiceContext serviceContext)
             throws AxisFault {
         OperationContext operationContext;
-
         if (null == msgContext.getRelatesTo()) {
-
             // Its a new incoming message so get the factory to create a new
             // one
             operationContext = new OperationContext(this, serviceContext);
         } else {
-
             // So this message is part of an ongoing MEP
             ConfigurationContext configContext = msgContext.getConfigurationContext();
-
             operationContext =
                     configContext.getOperationContext(msgContext.getRelatesTo().getValue());
-
             if (null == operationContext) {
                 throw new AxisFault(Messages.getMessage("cannotCorrelateMsg",
                         this.name.toString(), msgContext.getRelatesTo().getValue()));
@@ -477,14 +469,11 @@
 
     // to check whether a given parameter is locked
     public boolean isParameterLocked(String parameterName) {
-
         // checking the locked value of parent
         boolean locked = false;
-
         if (getParent() != null) {
             locked = getParent().isParameterLocked(parameterName);
         }
-
         if (locked) {
             return true;
         } else {
Index: kernel/src/org/apache/axis2/description/AxisDescription.java
===================================================================
--- kernel/src/org/apache/axis2/description/AxisDescription.java	(revision 483440)
+++ kernel/src/org/apache/axis2/description/AxisDescription.java	(working copy)
@@ -79,11 +79,13 @@
 
     public Parameter getParameter(String name) {
         Parameter parameter = parameterInclude.getParameter(name);
-        if (parameter == null && parent != null) {
+        if(parameter!=null){
+            return  parameter;
+        }
+        if(parent != null) {
             return parent.getParameter(name);
-        } else {
-            return parameter;
         }
+        return null;
     }
 
     public Object getParameterValue(String name) {
Index: kernel/src/org/apache/axis2/description/FlowIncludeImpl.java
===================================================================
--- kernel/src/org/apache/axis2/description/FlowIncludeImpl.java	(revision 483440)
+++ kernel/src/org/apache/axis2/description/FlowIncludeImpl.java	(working copy)
@@ -1,102 +0,0 @@
-/*
-* Copyright 2004,2005 The Apache Software Foundation.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-
-package org.apache.axis2.description;
-
-/**
- * Class FlowIncludeImpl
- */
-public class FlowIncludeImpl implements FlowInclude {
-
-    /**
-     * Field fault
-     */
-    private Flow In_fault;
-    private Flow Out_fault;
-
-    /**
-     * Field in
-     */
-    private Flow in;
-
-    /**
-     * Field out
-     */
-    private Flow out;
-
-    /**
-     * Method getFaultInFlow.
-     *
-     * @return Returns Flow.
-     */
-    public Flow getFaultInFlow() {
-        return In_fault;
-    }
-
-    public Flow getFaultOutFlow() {
-        return this.Out_fault;
-    }
-
-    /**
-     * Method getInFlow.
-     *
-     * @return Returns Flow.
-     */
-    public Flow getInFlow() {
-        return in;
-    }
-
-    /**
-     * Method getOutFlow. 
-     *
-     * @return Returns Flow.
-     */
-    public Flow getOutFlow() {
-        return out;
-    }
-
-    /**
-     * Method setFaultInFlow.
-     *
-     * @param flow
-     */
-    public void setFaultInFlow(Flow flow) {
-        this.In_fault = flow;
-    }
-
-    public void setFaultOutFlow(Flow faultFlow) {
-        this.Out_fault = faultFlow;
-    }
-
-    /**
-     * Method setInFlow.
-     *
-     * @param flow
-     */
-    public void setInFlow(Flow flow) {
-        this.in = flow;
-    }
-
-    /**
-     * Method setOutFlow.
-     *
-     * @param flow
-     */
-    public void setOutFlow(Flow flow) {
-        this.out = flow;
-    }
-}
Index: kernel/src/org/apache/axis2/context/AbstractContext.java
===================================================================
--- kernel/src/org/apache/axis2/context/AbstractContext.java	(revision 483440)
+++ kernel/src/org/apache/axis2/context/AbstractContext.java	(working copy)
@@ -17,7 +17,6 @@
 
 package org.apache.axis2.context;
 
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
Index: kernel/src/org/apache/axis2/context/MessageContext.java
===================================================================
--- kernel/src/org/apache/axis2/context/MessageContext.java	(revision 483440)
+++ kernel/src/org/apache/axis2/context/MessageContext.java	(working copy)
@@ -68,7 +68,7 @@
 
     public static final String TRANSPORT_HEADERS = "TRANSPORT_HEADERS";
 
-    public Attachments attachments = new Attachments();
+    public Attachments attachments;
 
     /**
      * Field TRANSPORT_OUT
@@ -1072,10 +1072,16 @@
     }
 
     public Attachments getAttachmentMap() {
+        if (attachments == null) {
+            attachments = new Attachments();
+        }
         return attachments;
     }
 
     public void addAttachment(String contentID, DataHandler dataHandler) {
+        if (attachments == null) {
+            attachments = new Attachments();
+        }
         attachments.addDataHandler(contentID, dataHandler);
     }
 
@@ -1086,6 +1092,9 @@
     }
 
     public DataHandler getAttachment(String contentID) {
+        if (attachments == null) {
+            attachments = new Attachments();
+        }
         return attachments.getDataHandler(contentID);
     }
 }
Index: kernel/src/org/apache/axis2/context/ConfigurationContext.java
===================================================================
--- kernel/src/org/apache/axis2/context/ConfigurationContext.java	(revision 483440)
+++ kernel/src/org/apache/axis2/context/ConfigurationContext.java	(working copy)
@@ -119,7 +119,7 @@
                 if (serviceGroupContext == null) {
                     AxisServiceGroup axisServiceGroup = messageContext.getAxisServiceGroup();
                     if (axisServiceGroup == null) {
-                        axisServiceGroup = (AxisServiceGroup) messageContext.getAxisService().getParent();
+                        axisServiceGroup = (AxisServiceGroup) axisService.getParent();
                     }
                     serviceGroupContext = new ServiceGroupContext(messageContext.getConfigurationContext(),
                             axisServiceGroup);
@@ -134,7 +134,7 @@
                 serviceGroupContext =
                         getServiceGroupContext(serviceGroupContextId, messageContext);
                 serviceContext =
-                        serviceGroupContext.getServiceContext(messageContext.getAxisService());
+                        serviceGroupContext.getServiceContext(axisService);
             } else {
 
                 // either the key is null or no SGC is found from the give key
@@ -144,10 +144,10 @@
                 }
 
                 if (messageContext.getAxisService() != null) {
-                    AxisServiceGroup axisServiceGroup = (AxisServiceGroup) messageContext.getAxisService().getParent();
+                    AxisServiceGroup axisServiceGroup = (AxisServiceGroup) axisService.getParent();
 
                     serviceGroupContext = new ServiceGroupContext(this, axisServiceGroup);
-                    serviceContext = serviceGroupContext.getServiceContext(messageContext.getAxisService());
+                    serviceContext = serviceGroupContext.getServiceContext(axisService);
 
                     // set the serviceGroupContextID
                     serviceGroupContext.setId(serviceGroupContextId);
@@ -191,13 +191,13 @@
      * @param messageID
      * @param mepContext
      */
-    public synchronized void registerOperationContext(String messageID,
-                                                      OperationContext mepContext) {
+    public void registerOperationContext(String messageID,
+                                         OperationContext mepContext) {
         mepContext.setKey(messageID);
         this.operationContextMap.put(messageID, mepContext);
     }
 
-    public synchronized void registerServiceGroupContext(ServiceGroupContext serviceGroupContext) {
+    public void registerServiceGroupContext(ServiceGroupContext serviceGroupContext) {
         String id = serviceGroupContext.getId();
 
         if (serviceGroupContextMap.get(id) == null) {
@@ -210,7 +210,7 @@
         cleanupServiceGroupContexts();
     }
 
-    public synchronized void addServiceGroupContextintoApplicatoionScopeTable(
+    public void addServiceGroupContextintoApplicatoionScopeTable(
             ServiceGroupContext serviceGroupContext) {
         applicationSessionServiceGroupContextTable.put(
                 serviceGroupContext.getDescription().getServiceGroupName(), serviceGroupContext);
@@ -247,22 +247,19 @@
         return null;
     }
 
-    public synchronized ServiceGroupContext getServiceGroupContext(String serviceGroupContextId,
-                                                                   MessageContext msgContext) {
-        ServiceGroupContext serviceGroupContext = null;
-        if (serviceGroupContextMap != null) {
-            serviceGroupContext = (ServiceGroupContext) serviceGroupContextMap.get(serviceGroupContextId);
-            if (serviceGroupContext != null) {
-                serviceGroupContext.touch();
-            }
+    public ServiceGroupContext getServiceGroupContext(String serviceGroupContextId,
+                                                      MessageContext msgContext) {
+        ServiceGroupContext serviceGroupContext;
+        serviceGroupContext = (ServiceGroupContext) serviceGroupContextMap.get(serviceGroupContextId);
+        if (serviceGroupContext != null) {
+            serviceGroupContext.touch();
         }
         if (serviceGroupContext == null
-                && msgContext != null
                 && msgContext.getSessionContext() != null) {
             serviceGroupContext = msgContext.getSessionContext().getServiceGroupContext(
                     serviceGroupContextId);
         }
-        if (serviceGroupContext == null && msgContext != null) {
+        if (serviceGroupContext == null) {
             AxisService axisService = msgContext.getAxisService();
             if (axisService != null) {
                 AxisServiceGroup asg = (AxisServiceGroup) axisService.getParent();
@@ -324,18 +321,16 @@
     }
 
     private void cleanupServiceGroupContexts() {
-        synchronized (serviceGroupContextMap) {
-            long currentTime = new Date().getTime();
-            Iterator sgCtxtMapKeyIter = serviceGroupContextMap.keySet().iterator();
-            while (sgCtxtMapKeyIter.hasNext()) {
-                String sgCtxtId = (String) sgCtxtMapKeyIter.next();
-                ServiceGroupContext serviceGroupContext =
-                        (ServiceGroupContext) serviceGroupContextMap.get(sgCtxtId);
-                if ((currentTime - serviceGroupContext.getLastTouchedTime()) >
-                        getServiceGroupContextTimoutInterval()) {
-                    sgCtxtMapKeyIter.remove();
-                    cleanupServiceContexts(serviceGroupContext);
-                }
+        long currentTime = new Date().getTime();
+        Iterator sgCtxtMapKeyIter = serviceGroupContextMap.keySet().iterator();
+        while (sgCtxtMapKeyIter.hasNext()) {
+            String sgCtxtId = (String) sgCtxtMapKeyIter.next();
+            ServiceGroupContext serviceGroupContext =
+                    (ServiceGroupContext) serviceGroupContextMap.get(sgCtxtId);
+            if ((currentTime - serviceGroupContext.getLastTouchedTime()) >
+                    getServiceGroupContextTimoutInterval()) {
+                sgCtxtMapKeyIter.remove();
+                cleanupServiceContexts(serviceGroupContext);
             }
         }
     }
Index: kernel/src/org/apache/axis2/receivers/RawXMLINOutAsyncMessageReceiver.java
===================================================================
--- kernel/src/org/apache/axis2/receivers/RawXMLINOutAsyncMessageReceiver.java	(revision 483440)
+++ kernel/src/org/apache/axis2/receivers/RawXMLINOutAsyncMessageReceiver.java	(working copy)
@@ -41,9 +41,9 @@
  */
 public class RawXMLINOutAsyncMessageReceiver extends AbstractInOutAsyncMessageReceiver {
 
-    private Method findOperation(AxisOperation op, Class ImplClass) {
+    private Method findOperation(AxisOperation op, Class implClass) {
         String methodName = op.getName().getLocalPart();
-        Method[] methods = ImplClass.getMethods();
+        Method[] methods = implClass.getMethods();
 
         for (int i = 0; i < methods.length; i++) {
             if (methods[i].getName().equals(methodName) &&
@@ -73,10 +73,10 @@
             Object obj = getTheImplementationObject(msgContext);
 
             // find the WebService method
-            Class ImplClass = obj.getClass();
+            Class implClass = obj.getClass();
 
-            AxisOperation opDesc = msgContext.getOperationContext().getAxisOperation();
-            Method method = findOperation(opDesc, ImplClass);
+            AxisOperation opDesc = msgContext.getAxisOperation();
+            Method method = findOperation(opDesc, implClass);
 
             if (method != null) {
                 OMElement result = (OMElement) method.invoke(
Index: kernel/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java
===================================================================
--- kernel/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java	(revision 483440)
+++ kernel/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java	(working copy)
@@ -26,8 +26,6 @@
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.engine.MessageReceiver;
 import org.apache.axis2.i18n.Messages;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import java.lang.reflect.Method;
 
@@ -45,11 +43,9 @@
 public class RawXMLINOutMessageReceiver extends AbstractInOutSyncMessageReceiver
         implements MessageReceiver {
 
-    private static final Log log = LogFactory.getLog(RawXMLINOutMessageReceiver.class);
-
-    private Method findOperation(AxisOperation op, Class ImplClass) {
+    private Method findOperation(AxisOperation op, Class implClass) {
         String methodName = op.getName().getLocalPart();
-        Method[] methods = ImplClass.getMethods();
+        Method[] methods = implClass.getMethods();
 
         for (int i = 0; i < methods.length; i++) {
             if (methods[i].getName().equals(methodName) &&
@@ -79,10 +75,10 @@
             Object obj = getTheImplementationObject(msgContext);
 
             // find the WebService method
-            Class ImplClass = obj.getClass();
+            Class implClass = obj.getClass();
 
-            AxisOperation opDesc = msgContext.getOperationContext().getAxisOperation();
-            Method method = findOperation(opDesc, ImplClass);
+            AxisOperation opDesc = msgContext.getAxisOperation();
+            Method method = findOperation(opDesc, implClass);
 
             if (method != null) {
                 OMElement result = (OMElement) method.invoke(
Index: kernel/src/org/apache/axis2/receivers/RawXMLINOnlyMessageReceiver.java
===================================================================
--- kernel/src/org/apache/axis2/receivers/RawXMLINOnlyMessageReceiver.java	(revision 483440)
+++ kernel/src/org/apache/axis2/receivers/RawXMLINOnlyMessageReceiver.java	(working copy)
@@ -23,8 +23,6 @@
 import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.engine.MessageReceiver;
 import org.apache.axis2.i18n.Messages;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import java.lang.reflect.Method;
 
@@ -42,11 +40,9 @@
 public class RawXMLINOnlyMessageReceiver extends AbstractInMessageReceiver
         implements MessageReceiver {
 
-    private static final Log log = LogFactory.getLog(RawXMLINOnlyMessageReceiver.class);
-
-    private Method findOperation(AxisOperation op, Class ImplClass) {
+    private Method findOperation(AxisOperation op, Class implClass) {
         String methodName = op.getName().getLocalPart();
-        Method[] methods = ImplClass.getMethods();
+        Method[] methods = implClass.getMethods();
 
         for (int i = 0; i < methods.length; i++) {
             if (methods[i].getName().equals(methodName) &&
@@ -74,10 +70,10 @@
             Object obj = getTheImplementationObject(msgContext);
 
             // find the WebService method
-            Class ImplClass = obj.getClass();
+            Class implClass = obj.getClass();
 
-            AxisOperation op = msgContext.getOperationContext().getAxisOperation();
-            Method method = findOperation(op, ImplClass);
+            AxisOperation op = msgContext.getAxisOperation();
+            Method method = findOperation(op, implClass);
 
             if (method != null) {
                 method.invoke(
Index: kernel/src/org/apache/axis2/transport/http/HTTPWorker.java
===================================================================
--- kernel/src/org/apache/axis2/transport/http/HTTPWorker.java	(revision 483440)
+++ kernel/src/org/apache/axis2/transport/http/HTTPWorker.java	(working copy)
@@ -173,7 +173,7 @@
                     if (schema != null) {
                         EntityTemplate entity = new EntityTemplate(new ContentProducer() {
 
-                            public void writeTo(final OutputStream outstream) throws IOException {
+                            public void writeTo(final OutputStream outstream) {
                                 schema.write(outstream);
                             }
 
Index: kernel/src/org/apache/axis2/transport/http/AxisServlet.java
===================================================================
--- kernel/src/org/apache/axis2/transport/http/AxisServlet.java	(revision 483440)
+++ kernel/src/org/apache/axis2/transport/http/AxisServlet.java	(working copy)
@@ -62,7 +62,6 @@
 public class AxisServlet extends HttpServlet implements TransportListener {
 
     private static final Log log = LogFactory.getLog(AxisServlet.class);
-    private static final long serialVersionUID = -2085869393709833372L;
     public static final String CONFIGURATION_CONTEXT = "CONFIGURATION_CONTEXT";
     public static final String SESSION_ID = "SessionId";
     protected transient ConfigurationContext configContext;
@@ -104,10 +103,8 @@
         msgContext.setFrom(new EndpointReference(req.getRemoteAddr()));
         msgContext.setProperty(MessageContext.TRANSPORT_HEADERS,
                 getTransportHeaders(req));
-        msgContext.setProperty(Constants.Configuration.TRANSPORT_IN_URL, req.getRequestURL().toString());
         msgContext.setIncomingTransportName(Constants.TRANSPORT_HTTP);
         msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST, req);
-//        msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETCONTEXT, servletConfig.getServletContext());
         return msgContext;
     }
 
@@ -247,7 +244,6 @@
 
             try {
                 // adding ServletContext into msgContext;
-                out = res.getOutputStream();
                 HTTPTransportUtils.processHTTPPostRequest(msgContext, req.getInputStream(), out,
                         req.getContentType(), req.getHeader(HTTPConstants.HEADER_SOAP_ACTION),
                         req.getRequestURL().toString());
Index: kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java
===================================================================
--- kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(revision 483440)
+++ kernel/src/org/apache/axis2/transport/http/HTTPTransportUtils.java	(working copy)
@@ -160,8 +160,12 @@
     private static final int VERSION_SOAP11 = 1;
     private static final int VERSION_SOAP12 = 2;
 
-    public static void processHTTPPostRequest(MessageContext msgContext, InputStream in,
-                                              OutputStream out, String contentType, String soapActionHeader, String requestURI)
+    public static void processHTTPPostRequest(MessageContext msgContext,
+                                              InputStream in,
+                                              OutputStream out,
+                                              String contentType,
+                                              String soapActionHeader,
+                                              String requestURI)
             throws AxisFault {
 
         int soapVersion = VERSION_UNKNOWN;
Index: kernel/src/org/apache/axis2/transport/http/server/DefaultHttpServiceProcessor.java
===================================================================
--- kernel/src/org/apache/axis2/transport/http/server/DefaultHttpServiceProcessor.java	(revision 483440)
+++ kernel/src/org/apache/axis2/transport/http/server/DefaultHttpServiceProcessor.java	(working copy)
@@ -175,7 +175,6 @@
             msgContext.setTransportOut(transportOut);
             msgContext.setServiceGroupContextId(UUIDGenerator.getUUID());
             msgContext.setServerSide(true);
-            msgContext.setProperty(Constants.Configuration.TRANSPORT_IN_URL, reqline.getUri());
 
             // set the transport Headers
             HashMap headerMap = new HashMap();
Index: kernel/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java
===================================================================
--- kernel/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(revision 483440)
+++ kernel/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(working copy)
@@ -23,7 +23,6 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
 import org.apache.axis2.util.JavaUtils;
-import org.apache.axis2.addressing.AddressingConstants;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.MessageContext;
@@ -266,8 +265,6 @@
             }
         }
 
-        format.setDoOptimize(msgContext.isDoingMTOM());
-        format.setDoingSWA(msgContext.isDoingSwA());
         format.setAutoCloseWriter(true);
         if (!(msgContext.isDoingMTOM()) & (msgContext.isDoingSwA())
                 & !(msgContext.isDoingREST())) {
Index: kernel/src/org/apache/axis2/engine/InstanceDispatcher.java
===================================================================
--- kernel/src/org/apache/axis2/engine/InstanceDispatcher.java	(revision 483440)
+++ kernel/src/org/apache/axis2/engine/InstanceDispatcher.java	(working copy)
@@ -101,8 +101,6 @@
                         msgContext);
             }
         }
-        // setting myEPR
-        String transportURL = (String) msgContext.getProperty(Constants.Configuration.TRANSPORT_IN_URL);
         if (serviceContext != null) {
             serviceContext.setMyEPR(msgContext.getTo());
         }
Index: kernel/src/org/apache/axis2/engine/RequestURIBasedDispatcher.java
===================================================================
--- kernel/src/org/apache/axis2/engine/RequestURIBasedDispatcher.java	(revision 483440)
+++ kernel/src/org/apache/axis2/engine/RequestURIBasedDispatcher.java	(working copy)
@@ -20,6 +20,7 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.HandlerDescription;
@@ -84,12 +85,13 @@
             }
             String filePart = toEPR.getAddress();
             //REVIEW: (nagy) Parsing the RequestURI will also give us the operationName if present, so we could conceivably store it in the MessageContext, but doing so and retrieving it is probably no faster than simply reparsing the URI
+            ConfigurationContext configurationContext = messageContext.getConfigurationContext();
             String[] values = Utils.parseRequestURLForServiceAndOperation(filePart,
-                    messageContext.getConfigurationContext().getServiceContextPath());
+                    configurationContext.getServiceContextPath());
 
             if ((values.length >= 1) && (values[0] != null)) {
                 AxisConfiguration registry =
-                        messageContext.getConfigurationContext().getAxisConfiguration();
+                        configurationContext.getAxisConfiguration();
 
                 return registry.getService(values[0]);
             } else {
Index: kernel/src/org/apache/axis2/engine/DispatchPhase.java
===================================================================
--- kernel/src/org/apache/axis2/engine/DispatchPhase.java	(revision 483440)
+++ kernel/src/org/apache/axis2/engine/DispatchPhase.java	(working copy)
@@ -1,7 +1,6 @@
 package org.apache.axis2.engine;
 
 import org.apache.axis2.AxisFault;
-import org.apache.axis2.Constants;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.addressing.AddressingHelper;
 import org.apache.axis2.context.MessageContext;
@@ -32,8 +31,6 @@
 
 public class DispatchPhase extends Phase {
 
-    private static final long serialVersionUID = -6596799621473224363L;
-
     public DispatchPhase() {
     }
 
Index: kernel/src/org/apache/axis2/engine/AddressingBasedDispatcher.java
===================================================================
--- kernel/src/org/apache/axis2/engine/AddressingBasedDispatcher.java	(revision 483440)
+++ kernel/src/org/apache/axis2/engine/AddressingBasedDispatcher.java	(working copy)
@@ -20,10 +20,7 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.AddressingConstants;
 import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.context.MessageContext;
-import org.apache.axis2.context.OperationContext;
-import org.apache.axis2.context.ServiceContext;
-import org.apache.axis2.context.ServiceGroupContext;
+import org.apache.axis2.context.*;
 import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.HandlerDescription;
@@ -76,8 +73,9 @@
                 log.debug(Messages.getMessage("checkingserviceforepr", address));
             }
             QName serviceName;
+            ConfigurationContext configurationContext = messageContext.getConfigurationContext();
             String[] values = Utils.parseRequestURLForServiceAndOperation(address,
-                    messageContext.getConfigurationContext().getServiceContextPath());
+                    configurationContext.getServiceContextPath());
             if (values == null) {
                 return null;
             }
@@ -89,7 +87,7 @@
                 serviceName = new QName(values[0]);
 
                 AxisConfiguration registry =
-                        messageContext.getConfigurationContext().getAxisConfiguration();
+                        configurationContext.getAxisConfiguration();
 
                 return registry.getService(serviceName.getLocalPart());
             }
Index: kernel/src/org/apache/axis2/engine/SOAPMessageBodyBasedDispatcher.java
===================================================================
--- kernel/src/org/apache/axis2/engine/SOAPMessageBodyBasedDispatcher.java	(revision 483440)
+++ kernel/src/org/apache/axis2/engine/SOAPMessageBodyBasedDispatcher.java	(working copy)
@@ -21,6 +21,7 @@
 import org.apache.axiom.om.OMNamespace;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.HandlerDescription;
@@ -45,7 +46,7 @@
 
     public AxisOperation findOperation(AxisService service, MessageContext messageContext)
             throws AxisFault {
-        QName operationName = null;
+        QName operationName ;
         
         OMElement bodyFirstChild = messageContext.getEnvelope().getBody().getFirstElement();
 
@@ -68,7 +69,7 @@
      * @see org.apache.axis2.engine.AbstractDispatcher#findService(org.apache.axis2.context.MessageContext)
      */
     public AxisService findService(MessageContext messageContext) throws AxisFault {
-        String serviceName = null;
+        String serviceName ;
         
         OMElement bodyFirstChild = messageContext.getEnvelope().getBody().getFirstElement();
 
@@ -83,14 +84,15 @@
                             "Checking for Service using SOAP message body's first child's namespace : "
                                     + filePart);
                 }
+                ConfigurationContext configurationContext = messageContext.getConfigurationContext();
                 String[] values = Utils.parseRequestURLForServiceAndOperation(filePart,
-                        messageContext.getConfigurationContext().getServiceContextPath());
+                        configurationContext.getServiceContextPath());
 
                 if (values[0] != null) {
                     serviceName = values[0];
 
                     AxisConfiguration registry =
-                            messageContext.getConfigurationContext().getAxisConfiguration();
+                            configurationContext.getAxisConfiguration();
 
                     return registry.getService(serviceName);
                 }
