package org.apache.axis2.handler;

import java.util.List;

import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.description.AxisMessage;
import org.apache.axis2.description.Parameter;
import org.apache.axis2.handlers.AbstractHandler;
import org.apache.axis2.policy.model.MTOMAssertion;
import org.apache.neethi.Assertion;
import org.apache.neethi.Policy;

/**
 * 
 * @author <a href="mailto:Dobri.Kitipov@softwareag.com">Dobri Kitipov (bgdki)</a>
 */

public class MTOMOutHandler extends AbstractHandler {

	public InvocationResponse invoke(MessageContext msgCtx) throws AxisFault {

		Policy policy = msgCtx.getEffectivePolicy();

		if (policy == null) {
			return InvocationResponse.CONTINUE;
		}

		// TODO When we have policy alternatives support we will have to change
		// the implementation.
		List<Assertion> list = (List<Assertion>) policy.getAlternatives().next();

		for (Assertion assertion : list) {
			if (assertion instanceof MTOMAssertion) {
				boolean isOptional = assertion.isOptional();

				if (isOptional) {
					msgCtx.setProperty(Constants.Configuration.ENABLE_MTOM,
							Constants.VALUE_OPTIONAL);
				} else {
					msgCtx.setProperty(Constants.Configuration.ENABLE_MTOM,
							Constants.VALUE_TRUE);
				}

			}
		}

		return InvocationResponse.CONTINUE;
	}

}
