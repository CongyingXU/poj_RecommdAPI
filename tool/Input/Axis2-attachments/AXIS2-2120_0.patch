Index: axis2/modules/kernel/src/org/apache/axis2/deployment/AxisConfigBuilder.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(revision 503915)
+++ axis2/modules/kernel/src/org/apache/axis2/deployment/AxisConfigBuilder.java	(working copy)
@@ -20,6 +20,7 @@
 import org.apache.axiom.om.OMAttribute;
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.dataRetrieval.DRConstants;
 import org.apache.axis2.deployment.util.PhasesInfo;
 import org.apache.axis2.deployment.util.Utils;
 import org.apache.axis2.description.*;
@@ -158,6 +159,14 @@
                 }
             }
 
+             //process dataLocator configuration 
+            OMElement dataLocatorElement =
+                config_element.getFirstChildWithName(new QName(DRConstants.DATA_LOCATOR_ELEMENT));
+          
+            if (dataLocatorElement != null) {
+            	processDataLocatorConfig(dataLocatorElement);
+            }    
+
         } catch (XMLStreamException e) {
             throw new DeploymentException(e);
         }
@@ -448,6 +457,34 @@
         }
     }
 
+    /*
+     * process data locator configuration for data retrieval.
+     */
+    private void processDataLocatorConfig(OMElement dataLocatorElement) {
+		OMAttribute serviceOverallDataLocatorclass = dataLocatorElement
+				.getAttribute(new QName(DRConstants.CLASS_ATTRIBUTE));
+		if (serviceOverallDataLocatorclass != null) {
+			String className = serviceOverallDataLocatorclass
+					.getAttributeValue();
+			axisConfig.addDataLocatorClassNames(DRConstants.GLOBAL_LEVEL,
+					className);
+		}
+		Iterator iterator = dataLocatorElement.getChildrenWithName(new QName(
+				DRConstants.DIALECT_LOCATOR_ELEMENT));
+
+		while (iterator.hasNext()) {
+			OMElement locatorElement = (OMElement) iterator.next();
+			OMAttribute dialect = locatorElement.getAttribute(new QName(
+					DRConstants.DIALECT_ATTRIBUTE));
+			OMAttribute dialectclass = locatorElement.getAttribute(new QName(
+					DRConstants.CLASS_ATTRIBUTE));
+			axisConfig.addDataLocatorClassNames(dialect.getAttributeValue(),
+					dialectclass.getAttributeValue());
+
+		}
+	}
+	
+    
     private Phase getPhase(String className)
             throws ClassNotFoundException, IllegalAccessException, InstantiationException {
         if (className == null) {
Index: axis2/modules/kernel/src/org/apache/axis2/deployment/ServiceBuilder.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/deployment/ServiceBuilder.java	(revision 503915)
+++ axis2/modules/kernel/src/org/apache/axis2/deployment/ServiceBuilder.java	(working copy)
@@ -21,6 +21,7 @@
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.dataRetrieval.DRConstants;
 import org.apache.axis2.deployment.util.PhasesInfo;
 import org.apache.axis2.deployment.util.Utils;
 import org.apache.axis2.description.*;
@@ -331,6 +332,14 @@
             }
             Iterator moduleConfigs = service_element.getChildrenWithName(new QName(TAG_MODULE_CONFIG));
             processServiceModuleConfig(moduleConfigs, service, service);
+            
+            // Loading Data Locator(s) configured
+            OMElement dataLocatorElement =
+                service_element.getFirstChildWithName(new QName(DRConstants.DATA_LOCATOR_ELEMENT));
+            if (dataLocatorElement != null) {
+            	processDataLocatorConfig(dataLocatorElement, service);
+             }         
+        
         } catch (XMLStreamException e) {
             throw new DeploymentException(e);
         } catch (AxisFault axisFault) {
@@ -673,4 +682,26 @@
         }
     }
 
+    
+    
+    /*
+     * process data locator configuration for data retrieval.
+     */
+    private void processDataLocatorConfig(OMElement dataLocatorElement, AxisService service) {
+        OMAttribute serviceOverallDataLocatorclass = dataLocatorElement.getAttribute(new QName(DRConstants.CLASS_ATTRIBUTE));
+        if (serviceOverallDataLocatorclass != null){
+            String className = serviceOverallDataLocatorclass.getAttributeValue();
+            service.addDataLocatorClassNames(DRConstants.SERVICE_LEVEL, className);
+        }
+        Iterator iterator = dataLocatorElement.getChildrenWithName(new QName(DRConstants.DIALECT_LOCATOR_ELEMENT));
+        
+        while (iterator.hasNext()) {
+            OMElement locatorElement = (OMElement) iterator.next();
+            OMAttribute dialect = locatorElement.getAttribute(new QName(DRConstants.DIALECT_ATTRIBUTE));
+            OMAttribute dialectclass = locatorElement.getAttribute(new QName(DRConstants.CLASS_ATTRIBUTE));
+            service.addDataLocatorClassNames(dialect.getAttributeValue(), dialectclass.getAttributeValue());
+            
+          }
+
+    }
 }
Index: axis2/modules/kernel/src/org/apache/axis2/description/AxisService.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/description/AxisService.java	(revision 503915)
+++ axis2/modules/kernel/src/org/apache/axis2/description/AxisService.java	(working copy)
@@ -23,6 +23,17 @@
 import org.apache.axis2.addressing.AddressingConstants;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.client.Options;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.AxisDataLocator;
+import org.apache.axis2.dataRetrieval.AxisDataLocatorImpl;
+import org.apache.axis2.dataRetrieval.DRConstants;
+import org.apache.axis2.dataRetrieval.DataRetrievalException;
+import org.apache.axis2.dataRetrieval.LocatorType;
+import org.apache.axis2.dataRetrieval.OutputForm;
+
+import org.apache.axis2.dataRetrieval.Data;
+import org.apache.axis2.dataRetrieval.DataRetrievalRequest;
 import org.apache.axis2.deployment.util.PhasesInfo;
 import org.apache.axis2.deployment.util.Utils;
 import org.apache.axis2.engine.*;
@@ -191,6 +202,13 @@
 
     private TypeTable typeTable;
 
+    // Data Locators for  WS-Mex Support
+    private HashMap dataLocators;
+    private HashMap dataLocatorClassNames;
+    private AxisDataLocatorImpl defaultDataLocator;
+    // Define search sequence for datalocator based on Data Locator types. 
+	LocatorType[] availableDataLocatorTypes = new LocatorType[]{LocatorType.SERVICE_DIALECT, LocatorType.SERVICE_LEVEL,LocatorType.GLOBAL_DIALECT, LocatorType.GLOBAL_LEVEL, LocatorType.DEFAULT_AXIS};
+
     // name of the  binding used : use in codegeneration
     private String bindingName;
 
@@ -265,6 +283,9 @@
           }
         });
         objectSupplier = new DefaultObjectSupplier();
+        dataLocators = new HashMap();
+        dataLocatorClassNames = new HashMap();
+
     }
 
     /**
@@ -798,24 +819,40 @@
         }
     }
 
-    private void getWSDL(OutputStream out, String[] serviceURL, String servicePath) throws AxisFault {
-        if (this.wsdlFound) {
-            AxisService2OM axisService2WOM = new AxisService2OM(this,
-                    serviceURL, "document", "literal", servicePath);
-            try {
-                OMElement wsdlElement = axisService2WOM.generateOM();
-                wsdlElement.serialize(out);
-                out.flush();
-                out.close();
-            } catch (Exception e) {
-                throw new AxisFault(e);
-            }
-        } else {
-            printWSDLError(out);
-        }
+    private void getWSDL(OutputStream out, String[] serviceURL,
+			String servicePath) throws AxisFault {
+		if (this.wsdlFound) {
+		
+			// Retrieve WSDL using the same data retrieval path for GetMetadata request.
+			DataRetrievalRequest request = new DataRetrievalRequest();
+			request.putDialect(DRConstants.SPEC.DIALECT_TYPE_WSDL);
+			request.putOutputForm(OutputForm.INLINE_FORM);
+			MessageContext context = new MessageContext();
+			context.setAxisService(this);
+			context.setTo(new EndpointReference(serviceURL[0]));
+			ConfigurationContext confContext = new ConfigurationContext(this
+					.getAxisConfiguration());
+			confContext.setServicePath(servicePath);
+			context.setConfigurationContext(confContext);
+			Data[] result = getData(request, context);
+			OMElement wsdlElement;
+			if (result != null && result[0] != null) {
+				wsdlElement = (OMElement) (result[0].getData());
+				try {
+					wsdlElement.serialize(out);
+					out.flush();
+					out.close();
+				} catch (Exception e) {
+					throw new AxisFault(e);
+				}
+			}
 
-    }
+		} else {
+			printWSDLError(out);
+		}
 
+	}
+
     private void printWSDLError(OutputStream out) throws AxisFault {
         try {
             String wsdlntfound = "<error>" +
@@ -1881,7 +1918,192 @@
     public void setTypeTable(TypeTable typeTable) {
         this.typeTable = typeTable;
     }
+    
+  
+    /**
+     * Find a data locator from the available data locators (both configured and default ones) to retrieve Metadata or data
+     * specified in the request. 
+     * 
+     * @param request an {@link DataRetrievalRequest} object
+     * @param msgContext message context
+     * @return array of {@link Data} object for the request. 
+     * @throws AxisFault 
+     */
+    
+    public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws AxisFault {
+    	
+		Data[] data = null;
+		String dialect = request.getDialect();
+		AxisDataLocator dataLocator = null;
+		int nextDataLocatorIndex = 0;
+		int totalLocators = availableDataLocatorTypes.length;
+		for (int i = 0; i < totalLocators; i++) {
+			dataLocator = getDataLocator(availableDataLocatorTypes[i], dialect);
+			if (dataLocator != null) {
+				nextDataLocatorIndex = i + 1;
+				break;
+			}
+		}
 
+		data = dataLocator.getData(request, msgContext);
+		// Null means Data Locator not understood request. Automatically find
+		// Data Locator in the hierarchy to process the request.
+		if (data == null) {
+			if (nextDataLocatorIndex < totalLocators) {
+				data = bubbleupDataLocators(nextDataLocatorIndex, request,
+						msgContext);
+			}
+
+		}
+		return data;
+	}
+   
+    /*
+     * To search the next Data Locator from the available Data Locators that understood
+     * the data retrieval request.
+     */
+    private Data[] bubbleupDataLocators(int nextIndex,
+			DataRetrievalRequest request, MessageContext msgContext)
+			throws AxisFault {
+		Data[] data = null;
+		if (nextIndex < availableDataLocatorTypes.length) {
+			AxisDataLocator dataLocator = getDataLocator(
+					availableDataLocatorTypes[nextIndex], request.getDialect());
+			nextIndex++;
+			if (dataLocator != null) {
+				data = dataLocator.getData(request, msgContext);
+				if (data==null){
+					data = bubbleupDataLocators(nextIndex, request, msgContext);
+				}
+				else return data;
+
+			}
+			else data = bubbleupDataLocators(nextIndex, request, msgContext);
+			
+
+		}
+		return data;
+	}
+   
+     /**
+     * Save data Locator configured at service level for this Axis Service
+     * 
+     * @param dialect- an absolute URI represents the Dialect i.e. WSDL, Policy, Schema or
+     *                 "ServiceLevel" for non-dialect service level data locator.
+     * @param classname - class name of the Data Locator configured to support data retrieval 
+     *                  for the specified dialect.
+     */
+    public void addDataLocatorClassNames(String dialect, String dataLocatorClassName) {
+        dataLocatorClassNames.put(dialect, dataLocatorClassName);
+    }
+   
+   
+    /*
+     * Get data locator instance based on the LocatorType and dialect.
+     */
+    private AxisDataLocator getDataLocator(LocatorType locatorType, String dialect) throws AxisFault {
+    	AxisDataLocator locator = null;
+        if (locatorType == LocatorType.SERVICE_DIALECT)   
+        	 locator =  getServiceDataLocator( dialect);  
+        else if (locatorType == LocatorType.SERVICE_LEVEL)   
+          	 locator =  getServiceDataLocator( DRConstants.SERVICE_LEVEL); 
+        else if (locatorType == LocatorType.GLOBAL_DIALECT)   
+         	 locator =  getGlobalDataLocator( dialect); 	
+        else if (locatorType == LocatorType.GLOBAL_LEVEL)   
+        	 locator =  getGlobalDataLocator( DRConstants.GLOBAL_LEVEL);
+        else if (locatorType == LocatorType.DEFAULT_AXIS)   
+       	     locator =  getDefaultDataLocator();
+        else
+        	 locator =  getDefaultDataLocator();
+    
+      
+    	return locator;
+    }
+    	  
+    // Return default Axis2 Data Locator
+    private AxisDataLocator getDefaultDataLocator() throws DataRetrievalException {
+
+		if (defaultDataLocator == null)
+			defaultDataLocator = new AxisDataLocatorImpl(this);
+		
+		defaultDataLocator.loadServiceData();
+		
+		return defaultDataLocator;
+	}
+       
+    
+	/*
+	 * Checks if service level data locator configured for specified dialect.
+	 * Returns an instance of the data locator if exists, and null otherwise.
+	 */
+	private AxisDataLocator getServiceDataLocator(String dialect)
+			throws AxisFault {
+		AxisDataLocator locator = null;
+		locator = (AxisDataLocator)dataLocators.get(dialect);
+		if (locator == null) {
+			String className = (String)dataLocatorClassNames.get(dialect);
+			if (className != null) {
+				locator = loadDataLocator(className);
+				dataLocators.put(dialect, locator);
+			}
+
+		}
+
+		return locator;
+
+	}
+      
+	/*
+	 * Checks if global level data locator configured for specified dialect.
+	 * @param dialect- an absolute URI represents the Dialect i.e. WSDL, Policy, Schema or
+     *                 "GlobalLevel" for non-dialect Global level data locator.
+	 * Returns an instance of the data locator if exists, and null otherwise.
+	 */
+	
+	public AxisDataLocator getGlobalDataLocator(String dialect)
+			throws AxisFault {
+		AxisConfiguration axisConfig = getAxisConfiguration();
+		AxisDataLocator locator = null;
+		if (axisConfig != null)
+			locator = axisConfig.getDataLocator(dialect);
+		if (locator == null) {
+			String className = axisConfig.getDataLocatorClassName(dialect);
+			if (className != null) {
+				locator = loadDataLocator(className);
+				axisConfig.addDataLocator(dialect, locator);
+			}
+
+		}
+
+		return locator;
+
+	}
+       
+    
+    protected AxisDataLocator loadDataLocator(String className)
+			throws AxisFault {
+
+		AxisDataLocator locator = null;
+
+		try {
+			Class dataLocator;
+			dataLocator = Class.forName(className, true, serviceClassLoader);
+			locator = (AxisDataLocator) dataLocator.newInstance();
+		} catch (ClassNotFoundException e) {
+			throw new AxisFault(e);
+		} catch (IllegalAccessException e) {
+			throw new AxisFault(e);
+		} catch (InstantiationException e) {
+			throw new AxisFault(e);
+
+		}
+
+		return locator;
+	}
+
+
+   
     /**
      * When we are trying to find out the operation by the QName of the SOAPBody first child, this
      * map will help to retrieve that data very fast.
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalRequest.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalRequest.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalRequest.java	(revision 0)
@@ -0,0 +1,110 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+import java.util.HashMap;
+
+/**
+ * Allow to specify options/parameters for getData request. The list is extensible
+ * based on the information needed for the Data Locator to process the request. 
+ *
+ */
+
+public class DataRetrievalRequest extends HashMap{
+
+	private static final long serialVersionUID = -374933082062124908L;
+	
+	/**
+	 * Key used to define Dialect of data to be retrieved.
+	 */
+	public final static String DIALET="Dialect";
+	/**
+	 * Key used to defined Identify of data to be retrieved.
+	 */
+	public final static String IDENTIFIER = "Identifier";
+	/**
+	 * Key used to define the output format of retrieved data to be returned. 
+	 */
+	public final static String OUTPUT_FORM = "OutputForm";
+	
+   
+ 
+	/**
+	 * Returns the Dialect value specified in the request.
+	 * @return a String that has dialect info.
+	 */
+	
+	public String getDialect() throws DataRetrievalException{
+		String dialect = (String)(get(DIALET));
+		if (dialect == null || dialect.length() == 0)
+			throw new DataRetrievalException("Empty dialect was detected. Dialect must have value.");
+	
+		return (dialect);
+	}
+	
+	/**
+	 * Returns the Identifier value specified in the request.
+	 * @return a String that has Identifier info.
+	 */
+	
+	public String getIdentifier(){
+		return (String)(get(IDENTIFIER));
+	}
+
+	/**
+	 * Returns the output format specified in the request.
+	 * @return output format of data retrieved.
+	 */
+
+	public OutputForm getOutputForm(){
+		return (OutputForm)(get(OUTPUT_FORM));
+	}
+	
+	/**
+	 * Allow to set the dialect of data to retrieve
+	 * @param dialect - Valid dialect value supported by the Data Locator.
+	 * @throws DataRetrievalException
+	 */
+	
+	public void putDialect(String dialect)throws DataRetrievalException {
+		if (dialect == null || dialect.length() == 0)
+			throw new DataRetrievalException("Empty dialect was detected. Dialect must have value.");
+		 put(DIALET, dialect);
+	}
+	
+	/**
+	 * Allow to set the identifier of data to retrieve
+	 * @param identifier - identifier value 
+	 * @throws DataRetrievalException
+	 */
+	
+	public void putIdentifier(String identifier) {
+		    put(IDENTIFIER, identifier);
+	}
+	
+	/**
+	 * Allow to set the output format of the data retrieved.
+	 * @param form - Valid output format types supported by the Data Locator.
+	 * @throws DataRetrievalException
+	 */
+	
+	public void putOutputForm(OutputForm form) {
+	    put(OUTPUT_FORM, form);
+}
+	
+	
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DRConstants.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DRConstants.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DRConstants.java	(revision 0)
@@ -0,0 +1,95 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+/**
+ * Defines constants referenced in data retrieval classes. 
+ */ 
+public interface DRConstants {
+	public interface SPEC_VERSIONS {
+		String v1_0 = "Spec_2004_09";
+	}
+	
+ 
+    public interface SOAPVersion {
+     		int v1_1 = 1;
+
+    		int v1_2 = 2;
+    
+	}
+    
+    /**
+     * 
+     * Defines contants references in WS-Mex specification 
+     *
+     */
+    
+    public interface SPEC {
+    	String NS_URI = "http://schemas.xmlsoap.org/ws/2004/09/mex";
+
+	    public interface Actions {
+			String GET_METADATA_REQUEST = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Request";
+			String GET_METADATA_RESPONSE = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Response";
+			
+	    }
+	    
+		String NS_PREFIX = "mex";
+		String GET_METADATA = "GetMetadata";
+		String DIALET = "Dialect";
+		String IDENTIFIER = "Identifier";
+		String METADATA = "Metadata";
+		String METADATA_SECTION = "MetadataSection";
+		String METADATA_REFERENCE = "MetadataReference";
+		String LOCATION = "Location";
+		String TYPE = "type";
+		String DIALECT_TYPE_WSDL = "http://schemas.xmlsoap.org/wsdl/";
+		String DIALECT_TYPE_POLICY = "http://schemas.xmlsoap.org/ws/2004/09/policy";
+		String DIALECT_TYPE_SCHEMA = "http://www.w3.org/2001/XMLSchema";
+		
+	}
+    
+ 
+  // Following constants used for configuring Data Locator in axis.xml and services.xml	
+	String DATA_LOCATOR_ELEMENT = "dataLocator";
+	String DIALECT_LOCATOR_ELEMENT = "dialectLocator";
+	String DIALECT_ATTRIBUTE = "dialect";
+	String CLASS_ATTRIBUTE = "class";
+	
+  // Service level and Global level type Data Locator
+	String SERVICE_LEVEL = "ServiceLevel";
+	String GLOBAL_LEVEL = "GlobalLevel";
+
+  /**
+   * 
+   * Defines contants references in Service Data 
+   *
+   */
+	
+	 public interface SERVICE_DATA {
+		 String FILE_NAME = "ServiceData.xml";
+		 String FILE_TYPE = "svcData";
+			
+		 String DATA = "Data";
+         String ENDPOINT_REFERENCE = "EndpointReference";
+         String URL = "URL";
+         String FILE = "file";
+         String DIALECT = "dialect";
+         String IDENTIFIER = "identifier";
+         
+	 }
+    	
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/AxisDataLocatorImpl.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/AxisDataLocatorImpl.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/AxisDataLocatorImpl.java	(revision 0)
@@ -0,0 +1,151 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.dataRetrieval;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import javax.xml.namespace.QName;
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.AxisService;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * The Default Axis2 Data Locator implementation 
+ *
+ */
+
+public class AxisDataLocatorImpl implements AxisDataLocator {
+	private static final Log log = LogFactory.getLog(AxisDataLocatorImpl.class);
+
+	// HashMap to cache Data elements defined in ServiceData. 
+	private  HashMap dataMap=new HashMap(); 
+	
+	private AxisService axisService;
+	
+	
+	/**
+	 * Constructor
+	 * @throws DataRetrievalException 
+	 *
+	 */
+	public AxisDataLocatorImpl(AxisService in_axisService) throws  DataRetrievalException{
+		super();
+		axisService = in_axisService;
+	}
+
+	/**
+	 *
+     * Retrieves and returns data based on the specified request.
+	 */
+	public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws DataRetrievalException{
+		Data[] data = null;
+		String dialect = request.getDialect();
+		String identifier = request.getIdentifier();
+		String key = dialect;
+		ArrayList dataList = new ArrayList();
+		if (identifier != null){
+			key = key + identifier;
+			if (dataMap.get(key) != null)
+			    dataList.add(dataMap.get(key));
+		}
+		else {
+		   dataList = getDataList(dialect);
+		}
+
+		
+		AxisDataLocator dataLocator = DataLocatorFactory
+				.createDataLocator(dialect, (ServiceData[])dataList.toArray(new ServiceData[0]));
+	
+		if (dataLocator != null) {
+			try {
+			   data = dataLocator.getData(request, msgContext);
+			}
+			catch (Throwable e){
+			    log.info("getData request failed for dialect, " + dialect, e);	
+				throw new DataRetrievalException(e);
+			}
+		} else {
+			String message = "Failed to instantiate Data Locator for dialect, " + dialect;
+			log.info(message);
+			throw new DataRetrievalException(message);
+			}
+		return data; 
+	}
+	
+	/*
+	 * For AxisService use only!
+	 */	
+	public void loadServiceData(){
+		DataRetrievalUtil util = DataRetrievalUtil.getInstance();
+		
+		OMElement serviceData=null;
+		String file =  "META-INF/" + DRConstants.SERVICE_DATA.FILE_NAME;
+		try {
+			serviceData = util.buildOM(axisService.getClassLoader(), "META-INF/" + DRConstants.SERVICE_DATA.FILE_NAME);
+		} catch (DataRetrievalException e) {
+			// It is not required to define ServiceData for a Service, just log a warning message
+		
+			String message = "Check loading failure for file, " + file;
+			log.warn(message + ".Message = " + e.getMessage());
+			log.debug(message, e);
+		}
+		if (serviceData != null) {
+			cachingServiceData(serviceData);
+		}
+	}
+	
+	/*
+	 * caching ServiceData for Axis2 Data Locators
+	 */
+	private void cachingServiceData(OMElement e) {
+		Iterator i = e.getChildrenWithName(new QName(
+				DRConstants.SERVICE_DATA.DATA));
+		String saveKey = "";
+		while (i.hasNext()) {
+			ServiceData data = new ServiceData((OMElement) i.next());
+			saveKey = data.getDialect();
+
+			String identifier = data.getIdentifier();
+			if (identifier != null)
+				saveKey = saveKey + identifier;
+			dataMap.put(saveKey, data);
+
+			
+		}
+
+	}
+	
+	/*
+	 * Return ServiceData for specified dialect
+	 */
+	private ArrayList getDataList(String dialect){
+		ArrayList dataList = new ArrayList();
+		Iterator keys = dataMap.keySet().iterator();
+	
+		while (keys.hasNext()){
+		    String keyStr = (String)keys.next();
+		    // get all Data element that matching the dialect
+			if (keyStr.indexOf(dialect) == 0){
+				dataList.add(dataMap.get(keyStr));
+			}
+		}
+		return dataList;
+	}	
+}
\ No newline at end of file
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/LocatorType.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/LocatorType.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/LocatorType.java	(revision 0)
@@ -0,0 +1,52 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+/**
+ * 
+ * Defines Data Locator types as described below:
+ * DEFAULT_AXIS - Default Axis2 data locator 
+ * GLOBAL_LEVEL - Global level data locator i.e.,plug-in data locator registered
+ *                using <dataLocator> element in axis2.xml.
+ * GLOBAL_DIALECT - Global level dialect specfic data locator i.e.,plug-in 
+ *                  data locator registered using <dialectLocator> element in axis2.xml.
+ * SERVICE_LEVEL - Service level data locator i.e. plug-in data locator registered
+ *                using <dataLocator> element in services.xml.
+ * SERVICE_DIALECT - Service level dialect specific data locator i.e. plug-in data locator registered
+ *                using <dialectLocator> element in services.xml.
+ *
+ */
+
+public class LocatorType {
+	int type;
+	public final static LocatorType  DEFAULT_AXIS = new LocatorType(0);
+	public final static LocatorType  GLOBAL_LEVEL = new LocatorType(1);
+	public final static LocatorType  GLOBAL_DIALECT = new LocatorType(2);
+	public final static LocatorType  SERVICE_LEVEL = new LocatorType(3);
+	public final static LocatorType  SERVICE_DIALECT = new LocatorType(4);
+	
+
+	protected LocatorType (int intype) {
+        this.type= intype;
+    }
+
+	public int getType() {
+        return type;
+    }
+
+
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalException.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalException.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalException.java	(revision 0)
@@ -0,0 +1,39 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+import org.apache.axis2.AxisFault;
+
+/**
+ * Exception class for reporting Data Retrieval problems 
+ *
+ */
+
+public class DataRetrievalException extends AxisFault {
+	 private static final long serialVersionUID = -374933082062124908L;
+	 public DataRetrievalException(String message) {
+			super(message);
+		}
+
+		public DataRetrievalException(Throwable e) {
+			super(e);
+		}
+
+		public DataRetrievalException(String message, Throwable e) {
+			super(message, e);
+		}
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/Data.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/Data.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/Data.java	(revision 0)
@@ -0,0 +1,55 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.dataRetrieval;
+
+/**
+ * Data contains instance of the data Object for the specified identifier if applicable.
+ *
+ */
+
+public class Data {
+   Object data;
+   String identifier;
+       
+      
+   /**
+    * Constructor
+    * @param in_data          instance of Object about the data
+    * @param in_identifier    identifier of the data instance.
+    */
+   public Data(Object in_data, String in_identifier){
+	   super();
+	   data = in_data;
+	   identifier =in_identifier;
+   }
+   
+   /**
+    * Returns data
+    * @return data Object
+    */
+   
+   public Object getData(){
+	   return data;
+   }
+   
+   /**
+    * Returns string representing identifier of this data object.
+    * @return
+    */
+   public String getIdentifier(){
+	   return identifier;
+   }
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/BaseAxisDataLocator.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/BaseAxisDataLocator.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/BaseAxisDataLocator.java	(revision 0)
@@ -0,0 +1,150 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.dataRetrieval;
+
+import java.util.ArrayList;
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.OutputForm;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * BaseAxisDataLocator implements common code and serves as a base class
+ * for the supported default Axis2 dialect data locators.  
+ *
+ */
+
+public abstract class BaseAxisDataLocator  {
+	private static final Log log = LogFactory.getLog(BaseAxisDataLocator.class);
+
+	protected ServiceData[] dataList = null;
+    private OutputForm outputform= OutputForm.INLINE_FORM;
+    
+	/**
+	 * The default Axis2 Data locator getData API
+	 *   Checks data information configured in ServiceData.xml for the supported
+	 *   output forms: inline, url, EndpointReference.
+	 * 
+	 * Note: Subclass that has its implementation of outInlineForm, outputLocationForm,
+	 *       and outputReferenceForm logic must implement the getData API.
+	 */
+    
+	public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws DataRetrievalException {
+		log.trace("Default Base DataLocator getData starts");
+
+		OutputForm outputform = (OutputForm) request.getOutputForm();
+
+		if (outputform == null) { // not defined, defualt to inline
+			outputform = OutputForm.INLINE_FORM;
+		}
+
+		Data[] output = null;
+				
+		String outputFormString = outputform.getType();
+     
+		if (outputform == OutputForm.INLINE_FORM) {
+	    	output = outputInlineForm(msgContext, dataList);
+		}
+		else if (outputform == OutputForm.LOCATION_FORM) {
+	    	output = outputLocationForm(dataList);
+			
+		}
+		else if (outputform == OutputForm.REFERENCE_FORM) {
+			output = outputReferenceForm(msgContext, dataList);
+					
+		}
+		else {
+			output = outputInlineForm(msgContext, dataList);
+			
+		}
+	
+		if (output == null)
+				log.info("Null data return! Data Locator does not know how to handle request for dialect= " + (String) request.getDialect()
+					+ " in the form of " + outputFormString);
+		
+
+		log.trace("Default Base DataLocator getData ends");
+
+		return output;
+	}
+
+	/*
+	 * WSDL or a policy document
+	 */
+	protected Data[] outputInlineForm(MessageContext msgContext,
+			ServiceData[] serviceData) throws DataRetrievalException {
+		OMElement metaElement = null;
+		ArrayList result = new ArrayList();
+		if (serviceData != null) {
+			int size = serviceData.length;
+			for (int i = 0; i < size; i++) {
+				metaElement = serviceData[i].getFileContent(msgContext
+						.getAxisService().getClassLoader());
+				if (metaElement != null)
+					result.add(new Data(metaElement, serviceData[i].getIdentifier()));
+
+			}
+
+	
+		}
+		return (Data[]) result.toArray(new Data[0]);
+
+	}
+
+			                				
+	protected Data[] outputLocationForm(ServiceData[] serviceData)
+			throws DataRetrievalException {
+
+		ArrayList result = new ArrayList();
+		if (serviceData != null) {
+			for (int i = 0; i < serviceData.length; i++) {
+
+				String urlValue = serviceData[i].getURL();
+		        if (urlValue != null)
+				    result.add(new Data(urlValue, serviceData[i].getIdentifier()));
+			}
+		}
+		return (Data[]) result.toArray(new Data[0]);
+	}
+
+	protected Data[] outputReferenceForm(MessageContext msgContext,
+			ServiceData[] serviceData) throws DataRetrievalException {
+		OMElement epr = null;
+		ArrayList result = new ArrayList();
+		if (serviceData != null) {
+			for (int i = 0; i < serviceData.length; i++) {
+
+				epr = serviceData[i].getEndpointReference();
+                if (epr != null)
+				    result.add(new Data((epr), serviceData[i].getIdentifier()));
+			}
+		}
+		return (Data[]) result.toArray(new Data[0]);
+	}
+	
+
+	protected void setServiceData(ServiceData[] inServiceData) {
+		this.dataList = inServiceData;
+	}
+
+			
+	protected OutputForm getOutputForm(){
+		return outputform;
+	}
+
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/PolicyDataLocator.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/PolicyDataLocator.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/PolicyDataLocator.java	(revision 0)
@@ -0,0 +1,39 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+/**
+ * 
+ * Axis 2 Data Locator responsibles for retrieving Policy  metadata. 
+ * The class is created as model for policy specific data locator; and also
+ * easier for any future implementation policy specific data retrieval logic.
+ *
+ */
+public class PolicyDataLocator  extends BaseAxisDataLocator implements AxisDataLocator {
+		
+	protected PolicyDataLocator() {
+
+	}
+
+	/**
+	 * Constructor
+	 */
+	protected PolicyDataLocator(ServiceData[] data) {
+		dataList = data;
+	}
+
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/SchemaDataLocator.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/SchemaDataLocator.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/SchemaDataLocator.java	(revision 0)
@@ -0,0 +1,39 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+/**
+ * Axis 2 Data Locator responsibles for retrieving Schema metadata.
+ * The class is created as model for schema specific data locator; and also
+ * easier for any future implementation schema specific data retrieval logic.
+ *
+ */
+
+public class SchemaDataLocator  extends BaseAxisDataLocator  implements AxisDataLocator {
+	
+	protected SchemaDataLocator() {
+
+	}
+
+	/**
+	 * Constructor
+	 */
+	protected SchemaDataLocator(ServiceData[] data) {
+		dataList = data;
+	}
+	
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/AxisDataLocator.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/AxisDataLocator.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/AxisDataLocator.java	(revision 0)
@@ -0,0 +1,47 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package org.apache.axis2.dataRetrieval;
+
+import org.apache.axis2.context.MessageContext;
+
+/**
+ * <p>AxisDataLocator interface defines getData API for retrieving data particularly 
+ * metadata like WSDL, Policy, Schema. Web Service engines that have different methods in 
+ * storing metadata or different types of data to retrieve may code their version of
+ * Data Locator(s)by implementing the AxisDataLocator interface. Axis 2 support
+ * Data Locator plugin by configuring in Axis2.xml or services.xml. </p>  
+ * 
+ */
+
+public interface AxisDataLocator {
+	
+
+	/**
+	 * Retrieves and returns data based on the specified request.
+	 * 
+	 * @param request
+	 *            The {@link DataRetrievalRequest} allow to specify parameters
+	 *            about the request, and additional information to process the
+	 *            request.
+	 * @param msgContext
+	 *            The {@link MessageContext} from the original request.
+	 * @return {@link Data}[] for the request.
+	 * @throws DataRetrievalException
+	 */
+	
+	public Data[] getData(DataRetrievalRequest request, MessageContext msgContext) throws DataRetrievalException;
+	
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/OutputForm.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/OutputForm.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/OutputForm.java	(revision 0)
@@ -0,0 +1,40 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+public class OutputForm {
+	String type;
+
+	/**
+     *  Possible Output formats as stated in <xs:choice> of <MetadataSection>
+     *  in the WS-MEX specification.
+     */
+	
+	public final static OutputForm  INLINE_FORM = new OutputForm("INLINE_FORM");
+	public final static OutputForm  LOCATION_FORM = new OutputForm("LOCATION_FORM");
+	public final static OutputForm  REFERENCE_FORM = new OutputForm("REFERENCE_FORM");
+	
+	protected OutputForm (String intype) {
+        this.type= intype;
+    }
+	
+    public String getType() {
+        return type;
+    }
+
+	
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataLocatorFactory.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataLocatorFactory.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataLocatorFactory.java	(revision 0)
@@ -0,0 +1,72 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+/**
+ * Factory to constructor Axis2 Data Locators based on the specified
+ * Dialect.
+ */
+
+public class DataLocatorFactory {
+  private static org.apache.axis2.dataRetrieval.WSDLDataLocator wsdlDataLocator = null;
+  private static org.apache.axis2.dataRetrieval.PolicyDataLocator policyDataLocator = null;
+  private static org.apache.axis2.dataRetrieval.SchemaDataLocator schemaDataLocator = null;
+ 	
+  /*
+   * Return instance of default Data Locator for the dialect.
+   */
+  protected static AxisDataLocator createDataLocator(String dialect) {
+	  return (createDataLocator(dialect, null));
+  }
+  
+  protected static AxisDataLocator createDataLocator(String dialect, ServiceData[] serviceDataArray) {
+	  AxisDataLocator dataLocator = null;
+	  if (dialect.equals(DRConstants.SPEC.DIALECT_TYPE_WSDL)){
+		  dataLocator = getWsdlDataLocator(serviceDataArray); 
+		  
+	  }
+	  else if (dialect.trim().equals(DRConstants.SPEC.DIALECT_TYPE_POLICY)){
+		  if (policyDataLocator == null)
+		      dataLocator = new PolicyDataLocator(serviceDataArray);
+		  else
+			  dataLocator = policyDataLocator;
+	  }
+	  else if (dialect.equals(DRConstants.SPEC.DIALECT_TYPE_SCHEMA)){
+		  if (schemaDataLocator == null)
+		      dataLocator = new SchemaDataLocator(serviceDataArray);
+		  else
+			  dataLocator = schemaDataLocator;
+	  }
+	  else {
+		  dataLocator = null;
+	  }
+	  return dataLocator;
+  }
+  
+  protected static AxisDataLocator getWsdlDataLocator(ServiceData[] serviceDataArray) {
+
+		if (wsdlDataLocator == null)
+			wsdlDataLocator = new org.apache.axis2.dataRetrieval.WSDLDataLocator(serviceDataArray);
+		else {
+			wsdlDataLocator.setServiceData(serviceDataArray);
+		}
+		return wsdlDataLocator;
+	}
+  
+  
+  
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalUtil.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalUtil.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/DataRetrievalUtil.java	(revision 0)
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.dataRetrieval;
+
+import java.io.InputStream;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axiom.om.util.StAXUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+public class DataRetrievalUtil {
+	private static final Log log = LogFactory.getLog(DataRetrievalUtil.class);
+
+	private static DataRetrievalUtil instance = null;
+
+	public static DataRetrievalUtil getInstance() {
+		if (instance == null) {
+			instance = new DataRetrievalUtil();
+		}
+		return instance;
+	}
+
+	/**
+	 * Loading xml file content and convert to OMElement.
+	 * @param file - file path relative to the Service Repository
+	 * @return OMElement format of the xml file content 
+	 * @throws DataRetrievalException 
+	 * 
+	 */
+	
+	public OMElement buildOM(ClassLoader classLoader, String file)
+			throws DataRetrievalException {
+		OMElement element = null;
+		InputStream servicexmlStream = null;
+		try {
+			servicexmlStream = getInputStream(classLoader, file);
+
+			element = convertToOMElement(servicexmlStream);
+		} catch (XMLStreamException e) {
+			throw new DataRetrievalException(e);
+		}
+
+		return element;
+	}
+
+	/**
+	 * Convert servicexmlStream to OMElement
+	 * @param servicexmlStream InputStream contain xml content
+	 * @return OMElement format of the xml content 
+	 * @throws XMLStreamException
+	 */
+
+	public static OMElement convertToOMElement(InputStream servicexmlStream)
+			throws XMLStreamException {
+		OMElement element = null;
+
+		XMLStreamReader xmlReader = StAXUtils
+				.createXMLStreamReader(servicexmlStream);
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+		StAXOMBuilder staxOMBuilder = new StAXOMBuilder(fac, xmlReader);
+		element = staxOMBuilder.getDocumentElement();
+		element.build();
+		return element;
+	}
+
+	private static InputStream getInputStream(ClassLoader classLoader,
+			String file) throws XMLStreamException {
+
+		InputStream servicexmlStream = classLoader.getResourceAsStream(file);
+
+		if (servicexmlStream == null) {
+			String message = "File does not exist in the Service Repository! File="
+					+ file;
+			log.warn(message);
+			throw new XMLStreamException(message);
+		}
+		return servicexmlStream;
+
+	}
+
+}
\ No newline at end of file
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/WSDLDataLocator.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/WSDLDataLocator.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/WSDLDataLocator.java	(revision 0)
@@ -0,0 +1,169 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisService2OM;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Axis 2 Data Locator responsibles for retrieving WSDL metadata. 
+ *
+ */
+public class WSDLDataLocator extends BaseAxisDataLocator implements AxisDataLocator {
+	private static final Log log = LogFactory.getLog(WSDLDataLocator.class);
+    String serviceURL=null;
+    AxisService theService=null;
+    String request_Identifier=null;
+	    
+    
+    protected WSDLDataLocator(){
+    
+    }
+    
+    /**
+     * Constructor 
+     * @param data an array of ServiceData instance defined in the 
+     *             ServiceData.xml for the WSDL dialect.
+     */
+    protected WSDLDataLocator(ServiceData[] data){
+    	dataList = data;
+    }
+    
+	/**
+	 * getData API 
+	 * Implement data retrieval logic for WSDL dialect
+	 */
+	public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws DataRetrievalException {
+		log.trace("Default WSDL DataLocator getData starts");
+
+		request_Identifier = (String) request.getIdentifier();
+	
+		OutputForm outputform = (OutputForm) request.getOutputForm();
+
+		if (outputform == null) { // not defined, defualt to inline
+			outputform = OutputForm.INLINE_FORM;
+		}
+
+		Data[] output = null;
+				
+		String outputFormString = outputform.getType();
+     
+		if (outputform == OutputForm.INLINE_FORM) {
+	    	output = outputInlineForm(msgContext, dataList);
+		}
+		else if (outputform == OutputForm.LOCATION_FORM) {
+	    	output = outputLocationForm(dataList);
+			
+		}
+		else if (outputform == OutputForm.REFERENCE_FORM) {
+			output = outputReferenceForm(msgContext, dataList);
+					
+		}
+		else {
+			output = outputInlineForm(msgContext, dataList);
+			
+		}
+	
+		if (output == null)
+			if (log.isTraceEnabled())
+				log.trace("Null data return! Data Locator does not know how to handle request for dialect= " + (String) request.getDialect()
+					+ " in the form of " + outputFormString);
+		
+
+		log.trace("Default WSDL DataLocator getData ends");
+
+
+		return output;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.apache.axis2.dataRetrieval.BaseAxisDataLocator#outputInlineForm(org.apache.axis2.context.MessageContext, org.apache.axis2.dataRetrieval.ServiceData[])
+	 */
+	protected Data[] outputInlineForm(MessageContext msgContext, ServiceData[] dataList)
+			throws DataRetrievalException {
+		Data[]  result = super.outputInlineForm(msgContext, dataList);
+		
+		// Do not generate WSDL if Identifier was specified in the request as
+		// (1) this is to support ?wsdl request; 
+		// (2) Data for specified Identifier must be available to satisfy the GetMetadata request.
+		
+		if (result.length==0 && request_Identifier == null) {
+			log.trace("Default WSDL DataLocator attempt to generates WSDL.");		
+		      
+			if (msgContext != null) {
+				theService = msgContext.getAxisService();
+				serviceURL = msgContext.getTo().getAddress();
+			} else {
+				throw new DataRetrievalException("MessageContext was not set!");
+			}
+	
+			ConfigurationContext configurationContext = msgContext
+					.getConfigurationContext();
+			final String servicePath = configurationContext
+					.getServiceContextPath();
+			AxisService2OM axisService2WOM;
+			
+			OMElement wsdlElement;
+			try {
+				String[] exposedEPRs = theService.getEPRs();
+			    axisService2WOM = new AxisService2OM(theService,
+			    		exposedEPRs, "document", "literal",
+					servicePath);
+			    wsdlElement = axisService2WOM.generateOM();
+			}
+			catch (Exception e){
+				log.debug(e);
+				throw new DataRetrievalException(e);
+			}
+
+			if (wsdlElement != null) {
+				log
+						.trace("Default WSDL DataLocator successfully generated WSDL.");
+				result = new Data[1];
+				result[0] = new Data(wsdlElement, null);
+			}
+		}
+		return result;
+	}
+
+	/*
+	 * 
+	 */	
+	protected Data[] outputLocationForm(ServiceData[] serviceData) throws DataRetrievalException {
+		Data[] result= super.outputLocationForm(serviceData);
+		
+		// Do not generate URL if Identifier was specified in the request as
+		// (1) Axis2 ?wsdl URL request is not supporting Identifier; 
+		// (2) URL data for specified Identifier must be available to satisfy
+		//     the GetMetadata request.
+	
+		if (result.length==0 && request_Identifier == null) {
+			   result = new Data[1];
+			   result[0] = new Data( serviceURL + "?wsdl", null);
+	    }
+		return result;
+	}
+	
+	
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/ServiceData.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/ServiceData.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/ServiceData.java	(revision 0)
@@ -0,0 +1,114 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.dataRetrieval;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+
+/**
+ * 
+ * This represents the service data for a dialect and identifier if specified.
+ * Basically, the Data element defined in the ServiceData.xml packaged in 
+ * a Web Service's achieve file.
+ *
+ */
+
+public class ServiceData {
+	OMElement data;
+
+	String identifier;
+
+	String dialect;
+
+	String fileName;
+
+	/**
+	 * Constructor 
+	 * @param in_data an Data element in the ServiceData.
+	 * 
+	 */
+
+	protected ServiceData(OMElement in_data) {
+		data = in_data;
+		identifier = getAttributeValue(DRConstants.SERVICE_DATA.IDENTIFIER);
+		dialect = getAttributeValue(DRConstants.SERVICE_DATA.DIALECT);
+		fileName = getAttributeValue(DRConstants.SERVICE_DATA.FILE);
+	}
+
+	protected String getAttributeValue(String qName) {
+
+		String value = null;
+		OMAttribute attribute = data.getAttribute(new QName(qName));
+		if (attribute != null)
+			value = attribute.getAttributeValue();
+
+		return value;
+
+	}
+
+	// return identifier for this Data element
+	protected String getIdentifier() {
+		return identifier;
+	}
+
+	// return dialect for this Data element
+	protected String getDialect() {
+		return dialect;
+	}
+
+	// return the Data ELement
+	protected OMElement getOMData() {
+		return data;
+	}
+
+	
+	
+	// Get URL from data Element
+	protected String getURL() {
+
+		String urlValue = null;
+		OMElement url = data.getFirstChildWithName(new QName(
+				DRConstants.SERVICE_DATA.URL));
+		if (url != null)
+			urlValue = url.getText();
+
+		return urlValue;
+	}
+	
+	// Get ENDPOINT_REFERENCE from Data Element
+	protected OMElement getEndpointReference() {
+		OMElement epr = data.getFirstChildWithName(new QName(
+				DRConstants.SERVICE_DATA.ENDPOINT_REFERENCE));
+		return epr;
+	}
+	
+	// Load the file content of the file specified in the file attribute
+	// in the data element.
+	protected OMElement getFileContent(ClassLoader classloader)
+			throws DataRetrievalException {
+
+		OMElement metaElement = null;
+		if (fileName != null) {
+			DataRetrievalUtil util = DataRetrievalUtil.getInstance();
+
+			metaElement = util.buildOM(classloader, fileName);
+		}
+		return metaElement;
+	}
+}
Index: axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/client/MexClient.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/client/MexClient.java	(revision 0)
+++ axis2/modules/kernel/src/org/apache/axis2/dataRetrieval/client/MexClient.java	(revision 0)
@@ -0,0 +1,75 @@
+package org.apache.axis2.dataRetrieval.client;
+import java.net.URL;
+
+import javax.wsdl.Definition;
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.dataRetrieval.DRConstants;
+import org.apache.axis2.description.AxisService;
+
+public class MexClient extends ServiceClient {
+
+	public MexClient(ConfigurationContext configContext, AxisService axisService)
+			throws AxisFault {
+		super(configContext, axisService);
+	}
+
+	public MexClient(ConfigurationContext configContext,
+			Definition wsdl4jDefinition, QName wsdlServiceName, String portName)
+			throws AxisFault {
+		super(configContext, wsdl4jDefinition, wsdlServiceName, portName);
+	}
+
+	public MexClient(ConfigurationContext configContext, URL wsdlURL,
+			QName wsdlServiceName, String portName) throws AxisFault {
+		super(configContext, wsdlURL, wsdlServiceName, portName);
+	}
+
+	public MexClient() throws AxisFault {
+	}
+
+	/**
+	 * Builds OMElement that makes up of SOAP body.
+	 */
+	public OMElement setupGetMetadataRequest(String dialect,
+			String identifier) throws AxisFault {
+		
+		// Attempt to engage MEX module
+	/*	try{
+	       super.engageModule(new QName("metadataExchange"));
+		}
+		catch (Exception e){
+		  throw new AxisFault ("Unable to proceed with GetMetadata Request!", e);  	
+		} */
+		
+		OMFactory fac = OMAbstractFactory.getOMFactory();
+
+		OMNamespace omNs = fac.createOMNamespace(
+				DRConstants.SPEC.NS_URI, DRConstants.SPEC.NS_PREFIX);
+
+		OMElement method = fac.createOMElement(DRConstants.SPEC.GET_METADATA,
+				omNs);
+		if (dialect != null) {
+			OMElement dialect_Elem = fac.createOMElement(
+					DRConstants.SPEC.DIALET, omNs);
+
+			dialect_Elem.setText(dialect);
+			method.addChild(dialect_Elem);
+		}
+		// create Identifier element
+		if (identifier != null) {
+			OMElement id_Elem = fac.createOMElement(
+					DRConstants.SPEC.IDENTIFIER, omNs);
+			id_Elem.setText(identifier);
+			method.addChild(id_Elem);
+		}
+		return method;
+	}
+}
Index: axis2/modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java
===================================================================
--- axis2/modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(revision 503915)
+++ axis2/modules/kernel/src/org/apache/axis2/engine/AxisConfiguration.java	(working copy)
@@ -18,6 +18,7 @@
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.AxisDataLocator;
 import org.apache.axis2.deployment.DeploymentException;
 import org.apache.axis2.deployment.util.PhasesInfo;
 import org.apache.axis2.description.AxisDescription;
@@ -54,7 +55,11 @@
 public class AxisConfiguration extends AxisDescription {
 
     private static final Log log = LogFactory.getLog(AxisConfiguration.class);
-
+    /*
+     * To store data locators configured
+     */
+    private HashMap dataLocators;
+    private HashMap dataLocatorClassNames;
     /**
      * Field modules
      */
@@ -985,7 +990,46 @@
     public boolean isAssertionLocal(QName name) {
         return this.localPolicyAssertions.contains(name);
     }
+    
+    /**
+     * Allow to define/configure Data Locator for specified dialect at Axis 2 Configuration.
+     * 
+     * @param dialect- an absolute URI represents the format and version of data
+     * @param classname - class name of the Data Locator configured to support retrieval 
+     *                  for the specified dialect.
+     */
+    public void addDataLocatorClassNames(String dialect, String classname) {
+        dataLocatorClassNames.put(dialect, classname);
+    }
+   
+    /**
+     * For internal used only! To store instance of DataLocator when it is first loaded. This allows to 	
+     * re-use DataLocator after it is initially loaded. 
+     * @param dialect- an absolute URI represents the format and version of data
+     * @param dataLocator - specified an DataLocator instance  to support retrieval 
+     *                  of the specified dialect.
+     */
+    public void addDataLocator(String dialect, AxisDataLocator dataLocator) {
+        dataLocators.put(dialect, dataLocator);
+    }
+    
+     /**
+     * Return DataLocator instance for specified dialect.
+     */
+    public AxisDataLocator getDataLocator(String dialect) {
+        return (AxisDataLocator)dataLocators.get(dialect);
+    }
+    
+    
+    /**
+     * Return classname of DataLocator configured for specified dialect.
+     */
+    public String getDataLocatorClassName(String dialect) {
+        return (String) dataLocatorClassNames.get(dialect);
+    }
 
+
+
     /**
      * Checks whether some one has changed the system pre-defined phases
      * for all the flows. If they have been changed,throws a DeploymentException.
Index: axis2/modules/mex/project.properties
===================================================================
--- axis2/modules/mex/project.properties	(revision 0)
+++ axis2/modules/mex/project.properties	(revision 0)
@@ -0,0 +1,17 @@
+# -------------------------------------------------------------------
+# Copyright 2001-2004 The Apache Software Foundation.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# -------------------------------------------------------------------
+
+maven.multiproject.type=jar
Index: axis2/modules/mex/maven.xml
===================================================================
--- axis2/modules/mex/maven.xml	(revision 0)
+++ axis2/modules/mex/maven.xml	(revision 0)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+  
+<!-- $Revision: 1.21 $ $Date: 2004-10-27 20:54:09 +0600 (Wed, 27 Oct 2004) $ -->
+
+<project default="jar"
+    xmlns:j="jelly:core"
+    xmlns:u="jelly:util"
+    xmlns:maven="jelly:maven"
+    xmlns:deploy="deploy"
+    xmlns:ant="jelly:ant">
+    <postGoal name="java:compile">
+        <mkdir dir="target/classes/META-INF"/>
+        <copy file="src/META-INF/module.xml"
+            tofile="target/classes/META-INF/module.xml"/>
+         <copy file="../../LICENSE.txt"
+             tofile="target/classes/META-INF/LICENSE.txt" overwrite="true"/>
+          <copy file="../../NOTICE.txt"
+            tofile="target/classes/META-INF/LICENSE.txt" overwrite="true"/>
+        <mkdir dir="target/modules"/>
+        <jar jarfile="target/metadataExchange-${mex_version}.mar" basedir="target/classes">
+            <include name="**"/>
+        </jar>
+        <copy file="target/metadataExchange-${mex_version}.mar"
+            tofile="target/modules/metadataExchange-${mex_version}.mar"/>
+        <copy file="target/mex-$mex_version}.mar" 
+            tofile="${maven.repo.local}/org.apache.axis2/mars/metadataExchange-${mex_version}.mar"/>
+    </postGoal>
+   </project>
Index: axis2/modules/mex/project.xml
===================================================================
--- axis2/modules/mex/project.xml	(revision 0)
+++ axis2/modules/mex/project.xml	(revision 0)
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<project>
+    <pomVersion>3</pomVersion>
+    <extend>../../etc/project.xml</extend>
+
+    <name>Apache Axis 2.0 - Metadata Exchange</name>
+    <id>axis2-mex</id>
+    <groupId>org.apache.axis2</groupId>
+    <description>WS-MetadataExchange implementation</description>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.ws.commons.axiom</groupId>
+            <artifactId>axiom-api</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.ws.commons.axiom</groupId>
+            <artifactId>axiom-impl</artifactId>
+            <version>${axiom.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>wsdl4j</groupId>
+            <artifactId>wsdl4j</artifactId>
+            <version>${wsdl4j.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.axis2</groupId>
+            <artifactId>axis2-kernel</artifactId>
+            <version>${pom.currentVersion}</version>
+        </dependency>
+        <!-- external JARs -->
+        <dependency>
+            <groupId>commons-logging</groupId>
+            <artifactId>commons-logging</artifactId>
+            <version>${commons.logging.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>${stax.impl.groupid}</groupId>
+            <artifactId>${stax.impl.artifactid}</artifactId>
+            <version>${stax.impl.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+        <dependency>
+            <groupId>stax</groupId>
+            <artifactId>stax-api</artifactId>
+            <version>${stax.api.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+          <dependency>
+            <groupId>org.apache.neethi</groupId>
+            <artifactId>neethi</artifactId>
+            <version>${neethi.version}</version>
+            <properties>
+                <module>true</module>
+            </properties>
+        </dependency>
+
+        </dependencies>
+
+    <reports/>
+</project>
Index: axis2/modules/mex/target/compile.log
===================================================================
--- axis2/modules/mex/target/compile.log	(revision 0)
+++ axis2/modules/mex/target/compile.log	(revision 0)
@@ -0,0 +1 @@
+Compiling 15 source files to C:\Development\SVN143\axis2\modules\mex\target\classes
Index: axis2/modules/mex/target/modules/metadataExchange-SNAPSHOT.mar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\modules\metadataExchange-SNAPSHOT.mar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/META-INF/LICENSE.txt
===================================================================
--- axis2/modules/mex/target/classes/META-INF/LICENSE.txt	(revision 0)
+++ axis2/modules/mex/target/classes/META-INF/LICENSE.txt	(revision 0)
@@ -0,0 +1,12 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Apache Axis2 distribution.                    ==
+   =========================================================================
+
+   This product includes software developed by
+   The Apache Software Foundation (http://www.apache.org/).
+   Portions Copyright 2006 International Business Machines Corp.
+
+   Please read the different LICENSE files present in the lib directory of
+   this distribution.
Index: axis2/modules/mex/target/classes/META-INF/module.xml
===================================================================
--- axis2/modules/mex/target/classes/META-INF/module.xml	(revision 0)
+++ axis2/modules/mex/target/classes/META-INF/module.xml	(revision 0)
@@ -0,0 +1,30 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+
+<module name="metadataExchange" class="org.apache.axis2.mex.MetadataExchangeModule">
+   <operation name="getMetadata" mep="http://www.w3.org/2004/08/wsdl/in-out">
+         <messageReceiver class="org.apache.axis2.mex.MexMessageReceiver"/>
+
+        <!-- namespaces for the 2004-09 spec -->
+        
+         <actionMapping>http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Request</actionMapping>
+         <outputActionMapping>http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Response</outputActionMapping>
+       
+        </operation>
+
+</module>
Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexConstants$SPEC_VERSIONS.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexConstants$SPEC_VERSIONS.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexConstants$Spec_2004_09.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexConstants$Spec_2004_09.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexConstants$SOAPVersion.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexConstants$SOAPVersion.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexMessageReceiver.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexMessageReceiver.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexConstants$SPEC.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexConstants$SPEC.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexConstants.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexConstants.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexConstants$Spec_2004_09$Actions.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexConstants$Spec_2004_09$Actions.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/IMexOM.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\IMexOM.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/MetadataReference.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\MetadataReference.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/Metadata.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\Metadata.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/Dialet.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\Dialet.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/Identifier.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\Identifier.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/MexOMException.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\MexOMException.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/MetadataSection.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\MetadataSection.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/MexOM.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\MexOM.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/Location.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\Location.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/OM/AnyURIType.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\OM\AnyURIType.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MexException.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MexException.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/MetadataExchangeModule.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\MetadataExchangeModule.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/classes/org/apache/axis2/mex/util/MexUtil.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\classes\org\apache\axis2\mex\util\MexUtil.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/target/metadataExchange-SNAPSHOT.mar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: axis2\modules\mex\target\metadataExchange-SNAPSHOT.mar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: axis2/modules/mex/src/META-INF/module.xml
===================================================================
--- axis2/modules/mex/src/META-INF/module.xml	(revision 0)
+++ axis2/modules/mex/src/META-INF/module.xml	(revision 0)
@@ -0,0 +1,30 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+
+<module name="metadataExchange" class="org.apache.axis2.mex.MetadataExchangeModule">
+   <operation name="getMetadata" mep="http://www.w3.org/2004/08/wsdl/in-out">
+         <messageReceiver class="org.apache.axis2.mex.MexMessageReceiver"/>
+
+        <!-- namespaces for the 2004-09 spec -->
+        
+         <actionMapping>http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Request</actionMapping>
+         <outputActionMapping>http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Response</outputActionMapping>
+       
+        </operation>
+
+</module>
Index: axis2/modules/mex/src/org/apache/axis2/mex/MexMessageReceiver.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/MexMessageReceiver.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/MexMessageReceiver.java	(revision 0)
@@ -0,0 +1,287 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex;
+
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.soap.SOAPBody;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.Data;
+import org.apache.axis2.dataRetrieval.DataRetrievalException;
+import org.apache.axis2.dataRetrieval.DataRetrievalRequest;
+import org.apache.axis2.dataRetrieval.OutputForm;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver;
+import org.apache.axis2.mex.OM.Location;
+import org.apache.axis2.mex.OM.Metadata;
+import org.apache.axis2.mex.OM.MetadataReference;
+import org.apache.axis2.mex.OM.MetadataSection;
+import org.apache.axis2.mex.OM.MexOMException;
+import org.apache.axis2.mex.util.MexUtil;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.xml.namespace.QName;
+
+/**
+ * Message Receiver for processing WS-MEX GetMetadata request. 
+ *
+ */
+public class MexMessageReceiver extends AbstractInOutSyncMessageReceiver {
+	private static final Log log = LogFactory.getLog(MexMessageReceiver.class);
+
+	String mexNamespaceValue = null;
+
+	/**
+	 * 
+     */
+	public void invokeBusinessLogic(MessageContext msgContext,
+			MessageContext newmsgContext) throws AxisFault {
+	
+		try {
+			Metadata metadata = handleRequest(msgContext);
+			AxisService theService = msgContext.getAxisService();
+
+			theService.setEndpointURL(msgContext.getTo().getAddress());
+
+			if (metadata != null) {
+				SOAPEnvelope envelope = newmsgContext.getEnvelope();
+				if (envelope == null) {
+					SOAPFactory fac = getSOAPFactory(msgContext);
+					envelope = fac.getDefaultEnvelope();
+				}
+           
+				OMElement result = metadata.toOM();
+				if (result != null) {
+					AxisService service = msgContext.getAxisService();
+					result.declareNamespace(service.getTargetNamespace(),
+							service.getTargetNamespacePrefix());
+					envelope.getBody().addChild(result);
+				}
+
+				newmsgContext.setEnvelope(envelope);
+			}
+			// AxisService service = msgContext.getAxisService();
+
+		} catch (Exception e) {
+			log.info(e);
+			if (e instanceof MexException) {
+				throw (MexException) e;
+			}
+			throw new MexException(e);
+		}
+
+	}
+
+
+	/*
+	 * Handle GetMetadata Request 
+	 * Interprete GetMetadata request and process request.
+	 * @returns Metadata object
+	 */
+	private Metadata handleRequest(MessageContext msgContext) throws AxisFault {
+		Metadata metadata = null;
+		SOAPEnvelope envelope = msgContext.getEnvelope();
+
+		SOAPBody body = envelope.getBody();
+		OMElement aReq = body.getFirstChildWithName(new QName(
+				MexConstants.SPEC.GET_METADATA));
+		List metadata_request_list;
+		if (aReq != null) {
+			metadata_request_list = determineMetadataTypes(aReq);
+
+		} else {
+			throw new MexException("Invalid Metadata request");
+		}
+
+		metadata = processRequest(metadata_request_list, msgContext, aReq);
+
+		return metadata;
+	}
+
+	/*
+	 * Process the requests
+	 * 
+	 * @param metadata_request_list list of mex Dialect for requesting data
+	 * @msgContext MessageContext
+	 * @aReq GetMetadata request 
+     */
+	
+	public Metadata processRequest(List metadata_request_list,
+			MessageContext msgContext, OMElement aReq) throws MexException {
+			
+		String identifier_value = null;
+		
+		DataRetrievalRequest requestOptions = new DataRetrievalRequest();
+		// Check if Identifier element included in request
+		OMElement identifier = aReq.getFirstChildWithName(new QName(
+				MexConstants.SPEC.IDENTIFIER));
+		if (identifier != null) {
+			identifier_value = identifier.getText();
+			if (identifier_value != null && identifier_value.length() > 0) {
+				requestOptions.putIdentifier(identifier_value);
+			}
+		}
+
+		// Instantiate Metadata instance to build the WS-Mex Metadata element
+		SOAPEnvelope envelope = msgContext.getEnvelope();
+		String soapNamespaceURI = envelope.getNamespace().getNamespaceURI();
+		SOAPFactory factory = MexUtil.getSOAPFactory(soapNamespaceURI);
+		mexNamespaceValue = MexConstants.Spec_2004_09.NS_URI;
+		Metadata metadata = new Metadata(factory, mexNamespaceValue);
+
+		// Process the request and append MetadataSection to Metadata
+		// Loop through the metadata_request_list for Dialect(s)), and setup requestOptions.
+		// Basically, one requestOptions is setup for each supported outputForm for the Dialect
+		// and Identifier specified in the GetMetadata request.
+		int len = metadata_request_list.size();
+		OutputForm[] outputforms;
+		
+		for (int i = 0; i < len; i++) { // metadata request
+			String dialect = "";
+			try {
+				dialect = (String) metadata_request_list.get(i);
+
+				requestOptions.putDialect(dialect);
+
+				outputforms = MexUtil.allSupportedOutputForms();
+				// Loop to call AxisService::getData API to retrieve data
+				// for the Dialect and Identifier(if specified) in the request
+				// for each
+				// supported output form.
+				
+				for (int j = 0; j < outputforms.length; j++) { // output form
+					requestOptions.putOutputForm(outputforms[j]);
+
+					Data[] result =  msgContext.getAxisService().getData(requestOptions,
+							msgContext);
+
+					ArrayList sections = processData(result, outputforms[j], dialect,
+							   identifier_value, factory);
+					metadata.addMetadatSections(sections);
+				}
+
+			} catch (DataRetrievalException e) {
+				log.error("Data Retrieval exception detected for dialect, " + dialect, e);
+				
+				throw new MexException(e);
+			} catch (Throwable e) {
+				
+				log.error("Throwable detected for dialect, " + dialect , e);
+
+				throw new MexException(e);
+			}
+
+		}
+		return metadata;
+	}
+
+	/*
+	 * Create MetadataSection for each Data element, and add the
+	 * MetadataSections to Metadata.
+	 */
+	private ArrayList processData(Data[] data, OutputForm outputForm,
+			String dialect, String identifier_value, SOAPFactory factory) throws MexException {
+		MetadataSection section=null;
+		ArrayList sections = new ArrayList();
+		if (data == null || data.length == 0) {
+			if (log.isDebugEnabled())
+				log
+						.debug("No result was returned from getData request for dialect,"
+								+ dialect
+								+ " Form: "
+								+ outputForm.getType()
+								+ ". No MetadataSection will be added!");
+
+		} else {
+			for (int k = 0; k < data.length; k++) {
+
+				section = createMetadataSection(outputForm, data[k].getData(),
+						factory, mexNamespaceValue);
+
+				section.setDialet(dialect);
+				identifier_value = data[k].getIdentifier();
+
+				if (identifier_value != null) {
+					section.setIdentifier(identifier_value);
+				}
+				sections.add(section);
+
+			}
+		}
+		return sections;
+	}
+
+	private MetadataSection createMetadataSection(OutputForm outputForm,
+			Object result, SOAPFactory factory, String mexNamespaceValue)
+			throws MexOMException {
+		MetadataSection section = new MetadataSection(factory,
+				mexNamespaceValue);
+
+		if (outputForm == OutputForm.INLINE_FORM)
+			section.setinlineData(result);
+		else if (outputForm == OutputForm.LOCATION_FORM)
+			section.setLocation(new Location(factory, mexNamespaceValue,
+					(String) result));
+		else if (outputForm == OutputForm.REFERENCE_FORM) {
+			MetadataReference ref = new MetadataReference(factory,
+					mexNamespaceValue);
+			ref.setEPRElement((OMElement) result);
+			section.setMetadataReference(ref);
+		} else {
+
+			section.setinlineData((OMElement) result);
+		}
+
+		return section;
+	}
+
+	/*
+	 * Traverse and interprete the GetMetadata OMElement for Dialect element
+	 * that specified in the request. @returns a List with Dialect(s) of
+	 * metadata requested.
+	 * 
+	 */
+	private List determineMetadataTypes(OMElement aReq) {
+		List metadata_request_list = new ArrayList();
+
+		boolean allTypes = false;
+
+		OMElement dialect = aReq.getFirstChildWithName(new QName(
+				MexConstants.SPEC.DIALECT));
+		if (dialect != null) {
+			String dialectText = dialect.getText();
+			if (dialectText != null && dialectText.length() > 0) {
+				metadata_request_list.add(dialectText.trim());
+			} else
+				allTypes = true;
+		} else
+			allTypes = true;
+
+		if (allTypes) { // retrieve all metadata
+			metadata_request_list.add(MexConstants.SPEC.DIALECT_TYPE_POLICY);
+			metadata_request_list.add(MexConstants.SPEC.DIALECT_TYPE_SCHEMA);
+			metadata_request_list.add(MexConstants.SPEC.DIALECT_TYPE_WSDL);
+		}
+		return metadata_request_list;
+	}
+
+}
\ No newline at end of file
Index: axis2/modules/mex/src/org/apache/axis2/mex/MexConstants.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/MexConstants.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/MexConstants.java	(revision 0)
@@ -0,0 +1,66 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex;
+
+/**
+ * Contains all the MetadataExchange constants for WS-Mex.
+ * 
+ */
+
+public interface MexConstants {
+	public interface SPEC_VERSIONS {
+		String v1_0 = "Spec_2004_09";
+	}
+    public interface Spec_2004_09 {
+		
+		String NS_URI = "http://schemas.xmlsoap.org/ws/2004/09/mex";
+
+	    public interface Actions {
+			String GET_METADATA_REQUEST = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Request";
+			String GET_METADATA_RESPONSE = "http://schemas.xmlsoap.org/ws/2004/09/mex/GetMetadata/Response";
+			
+	    }
+    }
+    
+  
+    public interface SOAPVersion {
+     		int v1_1 = 1;
+
+    		int v1_2 = 2;
+    
+	}
+    
+    
+    public interface SPEC {
+		String NS_PREFIX = "mex";
+		String GET_METADATA = "GetMetadata";
+		String DIALECT = "Dialect";
+		String IDENTIFIER = "Identifier";
+		String METADATA = "Metadata";
+		String METADATA_SECTION = "MetadataSection";
+		String METADATA_REFERENCE = "MetadataReference";
+		String LOCATION = "Location";
+		String TYPE = "type";
+		
+		String DIALECT_TYPE_WSDL = "http://schemas.xmlsoap.org/wsdl/";
+		String DIALECT_TYPE_POLICY = "http://schemas.xmlsoap.org/ws/2004/09/policy";
+		String DIALECT_TYPE_SCHEMA = "http://www.w3.org/2001/XMLSchema";
+		String DIALECT_TYPE_MEX = "http://schemas.xmlsoap.org/ws/2004/09/mex";
+		
+	}
+  
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/MexException.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/MexException.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/MexException.java	(revision 0)
@@ -0,0 +1,44 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex;
+
+import org.apache.axis2.AxisFault;
+
+/**
+ * Base Exception to report problem from implementation classes of 
+ * WS-MetadataExchange.
+ *
+ */
+public class MexException extends AxisFault {
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1L;
+
+	public MexException(String message) {
+		super(message);
+	}
+
+	public MexException(Throwable e) {
+		super(e);
+	}
+
+    public MexException(String message, Throwable e) {
+		super(message, e);
+	}
+
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/MetadataExchangeModule.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/MetadataExchangeModule.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/MetadataExchangeModule.java	(revision 0)
@@ -0,0 +1,60 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.description.AxisDescription;
+import org.apache.axis2.description.AxisModule;
+import org.apache.axis2.modules.Module;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.neethi.Assertion;
+import org.apache.neethi.Policy;
+
+/**
+ * Metadata Exchange Module to support WS-MEX specification
+ * 
+ */
+public class MetadataExchangeModule implements Module {
+
+	private static final Log log = LogFactory.getLog(MetadataExchangeModule.class);
+
+	public void engageNotify(AxisDescription axisDescription) throws AxisFault {
+	 log.info("metadataExchange module has been engaged to Service." );	
+	}
+
+	public void init(ConfigurationContext configContext, AxisModule module)
+			throws AxisFault {
+	
+	}
+
+	public void shutdown(ConfigurationContext configurationContext)
+			throws AxisFault {
+	
+
+	}
+
+	public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {
+			
+	}
+
+	public boolean canSupportAssertion(Assertion assertion) {
+		return false;
+	}
+
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/MetadataReference.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/MetadataReference.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/MetadataReference.java	(revision 0)
@@ -0,0 +1,95 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axis2.AxisFault;
+//import org.apache.axis2.addressing.EndpointReference;
+//import org.apache.axis2.addressing.EndpointReferenceHelper;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * Class implemented for MetadataReference element defined in 
+ * the WS-MetadataExchange spec.
+ *
+ */
+
+public class MetadataReference extends MexOM implements IMexOM {
+
+	private OMFactory factory;
+	private OMElement eprElement = null; 
+
+	private String namespaceValue = null;
+
+	/**
+	 * Constructor
+	 * @param defaultFactory
+	 * @param namespaceValue
+	 * @throws MexOMException
+	 */
+
+	public MetadataReference(OMFactory defaultFactory, String namespaceValue)
+	 throws MexOMException {
+		if (!isNamespaceSupported(namespaceValue))
+			throw new MexOMException("Unsupported namespace");
+
+		this.factory = defaultFactory;
+		this.namespaceValue = namespaceValue;
+		}
+
+	/**
+	 * Convert MetadatReference object content to the OMElement representation.
+	 * @return OMElement representation of MetadatReference.
+	 * @throws MexOMException
+	 */
+	public OMElement toOM() throws MexOMException {
+		if (eprElement == null) {
+			throw new MexOMException(
+					"Must have EndpointReference element in MetadataReference");
+		}
+
+		OMElement metadataRef = null;
+		/*if (eprElement.getLocalName() == "EndpointReference") {
+			EndpointReference epr;
+			try {
+				epr = EndpointReferenceHelper.fromOM(eprElement);
+				metadataRef = EndpointReferenceHelper.toOM(factory, epr,
+						new QName(namespaceValue,
+								MexConstants.SPEC.METADATA_REFERENCE,
+								MexConstants.SPEC.NS_PREFIX), eprElement
+								.getNamespace().getNamespaceURI());
+
+			} catch (AxisFault e) {
+				throw new MexOMException(e);
+			}
+		} */
+
+		return metadataRef;
+	}
+	
+	/**
+	 * Set EPR element
+	 * 
+	 * @param element
+	 */
+	public void setEPRElement(OMElement element) {
+		eprElement = element;
+	}
+	
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/Metadata.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/Metadata.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/Metadata.java	(revision 0)
@@ -0,0 +1,93 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * 
+ * Class implementing  mex:Metadata element 
+ *
+ */
+
+public class Metadata extends MexOM implements IMexOM {
+	private String namespaceValue = null;
+	private OMFactory factory;
+	private List  metadataSections = new ArrayList(); 
+	private OMAttribute attribute = null;
+	
+	/**
+	 * 
+	 * @param defaultFactory
+	 * @param namespaceValue
+	 * @throws MexOMException
+	 */
+
+	public Metadata(OMFactory defaultFactory, String namespaceValue) throws MexOMException  {
+		this.factory = defaultFactory;
+		this.namespaceValue = namespaceValue;
+	}
+
+	
+	public OMElement toOM() throws MexOMException
+	{
+		OMNamespace mexNamespace = factory.createOMNamespace(namespaceValue,MexConstants.SPEC.NS_PREFIX);
+		OMElement metadata = factory.createOMElement(MexConstants.SPEC.METADATA, mexNamespace);
+
+		Iterator sections = metadataSections.iterator();
+		while (sections.hasNext()) {
+			MetadataSection aSection = (MetadataSection) sections.next();
+			metadata.addChild(aSection.toOM());
+		}
+		if (attribute != null){
+			metadata.addAttribute(attribute); //???
+		}
+		return metadata;
+	}
+	
+	public void setMetadatSections(List in_metadataSections) {
+		metadataSections = in_metadataSections;
+	}
+	
+	public void addMetadatSections(List in_metadataSections) {
+		Iterator sections = in_metadataSections.iterator();
+		while (sections.hasNext()) {
+			addMetadatSection((MetadataSection) sections.next());
+		}
+	}
+
+	public void addMetadatSection(MetadataSection section) {
+		metadataSections.add(section);
+	}
+	
+	public MetadataSection[] getMetadatSections() {
+		return (MetadataSection[])metadataSections.toArray(new MetadataSection[0]);
+	}
+	
+	public void setAttribute(OMAttribute in_attribute) {
+		attribute = in_attribute;
+	}
+
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/Dialet.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/Dialet.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/Dialet.java	(revision 0)
@@ -0,0 +1,59 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axiom.om.OMFactory;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * Class implemented for Dialect element defined in 
+ * the WS-MEX spec.
+ *
+ */
+
+public class Dialet extends AnyURIType {
+
+	/**
+	 * Constructor
+	 * @param defaultFactory
+	 * @param namespaceValue namespace info
+	 * @param dialect Dialect in URI representation
+	 * @throws MexOMException
+	 */
+	public Dialet(OMFactory defaultFactory, String namespaceValue, String dialect) throws MexOMException {
+		super(defaultFactory, namespaceValue, dialect);
+	}
+	
+	/**
+	 * Constructor with default namespace
+	 * @param defaultFactory
+	 * @param dialect  Dialect in URI representation
+	 * @throws MexOMException
+	 */
+	public Dialet(OMFactory defaultFactory, String dialect) throws MexOMException {
+		super(defaultFactory, MexConstants.Spec_2004_09.NS_URI, dialect );
+	}
+
+	/*
+	 * Return name of this element
+	 * (non-Javadoc)
+	 * @see org.apache.axis2.Mex.OM.AnyURIType#getElementName()
+	 */
+	protected String getElementName(){
+		return MexConstants.SPEC.DIALECT;
+	}
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/Identifier.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/Identifier.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/Identifier.java	(revision 0)
@@ -0,0 +1,45 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axiom.om.OMFactory;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * Class implemented for Identifier element defined in 
+ * the WS-MEX spec.
+ *
+ */
+
+public class Identifier extends AnyURIType {
+
+	public Identifier(OMFactory defaultFactory, String namespaceValue, String uri) throws MexOMException {
+		super(defaultFactory, namespaceValue, uri);
+	}
+	public Identifier(OMFactory defaultFactory, String uri) throws MexOMException {
+		super(defaultFactory, MexConstants.Spec_2004_09.NS_URI, uri );
+	}
+
+	/*
+	 * Return name of this element
+	 * (non-Javadoc)
+	 * @see org.apache.axis2.Mex.OM.AnyURIType#getElementName()
+	 */
+	protected String getElementName(){
+		return MexConstants.SPEC.IDENTIFIER;
+	}
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/MexOMException.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/MexOMException.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/MexOMException.java	(revision 0)
@@ -0,0 +1,42 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axis2.mex.MexException;
+
+/**
+ * An Exception to report problem from implementation classes for the 
+ * WS-MetadataExchange data elements.
+ *
+ */
+public class MexOMException extends MexException {
+
+	private static final long serialVersionUID = 1L;
+
+	protected MexOMException(String message) {
+		super(message);
+	}
+
+	protected MexOMException(Exception e) {
+		super(e);
+	}
+
+	protected MexOMException(String message, Exception e) {
+		super(message, e);
+	}
+
+}
\ No newline at end of file
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/MetadataSection.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/MetadataSection.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/MetadataSection.java	(revision 0)
@@ -0,0 +1,151 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+
+import org.apache.axiom.om.OMAttribute;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.OMNode;
+import org.apache.axis2.mex.MexConstants;
+
+
+/**
+ * Class implemented for MetadataSection element defined in 
+ * the WS-MEX spec.
+ *
+ */
+public  class MetadataSection extends MexOM implements IMexOM {
+	private String namespaceValue = null;
+	private OMFactory factory;
+	// Choices of content: inline metadata, MetadataReference, Location
+	private String anyAttribute = null;
+	private OMNode inlineData = null;
+	//private String inlineData = null;
+	private Location location = null;
+	private MetadataReference ref = null;
+	
+    // Attributes
+    private String dialet;
+    private String identifier;
+    
+    /**
+     * Constructor
+     * @param defaultFactory
+     * @param namespaceValue
+     * @throws MexOMException
+     */
+	public MetadataSection(OMFactory defaultFactory, String namespaceValue) throws MexOMException  {
+		this.factory = defaultFactory;
+		this.namespaceValue = namespaceValue;
+	}
+	
+		
+	/**
+	 * Convert MetadatSection content to the OMElement representation.
+	 * @return OMElement representation of MetadataSection.
+	 * @throws MexOMException
+	 */
+	public OMElement toOM() throws MexOMException {
+		OMNamespace mexNamespace = factory.createOMNamespace(namespaceValue,
+				MexConstants.SPEC.NS_PREFIX);
+		OMElement metadataSection = factory.createOMElement(
+				MexConstants.SPEC.METADATA_SECTION, mexNamespace);
+
+		// dialet is required
+		if (dialet == null) {
+			throw new MexOMException("Dialet was not set. Dialet must be set.");
+		}
+		OMAttribute dialetAttrib = factory.createOMAttribute(
+				MexConstants.SPEC.DIALECT, null, dialet);
+
+		metadataSection.addAttribute(dialetAttrib);
+
+		if (identifier != null && identifier.trim().length() > 0) {
+			OMAttribute identifierAttrib = factory.createOMAttribute(
+					MexConstants.SPEC.IDENTIFIER, null, identifier);
+
+			metadataSection.addAttribute(identifierAttrib);
+		}
+		if (anyAttribute != null) {
+			OMAttribute anyAttrib = factory.createOMAttribute("AnyAttribute",
+					null, anyAttribute);
+
+			metadataSection.addAttribute(anyAttrib);
+		}
+
+		if (inlineData != null) {
+			metadataSection.addChild(inlineData);
+			
+		}
+
+		if (location != null) {
+			metadataSection.addChild(location.toOM());
+		}
+
+		if (ref != null) {
+			metadataSection.addChild(ref.toOM());
+		}
+		return metadataSection;
+
+	}
+	
+	public String getDialet() {
+		return dialet;
+	}
+	
+	public String getIdentifier() {
+		return identifier;
+	}
+	
+	public String getanyAttribute() {
+		return anyAttribute;
+	}
+	public Location getLocation() {
+		return location;
+	}
+	
+	public OMNode getInlineData() {
+		return inlineData;
+	}
+	
+	public MetadataReference getMetadataReference() {
+		return ref;
+	}
+	
+	public void setIdentifier(String in_identifier) {
+		identifier =in_identifier;
+	}
+	
+	public void setDialet(String in_dialet) {
+		dialet = in_dialet;
+	}
+	
+	
+	public void setLocation(Location in_location) {
+		location = in_location;
+	}
+	
+	public void setinlineData(Object in_inlineData) {
+		inlineData = (OMNode)in_inlineData;
+	}
+	
+	public void setMetadataReference(MetadataReference in_ref) {
+		ref = in_ref;
+	}
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/MexOM.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/MexOM.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/MexOM.java	(revision 0)
@@ -0,0 +1,43 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * Base class for objects implemented for elements defined in 
+ * the WS-MEX spec.
+ */
+
+public abstract class MexOM implements IMexOM {
+
+	
+	public OMElement toOM() throws MexOMException {
+		return null;
+	}
+	
+	public String getNamespaceValue(){
+		return MexConstants.Spec_2004_09.NS_URI;
+	}
+
+	public boolean isNamespaceSupported (String namespaceName) {
+		boolean supported = false;
+		supported = MexConstants.Spec_2004_09.NS_URI.equals(namespaceName);
+		return supported;
+	}
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/Location.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/Location.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/Location.java	(revision 0)
@@ -0,0 +1,45 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axiom.om.OMFactory;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * Class implemented for Location element defined in 
+ * the WS-MEX spec.
+ *
+ */
+
+public class Location extends AnyURIType {
+
+	public Location(OMFactory defaultFactory, String namespaceValue, String uri) throws MexOMException {
+		super(defaultFactory, namespaceValue, uri);
+	}
+	public Location(OMFactory defaultFactory, String uri) throws MexOMException {
+		super(defaultFactory, MexConstants.Spec_2004_09.NS_URI, uri );
+	}
+	
+	/*
+	 * Return name of this element
+	 * (non-Javadoc)
+	 * @see org.apache.axis2.Mex.OM.AnyURIType#getElementName()
+	 */
+	protected String getElementName(){
+		return MexConstants.SPEC.LOCATION;
+	}
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/AnyURIType.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/AnyURIType.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/AnyURIType.java	(revision 0)
@@ -0,0 +1,67 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.mex.MexConstants;
+
+/**
+ * Base Class implemented for element(s) that of type='xs:anyURI' defined in 
+ * the WS-MEX spec.
+ *
+ */
+
+public abstract class AnyURIType extends MexOM implements IMexOM {
+    private String uri = null;
+	private OMFactory defaultFactory;
+	
+	private String namespaceValue = null;
+	
+	public AnyURIType(OMFactory defaultFactory, String namespaceValue, String uri) throws MexOMException {
+		if (!isNamespaceSupported(namespaceValue))
+			throw new MexOMException ("Unsupported namespace");
+		
+		this.defaultFactory = defaultFactory;
+		this.namespaceValue = namespaceValue;
+		this.uri = uri;
+	}
+	
+
+	/**
+	 * Convert object content to the OMElement representation.
+	 * @return OMElement representation of sub-class of AnyURIType.
+	 * @throws MexOMException
+	 */
+	
+	public OMElement toOM() throws MexOMException {
+		if (uri == null || uri == "") {
+			throw new MexOMException("Expected URI type is not set .. ");
+		}
+			
+		OMNamespace mexNamespace = defaultFactory.createOMNamespace(namespaceValue,MexConstants.SPEC.NS_PREFIX);
+		OMElement  element = defaultFactory.createOMElement(getElementName(), mexNamespace);	
+		element.setText(uri);
+		return element;
+	}
+	
+	/*
+	 * Child class must implement to answer the element name.
+	 */
+  protected abstract String getElementName();
+}
Index: axis2/modules/mex/src/org/apache/axis2/mex/OM/IMexOM.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/OM/IMexOM.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/OM/IMexOM.java	(revision 0)
@@ -0,0 +1,32 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.OM;
+
+import org.apache.axiom.om.OMElement;
+
+/**
+ * Base interface for objects implemented for elements defined in 
+ * the WS-MEX spec.
+ */
+public interface IMexOM {
+    public OMElement toOM() throws MexOMException;
+   
+    public String getNamespaceValue();
+
+    public boolean isNamespaceSupported (String namespaceName);
+}
+
Index: axis2/modules/mex/src/org/apache/axis2/mex/util/MexUtil.java
===================================================================
--- axis2/modules/mex/src/org/apache/axis2/mex/util/MexUtil.java	(revision 0)
+++ axis2/modules/mex/src/org/apache/axis2/mex/util/MexUtil.java	(revision 0)
@@ -0,0 +1,111 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package org.apache.axis2.mex.util;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.impl.OMNamespaceImpl;
+import org.apache.axiom.soap.SOAP11Constants;
+import org.apache.axiom.soap.SOAP12Constants;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.mex.MexException;
+import org.apache.axis2.mex.MexConstants;
+import org.apache.axis2.dataRetrieval.OutputForm;
+
+public class MexUtil {
+	
+	/**
+	 * Answer SOAPVersion for specified envelope
+	 * @param envelope SOAP Envelope
+	 * @return version of SOAP
+	 * @throws MexException
+	 */
+	public static int getSOAPVersion(SOAPEnvelope envelope) throws MexException {
+		String namespaceName = envelope.getNamespace().getNamespaceURI();
+		if (namespaceName.equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI))
+			return MexConstants.SOAPVersion.v1_1;
+		else if (namespaceName.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI))
+			return MexConstants.SOAPVersion.v1_2;
+		else
+			throw new MexException("Unknown SOAP version");
+	}
+
+	/**
+	 * Answer SOAPFactory corresponding to specified SOAP namespace URI
+	 * @param soapNameSpaceURI soap namespace uri
+	 * @return
+	 * @throws MexException
+	 */
+	public static SOAPFactory getSOAPFactory(String soapNameSpaceURI) throws MexException {
+			if (soapNameSpaceURI.equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI))
+			return  OMAbstractFactory.getSOAP11Factory();
+		else if (soapNameSpaceURI.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI))
+			return OMAbstractFactory.getSOAP12Factory();
+		else
+			throw new MexException("Unknown SOAP soapNameSpaceURI");
+	}
+
+	/**
+	 * Answers SOAPFactory corresponding to specified SOAP Version
+	 * @param SOAPVersion SOAP version
+	 * @return SOAPFactory
+	 */
+	public static SOAPFactory getSOAPFactory(int SOAPVersion) {
+
+		if (SOAPVersion == MexConstants.SOAPVersion.v1_1)
+			return OMAbstractFactory.getSOAP11Factory();
+		else
+			return OMAbstractFactory.getSOAP12Factory();
+
+	}
+	
+	
+	// Return all supported output forms
+	public static OutputForm[] allSupportedOutputForms(){
+		OutputForm[]outputforms = new OutputForm[] {
+		OutputForm.INLINE_FORM,
+		OutputForm.LOCATION_FORM, 
+		OutputForm.REFERENCE_FORM};
+		return outputforms;
+	}
+	
+	/**
+	 * Answers WS-Addressing namespace
+	 * @param toAddress To Address element
+	 * @return OMNamespaceImpl WS-Addressing namespace
+	 * @throws AxisFault
+	 */
+	
+	 public static OMNamespaceImpl getAddressingNameSpace(OMElement toAddress)
+			throws MexException {
+		OMFactory factory = OMAbstractFactory.getOMFactory();
+		OMNamespaceImpl wsa = null;
+		try {
+			String prefix = toAddress.getNamespace().getPrefix();
+			String nsURI = toAddress.getNamespace().getNamespaceURI();
+			wsa = (OMNamespaceImpl) factory.createOMNamespace(nsURI, prefix);
+		} catch (Exception e) {
+		    throw new MexException(e);
+		}
+		return wsa;
+
+	}
+
+}
Index: axis2/modules/samples/mex/src/userguide/mex/datalocators/ServiceLevelDataLocator.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/datalocators/ServiceLevelDataLocator.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/datalocators/ServiceLevelDataLocator.java	(revision 0)
@@ -0,0 +1,81 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package userguide.mex.datalocators;
+
+import java.util.Calendar;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.*;
+
+/*
+ * Sample Service Level Locator
+ * ServiceLevelDataLocator is configured as a Service level Data Locator 
+ * for the Sample ServiceLevelDataLocatorDemoService service.
+ * 
+ * The sample Data Locator is only for the purpose of demostrating an implementation of
+ * user-defined Service Level Data Locator, the actual data retrieval code is not implemented.
+ * In the example, a empty Data array is returned for Policy and Schema data retrieval
+ * request, and a null Data array is returned for WSDL data retrieval. 
+ * 
+ * Note: Empty Data array means Data Locator understood the request, however data
+ * is not available for the Dialect; a null data array means Data Locator does not understand
+ * the request.
+ * 
+ * Run  {@link DemoServiceLevelDataLocator} client code to invoke this sample data locator. 
+ *    
+ */
+
+public class ServiceLevelDataLocator implements AxisDataLocator {
+
+	public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws DataRetrievalException {
+		System.out
+				.println(Calendar.getInstance().getTime()
+						+ " !!!! userguide.mex.datalocators.ServiceLevelDataLocator performing getData !!!!");
+
+		System.out
+				.print(" !!! SERVICE LEVEL Data Locator supports Policy and Schema dialects only !!!");
+		Data[] result = null;
+
+		String dialect = request.getDialect();
+		if (dialect.equals(DRConstants.SPEC.DIALECT_TYPE_POLICY)
+				|| dialect.equals(DRConstants.SPEC.DIALECT_TYPE_SCHEMA)) {
+			// You may implement logic to retrieve Policy and Schema metadata here!!
+			//
+			System.out
+					.print("ServiceLevelDataLocator has not implemented data retrieval for dialect "
+							+ dialect);
+			System.out.println("");
+			System.out
+					.println("!!!! Return empty Data means the Data Locator understood the request for Dialect, but no data is available for the dialect");
+			result = new Data[0];
+
+		} else {
+			System.out
+					.println("!!!! ServiceLevelDataLocator does not support dialect "
+							+ dialect);
+			System.out.println("");
+			System.out
+					.println("!!!! Return Null Data means escalate to the Axis2 default Data Locator to retrieve data for "
+							+ dialect);
+		}
+		return result;
+	}
+		
+		
+	
+}
Index: axis2/modules/samples/mex/src/userguide/mex/datalocators/WSDLDataLocator.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/datalocators/WSDLDataLocator.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/datalocators/WSDLDataLocator.java	(revision 0)
@@ -0,0 +1,55 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package userguide.mex.datalocators;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.*;
+import org.apache.axis2.description.AxisService;
+
+/*
+ * Sample user-defined WSDL Data Locator, WSDLDataLocator is configured as a Service level 
+ * WSDL specific Data Locator for the Sample WSDLDataServiceMyService service.
+ * 
+ * The sample Data Locator is only for the purpose of demostrating an implementation of
+ * user-defined Service Level Dialect Data Locator, the actual data retrieval code is not implemented.
+ * In the example, a empty Data array is returned for WSDL data retrieval
+ * request.
+ * 
+ * Note: Empty Data array means Data Locator understood the request.
+ * 
+ * Run  {@link DemoServiceWSDLServiceLocator} client code to invoke this sample data locator. 
+ * 
+ */
+public class WSDLDataLocator implements AxisDataLocator {
+	AxisService theService = null;
+
+	String serviceName = "WSDLDataLocatorDemoService";
+
+	public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws DataRetrievalException {
+		Data[] result = new Data[0];
+		System.out.print(serviceName
+				+ " User-defined WSDL Data Locator has been invoked!!!");
+		// You may implement logic to retrieve WSDL metadata here!!
+		
+		System.out.print("WSDLDataLocator has not implemented data retrieval.");
+ 
+		return result;
+	}
+
+}
+
Index: axis2/modules/samples/mex/src/userguide/mex/datalocators/GlobalDataLocator.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/datalocators/GlobalDataLocator.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/datalocators/GlobalDataLocator.java	(revision 0)
@@ -0,0 +1,53 @@
+package userguide.mex.datalocators;
+
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.dataRetrieval.AxisDataLocator;
+import org.apache.axis2.dataRetrieval.DRConstants;
+import org.apache.axis2.dataRetrieval.Data;
+import org.apache.axis2.dataRetrieval.DataRetrievalException;
+import org.apache.axis2.dataRetrieval.DataRetrievalRequest;
+import org.apache.axis2.dataRetrieval.OutputForm;
+
+/*
+ * Sample user-defined Global Level Locator, GlobalDataLocator
+ * 
+ * The sample Data Locator implemented supports data retrieval for the Policy and Schema
+ * dialects. For dialects that it does not understand, it delegates the request
+ * to the available Data Locators in the hierachy by returning Result with
+ * useDataLocatorHierachy indicator set.
+ * 
+ * See  {@link DemoServiceLevelDataLocator} for steps to invoke getData API
+ * of this Data Locator.   
+ * 
+ */
+public class GlobalDataLocator implements AxisDataLocator {
+
+	public Data[] getData(DataRetrievalRequest request,
+			MessageContext msgContext) throws DataRetrievalException {
+		Data[] output = null;
+        String dialect = request.getDialect();
+        OutputForm form = request.getOutputForm();
+        if (form == OutputForm.REFERENCE_FORM){
+        	
+        }
+        if (dialect.equals(DRConstants.SPEC.DIALECT_TYPE_POLICY) || dialect.equals(DRConstants.SPEC.DIALECT_TYPE_SCHEMA)){
+       	 System.out.print("ServiceLevelDataLocator has not implemented data retrieval for dialect " + dialect);
+        	 System.out.println("");
+       	 System.out.println("!!!! get Axis2 default Data Locator to retrieve data for " + dialect);
+
+       	// result = new Result();
+        	// result.setUseDataLocatorHierachy(true);
+  
+        }
+        else {
+       	 System.out.println("!!!! ServiceLevelDataLocator does not support dialect " + dialect);
+       	 System.out.println("");
+       	 System.out.println("!!!! get Axis2 default Data Locator to retrieve data for " + dialect);
+        	// result = new Result();
+        	// result.setUseDataLocatorHierachy(true);
+          }
+        return output;
+		
+	}
+
+}
Index: axis2/modules/samples/mex/src/userguide/mex/clients/DemoDefaultDataLocator.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/clients/DemoDefaultDataLocator.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/clients/DemoDefaultDataLocator.java	(revision 0)
@@ -0,0 +1,85 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package userguide.mex.clients;
+
+import java.io.StringWriter;
+import javax.xml.stream.FactoryConfigurationError;
+import javax.xml.stream.XMLOutputFactory;
+import javax.xml.stream.XMLStreamException;
+
+import org.apache.axiom.om.OMElement;
+
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.dataRetrieval.DRConstants;
+import org.apache.axis2.dataRetrieval.client.MexClient;
+
+/**
+ * Sample to demostrate  using Defautl Axis 2 Data Locator to perform data retrieval 
+ * for the WS-MEX GetMetadata request.
+ * 
+ * In the example, no Data Locator is configured in the Axis2.xml nor the services.xml.
+ * 
+ * Before running the sample, you must first deploy the Axis 2 sample DefaultAxisDataLocatorDemoService service i.e.
+ * DefaultAxisDataLocatorDemoService.aar file.  
+ * 
+ */
+
+public class DemoDefaultDataLocator {
+
+   private static EndpointReference targetEPR = new EndpointReference("http://127.0.0.1:8080/axis2/services/DefaultAxisDataLocatorDemoService");
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Test getMetadata for " + targetEPR.getAddress());
+         
+            MexClient serviceClient =  new MexClient();
+            Options options = new Options();
+            serviceClient.setOptions(options);
+            
+            options.setTo(targetEPR);
+            options.setAction(DRConstants.SPEC.Actions.GET_METADATA_REQUEST);
+            
+            System.out.println ("No DataLocator configured! Used AxisDataLocator");
+            
+            OMElement method = serviceClient.setupGetMetadataRequest(null, null);
+              
+            OMElement result = serviceClient.sendReceive(method);
+            System.out.println(result);
+            StringWriter writer = new StringWriter();
+            try {
+				result.serialize(XMLOutputFactory.newInstance()
+				      .createXMLStreamWriter(writer));
+			} catch (XMLStreamException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (FactoryConfigurationError e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            writer.flush();
+            System.out.println(writer.toString());
+
+                     
+       
+        } catch (AxisFault axisFault) {
+            axisFault.printStackTrace();
+          }
+        }
+
+}
Index: axis2/modules/samples/mex/src/userguide/mex/clients/DemoServiceLevelDataLocator.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/clients/DemoServiceLevelDataLocator.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/clients/DemoServiceLevelDataLocator.java	(revision 0)
@@ -0,0 +1,64 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package userguide.mex.clients;
+
+import java.util.Calendar;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.dataRetrieval.DRConstants;
+import org.apache.axis2.dataRetrieval.client.MexClient;
+
+/**
+ * Sample to demostrate  using User-defined Service level Data Locator to perform data retrieval 
+ * for the WS-MEX GetMetadata request.
+ * 
+ * In the example, dataLocator element was added in the services.xml of the target Service.
+ * 
+ * Before running the sample, you must first deploy the Axis 2 sample ServiceLevelDataLocatorDemoService service i.e.
+ * ServiceLevelDataLocatorDemoService.aar file.  
+ * 
+ */
+
+public class DemoServiceLevelDataLocator {
+	private static EndpointReference targetEPR = new EndpointReference(
+			"http://127.0.0.1:8080/axis2/services/ServiceLevelDataLocatorDemoService");
+
+	public static void main(String[] args) {
+		try {
+			System.out
+					.println(Calendar.getInstance().getTime() + " Test getMetadata for " + targetEPR.getAddress());
+			MexClient serviceClient = new MexClient();
+			Options options = new Options();
+			serviceClient.setOptions(options);
+	        options.setTo(targetEPR);
+	        options.setAction(DRConstants.SPEC.Actions.GET_METADATA_REQUEST);
+	        
+	        String identifier = null;    
+		    OMElement method = serviceClient.setupGetMetadataRequest(DRConstants.SPEC.DIALECT_TYPE_WSDL, identifier);
+            
+            OMElement result = serviceClient.sendReceive(method);
+     
+			System.out.println(result);
+
+		} catch (AxisFault axisFault) {
+			axisFault.printStackTrace();
+		}
+	}
+}
Index: axis2/modules/samples/mex/src/userguide/mex/clients/DemoWSDLServiceDataLocator.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/clients/DemoWSDLServiceDataLocator.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/clients/DemoWSDLServiceDataLocator.java	(revision 0)
@@ -0,0 +1,64 @@
+/*
+* Copyright 2007 The Apache Software Foundation.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package userguide.mex.clients;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.dataRetrieval.DRConstants;
+import org.apache.axis2.dataRetrieval.client.MexClient;
+
+/**
+ * Sample to demostrate  using User-defined Service level WSDL dialect specific 
+ * Data Locator to perform data retrievalfor the WS-MEX GetMetadata request.
+ * 
+ * In the example, dialectLocator for dialect="http://schemas.xmlsoap.org/wsdl/"
+ * element was added in the services.xml of the target Service.
+ * 
+ * Before running the sample, you must first deploy the Axis 2 sample "WSDLDataLocatorDemoService" service i.e.
+ * WSDLDataLocatorDemoService.aar file.  
+ * 
+ */
+public class DemoWSDLServiceDataLocator {
+	private static EndpointReference targetEPR = new EndpointReference(
+	"http://127.0.0.1:8080/axis2/services/WSDLDataLocatorDemoService");
+public static void main(String[] args) {
+try {
+	System.out
+			.println("Test getMetadata for " + targetEPR.getAddress());
+	System.out
+	.println("Service WSDL specific DataLocator was configured");
+
+	MexClient serviceClient = new MexClient();
+	Options options = new Options();
+	options.setAction(DRConstants.SPEC.Actions.GET_METADATA_REQUEST);
+    options.setTo(targetEPR);
+    
+	serviceClient.setOptions(options);
+    String identifier =  null;   
+    OMElement method = serviceClient.setupGetMetadataRequest(DRConstants.SPEC.DIALECT_TYPE_WSDL, identifier);
+    
+    OMElement result = serviceClient.sendReceive(method);
+
+	System.out.println(result);
+
+} catch (AxisFault axisFault) {
+	axisFault.printStackTrace();
+}
+}
+}
Index: axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/services.xml
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/services.xml	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/services.xml	(revision 0)
@@ -0,0 +1,26 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<service name="DefaultAxisDataLocatorDemoService">
+    <description>
+     Sample web service to demostrate use of Default Axis2 Data Locator to handle ws-mex GetMetadata request.       
+     </description>
+    <parameter name="ServiceClass" locked="false">userguide.mex.services.example1.Version</parameter>
+    <operation name="getVersion">
+    <messageReceiver  class="org.apache.axis2.rpc.receivers.RPCMessageReceiver" />
+    </operation>
+</service>
\ No newline at end of file
Index: axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/DefaultAxis2DataLocatorDemoService.wsdl
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/DefaultAxis2DataLocatorDemoService.wsdl	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/DefaultAxis2DataLocatorDemoService.wsdl	(revision 0)
@@ -0,0 +1,35 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<wsdl:definitions xmlns:ns1="http://org.apache.axis2/xsd" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:ns0="http://example1.services.mex.userguide/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:axis2="http://example1.services.mex.userguide" targetNamespace="http://example1.services.mex.userguide"><wsdl:documentation>
+     Sample web service to demostrate use of Default Axis2 Data Locator to handle ws-mex GetMetadata request.       
+     </wsdl:documentation><wsdl:types><xs:schema xmlns:ns="http://example1.services.mex.userguide/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://example1.services.mex.userguide/xsd">
+<xs:element name="getVersionFault">
+<xs:complexType>
+<xs:sequence>
+<xs:element name="getVersionFault" type="xs:anyType" />
+</xs:sequence>
+</xs:complexType>
+</xs:element>
+<xs:element name="getVersionResponse">
+<xs:complexType>
+<xs:sequence>
+<xs:element name="return" nillable="true" type="xs:string" />
+</xs:sequence>
+</xs:complexType>
+</xs:element>
+</xs:schema></wsdl:types><wsdl:message name="getVersionMessage" /><wsdl:message name="getVersionResponse"><wsdl:part name="part1" element="ns0:getVersionResponse" /></wsdl:message><wsdl:message name="getVersionFault"><wsdl:part name="part1" element="ns0:getVersionFault" /></wsdl:message><wsdl:portType name="DefaultAxisDataLocatorDemoServicePortType"><wsdl:operation name="getVersion"><wsdl:input xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" message="axis2:getVersionMessage" wsaw:Action="urn:getVersion" /><wsdl:output message="axis2:getVersionResponse" /><wsdl:fault message="axis2:getVersionFault" name="getVersionFault" /></wsdl:operation></wsdl:portType><wsdl:binding name="DefaultAxisDataLocatorDemoServiceSOAP11Binding" type="axis2:DefaultAxisDataLocatorDemoServicePortType"><soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /><wsdl:operation name="getVersion"><soap:operation soapAction="urn:getVersion" style="document" /><wsdl:input><soap:body use="literal" /></wsdl:input><wsdl:output><soap:body use="literal" /></wsdl:output><wsdl:fault name="getVersionFault"><soap:body use="literal" /></wsdl:fault></wsdl:operation></wsdl:binding><wsdl:binding name="DefaultAxisDataLocatorDemoServiceSOAP12Binding" type="axis2:DefaultAxisDataLocatorDemoServicePortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" /><wsdl:operation name="getVersion"><soap12:operation soapAction="urn:getVersion" style="document" /><wsdl:input><soap12:body use="literal" /></wsdl:input><wsdl:output><soap12:body use="literal" /></wsdl:output><wsdl:fault name="getVersionFault"><soap12:fault use="literal" name="getVersionFault" /></wsdl:fault></wsdl:operation></wsdl:binding><wsdl:binding name="DefaultAxisDataLocatorDemoServiceHttpBinding" type="axis2:DefaultAxisDataLocatorDemoServicePortType"><http:binding verb="POST" /><wsdl:operation name="getVersion"><http:operation location="getVersion" /><wsdl:input><mime:content type="text/xml" /></wsdl:input><wsdl:output><mime:content type="text/xml" /></wsdl:output></wsdl:operation></wsdl:binding><wsdl:service name="DefaultAxisDataLocatorDemoService"><wsdl:port name="DefaultAxisDataLocatorDemoServiceSOAP11port_http" binding="axis2:DefaultAxisDataLocatorDemoServiceSOAP11Binding"><soap:address location="http://192.168.0.107:8080/axis2/services/DefaultAxisDataLocatorDemoService" /></wsdl:port><wsdl:port name="DefaultAxisDataLocatorDemoServiceSOAP12port_http" binding="axis2:DefaultAxisDataLocatorDemoServiceSOAP12Binding"><soap12:address location="http://192.168.0.107:8080/axis2/services/DefaultAxisDataLocatorDemoService" /></wsdl:port><wsdl:port name="DefaultAxisDataLocatorDemoServiceHttpport1" binding="axis2:DefaultAxisDataLocatorDemoServiceHttpBinding"><http:address location="http://192.168.0.107:8080/axis2/rest/DefaultAxisDataLocatorDemoService" /></wsdl:port></wsdl:service></wsdl:definitions>
\ No newline at end of file
Index: axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/ServiceData.xml
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/ServiceData.xml	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/ServiceData.xml	(revision 0)
@@ -0,0 +1,27 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<?xml version="1.0" encoding="UTF-8"?>
+<ServiceData>
+<Data dialect="http://schemas.xmlsoap.org/wsdl" file="META-INF/DefaultAxis2DataLocatorDemoService.wsdl">
+ <URL>http://127/0/0/1:8080/axis2/services/DefaultAxis2DataLocatorDemoService?wsdl </URL>
+</Data>
+<Data dialect="http://www.w3.org/2001/XMLSchema" file="META-INF/DefaultAxis2DataLocatorDemoService.xsd">
+ <URL>http://localhost:8080/axis2/services/DefaultAxis2DataLocatorDemoService?xsd </URL>
+ </Data>
+</ServiceData>
+ 
Index: axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/DefaultAxis2DataLocatorDemoService.xsd
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/DefaultAxis2DataLocatorDemoService.xsd	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example1/META-INF/DefaultAxis2DataLocatorDemoService.xsd	(revision 0)
@@ -0,0 +1,38 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+xmlns:ns0="http://services.example.org/mex/interop/ServiceA/" 
+xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.example.org/ServiceA/" 
+xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" attributeFormDefault="qualified" 
+elementFormDefault="qualified" 
+targetNamespace="http://example1.services.mex.userguide/xsd">
+ <xsd:element name="getVersionFault"> <xsd:complexType>
+ <xsd:sequence>
+<xsd:element name="getVersionFault" type="xsd:anyType"/>
+</xsd:sequence>
+</xsd:complexType>
+</xsd:element>
+<xsd:element name="getVersionResponse">
+ <xsd:complexType><xsd:sequence>
+<xsd:element name="return" nillable="true" type="xsd:string"/>
+</xsd:sequence>
+</xsd:complexType>
+</xsd:element>  
+</xsd:schema>
\ No newline at end of file
Index: axis2/modules/samples/mex/src/userguide/mex/services/example1/Version.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example1/Version.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example1/Version.java	(revision 0)
@@ -0,0 +1,24 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package userguide.mex.services.example1;
+
+public class Version {
+    public String getVersion() throws Exception {
+        return "Hello I am Axis2 version service ," +
+                " My version is " + org.apache.axis2.Version.getVersionText();
+    }
+}
Index: axis2/modules/samples/mex/src/userguide/mex/services/example2/META-INF/services.xml
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example2/META-INF/services.xml	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example2/META-INF/services.xml	(revision 0)
@@ -0,0 +1,29 @@
+<!--
+/*
+ * Copyright 2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+ <service name="ServiceLevelDataLocatorDemoService">
+    <description>
+      Sample web service to demostrate use of  defined Service Level Data Locator to handle ws-mex GetMetadata request.       
+       </description>
+    <parameter name="ServiceClass" locked="false">userguide.mex.services.example2.Version</parameter>
+    <operation name="getVersion">
+    <messageReceiver  class="org.apache.axis2.rpc.receivers.RPCMessageReceiver" />
+    </operation>
+   <dataLocator class="userguide.mex.datalocators.ServiceLevelDataLocator">
+   </dataLocator>
+
+</service>
\ No newline at end of file
Index: axis2/modules/samples/mex/src/userguide/mex/services/example2/Version.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example2/Version.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example2/Version.java	(revision 0)
@@ -0,0 +1,24 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package userguide.mex.services.example2;
+
+public class Version {
+    public String getVersion() throws Exception {
+        return "Hello I am Axis2 version service ," +
+                " My version is " + org.apache.axis2.Version.getVersionText();
+    }
+}
Index: axis2/modules/samples/mex/src/userguide/mex/services/example3/META-INF/services.xml
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example3/META-INF/services.xml	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example3/META-INF/services.xml	(revision 0)
@@ -0,0 +1,30 @@
+<!--
+/*
+ * Copyright 2001-2007 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<service name="WSDLDataLocatorDemoService">
+    <description>
+      Sample web service to demostrate use of  defined WSDL dialect specfic Data Locator to handle ws-mex GetMetadata request.       
+       </description>
+    <parameter name="ServiceClass" locked="false">userguide.mex.services.example3.Version</parameter>
+    <operation name="getVersion">
+    <messageReceiver  class="org.apache.axis2.rpc.receivers.RPCMessageReceiver" />
+    </operation>
+  <dataLocator>
+  <dialectLocator dialect="http://schemas.xmlsoap.org/wsdl/" class="userguide.mex.datalocators.WSDLDataLocator" /> 
+   </dataLocator>
+
+</service>
\ No newline at end of file
Index: axis2/modules/samples/mex/src/userguide/mex/services/example3/Version.java
===================================================================
--- axis2/modules/samples/mex/src/userguide/mex/services/example3/Version.java	(revision 0)
+++ axis2/modules/samples/mex/src/userguide/mex/services/example3/Version.java	(revision 0)
@@ -0,0 +1,24 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package userguide.mex.services.example3;
+
+public class Version {
+    public String getVersion() throws Exception {
+        return "Hello I am Axis2 version service ," +
+                " My version is " + org.apache.axis2.Version.getVersionText();
+    }
+}
Index: axis2/modules/samples/mex/README.txt
===================================================================
--- axis2/modules/samples/mex/README.txt	(revision 0)
+++ axis2/modules/samples/mex/README.txt	(revision 0)
@@ -0,0 +1,70 @@
+Sample: mex (Metadata Exchange)
+====================================
+
+Introduction
+============
+
+The examples provided demostrates data retrieval for WS-MetadataExchange GetMetadata request
+handled by different level of data locators below: 
+  1. Default Axis2 data locator
+  2. Plug-in service level data locator
+  3. Plug-in service sevel WSDL-specific data locator
+
+Note: Example 2 and 3 are only for the sole purpose of demostrating plug-in data locator support. The
+      data retrieval logic for the plug-in data locators are not implemented.
+
+Details for the examples are documented in the Apache Metadata Exchange User's Guide.
+
+Prerequisites  
+=============
+
+To build the sample service you must have ant-1.6.x installed in your system. 
+
+To set AXIS2_HOME in Unix/Linux type:
+$export AXIS2_HOME=<path to axis2 distribution>
+
+metadataExchange module must be deployed and engaged. 
+Please refer to Apache Metadata Exchange User's Guide for how to deploy and engage 
+the metadataExchange module.
+
+
+Building the Service
+====================
+
+To build the sample service, type: $ant generate.service or just ant
+
+This will build the DefaultAxis2DataLocatorDemoService.aar, ServiceLevelDataLocatorDemoService.aar,
+and WSDLDataLocatorDemoService.aar service archive files in the build directory and copy them to the
+<AXIS2_HOME>/repository/services directory.
+
+You can start the Axis2 server by running either axis2server.bat (on Windows) or axis2server.sh
+(on Linux)that are located in <AXIS2_HOME>/bin directory.
+
+The WSDL for this service should be viewable at:
+
+http://<yourhost>:<yourport>/axis2/services/DefaultAxis2DataLocatorDemoService?wsdl 
+(e.g. http://localhost:8080/axis2/services/DefaultAxis2DataLocatorDemoService?wsdl)
+
+The clients to send GetMetadata requests are available in samples/mex/src/userguide/mex/clients directory.
+
+
+Running the Client
+==================
+
+To compile and run Default Axis2 data locator scenario, type
+$ant run.client.default
+
+To compile and run Plug-in service level Axis2 data locator scenario, type
+$ant run.client.service
+
+To compile and run PLug-in WSDL-specific level Axis2 data locator scenario, type
+$ant run.client.wsdl
+
+
+Help
+====
+Please contact axis-user list (axis-user@ws.apache.org) if you have any trouble running the sample.
+
+
+
+
Index: axis2/modules/samples/mex/build.xml
===================================================================
--- axis2/modules/samples/mex/build.xml	(revision 0)
+++ axis2/modules/samples/mex/build.xml	(revision 0)
@@ -0,0 +1,119 @@
+<!--
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+<project name="samples" default="generate.service">
+    <property name="mainDir" value="../.."/>
+    <property name="classes.dir" value="build/classes"/>
+    <path id="axis.classpath">
+        <fileset dir="../../lib">
+            <include name="*.jar"/>
+        </fileset>
+        <pathelement location="build/userguideMex.jar"/>
+    </path>
+
+    <target name="run.client.all"
+            depends="run.client.default,run.client.service,run.client.wsdl">
+    </target>
+    
+    <target name="compile">
+    		<mkdir dir="${classes.dir}" />
+		<javac srcdir="src" destdir="${classes.dir}">
+			<classpath refid="axis.classpath" />
+		</javac>
+		<jar destfile="build/userguideMex.jar">
+            		<fileset dir="${classes.dir}">
+                		<include name="userguide/**"/>
+            		</fileset>
+       		</jar>
+    </target>
+    
+    <target name="generate.service" depends="compile">
+            <jar destfile="build/DefaultAxis2DataLocatorDemoService.aar">
+            <fileset dir="src/userguide/mex/services/example1/">
+                <include name="META-INF/**"/>
+            </fileset>
+            <fileset dir="${classes.dir}">
+                <include name="userguide/mex/services/example1/**/*.class"/>
+            </fileset>
+        </jar>
+        <copy file="build/DefaultAxis2DataLocatorDemoService.aar" tofile="../../repository/services/DefaultAxis2DataLocatorDemoService.aar" overwrite="true"/>
+        <jar destfile="build/ServiceLevelDataLocatorDemoService.aar" >
+            <fileset dir="src/userguide/mex/services/example2/">
+                <include name="META-INF/**"/>
+            </fileset>
+            <fileset dir="${classes.dir}">
+                <include name="userguide/mex/services/example2/**/*.class"/>
+            </fileset>
+        </jar>
+        <copy file="build/ServiceLevelDataLocatorDemoService.aar" tofile="../../repository/services/ServiceLevelDataLocatorDemoService.aar" overwrite="true"/>
+        <jar destfile="build/WSDLDataLocatorDemoService.aar">
+            <fileset dir="src/userguide/mex/services/example3/">
+                <include name="META-INF/**"/>
+            </fileset>
+            <fileset dir="${classes.dir}">
+                <include name="userguide/mex/services/example3/**/*.class"/>
+            </fileset>
+        </jar>
+        <copy file="build/WSDLDataLocatorDemoService.aar" tofile="../../repository/services/WSDLDataLocatorDemoService.aar" overwrite="true"/>
+    </target>
+    
+     <target name="run.client.default" depends="compile">
+        <java classname="userguide.mex.clients.DemoDefaultDataLocator"
+              classpathref="axis.classpath" fork="true">
+            <jvmarg value="-Daxis2.repo=${mainDir}/repository"/>
+        </java>
+    </target>
+    <target name="run.client.service" depends="compile">
+        <java classname="userguide.mex.clients.DemoServiceLevelDataLocator"
+              classpathref="axis.classpath" fork="true">
+            <jvmarg value="-Daxis2.repo=${mainDir}/repository"/>
+        </java>
+    </target>
+    
+    <target name="run.client.wsdl" depends="compile">
+        <java classname="userguide.mex.clients.DemoWSDLServiceDataLocator"
+              classpathref="axis.classpath" fork="true">
+            <jvmarg value="-Daxis2.repo=${mainDir}/repository"/>
+        </java>
+    </target>
+    
+  
+    <target name="run.datalocators.service" depends="compile">
+        <java classname="userguide.mex.datalocators.ServiceLevelDataLocator"
+              classpathref="axis.classpath" fork="true">
+            <jvmarg value="-Daxis2.repo=${mainDir}/repository"/>
+        </java>
+    </target>
+
+    <target name="run.datalocators.wsdl" depends="compile">
+        <java classname="userguide.mex.datalocators.WSDLDataLocator"
+              classpathref="axis.classpath" fork="true">
+            <jvmarg value="-Daxis2.repo=${mainDir}/repository"/>
+        </java>
+    </target>
+    
+    <target name="run.client">
+	<echo message="Please use the following ant targets to run the clients" />
+	<echo message="run.client.default" />
+	<echo message="run.client.service" />
+	<echo message="run.client.wsdl" />
+	<echo message="run.client.all  -  run all clients" />
+    </target>
+    <target name="clean">
+	<delete dir="build" />
+    </target>
+</project>
Index: axis2/etc/project.properties
===================================================================
--- axis2/etc/project.properties	(revision 503915)
+++ axis2/etc/project.properties	(working copy)
@@ -29,6 +29,7 @@
 rahas_module_version=SNAPSHOT
 soapmonitor_version=${axis2_version}
 savan_version=${axis2_version}
+mex_version=${axis2_version}
 
 # -------------------------------------------------------------------
 #                Dependency Repositories
@@ -66,6 +67,7 @@
 modules/jibx/project.xml,\
 modules/savan/project.xml,\
 modules/rahas/project.xml,\
+modules/mex/project.xml,\
 modules/secpolicy/project.xml,\
 modules/mtompolicy/project.xml,\
 ${optional.includes}
