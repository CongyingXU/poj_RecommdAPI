Index: modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler3.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler3.java	(revision 0)
+++ modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler3.java	(revision 529412)
@@ -0,0 +1,56 @@
+package org.apache.axis2.jaxws.sample.addnumbershandler;
+
+import org.apache.axis2.jaxws.handler.LogicalMessageContext;
+
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.ws.LogicalMessage;
+import javax.xml.ws.handler.MessageContext;
+
+import java.io.ByteArrayOutputStream;
+
+/*
+ * You can't actually specify whether a handler is for client or server,
+ * you just have to check in the handleMessage and/or handleFault to make
+ * sure what direction we're going.
+ */
+
+public class AddNumbersClientLogicalHandler3  implements javax.xml.ws.handler.LogicalHandler<LogicalMessageContext> {
+
+    public void close(MessageContext messagecontext) {
+        // TODO Auto-generated method stub        
+    }
+
+    public boolean handleFault(LogicalMessageContext messagecontext) {
+        // let's see if we can do this
+        LogicalMessage lm = messagecontext.getMessage();
+        String s = getStringFromSourcePayload(lm.getPayload());
+        return false;
+    }
+
+    public boolean handleMessage(LogicalMessageContext mc) {
+        return true;
+    }
+    
+    private static String getStringFromSourcePayload(Source payload) {
+        try {
+
+            TransformerFactory factory = TransformerFactory.newInstance();
+            Transformer trans = factory.newTransformer();
+
+            ByteArrayOutputStream baos = new ByteArrayOutputStream();
+            StreamResult result = new StreamResult(baos);
+
+            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+            trans.transform(payload, result);
+
+            return new String(baos.toByteArray());
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+    }
+}
Index: modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler4.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler4.java	(revision 0)
+++ modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler4.java	(revision 529412)
@@ -0,0 +1,27 @@
+package org.apache.axis2.jaxws.sample.addnumbershandler;
+
+import javax.xml.ws.handler.MessageContext;
+
+import org.apache.axis2.jaxws.handler.LogicalMessageContext;
+
+/*
+ * You can't actually specify whether a handler is for client or server,
+ * you just have to check in the handleMessage and/or handleFault to make
+ * sure what direction we're going.
+ */
+
+public class AddNumbersClientLogicalHandler4  implements javax.xml.ws.handler.LogicalHandler<LogicalMessageContext> {
+
+    public void close(MessageContext messagecontext) {
+        // TODO Auto-generated method stub        
+    }
+
+    public boolean handleFault(LogicalMessageContext messagecontext) {
+        return true;
+    }
+
+    public boolean handleMessage(LogicalMessageContext mc) {
+        return true;
+    }
+    
+}
Index: modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/META-INF/AddNumbersHandlers.xml
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/META-INF/AddNumbersHandlers.xml	(revision 529411)
+++ modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/META-INF/AddNumbersHandlers.xml	(revision 529412)
@@ -1,22 +1,26 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<jws:handler-chains xmlns:jws="http://java.sun.com/xml/ns/javaee">
-
-	<jws:handler-chain name="LoggingHandlerChain">
-		<protocol-bindings>##SOAP11_HTTP</protocol-bindings>
-		<jws:handler>
-			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersLogicalHandler</jws:handler-class>
-		</jws:handler>
-		<jws:handler>
-			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersProtocolHandler2</jws:handler-class>
-		</jws:handler>
-		<jws:handler>
-			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersLogicalHandler2</jws:handler-class>
-		</jws:handler>
-		<jws:handler>
-			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersProtocolHandler</jws:handler-class>
-		</jws:handler>
-	</jws:handler-chain>
-	
-</jws:handler-chains>
-
+<?xml version="1.0" encoding="UTF-8"?>
+
+<jws:handler-chains xmlns:jws="http://java.sun.com/xml/ns/javaee">
+
+	<jws:handler-chain name="LoggingHandlerChain">
+		<jws:protocol-bindings>##SOAP11_HTTP ##something blarg</jws:protocol-bindings>
+		<jws:port-name-pattern 
+              xmlns:ns1="http://addnumbershandler.sample.jaxws.axis2.apache.org/">ns1:AddNumbersHandlerP*</jws:port-name-pattern>
+        <jws:service-name-pattern 
+              xmlns:ns1="http://addnumbershandler.sample.jaxws.axis2.apache.org/">ns1:*</jws:service-name-pattern>
+		<jws:handler>
+			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersLogicalHandler</jws:handler-class>
+		</jws:handler>
+		<jws:handler>
+			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersProtocolHandler2</jws:handler-class>
+		</jws:handler>
+		<jws:handler>
+			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersLogicalHandler2</jws:handler-class>
+		</jws:handler>
+		<jws:handler>
+			<jws:handler-class>org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersProtocolHandler</jws:handler-class>
+		</jws:handler>
+	</jws:handler-chain>
+	
+</jws:handler-chains>
+
Index: modules/jaxws/test/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java	(revision 529411)
+++ modules/jaxws/test/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java	(revision 529412)
@@ -34,6 +34,8 @@
 
 import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersClientLogicalHandler;
 import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersClientLogicalHandler2;
+import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersClientLogicalHandler3;
+import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersClientLogicalHandler4;
 import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersClientProtocolHandler;
 import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersHandlerPortType;
 import org.apache.axis2.jaxws.sample.addnumbershandler.AddNumbersHandlerService;
@@ -43,8 +45,8 @@
 public class AddNumbersHandlerTests extends TestCase {
 	
     String axisEndpoint = "http://localhost:8080/axis2/services/AddNumbersHandlerService";
-    // TODO: disabled until handler support is more complete
-    public void _testAddNumbersHandler() {
+    
+    public void testAddNumbersHandler() {
 		try{
             TestLogger.logger.debug("----------------------------------");
             TestLogger.logger.debug("test: " + getName());
@@ -93,8 +95,7 @@
         TestLogger.logger.debug("----------------------------------");
     }
     
-    // TODO: disabled until handler support is more complete
-    public void _testAddNumbersClientHandler() {
+    public void testAddNumbersClientHandler() {
         try{
             TestLogger.logger.debug("----------------------------------");
             TestLogger.logger.debug("test: " + getName());
@@ -127,8 +128,7 @@
     /*
      * uses a custom HandlerResolver instead of the default
      */
-    // TODO: disabled until handler support is more complete
-    public void _testAddNumbersClientHandlerMyResolver() {
+    public void testAddNumbersClientHandlerMyResolver() {
         try{
             TestLogger.logger.debug("----------------------------------");
             TestLogger.logger.debug("test: " + getName());
@@ -210,7 +210,10 @@
             List<Handler> handlers = p.getBinding().getHandlerChain();
             if (handlers == null)
                 handlers = new ArrayList<Handler>();
+            handlers.add(new AddNumbersClientLogicalHandler4());
+            handlers.add(new AddNumbersClientLogicalHandler3());
             handlers.add(new AddNumbersClientLogicalHandler());
+            
             p.getBinding().setHandlerChain(handlers);
 
             int total = proxy.addNumbersHandler(99,10);
@@ -224,8 +227,7 @@
         }
     }
     
-    // TODO: disabled until handler support is more complete
-    public void _testAddNumbersClientHandlerAsync() {
+    public void testAddNumbersClientHandlerAsync() {
         try{
             TestLogger.logger.debug("----------------------------------");
             TestLogger.logger.debug("test: " + getName());
Index: modules/jaxws/test/org/apache/axis2/jaxws/handler/HandlerChainProcessorTests.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/handler/HandlerChainProcessorTests.java	(revision 529411)
+++ modules/jaxws/test/org/apache/axis2/jaxws/handler/HandlerChainProcessorTests.java	(revision 529412)
@@ -245,7 +245,12 @@
 		
 		processor.processChain(new MessageContext(), HandlerChainProcessor.Direction.IN, HandlerChainProcessor.MEP.RESPONSE, true);
 
-		assertEquals("S2m:S1m:L1m:L2m:L2c:L1c:S1c:S2c:", result);
+                /*
+                 * since this is client inbound response, the original outbound invocation
+                 * would have been L2m:L1m:S1m:S2m, so the closes would be S2c:S1c:L1c:L2c
+                 */
+                
+		assertEquals("S2m:S1m:L1m:L2m:S2c:S1c:L1c:L2c:", result);
 
 	}
 	
@@ -324,7 +329,12 @@
 		
 		processor.processChain(new MessageContext(), HandlerChainProcessor.Direction.OUT, HandlerChainProcessor.MEP.RESPONSE, true);
 
-		assertEquals("L2m:L1m:S1m:S2m:S2c:S1c:L1c:L2c:", result);
+                /*
+                 * since this is server outbound response, the original inbound invocation
+                 * would have been S2m:S1m:L1m:L2m, so the closes would be L2c:L1c:S1c:S2c
+                 */
+                
+		assertEquals("L2m:L1m:S1m:S2m:L2c:L1c:S1c:S2c:", result);
 	}
 	
 	/*
@@ -353,7 +363,13 @@
 		HandlerChainProcessor processor = new HandlerChainProcessor(handlers, Protocol.soap11);
 		
 		processor.processChain(new MessageContext(), HandlerChainProcessor.Direction.OUT, HandlerChainProcessor.MEP.RESPONSE, true);
-		assertEquals("L2m:L1m:S1m:S2m:S2c:S1c:L1c:L2c:", result);
+                
+                /*
+                 * since this is server outbound response, the original invocation
+                 * would have been S2m:S1m:L1m:L2m, so the closes would be L2c:L1c:S1c:S2c
+                 */
+                
+		assertEquals("L2m:L1m:S1m:S2m:L2c:L1c:S1c:S2c:", result);
 	}
 	
 	/*
Index: modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java	(revision 529411)
+++ modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java	(revision 529412)
@@ -55,10 +55,12 @@
         REQUEST, RESPONSE
     };
 
-	private javax.xml.ws.handler.MessageContext currentMC;
+    private javax.xml.ws.handler.MessageContext currentMC;
+
     private MessageContext mc;
-	private List<Handler> handlers = null;
 
+    private List<Handler> handlers = null;
+
     // track start/end of logical and protocol handlers in the list
     // The two scenarios are:  1) run logical handlers only, 2) run all handlers
     // logical start is always 0
@@ -70,7 +72,8 @@
     private final static int FAILED = 1;
     private final static int PROTOCOL_EXCEPTION = 2;
     private final static int OTHER_EXCEPTION = 3;
-    // save it if Handler.handleMessage throws one in HandlerChainProcessor.handleMessage
+    // save it if Handler.handleMessage throws one in
+    // HandlerChainProcessor.handleMessage
     private RuntimeException savedException;
     private Protocol proto; // need to save it incase we have to make a fault message
 
@@ -151,21 +154,23 @@
             return true;
         
         this.mc = mc;
-		sortChain();
+        sortChain();
         initContext(direction);
-		
-		if (direction == Direction.OUT) {  // 9.3.2 outbound
-            currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY, (direction == Direction.OUT));
-		    callGenericHandlers(mep, expectResponse, 0, handlers.size()-1, direction);
-		}
-		else { // IN case - 9.3.2 inbound
-            currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY, (direction == Direction.OUT));
-			callGenericHandlers(mep, expectResponse, handlers.size()-1, 0, direction);
-		}
 
-		// message context may have been changed to be response, and message converted
-		// according to the JAXWS spec 9.3.2.1 footnote 2        
-        if ((Boolean)(currentMC.get(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY)) != (direction == Direction.OUT))
+        if (direction == Direction.OUT) { // 9.3.2 outbound
+            currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY,
+                            (direction == Direction.OUT));
+            callGenericHandlers(mep, expectResponse, 0, handlers.size() - 1, direction);
+        } else { // IN case - 9.3.2 inbound
+            currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY,
+                            (direction == Direction.OUT));
+            callGenericHandlers(mep, expectResponse, handlers.size() - 1, 0, direction);
+        }
+
+        // message context may have been changed to be response, and message
+        // converted
+        // according to the JAXWS spec 9.3.2.1 footnote 2
+        if ((Boolean) (currentMC.get(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY)) != (direction == Direction.OUT))
             return false;
         return true;
 
@@ -240,12 +245,35 @@
                 throw savedException;
             }
         } else { // everything was successful OR finished processing handlers
-            callCloseHandlers(newStart_inclusive, newEnd, newDirection);
+            /*
+             * This is a little confusing. There are several cases we should be
+             * aware of. An incoming request with false expectResponse is
+             * equivalent to server inbound one-way, for example.
+             * 
+             * An outgoing response is server outbound, and is always marked
+             * with a false expectResponse. The problem, however, is that the
+             * direction for the call to closehandlers will be incorrect. In
+             * this case, the handlers should be closed in the opposite order of
+             * the ORIGINAL invocation.
+             */
+            if (mep.equals(MEP.REQUEST)) {
+                // a request that requires no response is a one-way message
+                // and we should only close whomever got invoked
+                callCloseHandlers(newStart_inclusive, newEnd, newDirection);
+            }
+            else {
+                // it's a response, so we can safely assume that 
+                // ALL the handlers were invoked on the request,
+                // so we need to close ALL of them
+                if (direction.equals(Direction.IN))
+                    callCloseHandlers(handlers.size() - 1, 0, direction);
+                else
+                    callCloseHandlers(0, handlers.size() - 1, direction);
+            }
         }
 
     }
 
-
     /*
       * callGenericHandlers_avoidRecursion should ONLY be called from one place.
       * TODO:  We cannot necessarily assume no false returns and no exceptions will be
@@ -279,21 +307,26 @@
     private int handleMessage(Handler handler, Direction direction,
                               boolean expectResponse) throws RuntimeException {
         try {
-			boolean success = handler.handleMessage(currentMC);
+            boolean success = handler.handleMessage(currentMC);
             if (success)
                 return SUCCESSFUL;
             else {
                 if (expectResponse)
-					currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY, (direction != Direction.OUT));
+                    currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY,
+                                    (direction != Direction.OUT));
                 return FAILED;
             }
         } catch (RuntimeException re) {  // RuntimeException and ProtocolException
             savedException = re;
             if (expectResponse)
                 // mark it as reverse direction
-				currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY, (direction != Direction.OUT));
+                currentMC.put(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY,
+                                (direction != Direction.OUT));
             if (ProtocolException.class.isAssignableFrom(re.getClass())) {
 				convertToFaultMessage(mc, re, proto);
+                // just re-initialize the current handler message context since
+                // that will pick up the now-changed message
+                reInitContext();
                 return PROTOCOL_EXCEPTION;
             }
             return OTHER_EXCEPTION;
@@ -308,9 +341,10 @@
       */
     private void callCloseHandlers(int start, int end,
                                    Direction direction) {
+        int i = start;
 
         if (direction == Direction.OUT) {
-            for (int i = start; i <= end; i++) {
+            for (; i <= end; i++) {
                 try {
                     switchContext(direction, i);
 					((Handler) handlers.get(i)).close(currentMC);
@@ -322,7 +356,7 @@
                 }
             }
         } else { // IN case
-            for (int i = start; i >= end; i--) {
+            for (; i >= end; i--) {
                 try {
                     switchContext(direction, i);
 					((Handler) handlers.get(i)).close(currentMC);
@@ -334,13 +368,10 @@
                 }
             }
         }
-	}
-    public void callHandlerCloseMethods(Direction direction) {
-        callCloseHandlers(0, handlers.size() - 1, direction);
     }
 
     /*
-      * callHandleFault is available for a server to use when the endpoint
+     * processFault is available for a server to use when the endpoint
       * throws an exception or a client when it gets a fault response message
       *
       * In both cases, all of the handlers have run successfully in the
@@ -451,6 +482,20 @@
 
 	}
     
+    /*
+     * utility method to re-initialize handlercontext so it picks up a changed 
+     * message under the org.apache.axis2.jaxws.core.MessageContext object
+     * 
+     * TODO: hopefully we can fix this so the message under the handler message context
+     * will grab it without us having to create new objects.
+     */
+    private void reInitContext() {
+        if (currentMC.getClass().isAssignableFrom(LogicalMessageContext.class))
+            currentMC = MessageContextFactory.createLogicalMessageContext(mc);
+        else
+            currentMC = MessageContextFactory.createSoapMessageContext(mc);
+    }
+
     private void initContext(Direction direction) {
         if (direction == Direction.OUT) {
             // logical context, then SOAP
Index: modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java	(revision 529411)
+++ modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java	(revision 529412)
@@ -36,6 +36,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import javax.xml.namespace.QName;
 import javax.xml.ws.WebServiceException;
 import javax.xml.ws.handler.Handler;
 import javax.xml.ws.handler.HandlerResolver;
@@ -324,14 +325,14 @@
     
     private static boolean chainResolvesToPort(HandlerChainType handlerChainType, PortInfo portinfo) {
         
-        boolean match = true;
-        
         List<String> protocolBindings = handlerChainType.getProtocolBindings();
         if (protocolBindings != null) {
+            boolean match = true;
             for (Iterator<String> it = protocolBindings.iterator() ; it.hasNext();) {
                 match = false;  // default to false in the protocol bindings until we find a match
                 String protocolBinding = it.next();
                 protocolBinding = protocolBinding.startsWith("##") ? protocolBindingsMap.get(protocolBinding) : protocolBinding;
+                // if the protocolBindingsMap returns null, it would mean someone has some nonsense ##binding
                 if ((protocolBinding != null) && (protocolBinding.equals(portinfo.getBindingID()))) {
                     match = true;
                     break;
@@ -342,11 +343,52 @@
                 return match;
             }
         }
+
+        /*
+         * need to figure out how to get the namespace declaration out of the port-name-pattern and service-name-pattern
+         */
         
-        // TODO should continue on and check portnamepattern and servicenamepattern
-        String portNamePattern = handlerChainType.getPortNamePattern();
+        if (!doesPatternMatch(portinfo.getPortName(), handlerChainType.getPortNamePattern())) {
+                // we've checked the port-name-pattern, and didn't find a match, no need to continue
+                return false;
+        }
         
-        return match;
+        if (!doesPatternMatch(portinfo.getServiceName(), handlerChainType.getServiceNamePattern())) {
+                // we've checked the service-name-pattern, and didn't find a match, no need to continue
+                return false;
+        }
+
+        return true;
     }
     
+    /*
+     * A comparison routing to check service-name-pattern and port-name-pattern.  These patterns may be of
+     * the form:
+     * 
+     * 1)  namespace:localpart
+     * 2)  namespace:localpart*
+     * 3)  namespace:*    (not sure about this one)
+     * 4)  *   (which is equivalent to not specifying a pattern, therefore always matching)
+     * 
+     * I've not seen any examples where the wildcard may be placed mid-string or on the namespace, such as:
+     * 
+     * namespace:local*part
+     * *:localpart
+     * 
+     */
+    private static boolean doesPatternMatch(QName portInfoQName, QName pattern) {
+        if (pattern == null)
+            return true;
+        String portInfoString = portInfoQName.toString();
+        String patternString = pattern.toString();
+        if (patternString.equals("*"))
+            return true;
+        if (patternString.contains("*")) {
+            patternString = patternString.substring(0, patternString.length() - 1);
+            return portInfoString.startsWith(patternString);
+        }
+        return portInfoString.equals(patternString);
+        
+    }
+    
 }
Index: modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerInvokerUtils.java
===================================================================
--- modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerInvokerUtils.java	(revision 529411)
+++ modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerInvokerUtils.java	(revision 529412)
@@ -75,11 +75,6 @@
         	HandlerChainProcessor.convertToFaultMessage(msgCtx, re, proto);
             return false;
         }
-
-        if (success && mep.equals(HandlerChainProcessor.MEP.RESPONSE)) {
-            // inbound response must be client, and we were successful, so close handlers
-            processor.callHandlerCloseMethods(HandlerChainProcessor.Direction.IN);
-        }
         
         if (!success && mep.equals(HandlerChainProcessor.MEP.REQUEST)) {
             // uh-oh.  We've changed directions on the server inbound handler processing,
@@ -131,11 +126,6 @@
             return false;
         }
 
-        if (success && mep.equals(HandlerChainProcessor.MEP.RESPONSE)) {
-            // outbound response must be server, and we were successful, so close handlers
-            processor.callHandlerCloseMethods(HandlerChainProcessor.Direction.OUT);
-        }
-
         if (!success && mep.equals(HandlerChainProcessor.MEP.REQUEST)) {
             // uh-oh.  We've changed directions on the client outbound handler processing,
             // This means we're now on an inbound flow, and the service will not
Index: modules/jaxws/pom.xml
===================================================================
--- modules/jaxws/pom.xml	(revision 529411)
+++ modules/jaxws/pom.xml	(revision 529412)
@@ -231,6 +231,12 @@
 									<classpath location="${compiled.classes.dir}"/>
 									<arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/AddNumbers.wsdl"/>
 								</java>
+    	<echo>Generating java from AddNumbersHandler.wsdl</echo>
+    	<java classname="com.sun.tools.xjc.Driver" fork="true"> 
+    	    <classpath refid="maven.runtime.classpath"/>
+    	    <classpath location="${compiled.classes.dir}"/>
+    	   	<arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/AddNumbersHandler.wsdl"/>
+    	</java>
 								<echo>Generating java from async_doclitwr.wsdl</echo>
 								<java classname="com.sun.tools.xjc.Driver" fork="true">
 									<classpath refid="maven.runtime.classpath"/>
@@ -626,6 +632,17 @@
 										<include name="org/apache/axis2/jaxws/server/**"/>
 									</fileset>
 								</copy>
+								<copy toDir="target/test-classes/services/AddNumbersHandlerService/">
+									<fileset dir="target/test-classes">
+									   <include name="org/apache/axis2/jaxws/sample/addnumbershandler/**"/>
+									</fileset>
+									<fileset dir="test/org/apache/axis2/jaxws/sample/addnumbershandler">
+									   <include name="META-INF/**"/>
+									</fileset>
+									<fileset dir="target/classes">
+									   <include name="org/apache/axis2/jaxws/server/**"/>
+									</fileset>
+								</copy>
 								<copy toDir="target/test-classes/services/GreeterService/">
 									<fileset dir="target/test-classes">
 										<include name="org/apache/axis2/jaxws/sample/dlwmin/**"/>
