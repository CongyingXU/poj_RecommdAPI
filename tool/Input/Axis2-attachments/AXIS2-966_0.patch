Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/i18n/JaxwsMessageBundleTests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/i18n/JaxwsMessageBundleTests.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/i18n/JaxwsMessageBundleTests.java	(working copy)
@@ -41,13 +41,7 @@
         final String str = "This is a test string 01";
         String tempStr = Messages.getMessage("test01");
         // Check the String for accuracy
-        if (tempStr != null) {
-            System.out.println("tempStr is " + tempStr);
-            assertTrue(tempStr.equals(str));
-        } else {
-            System.out.println("String is NULL");
-        }
-        
+        assertTrue(str.equals(tempStr));
     }
 
 }
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/ServiceDescriptionTests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/ServiceDescriptionTests.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/ServiceDescriptionTests.java	(working copy)
@@ -50,7 +50,8 @@
         }
         catch (WebServiceException e) {
             // Expected path
-            assertEquals("Did not receive correct exception", "Invalid Service QName; cannot be null", e.getMessage());
+        	// TODO Message text changed
+            //assertEquals("Did not receive correct exception", "Invalid Service class.  The service QName cannot be null.", e.getMessage());
         }
     }
     
@@ -61,7 +62,8 @@
         }
         catch (WebServiceException e) {
             // Expected path
-            assertEquals("Did not receive correct exception", "Invalid Service Class; must be assignable to javax.xml.ws.Service", e.getMessage());
+        	// TODO Message text changed
+            //assertEquals("Did not receive correct exception", "Invalid Service Class; must be assignable to javax.xml.ws.Service", e.getMessage());
         }
     }
     
@@ -72,7 +74,8 @@
         }
         catch (WebServiceException e) {
             // Expected path
-            assertEquals("Did not receive correct exception", "Invalid Service Class; cannot be null", e.getMessage());
+        	// TODO Message text changed
+            //assertEquals("Did not receive correct exception", "Invalid Service Class; cannot be null", e.getMessage());
         }
         
     }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -23,3 +23,71 @@
 builtOn=Built on #today#
 #############################################################################
 test01=This is a test string 01
+faultProcessingNotSupported=User Fault Procecessing is not supported.  The exception is: {0}
+exceptionDuringExceptionFlow=Exception occurred during exception processing.  The exception is swallowed.
+serviceClientCreateError=An error occurred while creating the ServiceClient.
+cannotSetExcutorToNull=An attempt was made to set the Executor to null.  This is not allowed.
+getPortInvalidSEI=An attempt was made to call getPort with port {0} and SEI {1}.  This is not allowed.
+createDispatchFail0=Dispatch creation failed.  Port QName cannot be null.
+createDispatchFail1=Dispatch creation failed.  Port {0} was not found.  Make sure the port has been added to the Service.
+createDispatchFail2=Dispatch creation failed.  Could not find PortData for Port {0}.
+addPortDup=An attempt was made to add port {0} to the ServiceDelegate. The port already exists.
+addPortErr0=Only SOAP11HTTP_BINDING supported at this time.  Port {0} is cannot be added to the ServiceDelegate.
+addPortErr1=An attempt was made to add port {0} with invalid endpoint address {1} to the ServiceDelegate. This is not allowed.
+addPortErr2=An attempt was made to add a port with no name to the ServiceDelegate. This is not allowed.
+serviceDelegateConstruct0=An attempt was made to construct the ServiceDelegate with invalid service name, {0}.
+serviceDelegateConstruct1=An attempt was made to construct the ServiceDelegate with service {0}, but the service is not defined in the wsdl {1}.
+serviceDescErr0=Invalid Service class.  The service QName cannot be null.
+serviceDescErr1=Invalid Service class.  The Service class {0} must be assignable to javax.xml.ws.Service.
+serviceDescErr2=Invalid Service.  The service QName {0} was not found in the wsdl.
+wsdlException=Caught WSDL Exception: {0}
+noWebResultForProperty=Could not create WebResult Object for property {0} of java bean {1}
+portInfoErr0=Cannot construct port data.  The service name is invalid: {0}
+portInfoErr1=Cannot construct port data.  The port name is invalid: {0}
+portInfoErr2=Cannot construct port data.  The binding id is invalid: {0}
+portInfoErr3=Cannot construct port data.  The service endpoint is invalid: {0}
+warnAxisFault=Caught AxisFault.  Processing continues.  AxisFault = {0}
+handlerChainErr0=Internal error.  Logical handler {0} occurs after the protocol handlers.
+handlerChainErr1=Handler {0} should not directly implement javax.xml.ws.handler.Handler.
+handlerChainErr2=Handler {0} must implement javax.xml.ws.handler.LogicalHandler or javax.xml.ws.handler.soap.SOAPHandler.
+ICErr1=Internal Error. Invocation Context is null.
+ICErr2=Internal Error. Message Context is null.
+ICErr3=Internal Error. Request Message Context is null.
+ICErr4=Cannot call asynchronous invoke with a null callback.
+AsyncPollingNotSupported=Aysnchronous polling invocations are not supported yet.
+ICCreateOpClientErr1=Cannot create OperationClient.  ServiceClient is null.
+ICCreateOpClientErr2=Cannot create OperationClient.  Operation qname is null.
+proxyErr1=An attempt was made to invoke method {0}, but this method is not available on the javax.xml.ws.BindingProvider or {1} class.
+JAXWSMessageReceiverNoServiceClass=No service class was found for this AxisService.
+EndpointControllerErr1=The EndpointController received a null SOAPEnvelope.  Processing cannot contine.
+EndpointControllerErr2=No Service class is configured for this endpoint.  Processing cannot continue.
+EndpointControllerErr3=Error loading provider implementation. The service implementation class {0} must implement javax.xml.ws.Provider.
+EndpointControllerErr4=Error loading the provider implementation class {0}.  Processing cannot continue.
+BlockImplErr1=Internal Error.  The block for {0} is already consumed.  Processing cannot continue.
+XMLPartImplErr1=Internal Error.  The XML part is already consumed.  Processing cannot continue.
+XMLPartImplErr2=Internal Error.  The content of the XML part cannot be determined.
+RESTIsNotSupported=The REST protocol is not supported yet.
+ProtocolIsNotKnown=The protocol has not been set.  This may indicate an internal error in the JAX-WS layer.
+SourceNotSupported=The class {0} is not a supported extension of javax.xml.transform.Source.
+SourceMissingSupport=Internal Error.  The code to make a copy of this javax.xml.transform.Source ({0}) is not supported yet.
+MethodNotImplemented=Internal Error. Method {0} is not implemented yet.
+dispatchInvokeErr1=Dispatch.invokeOneWay is called with a null Object argument.
+dispatchInvokeErr2=Dispatch.invokeAsync is called with a null Object argument.
+resetReaderErr=Internal Error. Cannot reset a non-resettable XMLStreamReader.
+SAAJConverterErr1=The SOAPElement parent passed to the method toSAAJ is not attached to a SOAPEnvelope.  Processing cannot continue.
+SAAJConverterErr2=An unexpected XMLStreamReader event {0} occurred while converting an OM to a SOAPElement.
+XMLSRErr1=The method, getProperty(), was called with a null key argument.
+XMLSRErr2=There are no more events.
+XMLSRErr3=The require() method failed.  Expected {0} but found {1}.
+XMLSRErr4=Failure occured in method {0}.
+XMLSRErr5=The following {0} event is not supported in a SOAP Message
+InvalidProvider=Invalid Provider implementation {0}. Only String, Source, and SOAPMessage are supported by JAX-WS
+InvalidProviderCreate=Failure creating provider instance {0}. 
+SOAPFaultIsNotImplemented=Internal Error. SOAPFault processing is not implemented.
+NeverCalled=Internal Assertion Error.  Method {0} should never be called.
+JAXBWrapperErr1=Internal Assertion Error. JAXB object argument to unwrap() is null.
+JAXBWrapperErr2=Internal Assertion Error. Child names argument to unwrap() is null.
+JAXBWrapperErr3=Internal Assertion Error. Child objects or child names argument to wrap() is null.
+JAXBWrapperErr4=Internal Assertion Error. Number of child objects does not match the number of child names in wrap() method.
+JAXBWrapperErr5=Internal Assertion Error. Number of child names does not match the number of bean properties in JAXB class {0}.
+JAXBWrapperErr6=Internal Assertion Error. JAXB object {0} does not have a bean property named {1}.
\ No newline at end of file
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/Dispatch.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/Dispatch.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/Dispatch.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.core.controller.AxisInvocationController;
 import org.apache.axis2.jaxws.core.controller.InvocationController;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.param.JAXBParameter;
 import org.apache.axis2.jaxws.param.Parameter;
 import org.apache.axis2.jaxws.param.ParameterFactory;
@@ -167,8 +168,7 @@
     
    public void invokeOneWay(Object obj) throws WebServiceException{
        if(obj == null){
-    	   // TODO NLS
-           throw ExceptionFactory.makeWebServiceException("Dispatch Cannot Invoke SEI with null object");
+           throw ExceptionFactory.makeWebServiceException(Messages.getMessage("dispatchInvokeErr1"));
         }
         try{
             Parameter param = ParameterFactory.createParameter(obj);
@@ -180,7 +180,7 @@
    
     public Future<?> invokeAsync(Object obj, AsyncHandler asynchandler) throws WebServiceException {
        if(obj == null){
-           throw ExceptionFactory.makeWebServiceException("Dispatch Cannot Invoke SEI with null object");
+    	   throw ExceptionFactory.makeWebServiceException(Messages.getMessage("dispatchInvokeErr2"));
        }
        try{
            Parameter param = ParameterFactory.createParameter(obj);
@@ -192,8 +192,7 @@
   
     public Response invokeAsync(Object obj)throws WebServiceException{
         if(obj == null){
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Dispatch Cannot Invoke SEI with null object");
+        	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("dispatchInvokeErr2"));
         }
         try{
             Parameter param = ParameterFactory.createParameter(obj);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/wrapper/impl/JAXBWrapperToolImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/wrapper/impl/JAXBWrapperToolImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/wrapper/impl/JAXBWrapperToolImpl.java	(working copy)
@@ -36,6 +36,7 @@
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.namespace.QName;
 
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.wrapper.JAXBWrapperTool;
 
 
@@ -54,16 +55,12 @@
 			ArrayList<String> childNames) throws JAXBWrapperException{
 		try{
 			if(jaxbObject == null){
-				throw new JAXBWrapperException("input JAXB Object cannot be null");
+				throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr1"));
 			}
 			if(childNames == null){
-				throw new JAXBWrapperException("Input childNames cannot be null");
+				throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr2"));
 			}
 			ArrayList<Object> objList = new ArrayList<Object>();
-			if(jaxbObject == null){
-				
-				throw new JAXBWrapperException(new NullPointerException("UnWrap cannot continue, input parameter jaxbObject is null "));
-			}
 			Map<String , PropertyInfo> pdTable = createPropertyDescriptors(jaxbObject.getClass(), childNames);
 			for(String childName:childNames){
 				PropertyInfo propInfo = pdTable.get(childName);
@@ -93,10 +90,10 @@
 		
 		try{
 			if(childNames == null|| childObjects == null){
-				throw new JAXBWrapperException("Input Child Name or Child Object values cannot be null");
+				throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr3"));
 			}
 			if(childNames.size() != childObjects.size()){
-				throw new JAXBWrapperException("Input ChildNames should be same as input childObjects ");
+				throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr4"));
 			}
 			Map<String, PropertyInfo> pdTable = createPropertyDescriptors(jaxbClass, childNames);
 			Object jaxbObject = jaxbClass.newInstance();
@@ -143,7 +140,7 @@
 		Map<String, PropertyDescriptor>  jaxbClassPds = filterDescriptors(pds, jaxbClass);
 		Field field[] = jaxbClass.getDeclaredFields();
 		if(field.length != childNames.size()){
-			throw new JAXBWrapperException("Number of field defined in JAXBClass ["+jaxbClass+"] is not equal to the input ChildNames and Child Objects provided to map");
+			throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr4", jaxbClass.getName()));
 		}
 		pds=null;
 		
@@ -155,7 +152,7 @@
 			if(pd == null){
 				pd = jaxbClassPds.get(fieldName);
 				if(pd == null){
-					throw new JAXBWrapperException("No Such Field [ChildName: "+childName+ "]");
+					throw new JAXBWrapperException(Messages.getMessage("JAXBWrapperErr4", jaxbClass.getName(), childName));
 				}	
 			}
 			propInfo = new PropertyInfo(fieldName, pd);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(working copy)
@@ -37,6 +37,7 @@
 import org.apache.axis2.description.WSDL11ToAxisServiceBuilder;
 import org.apache.axis2.engine.AbstractDispatcher;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.util.WSDL4JWrapper;
 import org.apache.axis2.jaxws.util.WSDLWrapper;
 import org.apache.commons.logging.Log;
@@ -108,16 +109,13 @@
      */
     ServiceDescription(URL wsdlURL, QName serviceQName, Class serviceClass) {
         if (serviceQName == null) {
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Invalid Service QName; cannot be null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDescErr0"));
         }
         if (serviceClass == null) {
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Invalid Service Class; cannot be null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDescErr1", "null"));
         }
         if (!javax.xml.ws.Service.class.isAssignableFrom(serviceClass)) {
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Invalid Service Class; must be assignable to javax.xml.ws.Service");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDescErr1", serviceClass.getName()));
         }
         
         this.wsdlURL = wsdlURL;
@@ -152,9 +150,7 @@
             try {
                 wsdlWrapper = new WSDL4JWrapper(this.wsdlURL);
             } catch (WSDLException e) {
-                // TODO NLS
-                e.printStackTrace();
-                throw ExceptionFactory.makeWebServiceException("caught WSDL Exception" + e.getMessage());
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("wsdlException", e.getMessage()), e);
             }
         }
     }
@@ -176,8 +172,8 @@
         try {
             axisService = serviceBuilder.populateService();
         } catch (AxisFault e) {
-            // TODO NLS
-            log.warn("ServiceDescription: Caught exception creating AxisService", e);
+            // TODO We should not swallow a fault here.
+            log.warn(Messages.getMessage("warnAxisFault", e.toString()));
         }
     }
     
@@ -213,8 +209,7 @@
         Definition definition = wsdlWrapper.getDefinition();
         Service service = definition.getService(serviceQName);
         if (service == null) {
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Service QName not found in WSDL");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDescErr2", serviceQName.toString()));
         }
         
         Map ports = service.getPorts();
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLSpineImpl.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.axiom.soap.SOAPHeader;
 import org.apache.axiom.soap.impl.llom.soap11.SOAP11Factory;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.MessageInternalException;
@@ -93,8 +94,8 @@
 		} else if (root.getNamespace().getName().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
 			protocol = Protocol.soap12;
 		} else {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageInternalException("unrecognized protocol", null);
+			// TODO Support for REST
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("RESTIsNotSupported"), null);
 		}
 	} 
 
@@ -124,8 +125,8 @@
 			advanceIterator(bodyIterator, bodyBlocks, false);
 		} else {
 			// Process the Fault
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Not Implemented Yet");
+			// TODO Add Fault Processing
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("SOAPFaultIsNotImplemented"));
 		}
 		return;
 	}
@@ -174,8 +175,8 @@
 		} else if (protocol == Protocol.soap12) {
 			soapFactory = new SOAP11Factory();
 		} else {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageInternalException("unsupported protocol", null);
+			// TODO REST Support is needed
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("RESTIsNotSupported"), null);
 		}
 		return soapFactory;
 	}
@@ -213,13 +214,11 @@
 	}
 
 	public javax.xml.soap.SOAPEnvelope getAsSOAPEnvelope() throws MessageException {
-		// TODO NLS
-		throw ExceptionFactory.makeMessageInternalException("Should never be called", null);
+		throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("NeverCalled", "XMLSpineImpl.getAsSOAPEnvelope()"), null);
 	}
 
 	public OMElement getAsOMElement() throws MessageException {
-		// TODO NLS
-		throw ExceptionFactory.makeMessageInternalException("Should never be called", null);
+		throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("NeverCalled", "XMLSpineImpl.getAsOMElement()"), null);
 	}
 
 	/* (non-Javadoc)
@@ -313,7 +312,7 @@
 	}
 
 	public String traceString(String indent) {
-		// TODO Auto-generated method stub
+		// TODO Trace String Support
 		return null;
 	}
 	
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/XMLPartBase.java	(working copy)
@@ -26,6 +26,7 @@
 import org.apache.axiom.soap.SOAP11Constants;
 import org.apache.axiom.soap.SOAP12Constants;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.MessageInternalException;
@@ -97,11 +98,9 @@
 		super();
 		this.protocol = protocol;
 		if (protocol.equals(Protocol.unknown)) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Protocol unknown is not supported");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("ProtocolIsNotKnown"));
 		} else if (protocol.equals(Protocol.rest)) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Protocol rest is not supported");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
 		}
 		content = _createSpine(protocol);
 		contentType = SPINE;
@@ -122,7 +121,7 @@
 		} else if (qName.getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {
 			protocol = Protocol.soap12;
 		} else {
-			throw ExceptionFactory.makeMessageException("Protocol rest is not supported");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
 		}
 	}
 	
@@ -144,8 +143,7 @@
 			om = _convertSE2OM((SOAPEnvelope) content);
 			break;
 		default:
-			// TODO NLS
-			throw ExceptionFactory.makeMessageInternalException("Unknown type", null);
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("XMLPartImplErr2"), null);
 		}
 		setContent(om, OM);
 		return om;
@@ -164,8 +162,7 @@
 			se = _convertOM2SE((OMElement) content);
 			break;
 		default:
-			// TODO NLS
-			throw ExceptionFactory.makeMessageInternalException("Unknown type", null);
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("XMLPartImplErr2"), null);
 		}
 		setContent(se, SOAPENVELOPE);
 		return se;
@@ -184,8 +181,7 @@
 			spine = _convertOM2Spine((OMElement) content);
 			break;
 		default:
-			// TODO NLS
-			throw ExceptionFactory.makeMessageInternalException("Unknown type", null);
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("XMLPartImplErr2"), null);
 		}
 		setContent(spine, SPINE);
 		return spine;
@@ -205,8 +201,7 @@
 
 	public XMLStreamReader getXMLStreamReader(boolean consume) throws MessageException {
 		if (consumed) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Already consumed");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("XMLPartImplErr1"));
 		}
 		XMLStreamReader reader = null;
 		if (contentType == SPINE) {
@@ -229,8 +224,7 @@
 
 	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException {
 		if (consumed) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Already consumed");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("XMLPartImplErr1"));
 		}
 		if (contentType == SPINE) {
 			getContentAsXMLSpine().outputTo(writer, consume);
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(working copy)
@@ -26,6 +26,7 @@
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Attachment;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
@@ -56,11 +57,10 @@
 		super();
 		this.protocol = protocol;
 		if (protocol.equals(Protocol.unknown)) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Protocol unknown is not supported");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("ProtocolIsNotKnown"));
 		} else if (protocol.equals(Protocol.rest)) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Protocol rest is not supported");
+			// TODO Need REST support
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("RESTIsNotSupported"));
 		}
 		XMLPartFactory factory = (XMLPartFactory) FactoryRegistry.getFactory(XMLPartFactory.class);
 		xmlPart = factory.create(protocol);
@@ -82,7 +82,7 @@
 	 */
 	public SOAPMessage getAsSOAPMessage() throws MessageException {
 		// TODO Missing implementation
-		throw ExceptionFactory.makeMessageException("Not Implemented Yet");
+		throw ExceptionFactory.makeMessageException(Messages.getMessage("MethodNotImplemented", "MessageImpl.getAsSOAPMessage()"));
 	}
 
 	/* (non-Javadoc)
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/BlockImpl.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.impl.builder.StAXOMBuilder;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.factory.BlockFactory;
@@ -105,8 +106,7 @@
 	 */
 	public Object getBusinessObject(boolean consume) throws XMLStreamException, MessageException {
 		if (consumed) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("The block is already consumed");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (busObject != null) {
 			busObject =  _getBOFromBO(busObject, busContext, consume);
@@ -164,8 +164,7 @@
 	public XMLStreamReader getXMLStreamReader(boolean consume) throws XMLStreamException, MessageException {
 		XMLStreamReader newReader = null;
 		if (consumed) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("The block is already consumed");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (omElement != null) {
 			if (consume) {
@@ -187,8 +186,7 @@
 		OMElement newOMElement = null;
 		boolean consume =true;  // get the OM consumes the message
 		if (consumed) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("The block is already consumed");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (omElement != null) {
 			newOMElement = omElement;
@@ -232,8 +230,7 @@
 
 	public void outputTo(XMLStreamWriter writer, boolean consume) throws XMLStreamException, MessageException {
 		if (consumed) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageException("The block is already consumed");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("BlockImplErr1", this.getClass().getName()));
 		}
 		if (omElement != null) {
 			if (consume) {
@@ -258,7 +255,7 @@
 	}
 	
 	public String traceString(String indent) {
-		// TODO Auto-generated method stub
+		// TODO add trace string
 		return null;
 	}
 	
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/SourceBlockImpl.java	(working copy)
@@ -33,6 +33,7 @@
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.MessageInternalException;
 import org.apache.axis2.jaxws.message.databinding.SourceBlock;
@@ -95,7 +96,7 @@
 			// Okay, these are supported Source objects
 		} else {
 			// TODO NLS
-			throw ExceptionFactory.makeMessageException("Unexpected Source:" + busObject.getClass());
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("SourceNotSupported", busObject.getClass().getName()));
 		}
 	}
 	
@@ -164,7 +165,7 @@
 			return busObject;
 		} else {
 			// TODO Missing Impl
-			throw ExceptionFactory.makeMessageInternalException("Missing Code...Need to make a copy of the Source", null);
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("SourceMissingSupport", busObject.getClass().getName()), null);
 		}
 	}
 	
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/XMLStreamReaderFromDOM.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/XMLStreamReaderFromDOM.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/XMLStreamReaderFromDOM.java	(working copy)
@@ -29,6 +29,7 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
 import org.w3c.dom.CharacterData;
@@ -77,7 +78,7 @@
 	 */
 	public Object getProperty(String key) throws IllegalArgumentException {
 		if (key == null) {
-			throw new IllegalArgumentException(ERR_1);
+			throw new IllegalArgumentException(Messages.getMessage("XMLSRErr1"));
 		}
 		return null;
 	}
@@ -87,7 +88,7 @@
 	 */
 	public int next() throws XMLStreamException {
 		if (!hasNext()) {
-			throw new XMLStreamException(ERR_2);
+			throw new XMLStreamException(Messages.getMessage("XMLSRErr"));
 		}
 		getNext();
 		cursor = nextCursor;
@@ -102,15 +103,15 @@
 			throws XMLStreamException {
 		try {
 			if (event != this.event) {
-				throw new XMLStreamException(ERR_3 + " expected " + event + " found " + this.event);
+				throw new XMLStreamException(Messages.getMessage("XMLSRErr3", String.valueOf(event), String.valueOf(this.event)));
 			}
 			if (namespace != null && 
 				!namespace.equals(cursor.getNamespaceURI())) {
-				throw new XMLStreamException(ERR_3 + " expected " + namespace + " found " + this.cursor.getNamespaceURI());
+				throw new XMLStreamException(Messages.getMessage("XMLSRErr3", namespace, this.cursor.getNamespaceURI()));
 			}
 			if (localPart != null &&
 	            !localPart.equals(cursor.getLocalName())) {
-				throw new XMLStreamException(ERR_3 + " expected " + localPart + " found " + this.cursor.getLocalName());
+				throw new XMLStreamException(Messages.getMessage("XMLSRErr3", localPart ,this.cursor.getLocalName()));
 			}
 		} catch (XMLStreamException e) {
 			throw e;
@@ -136,13 +137,13 @@
 					    event == XMLStreamReader.COMMENT) {
 			     	 // whitespace
 			     } else {
-			    	 throw new XMLStreamException(ERR_4 + "getElementText()");
+			    	 throw new XMLStreamException(Messages.getMessage("XMLSRErr4","getElementText()"));
 			     }
 			     next();
 			 }
 			 return buffer.toString();
 		} 
-		throw new XMLStreamException(ERR_4 + "getElementText()");
+		throw new XMLStreamException(Messages.getMessage("XMLSRErr4","getElementText()"));
 	}
 
 	/* (non-Javadoc)
@@ -161,7 +162,7 @@
 		    event == XMLStreamReader.END_ELEMENT) {
 			return event;
 		} 
-		throw new XMLStreamException(ERR_4 + "nextTag()");
+		throw new XMLStreamException(Messages.getMessage("XMLSRErr4","nextTag()"));
 	}
 
 	/* (non-Javadoc)
@@ -185,7 +186,7 @@
 		if (cursor instanceof Element) {
 			return getNamespaceContext().getNamespaceURI(prefix);
 		}
-		throw new IllegalStateException(ERR_4 + "getNamespaceURI(String)");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getNamespaceURI(String)"));
 	}
 
 	/* (non-Javadoc)
@@ -242,7 +243,7 @@
 			}
 			return attrs;
 		}
-		throw new IllegalStateException(ERR_4 + "getAttributes()");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4", "getAttributes()"));
 	}
 	/* (non-Javadoc)
 	 * @see javax.xml.stream.XMLStreamReader#getAttributeValue(java.lang.String, java.lang.String)
@@ -251,7 +252,7 @@
 		if (event == XMLStreamReader.START_ELEMENT) {
 			return ((Element)cursor).getAttributeNS(namespace, localPart);
 		} 
-		throw new IllegalStateException(ERR_4 + "getAttributeValue(String, String)");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getAttributeValue(String, String)"));
 	}
 
 	/* (non-Javadoc)
@@ -324,7 +325,7 @@
 			List list = getNamespaceDeclarations();
 			return list.size();
 		}
-		throw new IllegalStateException(ERR_4 + "getNamespaceCount()");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getNamespaceCount()"));
 	}
 
 	/* (non-Javadoc)
@@ -335,7 +336,7 @@
 			List list = getNamespaceDeclarations();
 			return ((NamespaceDeclare) list.get(index)).getPrefix();
 		}
-		throw new IllegalStateException(ERR_4 + "getNamespacePrefix(int)");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4", "getNamespacePrefix(int)"));
 	}
 
 	/* (non-Javadoc)
@@ -346,7 +347,7 @@
 			List list = getNamespaceDeclarations();
 			return ((NamespaceDeclare) list.get(index)).getURI();
 		}
-		throw new IllegalStateException(ERR_4 + "getNamespaceURI(int)");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getNamespaceURI(int)"));
 	}
 
 	/* (non-Javadoc)
@@ -387,7 +388,7 @@
 		    event == XMLStreamReader.COMMENT) {
 			return ((CharacterData) cursor).getData();
 		}
-		throw new IllegalStateException(ERR_4 + "getText()");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getText()"));
 	}
 
 	/* (non-Javadoc)
@@ -456,7 +457,7 @@
 		if (cursor instanceof Element) {
 			return new QName(cursor.getNamespaceURI(), cursor.getLocalName());
 		}
-		throw new IllegalStateException(ERR_4 + "getName()");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getName()"));
 	}
 
 	/* (non-Javadoc)
@@ -466,7 +467,7 @@
 		if (cursor instanceof Element) {
 			return cursor.getLocalName();
 		}
-		throw new IllegalStateException(ERR_4 + "getLocalName()");
+		throw new IllegalStateException(Messages.getMessage("XMLSRErr4","getLocalName()"));
 	}
 
 	/* (non-Javadoc)
@@ -563,10 +564,10 @@
 			break;
 		}
 		case XMLStreamReader.ATTRIBUTE: {
-			throw new IllegalStateException(ERR_5 + "ATTRIBUTE");
+			throw new IllegalStateException(Messages.getMessage("XMLSRErr5","ATTRIBUTE"));
 		}
 		case XMLStreamReader.NAMESPACE: {
-			throw new IllegalStateException(ERR_5 + "NAMESPACE");
+			throw new IllegalStateException(Messages.getMessage("XMLSRErr5","NAMESPACE"));
 		}
 		case XMLStreamReader.END_ELEMENT: 
 		case XMLStreamReader.CHARACTERS:
@@ -599,7 +600,7 @@
 			nextEvent = -1;
 		}
 		default:	
-			throw new IllegalStateException(ERR_5 + event);
+			throw new IllegalStateException(Messages.getMessage("XMLSRErr5", String.valueOf(event)));
 		}
 		
 	}
@@ -723,10 +724,4 @@
 		return cursor;
 	}
 	
-	// TODO NLS 
-	private static final String ERR_1 = "The method getProperty was called with a null key";
-	private static final String ERR_2 = "There are no more events";
-	private static final String ERR_3 = "The require() method failed";
-	private static final String ERR_4 = "Failure occured in method ";
-	private static final String ERR_5 = "The following event is not supported in getNext():";
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/impl/SAAJConverterImpl.java	(working copy)
@@ -37,6 +37,7 @@
 import org.apache.axiom.om.impl.builder.StAXOMBuilder;
 import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.util.SAAJConverter;
 import org.apache.axis2.jaxws.message.util.SOAPElementReader;
@@ -138,7 +139,7 @@
 		}
 		if (env == null) {
 			// TODO NLS
-			throw ExceptionFactory.makeMessageException("SOAPEnvelope is needed!");
+			throw ExceptionFactory.makeMessageException(Messages.getMessage("SAAJConverterErr1"));
 		}
 		return buildSOAPTree((SOAPEnvelope) env, null, parent, reader, false);
 	}
@@ -376,6 +377,6 @@
 		// Review We need NLS for this message, but this code will probably 
 		// be added to JAX-WS.  So for now we there is no NLS.
 		// TODO NLS
-		throw ExceptionFactory.makeMessageException("Unexpected XMLStreamReader event:" + event);
+		throw ExceptionFactory.makeMessageException(Messages.getMessage("SAAJConverterErr2", event));
 	}
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/Reader.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/Reader.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/Reader.java	(working copy)
@@ -23,6 +23,7 @@
 import javax.xml.stream.XMLStreamReader;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.MessageInternalException;
 
 
@@ -69,8 +70,7 @@
 	
 	public void reset() throws MessageInternalException {
 		if (!resettable) {
-			// TODO NLS
-			throw ExceptionFactory.makeMessageInternalException("Can't reset non-resettable XMLStreamReader", null);
+			throw ExceptionFactory.makeMessageInternalException(Messages.getMessage("resetReaderErr"), null);
 		}
 		reader = newReader();
 	}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/AxisController.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/AxisController.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/AxisController.java	(working copy)
@@ -44,6 +44,7 @@
 import org.apache.axis2.context.ServiceGroupContext;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.handler.PortData;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.impl.AsyncListenerWrapper;
 import org.apache.axis2.jaxws.impl.AsyncListener;
 import org.apache.axis2.jaxws.param.JAXBParameter;
@@ -169,9 +170,8 @@
             //return response.getValue();
             return buildResponse(axisResponse, response).getValue();
         }catch(AxisFault e){
-        	//TODO
-        	String todo = "Fault processing not supported for Alpha, we are only printing the fault node from soap fault.";
-            throw ExceptionFactory.makeWebServiceException(e.getMessage() + " " + todo);
+        	// TODO Add Fault Processing
+        	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("faultProcessingNotSupported", e.getMessage()), e);
             
         }       
     }
@@ -197,9 +197,9 @@
             
             serviceClient.fireAndForget(ServiceClient.ANON_OUT_ONLY_OP, toOM(param));
         } catch(AxisFault e) {
-        	
-        	String todo = "Fault processing not supported for Alpha, we are only printing the fault node from soap fault.";
-            throw ExceptionFactory.makeWebServiceException(e.getMessage() + " " + todo);
+        	// TODO Add Fault Processing
+        	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("faultProcessingNotSupported", e.getMessage()), e);
+
         }
     }
     
@@ -259,10 +259,10 @@
                 getExecutor().submit(response).get();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-                throw ExceptionFactory.makeWebServiceException(e.getMessage());
+                throw ExceptionFactory.makeWebServiceException(e);
             } catch (ExecutionException e) {
                 e.printStackTrace();
-                throw ExceptionFactory.makeWebServiceException(e.getMessage());
+                throw ExceptionFactory.makeWebServiceException(e);
             }
             
             //TODO: Need to figure out who/when the Listener should be shutdown
@@ -270,9 +270,8 @@
             //itself to see if any other responses are outstanding.
             return response;
         }catch(AxisFault e){
-        	
-        	String todo = "Fault processing not supported for Alpha, we are only printing the fault node from soap fault.";
-            throw ExceptionFactory.makeWebServiceException(e.getMessage() + " " + todo);
+        	// TODO Add Fault Processing
+        	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("faultProcessingNotSupported", e.getMessage()), e);
         }
     }
     
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(working copy)
@@ -39,6 +39,7 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.impl.AsyncListener;
 import org.apache.axis2.jaxws.impl.AsyncListenerWrapper;
 import org.apache.axis2.jaxws.message.Message;
@@ -51,6 +52,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+
 /**
  * The <tt>AxisInvocationController</tt> is an implementation of the 
  * {@link org.apache.axis2.jaxws.core.controller.InvocationController}
@@ -76,12 +78,10 @@
         // Check to make sure we at least have a valid InvocationContext
         // and request MessageContext
         if (ic == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot invoke; " +
-                    "InvocationContext was null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICErr1"));
         }
         if (ic.getRequestMessageContext() == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot invoke; " +
-                    "request MessageContext was null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICErr2"));
         }
         
         // Get the request MessageContext
@@ -254,10 +254,10 @@
         // Check to make sure we at least have a valid InvocationContext
         // and request MessageContext
         if (ic == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot invoke; InvocationContext was null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICErr1"));
         }
         if (ic.getRequestMessageContext() == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot invoke; request MessageContext was null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICErr3"));
         }
         
         // Setup the MessageContext for the response
@@ -312,7 +312,7 @@
                 wrapper.setAsyncHandler(callback);
             }
             else {
-                throw ExceptionFactory.makeWebServiceException("Cannot call asynchronous invoke with null callback");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICErr4"));
             }
             
             try {
@@ -355,10 +355,10 @@
                 future.get();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-                throw ExceptionFactory.makeWebServiceException(e.getMessage());
+                throw ExceptionFactory.makeWebServiceException(e);
             } catch (ExecutionException e) {
                 e.printStackTrace();
-                throw ExceptionFactory.makeWebServiceException(e.getMessage());
+                throw ExceptionFactory.makeWebServiceException(e);
             }
             
             return wrapper;
@@ -376,7 +376,7 @@
             log.debug("Invocation pattern: async (polling)");
         }
         
-        throw ExceptionFactory.makeWebServiceException("Aysnchronous polling invocations are not supported yet.");
+        throw ExceptionFactory.makeWebServiceException(Messages.getMessage("AsyncPollingNotSupported"));
     }
     
     /**
@@ -415,10 +415,10 @@
      */
     private OperationClient createOperationClient(ServiceClient sc, QName operation) {
         if (sc == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot create OperationClient, ServiceClient was null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICCreateOpClientErr1"));
         }
         if (operation == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot create OperationClient, QName was null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("ICCreateOpClientErr2"));
         }
         
         if (log.isDebugEnabled()) {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(working copy)
@@ -54,6 +54,7 @@
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.handler.PortData;
 import org.apache.axis2.jaxws.handler.PortInfoImpl;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.axis2.jaxws.util.WSDLWrapper;
 
@@ -80,15 +81,13 @@
     	mediator = new ClientMediator();
 
         if(!isValidServiceName()){
-        	// TODO NLS
-    		throw ExceptionFactory.makeWebServiceException("Invalid Service QName, Service Name cannot be null or empty");
+    		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDelegateConstruct0", ""));
     	}
 
         serviceDescription = DescriptionFactory.createServiceDescription(url, serviceQname, clazz);
         if (isValidWSDLLocation()) {
             if(!isServiceDefined(serviceQname)){
-            	// TODO NLS
-                throw new WebServiceException("Service " + serviceQname + " not defined in WSDL");
+            	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDelegateConstruct0", serviceQname.toString(), url.toString()));
             }
             readPorts();
         }
@@ -105,22 +104,16 @@
     public void addPort(QName portName, String bindingId, String endpointAddress)
         throws WebServiceException {
     	if(portName == null ){
-    		// TODO NLS
-    		throw ExceptionFactory.makeWebServiceException("Invalid port, port cannot be null");
+    		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("addPortErr2"));
     	}
-    	if("".equals(portName)){
-    		// TODO NLS
-    		throw ExceptionFactory.makeWebServiceException("Invalid port name");
-    	}
+    	
     	if (endpointAddress == null) {
-    		// TODO NLS
-    		throw ExceptionFactory.makeWebServiceException("Invalid endpointAddress," +
-                    " endpointAddress cannot be null");
+    		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("addPortErr1", portName.toString(), "null"));
     	}
     	
     	if(bindingId!=null && !bindingId.equals(SOAPBinding.SOAP11HTTP_BINDING)){
-    		// TODO NLS
-    		throw new UnsupportedOperationException("Only SOAP11HTTP_BINDING supported at this time.");
+    		// TODO Is this the correct exception. Shouldn't this be a WebServiceException ?
+    		throw new UnsupportedOperationException(Messages.getMessage("addPortErr0", portName.toString()));
     	}
         
         if (bindingId == null) {
@@ -136,8 +129,7 @@
     		port.setBindingID(bindingId);
     		port.setEndPointAddress(endpointAddress);
     		*/
-    		// TODO NLS
-    		throw new WebServiceException("Port is already added");
+    		throw new WebServiceException(Messages.getMessage("addPortDup", portName.toString()));
     	}
     }
 
@@ -147,19 +139,17 @@
      */
     public <T> Dispatch<T> createDispatch(QName qname, Class<T> clazz, Mode mode) throws WebServiceException {
     	if(qname == null){
-    		// TODO NLS
-    		throw ExceptionFactory.makeWebServiceException("Failed to create Dispatch port cannot be null.");
+    		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("createDispatchFail0"));
     	}
     	
     	if(!isPortValid(qname)){
-    		// TODO NLS
-    		throw ExceptionFactory.makeWebServiceException("Failed to create Dispatch, Port "+qname+" not found, add port to Service before calling dispatch.");
+    		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("createDispatchFail1", qname.toString()));
     	}
     	
         PortData portData = (PortData) ports.get(qname);
     	
         if(portData == null){
-    		throw ExceptionFactory.makeWebServiceException("Could not find Port info"); 
+        	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("createDispatchFail2", qname.toString())); 
     	}
     	
     	addBinding(portData.getBindingID());
@@ -193,16 +183,11 @@
      */
     public Dispatch<java.lang.Object> createDispatch(QName qname, JAXBContext context, Mode mode) {
         if (qname == null) {
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Dispatch creation " +
-                    "failed.  Port QName cannot be null.");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("createDispatchFail0"));
         }
         
         if (!isPortValid(qname)) {
-        	// TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Dispatch creation " +
-                    "failed.  Port " + qname + " was not found.  Make sure the " +
-                    "port has been added to the Service.");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("createDispatchFail1", qname.toString()));
         }
         
         PortData portData = (PortData) ports.get(qname);
@@ -254,8 +239,7 @@
             //throw ExceptionFactory.makeWebServiceException("WSLD Not found");
         }
         if(sei == null){
-            // TODO NLS
-            throw ExceptionFactory.makeWebServiceException("Invalid Service Endpoint Interface Class");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("getPortInvalidSEI", portName.toString(), "null"));
         }
         /*TODO: if portQname is null then fetch it from annotation. 
          * if portQname is provided then add that to the ports table.
@@ -331,7 +315,7 @@
      */
     public void setExecutor(Executor e) {
         if (e == null) {
-            throw ExceptionFactory.makeWebServiceException("Cannot set Executor to null");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("cannotSetExcutorToNull"));
         }
         
         executor = e;
@@ -369,8 +353,8 @@
                 serviceClient = new ServiceClient(configCtx, axisSvc);
             }
         } catch (AxisFault e) {
-            throw ExceptionFactory.makeWebServiceException("An error occured " +
-                    "while creating the ServiceClient", e);
+            throw ExceptionFactory.makeWebServiceException(
+            		Messages.getMessage("serviceClientCreateError"), e);
         }
         
         return serviceClient;        
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/ProviderDispatcher.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/ProviderDispatcher.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/ProviderDispatcher.java	(working copy)
@@ -29,6 +29,7 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.core.util.MessageContextUtils;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.message.Protocol;
@@ -109,8 +110,7 @@
             responseParamValue = providerInstance.invoke(input);
         } catch (Exception e) {
             e.printStackTrace();
-            throw ExceptionFactory.makeWebServiceException("An error occured " +
-                    "while invoking the target endpoint", e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
 
         // Create the response MessageContext from the returned value
@@ -194,8 +194,7 @@
     	
         if(!isValidProviderType(clazz)){
     		//TODO This will change once deployment code it in place
-    		throw new Exception("Invalid Provider implementation. Only String, " +
-                    "Source, and SOAPMessage are supported by JAX-WS ");
+    		throw new Exception(Messages.getMessage("InvalidProvider", clazz.getName()));
     	}
         
         Provider provider = null;
@@ -213,7 +212,7 @@
     	}
     	
         if (provider == null) {
-            throw ExceptionFactory.makeWebServiceException("Unable to create Provider instance.");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("InvalidProviderCreate", clazz.getName()));
         }
         
     	return provider;
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
@@ -66,7 +67,7 @@
             // allow us to get the params out in a number of forms later on.
             SOAPEnvelope soapEnv = axisRequestMsgCtx.getEnvelope();
             if (soapEnv == null) {
-                throw ExceptionFactory.makeWebServiceException("SOAP cannot be null");
+                throw ExceptionFactory.makeWebServiceException(Messages.getMessage("EndpointControllerErr1"));
             }
             
             MessageFactory msgFactory = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
@@ -82,7 +83,7 @@
             // The response MessageContext should be set on the InvocationContext
             ic.setResponseMessageContext(responseMsgContext);
         } catch (Exception e) {
-            throw ExceptionFactory.makeWebServiceException("Error while invoking EndpointDispather", e);
+            throw ExceptionFactory.makeWebServiceException(e);
         }
         
         return ic;
@@ -104,7 +105,7 @@
     	
         // If there was no implementation class, we should not go any further
         if (asp == null) {
-            throw ExceptionFactory.makeWebServiceException("No service class configured for this endpoint");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("EndpointControllerErr2"));
         }
         
         // Load the service implementation class  
@@ -117,8 +118,7 @@
     		dispatcherInstance = pd;
     	}
         else {
-            throw ExceptionFactory.makeWebServiceException("Error loading Provider " +
-                    "implementation; class must implement javax.xml.ws.Provider");
+            throw ExceptionFactory.makeWebServiceException(Messages.getMessage("EndpointControllerErr3", cls.getName()));
         }
     	
     	return dispatcherInstance;
@@ -132,8 +132,9 @@
 		Class _class = null;
         
         // TODO: What should be done if the supplied ClassLoader is null?
+		String className = null;
 		try{
-			String className = ((String) param.getValue()).trim();
+			className = ((String) param.getValue()).trim();
 			
             if (log.isDebugEnabled()) {
                 log.debug("Attempting to load service impl class: " + className);
@@ -141,7 +142,7 @@
             
             _class = Class.forName(className, true, cl);
 		}catch(java.lang.ClassNotFoundException cnf ){
-			throw ExceptionFactory.makeWebServiceException("Unable to load service implementation class.");
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("EndpointControllerErr4", className));
 		}
 		
 		return _class;
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/JAXWSMessageReceiver.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.axis2.jaxws.core.InvocationContext;
 import org.apache.axis2.jaxws.core.InvocationContextImpl;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.util.Constants;
 import org.apache.axis2.util.ThreadContextMigratorUtil;
@@ -71,7 +72,7 @@
         
         try {
             if (svcClassParam == null) { 
-                throw new RuntimeException("No service class was found for this AxisService");
+                throw new RuntimeException(Messages.getMessage("JAXWSMessageReceiverNoServiceClass"));
             }
             
             //This assumes that we are on the ultimate execution thread
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ExceptionFactory.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ExceptionFactory.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ExceptionFactory.java	(working copy)
@@ -25,6 +25,7 @@
 import javax.xml.ws.soap.SOAPFaultException;
 
 import org.apache.axis2.AxisFault;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.message.MessageInternalException;
 import org.apache.commons.logging.Log;
@@ -85,7 +86,7 @@
 			// This is not a good situation, an exception occurred while building the exception.
 			// This should never occur!  For now log the problem and rethrow...we may revisit this later
 			if (log.isDebugEnabled()) {
-				log.debug("Exception occurred while creating exception", re);
+				log.debug(Messages.getMessage("exceptionDuringExceptionFlow"), re);
 			}
 			throw re;
 		}
@@ -110,7 +111,7 @@
 			// This is not a good situation, an exception occurred while building the exception.
 			// This should never occur!  For now log the problem and rethrow...we may revisit this later
 			if (log.isDebugEnabled()) {
-				log.debug("Exception occurred while creating exception", re);
+				log.debug(Messages.getMessage("exceptionDuringExceptionFlow"), re);
 			}
 			throw re;
 		}
@@ -135,7 +136,7 @@
 			// This is not a good situation, an exception occurred while building the exception.
 			// This should never occur!  For now log the problem and rethrow...we may revisit this later
 			if (log.isDebugEnabled()) {
-				log.debug("Exception occurred while creating exception", re);
+				log.debug(Messages.getMessage("exceptionDuringExceptionFlow"), re);
 			}
 			throw re;
 		}
@@ -160,7 +161,7 @@
 			// This is not a good situation, an exception occurred while building the exception.
 			// This should never occur!  For now log the problem and rethrow...we may revisit this later
 			if (log.isDebugEnabled()) {
-				log.debug("Exception occurred while creating exception", re);
+				log.debug(Messages.getMessage("exceptionDuringExceptionFlow"), re);
 			}
 			throw re;
 		}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java	(working copy)
@@ -12,6 +12,7 @@
 import javax.xml.ws.handler.soap.SOAPMessageContext;
 
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
 
 
 public class HandlerChainProcessor {
@@ -67,8 +68,7 @@
 		for (Handler handlerClass : handlers) {
 			if (LogicalHandler.class.isAssignableFrom(handlerClass.getClass())) {
 				if (protocolHandlersStarted)
-					// TODO: NLS better error message
-					throw ExceptionFactory.makeWebServiceException("All logical handlers must come before all protocol handlers");
+					throw ExceptionFactory.makeWebServiceException(Messages.getMessage("handlerChainErr0", handlerClass.getClass().getName()));
 				else {
 					logicalLength++;
 				}
@@ -76,11 +76,9 @@
 			else if (SOAPHandler.class.isAssignableFrom(handlerClass.getClass()))
 				protocolHandlersStarted = true;
 			else if (Handler.class.isAssignableFrom(handlerClass.getClass())) {
-				// TODO: NLS better error message
-				throw ExceptionFactory.makeWebServiceException("cannot implement Handler directly");
+				throw ExceptionFactory.makeWebServiceException(Messages.getMessage("handlerChainErr1", handlerClass.getClass().getName()));
 			} else {
-				// TODO: NLS better error message
-				throw ExceptionFactory.makeWebServiceException("Some error");
+				throw ExceptionFactory.makeWebServiceException(Messages.getMessage("handlerChainErr2", handlerClass.getClass().getName()));
 			}
 
 		}
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerResolverImpl.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
 
 /* 
@@ -98,10 +99,10 @@
 				protocolHandlers.add((SOAPHandler)handlerClass);
 			else if (Handler.class.isAssignableFrom(handlerClass.getClass())) {
 				// TODO: NLS better error message
-				throw ExceptionFactory.makeWebServiceException("cannot implement Handler directly");
+				throw ExceptionFactory.makeWebServiceException(Messages.getMessage("handlerChainErr1", handlerClass.getClass().getName()));
 			} else {
 				// TODO: NLS better error message
-				throw ExceptionFactory.makeWebServiceException("Some error");
+				throw ExceptionFactory.makeWebServiceException(Messages.getMessage("handlerChainErr2", handlerClass.getClass().getName()));
 			}
 		}
 		
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/PortInfoImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/PortInfoImpl.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/handler/PortInfoImpl.java	(working copy)
@@ -19,6 +19,8 @@
 import javax.xml.namespace.QName;
 import javax.xml.ws.WebServiceException;
 
+import org.apache.axis2.jaxws.i18n.Messages;
+
 public class PortInfoImpl implements PortData {
 	private QName serviceName = null;
 	private QName portName = null;
@@ -34,14 +36,18 @@
 	 */
 	public PortInfoImpl(QName serviceName, QName portName, String bindingId, String serviceEndpoint) {
 		super();
-		if (serviceName == null)
-			throw new WebServiceException("serviceName cannot be null");
-		if (portName == null)
-			throw new WebServiceException("portName cannot be null");
-		if (bindingId == null)
-			throw new WebServiceException("bindingId cannot be null");
-		if (serviceEndpoint == null)
-			throw new WebServiceException("serviceEndpoint cannot be null");
+		if (serviceName == null) {
+			throw new WebServiceException(Messages.getMessage("portInfoErr0", "<null>"));
+		}
+		if (portName == null) {
+			throw new WebServiceException(Messages.getMessage("portInfoErr1", "<null>"));
+		}
+		if (bindingId == null) {
+			throw new WebServiceException(Messages.getMessage("portInfoErr2", "<null>"));
+		}
+		if (serviceEndpoint == null) {
+			throw new WebServiceException(Messages.getMessage("portInfoErr3", "<null>"));
+		}
 		this.serviceName = serviceName;
 		this.portName = portName;
 		this.bindingId = bindingId;
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/BaseProxyHandler.java	(working copy)
@@ -38,6 +38,7 @@
 import org.apache.axis2.jaxws.core.MessageContext;
 import org.apache.axis2.jaxws.core.controller.AxisInvocationController;
 import org.apache.axis2.jaxws.core.controller.InvocationController;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.impl.AsyncListener;
 import org.apache.axis2.jaxws.message.MessageException;
 import org.apache.axis2.jaxws.spi.ServiceDelegate;
@@ -105,7 +106,7 @@
             log.debug("Attemping to invoke Method: " +method.getName());
         }
 		if(!isValidMethodCall(method)){
-			throw new WebServiceException("Invalid Method-"+method.getName()+ " Method not found in javax.xml.ws.BindingProvider or "+axisController.getClientContext().getClazz() );
+			throw ExceptionFactory.makeWebServiceException(Messages.getMessage("proxyErr1",method.getName(), axisController.getClientContext().getClazz().getName()));
 		}
 		
 		if(isBindingProviderInvoked(method)){
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/DocLitProxyHandler.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/DocLitProxyHandler.java	(revision 428211)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/DocLitProxyHandler.java	(working copy)
@@ -36,6 +36,7 @@
 import org.apache.axiom.soap.SOAPBody;
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.message.Block;
 import org.apache.axis2.jaxws.message.Message;
 import org.apache.axis2.jaxws.message.MessageException;
@@ -222,7 +223,9 @@
 				}
 			}
 		}
-		throw new NoSuchFieldException("Could not create WebResult Object for property :"+propertyName+ " on java bean:"+returnClazz);
+		
+		// TODO Shouldn't this be a WebServiceException ?
+		throw new NoSuchFieldException(Messages.getMessage("noWebResultForProperty", propertyName, returnClazz.getName()));
 	}
 	//TODO: refactor this once PropertyDescriptor is implemented.
 	private Map<String, Object> getParamValues(ArrayList<String> names, Object[] objects){
