Index: src/org/apache/axis2/mtompolicy/Utils.java
===================================================================
--- src/org/apache/axis2/mtompolicy/Utils.java	(revision 703931)
+++ src/org/apache/axis2/mtompolicy/Utils.java	(working copy)
@@ -1,27 +1,41 @@
 package org.apache.axis2.mtompolicy;
 
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 
 import org.apache.axis2.description.AxisDescription;
+import org.apache.axis2.description.AxisMessage;
+import org.apache.axis2.description.AxisOperation;
 import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.PolicySubject;
+import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.axis2.policy.model.MTOMAssertion;
 import org.apache.axis2.util.PolicyUtil;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.neethi.Assertion;
 import org.apache.neethi.Policy;
 
 public class Utils {
-    
+	
+	public static final Log log = LogFactory.getLog(Utils.class);
+	
     public static MTOMAssertion getMTOMAssertion (AxisDescription axisDescription) {
         
         if (axisDescription == null) {
             return null;
         }
         
-        ArrayList policyList = new ArrayList();
-        policyList.addAll(axisDescription.getPolicySubject().getAttachedPolicyComponents());
-            
-        Policy policy = PolicyUtil.getMergedPolicy(policyList, axisDescription);
+        ArrayList policyList = new ArrayList();        
+//        policyList.addAll(axisDescription.getPolicySubject().getAttachedPolicyComponents());
+//            
+//        Policy policy = PolicyUtil.getMergedPolicy(policyList, axisDescription);
+
+        Policy policy = calculateEffectivePolicy(axisDescription, policyList);
+		// lastPolicyCalcuatedTime = new Date();
+		        	        
+//        boolean boo = policy.equals(policyTest);
         
         if (policy == null) {
             return null;
@@ -38,5 +52,40 @@
         return null;
         
     }
+    
+	private static Policy calculateEffectivePolicy(
+			AxisDescription axisDescription, ArrayList policyList) {
 
+        AxisService axisService = locateAxisService(axisDescription);
+        
+       	accumulateEffectivePolicies(axisDescription, policyList);        
+		
+		Policy result = PolicyUtil.getMergedPolicy(policyList, axisService);
+		// lastPolicyCalcuatedTime = new Date();
+		return result;
+	}
+
+	private static void accumulateEffectivePolicies(
+			AxisDescription axisDescription, ArrayList policyList) {
+		PolicySubject policySubject = null;
+
+		policySubject = axisDescription.getPolicySubject();
+		policyList.addAll(policySubject.getAttachedPolicyComponents());
+
+		if (axisDescription.getParent() != null) {
+			accumulateEffectivePolicies(axisDescription.getParent(),
+					policyList);
+		}
+	}
+	
+	private static AxisService locateAxisService(AxisDescription axisDescription) {
+		AxisService axisService = null;
+		if (axisService == null && (axisDescription instanceof AxisService)) {
+			axisService = (AxisService) axisDescription;			
+		} else {
+			axisService = locateAxisService(axisDescription.getParent());
+		}
+		return axisService;
+	}
+
 }
