Index: src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
===================================================================
--- src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java	(revision 1293659)
+++ src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java	(working copy)
@@ -246,6 +246,7 @@
     NO_REGRESSORS("Regression model must include at least one regressor"),
     NO_RESULT_AVAILABLE("no result available"),
     NO_SUCH_MATRIX_ENTRY("no entry at indices ({0}, {1}) in a {2}x{3} matrix"),
+    NO_SUITABLE_DENOMINATOR("not able to find a denominator which will produce less than {1} error for {0} (denominators {2})"),
     NAN_NOT_ALLOWED("NaN is not allowed"),
     NULL_NOT_ALLOWED("null is not allowed"), /* keep */
     ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED("a null or zero length array not allowed"),
Index: src/main/java/org/apache/commons/math3/fraction/FractionConversionException.java
===================================================================
--- src/main/java/org/apache/commons/math3/fraction/FractionConversionException.java	(revision 1293659)
+++ src/main/java/org/apache/commons/math3/fraction/FractionConversionException.java	(working copy)
@@ -17,6 +17,8 @@
 
 package org.apache.commons.math3.fraction;
 
+import java.util.Set;
+
 import org.apache.commons.math3.exception.ConvergenceException;
 import org.apache.commons.math3.exception.util.LocalizedFormats;
 
@@ -38,6 +40,16 @@
      * @param value double value to convert
      * @param maxIterations maximal number of iterations allowed
      */
+    public FractionConversionException(double value, double epsilon, Set<Integer> acceptableDenominators) {
+        super(LocalizedFormats.NO_SUITABLE_DENOMINATOR, value, epsilon, acceptableDenominators);
+    }
+    
+    /**
+     * Constructs an exception with specified formatted detail message.
+     * Message formatting is delegated to {@link java.text.MessageFormat}.
+     * @param value double value to convert
+     * @param maxIterations maximal number of iterations allowed
+     */
     public FractionConversionException(double value, int maxIterations) {
         super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);
     }
Index: src/main/java/org/apache/commons/math3/fraction/Fraction.java
===================================================================
--- src/main/java/org/apache/commons/math3/fraction/Fraction.java	(revision 1293659)
+++ src/main/java/org/apache/commons/math3/fraction/Fraction.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.io.Serializable;
 import java.math.BigInteger;
+import java.util.Set;
 
 import org.apache.commons.math3.FieldElement;
 import org.apache.commons.math3.exception.util.LocalizedFormats;
@@ -120,6 +121,57 @@
     {
         this(value, epsilon, Integer.MAX_VALUE, maxIterations);
     }
+    
+    /**
+     * Create a fraction given the double value and maximum error allowed. Limits
+     * the fraction to the specified denominators.  Will return the a fraction with
+     * the denominator producing the smallest error.  In the event of a tie, will 
+     * return a fraction containing the smaller denominator.
+     * 
+     * @param value the double value to convert to a fraction.
+     * @param epsilon maximum error allowed.  The resulting fraction is within
+     *        {@code epsilon} of {@code value}, in absolute terms.
+     * @param acceptableDenominators denominators which may be used
+     * @throws FractionConversionException if no fraction could be created with
+     *         the given denominators and maximum error.
+     */
+    public Fraction(double value, double epsilon, Set<Integer> acceptableDenominators) 
+        throws FractionConversionException
+    {
+    	int bestDenominator = 0;
+    	int numerator = 0;
+    	double error = Double.MAX_VALUE;
+    	
+    	for (Integer i : acceptableDenominators)
+    	{
+    		double d = 1d / i;
+    		int n = (int)Math.round(value / d);
+    		double v = (double) n / i;
+    		double e = Math.abs(value - v);
+    		if (e <= epsilon && e < error)
+    		{
+    			bestDenominator = i;
+    			numerator = n;
+    			error = e;
+    		}
+    		else if (e <= epsilon && e == error && i < bestDenominator)
+    		{
+    			bestDenominator = i;
+    			numerator = n;
+    			error = e;    			
+    		}
+    	}
+    	
+    	if (bestDenominator != 0)
+    	{
+    		this.numerator = numerator;
+    		this.denominator = bestDenominator;
+    	}
+    	else
+    	{
+    		throw new FractionConversionException(value, epsilon, acceptableDenominators);
+    	}
+    }
 
     /**
      * Create a fraction given the double value and maximum denominator.
Index: src/main/resources/assets/org/apache/commons/math3/exception/util/LocalizedFormats_fr.properties
===================================================================
--- src/main/resources/assets/org/apache/commons/math3/exception/util/LocalizedFormats_fr.