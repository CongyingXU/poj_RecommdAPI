Index: modules/kernel/src/org/apache/axis2/addressing/EndpointReference.java
===================================================================
--- modules/kernel/src/org/apache/axis2/addressing/EndpointReference.java	(revision 608073)
+++ modules/kernel/src/org/apache/axis2/addressing/EndpointReference.java	(working copy)
@@ -45,8 +45,11 @@
 import java.io.Externalizable;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -73,6 +76,12 @@
      * this object in the log files
      */
     private String logCorrelationIDString = null;
+    
+    /**
+     * The list of URIs that should be considered equivalent to 
+     * the WS-Addressing anonymous URI
+     */
+    private static List anonymousEquivalentURIs = Collections.synchronizedList(new ArrayList());
 
 
     /**
@@ -98,6 +107,17 @@
      * Required for Externalizable objects
      */
     public EndpointReference() {}
+    
+    /**
+     * Adds a parameter to the list of anonymous equivalent URIs. 
+     * @param anonymousEquivalentURI any URI that has an address that
+     * begins with this value will be considered to be anonymous
+     */
+    public static void addAnonymousEquivalentURI(String anonymousEquivalentURI){
+        if (log.isTraceEnabled())
+        	log.trace("addAnonymousEquivalentURI: " + anonymousEquivalentURI);
+        anonymousEquivalentURIs.add(anonymousEquivalentURI);
+    }
  
 
     /**
@@ -175,19 +195,35 @@
     /**
      * hasAnonymousAddress
      *
-     * @return true if address is 'Anonymous URI'
+     * @return true if address is 'Anonymous URI' or starts with a URI string
+     * that is considered equivalent to anonymous
      */
     public boolean hasAnonymousAddress() {
         boolean result = (AddressingConstants.Final.WSA_ANONYMOUS_URL.equals(address) ||
-                AddressingConstants.Submission.WSA_ANONYMOUS_URL.equals(address) ||
+                AddressingConstants.Submission.WSA_ANONYMOUS_URL.equals(address));
+        if(!result && address!=null ){
+        	//If the address is not WS-A anonymous it might still be considered anonymous
+        	//
+            //The most common use case for this is WS-RM/MakeConnection anonymous 
+        	//These have semantics to indicate that any response messages should be sent synchronously, using the
+            //transports back channel, as opposed to asynchronously. No other
+            //semantics normally associated with WS-Addressing anonymous values should
+            //be assumed, by it's presence here.
+        	synchronized(anonymousEquivalentURIs){ //TODO we might be able to remove this lock since
+        										   //generally anonymous equivalent URIs will be added at
+        										   //startup, not throughout the life of the server
+        		if(anonymousEquivalentURIs.size()>0){
+            		Iterator it = anonymousEquivalentURIs.iterator();
+            		while(it.hasNext()){
+            			result = address.startsWith((String)it.next());
+            			if(result){
+            				break;
+            			}
+            		}	
+        		}
+        	} //end sync      	
+        }
 
-                //The following is added to give WS-RM anonymous a semantics to indicate
-                //that any response messages should be sent synchronously, using the
-                //transports back channel, as opposed to asynchronously. No other
-                //semantics normally associated with WS-Addressing anonymous values should
-                //be assumed, by it's presence here.
-                (address != null && address.startsWith(
-                        "http://docs.oasis-open.org/ws-rx/wsmc/200702/anonymous?id=")));
         if (log.isTraceEnabled()) {
             log.trace("hasAnonymousAddress: " + address + " is Anonymous: " + result);
         }
