Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/SoapMessageProviderTests.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/SoapMessageProviderTests.java	(revision 473375)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/SoapMessageProviderTests.java	(working copy)
@@ -95,10 +95,17 @@
             SOAPMessage request = factory.createMessage(null, 
                     new ByteArrayInputStream(msg.getBytes()));
             
+            // Test the transport headers by sending a content description
+            request.setContentDescription(SoapMessageProvider.XML_REQUEST);
+            
             // Dispatch
         	System.out.println(">> Invoking SourceMessageProviderDispatch");
         	SOAPMessage response = dispatch.invoke(request);
 
+            // Check for valid content description
+            assert(response.getContentDescription() != null);
+            assert(response.getContentDescription().equals(SoapMessageProvider.XML_RESPONSE));
+            
             // Check assertions and get the data element
             SOAPElement dataElement = assertResponseXML(response, SoapMessageProvider.XML_RESPONSE);
             
Index: C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/soapmsg/SoapMessageProvider.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/soapmsg/SoapMessageProvider.java	(revision 473375)
+++ C:/workspace/live/axis2/modules/jaxws/test/org/apache/axis2/jaxws/provider/soapmsg/SoapMessageProvider.java	(working copy)
@@ -163,6 +163,10 @@
     private SOAPMessage getXMLResponse(SOAPMessage request, SOAPElement dataElement) throws Exception {
         SOAPMessage response;
         
+        // Transport header check
+        assert(request.getContentDescription() != null);
+        assert(request.getContentDescription().equals(SoapMessageProvider.XML_REQUEST));
+
         // Additional assertion checks
         assert(countAttachments(request) == 0);
         
@@ -171,6 +175,8 @@
         String responseXML = responseMsgStart + XML_RETURN + responseMsgEnd;
         response = factory.createMessage(null, new ByteArrayInputStream(responseXML.getBytes()));
         
+        // Set a content description
+        response.setContentDescription(SoapMessageProvider.XML_RESPONSE);
         return response;
     }
     
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(revision 473375)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/impl/MessageImpl.java	(working copy)
@@ -27,6 +27,7 @@
 import javax.xml.namespace.QName;
 import javax.xml.soap.AttachmentPart;
 import javax.xml.soap.MessageFactory;
+import javax.xml.soap.MimeHeader;
 import javax.xml.soap.MimeHeaders;
 import javax.xml.soap.SOAPEnvelope;
 import javax.xml.soap.SOAPMessage;
@@ -67,7 +68,7 @@
 	XMLPart xmlPart = null; // the representation of the xmlpart
 	List<Attachment> attachments = new ArrayList<Attachment>(); // non-xml parts
     boolean mtomEnabled;
-	Throwable localException = null;
+    private MimeHeaders mimeHeaders = new MimeHeaders(); 
     
 	// Constants
 	private static final String SOAP11_ENV_NS = "http://schemas.xmlsoap.org/soap/envelope/";
@@ -177,11 +178,10 @@
 
 			// Create soapMessage object from Message Factory using the input
 			// stream created from OM.
+      
+			// Get the MimeHeaders
+			MimeHeaders defaultHeaders = this.getMimeHeaders();
 
-			// TODO should we read the MIME Header from JAXWS MessageContext.
-			// For now I will create a default header
-			MimeHeaders defaultHeader = new MimeHeaders();
-
 			// Toggle based on SOAP 1.1 or SOAP 1.2
 			String contentType = null;
 			if (ns.getNamespaceURI().equals(SOAP11_ENV_NS)) {
@@ -189,9 +189,11 @@
 			} else {
 				contentType = SOAP12_CONTENT_TYPE;
 			}
-			defaultHeader.addHeader("Content-type", contentType +"; charset=UTF-8");
-			SOAPMessage soapMessage = mf.createMessage(defaultHeader, inStream);
             
+            // Override the content-type
+			defaultHeaders.setHeader("Content-type", contentType +"; charset=UTF-8");
+			SOAPMessage soapMessage = mf.createMessage(defaultHeaders, inStream);
+            
             // At this point the XMLPart is still an OMElement.  We need to change it to the new SOAPEnvelope.
 			createXMLPart(soapMessage.getSOAPPart().getEnvelope());
             
@@ -385,15 +387,7 @@
     public String getXMLPartContentType() {
         return xmlPart.getXMLPartContentType();
     }
-    
-    public Throwable getLocalException() {
-        return localException;
-    }
 
-    public void setLocalException(Throwable t) {
-        localException = t;
-    }
-
     public Style getStyle() {
         return xmlPart.getStyle();
     }
@@ -410,5 +404,21 @@
         xmlPart.setOperationElement(operationQName);
     }
 
+    /* (non-Javadoc)
+     * @see org.apache.axis2.jaxws.message.Attachment#getMimeHeaders()
+     */
+    public MimeHeaders getMimeHeaders() {
+       return mimeHeaders;
+    }
 
+    /* (non-Javadoc)
+     * @see org.apache.axis2.jaxws.message.Attachment#setMimeHeaders(javax.xml.soap.MimeHeaders)
+     */
+    public void setMimeHeaders(MimeHeaders mhs) {
+        mimeHeaders = mhs;
+        if (mimeHeaders == null) {
+            mimeHeaders = new MimeHeaders();
+        }
+    }
+
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/Message.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/Message.java	(revision 473364)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/Message.java	(working copy)
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import javax.activation.DataHandler;
+import javax.xml.soap.MimeHeaders;
 import javax.xml.soap.SOAPMessage;
 
 /**
@@ -95,20 +96,13 @@
     public void setMTOMEnabled(boolean b);
     
     /**
-     * The local exception is the Throwable object held on the Message
-     * from a problem that occurred due to something other than the
-     * server.  In other words, no message ever travelled across the wire.
-     * @return the Throwable object or null
+     * @return get the MimeHeaders
      */
-     public Throwable getLocalException();
-
+    public MimeHeaders getMimeHeaders();
+    
     /**
-     * The local exception is the Throwable object held on the Message
-     * from a problem that occurred due to something other than the
-     * server.  In other words, no message ever travelled across the wire.
-     * @param t
-     * @see Throwable
+     * Set the MimeHeaders
+     * @param mhs MimeHeaders
      */
-    public void setLocalException(Throwable t);
-	
+    public void setMimeHeaders(MimeHeaders mhs);
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockImpl.java	(revision 473364)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/impl/JAXBBlockImpl.java	(working copy)
@@ -174,13 +174,8 @@
                 am.setMessage(msg);
                 m.setAttachmentMarshaller(am);
             }   
-            if (busObject instanceof JAXBElement) {
-            	m.marshal(busObject, writer);
-            } else {
-            	JAXBElement b = new JAXBElement(this.getQName(), busObject.getClass(), busObject);
-            	m.marshal(b, writer);
-            }
             
+            m.marshal(busObject, writer);
             
             
             // Successfully marshalled the data
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(revision 473375)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/MessageUtils.java	(working copy)
@@ -17,6 +17,7 @@
 package org.apache.axis2.jaxws.message.util;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 
@@ -53,6 +54,7 @@
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.http.Header;
 
 
 /**
@@ -164,6 +166,18 @@
                 throw ExceptionFactory.makeWebServiceException("Could not create new Message");
             }
             
+            // Add all the MimeHeaders from the Axis2 MessageContext
+            MimeHeaders mhs = message.getMimeHeaders();
+            HashMap headerMap = (HashMap) msgContext.getProperty(MessageContext.TRANSPORT_HEADERS);
+            if (headerMap != null) {
+                Iterator it = headerMap.keySet().iterator();
+                while (it.hasNext()) {
+                    String key = (String) it.next();
+                    String value = (String) headerMap.get(key);
+                    mhs.addHeader(key, value);
+                }
+            }
+            
             // FIXME: This should be revisited when we re-work the MTOM support.
             //This destroys performance by forcing a double pass through the message.
             //If attachments are found on the MessageContext, then that means
@@ -242,6 +256,14 @@
         SOAPEnvelope envelope = (SOAPEnvelope) message.getAsOMElement();
         msgContext.setEnvelope(envelope);
         
+        // Put the Headers onto the MessageContext
+        HashMap headerMap = new HashMap();
+        for (Iterator it = message.getMimeHeaders().getAllHeaders(); it.hasNext();) {
+            MimeHeader mh = (MimeHeader) it.next();
+            headerMap.put(mh.getName(), mh.getValue());
+        }
+        msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, headerMap);
+        
         // Enable MTOM Attachments 
         if (message.isMTOMEnabled()) {
             if (log.isDebugEnabled()) {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(revision 473364)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(working copy)
@@ -138,7 +138,7 @@
             if (response.getMessage() == null && faultexception != null) {
                 MessageFactory factory = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
                 Message message = factory.create(request.getMessage().getProtocol());
-                message.setLocalException(faultexception);
+                response.setLocalException(faultexception);
                 response.setMessage(message);
             }
             
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java	(revision 473364)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/core/MessageContext.java	(working copy)
@@ -52,6 +52,10 @@
     private QName operationName;    //FIXME: This should become the OperationDescription
     private Message message;
     private Mode mode;
+    
+    // If a local exception is thrown, the exception is placed on the message context.
+    // It is not converted into a Message.
+    private Throwable localException = null;
         
     public MessageContext() {
         axisMsgCtx = new org.apache.axis2.context.MessageContext();
@@ -145,4 +149,25 @@
 
         return maintainSession;
     }
+    
+    /**
+     * The local exception is the Throwable object held on the Message
+     * from a problem that occurred due to something other than the
+     * server.  In other words, no message ever travelled across the wire.
+     * @return the Throwable object or null
+     */
+     public Throwable getLocalException() {
+         return localException;
+     }
+
+    /**
+     * The local exception is the Throwable object held on the Message
+     * from a problem that occurred due to something other than the
+     * server.  In other words, no message ever travelled across the wire.
+     * @param t
+     * @see Throwable
+     */
+    public void setLocalException(Throwable t) {
+        localException = t;
+    }
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(revision 473364)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/proxy/JAXWSProxyHandler.java	(working copy)
@@ -316,9 +316,9 @@
 		    }
 		    
 		    throw (Throwable)object;
-		} else if (responseMsg.getLocalException() != null) {
+		} else if (responseContext.getLocalException() != null) {
 		    // use the factory, it'll throw the right thing:
-		    throw ExceptionFactory.makeWebServiceException(responseMsg.getLocalException());
+		    throw ExceptionFactory.makeWebServiceException(responseContext.getLocalException());
 		}
 		Object object = methodMarshaller.demarshalResponse(responseMsg, args);
 		if (log.isDebugEnabled()) {
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/BaseDispatch.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/BaseDispatch.java	(revision 473364)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/BaseDispatch.java	(working copy)
@@ -132,9 +132,9 @@
                 XMLFault fault = responseMsg.getXMLFault();
                 throw ExceptionFactory.makeWebServiceException(fault.getReason().getText());
             }
-            else if (responseMsg.getLocalException() != null) {
+            else if (responseMsgCtx.getLocalException() != null) {
                 // use the factory, it'll throw the right thing:
-                throw ExceptionFactory.makeWebServiceException(responseMsg.getLocalException());
+                throw ExceptionFactory.makeWebServiceException(responseMsgCtx.getLocalException());
             }
         } catch (MessageException e) {
             throw ExceptionFactory.makeWebServiceException(e);
