Index: modules/kernel/src/org/apache/axis2/description/AxisService.java
===================================================================
--- modules/kernel/src/org/apache/axis2/description/AxisService.java	(revision 627955)
+++ modules/kernel/src/org/apache/axis2/description/AxisService.java	(working copy)
@@ -41,6 +41,7 @@
 import java.util.Map;
 import java.util.Vector;
 
+
 import javax.wsdl.Definition;
 import javax.wsdl.Import;
 import javax.wsdl.Port;
@@ -989,7 +990,7 @@
     }
 
     /**
-     * find the defintion object for given name
+     * find the definition object for given name
      * @param parentDefinition
      * @param name
      * @return wsdl definition
Index: modules/parent/pom.xml
===================================================================
--- modules/parent/pom.xml	(revision 627955)
+++ modules/parent/pom.xml	(working copy)
@@ -148,6 +148,7 @@
         <xerces.version>2.8.1</xerces.version>
         <xml_apis.version>1.3.04</xml_apis.version>
         <xmlbeans.version>2.3.0</xmlbeans.version>
+        <xml_resolver.version>1.2</xml_resolver.version>
         <xmlschema.version>SNAPSHOT</xmlschema.version>
         <xmlunit.version>1.1</xmlunit.version>
         
@@ -551,6 +552,11 @@
                 <version>${xml_apis.version}</version>
             </dependency>
             <dependency>
+                <groupId>xml-resolver</groupId>
+                <artifactId>xml-resolver</artifactId>
+                <version>${xml_resolver.version}</version>
+            </dependency>
+            <dependency>
                 <groupId>xalan</groupId>
                 <artifactId>xalan</artifactId>
                 <version>${xalan.version}</version>
Index: modules/metadata/src/org/apache/axis2/jaxws/description/ServiceDescription.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(working copy)
@@ -21,6 +21,7 @@
 import org.apache.axis2.client.ServiceClient;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.jaxws.description.xml.handler.HandlerChainsType;
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
 import javax.xml.namespace.QName;
 import java.util.Collection;
 import java.util.List;
@@ -141,4 +142,6 @@
     public boolean isMTOMEnabled(Object key);
     
     public QName getPreferredPort(Object key);
-}
\ No newline at end of file
+    
+    public JAXWSCatalogManager getCatalogManager();
+}
Index: modules/metadata/src/org/apache/axis2/jaxws/description/builder/JAXWSRIWSDLGenerator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/builder/JAXWSRIWSDLGenerator.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/builder/JAXWSRIWSDLGenerator.java	(working copy)
@@ -9,6 +9,10 @@
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.Parameter;
 import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.jaxws.catalog.impl.OASISCatalogManager;
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.axis2.jaxws.description.EndpointDescription;
+import org.apache.axis2.jaxws.util.CatalogURIResolver;
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.apache.axis2.wsdl.WSDLConstants;
 import org.apache.commons.logging.Log;
@@ -74,7 +78,18 @@
      * disk and create a Definition. After we are done with the file we will
      * remove it from disk.
      */
-    public void generateWsdl(String className, String bindingType) throws
+    public void generateWsdl(String className, String bindingType) throws WebServiceException {
+    	generateWsdl(className, bindingType, null);
+    }
+    
+    /**
+     * This method will drive the call to WsGen to generate a WSDL file for
+     * applications deployed without WSDL. We will then read this file in from
+     * disk and create a Definition. After we are done with the file we will
+     * remove it from disk.  This method accepts a CatalogManager as a parameter
+     * for the eventual use in by an XMLSchemaCollection.
+     */
+    public void generateWsdl(String className, String bindingType, JAXWSCatalogManager catalogManager) throws
             WebServiceException {
 
         AxisConfiguration axisConfiguration = axisService.getAxisConfiguration();
@@ -130,7 +145,7 @@
                 throw new Exception("A WSDL Definition could not be generated for " +
                         "the implementation class: " + className);
             }
-            docMap = readInSchema(localOutputDirectory);
+            docMap = readInSchema(localOutputDirectory, catalogManager);
         }
         catch (Throwable t) {
             String msg =
@@ -256,13 +271,15 @@
      * This method will read in all of the schema files that were generated
      * for a given application.
      */
-    private HashMap<String, XmlSchema> readInSchema(String localOutputDirectory) throws Exception {
+    private HashMap<String, XmlSchema> readInSchema(String localOutputDirectory, 
+    		                                        JAXWSCatalogManager catalogManager) throws Exception {
         try {
 
             XmlSchemaCollection schemaCollection = new XmlSchemaCollection();
+            if (catalogManager != null)
+                schemaCollection.setSchemaResolver(new CatalogURIResolver(catalogManager));
             schemaCollection.setBaseUri(new File(localOutputDirectory).getAbsolutePath());
 
-
             HashMap<String, XmlSchema> docMap = new HashMap<String, XmlSchema>();
             List<File> schemaFiles = getSchemaFiles(localOutputDirectory);
             for (File schemaFile : schemaFiles) {
@@ -312,14 +329,14 @@
                 return (Definition) value;
             }
         }
-        initialize();
+        initialize(service);
         return wsdlDefMap.values().iterator().next();
     }
 
-    private synchronized void initialize() {
+    private synchronized void initialize(AxisService service) {
         String className = (String) axisService.getParameter(Constants.SERVICE_CLASS).getValue();
         if (!init) {
-            generateWsdl(className, SOAPBinding.SOAP11HTTP_BINDING);
+            generateWsdl(className, SOAPBinding.SOAP11HTTP_BINDING, getCatalogManager(service));
             init = true;
         }
     }
@@ -346,7 +363,7 @@
                 return (XmlSchema) list.get(0);
             }
         }
-        initialize();
+        initialize(service);
         XmlSchema schema = docMap.get(xsd);
         if (schema == null) {
             docMap.values().iterator().next();
@@ -399,6 +416,20 @@
     }
 
     /**
+     * Get the CatalogManager associated with an AxisService
+     * @return the CatalogManager in use for this AxisService
+     */
+    public static JAXWSCatalogManager getCatalogManager(AxisService service) {
+    	Parameter param = service.getParameter(EndpointDescription.AXIS_SERVICE_PARAMETER);
+
+    	if (param != null) {
+            EndpointDescription ed = (EndpointDescription)param.getValue();
+            return ed.getServiceDescription().getCatalogManager();
+    	} else
+    	    return new OASISCatalogManager();
+    }
+    
+    /**
      * Get the default classpath from various thingies in the message context
      *
      * @param msgContext
Index: modules/metadata/src/org/apache/axis2/jaxws/description/builder/DescriptionBuilderComposite.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/builder/DescriptionBuilderComposite.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/builder/DescriptionBuilderComposite.java	(working copy)
@@ -24,6 +24,7 @@
 
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
 import org.apache.axis2.jaxws.description.xml.handler.HandlerChainsType;
 import org.apache.axis2.jaxws.util.WSDL4JWrapper;
 import org.apache.commons.logging.Log;
@@ -31,9 +32,7 @@
 
 import javax.wsdl.Definition;
 import javax.xml.namespace.QName;
-import javax.xml.ws.spi.WebServiceFeatureAnnotation;
 
-import java.io.InputStream;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.net.URL;
@@ -127,6 +126,9 @@
     // resource.
     private WeakHashMap<Object, DescriptionBuilderComposite> sparseCompositeMap = new WeakHashMap<Object, DescriptionBuilderComposite>();
     
+    // Allow a unique XML CatalogManager per service description.
+    private JAXWSCatalogManager catalogManager = null;
+    
     public void setSparseComposite(Object key, DescriptionBuilderComposite sparseComposite) {
         if (key != null && sparseComposite != null) {
             this.sparseCompositeMap.put(key, sparseComposite);
@@ -686,6 +688,22 @@
     }
 
     /**
+     * Set the Catalog Manager associated with this composite.  
+     * @param theCatalogManger
+     */
+    public void setCatalogManager(JAXWSCatalogManager theCatalogManager) {
+    	this.catalogManager = theCatalogManager;
+    }
+    
+    /**
+     * Returns the catalog manager associated with this composite, if any.
+     * @return
+     */
+    public JAXWSCatalogManager getCatalogManager() {
+    	return catalogManager;
+    }
+    
+    /**
      * @deprecated
      */
     private boolean isDeprecatedServiceProviderConstruction = false;
Index: modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java	(working copy)
@@ -27,6 +27,8 @@
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ClientConfigurationFactory;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.axis2.jaxws.catalog.impl.OASISCatalogManager;
 import org.apache.axis2.jaxws.description.DescriptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
@@ -109,6 +111,9 @@
     private DescriptionBuilderComposite composite = null;
     private boolean isServerSide = false;
 
+    // Allow a unique XML CatalogManager per service description.
+    private JAXWSCatalogManager catalogManager = null;
+    
     // RUNTIME INFORMATION
     Map<String, ServiceRuntimeDescription> runtimeDescMap =
             new ConcurrentHashMap<String, ServiceRuntimeDescription>();
@@ -147,6 +152,12 @@
     ServiceDescriptionImpl(URL wsdlURL, QName serviceQName, Class serviceClass, 
                            DescriptionBuilderComposite sparseComposite,
                            Object sparseCompositeKey) {
+    	
+    	if (sparseComposite != null)
+    	    catalogManager = sparseComposite.getCatalogManager();
+    	else
+    		catalogManager = new OASISCatalogManager();
+    	
         if (serviceQName == null) {
             throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDescErr0"));
         }
@@ -644,7 +655,8 @@
 
                     try {
                         this.wsdlWrapper = new WSDL4JWrapper(this.wsdlURL,
-                                                             composite.getWsdlDefinition());
+                                                             composite.getWsdlDefinition(),
+                                                             this.catalogManager);
                     } catch (WSDLException e) {
                         throw ExceptionFactory.makeWebServiceException(
                                 Messages.getMessage("wsdlException", e.getMessage()), e);
@@ -683,7 +695,7 @@
                         }
                         this.wsdlURL = seic.getWsdlURL();
                         this.wsdlWrapper =
-                                new WSDL4JWrapper(seic.getWsdlURL(), seic.getWsdlDefinition());
+                                new WSDL4JWrapper(seic.getWsdlURL(), seic.getWsdlDefinition(), this.catalogManager);
                     } else if (composite.getWsdlDefinition() != null) {
                         //set the wsdl def from the impl. class composite
                         if (log.isDebugEnabled()) {
@@ -691,7 +703,8 @@
                         }
                         this.wsdlURL = composite.getWsdlURL();
                         this.wsdlWrapper = new WSDL4JWrapper(composite.getWsdlURL(),
-                                                             composite.getWsdlDefinition());
+                                                             composite.getWsdlDefinition(),
+                                                             this.catalogManager);
                     } else {
                     	String wsdlLocation = null;
                     	// first check to see if the wsdlLocation is on the SEI
@@ -732,7 +745,7 @@
             //Deprecate this code block when MDQ is fully integrated
         } else if (wsdlURL != null) {
             try {
-                this.wsdlWrapper = new WSDL4JWrapper(this.wsdlURL);
+                this.wsdlWrapper = new WSDL4JWrapper(this.wsdlURL, this.catalogManager);
             }
             catch (FileNotFoundException e) {
                 throw ExceptionFactory.makeWebServiceException(
@@ -780,7 +793,7 @@
 		        		"service endpoint: " + composite.getClassName());
 		    }
 		    URL url = getWSDLURL(wsdlLocation);
-			this.wsdlWrapper = new WSDL4JWrapper(url);
+			this.wsdlWrapper = new WSDL4JWrapper(url, this.catalogManager);
 			composite.setWsdlDefinition(wsdlWrapper.getDefinition());
 		}
 		catch(Exception e) {
@@ -944,6 +957,10 @@
     void setServiceQName(QName theName) {
         serviceQName = theName;
     }
+    
+    public JAXWSCatalogManager getCatalogManager() {
+    	return catalogManager;
+    }
 
     /* (non-Javadoc)
      * @see org.apache.axis2.jaxws.description.ServiceDescription#isMTOMEnabled(java.lang.Object)
Index: modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(working copy)
@@ -127,7 +127,7 @@
      * This is the same as calling getHandlerChain(null).
      * @see #getHandlerChain(Object)
      */
-public abstract HandlerChainsType getHandlerChain();
+    public abstract HandlerChainsType getHandlerChain();
 
     /**
      * Set the binding type FOR A CLIENT.  The BindingType annotation is not valid on the client per
Index: modules/metadata/src/org/apache/axis2/jaxws/catalog/impl/OASISCatalogManager.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/catalog/impl/OASISCatalogManager.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/catalog/impl/OASISCatalogManager.java	(revision 0)
@@ -0,0 +1,141 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.catalog.impl;
+
+import java.util.logging.Logger;
+
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.xml.resolver.Catalog;
+import org.apache.xml.resolver.CatalogManager;
+
+/**
+ *  OASISCatalogManager provides an interface to the catalog properties.
+ *  The primary difference between this and the 
+ *  org.apache.xml.resolver.CatalogManger is that the staticCatalog is not
+ *  a static data member in the OASISCatalogManger class.  This enables the use
+ *  of a static catalog per CatalogManager.  
+ */
+public class OASISCatalogManager extends CatalogManager implements JAXWSCatalogManager {
+    public static final String DEFAULT_CATALOG_NAME = "WEB-INF/jax-ws-catalog.xml";
+    public static final String CATALOG_DEBUG_KEY = "OASISCatalogManager.catalog.debug.level";
+
+    private static final Logger LOG =
+    	Logger.getLogger(OASISCatalogManager.class.getName());
+    private static final String DEBUG_LEVEL = System.getProperty(CATALOG_DEBUG_KEY);
+
+    /** The static catalog used by this manager. */
+    private Catalog staticCatalog = null;
+
+    /**
+     * Default constructor with no arguments.
+     * This constructor will use the defaults specified for Axis2 in the
+     * acceptDefaults method.
+     */
+    public OASISCatalogManager() {
+    	super();
+    	this.acceptDefaults();
+    	if (DEBUG_LEVEL != null) {
+    		this.debug.setDebug(Integer.parseInt(DEBUG_LEVEL)); 
+    	}
+    }
+
+    /**
+     * Constructor that specifies an explicit property file.
+     * @param propertyFileName
+     */
+    public OASISCatalogManager(String propertyFileName) {
+    	super(propertyFileName);
+        if (DEBUG_LEVEL != null) {
+            this.debug.setDebug(Integer.parseInt(DEBUG_LEVEL));            
+        }
+    }
+    
+    private void acceptDefaults() {
+    	this.setUseStaticCatalog(true);
+    	this.setIgnoreMissingProperties(true);
+    	this.setCatalogFiles(DEFAULT_CATALOG_NAME);
+    }
+    
+    /**
+     * Get a catalog instance.
+     *
+     * If this manager uses static catalogs, the same static catalog will
+     * always be returned. Otherwise a new catalog will be returned.
+     */
+    public Catalog getCatalog() {
+        Catalog catalog = staticCatalog;
+
+        if (catalog == null || !super.getUseStaticCatalog()) {
+            catalog = getPrivateCatalog();
+        }
+        return catalog;
+    }
+    
+    /**
+     * Get a new catalog instance.
+     *
+     * This method returns an instance of the underlying catalog class.
+     */
+    public Catalog getPrivateCatalog() {
+        Catalog catalog = staticCatalog;
+        boolean useStatic = super.getUseStaticCatalog();
+
+        if (catalog == null || !useStatic) {
+            try {
+  	            String catalogClassName = getCatalogClassName();
+  	            if (catalogClassName == null) {
+  	                catalog = new Catalog();
+  	            } else {
+  	                try {
+  	                    catalog = (Catalog) Class.forName(catalogClassName).newInstance();
+  	                } catch (ClassNotFoundException cnfe) {
+  	                    debug.message(1,"Catalog class named '"
+  			                          + catalogClassName
+  			                          + "' could not be found. Using default.");
+  	                    catalog = new Catalog();
+  	                } catch (ClassCastException cnfe) {
+  	                    debug.message(1,"Class named '"
+  			                          + catalogClassName
+  			                          + "' is not a Catalog. Using default.");
+  	                    catalog = new Catalog();
+  	                }
+  	            }
+
+  	            catalog.setCatalogManager(this);
+  	            catalog.setupReaders();
+  	            catalog.loadSystemCatalogs();
+            } catch (Exception ex) {
+  	            ex.printStackTrace();
+            }
+
+  	        staticCatalog = catalog;
+        }
+
+        return catalog;
+    }
+    
+    /**
+     * Set the list of catalog files.
+     * This method will reset the staticCatalog for this CatalogManager.
+     */
+    public void setCatalogFiles(String fileList) {
+    	staticCatalog = null;
+    	super.setCatalogFiles(fileList);
+    }
+}
Index: modules/metadata/src/org/apache/axis2/jaxws/util/ModuleWSDLLocator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/ModuleWSDLLocator.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/ModuleWSDLLocator.java	(working copy)
@@ -30,7 +30,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-
 /**
  * This class is an implementation of a WSDL4J interface and is the
  * implementation we supply to a WSDLReader instance. Its primary 
@@ -50,7 +49,7 @@
      * @param stream
      *            the InputStream for the base wsdl file
      * @param strategy
-     *            the load stragety for the module
+     *            the load strategy for the module
      */
     public ModuleWSDLLocator(String uri, InputStream stream,
             ClassLoader classLoader) {
@@ -60,6 +59,19 @@
     }
 
     /**
+     * Returns null because no URI indirection is performed when 
+     * using the ModuleWSDLLocator.
+     * 
+     * @param importURI a URI specifying the document to import
+     * @param parent a URI specifying the location of the parent document doing
+     * the importing
+     * @return null
+     */
+    protected String getRedirectedURI(String importURI, String parent) {
+    	return null;
+    }
+    
+    /**
      * Returns an InputStream pointed at an imported wsdl pathname relative to
      * the parent document.
      * 
Index: modules/metadata/src/org/apache/axis2/jaxws/util/BaseWSDLLocator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/BaseWSDLLocator.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/BaseWSDLLocator.java	(working copy)
@@ -54,6 +54,16 @@
     abstract protected InputStream getInputStream(String importPath) throws IOException;
 
     /**
+     * Allows for a level of indirection, such as a catalog, when importing URIs.
+     * 
+     * @param importURI a URI specifying the document to import
+     * @param parent a URI specifying the location of the parent document doing
+     * the importing
+     * @return the resolved import location, or null if no indirection is performed
+     */
+    abstract protected String getRedirectedURI(String importURI, String parent);
+    
+    /**
       * Returns an InputSource "pointed at" the base document.
       */
     public InputSource getBaseInputSource() {
@@ -76,10 +86,13 @@
             log.debug("getImportInputSource, parentLocation= " + parentLocation + 
                     " relativeLocation= " + relativeLocation);
         }
-        InputSource inputSource = null;
         InputStream is = null;
         URL absoluteURL = null;
 
+        String redirectedURI = getRedirectedURI(relativeLocation, parentLocation);
+        if  (redirectedURI != null)
+        	relativeLocation = redirectedURI;
+        
         try {
             if (isAbsoluteImport(relativeLocation)) {
                 try{
Index: modules/metadata/src/org/apache/axis2/jaxws/util/WSDL4JWrapper.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/WSDL4JWrapper.java	(revision 627955)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/WSDL4JWrapper.java	(working copy)
@@ -21,6 +21,8 @@
 
 import org.apache.axis2.java.security.AccessController;
 import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.axis2.jaxws.catalog.impl.OASISCatalogManager;
 import org.apache.axis2.jaxws.i18n.Messages;
 import org.apache.axis2.jaxws.wsdl.WSDLReaderConfigurator;
 import org.apache.axis2.metadata.factory.ResourceFinderFactory;
@@ -46,7 +48,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.ConnectException;
-import java.net.URI;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.net.URLConnection;
@@ -70,10 +71,26 @@
 
     private URL wsdlURL;
     private String wsdlExplicitURL;
-
+    private JAXWSCatalogManager catalogManager = null;
+    
+    public WSDL4JWrapper(URL wsdlURL, JAXWSCatalogManager catalogManager) throws FileNotFoundException, 
+    UnknownHostException, ConnectException, IOException, WSDLException {
+    	super();
+    	JAXWSCatalogManager catMan = catalogManager;
+        this.catalogManager = catalogManager;
+        this.commonPartsURLConstructor(wsdlURL);
+    }
+   
     public WSDL4JWrapper(URL wsdlURL) throws FileNotFoundException, UnknownHostException,
-            ConnectException, IOException, WSDLException {
+    ConnectException, IOException, WSDLException {
         super();
+        this.commonPartsURLConstructor(wsdlURL);
+    }
+    
+    private void commonPartsURLConstructor(URL wsdlURL) throws FileNotFoundException, 
+    UnknownHostException, ConnectException, IOException, WSDLException {
+    	
+
         if(log.isDebugEnabled()) {
             log.debug("Looking for wsdl file on client: " + (wsdlURL != null ? 
                     wsdlURL.getPath():null));
@@ -330,7 +347,11 @@
         }
         return reader;
     }
-
+    public WSDL4JWrapper(URL wsdlURL, Definition wsdlDefinition, JAXWSCatalogManager catalogManager) throws WSDLException {
+        this(wsdlURL, wsdlDefinition);
+        this.catalogManager = catalogManager;
+    }
+    
     public WSDL4JWrapper(URL wsdlURL, Definition wsdlDefinition) throws WSDLException {
         super();
         this.wsdlURL = wsdlURL;
@@ -341,7 +362,11 @@
         }
     }
 
-
+    public WSDL4JWrapper(Definition wsdlDefinition, JAXWSCatalogManager catalogManager) throws WSDLException {
+    	this(wsdlDefinition);
+    	this.catalogManager = catalogManager;
+    }
+    
     public WSDL4JWrapper(Definition wsdlDefinition) throws WSDLException {
         super();
         if ((wsdlDefinition != null) && !(wsdlDefinition instanceof WSDLDefinitionWrapper)) {
@@ -405,8 +430,10 @@
                     try {
                         InputStream is = getInputStream(urlConn);
                         if(is != null) {
-                            final ModuleWSDLLocator locator = new ModuleWSDLLocator(wsdlExplicitURL, is, 
-                                    getThreadClassLoader());
+                            if (catalogManager == null)
+                                catalogManager = new OASISCatalogManager();
+                            final CatalogWSDLLocator locator = new CatalogWSDLLocator(wsdlExplicitURL, is, 
+                                    getThreadClassLoader(), catalogManager);
                             if(log.isDebugEnabled()) {
                                 log.debug("Loading WSDL using ModuleWSDLLocator from base " +
                                 		"location: " + wsdlExplicitURL);
Index: modules/metadata/src/org/apache/axis2/jaxws/util/CatalogWSDLLocator.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/CatalogWSDLLocator.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/CatalogWSDLLocator.java	(revision 0)
@@ -0,0 +1,204 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.axis2.jaxws.util;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URL;
+
+import javax.wsdl.xml.WSDLLocator;
+
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.xml.resolver.Catalog;
+
+/**
+ * This class is an implementation of a WSDL4J interface and is the
+ * implementation we supply to a WSDLReader instance. Its primary 
+ * goal is to assist with locating imported WSDL documents.
+ * 
+ */
+public class CatalogWSDLLocator extends BaseWSDLLocator implements WSDLLocator {
+
+    private static Log log = LogFactory.getLog(CatalogWSDLLocator.class);
+    private Catalog catalogResolver;
+    private ClassLoader classLoader;
+
+    /**
+     * CatalogWSDLLocator constructor.  Resolves WSDL URIs using Apache Commons Resolver API.
+     * @param uri
+     *            the path for the base wsdl file, relative to the module root
+     * @param stream
+     *            the InputStream for the base wsdl file
+     * @param classloader
+     *            the ClassLoader for the module
+     * @param catalogManager
+     *            the OASISCatalogManager which will determine the settings for the XML catalog
+     */
+    public CatalogWSDLLocator(String uri, InputStream stream,
+            ClassLoader classLoader, JAXWSCatalogManager catalogManager) {
+        baseURI = convertURI(uri);
+        baseInputStream = stream;
+        this.classLoader = classLoader;
+        this.catalogResolver = catalogManager.getCatalog();
+    }
+
+    /**
+     * Resolves WSDL URIs using Apache Commons Resolver API.
+     * 
+     * @param importURI a URI specifying the document to import
+     * @param parent a URI specifying the location of the parent document doing
+     * the importing
+     * @return the resolved import location, or null if no indirection is performed
+     */
+    public String getRedirectedURI(String importURI, String parent) {
+        String resolvedImportLocation = null;
+
+        try {
+            resolvedImportLocation = this.catalogResolver.resolveSystem(importURI);
+            if (resolvedImportLocation == null) {
+                resolvedImportLocation = catalogResolver.resolveURI(importURI);
+            }
+            if (resolvedImportLocation == null) {
+                resolvedImportLocation = catalogResolver.resolvePublic(importURI, parent);
+            }
+        
+        } catch (IOException e) {
+            throw new RuntimeException("Catalog resolution failed", e);
+        }
+        return resolvedImportLocation;
+    }
+    
+    /**
+     * Returns an InputStream pointed at an imported wsdl pathname relative to
+     * the parent document.
+     * 
+     * @param importPath
+     *            identifies the WSDL file within the context
+     * @return a stream of the WSDL file
+     */
+    protected InputStream getInputStream(String importPath) throws IOException {
+        URL importURL = null;
+        InputStream is = null;
+        try {
+            importURL = new URL(importPath);
+            is = importURL.openStream();
+        }
+        catch (Throwable t) {
+            // No FFDC required
+        }
+        if (is == null) {
+            try {
+                is = classLoader.getResourceAsStream(importPath);
+            }
+            catch (Throwable t) {
+                // No FFDC required
+            }
+        }
+        if (is == null) {
+            try {
+                File file = new File(importPath);
+                is = file.toURL().openStream();
+            }
+            catch (Throwable t) {
+                // No FFDC required
+            }
+        }
+        if (is == null) {
+            try {
+                URI uri = new URI(importPath);
+                is = uri.toURL().openStream();
+            }
+            catch (Throwable t) {
+                // No FFDC required
+            }
+        }
+        return is;
+    }
+
+    /**
+     * Return the wsdlLocation in URL form. WsdlLocation could be URL, relative
+     * module path, full absolute path.
+     * 
+     * @param wsdlLocation
+     *            the location of a WSDL document in the form of a URL string, a
+     *            relative pathname (relative to the root of a module, or a
+     *            full-qualified absolute pathname
+     * @return the location of the WSDL document in the form of a URL
+     */
+    public URL getWsdlUrl(String wsdlLocation) {
+        URL streamURL = null;
+        InputStream is = null;
+        URI pathURI = null;
+
+        // If the WSDL is present in the catalog, use the location specified 
+        // in the catalog.  If this attempt results in failure, use the original
+        // location
+        // TODO:  Provide Allowance for Catalog
+        // Note:  This method is not called.
+        
+        try {
+            streamURL = new URL(wsdlLocation);
+            is = streamURL.openStream();
+            is.close();
+        }
+        catch (Throwable t) {
+            // No FFDC required
+        }
+
+        if (is == null) {
+            try {
+                pathURI = new URI(wsdlLocation);
+                streamURL = pathURI.toURL();
+                is = streamURL.openStream();
+                is.close();
+            }
+            catch (Throwable t) {
+                // No FFDC required
+            }
+        }
+
+        if (is == null) {
+            try {
+                File file = new File(wsdlLocation);
+                streamURL = file.toURL();
+                is = streamURL.openStream();
+                is.close();
+            }
+            catch (Throwable t) {
+                // No FFDC required
+            }
+        }
+
+        if (log.isDebugEnabled() && streamURL == null) {
+            log.debug("Absolute wsdlLocation could not be determined: "
+                    + wsdlLocation);
+        }
+
+        return streamURL;
+    }
+
+    public void close() {
+    }
+}
Index: modules/metadata/src/org/apache/axis2/jaxws/util/CatalogURIResolver.java
===================================================================
--- modules/metadata/src/org/apache/axis2/jaxws/util/CatalogURIResolver.java	(revision 0)
+++ modules/metadata/src/org/apache/axis2/jaxws/util/CatalogURIResolver.java	(revision 0)
@@ -0,0 +1,209 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.util;
+
+import org.apache.axis2.jaxws.catalog.JAXWSCatalogManager;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.ws.commons.schema.resolver.URIResolver;
+import org.apache.xml.resolver.Catalog;
+
+import org.xml.sax.InputSource;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+
+/**
+ * This resolver provides the means of resolving the imports and includes of a
+ * given schema document. It allows the use of the Apache Commons Resolver API
+ * to redirect resource requests to alternative locations.
+ */
+public class CatalogURIResolver implements URIResolver {
+
+    private static Log log = LogFactory.getLog(CatalogWSDLLocator.class);
+    private Catalog catalogResolver;
+    
+    /**
+     * CatalogURIResolver constructor.  Resolves WSDL URIs using Apache Commons Resolver API.
+     * @param catalogManager
+     *            the OASISCatalogManager which will determine the settings for the XML catalog
+     */
+    
+    public CatalogURIResolver(JAXWSCatalogManager catalogManager) {
+        this.catalogResolver = catalogManager.getCatalog();
+    }
+    
+    /**
+     * Resolves URIs using Apache Commons Resolver API.
+     * 
+     * @param importURI a URI specifying the document to import
+     * @param parent a URI specifying the location of the parent document doing
+     * the importing
+     * @return the resolved import location, or null if no indirection is performed
+     */
+    public String getRedirectedURI(String importURI, String parent) {
+        String resolvedImportLocation = null;
+        try {
+            resolvedImportLocation = this.catalogResolver.resolveSystem(importURI);
+            if (resolvedImportLocation == null) {
+                resolvedImportLocation = catalogResolver.resolveURI(importURI);
+            }
+            if (resolvedImportLocation == null) {
+                resolvedImportLocation = catalogResolver.resolvePublic(importURI, parent);
+            }
+        
+        } catch (IOException e) {
+            throw new RuntimeException("Catalog resolution failed", e);
+        }
+
+        return resolvedImportLocation;
+    }
+    
+    /**
+     * As for the resolver the public ID is the target namespace of the
+     * schema and the schemaLocation is the value of the schema location
+     * @param namespace
+     * @param schemaLocation
+     * @param baseUri
+     */
+    public InputSource resolveEntity(String namespace,
+                                     String schemaLocation,
+                                     String baseUri){
+
+        if (baseUri!=null) 
+        {
+        	String redirectedURI = getRedirectedURI(namespace, baseUri);
+        	if (redirectedURI != null)	
+        	   schemaLocation = redirectedURI;
+            try
+            {
+                File baseFile = new File(baseUri);
+                if (baseFile.exists()) baseUri = baseFile.toURI().toString();
+                
+                String ref = new URI(baseUri).resolve(new URI(schemaLocation)).toString();
+
+                return new InputSource(ref);
+            }
+            catch (URISyntaxException e1)
+            {
+                throw new RuntimeException(e1);
+            }
+
+        }
+        return new InputSource(schemaLocation);
+
+    }
+
+    /**
+     * Find whether a given uri is relative or not
+     *
+     * @param uri
+     * @return boolean
+     */
+    protected boolean isAbsolute(String uri) {
+        return uri.startsWith("http://");
+    }
+
+    /**
+     * This is essentially a call to "new URL(contextURL, spec)"
+     * with extra handling in case spec is
+     * a file.
+     *
+     * @param contextURL
+     * @param spec
+     * @throws java.io.IOException
+     */
+    protected URL getURL(URL contextURL, String spec) throws IOException {
+
+        // First, fix the slashes as windows filenames may have backslashes
+        // in them, but the URL class wont do the right thing when we later
+        // process this URL as the contextURL.
+        String path = spec.replace('\\', '/');
+
+        // See if we have a good URL.
+        URL url;
+
+        try {
+
+            // first, try to treat spec as a full URL
+            url = new URL(contextURL, path);
+
+            // if we are deail with files in both cases, create a url
+            // by using the directory of the context URL.
+            if ((contextURL != null) && url.getProtocol().equals("file")
+                    && contextURL.getProtocol().equals("file")) {
+                url = getFileURL(contextURL, path);
+            }
+        } catch (MalformedURLException me) {
+
+            // try treating is as a file pathname
+            url = getFileURL(contextURL, path);
+        }
+
+        // Everything is OK with this URL, although a file url constructed
+        // above may not exist.  This will be caught later when the URL is
+        // accessed.
+        return url;
+    }    // getURL
+
+    /**
+     * Method getFileURL
+     *
+     * @param contextURL
+     * @param path
+     * @throws IOException
+     */
+    protected URL getFileURL(URL contextURL, String path)
+            throws IOException {
+
+        if (contextURL != null) {
+
+            // get the parent directory of the contextURL, and append
+            // the spec string to the end.
+            String contextFileName = contextURL.getFile();
+            URL parent = null;
+            //the logic for finding the parent file is this.
+            //1.if the contextURI represents a file then take the parent file
+            //of it
+            //2. If the contextURI represents a directory, then take that as
+            //the parent
+            File parentFile;
+            File contextFile = new File(contextFileName);
+            if (contextFile.isDirectory()){
+                parentFile = contextFile;
+            }else{
+                parentFile = contextFile.getParentFile();
+            }
+
+            if (parentFile != null) {
+                parent = parentFile.toURL();
+            }
+            if (parent != null) {
+                return new URL(parent, path);
+            }
+        }
+
+        return new URL("file", "", path);
+    }    // getFileURL
+}
Index: modules/metadata/pom.xml
===================================================================
--- modules/metadata/pom.xml	(revision 627955)
+++ modules/metadata/pom.xml	(working copy)
@@ -48,6 +48,10 @@
 			<groupId>org.apache.axis2</groupId>
 			<artifactId>axis2-saaj</artifactId>
 			<version>${version}</version>
+        </dependency>
+        <dependency>
+            <groupId>xml-resolver</groupId>
+            <artifactId>xml-resolver</artifactId>
 		</dependency>
 		<dependency>
 			<groupId>com.sun.xml.bind</groupId>
Index: modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataTest.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataTest.java	(revision 627955)
+++ modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataTest.java	(working copy)
@@ -20,6 +20,7 @@
 
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.jaxws.ClientConfigurationFactory;
+import org.apache.axis2.jaxws.catalog.impl.OASISCatalogManager;
 import org.apache.axis2.jaxws.description.DescriptionTestUtils2;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.description.builder.DescriptionBuilderComposite;
@@ -59,6 +60,8 @@
     static final String originalWsdl_portLocalPart = "portLocalPart";
     static final String overridenWsdl_portLocalPart = "portLocalPartOverriden";
     static final String otherWsdl_portLocalPart = "portLocalPartOther";
+    
+    static final String uniqueCatalog = "test-resources/unique-catalog.xml";
 
     /**
      * Test Service.create(QName) with no composite specified 
@@ -355,6 +358,34 @@
     }
     
     /**
+     * Service.create(QName) with a composite that specifies a CatalogManager override 
+     */
+    public void test1ArgServiceOverrideCatalogManager() {
+        QName serviceQName = new QName(namespaceURI, svcLocalPart);
+        DescriptionBuilderComposite composite = new DescriptionBuilderComposite();
+        OASISCatalogManager catalogManager = new OASISCatalogManager();
+        catalogManager.setCatalogFiles(getCatalogLocation(uniqueCatalog));
+        composite.setCatalogManager(catalogManager);
+        // Use the proprietary SPI to create a service with additional metadata specified
+        ServiceDelegate.setServiceMetadata(composite);
+        Service service = Service.create(serviceQName);
+        
+        assertNotNull(service);
+        // Verify that the composite has been reset so that it would not affect the next Service
+        assertNull(ServiceDelegate.getServiceMetadata());
+        ServiceDelegate serviceDelegate = DescriptionTestUtils2.getServiceDelegate(service);
+        assertNotNull(serviceDelegate);
+        ServiceDescription serviceDesc = serviceDelegate.getServiceDescription();
+        assertNotNull(serviceDesc);
+        DescriptionBuilderComposite dbcInServiceDesc = DescriptionTestUtils2.getServiceDescriptionComposite(serviceDesc);
+        assertSame(composite, dbcInServiceDesc.getSparseComposite(serviceDelegate));
+        assertEquals(Service.class, dbcInServiceDesc.getCorrespondingClass());
+        // Verify that the CatalogManager for the Service uses the unique catalog file.
+        String serviceCatalogFile = (String) dbcInServiceDesc.getSparseComposite(serviceDelegate).getCatalogManager().getCatalogFiles().get(0);
+        assertEquals(serviceCatalogFile, getCatalogLocation(uniqueCatalog));
+    }
+    
+    /**
      * Service.create(URL, QName) with a composite that specifies a wsdlLocation override 
      */
     public void test2ArgServiceOverrideWsdlLocation() {
@@ -392,6 +423,36 @@
     }
     
     /**
+     * Service.create(URL, QName) with a composite that specifies a CatalogManager override 
+     */
+    public void test2ArgServiceOverrideCatalogManager() {
+        QName serviceQName = new QName(namespaceURI, svcLocalPart);
+        URL wsdlUrl = getWsdlURL(otherWsdl);
+        DescriptionBuilderComposite composite = new DescriptionBuilderComposite();
+        OASISCatalogManager catalogManager = new OASISCatalogManager();
+        catalogManager.setCatalogFiles(getCatalogLocation(uniqueCatalog));
+        composite.setCatalogManager(catalogManager);
+        // Use the proprietary SPI to create a service with additional metadata specified
+        ServiceDelegate.setServiceMetadata(composite);
+        Service service = Service.create(wsdlUrl, serviceQName);
+        
+        assertNotNull(service);
+        // Verify that the composite has been reset so that it would not affect the next Service
+        assertNull(ServiceDelegate.getServiceMetadata());
+        ServiceDelegate serviceDelegate = DescriptionTestUtils2.getServiceDelegate(service);
+        assertNotNull(serviceDelegate);
+        ServiceDescription serviceDesc = serviceDelegate.getServiceDescription();
+        assertNotNull(serviceDesc);
+        DescriptionBuilderComposite dbcInServiceDesc = DescriptionTestUtils2.getServiceDescriptionComposite(serviceDesc);
+        assertSame(composite, dbcInServiceDesc.getSparseComposite(serviceDelegate));
+        assertEquals(Service.class, dbcInServiceDesc.getCorrespondingClass());
+
+        // Verify that the CatalogManager for the Service uses the unique catalog file.
+        String serviceCatalogFile = (String) dbcInServiceDesc.getSparseComposite(serviceDelegate).getCatalogManager().getCatalogFiles().get(0);
+        assertEquals(serviceCatalogFile, getCatalogLocation(uniqueCatalog));
+    }
+
+    /**
      * Generated service constructor() with a composite that specifies a wsdlLocation override
      */
     public void testNoArgGeneratedServiceOverrideWsdlLocation() {
@@ -431,6 +492,34 @@
     }
     
     /**
+     * Generated service constructor() with a composite that specifies a CatalogManager override
+     */
+    public void testNoArgGeneratedServiceOverrideCatalogManager() {
+        DescriptionBuilderComposite composite = new DescriptionBuilderComposite();
+        OASISCatalogManager catalogManager = new OASISCatalogManager();
+        catalogManager.setCatalogFiles(getCatalogLocation(uniqueCatalog));
+        composite.setCatalogManager(catalogManager);
+        ServiceDelegate.setServiceMetadata(composite);
+
+        Service service = new ClientMetadataGeneratedService();
+
+        assertNotNull(service);
+        assertNull(ServiceDelegate.getServiceMetadata());
+        
+        ServiceDelegate serviceDelegate = DescriptionTestUtils2.getServiceDelegate(service);
+        assertNotNull(serviceDelegate);
+        ServiceDescription serviceDesc = serviceDelegate.getServiceDescription();
+        assertNotNull(serviceDesc);
+        DescriptionBuilderComposite dbcInServiceDesc = DescriptionTestUtils2.getServiceDescriptionComposite(serviceDesc);
+        assertSame(composite, dbcInServiceDesc.getSparseComposite(serviceDelegate));
+        assertEquals(ClientMetadataGeneratedService.class, dbcInServiceDesc.getCorrespondingClass());
+
+        // Verify that the CatalogManager for the Service uses the unique catalog file.
+        String serviceCatalogFile = (String) dbcInServiceDesc.getSparseComposite(serviceDelegate).getCatalogManager().getCatalogFiles().get(0);
+        assertEquals(serviceCatalogFile, getCatalogLocation(uniqueCatalog));
+    }
+    
+    /**
      * Generated service constructor(URL, QName) with a composite that specifies a wsdlLocation override
      */
     public void test2ArgGeneratedServiceOverrideWsdlLocation() {
@@ -516,6 +605,35 @@
     }
     
     /**
+     * Generated service constructor(URL, QName) with a composite that specifies a 
+     * Catalog Manager override.  
+     */
+    public void test2ArgGeneratedServiceOverrideCatalogManager() {
+        DescriptionBuilderComposite composite = new DescriptionBuilderComposite();
+        OASISCatalogManager catalogManager = new OASISCatalogManager();
+        catalogManager.setCatalogFiles(getCatalogLocation(uniqueCatalog));
+        composite.setCatalogManager(catalogManager);
+        ServiceDelegate.setServiceMetadata(composite);
+
+        Service service = new ClientMetadataGeneratedService(getWsdlURL(otherWsdl),
+                                                             new QName(namespaceURI, svcLocalPart));
+
+        assertNotNull(service);
+        assertNull(ServiceDelegate.getServiceMetadata());
+        
+        ServiceDelegate serviceDelegate = DescriptionTestUtils2.getServiceDelegate(service);
+        assertNotNull(serviceDelegate);
+        ServiceDescription serviceDesc = serviceDelegate.getServiceDescription();
+        assertNotNull(serviceDesc);
+        DescriptionBuilderComposite dbcInServiceDesc = DescriptionTestUtils2.getServiceDescriptionComposite(serviceDesc);
+        assertSame(composite, dbcInServiceDesc.getSparseComposite(serviceDelegate));
+        assertEquals(ClientMetadataGeneratedService.class, dbcInServiceDesc.getCorrespondingClass());
+
+        // Verify that the CatalogManager for the Service uses the unique catalog file.
+        String serviceCatalogFile = (String) dbcInServiceDesc.getSparseComposite(serviceDelegate).getCatalogManager().getCatalogFiles().get(0);
+        assertEquals(serviceCatalogFile, getCatalogLocation(uniqueCatalog));
+    }
+    /**
      * Generated service constructor(URL, QName) with a composite that specifies a wsdlLocation override
      * where the override is a fully specifed URL to a file.
      */
@@ -848,6 +966,18 @@
     }
     
     /**
+     * Prepends the base directory and the path where the test Catalog lives to a filename.
+     * @param catalogFileName
+     * @return
+     */
+    static String getCatalogLocation(String catalogFileName) {
+        String wsdlLocation = null;
+        String baseDir = System.getProperty("basedir",".");
+        wsdlLocation = baseDir + "/test-resources/catalog/" + catalogFileName;
+        return catalogFileName;
+    }
+    
+    /**
      * Given a simple file name (with no base dictory or path), returns a URL to the WSDL file
      * with the base directory and path prepended.
      * 
Index: modules/jaxws/test/org/apache/axis2/jaxws/catalog/MultiRedirectionCatalogTest.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/catalog/MultiRedirectionCatalogTest.java	(revision 0)
+++ modules/jaxws/test/org/apache/axis2/jaxws/catalog/MultiRedirectionCatalogTest.java	(revision 0)
@@ -0,0 +1,147 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.catalog;
+
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+import javax.wsdl.Definition;
+import javax.wsdl.Input;
+import javax.wsdl.Message;
+import javax.wsdl.Operation;
+import javax.wsdl.Part;
+import javax.wsdl.PortType;
+import javax.wsdl.WSDLException;
+import javax.xml.namespace.QName;
+
+import org.apache.axis2.jaxws.catalog.impl.OASISCatalogManager;
+import org.apache.axis2.jaxws.util.WSDL4JWrapper;
+
+import junit.framework.TestCase;
+
+/**
+ * Tests the use of the Apache Commons Resolver API to resolve URIs.
+ */
+public class MultiRedirectionCatalogTest extends TestCase {
+	private static final String ROOT_WSDL = "/test-resources/catalog/root.wsdl";
+	private static final String TEST_RESOURCES = "test-resources/catalog/";
+	
+	public void testOneCatalogSuccess() {
+		verifySuccess(ROOT_WSDL, TEST_RESOURCES + "basic-catalog.xml");
+	}
+	
+	public void testNextCatalogSuccess() {
+		verifySuccess(ROOT_WSDL, TEST_RESOURCES + "root-catalog.xml");
+	}
+	
+	public void testNextCatalogFailure() {
+		verifyFailure(ROOT_WSDL, TEST_RESOURCES + "fail/root-catalog.xml");		
+	}
+	
+	public void testNoCatEntryForFirstImport() {
+		verifyFailure(ROOT_WSDL, TEST_RESOURCES + "fail/firstImportFail.xml");
+	}
+	
+	public void testNoCatEntryForSecondImport() {
+		verifyFailure(ROOT_WSDL, TEST_RESOURCES + "fail/secondImportFail.xml");
+	}
+	
+	public void testNoCatEntryForThirdImport() {
+		verifyFailure(ROOT_WSDL, TEST_RESOURCES + "fail/thirdImportFail.xml");
+	}
+	
+	/**
+	 * Ensure that the catalog is used to locate imported resources.
+	 */
+	private void verifySuccess(String wsdlLocation, String catalogFile) {
+	    URL url = getURLFromLocatoinString(wsdlLocation);
+	    
+	    try{
+			OASISCatalogManager catalogManager = new OASISCatalogManager();
+			catalogManager.setCatalogFiles(catalogFile);
+	    	WSDL4JWrapper w4j = new WSDL4JWrapper(url, catalogManager);
+	    	Definition wsdlDef = w4j.getDefinition();
+	    	assertNotNull(wsdlDef);   
+	    	QName portTypeName = new QName("http://www.example.com/test/calculator",
+	    			                       "CalculatorService",
+	    			                       "");
+	    	PortType portType = wsdlDef.getPortType(portTypeName);
+	    	assertNotNull(portType);
+	    	Operation clearOp = portType.getOperation("clear", null, null);
+	    	assertNotNull(clearOp);
+	    	Input clearOpInput = clearOp.getInput();
+	    	assertNotNull(clearOpInput);
+	    	Message msg = clearOpInput.getMessage();
+	    	assertNotNull(msg);
+	    	Part expectedPart = msg.getPart("part1");
+            assertNotNull(expectedPart);
+	    }catch(Exception e){
+	    	e.printStackTrace();
+	    	fail();
+	    }
+	}	
+	
+	/**
+	 * Ensure that the test case is valid by failing in the absence of a needed
+	 * catalog entry.
+	 */
+	private void verifyFailure(String wsdlLocation, String catalogFile) {
+	    URL url = getURLFromLocatoinString(wsdlLocation);
+	    
+	    try{
+			OASISCatalogManager catalogManager = new OASISCatalogManager();
+			catalogManager.setCatalogFiles(catalogFile);
+	    	WSDL4JWrapper w4j = new WSDL4JWrapper(url, catalogManager);
+	    	w4j.getDefinition();
+	    	fail("Should have received a WSDLException due to the invalid WSDL location " 
+	        		+ "not redirected by the catalog.");
+	    } catch(WSDLException e) {
+	    	// do nothing - successful test case
+	    } catch(Exception e){
+	    	e.printStackTrace();
+	    	fail();
+	    }
+	}
+	
+	/**
+	 * Given a String representing a file location, return a URL.
+	 * @param wsdlLocation
+	 * @return
+	 */
+	private URL getURLFromLocatoinString(String wsdlLocation) {
+		URL url = null;
+	    try {
+	    	try{
+	        	String baseDir = new File(System.getProperty("basedir",".")).getCanonicalPath();
+	        	wsdlLocation = new File(baseDir + wsdlLocation).getAbsolutePath();
+        	}catch(Exception e){
+        		e.printStackTrace();
+        		fail();
+        	}
+	       	File file = new File(wsdlLocation);
+	       	url = file.toURL();
+	    } catch (MalformedURLException e) {
+	        e.printStackTrace();
+	        fail();
+	    }
+	    
+	    return url;
+	}
+}
Index: modules/jaxws/test/org/apache/axis2/jaxws/catalog/XMLCatalogTests.java
===================================================================
--- modules/jaxws/test/org/apache/axis2/jaxws/catalog/XMLCatalogTests.java	(revision 0)
+++ modules/jaxws/test/org/apache/axis2/jaxws/catalog/XMLCatalogTests.java	(revision 0)
@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *      
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.axis2.jaxws.catalog;
+
+import java.io.File;
+
+import javax.xml.namespace.QName;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+import org.apache.axis2.jaxws.catalog.impl.OASISCatalogManager;
+import org.apache.axis2.jaxws.util.CatalogURIResolver;
+import org.apache.ws.commons.schema.XmlSchema;
+import org.apache.ws.commons.schema.XmlSchemaCollection;
+import org.w3c.dom.Document;
+
+import junit.framework.TestCase;
+
+/**
+ * Tests the use of the Apache Commons Resolver API to resolve URIs.
+ */
+public class XMLCatalogTests extends TestCase {
+	private static final String TEST_RESOURCES = "test-resources/catalog/";
+	private static final String BASIC_CATALOG = TEST_RESOURCES + "basic-catalog.xml";
+	private static final String IMPORT_BASE = TEST_RESOURCES + "importBase.xsd";
+	private static final String IMPORT_BAD = TEST_RESOURCES + "importBad.xsd";	
+
+    /**
+     * Verify that all the expected conditions are met (the control case).
+     * @throws Exception
+     */
+    public void testSchemaImportNoCatalogNoNeed() throws Exception{
+        File file = new File(IMPORT_BASE);
+        //create a DOM document
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
+        Document doc = documentBuilderFactory.newDocumentBuilder().
+                parse(file.toURL().toString());
+
+        XmlSchemaCollection schemaCol = new XmlSchemaCollection();
+        XmlSchema schema = schemaCol.read(doc,file.toURL().toString(),null);
+        assertNotNull(schema);
+
+        assertNotNull(schema.getTypeByName(new QName("http://soapinterop.org/xsd2","SOAPStruct")));
+        assertNotNull(schema.getElementByName(new QName("http://soapinterop.org/xsd2","SOAPWrapper")));
+    }
+    
+    /**
+     * Verify that the element is not present when using IMPORT_BAD in the 
+     * absence of a CatalogManager.
+     * @throws Exception
+     */
+    public void testSchemaImportCatalogNeedNotPresent() throws Exception{
+        File file = new File(IMPORT_BAD);
+        //create a DOM document
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
+        Document doc = documentBuilderFactory.newDocumentBuilder().
+                parse(file.toURL().toString());
+
+        XmlSchemaCollection schemaCol = new XmlSchemaCollection();
+        XmlSchema schema = schemaCol.read(doc,file.toURL().toString(),null);
+        assertNotNull(schema);
+
+        assertNotNull(schema.getTypeByName(new QName("http://soapinterop.org/xsd2","SOAPStruct")));
+        assertNull(schema.getElementByName(new QName("http://soapinterop.org/xsd2","SOAPWrapper")));
+    }
+    
+    /**
+     * Verify that the element is present using IMPORT_BAD if the XML Resolver 
+     * is used.  This test is for a simple, single-file catalog.
+     * @throws Exception
+     */
+    public void testSchemaImportBasicCatalog() throws Exception{
+		OASISCatalogManager catalogManager = new OASISCatalogManager();
+		catalogManager.setCatalogFiles(BASIC_CATALOG);
+		
+        File file = new File(IMPORT_BAD);
+        //create a DOM document
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
+        Document doc = documentBuilderFactory.newDocumentBuilder().
+                parse(file.toURL().toString());
+
+        XmlSchemaCollection schemaCol = new XmlSchemaCollection();
+        schemaCol.setSchemaResolver(new CatalogURIResolver(catalogManager));
+        XmlSchema schema = schemaCol.read(doc,file.toURL().toString(),null);
+        assertNotNull(schema);
+
+        assertNotNull(schema.getTypeByName(new QName("http://soapinterop.org/xsd2","SOAPStruct")));
+        assertNotNull(schema.getElementByName(new QName("http://soapinterop.org/xsd2","SOAPWrapper")));
+    }
+}
Index: modules/jaxws/test-resources/catalog/dir1/abstract.wsdl
===================================================================
--- modules/jaxws/test-resources/catalog/dir1/abstract.wsdl	(revision 0)
+++ modules/jaxws/test-resources/catalog/dir1/abstract.wsdl	(revision 0)
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<wsdl:definitions
+  targetNamespace="http://www.example.com/test/messageTypes"
+  xmlns="http://www.example.com/test/messageTypes"
+  xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
+  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
+  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+  xmlns:ns1="urn:types1"
+  xmlns:ns2="urn:types2">
+  
+  <wsdl:types xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+  
+    <xs:schema attributeFormDefault="unqualified"
+      elementFormDefault="qualified"
+      targetNamespace="http://www.example.com/test/messageTypes"
+      xmlns:ns="http://www.example.com/test/messageTypes" 
+      xmlns:xs="http://www.w3.org/2001/XMLSchema">
+      <xs:element name="getTotal">
+        <xs:complexType>
+          <xs:sequence/>
+        </xs:complexType>
+      </xs:element>     
+      <xs:element name="getTotalResponse">
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element name="return" type="xs:int"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:import namespace="urn:types1" schemaLocation="doesNotExist.xsd"/>
+    </xs:schema>
+    
+  </wsdl:types>
+  <wsdl:message name="getTotalRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="getTotal" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="getTotalResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="getTotalResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="addRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:add" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="addResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:addResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="clearRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:clear" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="clearResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:clearResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="divideRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:divide" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="divideResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:divideResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="divideByZeroException" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:divideByZeroFault" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="multiplyRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:multiply" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="multiplyResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns2:multiplyResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="subtractRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns2:subtract" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="subtractResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns2:subtractResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  
+</wsdl:definitions>
Index: modules/jaxws/test-resources/catalog/dir2/imported1.xsd
===================================================================
--- modules/jaxws/test-resources/catalog/dir2/imported1.xsd	(revision 0)
+++ modules/jaxws/test-resources/catalog/dir2/imported1.xsd	(revision 0)
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<xsd:schema targetNamespace="urn:types1"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        elementFormDefault="qualified">
+      <xsd:import namespace="urn:types2" schemaLocation="http://example.com/neverExisted.xsd"/>
+      <xsd:element name="add">
+        <xsd:complexType>
+          <xsd:sequence>
+            <xsd:element name="param0" type="xsd:int"/>
+          </xsd:sequence>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="addResponse">
+        <xsd:complexType>
+          <xsd:sequence/>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="clear">
+        <xsd:complexType>
+          <xsd:sequence/>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="clearResponse">
+        <xsd:complexType>
+          <xsd:sequence/>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="divide">
+        <xsd:complexType>
+          <xsd:sequence>
+            <xsd:element name="param0" type="xsd:int"/>
+          </xsd:sequence>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="divideResponse">
+        <xsd:complexType>
+          <xsd:sequence/>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="divideByZeroFault" type="xsd:int"/>
+      <xsd:element name="multiply">
+        <xsd:complexType>
+          <xsd:sequence>
+            <xsd:element name="param0" type="xsd:int"/>
+          </xsd:sequence>
+        </xsd:complexType>
+      </xsd:element>
+  </xsd:schema>
+  
\ No newline at end of file
Index: modules/jaxws/test-resources/catalog/dir3/imported2.xsd
===================================================================
--- modules/jaxws/test-resources/catalog/dir3/imported2.xsd	(revision 0)
+++ modules/jaxws/test-resources/catalog/dir3/imported2.xsd	(revision 0)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<xsd:schema targetNamespace="urn:types2"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        elementFormDefault="qualified">
+      <xsd:element name="multiplyResponse">
+        <xsd:complexType>
+          <xsd:sequence/>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="subtract">
+        <xsd:complexType>
+          <xsd:sequence>
+            <xsd:element name="param0" type="xsd:int"/>
+          </xsd:sequence>
+        </xsd:complexType>
+      </xsd:element>
+      <xsd:element name="subtractResponse">
+        <xsd:complexType>
+          <xsd:sequence/>
+        </xsd:complexType>
+      </xsd:element>
+  </xsd:schema>
+  
\ No newline at end of file
Index: modules/jaxws/test-resources/catalog/importBase.xsd
===================================================================
--- modules/jaxws/test-resources/catalog/importBase.xsd	(revision 0)
+++ modules/jaxws/test-resources/catalog/importBase.xsd	(revision 0)
@@ -0,0 +1,29 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<schema targetNamespace="http://soapinterop.org/xsd"
+        xmlns="http://www.w3.org/2001/XMLSchema"
+        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        xmlns:xsd1="http://soapinterop.org/xsd"
+        xmlns:xsd2="http://soapinterop.org/xsd2"
+        elementFormDefault="qualified">
+    <import namespace="http://soapinterop.org/xsd2" schemaLocation="importAux.xsd"></import>
+    <element name="echoStructParam" type="xsd2:SOAPStruct"/>
+</schema>
Index: modules/jaxws/test-resources/catalog/importAux.xsd
===================================================================
--- modules/jaxws/test-resources/catalog/importAux.xsd	(revision 0)
+++ modules/jaxws/test-resources/catalog/importAux.xsd	(revision 0)
@@ -0,0 +1,34 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<schema targetNamespace="http://soapinterop.org/xsd2"
+        xmlns="http://www.w3.org/2001/XMLSchema"
+        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        xmlns:xsd1="http://soapinterop.org/xsd2"
+        elementFormDefault="qualified">
+    <complexType name="SOAPStruct">
+        <all>
+            <element name="varFloat" type="xsd:float"/>
+            <element name="varInt" type="xsd:int"/>
+            <element name="varString" type="xsd:string"/>
+        </all>
+    </complexType>
+    <element name="SOAPWrapper" type="xsd:string"/>
+</schema>
Index: modules/jaxws/test-resources/catalog/importAux2.xsd
===================================================================
--- modules/jaxws/test-resources/catalog/importAux2.xsd	(revision 0)
+++ modules/jaxws/test-resources/catalog/importAux2.xsd	(revision 0)
@@ -0,0 +1,34 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<schema targetNamespace="http://soapinterop.org/xsd2"
+        xmlns="http://www.w3.org/2001/XMLSchema"
+        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        xmlns:xsd1="http://soapinterop.org/xsd2"
+        elementFormDefault="qualified">
+    <complexType name="SOAPStruct">
+        <all>
+            <element name="varFloat" type="xsd:float"/>
+            <element name="varInt" type="xsd:int"/>
+            <element name="varString" type="xsd:string"/>
+        </all>
+    </complexType>
+    <element name="SOAPWrapper2" type="xsd:string"/>
+</schema>
Index: modules/jaxws/test-resources/catalog/basic-catalog.xml
===================================================================
--- modules/jaxws/test-resources/catalog/basic-catalog.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/basic-catalog.xml	(revision 0)
@@ -0,0 +1,23 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+   <system
+       systemId="http://java.sun.com/xml/ns/j2ee/application_1_4.xsd"
+       uri="catalog/schema/application_1_4.xsd" />
+   <system
+       systemId="http://soapinterop.org/xsd2"
+       uri="importAux.xsd" />
+   <system
+       systemId="http://example.com/test/doesnotexist.wsdl"
+       uri="dir1/abstract.wsdl" />
+   <system
+       systemId="doesnotexist.xsd"
+       uri="dir2/imported1.xsd" />
+   <system
+       systemId="http://example.com/neverExisted.xsd"
+       uri="dir3/imported2.xsd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"
+       uri="catalog/dtd/ejb-jar.dtd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"
+       uri="catalog/dtd/ejb-jar_2_0.dtd" />
+</catalog>
Index: modules/jaxws/test-resources/catalog/root-catalog.xml
===================================================================
--- modules/jaxws/test-resources/catalog/root-catalog.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/root-catalog.xml	(revision 0)
@@ -0,0 +1,15 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+   <system
+       systemId="http://java.sun.com/xml/ns/j2ee/application_1_4.xsd"
+       uri="catalog/schema/application_1_4.xsd" />
+   <system
+       systemId="http://soapinterop.org/xsd2"
+       uri="importAux.xsd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"
+       uri="catalog/dtd/ejb-jar.dtd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"
+       uri="catalog/dtd/ejb-jar_2_0.dtd" />
+   <nextCatalog catalog="child-catalog.xml"/>
+</catalog>
Index: modules/jaxws/test-resources/catalog/child-catalog.xml
===================================================================
--- modules/jaxws/test-resources/catalog/child-catalog.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/child-catalog.xml	(revision 0)
@@ -0,0 +1,15 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+   <system
+       systemId="http://example.com/test/doesnotexist.wsdl"
+       uri="dir1/abstract.wsdl" />
+   <system
+       systemId="doesnotexist.xsd"
+       uri="dir2/imported1.xsd" />
+   <system
+       systemId="http://example.com/neverExisted.xsd"
+       uri="dir3/imported2.xsd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"
+       uri="catalog/dtd/ejb-jar.dtd" />
+   <nextCatalog catalog="next.xml"/>
+</catalog>
Index: modules/jaxws/test-resources/catalog/root.wsdl
===================================================================
--- modules/jaxws/test-resources/catalog/root.wsdl	(revision 0)
+++ modules/jaxws/test-resources/catalog/root.wsdl	(revision 0)
@@ -0,0 +1,185 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<wsdl:definitions
+  targetNamespace="http://www.example.com/test/calculator"
+  xmlns:axis2ns1="http://www.example.com/test/calculator"
+  xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
+  xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
+  xmlns:msgtypes="http://www.example.com/test/messageTypes"
+  xmlns:ns1="urn:types1"
+  xmlns:ns2="urn:types2"
+  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
+  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+  <wsdl:import namespace="http://www.example.com/test/messageTypes" location="http://example.com/test/doesnotexist.wsdl"/>
+  
+  <!-- Importing does not actually bring in the messages, just the ability to refer to them.
+       Without the following (duplicated) messages the wsdl definition would not have any messages.
+       However, do use the imported versions of these messages in the operation descriptions below.
+  -->
+  <wsdl:message name="getTotalRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="msgtypes:getTotal" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="getTotalResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="msgtypes:getTotalResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="addRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:add" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="addResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:addResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="clearRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:clear" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="clearResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:clearResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="divideRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:divide" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="divideResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:divideResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="divideByZeroException" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:divideByZeroFault" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="multiplyRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns1:multiply" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="multiplyResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns2:multiplyResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="subtractRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns2:subtract" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:message name="subtractResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:part element="ns2:subtractResponse" name="part1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+  </wsdl:message>
+  <wsdl:portType name="CalculatorService" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:operation name="getTotal" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <wsdl:input message="msgtypes:getTotalRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:output message="msgtypes:getTotalResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+    </wsdl:operation>
+    <wsdl:operation name="add" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <wsdl:input message="msgtypes:addRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:output message="msgtypes:addResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+    </wsdl:operation>
+    <wsdl:operation name="clear" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <wsdl:input message="msgtypes:clearRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:output message="msgtypes:clearResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+    </wsdl:operation>
+    <wsdl:operation name="divide" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <wsdl:input message="msgtypes:divideRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:output message="msgtypes:divideResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:fault message="msgtypes:divideByZeroException"
+        name="divideByZeroException" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+    </wsdl:operation>
+    <wsdl:operation name="multiply" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <wsdl:input message="msgtypes:multiplyRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:output message="msgtypes:multiplyResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+    </wsdl:operation>
+    <wsdl:operation name="subtract" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <wsdl:input message="msgtypes:subtractRequest" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+      <wsdl:output message="msgtypes:subtractResponseMessage" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"/>
+    </wsdl:operation>
+  </wsdl:portType>
+  <wsdl:binding name="CalculatorServiceSOAP11Binding"
+    type="axis2ns1:CalculatorService" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <soap:binding style="document"
+      transport="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+    <wsdl:operation name="getTotal" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:operation soapAction="urn:getTotal" style="document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      <wsdl:input xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:input>
+      <wsdl:output xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:output>
+    </wsdl:operation>
+    <wsdl:operation name="add" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:operation soapAction="urn:add" style="document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      <wsdl:input xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:input>
+      <wsdl:output xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:output>
+    </wsdl:operation>
+    <wsdl:operation name="clear" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:operation soapAction="urn:clear" style="document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      <wsdl:input xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:input>
+      <wsdl:output xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:output>
+    </wsdl:operation>
+    <wsdl:operation name="divide" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:operation soapAction="urn:divide" style="document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      <wsdl:input xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:input>
+      <wsdl:output xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:output>
+      <wsdl:fault name="divideByZeroException" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:fault body="use" name="divideByZeroException"
+          namespace="http://www.example.com/test/calculator" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:fault>
+    </wsdl:operation>
+    <wsdl:operation name="multiply" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:operation soapAction="urn:multiply" style="document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      <wsdl:input xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:input>
+      <wsdl:output xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:output>
+    </wsdl:operation>
+    <wsdl:operation name="subtract" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:operation soapAction="urn:subtract" style="document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      <wsdl:input xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:input>
+      <wsdl:output xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+        <soap:body namespace="http://www.example.com/test/calculator"
+          use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+      </wsdl:output>
+    </wsdl:operation>
+  </wsdl:binding>
+  <wsdl:service name="CalculatorServiceWebService" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+    <wsdl:port binding="axis2ns1:CalculatorServiceSOAP11Binding"
+      name="CalculatorServiceSOAP11port" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
+      <soap:address location="" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"/>
+    </wsdl:port>
+  </wsdl:service>
+</wsdl:definitions>
Index: modules/jaxws/test-resources/catalog/fail/thirdImportFail.xml
===================================================================
--- modules/jaxws/test-resources/catalog/fail/thirdImportFail.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/fail/thirdImportFail.xml	(revision 0)
@@ -0,0 +1,23 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+   <system
+       systemId="http://java.sun.com/xml/ns/j2ee/application_1_4.xsd"
+       uri="catalog/schema/application_1_4.xsd" />
+   <system
+       systemId="http://soapinterop.org/xsd2"
+       uri="importAux.xsd" />
+   <system
+       systemId="http://example.com/test/doesnotexist.wsdl"
+       uri="dir1/abstract.wsdl" />
+   <system
+       systemId="doesnotexist.xsd"
+       uri="dir2/imported1.xsd" />
+   <!-- system
+       systemId="http://example.com/neverExisted.xsd"
+       uri="dir3/imported2.xsd" /-->
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"
+       uri="catalog/dtd/ejb-jar.dtd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"
+       uri="catalog/dtd/ejb-jar_2_0.dtd" />
+</catalog>
Index: modules/jaxws/test-resources/catalog/fail/secondImportFail.xml
===================================================================
--- modules/jaxws/test-resources/catalog/fail/secondImportFail.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/fail/secondImportFail.xml	(revision 0)
@@ -0,0 +1,23 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+   <system
+       systemId="http://java.sun.com/xml/ns/j2ee/application_1_4.xsd"
+       uri="catalog/schema/application_1_4.xsd" />
+   <system
+       systemId="http://soapinterop.org/xsd2"
+       uri="importAux.xsd" />
+   <system
+       systemId="http://example.com/test/doesnotexist.wsdl"
+       uri="dir1/abstract.wsdl" />
+   <!--system
+       systemId="doesnotexist.xsd"
+       uri="dir2/imported1.xsd" /-->
+   <system
+       systemId="http://example.com/neverExisted.xsd"
+       uri="dir3/imported2.xsd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"
+       uri="catalog/dtd/ejb-jar.dtd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"
+       uri="catalog/dtd/ejb-jar_2_0.dtd" />
+</catalog>
Index: modules/jaxws/test-resources/catalog/fail/firstImportFail.xml
===================================================================
--- modules/jaxws/test-resources/catalog/fail/firstImportFail.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/fail/firstImportFail.xml	(revision 0)
@@ -0,0 +1,23 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+   <system
+       systemId="http://java.sun.com/xml/ns/j2ee/application_1_4.xsd"
+       uri="catalog/schema/application_1_4.xsd" />
+   <system
+       systemId="http://soapinterop.org/xsd2"
+       uri="importAux.xsd" />
+   <!--system
+       systemId="http://example.com/test/doesnotexist.wsdl"
+       uri="dir1/abstract.wsdl" /-->
+   <system
+       systemId="doesnotexist.xsd"
+       uri="dir2/imported1.xsd" />
+   <system
+       systemId="http://example.com/neverExisted.xsd"
+       uri="dir3/imported2.xsd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"
+       uri="catalog/dtd/ejb-jar.dtd" />
+   <public
+       publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"
+       uri="catalog/dtd/ejb-jar_2_0.dtd" />
+</catalog>
Index: modules/jaxws/test-resources/catalog/unique-catalog.xml
===================================================================
--- modules/jaxws/test-resources/catalog/unique-catalog.xml	(revision 0)
+++ modules/jaxws/test-resources/catalog/unique-catalog.xml	(revision 0)
@@ -0,0 +1,11 @@
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
+
+<public publicId="-//OASIS//DTD XML DocBook V4.1.2//EN"
+        uri="docbook/xml/docbookx.dtd"/>
+
+<system systemId="urn:x-oasis:docbook-xml-v4.1.2"
+        uri="docbook/xml/docbookx.dtd"/>
+
+<delegatePublic publicIdStartString="-//Example//"
+          catalog="http://www.example.com/catalog"/>
+</catalog>
Index: modules/jaxws/test-resources/catalog/importBad.xsd
===================================================================
--- modules/jaxws/test-resources/catalog/importBad.xsd	(revision 0)
+++ modules/jaxws/test-resources/catalog/importBad.xsd	(revision 0)
@@ -0,0 +1,29 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<schema targetNamespace="http://soapinterop.org/xsd"
+        xmlns="http://www.w3.org/2001/XMLSchema"
+        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+        xmlns:xsd1="http://soapinterop.org/xsd"
+        xmlns:xsd2="http://soapinterop.org/xsd2"
+        elementFormDefault="qualified">
+    <import namespace="http://soapinterop.org/xsd2" schemaLocation="importAux2.xsd"></import>
+    <element name="echoStructParam" type="xsd2:SOAPStruct"/>
+</schema>
Index: modules/jaxws/pom.xml
===================================================================
--- modules/jaxws/pom.xml	(revision 627955)
+++ modules/jaxws/pom.xml	(working copy)
@@ -70,6 +70,10 @@
 			<version>${version}</version>
 		</dependency>
         <dependency>
+            <groupId>xml-resolver</groupId>
+            <artifactId>xml-resolver</artifactId>
+        </dependency>
+        <dependency>
             <groupId>jaxen</groupId>
             <artifactId>jaxen</artifactId>
         </dependency>
