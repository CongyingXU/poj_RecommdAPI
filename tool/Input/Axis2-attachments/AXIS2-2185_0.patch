Index: EndpointLifecycleManagerImpl.java
===================================================================
--- EndpointLifecycleManagerImpl.java	(revision 507489)
+++ EndpointLifecycleManagerImpl.java	(working copy)
@@ -32,6 +32,11 @@
 import org.apache.axis2.jaxws.context.factory.MessageContextFactory;
 import org.apache.axis2.jaxws.context.utils.ContextUtils;
 import org.apache.axis2.jaxws.core.MessageContext;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.Constants;
+import org.apache.axis2.util.Loader;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.AxisFault;
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.handler.SoapMessageContext;
 import org.apache.axis2.jaxws.i18n.Messages;
@@ -45,6 +50,7 @@
 import org.apache.axis2.jaxws.server.endpoint.lifecycle.EndpointLifecycleManager;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import java.lang.reflect.Method;
 
 public class EndpointLifecycleManagerImpl implements EndpointLifecycleManager {
 	private static final String WEBSERVICE_MESSAGE_CONTEXT = "javax.xml.ws.WebServiceContext";
@@ -86,7 +92,7 @@
             return serviceimpl;
         } else {
             // create a new service impl class for that service
-            serviceimpl = createServiceInstance(serviceImplClass);
+            serviceimpl = createServiceInstance(msgContext.getAxisService(), serviceImplClass);
             this.endpointInstance = serviceimpl;
             //Since Serivce Object is instantiated for the first time I will Inject any resource 
             //and call the PostConstruct lifecycle methods here.
@@ -199,7 +205,7 @@
 		return false;
 	}
 	
-	 private Object createServiceInstance(Class serviceImplClass) {
+	 private Object createServiceInstance(AxisService service, Class serviceImplClass) {
 	        if (log.isDebugEnabled()) {
 	            log.debug("Creating new instance of service endpoint");
 	        }
@@ -211,6 +217,22 @@
 	        
 	        Object instance = null;
 	        try {
+	            ClassLoader classLoader = service.getClassLoader();
+
+	            // allow alternative definition of makeNewServiceObject
+	            if (service.getParameter(Constants.SERVICE_OBJECT_SUPPLIER) != null) {
+	                Parameter serviceObjectParam =
+	                        service.getParameter(Constants.SERVICE_OBJECT_SUPPLIER);
+	                Class serviceObjectMaker = Loader.loadClass(classLoader, ((String)
+	                        serviceObjectParam.getValue()).trim());
+
+	                // Find static getServiceObject() method, call it if there
+	                Method method = serviceObjectMaker.
+	                        getMethod("getServiceObject",
+                                new Class[]{AxisService.class});
+	                if (method != null)
+	                    return method.invoke(serviceObjectMaker.newInstance(), new Object[]{service});
+	            }
 	            instance = serviceImplClass.newInstance();
 	        } catch (IllegalAccessException e) {
 	            throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
@@ -218,6 +240,9 @@
 	        } catch (InstantiationException e) {
 	            throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
 	                    "EndpointControllerErr6", serviceImplClass.getName()));
+	        } catch (Exception e) {
+	            throw ExceptionFactory.makeWebServiceException(Messages.getMessage(
+	                    "EndpointControllerErr6", serviceImplClass.getName()));
 	        }
 	        
 	        return instance;
