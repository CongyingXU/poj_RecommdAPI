Index: modules/kernel/src/org/apache/axis2/java/security/SSLProtocolSocketFactory.java
===================================================================
--- modules/kernel/src/org/apache/axis2/java/security/SSLProtocolSocketFactory.java	(revision 1176337)
+++ modules/kernel/src/org/apache/axis2/java/security/SSLProtocolSocketFactory.java	(working copy)
@@ -15,8 +15,6 @@
  */
 package org.apache.axis2.java.security;
 
-import org.apache.commons.httpclient.params.HttpConnectionParams;
-import org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory;
 
 import javax.net.SocketFactory;
 import javax.net.ssl.SSLContext;
@@ -29,20 +27,34 @@
 /**
  * @see TrustAllTrustManager
  */
-public class SSLProtocolSocketFactory implements SecureProtocolSocketFactory {
+public class SSLProtocolSocketFactory{
     SSLContext ctx;
 
     public SSLProtocolSocketFactory(SSLContext ctx) {
         this.ctx = ctx;
     }
 
-    public Socket createSocket(final String host, final int port, final InetAddress localAddress,
-                               final int localPort, final HttpConnectionParams params) throws
-                                                                                       IOException {
-        if (params == null) {
-            throw new IllegalArgumentException("Parameters may not be null");
-        }
-        int timeout = params.getConnectionTimeout();
+
+    /**
+     * Gets a new socket connection to the given host.
+     *
+     * @param host the host name/IP
+     * @param port the port on the host
+     * @param localAddress the local host name/IP to bind the socket to
+     * @param localPort the port on the local machine
+     *
+     * @return Socket a new socket
+     *
+     * @throws IOException if an I/O error occurs while creating the socket
+     *
+     * @since 3.0
+     */
+     public Socket createSocket
+                (final String host, final int port, final InetAddress localAddress,
+                final int localPort, final int connectionTimeOut) throws
+                    IOException {
+
+        int timeout = connectionTimeOut;
         SocketFactory socketfactory = ctx.getSocketFactory();
         if (timeout == 0) {
             return socketfactory.createSocket(host, port, localAddress, localPort);
@@ -57,7 +69,18 @@
     }
 
     /**
-     * @see SecureProtocolSocketFactory#createSocket(java.lang.String, int, java.net.InetAddress, int)
+     * Gets a new socket connection to the given host.
+     *
+     * @param host the host name/IP
+     * @param port the port on the host
+     * @param clientHost the local host name/IP to bind the socket to
+     * @param clientPort the port on the local machine
+     *
+     * @return Socket a new socket
+     *
+     * @throws IOException if an I/O error occurs while creating the socket
+     * @throws java.net.UnknownHostException if the IP address of the host cannot be
+     * determined
      */
     public Socket createSocket(String host, int port, InetAddress clientHost, int clientPort)
             throws IOException {
@@ -65,14 +88,37 @@
     }
 
     /**
-     * @see SecureProtocolSocketFactory#createSocket(java.lang.String, int)
+     * Gets a new socket connection to the given host.
+     *
+     * @param host the host name/IP
+     * @param port the port on the host
+     *
+     * @return Socket a new socket
+     *
+     * @throws IOException if an I/O error occurs while creating the socket
+     * @throws java.net.UnknownHostException if the IP address of the host cannot be
+     * determined
      */
     public Socket createSocket(String host, int port) throws IOException {
         return ctx.getSocketFactory().createSocket(host, port);
     }
 
     /**
-     * @see SecureProtocolSocketFactory#createSocket(java.net.Socket, java.lang.String, int, boolean)
+     * Returns a socket connected to the given host that is layered over an
+     * existing socket.  Used primarily for creating secure sockets through
+     * proxies.
+     *
+     * @param socket the existing socket
+     * @param host the host name/IP
+     * @param port the port on the host
+     * @param autoClose a flag for closing the underling socket when the created
+     * socket is closed
+     *
+     * @return Socket a new socket
+     *
+     * @throws IOException if an I/O error occurs while creating the socket
+     * @throws java.net.UnknownHostException if the IP address of the host cannot be
+     * determined
      */
     public Socket createSocket(Socket socket, String host, int port, boolean autoClose)
             throws IOException {
Index: modules/kernel/src/org/apache/axis2/transport/http/MultipartFormDataFormatter.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/http/MultipartFormDataFormatter.java	(revision 1176337)
+++ modules/kernel/src/org/apache/axis2/transport/http/MultipartFormDataFormatter.java	(working copy)
@@ -26,10 +26,10 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.MessageContext;
 import org.apache.axis2.transport.MessageFormatter;
+import org.apache.axis2.transport.http.util.AbstractContent;
 import org.apache.axis2.transport.http.util.ComplexPart;
+import org.apache.axis2.transport.http.util.SimplePart;
 import org.apache.axis2.transport.http.util.URLTemplatingUtil;
-import org.apache.commons.httpclient.methods.multipart.Part;
-import org.apache.commons.httpclient.methods.multipart.StringPart;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -88,13 +88,13 @@
 
         OMElement omElement = messageContext.getEnvelope().getBody().getFirstElement();
 
-        Part[] parts = createMultipatFormDataRequest(omElement);
-        if (parts.length > 0) {
+        AbstractContent[] abstractContents = createMultipatFormDataRequest(omElement);
+        if (abstractContents.length > 0) {
             ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
             try {
 
                 // This is accessing a class of Commons-FlieUpload
-                Part.sendParts(bytesOut, parts, format.getMimeBoundary().getBytes());
+                AbstractContent.sendAbstractContents(bytesOut, abstractContents, format.getMimeBoundary().getBytes());
             } catch (IOException e) {
                 throw AxisFault.makeFault(e);
             }
@@ -177,7 +177,7 @@
      * @param dataOut
      * @return
      */
-    private Part[] createMultipatFormDataRequest(OMElement dataOut) {
+    private AbstractContent[] createMultipatFormDataRequest(OMElement dataOut) {
         ArrayList parts = new ArrayList();
         if (dataOut != null) {
             Iterator iter1 = dataOut.getChildElements();
@@ -193,12 +193,12 @@
                             processComplexType(omElement, ele.getChildElements(), omFactory));
                     parts.add(new ComplexPart(ele.getQName().getLocalPart(), omElement.toString()));
                 } else {
-                    parts.add(new StringPart(ele.getQName().getLocalPart(), ele.getText()));
+                    parts.add(new SimplePart(ele.getQName().getLocalPart(), ele.getText()));
                 }
             }
         }
-        Part[] partsArray = new Part[parts.size()];
-        return (Part[]) parts.toArray(partsArray);
+        AbstractContent[] partsArray = new AbstractContent[parts.size()];
+        return (AbstractContent[]) parts.toArray(partsArray);
     }
 
     /**
Index: modules/kernel/src/org/apache/axis2/transport/http/util/ComplexPart.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/http/util/ComplexPart.java	(revision 1176337)
+++ modules/kernel/src/org/apache/axis2/transport/http/util/ComplexPart.java	(working copy)
@@ -19,13 +19,12 @@
 
 package org.apache.axis2.transport.http.util;
 
-import org.apache.commons.httpclient.methods.multipart.PartBase;
-import org.apache.commons.httpclient.util.EncodingUtil;
 
 import java.io.IOException;
 import java.io.OutputStream;
 
-public class ComplexPart extends PartBase {
+public class ComplexPart extends AbstractContentBase {
 
     /**
      * Default content encoding of string parameters.
@@ -96,7 +95,7 @@
      */
     private byte[] getContent() {
         if (content == null) {
-            content = EncodingUtil.getBytes(value, getCharSet());
+            content = EncodingUtils.getBytes(value, getCharSet());
         }
         return content;
     }
@@ -116,7 +115,6 @@
      *
      * @return The length of the data.
      * @throws IOException If an IO problem occurs
-     * @see org.apache.commons.httpclient.methods.multipart.Part#lengthOfData()
      */
     protected long lengthOfData() throws IOException {
         return getContent().length;
Index: modules/kernel/src/org/apache/axis2/client/Stub.java
===================================================================
--- modules/kernel/src/org/apache/axis2/client/Stub.java	(revision 1176337)
+++ modules/kernel/src/org/apache/axis2/client/Stub.java	(working copy)
@@ -35,13 +35,13 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.NamedValue;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.OutInAxisOperation;
 import org.apache.axis2.description.OutOnlyAxisOperation;
 import org.apache.axis2.description.RobustOutOnlyAxisOperation;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.transport.http.HTTPConstants;
-import org.apache.commons.httpclient.Header;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -160,10 +160,8 @@
             headersObj = new java.util.ArrayList();
         }
         java.util.List headers = (java.util.List) headersObj;
-        Header header = new Header();
-        header.setName(name);
-        header.setValue(value);
-        headers.add(header);
+        NamedValue nameValue = new NamedValue(name , value);
+        headers.add(nameValue);
         messageContext.setProperty(HTTPConstants.HTTP_HEADERS, headers);
     }
 
Index: modules/kernel/pom.xml
===================================================================
--- modules/kernel/pom.xml	(revision 1176337)
+++ modules/kernel/pom.xml	(working copy)
@@ -53,10 +58,6 @@
             <artifactId>servlet-api</artifactId>
         </dependency>
         <dependency>
-            <groupId>commons-httpclient</groupId>
-            <artifactId>commons-httpclient</artifactId>
-        </dependency>
-        <dependency>
             <groupId>commons-fileupload</groupId>
             <artifactId>commons-fileupload</artifactId>
         </dependency>
Index: modules/transport/http/src/org/apache/axis2/transport/http/AbstractHTTPSender.java
===================================================================
--- modules/transport/http/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(revision 1176337)
+++ modules/transport/http/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(working copy)
@@ -24,35 +24,20 @@
 import org.apache.axiom.om.OMOutputFormat;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
+import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.NamedValue;
 import org.apache.axis2.context.OperationContext;
-import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.i18n.Messages;
 import org.apache.axis2.transport.MessageFormatter;
 import org.apache.axis2.transport.TransportUtils;
 import org.apache.axis2.transport.http.util.HTTPProxyConfigurationUtil;
-import org.apache.axis2.util.JavaUtils;
 import org.apache.axis2.wsdl.WSDLConstants;
-import org.apache.commons.httpclient.Credentials;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HeaderElement;
-import org.apache.commons.httpclient.HostConfiguration;
-import org.apache.commons.httpclient.HttpClient;
-import org.apache.commons.httpclient.HttpConnectionManager;
-import org.apache.commons.httpclient.HttpMethod;
-import org.apache.commons.httpclient.HttpMethodBase;
-import org.apache.commons.httpclient.HttpState;
-import org.apache.commons.httpclient.HttpVersion;
-import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
-import org.apache.commons.httpclient.NTCredentials;
-import org.apache.commons.httpclient.NameValuePair;
-import org.apache.commons.httpclient.UsernamePasswordCredentials;
+import org.apache.commons.httpclient.*;
 import org.apache.commons.httpclient.auth.AuthPolicy;
 import org.apache.commons.httpclient.auth.AuthScope;
 import org.apache.commons.httpclient.params.HttpMethodParams;
-import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
-import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.httpclient.protocol.Protocol;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -63,8 +48,6 @@
 import java.io.InputStream;
 import java.net.URL;
 import java.util.*;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
 import java.util.zip.GZIPInputStream;
 
 public abstract class AbstractHTTPSender {
@@ -627,15 +610,17 @@
         // set the custom headers, if available
         Object httpHeadersObj = msgContext.getProperty(HTTPConstants.HTTP_HEADERS);
         if (httpHeadersObj != null) {
-            if (httpHeadersObj instanceof ArrayList) {
-                ArrayList httpHeaders = (ArrayList) httpHeadersObj;
-                Header header;
+                if (httpHeadersObj instanceof List) {
+                List httpHeaders = (List) httpHeadersObj;
                 for (int i = 0; i < httpHeaders.size(); i++) {
-                    header = (Header) httpHeaders.get(i);
-                    if (HTTPConstants.HEADER_USER_AGENT.equals(header.getName())) {
-                        isCustomUserAgentSet = true;
+                    NamedValue nv = (NamedValue) httpHeaders.get(i);
+                    if (nv != null) {
+                        Header header = new Header(nv.getName(), nv.getValue());
+                        if (HTTPConstants.HEADER_USER_AGENT.equals(header.getName())) {
+                            isCustomUserAgentSet = true;
+                        }
+                        method.addRequestHeader(header);
                     }
-                    method.addRequestHeader(header);
                 }
     
             }
Index: modules/transport/http/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java
===================================================================
--- modules/transport/http/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(revision 1176337)
+++ modules/transport/http/src/org/apache/axis2/transport/http/CommonsHTTPTransportSender.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.axis2.addressing.EndpointReference;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.context.NamedValue;
 import org.apache.axis2.description.Parameter;
 import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.handlers.AbstractHandler;
@@ -34,14 +35,13 @@
 import org.apache.axis2.transport.TransportUtils;
 import org.apache.axis2.transport.http.server.AxisHttpResponseImpl;
 import org.apache.axis2.util.JavaUtils;
-import org.apache.commons.httpclient.Header;
 import org.apache.commons.httpclient.HttpException;
 import org.apache.commons.httpclient.HttpMethod;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import javax.servlet.http.HttpServletResponse;
 import javax.xml.stream.FactoryConfigurationError;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.MalformedURLException;
@@ -292,10 +292,10 @@
                 if (customHeaders instanceof List) {
                     Iterator iter = ((List) customHeaders).iterator();
                     while (iter.hasNext()) {
-                        Header header = (Header) iter.next();
-                        if (header != null) {
+                        NamedValue nv = (NamedValue) iter.next();
+                        if (nv != null) {
                             servletBasedOutTransportInfo
-                                    .addHeader(header.getName(), header.getValue());
+                                    .addHeader(nv.getName(), nv.getValue());
                         }
                     }
                 } else if (customHeaders instanceof Map) {
@@ -315,19 +315,19 @@
                 if (customHeaders instanceof List) {
                     Iterator iter = ((List) customHeaders).iterator();
                     while (iter.hasNext()) {
-                        Header header = (Header) iter.next();
-                        if (header != null) {
+                          NamedValue nv = (NamedValue) iter.next();
+                        if (nv != null) {
                             ((AxisHttpResponseImpl) transportInfo)
-                                    .addHeader(header.getName(), header.getValue());
+                                    .addHeader(nv.getName(), nv.getValue());
                         }
                     }
                 } else if (customHeaders instanceof Map) {
                     Iterator iter = ((Map) customHeaders).entrySet().iterator();
                     while (iter.hasNext()) {
-                        Map.Entry header = (Map.Entry) iter.next();
-                        if (header != null) {
+                        Map.Entry nameValue = (Map.Entry) iter.next();
+                        if (nameValue != null) {
                             ((AxisHttpResponseImpl) transportInfo)
-                                    .addHeader((String) header.getKey(), (String) header.getValue());
+                                    .addHeader((String) nameValue.getKey(), (String) nameValue.getValue());
                         }
                     }
                 }
Index: modules/transport/http/pom.xml
===================================================================
--- modules/transport/http/pom.xml	(revision 1176337)
+++ modules/transport/http/pom.xml	(working copy)
@@ -110,5 +110,9 @@
             <artifactId>jetty</artifactId>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>commons-httpclient</groupId>
+            <artifactId>commons-httpclient</artifactId>
+        </dependency>
     </dependencies>
 </project>

