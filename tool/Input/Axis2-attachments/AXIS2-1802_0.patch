Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/META-INF/ProxyDocLitWrapped.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/META-INF/ProxyDocLitWrapped.wsdl	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/META-INF/ProxyDocLitWrapped.wsdl	(working copy)
@@ -1,14 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
-	xmlns:tns="http://org.apache.axis2.proxy.doclitwrapped"
+	xmlns:tns="http://doclitwrapped.proxy.test.org"
 	xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="proxy"
-	targetNamespace="http://org.apache.axis2.proxy.doclitwrapped">
+	targetNamespace="http://doclitwrapped.proxy.test.org">
 
 	<wsdl:types>
 		<xsd:schema
-			targetNamespace="http://org.apache.axis2.proxy.doclitwrapped"
-			xmlns:tns="http://org.apache.axis2.proxy.doclitwrapped"
+			targetNamespace="http://doclitwrapped.proxy.test.org"
+			xmlns:tns="http://doclitwrapped.proxy.test.org"
 			xmlns:xsd="http://www.w3.org/2001/XMLSchema">
 
 			<xsd:element name="MyFault" type="xsd:string" />
@@ -207,7 +207,7 @@
 
 		<wsdl:operation name="oneWayVoid">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -215,7 +215,7 @@
 
 		<wsdl:operation name="oneWay">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -223,7 +223,7 @@
 
 		<wsdl:operation name="twoWayHolder">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -235,7 +235,7 @@
 
 		<wsdl:operation name="twoWay">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -247,7 +247,7 @@
 		
 		<wsdl:operation name="invoke">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -259,7 +259,7 @@
 		
 		<wsdl:operation name="finOp">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/finOp" />
+				soapAction="http://doclitwrapped.proxy.test.org/finOp" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/DocLitWrappedProxy.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/DocLitWrappedProxy.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/DocLitWrappedProxy.java	(working copy)
@@ -27,25 +27,25 @@
  * Generated source version: 2.0
  * 
  */
-@WebService(name = "DocLitWrappedProxy", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped")
+@WebService(name = "DocLitWrappedProxy", targetNamespace = "http://doclitwrapped.proxy.test.org")
 public interface DocLitWrappedProxy {
 
 
     /**
      * 
      */
-    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @WebMethod(action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
     @Oneway
-    @RequestWrapper(localName = "oneWayVoid", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.OneWayVoid")
+    @RequestWrapper(localName = "oneWayVoid", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.OneWayVoid")
     public void oneWayVoid();
 
     /**
      * 
      * @param onewayStr
      */
-    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @WebMethod(action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
     @Oneway
-    @RequestWrapper(localName = "oneWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.sei.OneWay")
+    @RequestWrapper(localName = "oneWay", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.sei.OneWay")
     public void oneWay(
         @WebParam(name = "oneway_str", targetNamespace = "")
         String onewayStr);
@@ -55,11 +55,11 @@
      * @param twoWayHolderInt
      * @param twoWayHolderStr
      * @return
-     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.TwoWayHolder>
+     *     returns javax.xml.ws.Response<doclitwrapped.proxy.test.org.sei.TwoWayHolder>
      */
-    @WebMethod(operationName = "twoWayHolder", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
-    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @WebMethod(operationName = "twoWayHolder", action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
     public Response<TwoWayHolder> twoWayHolderAsync(
         @WebParam(name = "twoWayHolder_str", targetNamespace = "")
         String twoWayHolderStr,
@@ -74,9 +74,9 @@
      * @return
      *     returns java.util.concurrent.Future<? extends java.lang.Object>
      */
-    @WebMethod(operationName = "twoWayHolder", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
-    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @WebMethod(operationName = "twoWayHolder", action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
     public Future<?> twoWayHolderAsync(
         @WebParam(name = "twoWayHolder_str", targetNamespace = "")
         String twoWayHolderStr,
@@ -90,9 +90,9 @@
      * @param twoWayHolderInt
      * @param twoWayHolderStr
      */
-    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
-    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @WebMethod(action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "twoWayHolder", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
+    @ResponseWrapper(localName = "twoWayHolder", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWayHolder")
     public void twoWayHolder(
         @WebParam(name = "twoWayHolder_str", targetNamespace = "", mode = Mode.INOUT)
         Holder<String> twoWayHolderStr,
@@ -103,11 +103,11 @@
      * 
      * @param twowayStr
      * @return
-     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.ReturnType>
+     *     returns javax.xml.ws.Response<doclitwrapped.proxy.test.org.sei.ReturnType>
      */
-    @WebMethod(operationName = "twoWay", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
-    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.sei.ReturnType")
+    @WebMethod(operationName = "twoWay", action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.sei.ReturnType")
     public Response<ReturnType> twoWayAsync(
         @WebParam(name = "twoway_str", targetNamespace = "")
         String twowayStr);
@@ -119,9 +119,9 @@
      * @return
      *     returns java.util.concurrent.Future<? extends java.lang.Object>
      */
-    @WebMethod(operationName = "twoWay", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
-    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    @WebMethod(operationName = "twoWay", action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.ReturnType")
     public Future<?> twoWayAsync(
         @WebParam(name = "twoway_str", targetNamespace = "")
         String twowayStr,
@@ -134,10 +134,10 @@
      * @return
      *     returns java.lang.String
      */
-    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @WebMethod(action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
     @WebResult(name = "return_str", targetNamespace = "")
-    @RequestWrapper(localName = "twoWay", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.TwoWay")
-    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    @RequestWrapper(localName = "twoWay", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.TwoWay")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.ReturnType")
     public String twoWay(
         @WebParam(name = "twoway_str", targetNamespace = "")
         String twowayStr);
@@ -149,9 +149,9 @@
      * @return
      *     returns javax.xml.ws.Response<org.apache.axis2.jaxws.proxy.doclitwrapped.sei.ReturnType>
      */
-    @WebMethod(operationName = "invoke", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
-    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    @WebMethod(operationName = "invoke", action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.ReturnType")
     public Response<ReturnType> invokeAsync(
         @WebParam(name = "invoke_str", targetNamespace = "")
         String invokeStr);
@@ -163,9 +163,9 @@
      * @return
      *     returns java.util.concurrent.Future<? extends java.lang.Object>
      */
-    @WebMethod(operationName = "invoke", action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
-    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
-    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    @WebMethod(operationName = "invoke", action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.ReturnType")
     public Future<?> invokeAsync(
         @WebParam(name = "invoke_str", targetNamespace = "")
         String invokeStr,
@@ -178,10 +178,10 @@
      * @return
      *     returns java.lang.String
      */
-    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn")
+    @WebMethod(action = "http://doclitwrapped.proxy.test.org/twoWayReturn")
     @WebResult(name = "return_str", targetNamespace = "")
-    @RequestWrapper(localName = "invoke", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.Invoke")
-    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.ReturnType")
+    @RequestWrapper(localName = "invoke", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.Invoke")
+    @ResponseWrapper(localName = "ReturnType", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.ReturnType")
     public String invoke(
         @WebParam(name = "invoke_str", targetNamespace = "")
         String invokeStr);
@@ -190,11 +190,11 @@
      * 
      * @param op
      * @return
-     *     returns javax.xml.ws.Response<org.apache.axis2.proxy.doclitwrapped.sei.FinOpResponse>
+     *     returns javax.xml.ws.Response<doclitwrapped.proxy.test.org.sei.FinOpResponse>
      */
-    @WebMethod(operationName = "finOp", action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
-    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
-    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    @WebMethod(operationName = "finOp", action = "http://doclitwrapped.proxy.test.org/finOp")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.FinOpResponse")
     public Response<FinOpResponse> finOpAsync(
         @WebParam(name = "op", targetNamespace = "")
         FinancialOperation op);
@@ -206,9 +206,9 @@
      * @return
      *     returns java.util.concurrent.Future<? extends java.lang.Object>
      */
-    @WebMethod(operationName = "finOp", action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
-    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
-    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    @WebMethod(operationName = "finOp", action = "http://doclitwrapped.proxy.test.org/finOp")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.FinOpResponse")
     public Future<?> finOpAsync(
         @WebParam(name = "op", targetNamespace = "")
         FinancialOperation op,
@@ -219,12 +219,12 @@
      * 
      * @param op
      * @return
-     *     returns org.apache.axis2.proxy.doclitwrapped.sei.FinancialOperation
+     *     returns doclitwrapped.proxy.test.org.sei.FinancialOperation
      */
-    @WebMethod(action = "http://org.apache.axis2.proxy.doclitwrapped/finOp")
+    @WebMethod(action = "http://doclitwrapped.proxy.test.org/finOp")
     @WebResult(name = "response", targetNamespace = "")
-    @RequestWrapper(localName = "finOp", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOp")
-    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", className = "org.test.proxy.doclitwrapped.FinOpResponse")
+    @RequestWrapper(localName = "finOp", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.FinOp")
+    @ResponseWrapper(localName = "finOpResponse", targetNamespace = "http://doclitwrapped.proxy.test.org", className = "org.test.proxy.doclitwrapped.FinOpResponse")
     public FinancialOperation finOp(
         @WebParam(name = "op", targetNamespace = "")
         FinancialOperation op);
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/ProxyDocLitWrappedService.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/ProxyDocLitWrappedService.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/sei/ProxyDocLitWrappedService.java	(working copy)
@@ -18,7 +18,7 @@
  * 
  */
 
-@WebServiceClient(name = "ProxyDocLitWrappedService", targetNamespace = "http://org.apache.axis2.proxy.doclitwrapped", wsdlLocation = "ProxyDocLitWrapped.wsdl")
+@WebServiceClient(name = "ProxyDocLitWrappedService", targetNamespace = "http://doclitwrapped.proxy.test.org", wsdlLocation = "ProxyDocLitWrapped.wsdl")
 public class ProxyDocLitWrappedService
     extends Service
 {
@@ -48,7 +48,7 @@
     }
 
     public ProxyDocLitWrappedService() {
-        super(PROXYDOCLITWRAPPEDSERVICE_WSDL_LOCATION, new QName("http://org.apache.axis2.proxy.doclitwrapped", "ProxyDocLitWrappedService"));
+        super(PROXYDOCLITWRAPPEDSERVICE_WSDL_LOCATION, new QName("http://doclitwrapped.proxy.test.org", "ProxyDocLitWrappedService"));
     }
 
     /**
@@ -58,7 +58,7 @@
      */
     @WebEndpoint(name = "ProxyDocLitWrappedPort")
     public DocLitWrappedProxy getProxyDocLitWrappedPort() {
-        return (DocLitWrappedProxy)super.getPort(new QName("http://org.apache.axis2.proxy.doclitwrapped", "ProxyDocLitWrappedPort"), DocLitWrappedProxy.class);
+        return (DocLitWrappedProxy)super.getPort(new QName("http://doclitwrapped.proxy.test.org", "ProxyDocLitWrappedPort"), DocLitWrappedProxy.class);
     }
 
 }
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/DocLitWrappedProxyImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/DocLitWrappedProxyImpl.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/doclitwrapped/DocLitWrappedProxyImpl.java	(working copy)
@@ -25,6 +25,6 @@
 	public String invoke(String invoke_str) {
 		// TODO Auto-generated method stub
 		System.out.println("End point called with String value =" + invoke_str);
-		return new String("<ns2:ReturnType xmlns:ns2=\"http://org.apache.axis2.proxy.doclitwrapped\"><return_str>some response</return_str></ns2:ReturnType>");
+		return new String("<ns2:ReturnType xmlns:ns2=\"http://doclitwrapped.proxy.test.org\"><return_str>some response</return_str></ns2:ReturnType>");
 	}
 }
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/ProxyTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/ProxyTests.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/proxy/ProxyTests.java	(working copy)
@@ -36,9 +36,9 @@
 
 public class ProxyTests extends TestCase {
     private QName serviceName = new QName(
-            "http://org.apache.axis2.proxy.doclitwrapped", "ProxyDocLitWrappedService");
+            "http://doclitwrapped.proxy.test.org", "ProxyDocLitWrappedService");
     private String axisEndpoint = "http://localhost:8080/axis2/services/ProxyDocLitWrappedService";
-    private QName portName = new QName("http://org.apache.axis2.proxy.doclitwrapped",
+    private QName portName = new QName("http://doclitwrapped.proxy.test.org",
             "ProxyDocLitWrappedPort");
     private String wsdlLocation = "test/org/apache/axis2/jaxws/proxy/doclitwrapped/META-INF/ProxyDocLitWrapped.wsdl";
     private boolean runningOnAxis = true;
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/META-INF/AddNumbers.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/META-INF/AddNumbers.wsdl	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/META-INF/AddNumbers.wsdl	(working copy)
@@ -1,15 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 
-<definitions name="AddNumbers" targetNamespace="http://duke/org"
-	xmlns:tns="http://duke/org" xmlns="http://schemas.xmlsoap.org/wsdl/"
+<definitions name="AddNumbers" targetNamespace="http://org/test/addnumbers"
+	xmlns:tns="http://org/test/addnumbers" xmlns="http://schemas.xmlsoap.org/wsdl/"
 	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
 
 
 	<types>
 		<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
-			elementFormDefault="qualified" targetNamespace="http://duke/org">
+			elementFormDefault="qualified" targetNamespace="http://org/test/addnumbers">
 			<element name="addNumbersResponse">
 				<complexType>
 					<sequence>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/AddNumbersService.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/AddNumbersService.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/AddNumbersService.java	(working copy)
@@ -16,7 +16,7 @@
  * Generated source version: 2.0
  * 
  */
-@WebServiceClient(name = "AddNumbersService", targetNamespace = "http://duke/org", wsdlLocation = "AddNumbers1.wsdl")
+@WebServiceClient(name = "AddNumbersService", targetNamespace = "http://org/test/addnumbers", wsdlLocation = "AddNumbers1.wsdl")
 public class AddNumbersService
     extends Service
 {
@@ -45,7 +45,7 @@
     }
 
     public AddNumbersService() {
-        super(ADDNUMBERSSERVICE_WSDL_LOCATION, new QName("http://duke/org", "AddNumbersService"));
+        super(ADDNUMBERSSERVICE_WSDL_LOCATION, new QName("http://org/test/addnumbers", "AddNumbersService"));
     }
 
     /**
@@ -55,7 +55,7 @@
      */
     @WebEndpoint(name = "AddNumbersPort")
     public AddNumbersPortType getAddNumbersPort() {
-        return (AddNumbersPortType)super.getPort(new QName("http://duke/org", "AddNumbersPort"), AddNumbersPortType.class);
+        return (AddNumbersPortType)super.getPort(new QName("http://org/test/addnumbers", "AddNumbersPort"), AddNumbersPortType.class);
     }
 
 }
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageTests.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageTests.java	(working copy)
@@ -507,7 +507,7 @@
         obj.setEchoStringReturn("sample return value");
         
         // Create the JAXBContext
-        JAXBBlockContext context = new JAXBBlockContext(EchoStringResponse.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoStringResponse.class.getPackage().getName());
         
         // Create a JAXBBlock using the Echo object as the content.  This simulates
         // what occurs on the outbound JAX-WS Dispatch<Object> client
@@ -573,7 +573,7 @@
         obj.setEchoStringReturn("sample return value");
         
         // Create the JAXBContext
-        JAXBBlockContext context = new JAXBBlockContext(EchoStringResponse.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoStringResponse.class.getPackage().getName());
        
         // Create a JAXBBlock using the Echo object as the content.  This simulates
         // what occurs on the outbound JAX-WS Dispatch<Object> client
@@ -655,7 +655,7 @@
         
         // Create the JAXBContext instance that will be used
         // to deserialize the JAX-B object content in the message.
-        JAXBBlockContext context = new JAXBBlockContext(EchoStringResponse.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoStringResponse.class.getPackage().getName());
         
         // Get the JAXBBlock that wraps the content
         Block b = m.getBodyBlock(0, context, bf);
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageRPCTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageRPCTests.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/MessageRPCTests.java	(working copy)
@@ -111,7 +111,7 @@
             FactoryRegistry.getFactory(JAXBBlockFactory.class);
         
         // Create the JAXBContext
-        JAXBBlockContext context = new JAXBBlockContext(StockPrice.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(StockPrice.class.getPackage().getName());
         
         // Create the JAX-B object
         ObjectFactory of = new ObjectFactory();
@@ -186,7 +186,7 @@
             FactoryRegistry.getFactory(JAXBBlockFactory.class);
         
         // Create the JAXBContext
-        JAXBBlockContext context = new JAXBBlockContext(StockPrice.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(StockPrice.class.getPackage().getName());
         
         // Create the JAX-B object
         ObjectFactory of = new ObjectFactory();
@@ -282,7 +282,7 @@
         
         // Create the JAXBContext instance that will be used
         // to deserialize the JAX-B object content in the message.
-        JAXBBlockContext context = new JAXBBlockContext(StockPrice.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(StockPrice.class.getPackage().getName());
         
         // Get the JAXBBlock that wraps the content
         Block b = m.getBodyBlock(0, context, bf);
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/BlockTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/BlockTests.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/message/BlockTests.java	(working copy)
@@ -327,7 +327,7 @@
         ObjectFactory factory = new ObjectFactory();
         EchoString jaxb = factory.createEchoString(); 
         jaxb.setInput("Hello World");
-        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage().getName());
        
         JAXBIntrospector jbi = JAXBUtils.getJAXBIntrospector(context.getJAXBContext());
         QName expectedQName = jbi.getElementName(jaxb);
@@ -376,7 +376,7 @@
         ObjectFactory factory = new ObjectFactory();
         EchoString jaxb = factory.createEchoString(); 
         jaxb.setInput("Hello World");
-        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage().getName());
         
         JAXBIntrospector jbi = JAXBUtils.getJAXBIntrospector(context.getJAXBContext());
         QName expectedQName = jbi.getElementName(jaxb);
@@ -425,7 +425,7 @@
         ObjectFactory factory = new ObjectFactory();
         EchoString jaxb = factory.createEchoString(); 
         jaxb.setInput("Hello World");
-        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage().getName());
 		
 		// On inbound, there will already be a XMLStreamReader (probably from OM)
 		// which represents the message.  We will simulate this with inflow.
@@ -472,7 +472,7 @@
         ObjectFactory factory = new ObjectFactory();
         EchoString jaxb = factory.createEchoString(); 
         jaxb.setInput("Hello World");
-        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage().getName());
 
         JAXBIntrospector jbi = JAXBUtils.getJAXBIntrospector(context.getJAXBContext());
         QName expectedQName = jbi.getElementName(jaxb);
@@ -528,7 +528,7 @@
         ObjectFactory factory = new ObjectFactory();
         EchoString jaxb = factory.createEchoString(); 
         jaxb.setInput("Hello World");
-        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(EchoString.class.getPackage().getName());
         
         JAXBIntrospector jbi = JAXBUtils.getJAXBIntrospector(context.getJAXBContext());
         QName expectedQName = jbi.getElementName(jaxb);
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -52,6 +52,7 @@
 import org.apache.axis2.jaxws.message.SOAP12Tests;
 import org.apache.axis2.jaxws.message.XMLStreamReaderSplitterTests;
 import org.apache.axis2.jaxws.nonanonymous.complextype.NonAnonymousComplexTypeTests;
+import org.apache.axis2.jaxws.polymorphic.shape.tests.PolymorphicTests;
 import org.apache.axis2.jaxws.provider.JAXBProviderTests;
 import org.apache.axis2.jaxws.provider.SoapMessageProviderTests;
 import org.apache.axis2.jaxws.provider.SourceMessageProviderTests;
@@ -144,7 +145,7 @@
         suite.addTestSuite(EndpointLifecycleTests.class);
         suite.addTestSuite(ResourceInjectionTests.class);
         suite.addTestSuite(AnyTypeTests.class);
-
+        suite.addTestSuite(PolymorphicTests.class);
         // Start (and stop) the server only once for all the tests
         TestSetup testSetup = new TestSetup(suite) {
             public void setUp() {
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/PolymorphicShapePortTypeImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/PolymorphicShapePortTypeImpl.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/PolymorphicShapePortTypeImpl.java	(revision 0)
@@ -0,0 +1,36 @@
+package org.apache.axis2.jaxws.polymorphic.shape;
+
+import javax.jws.WebService;
+import org.apache.axis2.jaxws.polymorphic.shape.sei.PolymorphicShapePortType;
+import org.test.shape.Circle;
+import org.test.shape.Shape;
+import org.test.shape.Square;
+import org.test.shape.threed.ThreeDSquare;
+
+@WebService(endpointInterface="org.apache.axis2.jaxws.polymorphic.shape.sei.PolymorphicShapePortType", wsdlLocation="test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shapes.wsdl")
+public class PolymorphicShapePortTypeImpl implements PolymorphicShapePortType {
+
+	public Shape draw(Shape request) {
+		if(request instanceof Circle){
+			Circle circle =(Circle) request;
+			System.out.println("Drawing Circle on x ="+request.getXAxis()+" y=" +request.getYAxis()+ " With Radius ="+circle.getRadius());
+			return request;
+		}
+		if(request instanceof Square){
+			Square square =(Square) request;
+			System.out.println("Drawing Square on x ="+request.getXAxis()+" y=" +request.getYAxis()+ " With Sides ="+square.getLength());
+			return request;
+		}
+		return null;
+	}
+
+	public Shape draw3D(Shape request) {
+		if(request instanceof ThreeDSquare){
+			ThreeDSquare threeDsquare =(ThreeDSquare) request;
+			System.out.println("Drawing 3DSquare on x ="+request.getXAxis()+" y=" +request.getYAxis()+ " With Bredth ="+threeDsquare.getBredth());
+			return request;
+		}
+		return null;
+	}
+
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shape_wrappers.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shape_wrappers.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shape_wrappers.xsd	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns="http://wrapper.shape.test.org" 
+		xmlns:tns1="http://shape.test.org"
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://wrapper.shape.test.org">
+		
+		<xsd:import namespace="http://shape.test.org"
+			    schemaLocation="shape.xsd" />
+		
+		<xsd:element name="draw3D">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="request" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+		<xsd:element name="draw">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="request" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+		<xsd:element name="drawResponse">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="response" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+</xsd:schema>		
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/services.xml
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/services.xml	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/services.xml	(revision 0)
@@ -0,0 +1,9 @@
+<serviceGroup>
+ <service name="PolymorphicShapeService">
+  <messageReceivers>
+   <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" class="org.apache.axis2.jaxws.server.JAXWSMessageReceiver"/>
+  </messageReceivers>
+  <parameter locked="false" name="ServiceClass">org.apache.axis2.jaxws.polymorphic.shape.PolymorphicShapePortTypeImpl</parameter>
+ </service>
+</serviceGroup>
+
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/3DShape.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/3DShape.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/3DShape.xsd	(revision 0)
@@ -0,0 +1,19 @@
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns1="http://shape.test.org"
+		xmlns:tns="http://threed.shape.test.org" 
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://threed.shape.test.org">
+		
+		<xsd:import namespace="http://shape.test.org"
+			    schemaLocation="shape.xsd" />
+		
+		<xsd:complexType name="ThreeDSquare">
+		<xsd:complexContent>
+			<xsd:extension base="tns1:Square">
+				<xsd:sequence>
+					<xsd:element name="bredth" type="xsd:int" />
+				</xsd:sequence>
+			</xsd:extension>
+		</xsd:complexContent>
+		</xsd:complexType>
+</xsd:schema>		
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shapes.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shapes.wsdl	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shapes.wsdl	(revision 0)
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wsdl:definitions
+	targetNamespace="http://sei.shape.polymorphic.jaxws.axis2.apache.org"
+	xmlns="http://sei.shape.polymorphic.jaxws.axis2.apache.org"
+	
+	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+	xmlns:tns="http://sei.shape.polymorphic.jaxws.axis2.apache.org"
+	xmlns:tns1="http://shape.test.org"
+	xmlns:tns2="http://threed.shape.test.org"
+	xmlns:tns3="http://wrapper.shape.test.org"
+	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+	
+	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
+
+	<wsdl:types>
+	    <xsd:schema>
+		      <xsd:import namespace="http://shape.test.org"
+		                  schemaLocation="shape.xsd"/>
+		      <xsd:import namespace="http://threed.shape.test.org"
+		                  schemaLocation="3DShape.xsd"/>
+		      <xsd:import namespace="http://wrapper.shape.test.org"
+		                  schemaLocation="shape_wrappers.xsd"/>
+	    </xsd:schema>
+	    
+	</wsdl:types>
+	<wsdl:message name="draw3DRequest">
+		<wsdl:part name="request" element="tns3:draw3D">
+		</wsdl:part>
+	</wsdl:message>
+	
+	<wsdl:message name="drawRequest">
+		<wsdl:part name="request" element="tns3:draw">
+		</wsdl:part>
+	</wsdl:message>
+	
+	<wsdl:message name="drawResponse">
+		<wsdl:part name="typesQNameResponse" element="tns3:drawResponse">
+		</wsdl:part>
+	</wsdl:message>
+	
+	<wsdl:portType name="PolymorphicShapePortType">
+		<wsdl:operation name="draw">
+			<wsdl:input message="tns:drawRequest" />
+			<wsdl:output message="tns:drawResponse" />
+		</wsdl:operation>
+	
+		<wsdl:operation name="draw3D">
+			<wsdl:input message="tns:draw3DRequest" />
+			<wsdl:output message="tns:drawResponse" />
+		</wsdl:operation>
+	</wsdl:portType>
+	
+	<wsdl:binding name="PolymorphicShapeBinding" type="tns:PolymorphicShapePortType">
+		<soap:binding style="document"
+			transport="http://schemas.xmlsoap.org/soap/http" />
+
+		<wsdl:operation name="draw">			
+			<soap:operation
+				soapAction="http://sei.polymorphicshape.jaxws.axis2.apache.org/typesExtension" />
+			<wsdl:input>
+				<soap:body use="literal" />
+			</wsdl:input>
+			<wsdl:output>
+				<soap:body use="literal" />
+			</wsdl:output>
+		</wsdl:operation>
+		
+		<wsdl:operation name="draw3D">
+			<soap:operation
+				soapAction="http://sei.polymorphicshape.jaxws.axis2.apache.org/typesExtension" />
+			<wsdl:input>
+				<soap:body use="literal" />
+			</wsdl:input>
+			<wsdl:output>
+				<soap:body use="literal" />
+			</wsdl:output>
+		</wsdl:operation>
+	</wsdl:binding>
+	
+	<wsdl:service name="PolymorphicShapeService">
+		<wsdl:port name="PolymorphicShapePort"
+			binding="tns:PolymorphicShapeBinding">
+			<soap:address
+				location="http://localhost:8080/axis2/services/PolymorphicShapeService" />
+		</wsdl:port>
+	</wsdl:service>
+	
+</wsdl:definitions>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shape.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shape.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shape.xsd	(revision 0)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns="http://shape.test.org" 
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://shape.test.org">
+			
+		<xsd:complexType name="Shape" abstract="true">
+			<xsd:sequence>
+				<xsd:element name="xAxis" type="xsd:float" />
+				<xsd:element name="yAxis" type="xsd:float" />
+			</xsd:sequence>
+		</xsd:complexType>
+		
+		<xsd:complexType name="Square" >
+			<xsd:complexContent>
+				<xsd:extension base="tns:Shape">
+					<xsd:sequence>
+						<xsd:element name="length" type="xsd:int" />
+						<xsd:element name="width" type="xsd:int" />
+					</xsd:sequence>
+				</xsd:extension>
+			</xsd:complexContent>
+		</xsd:complexType>
+		
+		<xsd:complexType name="Circle" >
+			<xsd:complexContent>
+				<xsd:extension base="tns:Shape">
+					<xsd:sequence>
+						<xsd:element name="radius" type="xsd:int" />
+					</xsd:sequence>
+				</xsd:extension>
+			</xsd:complexContent>
+		</xsd:complexType>	
+</xsd:schema>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/sei/PolymorphicShapeService.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/sei/PolymorphicShapeService.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/sei/PolymorphicShapeService.java	(revision 0)
@@ -0,0 +1,62 @@
+
+package org.apache.axis2.jaxws.polymorphic.shape.sei;
+
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.URL;
+import javax.xml.namespace.QName;
+import javax.xml.ws.Service;
+import javax.xml.ws.WebEndpoint;
+import javax.xml.ws.WebServiceClient;
+
+
+/**
+ * This class was generated by the JAXWS SI.
+ * JAX-WS RI 2.0_01-b15-fcs
+ * Generated source version: 2.0
+ * 
+ */
+@WebServiceClient(name = "PolymorphicShapeService", targetNamespace = "http://sei.shape.polymorphic.jaxws.axis2.apache.org", wsdlLocation = "shapes.wsdl")
+public class PolymorphicShapeService
+    extends Service
+{
+
+    private final static URL POLYMORPHICSHAPESERVICE_WSDL_LOCATION;
+
+    private static String wsdlLocation="/test/org/apache/axis2/jaxws/polymorphic/shape/META-INF/shapes.wsdl";
+    static {
+        URL url = null;
+        try {
+        	try{
+	        	String baseDir = new File(".").getCanonicalPath();
+	        	wsdlLocation = new File(baseDir + wsdlLocation).getAbsolutePath();
+        	}catch(Exception e){
+        		e.printStackTrace();
+        	}
+        	File file = new File(wsdlLocation);
+        	url = file.toURL();
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+        }
+        POLYMORPHICSHAPESERVICE_WSDL_LOCATION = url;
+    }
+
+    public PolymorphicShapeService(URL wsdlLocation, QName serviceName) {
+        super(wsdlLocation, serviceName);
+    }
+
+    public PolymorphicShapeService() {
+        super(POLYMORPHICSHAPESERVICE_WSDL_LOCATION, new QName("http://sei.shape.polymorphic.jaxws.axis2.apache.org", "PolymorphicShapeService"));
+    }
+
+    /**
+     * 
+     * @return
+     *     returns PolymorphicShapePortType
+     */
+    @WebEndpoint(name = "PolymorphicShapePort")
+    public PolymorphicShapePortType getPolymorphicShapePort() {
+        return (PolymorphicShapePortType)super.getPort(new QName("http://sei.shape.polymorphic.jaxws.axis2.apache.org", "PolymorphicShapePort"), PolymorphicShapePortType.class);
+    }
+
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/sei/PolymorphicShapePortType.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/sei/PolymorphicShapePortType.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/sei/PolymorphicShapePortType.java	(revision 0)
@@ -0,0 +1,51 @@
+
+package org.apache.axis2.jaxws.polymorphic.shape.sei;
+
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebResult;
+import javax.jws.WebService;
+import javax.xml.ws.RequestWrapper;
+import javax.xml.ws.ResponseWrapper;
+import org.test.shape.Shape;
+
+
+/**
+ * This class was generated by the JAXWS SI.
+ * JAX-WS RI 2.0_01-b15-fcs
+ * Generated source version: 2.0
+ * 
+ */
+@WebService(name = "PolymorphicShapePortType", targetNamespace = "http://sei.shape.polymorphic.jaxws.axis2.apache.org")
+public interface PolymorphicShapePortType {
+
+
+    /**
+     * 
+     * @param request
+     * @return
+     *     returns org.test.shape.Shape
+     */
+    @WebMethod(action = "http://sei.polymorphicshape.jaxws.axis2.apache.org/typesExtension")
+    @WebResult(name = "response", targetNamespace = "")
+    @RequestWrapper(localName = "draw", targetNamespace = "http://wrapper.shape.test.org", className = "org.test.shape.wrapper.Draw")
+    @ResponseWrapper(localName = "drawResponse", targetNamespace = "http://wrapper.shape.test.org", className = "org.test.shape.wrapper.DrawResponse")
+    public Shape draw(
+        @WebParam(name = "request", targetNamespace = "")
+        Shape request);
+
+    /**
+     * 
+     * @param request
+     * @return
+     *     returns org.test.shape.Shape
+     */
+    @WebMethod(action = "http://sei.polymorphicshape.jaxws.axis2.apache.org/typesExtension")
+    @WebResult(name = "response", targetNamespace = "")
+    @RequestWrapper(localName = "draw3D", targetNamespace = "http://wrapper.shape.test.org", className = "org.test.shape.wrapper.Draw3D")
+    @ResponseWrapper(localName = "drawResponse", targetNamespace = "http://wrapper.shape.test.org", className = "org.test.shape.wrapper.DrawResponse")
+    public Shape draw3D(
+        @WebParam(name = "request", targetNamespace = "")
+        Shape request);
+
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/tests/PolymorphicTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/tests/PolymorphicTests.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/tests/PolymorphicTests.java	(revision 0)
@@ -0,0 +1,131 @@
+package org.apache.axis2.jaxws.polymorphic.shape.tests;
+
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Iterator;
+import java.util.Set;
+
+import javax.wsdl.WSDLException;
+
+import junit.framework.TestCase;
+
+import org.apache.axis2.jaxws.polymorphic.shape.sei.PolymorphicShapePortType;
+import org.apache.axis2.jaxws.polymorphic.shape.sei.PolymorphicShapeService;
+import org.apache.axis2.jaxws.util.WSDL4JWrapper;
+import org.apache.axis2.jaxws.util.WSDLWrapper;
+import org.apache.axis2.jaxws.wsdl.SchemaReaderException;
+import org.apache.axis2.jaxws.wsdl.impl.SchemaReaderImpl;
+import org.test.shape.Shape;
+import org.test.shape.Square;
+import org.test.shape.threed.ThreeDSquare;
+
+public class PolymorphicTests extends TestCase {
+
+	public void testFormalAndActualTypeInDifferentPackages(){
+		System.out.println("------------------------------");
+		System.out.println("Test : "+getName());
+		PolymorphicShapeService service = new PolymorphicShapeService();
+		PolymorphicShapePortType port = service.getPolymorphicShapePort();
+		Shape shapeType;
+		
+		System.out.println("Sending Request to draw Square");
+		Square shape = new Square();
+		shape.setXAxis(1);
+		shape.setYAxis(1);
+		shape.setLength(10);
+		shapeType = port.draw(shape);
+		assertTrue(shapeType instanceof Square);
+		System.out.println("Square was drawn");
+		
+		System.out.println("Sending Request to draw 3D Square");
+		ThreeDSquare threeDshape = new ThreeDSquare();
+		threeDshape.setXAxis(1);
+		threeDshape.setYAxis(1);
+		threeDshape.setLength(10);
+		threeDshape.setWidth(10);
+		threeDshape.setBredth(10);
+		shapeType = port.draw3D(threeDshape);
+		assertTrue(shapeType instanceof ThreeDSquare);
+		System.out.println("3D Square was drawn");
+		System.out.println("-------------------------------");
+	}
+	
+	public void testInlineUseOfJAXBBinding(){
+		System.out.println("------------------------------");
+		System.out.println("Test : "+getName());
+		String schemaBindingPkgName = "org.test.echomessage";
+		String standardPkgName= "org.test.complextype.nonanonymous";
+		String wsdlLocation="test-resources/wsdl/JAXB_Customization_Sample.wsdl";
+		URL url = null;
+		try{
+			try{
+				String baseDir = new File(".").getCanonicalPath();
+				wsdlLocation = new File(baseDir +File.separator+ wsdlLocation).getAbsolutePath();
+			}catch(Exception e){
+				e.printStackTrace();
+				fail();
+			}
+			File file = new File(wsdlLocation);
+			url = file.toURL();
+			WSDLWrapper wsdlWrapper = new WSDL4JWrapper(url);
+			org.apache.axis2.jaxws.wsdl.SchemaReader sr= new SchemaReaderImpl();
+			Set<String> set= sr.readPackagesFromSchema(wsdlWrapper.getDefinition());
+			assertNotNull(set);
+			Iterator<String> iter = set.iterator();
+			while(iter.hasNext()){
+				String pkg = iter.next();
+				System.out.println("Package = " +pkg);
+			}
+			System.out.println("------------------------------");
+		} catch (MalformedURLException e) {
+			e.printStackTrace();
+			fail();
+		}catch(WSDLException e){
+			e.printStackTrace();
+			fail();
+		}catch(SchemaReaderException e){
+			e.printStackTrace();
+			fail();
+		}
+	}
+	
+	public void testSchemaReader(){
+		System.out.println("------------------------------");
+		System.out.println("Test : "+getName());
+		String wsdlLocation="test-resources/wsdl/shapes.wsdl";
+		URL url = null;
+		try{
+			try{
+				String baseDir = new File(".").getCanonicalPath();
+				wsdlLocation = new File(baseDir +File.separator+ wsdlLocation).getAbsolutePath();
+			}catch(Exception e){
+				e.printStackTrace();
+				fail();
+			}
+			File file = new File(wsdlLocation);
+			url = file.toURL();
+			WSDLWrapper wsdlWrapper = new WSDL4JWrapper(url);
+			org.apache.axis2.jaxws.wsdl.SchemaReader sr= new SchemaReaderImpl();
+			Set<String> set= sr.readPackagesFromSchema(wsdlWrapper.getDefinition());
+			assertNotNull(set);
+			Iterator<String> iter = set.iterator();
+			while(iter.hasNext()){
+				System.out.println("Package ="+iter.next());
+			}
+			System.out.println("------------------------------");
+		} catch (MalformedURLException e) {
+			e.printStackTrace();
+			fail();
+		}catch(WSDLException e){
+			e.printStackTrace();
+			fail();
+		}catch(SchemaReaderException e){
+			e.printStackTrace();
+			fail();
+		}
+		
+		
+		        
+	}
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/shape_wrappers.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/shape_wrappers.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/shape_wrappers.xsd	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns="http://wrapper.shape.test.org" 
+		xmlns:tns1="http://shape.test.org"
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://wrapper.shape.test.org">
+		
+		<xsd:import namespace="http://shape.test.org"
+			    schemaLocation="shape.xsd" />
+		
+		<xsd:element name="draw3D">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="request" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+		<xsd:element name="draw">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="request" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+		<xsd:element name="drawResponse">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="response" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+</xsd:schema>		
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/3DShape.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/3DShape.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/3DShape.xsd	(revision 0)
@@ -0,0 +1,19 @@
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns1="http://shape.test.org"
+		xmlns:tns="http://threed.shape.test.org" 
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://threed.shape.test.org">
+		
+		<xsd:import namespace="http://shape.test.org"
+			    schemaLocation="shape.xsd" />
+		
+		<xsd:complexType name="ThreeDSquare">
+		<xsd:complexContent>
+			<xsd:extension base="tns1:Square">
+				<xsd:sequence>
+					<xsd:element name="bredth" type="xsd:int" />
+				</xsd:sequence>
+			</xsd:extension>
+		</xsd:complexContent>
+		</xsd:complexType>
+</xsd:schema>		
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/shape.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/shape.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/polymorphic/shape/xsd/shape.xsd	(revision 0)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns="http://shape.test.org" 
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://shape.test.org">
+			
+		<xsd:complexType name="Shape" abstract="true">
+			<xsd:sequence>
+				<xsd:element name="xAxis" type="xsd:float" />
+				<xsd:element name="yAxis" type="xsd:float" />
+			</xsd:sequence>
+		</xsd:complexType>
+		
+		<xsd:complexType name="Square" >
+			<xsd:complexContent>
+				<xsd:extension base="tns:Shape">
+					<xsd:sequence>
+						<xsd:element name="length" type="xsd:int" />
+						<xsd:element name="width" type="xsd:int" />
+					</xsd:sequence>
+				</xsd:extension>
+			</xsd:complexContent>
+		</xsd:complexType>
+		
+		<xsd:complexType name="Circle" >
+			<xsd:complexContent>
+				<xsd:extension base="tns:Shape">
+					<xsd:sequence>
+						<xsd:element name="radius" type="xsd:int" />
+					</xsd:sequence>
+				</xsd:extension>
+			</xsd:complexContent>
+		</xsd:complexType>	
+</xsd:schema>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/attachments/MTOMSerializationTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/attachments/MTOMSerializationTests.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test/org/apache/axis2/jaxws/attachments/MTOMSerializationTests.java	(working copy)
@@ -117,7 +117,7 @@
         imageDepot.setImageData(dataHandler);
         
         //JAXBContext jbc = JAXBContext.newInstance("org.test.mtom");
-        JAXBBlockContext context = new JAXBBlockContext(SendImage.class.getPackage());
+        JAXBBlockContext context = new JAXBBlockContext(SendImage.class.getPackage().getName());
         
         //Create a request bean with imagedepot bean as value
         ObjectFactory factory = new ObjectFactory();
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/maven.xml
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/maven.xml	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/maven.xml	(working copy)
@@ -158,6 +158,21 @@
     	    <arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/AnyType.wsdl"/>
     	 </java>
 
+    	<ant:echo>Generating java from WSDLMultiTests.wsdl</ant:echo>
+    	<java classname="com.sun.tools.xjc.Driver" fork="true"> 
+    	    <jvmarg line="${maven.junit.jvmargs}"/>
+    	    <classpath refid="maven.dependency.classpath"/>
+    	    <classpath location="${compiled.classes.dir}"/>
+    	    <arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/WSDLMultiTests.wsdl"/>
+    	 </java>
+    	 
+    	<ant:echo>Generating java from Polymorphic shapes.wsdl for javabean endpoint support</ant:echo>
+    	<java classname="com.sun.tools.xjc.Driver" fork="true"> 
+    	    <jvmarg line="${maven.junit.jvmargs}"/>
+    	    <classpath refid="maven.dependency.classpath"/>
+    	    <classpath location="${compiled.classes.dir}"/>
+    	    <arg line="-d ${schema.generated.src.dir} -quiet -wsdl ${wsdl.source.dir}/shapes.wsdl"/>
+    	</java>
     	<!-- Compile the generated classes -->
     	<ant:echo>Compiling generated schema</ant:echo>
         <javac destdir="${schema.generated.classes.dir}" srcdir="${schema.generated.src.dir}">
@@ -430,6 +445,19 @@
 			   <ant:include name="org/apache/axis2/jaxws/server/**"/>
 			</ant:fileset>
 		</ant:copy>
+		
+		<ant:copy toDir="target/test-classes/services/PolymorphicShapeService/">
+			<ant:fileset dir="target/test-classes">
+			   <ant:include name="org/apache/axis2/jaxws/polymorphic/shape/**"/>
+			</ant:fileset>
+			<ant:fileset dir="test/org/apache/axis2/jaxws/polymorphic/shape">
+			   <ant:include name="META-INF/**"/>
+			</ant:fileset>
+			<ant:fileset dir="target/classes">
+			   <ant:include name="org/apache/axis2/jaxws/server/**"/>
+			</ant:fileset>
+		</ant:copy>	
+
 	</postGoal>
 
     <!-- Create the API and Impl jars --> 
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -135,4 +135,6 @@
 MethodMarshallerErr1=A JAX-WS service exception for the {0} fault bean cannot be created.
 SourceReadErr=A problem was encountered while reading the Source object.  Please verify that your Source object is correct.  The class of the Source object is {0}
 JABGraphProblem=The system threw a StackOverflowError at the JAXB level.  This usually means that your JAXB object has a circular reference.  This is not supported by JAXB.
+SchemaReaderErr1=Invlid wsdl Definition provided.
+SchemaReaderErr2=Circular Dependency Found in WSDL Schema Imports, Two Schemas are importing each other.
 XSDListNotSupported=An attempt was made to marshal or unmarshal an xsd:list with a component type that is a {0}.  This scenario is not supported for rpc/literal processing.  Please use document/literal processing.
\ No newline at end of file
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java	(working copy)
@@ -109,7 +109,7 @@
     DescriptionBuilderComposite composite = null;
  
     // Set of packages that are needed to marshal/unmashal data (used to set JAXBContext)
-    Set<Package> packages = null;
+    Set<String> packages = null;
     
     // The JAX-WS Handler port information corresponding to this endpoint
     private PortInfo portInfo;
@@ -1146,7 +1146,7 @@
      * JAXBContext.
      * @return Set<Package>
      */
-    public Set<Package> getPackages() {
+    public Set<String> getPackages() {
         // @REVIEW Currently the package set is stored on the
         // EndpointDescription.  We may consider moving this to 
         // ServiceDescription. 
@@ -1159,7 +1159,7 @@
                 // The Schema walk requires an existing or generated schema.
                 // For now, we will force the use of annotation walk
                 // @See PackageSetBuilder for details
-                boolean useSchemaWalk = false;
+                boolean useSchemaWalk = true;
                 if (useSchemaWalk) {
                     packages = PackageSetBuilder.getPackagesFromSchema(this.getServiceDescription());
                 } else {
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/impl/PackageSetBuilder.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/impl/PackageSetBuilder.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/impl/PackageSetBuilder.java	(working copy)
@@ -16,20 +16,35 @@
  */
 package org.apache.axis2.jaxws.description.impl;
 
+import java.io.File;
+import java.io.IOException;
 import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
+import javax.wsdl.Definition;
+import javax.wsdl.WSDLException;
+import javax.wsdl.xml.WSDLWriter;
 import javax.xml.bind.JAXBElement;
 
+import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.description.EndpointDescription;
 import org.apache.axis2.jaxws.description.EndpointInterfaceDescription;
 import org.apache.axis2.jaxws.description.FaultDescription;
 import org.apache.axis2.jaxws.description.OperationDescription;
 import org.apache.axis2.jaxws.description.ParameterDescription;
 import org.apache.axis2.jaxws.description.ServiceDescription;
+import org.apache.axis2.jaxws.description.ServiceDescriptionWSDL;
 import org.apache.axis2.jaxws.util.JavaUtils;
+import org.apache.axis2.jaxws.util.WSDL4JWrapper;
+import org.apache.axis2.jaxws.util.WSDLWrapper;
 import org.apache.axis2.jaxws.util.XMLRootElementUtil;
+import org.apache.axis2.jaxws.wsdl.SchemaReader;
+import org.apache.axis2.jaxws.wsdl.SchemaReaderException;
+import org.apache.axis2.jaxws.wsdl.impl.SchemaReaderImpl;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -73,17 +88,55 @@
      * @param serviceDesc ServiceDescription
      * @return Set of Packages
      */
-    public static Set<Package> getPackagesFromSchema(ServiceDescription serviceDesc) {
-        // TODO Missing Support
-        throw new UnsupportedOperationException("PackageSetBuilder.getPackagesFromSchema");
+    public static Set<String> getPackagesFromSchema(ServiceDescription serviceDesc) {
+    	boolean annotationWalking = true;
+    	Set<String> set = new HashSet<String>();
+    	//If we are on client side we will get wsdl definition from ServiceDescription. If we are on server side we will have to 
+    	//read wsdlLocation from @WebService Annotation.
+    	ServiceDescriptionWSDL sdw = (ServiceDescriptionWSDL) serviceDesc;
+    	Definition wsdlDefinition = sdw.getWSDLDefinition(); 
+    	EndpointDescription[] endpointDescs = serviceDesc.getEndpointDescriptions();
+    	if (endpointDescs != null) {
+            for (int i=0; i< endpointDescs.length; i++) {
+            	EndpointDescriptionImpl ed = (EndpointDescriptionImpl)endpointDescs[i];
+            	if(wsdlDefinition == null){
+            		//Let see if we can get wsdl definition from endpoint @WebService annotation.
+	            	String wsdlLocation = ed.getAnnoWebServiceWSDLLocation();
+	            	wsdlDefinition = getWSDLDefinition(wsdlLocation);
+            	}
+            	//So at this point either we got wsdl definition from ServiceDescription (which means we are running this code
+            	//on client side) or we got it from the @WebService annotation (which means we are running this code on server side)
+           		if(wsdlDefinition !=null){
+           			SchemaReader sr = new SchemaReaderImpl();
+           			try{
+           				Set<String> pkgSet = sr.readPackagesFromSchema(wsdlDefinition);
+           				set.addAll(pkgSet);
+           			}catch(SchemaReaderException e){
+           				ExceptionFactory.makeWebServiceException(e);
+           			}
+           			//FIXME: For now lets read packages from Annotation too. We will remove this once we are confident that 
+           			//Schema Walk thru works.
+           			if(annotationWalking){
+           				set.addAll(getPackagesFromAnnotations(serviceDesc));
+           			}
+           		}
+           		//if on client side, there is no wsdl provided by client application. if on server side there is no WSDLLocation on @WebService. 
+           		//let read all the required package from SEI Annotation.
+           		else{
+           			set.addAll(getPackagesFromAnnotations(serviceDesc));
+           		}    
+              
+            }
+    	}
+    	return set;
     }
     
     /**
      * @param serviceDescription ServiceDescription
      * @return Set of Packages
      */
-    public static Set<Package> getPackagesFromAnnotations(ServiceDescription serviceDesc) {
-        HashSet<Package> set = new HashSet<Package>();
+    public static Set<String> getPackagesFromAnnotations(ServiceDescription serviceDesc) {
+        HashSet<String> set = new HashSet<String>();
         EndpointDescription[] endpointDescs = serviceDesc.getEndpointDescriptions();
         
         // Build a set of packages from all of the endpoints
@@ -99,11 +152,11 @@
      * @param endpointDesc EndpointDescription
      * @return Set of Packages
      */
-    public static Set<Package> getPackagesFromAnnotations(EndpointDescription endpointDesc) {
+    public static Set<String> getPackagesFromAnnotations(EndpointDescription endpointDesc) {
         EndpointInterfaceDescription endpointInterfaceDesc = 
             endpointDesc.getEndpointInterfaceDescription();
         if (endpointInterfaceDesc == null) {
-            return new HashSet<Package>(); 
+            return new HashSet<String>(); 
         } else {
             return getPackagesFromAnnotations(endpointInterfaceDesc);
         }
@@ -113,8 +166,8 @@
      * @param endpointInterfaceDescription EndpointInterfaceDescription
      * @return Set of Packages
      */
-    public static Set<Package> getPackagesFromAnnotations(EndpointInterfaceDescription endpointInterfaceDesc) {
-        HashSet<Package> set = new HashSet<Package>();
+    public static Set<String> getPackagesFromAnnotations(EndpointInterfaceDescription endpointInterfaceDesc) {
+        HashSet<String> set = new HashSet<String>();
         OperationDescription[] opDescs = endpointInterfaceDesc.getOperations();
         
         // Build a set of packages from all of the opertions
@@ -131,7 +184,7 @@
      * @param opDesc OperationDescription
      * @param set Set<Package> that is updated
      */
-    private static void getPackagesFromAnnotations(OperationDescription opDesc, Set<Package> set) {
+    private static void getPackagesFromAnnotations(OperationDescription opDesc, Set<String> set) {
        
        // Walk the parameter information
        ParameterDescription[] parameterDescs = opDesc.getParameterDescriptions();
@@ -150,7 +203,7 @@
        }
        
        // Also consider the request and response wrappers
-       Package pkg = getPackageFromClassName(opDesc.getRequestWrapperClassName());
+       String pkg = getPackageFromClassName(opDesc.getRequestWrapperClassName());
        if (pkg != null) {
            set.add(pkg);
        }
@@ -162,8 +215,9 @@
        // Finally consider the result type
        Class cls = opDesc.getResultActualType();
        if (cls != null && cls != void.class && cls != Void.class) {
-           pkg = cls.getPackage();
-           if (pkg != null) {
+           Package returnTypePkg = cls.getPackage();
+           if (returnTypePkg != null) {
+           	   pkg = returnTypePkg.getName();
                set.add(pkg);
            }
        }
@@ -174,7 +228,7 @@
      * @param paramDesc ParameterDesc
      * @param set Set<Package> that is updated
      */
-    private static void getPackagesFromAnnotations(ParameterDescription paramDesc, Set<Package> set) {
+    private static void getPackagesFromAnnotations(ParameterDescription paramDesc, Set<String> set) {
        
        // Get the type that defines the actual data.  (this is never a holder )
        Class paramClass = paramDesc.getParameterActualType();
@@ -190,7 +244,7 @@
      * @param faultDesc FaultDescription
      * @param set Set<Package> that is updated
      */
-    private static void getPackagesFromAnnotations(FaultDescription faultDesc, Set<Package> set) {
+    private static void getPackagesFromAnnotations(FaultDescription faultDesc, Set<String> set) {
       
       Class faultBean = loadClass(faultDesc.getFaultBean());  
       if (faultBean != null) {
@@ -205,7 +259,7 @@
      * @param localPart of the element
      * @param set with both type and element packages set
      */
-    private static void setTypeAndElementPackages(Class cls, String namespace, String localPart, Set<Package> set) {
+    private static void setTypeAndElementPackages(Class cls, String namespace, String localPart, Set<String> set) {
         
         // Get the element and type classes
         Class eClass = getElement(cls);
@@ -213,7 +267,10 @@
         
         // Set the package for the type
         if (tClass != null) {
-            Package pkg = tClass.getPackage();
+        	Package typePkg = tClass.getPackage();
+        	//For primitive types there is no package
+        	String pkg = (typePkg!=null) ? typePkg.getName() : null;
+        	
             if (pkg != null) {
                 set.add(pkg);
             }
@@ -227,13 +284,14 @@
                 // in doc/lit wrapped.  The package is determined from the wrapper element in such casses.
                 if (namespace != null && namespace.length() > 0) {
                     // Use default namespace to package algorithm
-                    Package pkg = makePackage(namespace);
+                    String pkg = makePackage(namespace);
                     if (pkg != null) {
                         set.add(pkg);
                     }
                 }
             } else {
-                Package pkg = eClass.getPackage();
+            	Package elementPkg = eClass.getPackage();
+                String pkg = (elementPkg!=null) ? elementPkg.getName() : null;
                 if (pkg != null) {
                     set.add(pkg);
                 }
@@ -281,13 +339,9 @@
      * @param ns
      * @return
      */
-    private static Package makePackage(String ns) {
+    private static String makePackage(String ns) {
         String pkgName = JavaUtils.getPackageFromNamespace(ns);
-        Package pkg = null;
-        if (pkgName != null) {
-            pkg = Package.getPackage(pkgName);
-        }
-        return pkg;
+        return pkgName;
     }
     
     /**
@@ -296,9 +350,9 @@
      * @param className String (may be null or empty)
      * @return Package or null if problems occur
      */
-    private static Package getPackageFromClassName(String className) {
+    private static String getPackageFromClassName(String className) {
         Class clz = loadClass(className);
-        Package pkg = (clz == null) ? null : clz.getPackage();
+        String pkg = (clz == null) ? null : clz.getPackage().getName();
         return pkg;
     }
     
@@ -325,5 +379,29 @@
         return null;
     }
     
-   
+   private static Definition getWSDLDefinition(String wsdlLocation){
+	   Definition wsdlDefinition = null;
+	   if(wsdlLocation !=null && wsdlLocation.trim().length()>0){
+		   try{
+	  	       	String baseDir = new File(".").getCanonicalPath();
+	  	       	wsdlLocation = new File(baseDir +File.separator+ wsdlLocation).getAbsolutePath();
+	  	       	File file = new File(wsdlLocation);
+	  	       	URL url = file.toURL();
+	  	       	if(log.isDebugEnabled()){
+	  	       		log.debug("Reading WSDL from URL:" +url.toString());
+	  	       	}
+	          	WSDLWrapper wsdlWrapper = new WSDL4JWrapper(url);
+	         	wsdlDefinition = wsdlWrapper.getDefinition();
+	          	
+		   }catch(MalformedURLException e){
+	   	   		ExceptionFactory.makeWebServiceException(e);
+		   }catch(IOException e){
+	    	  ExceptionFactory.makeWebServiceException(e);
+		   }catch(WSDLException e){
+	    	  ExceptionFactory.makeWebServiceException(e);
+		   }
+	  }
+	  	  
+      return wsdlDefinition;
+   }
 }
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/description/EndpointDescription.java	(working copy)
@@ -116,5 +116,5 @@
      * JAXBContext.
      * @return Set<Package>
      */
-    public Set<Package> getPackages();
+    public Set<String> getPackages();
 }
\ No newline at end of file
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBBlockContext.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBBlockContext.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBBlockContext.java	(working copy)
@@ -37,7 +37,7 @@
     
     private static final Log log = LogFactory.getLog(JAXBBlockContext.class);
     
-	private Set<Package> contextPackages;  // List of packages needed by the context
+	private Set<String> contextPackages;  // List of packages needed by the context
 	private JAXBContext jaxbContext = null;
     
     // For RPC processing only
@@ -53,7 +53,7 @@
 	 * Normal Constructor JAXBBlockContext
 	 * @param packages Set of packages needed by the JAXBContext.
 	 */
-	public JAXBBlockContext(Set<Package> packages) {
+	public JAXBBlockContext(Set<String> packages) {
         this.contextPackages = packages;
 	}
     
@@ -62,7 +62,7 @@
      * @param contextPackage
      * @deprecated
      */
-    public JAXBBlockContext(Package contextPackage) {
+    public JAXBBlockContext(String contextPackage) {
         this.contextPackages = new HashSet();
         this.contextPackages.add(contextPackage);
     }
@@ -80,7 +80,7 @@
 	/**
 	 * @return Class representing type of the element
 	 */
-	public Set<Package> getContextPackages() {
+	public Set<String> getContextPackages() {
 		return contextPackages;
 	}
     
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBUtils.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBUtils.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/message/databinding/JAXBUtils.java	(working copy)
@@ -19,6 +19,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Modifier;
 import java.net.URL;
 import java.net.URLDecoder;
 import java.util.ArrayList;
@@ -52,8 +53,8 @@
     private static final Log log = LogFactory.getLog(JAXBUtils.class);
     
 	// Create a synchronized weak hashmap key=set contextPackages, value= JAXBContext
-	private static Map<Set<Package>, JAXBContext> map =
-			Collections.synchronizedMap(new WeakHashMap<Set<Package>, JAXBContext>());
+	private static Map<Set<String>, JAXBContext> map =
+			Collections.synchronizedMap(new WeakHashMap<Set<String>, JAXBContext>());
 	private static JAXBContext genericJAXBContext = null;
 	
 	private static Map<JAXBContext,Unmarshaller> umap = 
@@ -95,7 +96,7 @@
 	 * @return JAXBContext
 	 * @throws JAXBException
 	 */
-	public static JAXBContext getJAXBContext(Set<Package> contextPackages) throws JAXBException {
+	public static JAXBContext getJAXBContext(Set<String> contextPackages) throws JAXBException {
 		// JAXBContexts for the same class can be reused and are supposed to be thread-safe
         if (contextPackages == null || contextPackages.isEmpty()) {
             return getGenericJAXBContext();
@@ -136,10 +137,10 @@
                         if (log.isDebugEnabled()) {
                             log.debug("Attempting to create JAXBContext with Class[]");
                         }
-                        Iterator<Package> it = contextPackages.iterator();
+                        Iterator<String> it = contextPackages.iterator();
                         List<Class> fullList = new ArrayList<Class>();
                         while (it.hasNext()) {
-                            Package pkg = it.next();
+                            String pkg = it.next();
                     		fullList.addAll(JAXBUtils.getAllClassesFromPackage(pkg));
                     	}
                     	Class[] classArray = fullList.toArray(new Class[0]);
@@ -351,12 +352,12 @@
      * @return
      * @throws ClassNotFoundException
      */
-    private static List<Class> getAllClassesFromPackage(Package pkg) throws ClassNotFoundException {
+    private static List<Class> getAllClassesFromPackage(String pkg) throws ClassNotFoundException {
         if (pkg == null) {
             return new ArrayList<Class>();
         }   
         // This will hold a list of directories matching the pckgname. There may be more than one if a package is split over multiple jars/paths
-        String pckgname = pkg.getName();
+        String pckgname = pkg;
         ArrayList<File> directories = new ArrayList<File>();
         try {
             ClassLoader cld = Thread.currentThread().getContextClassLoader();
@@ -406,7 +407,7 @@
                             // Don't add any interfaces or JAXWS specific classes.  
                             // Only classes that represent data and can be marshalled 
                             // by JAXB should be added.
-                            if(!clazz.isInterface() 
+                            if(!clazz.isInterface()
                                     && ClassUtils.getDefaultPublicConstructor(clazz) != null
                                     && !ClassUtils.isJAXWSClass(clazz)){
                                 if (log.isDebugEnabled()) {
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitBareMethodMarshaller.java	(working copy)
@@ -75,7 +75,7 @@
             //   4) The type of the data block is defined by schema; thus in most cases
             //      an xsi:type will not be present
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
               
             // Get the return value.
             Class returnType = operationDesc.getResultActualType();
@@ -113,7 +113,7 @@
             //   4) The type of the data block (data:foo) is defined by schema (and probably
             //      is not present in the message
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             
             // Unmarshal the ParamValues from the message
@@ -150,7 +150,7 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -200,7 +200,7 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/RPCLitMethodMarshaller.java	(working copy)
@@ -83,7 +83,7 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -137,7 +137,7 @@
             //   5) We always send an xsi:type, but other vendor's may not.
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Indicate that the style is RPC.  This is important so that the message understands
             // that the data blocks are underneath the operation element
@@ -183,7 +183,7 @@
             
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Create the message 
             MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
@@ -251,7 +251,7 @@
             //   5) We always send an xsi:type, but other vendor's may not.
             // Get the operation information
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Indicate that the style is RPC.  This is important so that the message understands
             // that the data blocks are underneath the operation element
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java	(working copy)
@@ -147,7 +147,7 @@
      */
     static List<PDElement> getPDElements(ParameterDescription[] params, 
             Message message, 
-            Set<Package> packages, 
+            Set<String> packages, 
             boolean isInput, 
             boolean usePartName) throws MessageException, XMLStreamException {
         
@@ -292,7 +292,7 @@
      * @param isRPC 
      * @throws MessageException
      */
-    static void toMessage(List<PDElement> pvList, Message message, Set<Package> packages, boolean isRPC) throws MessageException {
+    static void toMessage(List<PDElement> pvList, Message message, Set<String> packages, boolean isRPC) throws MessageException {
         
         int index = message.getNumBodyBlocks();
         for (int i=0; i<pvList.size(); i++) {
@@ -342,7 +342,7 @@
             Class returnType, 
             String returnNS, 
             String returnLocalPart, 
-            Set<Package> packages, 
+            Set<String> packages, 
             Message message, 
             boolean isRPC) 
             throws MessageException {
@@ -376,7 +376,7 @@
      * @throws MessageException
      * @throws XMLStreamException
      */
-    static Object getReturnValue(Set<Package> packages, Message message, Class rpcType) 
+    static Object getReturnValue(Set<String> packages, Message message, Class rpcType) 
         throws MessageException, XMLStreamException {
         
         
@@ -407,7 +407,7 @@
      * @throws InvocationTargetException
      * @throws IllegalAccessException
      */
-    static void marshalFaultResponse(Throwable throwable, OperationDescription operationDesc,  Set<Package> packages, Message message, boolean isRPC)
+    static void marshalFaultResponse(Throwable throwable, OperationDescription operationDesc,  Set<String> packages, Message message, boolean isRPC)
      throws MessageException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
         
         // Get the root cause of the throwable object
@@ -474,7 +474,7 @@
      * @throws InvocationTargetException
      * @throws NoSuchMethodException
      */
-    static Throwable demarshalFaultResponse(OperationDescription operationDesc, Set<Package> packages,Message message, boolean isRPC) 
+    static Throwable demarshalFaultResponse(OperationDescription operationDesc, Set<String> packages,Message message, boolean isRPC) 
         throws MessageException, ClassNotFoundException, IllegalAccessException,
                InstantiationException, XMLStreamException, InvocationTargetException, NoSuchMethodException {
         
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java	(working copy)
@@ -86,7 +86,7 @@
             //   4) The type of the data block is defined by schema; thus in most cases
             //      an xsi:type will not be present
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
             
             // Determine if a returnValue is expected.
             // The return value may be an child element
@@ -185,7 +185,7 @@
             //   4) The type of the data block (data:foo) is defined by schema (and probably
             //      is not present in the message
             ParameterDescription[] pds =operationDesc.getParameterDescriptions();
-            Set<Package> packages = endpointDesc.getPackages();
+            Set<String> packages = endpointDesc.getPackages();
                         
             // In usage=WRAPPED, there will be a single JAXB block inside the body.
             // Get this block
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/DocLitBareMethodMarshallerImpl.java	(working copy)
@@ -135,10 +135,10 @@
 	        Object bo = null;
             // Create a set of context packages that will be needed to demarshal
             // the jaxb object.  For now just consider the actualType
-            Set<Package> contextPackages = createContextPackageSet();
+            Set<String> contextPackages = createContextPackageSet();
             
             // Create the business object
-	        if(isHeader){
+            if(isHeader){
 	            bo = createBOFromHeaderBlock(contextPackages, message, paramTNS, paramName);
 	        }
 	        else{
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/MethodMarshallerImpl.java	(working copy)
@@ -837,7 +837,7 @@
 		return m;
 	}
 	
-	protected Object createBOFromHeaderBlock(Set<Package> contextPackages, Message message, String targetNamespace, String localPart) throws JAXBException, MessageException, XMLStreamException{
+	protected Object createBOFromHeaderBlock(Set<String> contextPackages, Message message, String targetNamespace, String localPart) throws JAXBException, MessageException, XMLStreamException{
 		
 		JAXBBlockContext blockContext = createJAXBBlockContext(contextPackages);
 		
@@ -848,12 +848,12 @@
         return block.getBusinessObject(true);
 	}
 	
-	protected Object createBOFromBodyBlock(Set<Package> contextPackages, Message message) throws JAXBException, MessageException, XMLStreamException{
+	protected Object createBOFromBodyBlock(Set<String> contextPackages, Message message) throws JAXBException, MessageException, XMLStreamException{
 		return createBusinessObject(contextPackages, message);
 	}
 
 	
-	protected Object createBusinessObject(Set<Package> contextPackages, Message message) throws JAXBException, MessageException, XMLStreamException{
+	protected Object createBusinessObject(Set<String> contextPackages, Message message) throws JAXBException, MessageException, XMLStreamException{
 		JAXBBlockContext blockContext = createJAXBBlockContext(contextPackages);
 		
 		// Get a JAXBBlockFactory instance.  We'll need this to get the JAXBBlock
@@ -864,7 +864,7 @@
         return block.getBusinessObject(true);
 	}
 	
-	private JAXBBlockContext createJAXBBlockContext(Set<Package> contextPackages) throws JAXBException, MessageException {
+	private JAXBBlockContext createJAXBBlockContext(Set<String> contextPackages) throws JAXBException, MessageException {
 		JAXBBlockContext blockContext = new JAXBBlockContext(contextPackages);
 		return blockContext;
 	}
@@ -916,7 +916,7 @@
      * @param cls
      * @return
      */
-    protected Set<Package> createContextPackageSet() {
+    protected Set<String> createContextPackageSet() {
          return operationDesc.getEndpointInterfaceDescription().getEndpointDescription().getPackages();
     }
 	
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/impl/SchemaReaderImpl.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/impl/SchemaReaderImpl.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/impl/SchemaReaderImpl.java	(revision 0)
@@ -0,0 +1,240 @@
+package org.apache.axis2.jaxws.wsdl.impl;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.Vector;
+
+import javax.wsdl.Definition;
+import javax.wsdl.Types;
+import javax.wsdl.extensions.ExtensibilityElement;
+import javax.wsdl.extensions.schema.Schema;
+import javax.wsdl.extensions.schema.SchemaImport;
+
+import org.apache.axis2.jaxws.i18n.Messages;
+import org.apache.axis2.jaxws.marshaller.impl.DocLitBareMethodMarshallerImpl;
+import org.apache.axis2.jaxws.util.JavaUtils;
+import org.apache.axis2.jaxws.util.WSDLWrapper;
+import org.apache.axis2.jaxws.wsdl.SchemaReader;
+import org.apache.axis2.jaxws.wsdl.SchemaReaderException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+public class SchemaReaderImpl implements SchemaReader {
+
+	private static String JAXB_SCHEMA_BINDING = "schemaBindings";
+	private static String JAXB_SCHEMA_BINDING_PACKAGE = "package";
+	private static String JAXB_SCHEMA_Binding_PACKAGENAME = "name";
+	private static String SCHEMA_TARGETNAMESPACE = "targetNamespace";
+	private Definition wsdlDefinition = null;
+	private static Log log = LogFactory.getLog(SchemaReaderImpl.class);
+	
+	public Set<String> readPackagesFromSchema(Definition wsdlDefinition) throws SchemaReaderException{
+		if(wsdlDefinition == null){
+			if(log.isDebugEnabled()){
+				log.debug("Invalid wsdl definition provided, NULL");
+			}
+			throw new SchemaReaderException(Messages.getMessage("SchemaReaderErr1"));
+		}
+		this.wsdlDefinition = wsdlDefinition;
+		HashSet<String> set = new HashSet<String>();
+		//Add WSDL TargetNamespace
+		String namespace = wsdlDefinition.getTargetNamespace();
+		String packageString = JavaUtils.getPackageFromNamespace(namespace);
+		set.add(packageString);
+		
+		//Read Schema Definition in wsdl;
+		Types types = wsdlDefinition.getTypes();
+		
+		List extensibilityElements = types.getExtensibilityElements();
+		
+		//Read the schema defined in the wsdl
+		for(Object obj:extensibilityElements){
+			if(isSchema((ExtensibilityElement)obj)){
+				Schema schema = (Schema)obj;
+				//First Read all inline Schema packages
+				List<String> inlineSchemaPkgList = readPackagesFromInlineSchema(schema);
+				for(String pkgAsString:inlineSchemaPkgList){
+					if(pkgAsString!=null){
+						set.add(pkgAsString);
+					}
+				}
+				
+				//Then read all imported schema definitions
+				ArrayList<String> schemaImportPkgList = readPackagesFromImports(schema);
+				for(String pkgAsString : schemaImportPkgList){
+					if(pkgAsString!=null){
+						set.add(pkgAsString);
+					}
+				}
+			}
+		}
+		//Set always stores unique objects, so I dont have to worry about removing duplicates from this set.
+		return set;
+	}
+	/*
+	 * Read ShemaBinding from inline schema, if not SchemaBinding defined then read the targetnamespace.
+	 * Inline Schema - Schema defined in WSDL Types.
+	 */
+	private ArrayList<String> readPackagesFromInlineSchema(Schema schema){
+		ArrayList<String> pkgList = new ArrayList<String>();
+		
+		//check if there is any jaxb customization/binding defined namely schemaBinding.
+		String packageString = readSchemaBindingPackageName(schema);
+		if(packageString == null){
+			//no Schema Binding package name found, this means no jaxb customizations in schema, lets read wsdl 
+			//targetnamespace. Thats what will be used by RI tooling to store java Beans
+			String namespace = readSchemaTargetnamespace(schema);
+			if(namespace !=null){
+				packageString = JavaUtils.getPackageFromNamespace(namespace);
+			}
+		}
+		pkgList.add(packageString);
+		
+		return pkgList;
+	}
+	/*
+	 * Read ShemaBinding from import schema, if not SchemaBinding defined then read the targetnamespace.
+	 * import Schema - import defined in Schema section of WSDL Types.
+	 */
+	private ArrayList<String> readPackagesFromImports(Schema schema) throws SchemaReaderException{
+		ArrayList<String> schemaImportPkgList = new ArrayList<String>();
+		Map map  = schema.getImports();
+		Collection collection = map.values();
+		for(Iterator i =collection.iterator(); i.hasNext(); ){
+			Vector value = (Vector) i.next();
+			for(Object vectorObj:value){
+				SchemaImport si = (SchemaImport)vectorObj;
+				if(log.isDebugEnabled()){
+					if(si!=null)
+						log.debug("Reading import for SchemaLocation ="+si.getSchemaLocationURI());
+				}
+				
+				Schema refSchema = si.getReferencedSchema();
+				
+				//Implementing recursion for reading import within import
+
+				//First read inline schema for imported schema
+				ArrayList<String> inlineSchemaPkgList  = readPackagesFromInlineSchema(refSchema);
+				for(String packageString:inlineSchemaPkgList){
+					if(packageString!=null){
+						schemaImportPkgList.add(packageString);
+					}
+				}
+				//Before we fetch import within imports lets check for circular dependency
+				//Circular dependency is two imports calling each other in different xsd files.
+				if(isCircularDependency(this.readSchemaTargetnamespace(schema), refSchema)){
+					if(log.isDebugEnabled()){
+						log.debug("Circular Dependency Found in WSDL Schema Imports, Two Schemas are importing each other.");
+					}
+					throw new SchemaReaderException(Messages.getMessage("SchemaReaderErr2"));
+				}
+				
+				//Lets read if import has any imports by recurisvely calling readPackageFromImport again....
+				ArrayList<String> rec_ImportPkgList = readPackagesFromImports(refSchema);
+				for(String packageString:rec_ImportPkgList){
+					if(packageString!=null){
+						schemaImportPkgList.add(packageString);
+					}
+				}
+			}
+			
+		}
+		
+		return schemaImportPkgList;
+	}
+	
+	private String readSchemaTargetnamespace(Schema schema){
+		Node root = schema.getElement();
+		if(root!=null){
+			NamedNodeMap nodeMap = root.getAttributes();
+			Node attributeNode = nodeMap.getNamedItem(SCHEMA_TARGETNAMESPACE);
+			if(attributeNode!=null){
+				return attributeNode.getNodeValue();
+			}
+		}
+		return null;
+	}
+	private String readSchemaBindingPackageName(Schema schema){
+		
+		/* JAXB Specification section 7.6 have following important points
+		 * 1) <schemaBindings> binding declaration have schema scope
+		 * 2) For inline annotation  a <schemaBindings> is valid only in the annotation element of the <schema> element.
+		 * 3) There must only be a single instance of <schemaBindings> declaration in the annotation element of the <schema> element.
+		 */
+		
+		//Get root node for schema.
+		Node root = schema.getElement();
+		if(root.hasChildNodes()){
+			
+			//get all child nodes for schema
+			NodeList list = root.getChildNodes();
+			
+			//search for JAXB schemaBinding customization in schema element definitions. 
+			for(int i=0; i<list.getLength(); i++){
+				Node childNode = list.item(i);
+				if(isElementName(JAXB_SCHEMA_BINDING, childNode)){
+					
+					//SchemaBinding has been defined, so lets look for package element. 
+					NodeList schemaBindingNodeList = childNode.getChildNodes();
+					for(int j =0; j<schemaBindingNodeList.getLength(); j++){
+						Node schemaBindingNode = schemaBindingNodeList.item(j);
+						if(isElementName(JAXB_SCHEMA_BINDING_PACKAGE, schemaBindingNode)){
+							
+							//Package Element found, so lets read the package name attribute and return that.
+							NamedNodeMap nodeMap = schemaBindingNode.getAttributes();
+							Node attributeNode = nodeMap.getNamedItem(JAXB_SCHEMA_Binding_PACKAGENAME);
+							return attributeNode.getNodeValue();
+						}
+					}
+				}
+			}
+		}
+		return null;
+	}
+	private boolean  isElementName(String name, Node domNode){
+		if(domNode == null){
+			return false;
+		}
+		if(domNode.getNodeType() == Node.ELEMENT_NODE){
+			String localName = domNode.getLocalName();
+			return localName!=null && localName.equals(name);
+		}
+		return false;
+	}
+	
+	private boolean isSchema(ExtensibilityElement exElement){
+		return WSDLWrapper.SCHEMA.equals(exElement.getElementType());
+	}
+	/*
+	 * Check if Schema1 imports Schema2 and Schema2 imports Schema1
+	 */
+	private boolean isCircularDependency(String targetNamespaceSchema1, Schema Schema2){
+		//Get All imports of the schema2
+		Map map  = Schema2.getImports();
+		Collection collection =map.values();
+		for(Iterator i =collection.iterator(); i.hasNext(); ){
+			Vector value = (Vector) i.next();
+			for(Object vectorObj:value){
+				SchemaImport si = (SchemaImport)vectorObj;
+				
+				//Comparte Schema2 import targetNamespace URI with targetNamespace of Schema1 if they match its a circular
+				//dependency.
+				//TODO should we also check for Schema location here.
+				if(si.getNamespaceURI().equals(targetNamespaceSchema1)){
+					return true;
+				}
+			}
+			
+		}
+		return false;
+	}
+	
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/SchemaReaderException.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/SchemaReaderException.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/SchemaReaderException.java	(revision 0)
@@ -0,0 +1,25 @@
+package org.apache.axis2.jaxws.wsdl;
+
+public class SchemaReaderException extends Exception {
+
+	public SchemaReaderException() {
+		super();
+		
+	}
+
+	public SchemaReaderException(String message, Throwable cause) {
+		super(message, cause);
+		
+	}
+
+	public SchemaReaderException(String message) {
+		super(message);
+		
+	}
+
+	public SchemaReaderException(Throwable cause) {
+		super(cause);
+		
+	}
+
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/SchemaReader.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/SchemaReader.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/wsdl/SchemaReader.java	(revision 0)
@@ -0,0 +1,30 @@
+/**
+ * 
+ */
+package org.apache.axis2.jaxws.wsdl;
+
+import java.util.Set;
+
+import javax.wsdl.Definition;
+/**
+ * Schema Reader interface is used to read schema from wsdl and derive appropriate package names from targetnamespace.
+ * The algorithm for deriving reading packages names from schema is as follows:
+ * 1) Read the inline schema defined in the wsdl
+ * 2) check if there is any jaxb customization/binding defined namely schemaBinding.
+ * 		if(schemaBinding defined) then
+ * 			read the package name and add that to the package set.
+ * 		else read the targetnamespace convert tns to package and add to pkg set.
+ * 3) check if there are any xsd imports or includes then
+ * 		for(each import)
+ * 			read the inline schema or perfor step 1
+ * 			check if there is any jaxb schemaBinding customization defined
+ * 			if(schemaBinding defined) then
+ * 				read the package name and add that to the package set.
+ * 			else read the targetnamespace convert tns to package and add to pkg set.
+ * 			Do Step 3 recursively so we cover Schema imports within import n times.
+ * 
+ *
+ */
+public interface SchemaReader {
+	public Set<String> readPackagesFromSchema(Definition wsdlDefinition)throws SchemaReaderException;
+}
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/util/JavaUtils.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/util/JavaUtils.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/util/JavaUtils.java	(working copy)
@@ -46,8 +46,11 @@
         
         // Step 1: Scan off the host name
         String hostname = null;
+        String path = null;
         try {
-            hostname = new URL(namespace).getHost();
+        	URL url = new URL(namespace);
+            hostname = url.getHost();
+            path = url.getPath();
         }
         catch (MalformedURLException e) {
                // No FFDC code needed
@@ -62,16 +65,28 @@
         
         // Step 3: Tokenize the host name using ":" and "/"
         StringTokenizer st = new StringTokenizer( hostname, ":/" );
-        String[] words = new String[ st.countTokens() ];
-        for(int i = 0; i < words.length; ++i) {
-            words[i] = st.nextToken();
+        
+        ArrayList<String> wordList = new ArrayList<String>();
+        
+        //Read Hostname first.
+        for(int i = 0; st !=null &&  i < st.countTokens(); ++i) {
+        	wordList.add(st.nextToken());
         }
-        
+        //Read rest Of the path now
+        if(path!=null){
+	        StringTokenizer pathst = new StringTokenizer(path,"/");
+	        while(pathst!=null && pathst.hasMoreTokens()){
+	        	wordList.add(pathst.nextToken());
+	        }
+        }
+        String[] words = wordList.toArray(new String[0]);
         // Now do step 2: Strip off the trailing "." (i.e. strip off .html)
-        String lastWord = words[words.length-1];
-        int index = lastWord.lastIndexOf('.');
-        if (index > 0) {
-            words[words.length-1] = lastWord.substring(0,index);
+        if(words !=null && words.length > 1 ){
+	        String lastWord = words[words.length-1];
+	        int index = lastWord.lastIndexOf('.');
+	        if (index > 0) {
+	            words[words.length-1] = lastWord.substring(0,index);
+	        }
         }
         
         
@@ -126,7 +141,7 @@
             if (i == 0) {
                 name = list.get(0);
             } else {
-                name = "." + list.get(i);
+                name =name + "." + list.get(i);
             }
         }
         return name;
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/client/JAXBDispatch.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/client/JAXBDispatch.java	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/src/org/apache/axis2/jaxws/client/JAXBDispatch.java	(working copy)
@@ -63,7 +63,7 @@
             if (jaxbContext != null) {
                 context = new JAXBBlockContext(jaxbContext);
             } else {
-                context = new JAXBBlockContext(clazz.getPackage());
+                context = new JAXBBlockContext(clazz.getPackage().getName());
             }
             Block block = factory.createFrom(value, context, null);
             
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/JAXB_Customization_Sample.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/JAXB_Customization_Sample.wsdl	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/JAXB_Customization_Sample.wsdl	(revision 0)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<definitions targetNamespace="http://nonanonymous.complextype.test.org" 
+      xmlns:tns="http://nonanonymous.complextype.test.org"
+      xmlns="http://schemas.xmlsoap.org/wsdl/" 
+      xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+      xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+      xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
+	 
+
+   <types>
+      <xsd:schema targetNamespace="http://nonanonymous.complextype.test.org"
+         xmlns:ts="http://nonanonymous.complextype.test.org/xsd"
+         xmlns="http://www.w3.org/2001/XMLSchema"
+         elementFormDefault="qualified">
+
+         <complexType name="echoMessage">
+            <sequence>
+               <element name="request" type="xsd:string"/>
+            </sequence>
+         </complexType>
+
+         <complexType name="echoMessageResponse">
+            <sequence>
+               <element name="response" type="xsd:string"/>
+            </sequence>
+         </complexType>
+
+         <element name="echoMessage" type="tns:echoMessage"/>
+         <element name="echoMessageResponse" type="tns:echoMessageResponse"/>
+         
+<!-- Using schema binding to change the package name for jaxb art effects -->		
+		<jaxb:schemaBindings>
+			<jaxb:package name = "org.test.echomessage" />
+		</jaxb:schemaBindings>
+      </xsd:schema>
+   </types>
+
+   <message name="echoMessage">
+      <part name="message" element="tns:echoMessage"/>
+   </message>
+
+   <message name="echoMessageResponse">
+      <part name="result" element="tns:echoMessageResponse"/>
+   </message>
+
+   <portType name="EchoMessagePortType">
+      <operation name="echoMessage">
+         <input message="tns:echoMessage" />
+         <output message="tns:echoMessageResponse" />
+      </operation>
+   </portType>
+
+   <binding name="EchoMessageBinding" type="tns:EchoMessagePortType">
+      <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
+      <operation name="echoMessage">
+         <soap:operation soapAction=""/>
+         <input>
+            <soap:body use="literal"/>
+         </input>
+
+         <output>
+            <soap:body use="literal"/>
+         </output>
+      </operation>
+   </binding>
+
+   <service name="EchoMessageService">
+      <port binding="tns:EchoMessageBinding" name="EchoMessagePort">
+         <soap:address location="http://localhost:8080/EchoMessageService/EchoMessageService"/>
+      </port>
+
+   </service>
+
+</definitions>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/shapes.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/shapes.wsdl	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/shapes.wsdl	(revision 0)
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wsdl:definitions
+	targetNamespace="http://sei.shape.polymorphic.jaxws.axis2.apache.org"
+	xmlns="http://sei.shape.polymorphic.jaxws.axis2.apache.org"
+	
+	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+	xmlns:tns="http://sei.shape.polymorphic.jaxws.axis2.apache.org"
+	xmlns:tns1="http://shape.test.org"
+	xmlns:tns2="http://threed.shape.test.org"
+	xmlns:tns3="http://wrapper.shape.test.org"
+	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+	
+	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
+
+	<wsdl:types>
+	    <xsd:schema>
+		      <xsd:import namespace="http://shape.test.org"
+		                  schemaLocation="../xsd/shape.xsd"/>
+		      <xsd:import namespace="http://threed.shape.test.org"
+		                  schemaLocation="../xsd/3DShape.xsd"/>
+		      <xsd:import namespace="http://wrapper.shape.test.org"
+		                  schemaLocation="../xsd/shape_wrappers.xsd"/>
+	    </xsd:schema>
+	    
+	</wsdl:types>
+	<wsdl:message name="draw3DRequest">
+		<wsdl:part name="request" element="tns3:draw3D">
+		</wsdl:part>
+	</wsdl:message>
+	
+	<wsdl:message name="drawRequest">
+		<wsdl:part name="request" element="tns3:draw">
+		</wsdl:part>
+	</wsdl:message>
+	
+	<wsdl:message name="drawResponse">
+		<wsdl:part name="typesQNameResponse" element="tns3:drawResponse">
+		</wsdl:part>
+	</wsdl:message>
+	
+	<wsdl:portType name="PolymorphicShapePortType">
+		<wsdl:operation name="draw">
+			<wsdl:input message="tns:drawRequest" />
+			<wsdl:output message="tns:drawResponse" />
+		</wsdl:operation>
+	
+		<wsdl:operation name="draw3D">
+			<wsdl:input message="tns:draw3DRequest" />
+			<wsdl:output message="tns:drawResponse" />
+		</wsdl:operation>
+	</wsdl:portType>
+	
+	<wsdl:binding name="PolymorphicShapeBinding" type="tns:PolymorphicShapePortType">
+		<soap:binding style="document"
+			transport="http://schemas.xmlsoap.org/soap/http" />
+
+		<wsdl:operation name="draw">			
+			<soap:operation
+				soapAction="http://sei.polymorphicshape.jaxws.axis2.apache.org/typesExtension" />
+			<wsdl:input>
+				<soap:body use="literal" />
+			</wsdl:input>
+			<wsdl:output>
+				<soap:body use="literal" />
+			</wsdl:output>
+		</wsdl:operation>
+		
+		<wsdl:operation name="draw3D">
+			<soap:operation
+				soapAction="http://sei.polymorphicshape.jaxws.axis2.apache.org/typesExtension" />
+			<wsdl:input>
+				<soap:body use="literal" />
+			</wsdl:input>
+			<wsdl:output>
+				<soap:body use="literal" />
+			</wsdl:output>
+		</wsdl:operation>
+	</wsdl:binding>
+	
+	<wsdl:service name="PolymorphicShapeService">
+		<wsdl:port name="PolymorphicShapePort"
+			binding="tns:PolymorphicShapeBinding">
+			<soap:address
+				location="http://localhost:8080/axis2/services/PolymorphicShapeService" />
+		</wsdl:port>
+	</wsdl:service>
+	
+</wsdl:definitions>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/resourceinjection.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/resourceinjection.wsdl	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/resourceinjection.wsdl	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://resourceinjection.sample.test.org" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ResourceInjection" targetNamespace="http://resourceinjection.sample.test.org">
+<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://resourceinjection.sample.test.org" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" name="ResourceInjection" targetNamespace="http://resourceinjection.sample.test.org">
   <wsdl:types>
     <xsd:schema targetNamespace="http://resourceinjection.sample.test.org" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
       <xsd:element name="echoResponse">
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/ProxyDocLitWrapped.wsdl
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/ProxyDocLitWrapped.wsdl	(revision 481174)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/wsdl/ProxyDocLitWrapped.wsdl	(working copy)
@@ -1,14 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
-	xmlns:tns="http://org.apache.axis2.proxy.doclitwrapped"
+	xmlns:tns="http://doclitwrapped.proxy.test.org"
 	xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="proxy"
-	targetNamespace="http://org.apache.axis2.proxy.doclitwrapped">
+	targetNamespace="http://doclitwrapped.proxy.test.org">
 
 	<wsdl:types>
 		<xsd:schema
-			targetNamespace="http://org.apache.axis2.proxy.doclitwrapped"
-			xmlns:tns="http://org.apache.axis2.proxy.doclitwrapped"
+			targetNamespace="http://doclitwrapped.proxy.test.org"
+			xmlns:tns="http://doclitwrapped.proxy.test.org"
 			xmlns:xsd="http://www.w3.org/2001/XMLSchema">
 
 			<xsd:element name="MyFault" type="xsd:string" />
@@ -207,7 +207,7 @@
 
 		<wsdl:operation name="oneWayVoid">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -215,7 +215,7 @@
 
 		<wsdl:operation name="oneWay">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -223,7 +223,7 @@
 
 		<wsdl:operation name="twoWayHolder">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -235,7 +235,7 @@
 
 		<wsdl:operation name="twoWay">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -247,7 +247,7 @@
 		
 		<wsdl:operation name="invoke">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/twoWayReturn" />
+				soapAction="http://doclitwrapped.proxy.test.org/twoWayReturn" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
@@ -259,7 +259,7 @@
 		
 		<wsdl:operation name="finOp">
 			<soap:operation
-				soapAction="http://org.apache.axis2.proxy.doclitwrapped/finOp" />
+				soapAction="http://doclitwrapped.proxy.test.org/finOp" />
 			<wsdl:input>
 				<soap:body use="literal" />
 			</wsdl:input>
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/shape_wrappers.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/shape_wrappers.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/shape_wrappers.xsd	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns="http://wrapper.shape.test.org" 
+		xmlns:tns1="http://shape.test.org"
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://wrapper.shape.test.org">
+		
+		<xsd:import namespace="http://shape.test.org"
+			    schemaLocation="shape.xsd" />
+		
+		<xsd:element name="draw3D">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="request" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+		<xsd:element name="draw">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="request" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+		<xsd:element name="drawResponse">
+			<xsd:complexType>
+				<xsd:sequence>
+					<xsd:element name="response" type="tns1:Shape" />
+				</xsd:sequence>
+			</xsd:complexType>
+		</xsd:element>
+		
+</xsd:schema>		
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/3DShape.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/3DShape.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/3DShape.xsd	(revision 0)
@@ -0,0 +1,21 @@
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns1="http://shape.test.org"
+		xmlns:tns="http://threed.shape.test.org" 
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://threed.shape.test.org">
+		
+		<xsd:import namespace="http://shape.test.org"
+			    schemaLocation="shape.xsd" />
+		
+		<xsd:complexType name="ThreeDSquare">
+		<xsd:complexContent>
+			<xsd:extension base="tns1:Square">
+				<xsd:sequence>
+					<xsd:element name="bredth" type="xsd:int" />
+				</xsd:sequence>
+			</xsd:extension>
+		</xsd:complexContent>
+		</xsd:complexType>
+		
+		
+</xsd:schema>		
Index: C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/shape.xsd
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/shape.xsd	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_113006/modules/jaxws/test-resources/xsd/shape.xsd	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
+		xmlns:tns="http://shape.test.org" 
+		xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"  jaxb:version="2.0"
+		targetNamespace="http://shape.test.org">
+		
+		<xsd:complexType name="Shape" abstract="true">
+			<xsd:sequence>
+				<xsd:element name="xAxis" type="xsd:float" />
+				<xsd:element name="yAxis" type="xsd:float" />
+			</xsd:sequence>
+		</xsd:complexType>
+		
+		<xsd:complexType name="Square" >
+			<xsd:complexContent>
+				<xsd:extension base="tns:Shape">
+					<xsd:sequence>
+						<xsd:element name="length" type="xsd:int" />
+						<xsd:element name="width" type="xsd:int" />
+					</xsd:sequence>
+				</xsd:extension>
+			</xsd:complexContent>
+		</xsd:complexType>
+		
+		<xsd:complexType name="Circle" >
+			<xsd:complexContent>
+				<xsd:extension base="tns:Shape">
+					<xsd:sequence>
+						<xsd:element name="radius" type="xsd:int" />
+					</xsd:sequence>
+				</xsd:extension>
+			</xsd:complexContent>
+		</xsd:complexType>	
+		
+</xsd:schema>
