Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(revision 464549)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSTest.java	(working copy)
@@ -47,6 +47,7 @@
 import org.apache.axis2.jaxws.sample.MtomSampleTests;
 import org.apache.axis2.jaxws.sample.NonWrapTests;
 import org.apache.axis2.jaxws.sample.WrapTests;
+import org.apache.axis2.jaxws.security.BasicAuthSecurityTests;
 import org.apache.axis2.proxy.ProxyNonWrappedTests;
 import org.apache.axis2.proxy.ProxyTests;
 
@@ -90,6 +91,7 @@
         suite.addTestSuite(ProxyTests.class);
         suite.addTestSuite(ProxyNonWrappedTests.class);
         suite.addTestSuite(ExceptionFactoryTests.class);
+        suite.addTestSuite(BasicAuthSecurityTests.class);
 
         suite.addTestSuite(AddressBookTests.class);
         suite.addTestSuite(MtomSampleTests.class);
Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/META-INF/services.xml
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/META-INF/services.xml	(revision 0)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/META-INF/services.xml	(revision 0)
@@ -0,0 +1,12 @@
+<serviceGroup>
+ <service name="BasicAuthSecurityService">
+  <messageReceivers>
+   <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" class="org.apache.axis2.jaxws.server.JAXWSMessageReceiver"/>
+  </messageReceivers>
+  <parameter locked="false" name="ServiceClass">org.apache.axis2.jaxws.security.server.SecurityProvider</parameter>
+  <operation name="invoke" mep="http://www.w3.org/2004/08/wsdl/in-out">
+    <actionMapping/>
+  </operation>
+ </service>
+</serviceGroup>
+
Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/META-INF/MANIFEST.MF
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/META-INF/MANIFEST.MF	(revision 0)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/META-INF/MANIFEST.MF	(revision 0)
@@ -0,0 +1 @@
+Manifest-Version: 1.0
\ No newline at end of file
Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/SecurityProvider.java
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/SecurityProvider.java	(revision 0)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/server/SecurityProvider.java	(revision 0)
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.security.server;
+
+import javax.xml.ws.Provider;
+import javax.xml.ws.WebServiceProvider;
+
+@WebServiceProvider()
+public class SecurityProvider implements Provider<String> {
+
+    private static String responseGood = "<provider><message>request processed</message></provider>";
+    private static String responseBad  = "<provider><message>ERROR:null request received</message><provider>";
+    
+    public String invoke(String obj) {
+        if (obj != null) {
+            String str = (String) obj;
+            System.out.println(">> StringProvider received a new request");
+            System.out.println(">> request [" + str + "]");
+            
+            return responseGood;
+        }
+        System.out.println(">> ERROR:null request received");
+        return responseBad;
+    }
+}
Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/BasicAuthSecurityTests.java
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/BasicAuthSecurityTests.java	(revision 0)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/test/org/apache/axis2/jaxws/security/BasicAuthSecurityTests.java	(revision 0)
@@ -0,0 +1,148 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.security;
+
+import javax.xml.namespace.QName;
+import javax.xml.ws.Dispatch;
+import javax.xml.ws.Service;
+import javax.xml.ws.WebServiceException;
+import javax.xml.ws.soap.SOAPBinding;
+
+import org.apache.axis2.jaxws.BindingProvider;
+
+import junit.framework.TestCase;
+
+public class BasicAuthSecurityTests extends TestCase {
+
+    private String endpointUrl = "http://localhost:8080/axis2/services/BasicAuthSecurityService";
+    private String xmlString = "<invoke>test input</invoke>";
+    private QName SERVICE_QNAME = new QName("http://ws.apache.org/axis2", "BasicAuthSecurityService");
+    private QName PORT_QNAME = new QName("http://ws.apache.org/axis2", "SimpleProviderServiceSOAP11port0");
+
+	private String USER_ID = "testid";
+	private String PASSWORD = "testid";
+
+    protected void setUp() throws Exception {
+            super.setUp();
+    }
+
+    protected void tearDown() throws Exception {
+            super.tearDown();
+    }
+
+    public BasicAuthSecurityTests(String name) {
+        super(name);
+    }
+    
+    public void testBasicAuth() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        Dispatch<String> dispatch = getDispatch(Service.Mode.PAYLOAD,
+        		                                endpointUrl,
+        		                                SOAPBinding.SOAP11HTTP_BINDING);
+        
+        System.out.println(">> Invoking Dispatch<String> BasicAuthSecurityService");
+        String retVal = dispatch.invoke(xmlString);
+        System.out.println(">> Response [" + retVal + "]");
+    }
+    
+    public void testBasicAuth_uid_pwd() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        Dispatch<String> dispatch = getDispatch(Service.Mode.PAYLOAD,
+        		                                endpointUrl,
+        		                                SOAPBinding.SOAP11HTTP_BINDING);
+        
+        dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, USER_ID);
+		dispatch.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, PASSWORD);
+
+        System.out.println(">> Invoking Dispatch<String> BasicAuthSecurityService");
+        String retVal = dispatch.invoke(xmlString);
+        System.out.println(">> Response [" + retVal + "]");
+    }
+    
+    public void testBasicAuth_uid()throws Exception{
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        Dispatch<String> dispatch = getDispatch(Service.Mode.PAYLOAD,
+        		                                endpointUrl,
+        		                                SOAPBinding.SOAP11HTTP_BINDING);
+        
+        dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, USER_ID);
+
+        System.out.println(">> Invoking Dispatch<String> BasicAuthSecurityService");
+        
+        try{
+        	String retVal = dispatch.invoke(xmlString);
+            System.out.println(">> Response [" + retVal + "]");
+            
+            fail("Set USERID with no PASSWORD: WebServiceException is expected");
+        }
+        catch(WebServiceException wse){
+        	System.out.println(getName()+": "+ wse);
+        }
+    }
+    
+    public void testBasicAuth_pwd()throws Exception{
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        
+        Dispatch<String> dispatch = getDispatch(Service.Mode.PAYLOAD,
+        		                                endpointUrl,
+        		                                SOAPBinding.SOAP11HTTP_BINDING);
+        
+		dispatch.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, PASSWORD);
+
+        System.out.println(">> Invoking Dispatch<String> BasicAuthSecurityService");
+        
+        try{
+        	String retVal = dispatch.invoke(xmlString);
+            System.out.println(">> Response [" + retVal + "]");
+            
+            fail("Set PASSWORD with no USERID: WebServiceException is expected");
+        }
+        catch(WebServiceException wse){
+        	System.out.println(getName()+": "+ wse);
+        }
+    }
+    
+	/**
+	 * Auxiliary method, generates a Dispatch object on demand
+	 * 
+	 * @param mode
+	 *            Service.Mode
+	 * @param endpoint
+	 *            endpoint address
+	 * @param binding
+	 *            binding type
+	 * @return
+	 */
+	private Dispatch<String> getDispatch(Service.Mode mode, String endpoint,String binding) {
+		
+		Service service = Service.create(SERVICE_QNAME);
+		
+		service.addPort(PORT_QNAME, binding, endpoint);
+		javax.xml.ws.Dispatch<String> dispatch = service.createDispatch(PORT_QNAME, String.class,mode);
+
+		assertNotNull("Dispatch not null", dispatch);
+
+		return dispatch;
+	}
+}
\ No newline at end of file
Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/maven.xml
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/maven.xml	(revision 464549)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/maven.xml	(working copy)
@@ -137,6 +137,17 @@
         <!-- ================================================================ -->
         <!--- Provider endpoint Service Samples -->
         <!-- ================================================================ -->
+		<ant:copy toDir="target/test-classes/services/BasicAuthSecurityService/">
+			<ant:fileset dir="target/test-classes">
+				<ant:include name="org/apache/axis2/jaxws/security/server/**"/>
+			</ant:fileset>
+			<ant:fileset dir="test/org/apache/axis2/jaxws/security/server">
+                <ant:include name="META-INF/**"/>
+			</ant:fileset>
+			<ant:fileset dir="target/classes">
+                <ant:include name="org/apache/axis2/jaxws/server/**"/>
+			</ant:fileset>
+		</ant:copy>
 		<ant:copy toDir="target/test-classes/services/StringProviderService/">
 			<ant:fileset dir="target/test-classes">
 				<ant:include name="org/apache/axis2/jaxws/provider/string/**"/>
Index: D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java
===================================================================
--- D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(revision 464549)
+++ D:/dev/eclipseWS/workspace-axis2svn-sbox100606/axis2-101606/modules/jaxws/src/org/apache/axis2/jaxws/core/controller/AxisInvocationController.java	(working copy)
@@ -16,6 +16,7 @@
  */
 package org.apache.axis2.jaxws.core.controller;
 
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Map;
@@ -59,6 +60,8 @@
 import org.apache.axis2.jaxws.message.impl.AttachmentImpl;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.axis2.jaxws.util.Constants;
+import org.apache.axis2.transport.http.HTTPConstants;
+import org.apache.axis2.transport.http.HttpTransportProperties;
 import org.apache.axis2.util.CallbackReceiver;
 import org.apache.axis2.util.ThreadContextMigratorUtil;
 import org.apache.axis2.wsdl.WSDLConstants;
@@ -617,6 +620,41 @@
         if (msg.isMTOMEnabled()) {
             ops.setProperty(Configuration.ENABLE_MTOM, "true");
         }
+        
+        //Check and enable Security
+        try{
+        	if(properties.containsKey(BindingProvider.USERNAME_PROPERTY) &&
+        	   properties.containsKey(BindingProvider.PASSWORD_PROPERTY)){
+        		
+        		String userId = (String)properties.get(BindingProvider.USERNAME_PROPERTY);
+        		if(userId == null || userId == ""){
+        			throw ExceptionFactory.makeWebServiceException("Error: Must specify a value for user name property");
+        		}
+        		String password = (String)properties.get(BindingProvider.PASSWORD_PROPERTY);
+        		if(password == null || password == ""){
+        			throw ExceptionFactory.makeWebServiceException("Error: Must specify a value for password property");
+        		}
+        		
+        		URL url = new URL((String)mc.getProperties().get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY));
+
+        		HttpTransportProperties.Authenticator basicAuthentication = new HttpTransportProperties.Authenticator();
+        		basicAuthentication.setUsername(userId);
+        		basicAuthentication.setPassword(password);
+        		basicAuthentication.setHost(url.getHost());
+        		basicAuthentication.setPort(url.getPort());
+        		
+        		ops.setProperty(HTTPConstants.AUTHENTICATE, basicAuthentication);
+        	}
+        	else if((!properties.containsKey(BindingProvider.USERNAME_PROPERTY) &&
+        			 properties.containsKey(BindingProvider.PASSWORD_PROPERTY)) || 
+        			(properties.containsKey(BindingProvider.USERNAME_PROPERTY) &&
+        			 !properties.containsKey(BindingProvider.PASSWORD_PROPERTY))){
+        		throw ExceptionFactory.makeWebServiceException("Error: Both user name and password properties must be specified");
+        	}
+        }
+        catch(Exception e){
+        	throw ExceptionFactory.makeWebServiceException(e);
+        }
     }
     
     // TODO: This method may need to be removed or refactored when the ServiceDescription can
