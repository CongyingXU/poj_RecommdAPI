Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/ServiceDescriptionTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/ServiceDescriptionTests.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/ServiceDescriptionTests.java	(working copy)
@@ -32,13 +32,14 @@
  * and other Description classes is done in WSDLDescriptionTests.
  */
 public class ServiceDescriptionTests extends TestCase {
-    private static final String namespaceURI= "http://ws.apache.org/axis2/tests";
+    private static final String namespaceURI= "http://org.apache.axis2.jaxws.description.ServiceDescriptionTests";
     private static final String localPart = "EchoService";
     private static final QName serviceQName = new QName(namespaceURI, localPart);
     
     public void testNullWSDL() {
 
-        ServiceDescription serviceDescription = new ServiceDescription(null, serviceQName, javax.xml.ws.Service.class);
+        QName uniqueQName = new QName(namespaceURI, localPart + "_testNullWSDL");
+        ServiceDescription serviceDescription = new ServiceDescription(null, uniqueQName, javax.xml.ws.Service.class);
         assertNotNull("Service description not created with null WSDL", serviceDescription);
     }
     
@@ -81,7 +82,8 @@
     }
     
     public void testValidServiceSubclass() {
-        ServiceDescription serviceDescription = new ServiceDescription(null, serviceQName, ServiceSubclass.class);
+        QName uniqueQName = new QName(namespaceURI, localPart + "_testValidServiceSubclass");
+        ServiceDescription serviceDescription = new ServiceDescription(null, uniqueQName, ServiceSubclass.class);
         assertNotNull("Service description not created with valid Service subclass", serviceDescription);
     }
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLTests.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLTests.java	(working copy)
@@ -79,7 +79,7 @@
         Service service = null;
 
         String namespaceURI= "http://ws.apache.org/axis2/tests";
-        String localPart = "EchoService";
+        String localPart = "EchoService_nullWSDL";
         service = Service.create(new QName(namespaceURI, localPart));
         assertNotNull("Service not created", service);
         
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/ServiceDescription.java	(working copy)
@@ -97,6 +97,7 @@
  */
 public class ServiceDescription {
     private AxisService axisService;
+    private ConfigurationContext configContext;
 
     private URL wsdlURL;
     private QName serviceQName;
@@ -153,6 +154,8 @@
         setupAxisService();
         buildDescriptionHierachy();
         addAnonymousAxisOperations();
+        // This will set the serviceClient field after adding the AxisService to the AxisConfig
+        getServiceClient();
     }
 
     /**
@@ -187,7 +190,7 @@
         EndpointDescription endpointDescription = new EndpointDescription(serviceImplClass, null, this);
         addEndpointDescription(endpointDescription);
         
-        // TODO: (JLB) The ServiceQName instance variable should be set based on annotation or default
+        // TODO: The ServiceQName instance variable should be set based on annotation or default
 
         // The anonymous AxisOperations are currently NOT added here.  The reason 
         // is that (for now) this is a SERVER-SIDE code path, and the anonymous operations
@@ -290,7 +293,9 @@
         // Patterned after AxisService.createClientSideAxisService
         serviceBuilder.setServerSide(false);
         try {
+            // TODO: This probably needs to use the target namespace like buildAxisServiceFromNoWSDL does
             axisService = serviceBuilder.populateService();
+            axisService.setName(serviceQName.toString());
         } catch (AxisFault e) {
             // TODO We should not swallow a fault here.
             log.warn(Messages.getMessage("warnAxisFault", e.toString()));
@@ -299,22 +304,17 @@
     
     private void buildAxisServiceFromNoWSDL() {
         // TODO: Refactor this to create from annotations.
-//        if (true) return;
-//        
-//        // Patterned after ServiceClient.createAnonymousService()
-//        String serviceName = null;
-//        if (serviceQName != null) {
+        String serviceName = null;
+        if (serviceQName != null) {
+            // TODO: This uses TNS in the AxisService name, but using WSDL does not
+            serviceName = serviceQName.toString();
 //            serviceName = serviceQName.getLocalPart();
-//        }
-//        else {
-//            serviceName = ServiceClient.ANON_SERVICE;
-//        }
-//        // Make this service name unique.  The Axis2 engine assumes that a service it can not find is a client-side service.
-//        // See org.apache.axis2.client.ServiceClient.configureServiceClient()
-//        axisService = new AxisService(serviceName + this.hashCode());
-//        axisService.addOperation(new RobustOutOnlyAxisOperation(ServiceClient.ANON_ROBUST_OUT_ONLY_OP));
-//        axisService.addOperation(new OutOnlyAxisOperation(ServiceClient.ANON_OUT_ONLY_OP));
-//        axisService.addOperation(new OutInAxisOperation(ServiceClient.ANON_OUT_IN_OP));
+        }
+        else {
+            // Make this service name unique.  The Axis2 engine assumes that a service it can not find is a client-side service.
+            serviceName = ServiceClient.ANON_SERVICE + this.hashCode();
+        }
+        axisService = new AxisService(serviceName);
     }
     
     private void buildDescriptionHierachy() {
@@ -387,10 +387,12 @@
     	return serviceClient;
     }
     
-    private ConfigurationContext getAxisConfigContext() {
-    	ClientConfigurationFactory factory = ClientConfigurationFactory.newInstance(); 
-    	ConfigurationContext configCtx = factory.getClientConfigurationContext();
-    	return configCtx;
+    public ConfigurationContext getAxisConfigContext() {
+        if (configContext == null) {
+            ClientConfigurationFactory factory = ClientConfigurationFactory.newInstance(); 
+            configContext = factory.getClientConfigurationContext();
+        }
+    	return configContext;
     	
     }
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionKey.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionKey.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionKey.java	(working copy)
@@ -44,22 +44,26 @@
 		}
 		
 		DescriptionKey description = (DescriptionKey)o;
-		if(description.wsdlUrl == null){
-			return false;
-		}
+
+        // TODO: Currently, only the Service QName is used to base key equality
+//		if(description.wsdlUrl == null){
+//			return false;
+//		}
 		
 		if(serviceName == null){
 			throw ExceptionFactory.makeWebServiceException(org.apache.axis2.i18n.Messages.getMessage("DescriptionRegistryErr0"));
 		}
-		
-		return description.serviceName.equals(this.serviceName) && description.wsdlUrl.equals(this.wsdlUrl); 
+        // TODO: Currently, only the Service QName is used to base key equality
+//        return description.serviceName.equals(this.serviceName) && description.wsdlUrl.equals(this.wsdlUrl); 
+		return description.serviceName.equals(this.serviceName); 
 	}
 	@Override
 	public int hashCode() {
 		
 		int hash = 1;
 		hash = 31*hash + ((serviceName==null)? 0:serviceName.hashCode());
-		hash = hash +((wsdlUrl == null) ? 0 : wsdlUrl.hashCode());
+        // TODO: Currently, only the Service QName is used to base key equality
+//		hash = hash +((wsdlUrl == null) ? 0 : wsdlUrl.hashCode());
 		return hash;
 		
 	}
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionRegistry.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionRegistry.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/description/DescriptionRegistry.java	(working copy)
@@ -35,7 +35,7 @@
 		
 	}
 	
-	public ServiceDescription getServiceDescription(DescriptionKey key){
+	synchronized public ServiceDescription getServiceDescription(DescriptionKey key){
 		ServiceDescription sd = cache.get(key);
 		if(sd == null){
 			sd = DescriptionFactory.createServiceDescription(key.getWsdlUrl(), key.getServiceName(), key.getServiceClass());
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ClientMediator.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ClientMediator.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ClientMediator.java	(working copy)
@@ -1,211 +0,0 @@
-/*
- * Copyright 2004,2005 The Apache Software Foundation.
- * Copyright 2006 International Business Machines Corp.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.axis2.jaxws;
-
-import java.lang.reflect.Proxy;
-
-import javax.xml.namespace.QName;
-import javax.xml.ws.BindingProvider;
-import javax.xml.ws.Service;
-import javax.xml.ws.WebServiceException;
-import javax.xml.ws.Service.Mode;
-
-import org.apache.axis2.AxisFault;
-import org.apache.axis2.client.ServiceClient;
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.context.ServiceContext;
-import org.apache.axis2.context.ServiceGroupContext;
-import org.apache.axis2.description.AxisOperation;
-import org.apache.axis2.description.AxisService;
-import org.apache.axis2.description.AxisServiceGroup;
-import org.apache.axis2.jaxws.client.JAXBDispatch;
-import org.apache.axis2.jaxws.client.XMLDispatch;
-import org.apache.axis2.jaxws.handler.PortData;
-import org.apache.axis2.jaxws.spi.ServiceDelegate;
-import org.apache.axis2.jaxws.util.WSDLWrapper;
-/*
- * This class acts as a mediator to creating Proxy or Dispatch implementation when Client makes a call to Service.
- * Class creates AxisService, ServiceClient etc stores them in AxisRouter that the Dispatch or Proxy can use
- * to call Axis Engine.
- */
-public class ClientMediator {
-	private JAXWSClientContext clientContext = null;
-
-	public ClientMediator() {
-		super();
-	}
-
-    public <T> JAXBDispatch<T> createJAXBDispatch(JAXWSClientContext<T> clientContext){
-/*
-        if (clientContext == null) {
-            throw ExceptionFactory.makeWebServiceException(
-                    "Internal Error ... JAXWSClientContext not found");
-        }
-        this.clientContext = clientContext;
-        
-         * create Axis Controller, this will route all the calls from Dispatch to
-         * Axis Engine eiter using ServiceClient or instantiating
-         * AxisEngine.
-         
-        try{
-            AxisController axisController = buildAxisController();
-            axisController.setClientContext(clientContext);
-            
-            JAXBDispatch<T> dispatch = new JAXBDispatch<T>(axisController);
-            if (clientContext.getServiceMode() != null) {
-                dispatch.setMode(clientContext.getServiceMode());
-            }
-            else {
-                dispatch.setMode(Service.Mode.PAYLOAD);
-            }
-
-            dispatch.setJAXBContext(clientContext.getJAXBContext());
-            return dispatch;
-        }catch(AxisFault e){
-            throw new WebServiceException(e.getMessage());
-        }*/
-        
-        return null;
-    }
-    
-    public <T> XMLDispatch<T> createXMLDispatch(JAXWSClientContext<T> clientContext){
-
-/*		if (clientContext == null) {
-			throw new WebServiceException(
-					"Internal Error ... JAXWSClientContext not found");
-		}
-		this.clientContext = clientContext;
-		
-		 * create Axis Controller, this will route all the calls from Dispatch to
-		 * Axis Engine eiter using ServiceClient or instantiating
-		 * AxisEngine.
-		 
-		try{
-			AxisController axisController = buildAxisController();
-			axisController.setClientContext(clientContext);
-			XMLDispatch<T> dispatch = new XMLDispatch<T>(axisController);
-            if (clientContext.getServiceMode() != null) {
-                dispatch.setMode(clientContext.getServiceMode());
-            }
-            else {
-                dispatch.setMode(Service.Mode.PAYLOAD);
-            }
-            
-			return dispatch;
-		}catch(AxisFault e){
-			throw new WebServiceException(e.getMessage());
-		}*/
-        
-        return null;
-	}
-
-	// Add required parameter to this method.
-    public <T> T createProxy(JAXWSClientContext<T> clientContext, ServiceDelegate delegate) {
-		//proxy is now create from ServiceDelegate.getport
-		return null;
-		
-	}
-
-	private ConfigurationContext getAxisConfigContext() {
-		try {
-            ClientConfigurationFactory factory = ClientConfigurationFactory.newInstance(); 
-            ConfigurationContext configCtx = factory.getClientConfigurationContext();
-            return configCtx;
-		} catch (Exception e) {
-			throw ExceptionFactory.makeWebServiceException(e);
-		}
-	}
-
-	private AxisService getAxisService(ServiceClient axisClient) {
-		return axisClient.getAxisService();
-	}
-
-	/*
-     * If a WSDL is present, create an AxisOperation for each of the operations
-     * that exist in that WSDL.
-	 */
-    private AxisOperation getAxisOperation(AxisService service){
-		QName portName = clientContext.getPort().getPortName();
-		QName serviceName = clientContext.getPort().getServiceName();
-		WSDLWrapper wsdlContext = clientContext.getWsdlContext();
-
-        if(wsdlContext!=null){
-			String operation = wsdlContext.getOperationName(serviceName, portName);
-			return service.getOperation(new QName(operation));
-			
-		}
-		else{
-			return service.getOperation(ServiceClient.ANON_OUT_IN_OP);
-		}		
-	}
-	
-	private PortData getPortInfo() {
-		return clientContext.getPort();
-	}
-
-	private QName getPortName() {
-		return getPortInfo().getPortName();
-	}
-
-	private ServiceClient getServiceClient(ConfigurationContext axisConfig)
-			throws AxisFault {
-	
-		return new ServiceClient(axisConfig, 
-                clientContext.getServiceDescription().getAxisService());
-
-	}
-
-	private ServiceContext getServiceContext(AxisService service,
-			ServiceGroupContext groupContext) throws AxisFault {
-		return groupContext.getServiceContext(service);
-	}
-
-	private ServiceGroupContext getServiceGroupContext(
-			ConfigurationContext configContext, AxisService service) {
-		return new ServiceGroupContext(configContext,
-				(AxisServiceGroup) service.getParent());
-	}
-
-	private QName getServiceName() {
-		return getPortInfo().getServiceName();
-	}
-
-	private AxisController buildAxisController() throws AxisFault {
-		/* Create AxisController to send calls to AxisEngine
-		 * There is one AxisController per Dispatch or Proxy.
-		 */
-		AxisController controller = new AxisController();
-		/* Create all Web Service information from WSDL and store them in Axis API's 
-		 * AxisService, AxisOperation etc.
-		 * Store these in AxisController. When Dispatch or Proxy receive Request from 
-		 * JAX-WS Client AxisController will use them to call AxisEngine and respond to 
-		 * Dispatch or Proxy. 
-		 */
-		ConfigurationContext axisConfig = getAxisConfigContext();
-		ServiceClient serviceClient = getServiceClient(axisConfig);
-		AxisService axisService = getAxisService(serviceClient);
-		ServiceGroupContext groupContext = getServiceGroupContext(axisConfig, axisService);
-		ServiceContext serviceContext = getServiceContext(axisService, groupContext);
-
-        controller.setConfigContext(axisConfig);
-		controller.setServiceClient(serviceClient);
-		controller.setAxisService(axisService);
-		controller.setGroupContext(groupContext);
-		controller.setServiceContext(serviceContext);
-		return controller;
-	}
-}
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(working copy)
@@ -36,12 +36,7 @@
 import javax.xml.ws.http.HTTPBinding;
 import javax.xml.ws.soap.SOAPBinding;
 
-import org.apache.axis2.AxisFault;
 import org.apache.axis2.client.ServiceClient;
-import org.apache.axis2.context.ConfigurationContext;
-import org.apache.axis2.description.AxisService;
-import org.apache.axis2.jaxws.ClientConfigurationFactory;
-import org.apache.axis2.jaxws.ClientMediator;
 import org.apache.axis2.jaxws.ExceptionFactory;
 import org.apache.axis2.jaxws.JAXWSClientContext;
 import org.apache.axis2.jaxws.client.JAXBDispatch;
@@ -71,7 +66,6 @@
 
     private ServiceDescription serviceDescription;
     private QName serviceQname;
-    private ClientMediator mediator = null;
     private ServiceClient serviceClient = null;
     // If no binding ID is available, use this one
     private static String DEFAULT_BINDING_ID = SOAPBinding.SOAP11HTTP_BINDING;
@@ -80,7 +74,6 @@
     	super();
     	this.serviceQname = qname;
     	ports = new Hashtable<QName, PortData>();
-    	mediator = new ClientMediator();
 
         if(!isValidServiceName()){
     		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("serviceDelegateConstruct0", ""));
@@ -417,15 +410,7 @@
 	        }
         }
     }
-    
-    //TODO We should hang AxisConfiguration from ServiceDescription or something parent to ServiceDescription
-    private ConfigurationContext getAxisConfigContext() {
-    	ClientConfigurationFactory factory = ClientConfigurationFactory.newInstance(); 
-    	ConfigurationContext configCtx = factory.getClientConfigurationContext();
-    	return configCtx;
-    	
-    }
-    
+
     private ServiceDescription getServiceDescription(URL url, QName serviceName, Class clazz ){
     	DescriptionKey key = new DescriptionKey(serviceName, url, clazz);
     	return DescriptionRegistry.getRegistry().getServiceDescription(key);
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ClientConfigurationFactory.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ClientConfigurationFactory.java	(revision 447486)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/src/org/apache/axis2/jaxws/ClientConfigurationFactory.java	(working copy)
@@ -19,6 +19,8 @@
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
 import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.deployment.DeploymentException;
+import org.apache.axis2.description.AxisService;
 import org.apache.axis2.jaxws.util.Constants;
 
 
@@ -42,7 +44,7 @@
     }
 
     /**
-     * Loads up a ConfigurationContext object using the WAS-specific configuration builder.
+     * Loads up a ConfigurationContext object using the configuration builder.
      * @return a ConfigurationContext object that is suitable for the client environment
      */
     public synchronized ConfigurationContext getClientConfigurationContext() {
@@ -54,10 +56,21 @@
                 configContext = ConfigurationContextFactory
                         .createConfigurationContextFromFileSystem(repoPath, axisConfigPath);
             } catch (AxisFault e) {
+                // TODO: Add RAS logging and processing
                 e.printStackTrace();
             }
         }
         
         return configContext;
     }
+    
+    /**
+     * Perform any final client-specific configuration on a newly created AxisService.
+     * 
+     * @param service A newly created AxisService on which to perform any final client-related configuration.
+     * @throws DeploymentException
+     * @throws Exception
+     */
+    public synchronized void completeAxis2Configuration(AxisService service) throws DeploymentException, Exception {
+    }
 }
