// Copyright 2001-2003 Systinet Corp. All rights reserved.
// Use is subject to license terms.

package com.vistaar.clemenza.shared.webs.client;


import com.vistaar.clemenza.shared.webs.stub.*;
import org.apache.axiom.om.OMElement;

public class WSClient {

    private static final String WSDL_ENDPOINT = "http://sgandhi2-d:8100/vistaar/services/WS_MDS32";

    public static void main(String args[]) throws Exception {

        WS_MDS32Stub stub = new  WS_MDS32Stub(WSDL_ENDPOINT);

        /* WS_MDS32Stub.Hello helloRequest =  new WS_MDS32Stub.Hello();
        helloRequest.setStrMessage("My First AXIS2 Client");
        WS_MDS32Stub.HelloResponse response = stub.hello(helloRequest);
        String returnVal = response.get_return();
        System.out.println(returnVal);
        */

        /* try autogenerated generated JUnit testcases */



        WS_MDS32Stub.Ws_init ws_initRequest = new WS_MDS32Stub.Ws_init();
        ws_initRequest.setDummyArg("Dummy args to ws_init method");
        System.out.println("Calling ws_init .........");
        WS_MDS32Stub.Ws_initResponse res = stub.ws_init(ws_initRequest);
        System.out.println("After ws_init ......... return value: " + res.get_return());

       /* WS_MDS32Stub.RefreshMDSProxies refreshMDSProxiesRequest = new WS_MDS32Stub.RefreshMDSProxies();
        refreshMDSProxiesRequest.setSessionId("Dummy args to RefreshMDProxies. method");
        System.out.println("Calling refreshMDSProxiesRequest .........");
        WS_MDS32Stub.RefreshMDSProxiesResponse bres = stub.refreshMDSProxies(refreshMDSProxiesRequest);
        System.out.println("After refreshMDSProxiesRequest .........retur value " + bres.get_return());
       */
        WS_MDS32Stub.GetVersion getVersionRequest =  new WS_MDS32Stub.GetVersion();
        getVersionRequest.setElement(ClientUtil.getVersionOMElement());
        WS_MDS32Stub.GetVersionResponse response = stub.getVersion(getVersionRequest);
        OMElement retElement = response.get_return();
        System.out.println(retElement);

        WS_MDS32Stub.GetAllDimensionInfo getADI =  new WS_MDS32Stub.GetAllDimensionInfo();
        getADI.setSessionId("Dummy SessionId");
        
        WS_MDS32Stub.GetAllDimensionInfoResponse   aresponse = stub.getAllDimensionInfo(getADI);
        WS_MDS32Stub.WDimensionInfo[] wdiArray = aresponse.get_return();
        System.out.println("DimensionList");
        for (int i=0; i<wdiArray.length; i++){
            System.out.println("\t\t" + wdiArray[i].getName());
        }

        //WS_MDS32Stub.GetDimensionNames dimNames = new WS_MDS32Stub.GetDimensionNames();
        WS_MDS32Stub.GetDimensionNames dimNames = new WS_MDS32Stub.GetDimensionNames();

        WS_MDS32Stub.GetDimensionNamesResponse aresponse1 = stub.getDimensionNames(dimNames) ;
        String[] dims = aresponse1.get_return();
        for(int i=0; i<dims.length; i++){
            System.out.println(dims[i]);
        }


    }



    public String tempMethod (String inStr){
            System.out.println("Your String : -> "  + inStr);
             return "Your String : -> " + inStr;

    }
}
