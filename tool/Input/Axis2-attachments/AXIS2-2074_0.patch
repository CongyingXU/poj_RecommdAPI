Index: modules/kernel/src/org/apache/axis2/transport/MessageFormatter.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/MessageFormatter.java	(revision 501758)
+++ modules/kernel/src/org/apache/axis2/transport/MessageFormatter.java	(working copy)
@@ -77,7 +77,7 @@
 	 * @return the target URL
 	 */
 	public URL getTargetAddress(MessageContext messageContext, OMOutputFormat format,
-			URL targetURL);
+			URL targetURL) throws AxisFault;
 
 	/**
 	 * @return this only if you want set a transport header for SOAP Action

Index: modules/json/src/org/apache/axis2/json/JSONBadgerfishMessageFormatter.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONBadgerfishMessageFormatter.java	(revision 501758)
+++ modules/json/src/org/apache/axis2/json/JSONBadgerfishMessageFormatter.java	(working copy)
@@ -17,15 +17,23 @@
 package org.apache.axis2.json;
 
 import org.codehaus.jettison.badgerfish.BadgerFishXMLStreamWriter;
+import org.apache.axiom.om.OMDataSource;
 
 import javax.xml.stream.XMLStreamWriter;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 
-public class JSONBadgerfishMessageFormatter extends JSONMessageFormatter{
+public class JSONBadgerfishMessageFormatter extends JSONMessageFormatter {
 
-    protected XMLStreamWriter getJSONWriter(OutputStream outStream){
+    protected XMLStreamWriter getJSONWriter(OutputStream outStream) {
         return new BadgerFishXMLStreamWriter(new OutputStreamWriter(outStream));
     }
 
+    protected String getStringToWrite(OMDataSource dataSource) {
+        if (dataSource instanceof JSONBadgerfishDataSource) {
+            return ((JSONDataSource) dataSource).getCompleteJOSNString();
+        } else {
+            return null;
+        }
+    }
 }
Index: modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java	(revision 501758)
+++ modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java	(working copy)
@@ -16,10 +16,11 @@
 
 package org.apache.axis2.json;
 
-import java.io.ByteArrayOutputStream;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
+import java.io.*;
 import java.net.URL;
+import java.net.MalformedURLException;
+import java.util.Iterator;
+import java.util.ArrayList;
 
 import javax.xml.stream.FactoryConfigurationError;
 import javax.xml.stream.XMLStreamException;
@@ -27,6 +28,8 @@
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMOutputFormat;
+import org.apache.axiom.om.OMDataSource;
+import org.apache.axiom.om.impl.llom.OMSourcedElementImpl;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
 import org.apache.axis2.context.MessageContext;
@@ -44,7 +47,6 @@
             contentType = (String) msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE);
         } else {
             contentType = (String) msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE);
-
         }
 
         if (encoding != null) {
@@ -55,18 +57,24 @@
 
     public byte[] getBytes(MessageContext msgCtxt, OMOutputFormat format) throws AxisFault {
         OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
-        try {
-            ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-            XMLStreamWriter jsonWriter = getJSONWriter(bytesOut);
-            element.serializeAndConsume(jsonWriter);
-            jsonWriter.writeEndDocument();
+        if (element instanceof OMSourcedElementImpl && getStringToWrite(((OMSourcedElementImpl) element).getDataSource()) != null)
+        {
+            String jsonToWrite = getStringToWrite(((OMSourcedElementImpl) element).getDataSource());
+            return jsonToWrite.getBytes();
+        } else {
+            try {
+                ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
+                XMLStreamWriter jsonWriter = getJSONWriter(bytesOut);
+                element.serializeAndConsume(jsonWriter);
+                jsonWriter.writeEndDocument();
 
-            return bytesOut.toByteArray();
+                return bytesOut.toByteArray();
 
-        } catch (XMLStreamException e) {
-            throw new AxisFault(e);
-        } catch (FactoryConfigurationError e) {
-            throw new AxisFault(e);
+            } catch (XMLStreamException e) {
+                throw new AxisFault(e);
+            } catch (FactoryConfigurationError e) {
+                throw new AxisFault(e);
+            }
         }
     }
 
@@ -79,21 +87,83 @@
         return new MappedXMLStreamWriter(mnc, new OutputStreamWriter(outStream));
     }
 
+    protected String getStringToWrite(OMDataSource dataSource) {
+        if (dataSource instanceof JSONDataSource) {
+            return ((JSONDataSource) dataSource).getCompleteJOSNString();
+        } else {
+            return null;
+        }
+    }
+
     public void writeTo(MessageContext msgCtxt, OMOutputFormat format,
                         OutputStream out, boolean preserve) throws AxisFault {
         OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
-        XMLStreamWriter jsonWriter = getJSONWriter(out);
-
         try {
-            element.serializeAndConsume(jsonWriter);
-            jsonWriter.writeEndDocument();
+            if (element instanceof OMSourcedElementImpl && getStringToWrite(((OMSourcedElementImpl) element).getDataSource()) != null)
+            {
+                String jsonToWrite = getStringToWrite(((OMSourcedElementImpl) element).getDataSource());
+                out.write(jsonToWrite.getBytes());
+            } else {
+                XMLStreamWriter jsonWriter = getJSONWriter(out);
+                element.serializeAndConsume(jsonWriter);
+                jsonWriter.writeEndDocument();
+            }
+        } catch (IOException e) {
+            throw new AxisFault(e);
         } catch (XMLStreamException e) {
             throw new AxisFault(e);
         }
     }
 
-    public URL getTargetAddress(MessageContext msgCtxt, OMOutputFormat format, URL targetURL) {
-        return targetURL;
+    public URL getTargetAddress(MessageContext msgCtxt, OMOutputFormat format, URL targetURL) throws AxisFault {
+
+        String httpMethod =
+                (String) msgCtxt.getProperty(Constants.Configuration.HTTP_METHOD);
+
+        if ((httpMethod != null)
+                && Constants.Configuration.HTTP_METHOD_GET.equalsIgnoreCase(httpMethod)) {
+            String param = getParam(msgCtxt);
+
+            if (param != null && param.length() > 0) {
+                String returnURLFile = targetURL.getFile() + "?" + param;
+                try {
+                    return new URL(targetURL.getProtocol(), targetURL.getHost(), targetURL.getPort(), returnURLFile);
+                } catch (MalformedURLException e) {
+                    throw new AxisFault(e);
+                }
+            } else {
+                return targetURL;
+            }
+        } else {
+            return targetURL;
+        }
     }
 
+    private String getParam(MessageContext msgContext) {
+        OMElement dataOut;
+
+        dataOut = msgContext.getEnvelope().getBody().getFirstElement();
+
+        Iterator iter1 = dataOut.getChildElements();
+        ArrayList paraList = new ArrayList();
+
+        while (iter1.hasNext()) {
+            OMElement ele = (OMElement) iter1.next();
+            String parameter;
+
+            parameter = ele.getLocalName() + "=" + ele.getText();
+            paraList.add(parameter);
+        }
+
+        String paraString = "";
+        int count = paraList.size();
+
+        for (int i = 0; i < count; i++) {
+            String c = (String) paraList.get(i);
+            paraString = "".equals(paraString) ? c : (paraString + "&" + c);
+        }
+
+        return paraString;
+    }
+
 }
