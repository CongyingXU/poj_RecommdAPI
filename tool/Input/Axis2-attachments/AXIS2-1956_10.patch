Index: src/javax/xml/soap/MessageFactory.java
===================================================================
--- src/javax/xml/soap/MessageFactory.java	(revision 498541)
+++ src/javax/xml/soap/MessageFactory.java	(working copy)
@@ -145,6 +145,8 @@
      *
      * @return a new <CODE>SOAPMessage</CODE> object
      * @throws SOAPException if a SOAP error occurs
+     *         java.lang.UnsupportedOperationException - if the protocol of this
+     *         MessageFactory instance is DYNAMIC_SOAP_PROTOCOL
      */
     public abstract SOAPMessage createMessage() throws SOAPException;
 
@@ -172,7 +174,8 @@
             throws SOAPException {
     	
     	if(!(SOAPConstants.SOAP_1_1_PROTOCOL.equals(soapVersion) ||
-    			SOAPConstants.SOAP_1_2_PROTOCOL.equals(soapVersion))){
+    			SOAPConstants.SOAP_1_2_PROTOCOL.equals(soapVersion) ||
+    				SOAPConstants.DYNAMIC_SOAP_PROTOCOL.equals(soapVersion))){
     		throw new SOAPException("Invalid SOAP Protocol Version");
     	}
     	
Index: src/javax/xml/soap/SAAJResult.java
===================================================================
--- src/javax/xml/soap/SAAJResult.java	(revision 498541)
+++ src/javax/xml/soap/SAAJResult.java	(working copy)
@@ -18,13 +18,14 @@
 
 import javax.xml.transform.dom.DOMResult;
 
-import org.w3c.dom.*;
-
 public class SAAJResult extends DOMResult {
 
     public SAAJResult()
             throws SOAPException {
         this(MessageFactory.newInstance().createMessage());
+        org.w3c.dom.Node node = this.getNode();
+        node.removeChild(node.getFirstChild());
+        this.setNode(null);
     }
 
     public SAAJResult(String s)
@@ -42,6 +43,10 @@
 
     public javax.xml.soap.Node getResult() {
         org.w3c.dom.Node node = super.getNode();
+        //When using SAAJResult saajResult = new SAAJResult();
+        if (node == null){
+        	return null;
+        }
         if(node instanceof SOAPPart){
             try {
                 return ((SOAPPart)node).getEnvelope();
@@ -51,4 +56,6 @@
         }
         return (javax.xml.soap.Node) node.getFirstChild();
     }
+
+    
 }
Index: src/javax/xml/soap/SOAPConnection.java
===================================================================
--- src/javax/xml/soap/SOAPConnection.java	(revision 498541)
+++ src/javax/xml/soap/SOAPConnection.java	(working copy)
@@ -15,6 +15,11 @@
  */
 package javax.xml.soap;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+
 /**
  * A point-to-point connection that a client can use for sending messages
  * directly to a remote party (represented by a URL, for instance).
@@ -61,8 +66,33 @@
      */
     public abstract void close() throws SOAPException;
 
-    public SOAPMessage get(Object obj)
+    /**
+     * Gets a message from a specific endpoint and blocks until it receives,
+     * @param to - an Object that identifies where the request should be sent. Objects of type
+     * java.lang.String and java.net.URL must be supported.
+     * @return the SOAPMessage object that is the response to the get message request
+     * @throws SOAPException - if there is a SOAP error
+     */
+    public SOAPMessage get(Object to)
             throws SOAPException {
-        throw new UnsupportedOperationException();
+    	URL url = null;
+    	try 
+    	{
+    		url = (to instanceof URL) ? (URL) to : new URL(to.toString());
+    		if(url != null){
+    			//InputStream in = url.openStream();
+    			//TODO : setting null for mime headers
+    			// close the connection??
+    			SOAPMessage soapMessage = null;
+    			//new SOAPMessageImpl(in,null);
+    			return soapMessage;
+    		}
+    		return null;
+    	}catch (MalformedURLException e) {
+    		throw new SOAPException(e);
+    	}catch (IOException e) {
+    		throw new SOAPException(e);
+    	}    	
+    	
     }
 }
Index: src/javax/xml/soap/SOAPFactory.java
===================================================================
--- src/javax/xml/soap/SOAPFactory.java	(revision 498541)
+++ src/javax/xml/soap/SOAPFactory.java	(working copy)
@@ -161,19 +161,14 @@
      * @see <CODE>SAAJMetaFactory</CODE>
      */
     public static SOAPFactory newInstance(String protocol) throws SOAPException {
-    	//TODO : check, how to load from SAAJMetaFactory
-    	//this is what was here earlier
-    	// s == protocol
-        //return (SOAPFactory) Class.forName(s).newInstance();
-    	//Is returning classes from axiom correct?
-    	//what about DYNAMIC_SOAP_PROTOCOL?
         try {
-        	if(SOAPConstants.DEFAULT_SOAP_PROTOCOL.equals(protocol) || SOAPConstants.SOAP_1_1_PROTOCOL.equals(protocol)){
-                return (SOAPFactory) Class.forName("org.apache.axis2.saaj.SOAPFactoryImpl").newInstance();
-        	}else if(SOAPConstants.SOAP_1_2_PROTOCOL.equals(protocol)) {
-        		return (SOAPFactory) Class.forName("org.apache.axis2.saaj.SOAPFactoryImpl").newInstance();
+        	if(SOAPConstants.DEFAULT_SOAP_PROTOCOL.equals(protocol) 
+        			|| SOAPConstants.SOAP_1_1_PROTOCOL.equals(protocol)
+        			|| SOAPConstants.SOAP_1_2_PROTOCOL.equals(protocol)){
+        		SAAJMetaFactory saajMetaFactory = SAAJMetaFactory.getInstance();
+        		return saajMetaFactory.newSOAPFactory(protocol);
         	}else{
-        		return null;
+        		throw new SOAPException("Unknown protocol :"+protocol);
         	}
         } catch (Exception exception) {
             throw new SOAPException("Unable to create SOAP Factory: "
@@ -181,9 +176,24 @@
         }
     }
 
+    /**
+     * Creates a SOAPElement object from an existing DOM Element. If the DOM Element that is
+     * passed in as an argument is already a SOAPElement then this method must return it unmodified
+     * without any further work. Otherwise, a new SOAPElement is created and a deep copy is made of
+     * the domElement argument. The concrete type of the return value will depend on the name of 
+     * the domElement argument. If any part of the tree rooted in domElement violates SOAP rules, 
+     * a SOAPException will be thrown.
+     * 
+     * @param domElement - the Element to be copied.
+     * @return a new SOAPElement that is a copy of domElement.
+     * @throws SOAPException - if there is an error in creating the SOAPElement object
+     * @since SAAJ 1.3
+     * @see SOAPFactoryImpl
+     */
     public SOAPElement createElement(org.w3c.dom.Element element)
                           throws SOAPException {
-        throw new UnsupportedOperationException("Not yet implemented");
+    	//see SOAPFactoryImpl
+        return null; 
     }
 
     
@@ -196,22 +206,11 @@
      * @param qname - a QName object with the XML name for the new element
      * @return the new SOAPElement object that was created
      * @throws SOAPException - if there is an error in creating the SOAPElement object
+     * @see SOAPFactoryImpl
      */
     public SOAPElement createElement(javax.xml.namespace.QName qname)
                           throws SOAPException {
-        //throw new UnsupportedOperationException("Not yet implemented");
-    	//TODO : check
-        String localName = qname.getLocalPart();
-        String prefix = qname.getPrefix();
-        String uri = qname.getNamespaceURI();
-
-        //TODO: WIP
-        
-        //OMElement omElement = DOOMAbstractFactory.getOMFactory().createOMElement(localName, uri, prefix);
         return null;
-        //dependancy would create a cyclic reference
-        //return new SOAPElementImpl((ElementImpl) omElement);
-        
     }
 
     public abstract SOAPFault createFault()
Index: src/javax/xml/soap/SOAPFault.java
===================================================================
--- src/javax/xml/soap/SOAPFault.java	(revision 498541)
+++ src/javax/xml/soap/SOAPFault.java	(working copy)
@@ -209,7 +209,7 @@
      */
     public abstract Locale getFaultStringLocale();
 
-    public abstract void addFaultReasonText(java.lang.String s,
+    public abstract void addFaultReasonText(java.lang.String reasonText,
                         java.util.Locale locale)
                         throws SOAPException;
 
