Index: modules/kernel/src/org/apache/axis2/transport/http/SOAPOverHTTPSender.java
===================================================================
--- modules/kernel/src/org/apache/axis2/transport/http/SOAPOverHTTPSender.java	(revision 501758)
+++ modules/kernel/src/org/apache/axis2/transport/http/SOAPOverHTTPSender.java	(working copy)
@@ -19,6 +19,8 @@
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Iterator;
+import java.util.ArrayList;
 
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.soap.SOAP11Constants;
@@ -34,16 +36,73 @@
 import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.httpclient.HttpVersion;
 import org.apache.commons.httpclient.methods.PostMethod;
+import org.apache.commons.httpclient.methods.GetMethod;
 
 public class SOAPOverHTTPSender extends AbstractHTTPSender {
 
 
     public void send(MessageContext msgContext, OMElement dataout, URL url, String soapActionString)
             throws MalformedURLException, AxisFault, IOException {
-
         // execute the HtttpMethodBase - a connection manager can be given for
         // handle multiple
+
+        String httpMethod =
+                (String) msgContext.getProperty(Constants.Configuration.HTTP_METHOD);
+
+        if ((httpMethod != null)
+                && Constants.Configuration.HTTP_METHOD_GET.equalsIgnoreCase(httpMethod)) {
+            this.sendViaGet(msgContext, url, soapActionString);
+
+            return;
+        }
+        this.sendViaPost(msgContext, dataout, url, soapActionString);
+    }
+
+    private void sendViaGet(MessageContext msgContext, URL url, String soapActiionString) throws IOException {
+
+        GetMethod getMethod = new GetMethod();
+        if (isAuthenticationEnabled(msgContext)) {
+            getMethod.setDoAuthentication(true);
+        }
+
+        MessageFormatter messageFormatter = TransportUtils.getMessageFormatter(
+                msgContext);
+
+        url = messageFormatter.getTargetAddress(msgContext, format, url);
+
+        getMethod.setPath((url).getFile());
+
+        getMethod.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, messageFormatter.getContentType(msgContext, format, soapActiionString));
+
         HttpClient httpClient = getHttpClient(msgContext);
+        executeMethod(httpClient, msgContext, url, getMethod);
+
+        if (getMethod.getStatusCode() == HttpStatus.SC_OK) {
+            processResponse(getMethod, msgContext);
+        } else if (getMethod.getStatusCode() == HttpStatus.SC_ACCEPTED) {
+        } else if (getMethod.getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR) {
+            Header contenttypeHheader =
+                    getMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);
+            String value = contenttypeHheader.getValue();
+
+            if (value != null) {
+                if ((value.indexOf(SOAP11Constants.SOAP_11_CONTENT_TYPE) >= 0)
+                        || (value.indexOf(SOAP12Constants.SOAP_12_CONTENT_TYPE) >= 0)) {
+                    processResponse(getMethod, msgContext);
+                }
+            }
+        } else {
+            throw new AxisFault(Messages.getMessage("transportError",
+                    String.valueOf(getMethod.getStatusCode()),
+                    getMethod.getResponseBodyAsString()));
+        }
+
+    }
+
+    private void sendViaPost(MessageContext msgContext, OMElement dataout, URL url, String soapActionString) throws IOException {
+
+
+        HttpClient httpClient = getHttpClient(msgContext);
         PostMethod postMethod = new PostMethod(url.toString());
         if (isAuthenticationEnabled(msgContext)) {
             postMethod.setDoAuthentication(true);
@@ -56,22 +115,22 @@
             charEncoding = MessageContext.DEFAULT_CHAR_SET_ENCODING;
         }
 
-		MessageFormatter messageFormatter = TransportUtils.getMessageFormatter(
-				msgContext);
-		url = messageFormatter.getTargetAddress(msgContext,format,url);
-		postMethod.setPath(url.getPath());
-		postMethod.setRequestEntity(new AxisRequestEntity(messageFormatter,
-				msgContext,format,soapActionString, chunked, isAllowedRetry));
+        MessageFormatter messageFormatter = TransportUtils.getMessageFormatter(
+                msgContext);
+        url = messageFormatter.getTargetAddress(msgContext, format, url);
+        postMethod.setPath(url.getPath());
+        postMethod.setRequestEntity(new AxisRequestEntity(messageFormatter,
+                msgContext, format, soapActionString, chunked, isAllowedRetry));
 
-		if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
-			postMethod.setContentChunked(true);
-		}
+        if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
+            postMethod.setContentChunked(true);
+        }
 
-		String soapAction = messageFormatter.formatSOAPAction(msgContext,format,soapActionString);
-		if (soapAction!=null) {
-               postMethod.setRequestHeader(HTTPConstants.HEADER_SOAP_ACTION, soapAction);
-        } 
-		
+        String soapAction = messageFormatter.formatSOAPAction(msgContext, format, soapActionString);
+        if (soapAction != null) {
+            postMethod.setRequestHeader(HTTPConstants.HEADER_SOAP_ACTION, soapAction);
+        }
+
         //setting the cookie in the out path
         Object cookieString = msgContext.getProperty(HTTPConstants.COOKIE_STRING);
         if (cookieString != null) {
@@ -96,7 +155,7 @@
         // set timeout in client
         long timeout = msgContext.getOptions().getTimeOutInMilliSeconds();
         if (timeout != 0) {
-            httpClient.getParams().setSoTimeout((int)timeout);
+            httpClient.getParams().setSoTimeout((int) timeout);
         }
 
         /*
@@ -128,10 +187,11 @@
             }
         } else {
             throw new AxisFault(Messages.getMessage("httpTransportError",
-                String.valueOf(postMethod.getStatusCode()), postMethod.getStatusText()), SOAP12Constants.FAULT_CODE_SENDER);
+                    String.valueOf(postMethod.getStatusCode()), postMethod.getStatusText()), SOAP12Constants.FAULT_CODE_SENDER);
         }
 
         throw new AxisFault(Messages.getMessage("transportError",
                 String.valueOf(postMethod.getStatusCode()), postMethod.getResponseBodyAsString()));
     }
+
 }
