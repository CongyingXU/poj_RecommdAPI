Index: C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/message/BlockTests.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/message/BlockTests.java	(revision 428035)
+++ C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/message/BlockTests.java	(working copy)
@@ -17,12 +17,14 @@
 package org.apache.axis2.jaxws.message;
 
 import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.Map;
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBIntrospector;
+import javax.xml.bind.util.JAXBSource;
 import javax.xml.namespace.QName;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -30,14 +32,21 @@
 import javax.xml.stream.XMLOutputFactory;
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
+import javax.xml.transform.Result;
 import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
 
 import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMOutputFormat;
 import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axis2.jaxws.message.factory.BlockFactory;
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
+import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.message.factory.OMBlockFactory;
 import org.apache.axis2.jaxws.message.factory.SourceBlockFactory;
 import org.apache.axis2.jaxws.message.factory.XMLStringBlockFactory;
@@ -896,7 +905,49 @@
 		assertTrue(sampleText.equals(newText));
 		
 	}
-    
+    /*
+     * Testing JAXBSource, Creating Source Block using JAXBSource and then
+     * Serializing it.
+     */
+	public void testJAXBSourceInFlow1()throws Exception{
+		//  Create a jaxb object
+		try{
+	        ObjectFactory factory = new ObjectFactory();
+	        EchoString jaxb = factory.createEchoString(); 
+	        jaxb.setInput("Hello World");
+	        JAXBContext jbc = JAXBContext.newInstance("test");
+	        JAXBSource src = new JAXBSource(jbc.createMarshaller(), jaxb);
+	        BlockFactory f = (SourceBlockFactory)
+				FactoryRegistry.getFactory(SourceBlockFactory.class);
+	        
+	        ByteArrayOutputStream out = new ByteArrayOutputStream();
+            Result result = new StreamResult(out);
+            Transformer transformer =  TransformerFactory.newInstance().newTransformer();
+            transformer.transform(src, result); 
+	        XMLInputFactory inputfactory = XMLInputFactory.newInstance();
+	        ByteArrayInputStream bytes = new ByteArrayInputStream(out.toByteArray());
+	        XMLStreamReader reader = inputfactory.createXMLStreamReader(bytes);
+	        
+	        Block block =f.createFrom(reader, null, null);
+	        
+	        MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
+	        Message msg = mf.create(Protocol.soap11);
+	        msg.setBodyBlock(0,block);
+	        org.apache.axiom.soap.SOAPEnvelope env = (org.apache.axiom.soap.SOAPEnvelope)msg.getAsOMElement();
+	        // Serialize the Envelope using the same mechanism as the 
+	        // HTTP client.
+	        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+	        env.serializeAndConsume(baos, new OMOutputFormat());
+	        
+	        // To check that the output is correct, get the String contents of the 
+	        // reader
+	        String newText = baos.toString();
+	        System.out.println(newText);
+	        assertTrue(block.isConsumed());
+		}catch(Exception e){
+			e.printStackTrace();
+		}     
+	}
     /**
      * Create a Block representing a DOMSource instance and simulate an 
      * outbound flow
Index: C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestSuite.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestSuite.java	(revision 428035)
+++ C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/DispatchTestSuite.java	(working copy)
@@ -34,7 +34,7 @@
         // FIXME: Add this test in
         
         suite.addTestSuite(JAXBDispatch.class);
-        
+        suite.addTestSuite(JAXBSourceDispatch.class);
         return suite;
     }
 
Index: C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/JAXBSourceDispatch.java
===================================================================
--- C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/JAXBSourceDispatch.java	(revision 0)
+++ C:/WebServices/Eclipse/workspace/axis2_sandbox/modules/jaxws/test/org/apache/axis2/jaxws/JAXBSourceDispatch.java	(revision 0)
@@ -0,0 +1,97 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.StringWriter;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.util.JAXBSource;
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.ws.Dispatch;
+import javax.xml.ws.Service;
+
+import org.apache.axiom.om.OMOutputFormat;
+import org.apache.axis2.jaxws.message.Block;
+import org.apache.axis2.jaxws.message.Message;
+import org.apache.axis2.jaxws.message.Protocol;
+import org.apache.axis2.jaxws.message.factory.BlockFactory;
+import org.apache.axis2.jaxws.message.factory.MessageFactory;
+import org.apache.axis2.jaxws.message.factory.SourceBlockFactory;
+import org.apache.axis2.jaxws.registry.FactoryRegistry;
+import org.test.proxy.doclitwrapped.Invoke;
+
+import test.EchoString;
+import test.ObjectFactory;
+
+import junit.framework.TestCase;
+
+
+
+public class JAXBSourceDispatch extends TestCase {
+	/**
+     * Invoke a sync Dispatch<JAXBSource> in PAYLOAD mode
+     */
+	private String xmlString = new String("<ns2:invoke xmlns:ns2=\"http://org.test.proxy.doclitwrapped\"><invoke_str>some request</invoke_str></ns2:invoke>");
+	private String url = "http://localhost:8080/axis2/services/ProxyDocLitWrappedService";
+	private QName serviceName = new QName("http://org.test.proxy.doclitwrapped", "ProxyDocLitWrappedService");
+	private QName portName =new QName("http://org.test.proxy.doclitwrapped", "ProxyDocLitWrappedPort");
+	
+    public void testJAXBSourceSyncPayloadMode() throws Exception {
+        System.out.println("---------------------------------------");
+        System.out.println("test: " + getName());
+        try{
+	        // Initialize the JAX-WS client artifacts
+	        Service svc = Service.create(serviceName);
+	        svc.addPort(portName, null, url);
+	        Dispatch<JAXBSource> dispatch = svc.createDispatch(portName, 
+	                JAXBSource.class, Service.Mode.PAYLOAD);
+	        org.test.proxy.doclitwrapped.ObjectFactory factory = new org.test.proxy.doclitwrapped.ObjectFactory();
+	        Invoke invokeObj = factory.createInvoke();
+	        invokeObj.setInvokeStr("Some Request");
+	        JAXBContext ctx = JAXBContext.newInstance("org.test.proxy.doclitwrapped");
+	       
+	        JAXBSource jbSrc = new JAXBSource(ctx.createMarshaller(), invokeObj);
+	        // Invoke the Dispatch
+	        System.out.println(">> Invoking sync Dispatch");
+	        Source response = dispatch.invoke(jbSrc);
+	       
+	        assertNotNull("dispatch invoke returned null", response);
+	        
+	        StringWriter writer = new StringWriter();
+	        Transformer t = TransformerFactory.newInstance().newTransformer();
+	        Result result = new StreamResult(writer);
+	        t.transform(response, result);
+	
+	        System.out.println(writer.getBuffer().toString());
+	        System.out.println("---------------------------------------");
+        }catch(Exception e){
+        	e.printStackTrace();
+        }
+        
+    }
+    
+}
