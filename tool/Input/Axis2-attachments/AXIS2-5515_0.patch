Index: modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java	(revision 1471265)
+++ modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java	(revision )
@@ -24,6 +24,7 @@
 import java.beans.IntrospectionException;
 import java.beans.PropertyDescriptor;
 import java.lang.reflect.Array;
+import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
@@ -572,83 +573,89 @@
                 for (PropertyDescriptor proprty : propDescs) {
                     properties.put(proprty.getName(), proprty);
                 }
-                Iterator elements = beanElement.getChildren();
                 beanObj = objectSupplier.getObject(beanClass);
+	            if (beanObj != null) {
+		            Iterator elements = beanElement.getChildren();
-                while (elements.hasNext()) {
-                    // the beanClass could be an abstract one.
-                    // so create an instance only if there are elements, in
-                    // which case a concrete subclass is available to instantiate.
-                    OMElement parts;
-                    Object objValue = elements.next();
-                    if (objValue instanceof OMElement) {
-                        parts = (OMElement) objValue;
-                    } else {
-                        continue;
-                    }
-                    OMAttribute attribute = parts.getAttribute(
-                            new QName("http://www.w3.org/2001/XMLSchema-instance", "nil", "xsi"));
+		            while (elements.hasNext()) {
+			            // the beanClass could be an abstract one.
+			            // so create an instance only if there are elements, in
+			            // which case a concrete subclass is available to instantiate.
+			            OMElement parts;
+			            Object objValue = elements.next();
+			            if (objValue instanceof OMElement) {
+				            parts = (OMElement) objValue;
+			            } else {
+				            continue;
+			            }
+			            OMAttribute attribute = parts.getAttribute(
+					                                                      new QName("http://www.w3.org/2001/XMLSchema-instance", "nil", "xsi"));
 
-                    // if parts/@href != null then need to find element with id and deserialize.
-                    // before that first check whether we already have it in the hashtable
-                    String partsLocalName = parts.getLocalName();
-                    PropertyDescriptor prty = properties.remove(partsLocalName);
-                    if (prty != null) {
-                        Class parameters = prty.getPropertyType();
-                        if (prty.getName().equals("class"))
-                            continue;
+			            // if parts/@href != null then need to find element with id and deserialize.
+			            // before that first check whether we already have it in the hashtable
+			            String partsLocalName = parts.getLocalName();
+			            PropertyDescriptor prty = properties.remove(partsLocalName);
+			            if (prty != null) {
+				            Class parameters = prty.getPropertyType();
+				            if (prty.getName().equals("class"))
+					            continue;
 
-                        Object partObj;
-                        boolean isNil = false;
-                        if (attribute != null) {
-                            String nilValue = attribute.getAttributeValue();
-                            if ("true".equals(nilValue) || "1".equals(nilValue)) {
-                                isNil = true;
-                            }
-                        }
-                        if (isNil) {
-                            partObj = null;
-                        } else {
-                            if (SimpleTypeMapper.isSimpleType(parameters)) {
-                                partObj = SimpleTypeMapper.getSimpleTypeObject(parameters, parts);
-                            } else if (SimpleTypeMapper.isHashSet(parameters)) {
-                                partObj = SimpleTypeMapper.getHashSet((OMElement)
-                                        parts.getParent(), prty.getName());
-                            } else if (SimpleTypeMapper.isCollection(parameters)) {
-                            	Type type = prty.getReadMethod().getGenericReturnType();
-                            	partObj = processGenericCollection(parts, type, null, objectSupplier);  
+				            Object partObj;
+				            boolean isNil = false;
+				            if (attribute != null) {
+					            String nilValue = attribute.getAttributeValue();
+					            if ("true".equals(nilValue) || "1".equals(nilValue)) {
+						            isNil = true;
+					            }
+				            }
+				            if (isNil) {
+					            partObj = null;
+				            } else {
+					            if (SimpleTypeMapper.isSimpleType(parameters)) {
+						            partObj = SimpleTypeMapper.getSimpleTypeObject(parameters, parts);
+					            } else if (SimpleTypeMapper.isHashSet(parameters)) {
+						            partObj = SimpleTypeMapper.getHashSet((OMElement)
+								                                                  parts.getParent(), prty.getName());
+					            } else if (SimpleTypeMapper.isCollection(parameters)) {
+						            Type type = prty.getReadMethod().getGenericReturnType();
+						            partObj = processGenericCollection(parts, type, null, objectSupplier);
 
-                            } else if (SimpleTypeMapper.isDataHandler(parameters)) {
-                                partObj = SimpleTypeMapper.getDataHandler(parts);
-                            } else if (parameters.isArray()) {
-                                partObj = deserialize(parameters, (OMElement) parts.getParent(),
-                                                      objectSupplier, prty.getName());
-                            } else if (SimpleTypeMapper.isMap(parameters)){
-                                partObj = null;								
-                                final Type type = prty.getReadMethod().getGenericReturnType();
-                                if (type instanceof ParameterizedType) {
-                                    ParameterizedType aType = (ParameterizedType) type;
-                                    Type[] parameterArgTypes = aType.getActualTypeArguments();                                 
-                                    partObj = processGenericsMapElement(parameterArgTypes
-                                 		 , (OMElement) parts.getParent(), null, parts.getChildren(), objectSupplier, beanClass);
-                                } else {                                	 
-                                	 Type[] parameterArgTypes = {Object.class,Object.class}; 
-                                	 partObj = processGenericsMapElement(parameterArgTypes
-                                     		 , (OMElement) parts.getParent(), null, parts.getChildren(), objectSupplier, beanClass);                                	
-                                }
-                            }else if (SimpleTypeMapper.isEnum(parameters)) {
-                                partObj =processEnumObject(parameters , parts);
-                            } else {
-                                partObj = deserialize(parameters, parts, objectSupplier, null);
-                            }
-                        }
-                        Object[] parms = new Object[]{partObj};
-                        Method writeMethod = prty.getWriteMethod();
-                        if (writeMethod != null) {
-                            writeMethod.setAccessible(true);
-                            writeMethod.invoke(beanObj, parms);
-                        }
-                    }
+					            } else if (SimpleTypeMapper.isDataHandler(parameters)) {
+						            partObj = SimpleTypeMapper.getDataHandler(parts);
+					            } else if (parameters.isArray()) {
+						            partObj = deserialize(parameters, (OMElement) parts.getParent(),
+								                                 objectSupplier, prty.getName());
+					            } else if (SimpleTypeMapper.isMap(parameters)){
+						            partObj = null;
+						            final Type type = prty.getReadMethod().getGenericReturnType();
+						            if (type instanceof ParameterizedType) {
+							            ParameterizedType aType = (ParameterizedType) type;
+							            Type[] parameterArgTypes = aType.getActualTypeArguments();
+							            partObj = processGenericsMapElement(parameterArgTypes
+									                                               , (OMElement) parts.getParent(), null, parts.getChildren(), objectSupplier, beanClass);
+						            } else {
+							            Type[] parameterArgTypes = {Object.class,Object.class};
+							            partObj = processGenericsMapElement(parameterArgTypes
+									                                               , (OMElement) parts.getParent(), null, parts.getChildren(), objectSupplier, beanClass);
+						            }
+					            }else if (SimpleTypeMapper.isEnum(parameters)) {
+						            partObj =processEnumObject(parameters , parts);
+					            } else {
+						            partObj = deserialize(parameters, parts, objectSupplier, null);
+					            }
+				            }
+				            Object[] parms = new Object[]{partObj};
+				            Method writeMethod = prty.getWriteMethod();
+				            if (writeMethod != null) {
+					            writeMethod.setAccessible(true);
+					            writeMethod.invoke(beanObj, parms);
+				            }
+			            }
+		            }
+
+	            }else {
+		            // create a new instance with absent of nullary consturctor
+		            beanObj = objectSupplier.getObject(beanClass, beanElement);
-                }
+	            }
                 return beanObj;
             }
         } catch (IllegalAccessException e) {
@@ -2026,6 +2033,6 @@
         XMLGregorianCalendar xmlCal = DatatypeFactory.newInstance()
                 .newXMLGregorianCalendar(greCal);
         return xmlCal;
-    }	
+    }
 
 }
Index: modules/kernel/src/org/apache/axis2/engine/DefaultObjectSupplier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/kernel/src/org/apache/axis2/engine/DefaultObjectSupplier.java	(revision 1471265)
+++ modules/kernel/src/org/apache/axis2/engine/DefaultObjectSupplier.java	(revision )
@@ -19,11 +19,11 @@
 
 package org.apache.axis2.engine;
 
-import java.lang.reflect.Modifier;
-import java.lang.Enum;
-
+import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
 
+import java.lang.reflect.Modifier;
+
 public class DefaultObjectSupplier implements ObjectSupplier {
 
 	/* (non-Javadoc)
@@ -45,15 +45,26 @@
 				try {
 					instance = Enum.valueOf(clazz, "NULL");
 				} catch (IllegalArgumentException iae) {
-					throw AxisFault.makeFault(new Exception("Cannot create an enum object of type ("+clazz.getName()+") without a default value, please add a 'NULL' value to the enum that can be used as default."));
+					throw AxisFault.makeFault(new Exception("Cannot create an enum object of type " +
+							    "("+clazz.getName()+") without a default value, please add a 'NULL' value to the " +
+							    "enum that can be used as default."));
 				}	
 			} else {
+				try {
-				instance = clazz.newInstance();
+					instance = clazz.newInstance();
+				} catch (InstantiationException e) {
+					throw new AxisFault(this.getClass().getName() + " try to instantiate " +
+							                    clazz.getName() + " object, which doesn't has nullary constructor", e);
-			}
+				}
+			}
 
 			return instance;
 		} catch (Exception e) {
 			throw AxisFault.makeFault(e);
 		}
+	}
+
+	public Object getObject(Class clazz, OMElement beanElement) throws AxisFault {
+		throw new UnsupportedOperationException(this.getClass().getName() + " doesn't support this operation");
 	}
 }
Index: modules/kernel/src/org/apache/axis2/engine/ObjectSupplier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/kernel/src/org/apache/axis2/engine/ObjectSupplier.java	(revision 1471265)
+++ modules/kernel/src/org/apache/axis2/engine/ObjectSupplier.java	(revision )
@@ -19,6 +19,7 @@
 
 package org.apache.axis2.engine;
 
+import org.apache.axiom.om.OMElement;
 import org.apache.axis2.AxisFault;
 
 public interface ObjectSupplier {
@@ -32,4 +33,6 @@
      * @throws AxisFault : will throw an exception when something goes wrong
      */
     Object getObject(Class clazz) throws AxisFault;
+
+	Object getObject(Class clazz , OMElement beanElement) throws AxisFault;
 }
