Index: jms-transport.html
===================================================================
--- jms-transport.html	(revision 504784)
+++ jms-transport.html	(working copy)
@@ -1,195 +1,198 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
-<html>
-<head>
-  <meta http-equiv="content-type" content="">
-  <title>JMS Transport</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
-</head>
-
-<body lang="en">
-<h1><a name="configTransport">JMS Transport</a></h1>
-
-<p>This document is all about the JMS (Java Messaging Service) Transport
-support in Apache Axis2, and how it should be configured.</p>
-
-<p><i>Send your feedback or questions to: <a
-href="mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</a></i>. Prefix
-subject with [Axis2]. To subscribe to mailing list see <a
-href="http://ws.apache.org/axis2/mail-lists.html">here.</a></p>
-
-<h2>Contents</h2>
-<ul>
-  <li><a href="#CommonsHTTPTransportSender">Overview</a></li>
-  <li><a href="#timeout_config">Configuration</a></li>
-  <li><a href="#writing_services">Writing Services to Use The JMS
-    Transport</a></li>
-</ul>
-<a name="CommonsHTTPTransportSender"></a>
-
-<h2>Overview</h2>
-
-<p>A new JMS or Java Messaging Service transport implementation has been
-added to Axis2 to overcome some drawbacks of the previous JMS implementation.
-Some of the enhancements provided with this new implementation is the ability
-to <strong>assign custom JMS destination names or existing JMS destinations
-to Axis2 services being deployed</strong>.</p>
-<a name="timeout_config"></a>
-
-<h2>Configuration</h2>
-
-<p>To use the JMS transport, the axis2.xml configuration must be setup as
-follows in order to configure the JMSListener and the JMS Sender</p>
-<pre><strong>axis2.xml</strong>
-    &lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt;
-      &lt;parameter name="default" locked="false"&gt;                
-        &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-        &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;        
-        &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-      &lt;/parameter&gt;
-    &lt;/transportReceiver&gt;
-
-    &lt;transportSender name="jms" class="org.apache.axis2.transport.jms.JMSSender"/&gt;</pre>
-
-<p>The JMS transport receiver configuration allows you to define the default
-connection factory (named as "default" ~ JMSConstants.DEFAULT_CONFAC_NAME)
-for use by Axis2 services using the JMS transport. This connection factory
-would be used by any service which does not explicitly specify a connection
-factory name in its services.xml. The configuration required to associate a
-(local) Axis2 connection factory to an actual implementation must be provided
-as shown above, to specify the JNDI URL, initial context factory class and
-the JNDI name of the actual JMS connection factory is to be used. You may
-also specify the parameters "java.naming.security.principal" and
-"java.naming.security.credentials" if required, to access the actual
-connection factory. The example shown above uses an ActiveMQ JMS
-implementation.</p>
-<pre><strong>axis2.xml</strong>
-  &lt;parameter name="myTopicConnectionFactory" locked="false"&gt;</pre>
-<pre>    &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;</pre>
-<pre>    &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;</pre>
-<pre>    &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;TopicConnectionFactory&lt;/parameter&gt;</pre>
-<pre>  &lt;/parameter&gt;</pre>
-
-<p>If it is required or applicable, you are free to define additional (local)
-connection factories to Axis2 as shown above, which your services may use.
-For a service to specify that such a connection factory should be used, its
-services.xml may specify the following configuration parameter:</p>
-<pre>services.xml  
-  &lt;parameter name="transport.jms.ConnectionFactory" locked="true"&gt;myTopicConnectionFactory&lt;/parameter&gt;</pre>
-
-<p><strong>Note:</strong> Depending on your JMS implementation, you will need
-to make available all required libraries to your Axis2 instance. This example
-assumes you are using an ActiveMQ instance. To run the given code samples, it
-was required to make available the following JAR files:
-activeio-core-3.0-beta1.jar, activemq-core-4.0-RC2.jar,
-geronimo-j2ee-management_1.0_spec-1.0.jar at a minimum. It also requires you
-to start ActiveMQ separately from Axis2, and then provide the appropriate
-configuration settings (e.g. URL) to Axis2.</p>
-
-<p>During initialization, the JMS Listener creates a dedicated JMS message
-processor for each connection factory defined, and utilizes a shared thread
-pool to process received messages.</p>
-
-<p>A service on an Axis2 instance is deployed on all started transports by
-default, unless a list of transports are specified in its services.xml.
-Hence, if a service must only be deployed on JMS, you should specify it on
-the services.xml as follows:</p>
-<pre>  &lt;transports&gt; 
-    &lt;transport&gt;jms&lt;/transport&gt; 
-  &lt;/transports&gt;</pre>
-
-<p>If the services.xml does not provide an explicit JMS destination name, it
-is assumed that the service will listen for messages on a JMS
-<strong>Queue</strong> by the same name as the <strong>name of the
-service</strong>. If an explicit connection factory definition name has not
-been specified, it is assumed that the "default" connection factory
-definition configured within the transport receiver be used. To provide a
-custom JMS destination name and connection factory, the services.xml could
-provide the following optional parameters.</p>
-<pre>  &lt;parameter name="transport.jms.ConnectionFactory" locked="true"&gt;myTopicConnectionFactory&lt;/parameter&gt;
-  &lt;parameter name="transport.jms.Destination" locked="true"&gt;dynamicTopics/something.TestTopic&lt;/parameter&gt;</pre>
-<a name="writing_services"></a>
-
-<h2>Writing Services to Use The JMS Transport</h2>
-
-<p>This section assumes that you are already familiar with <a
-href="xmlbased-server.html">writing service implementations</a> for Axis2, and
-provides information to enable you to write your own service implementations
-which are exposed over JMS.</p>
-
-<p><strong>Echo - Service implementation and services.xml</strong></p>
-
-<p>This sample demonstrates a very simple service which is to be exposed over
-JMS. It does not specify a custom connection factory name and hence uses the
-"default" as specified in the JMS transport listener configuration. It also
-does not specify a custom destination name, and hence would listen to
-messages over a JMS Queue named "Echo" (which is the name of the service).
-This service will be exposed over all defined Axis2 transports, and the
-resulting URL for the service over JMS would be:</p>
-
-<p>jms:/echo?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616</p>
-<pre><strong>Echo.java</strong></pre>
-<pre>  public class Echo {</pre>
-<pre>    public String echoString(String in) {</pre>
-<pre>      return in;</pre>
-<pre>    }</pre>
-<pre>    public String echoString1(String in) {</pre>
-<pre>      return "echoString1 " + in;</pre>
-<pre>    }</pre>
-<pre>    public String echoString2(String in) {</pre>
-<pre>      return "echoString2 " + in;</pre>
-<pre>    }</pre>
-<pre>  }</pre>
-<pre></pre>
-<pre><strong>services.xml</strong></pre>
-<pre>  &lt;service name="echo"&gt;</pre>
-<pre>    &lt;description&gt;Echo Service&lt;/description&gt;</pre>
-<pre>    &lt;messageReceivers&gt;</pre>
-<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"</pre>
-<pre>        class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/&gt;</pre>
-<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"</pre>
-<pre>        class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;</pre>
-<pre>    &lt;/messageReceivers&gt;</pre>
-<pre>    &lt;parameter name="ServiceClass" locked="true"&gt;Echo&lt;/parameter&gt;</pre>
-<pre>&lt;/service&gt;</pre>
-
-<p></p>
-
-<p><strong>Echo2 - Service implementation and services.xml</strong></p>
-
-<p>This example shows a simple service which specifies that it should only be
-exposed over the JMS transport, and that the custom connection factory named
-"myTopcConnectionFactory" should be used to listen for requests at the JMS
-destination named "dynamicTopics/something.TestTopic". The JMS URL to access
-this service is:</p>
-
-<p>jms:/dynamicTopics/something.TestTopic?transport.jms.ConnectionFactoryJNDIName=TopicConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616&amp;java.naming.security.principal=system&amp;java.naming.security.credentials=manager</p>
-<pre><strong>Echo2.java</strong></pre>
-<pre>  public class Echo2 {</pre>
-<pre>    public String echoString(String in) {</pre>
-<pre>      return in;</pre>
-<pre>    }</pre>
-<pre>  }</pre>
-<pre></pre>
-<pre><strong>services.xml</strong></pre>
-<pre>  &lt;service name="echo"&gt;</pre>
-<pre>    &lt;transports&gt;</pre>
-<pre>      &lt;transport&gt;jms&lt;/transport&gt;</pre>
-<pre>    &lt;/transports&gt;</pre>
-<pre>    &lt;description&gt;Echo2 Service&lt;/description&gt;</pre>
-<pre>    &lt;messageReceivers&gt;</pre>
-<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"</pre>
-<pre>        class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/&gt;</pre>
-<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"</pre>
-<pre>        class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;</pre>
-<pre>    &lt;/messageReceivers&gt;</pre>
-<pre>    &lt;parameter name="ServiceClass" locked="true"&gt;Echo2&lt;/parameter&gt;</pre>
-<pre>    &lt;parameter name="transport.jms.ConnectionFactory" locked="true"&gt;myTopicConnectionFactory&lt;/parameter&gt;</pre>
-<pre>    &lt;parameter name="transport.jms.Destination" locked="true"&gt;dynamicTopics/something.TestTopic&lt;/parameter&gt;</pre>
-<pre>  &lt;/service&gt;</pre>
-<pre> </pre>
-
-<h2>Starting up the Axis2 JMS transport</h2>
-<pre>The Axis2 standalone binary distribution ships with an Axis2 Server, which starts up all of the transports that are configured as per the axis2.xml. 
-Hence configure the JMS transport in your axis2.xml, and use the axis2server.bat or the axis2server.sh to start the JMS transport.</pre>
-</body>
-</html>
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+<html>
+<head>
+  <meta http-equiv="content-type" content="">
+  <title>JMS Transport</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
+</head>
+
+<body lang="en">
+<a name="configTransport"></a>
+<h1>JMS Transport</h1>
+
+<p>This document is all about the JMS (Java Messaging Service) Transport
+support in Apache Axis2,, and how it should be configured.</p>
+
+<p><i>Send your feedback or questions to: <a
+href="mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</a></i>. Prefix
+subject with [Axis2]. You can also <a
+href="http://ws.apache.org/axis2/mail-lists.html">subscribe</a> to the
+mailing list.</p>
+
+<h2>Contents</h2>
+<ul>
+  <li><a href="#CommonsHTTPTransportSender">Overview</a></li>
+  <li><a href="#timeout_config">Configuration</a></li>
+  <li><a href="#writing_services">Writing Services to Use the JMS
+    Transport</a></li>
+</ul>
+<a name="CommonsHTTPTransportSender"></a>
+
+<h2>Overview</h2>
+
+<p>A new Java Messaging Service (JMS) transport implementation has been added
+to Axis2 to overcome some drawbacks of the previous JMS implementation. One
+of the enhancements provided with this new implementation is the ability to
+<strong>assign custom JMS destination names or existing JMS destinations to
+Axis2 services being deployed</strong>.</p>
+<a name="timeout_config"></a>
+
+<h2>Configuration</h2>
+
+<p>To use the JMS transport, the axis2.xml configuration must be setup as
+follows, in order to configure the JMSListener and the JMS Sender</p>
+<pre><strong>axis2.xml</strong>
+    &lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt;
+      &lt;parameter name="default" locked="false"&gt;                
+        &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
+        &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;        
+        &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
+      &lt;/parameter&gt;
+    &lt;/transportReceiver&gt;
+
+    &lt;transportSender name="jms" class="org.apache.axis2.transport.jms.JMSSender"/&gt;</pre>
+
+<p>The JMS transport receiver configuration allows you to define the default
+connection factory (named as "default" ~ JMSConstants.DEFAULT_CONFAC_NAME)
+for use by Axis2 services using the JMS transport. This connection factory
+will be used by any service that does not explicitly specify a connection
+factory name in its services.xml file. The configuration required to
+associate a (local) Axis2 connection factory to an actual implementation must
+be provided as shown above. To specify the JNDI URL, the initial context
+factory class and the JNDI name of the actual JMS connection factory is used.
+You can also specify the parameters "java.naming.security.principal" and
+"java.naming.security.credentials", if required, to access the actual
+connection factory. The example shown above uses an ActiveMQ JMS
+implementation.</p>
+<pre><strong>axis2.xml</strong>
+  &lt;parameter name="myTopicConnectionFactory" locked="false"&gt;</pre>
+<pre>    &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;</pre>
+<pre>    &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;</pre>
+<pre>    &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;TopicConnectionFactory&lt;/parameter&gt;</pre>
+<pre>  &lt;/parameter&gt;</pre>
+
+<p>If it is required or applicable, you are free to define additional (local)
+connection factories to Axis2 as shown above, which your services can use.
+For a service to specify that such a connection factory should be used, its
+services.xml may specify the following configuration parameter:</p>
+<pre>services.xml  
+  &lt;parameter name="transport.jms.ConnectionFactory" locked="true"&gt;myTopicConnectionFactory&lt;/parameter&gt;</pre>
+
+<p><strong>Note:</strong> Depending on your JMS implementation, you will need
+to make available all the required libraries for your Axis2 instance. This
+example assumes you are using an ActiveMQ instance. To run the given code
+samples, it is required to make the following JAR files available:
+activeio-core-3.0-beta1.jar, activemq-core-4.0-RC2.jar,
+geronimo-j2ee-management_1.0_spec-1.0.jar at a minimum. It also requires you
+to start ActiveMQ separately from Axis2, and then provide the appropriate
+configuration settings (e.g. URL) to Axis2.</p>
+
+<p>During initialization, the JMS Listener creates a dedicated JMS message
+processor for each connection factory defined, and utilizes a shared thread
+pool to process the received messages.</p>
+
+<p>A service on an Axis2 instance is deployed on all the started transports
+by default, unless a list of transports is specified in its services.xml
+file. Hence, if a service must only be deployed on JMS, you should specify it
+on the services.xml as follows:</p>
+<pre>  &lt;transports&gt; 
+    &lt;transport&gt;jms&lt;/transport&gt; 
+  &lt;/transports&gt;</pre>
+
+<p>If the services.xml does not provide an explicit JMS destination name, it
+is assumed that the service will listen for messages on a JMS
+<strong>Queue</strong> by the same name as the <strong>name of the
+service</strong>. If an explicit connection factory definition name has not
+been specified, it is assumed that the "default" connection factory
+definition configured within the transport receiver is used. To provide a
+custom JMS destination name and connection factory, the services.xml file
+provides the following optional parameters.</p>
+<pre>  &lt;parameter name="transport.jms.ConnectionFactory" locked="true"&gt;myTopicConnectionFactory&lt;/parameter&gt;
+  &lt;parameter name="transport.jms.Destination" locked="true"&gt;dynamicTopics/something.TestTopic&lt;/parameter&gt;</pre>
+<a name="writing_services"></a>
+
+<h2>Writing Services to Use the JMS Transport</h2>
+
+<p>This section assumes that you are already familiar with <a
+href="xmlbased-server.html">writing service implementations</a> for Axis2,
+and provides information on how to write your own service implementations,
+which are exposed over JMS.</p>
+
+<p><strong>Echo - Service implementation and services.xml</strong></p>
+
+<p>This sample demonstrates a very simple service which is to be exposed over
+JMS. It does not specify a custom connection factory name, and hence uses the
+default value as specified in the JMS transport listener configuration. It
+also does not specify a custom destination name, and hence would listen to
+messages over a JMS Queue named "Echo" (which is the name of the service).
+This service will be exposed over all defined Axis2 transports, and the
+resulting URL for the service over JMS will be:</p>
+
+<p>jms:/echo?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616</p>
+<pre><strong>Echo.java</strong></pre>
+<pre>  public class Echo {</pre>
+<pre>    public String echoString(String in) {</pre>
+<pre>      return in;</pre>
+<pre>    }</pre>
+<pre>    public String echoString1(String in) {</pre>
+<pre>      return "echoString1 " + in;</pre>
+<pre>    }</pre>
+<pre>    public String echoString2(String in) {</pre>
+<pre>      return "echoString2 " + in;</pre>
+<pre>    }</pre>
+<pre>  }</pre>
+<pre></pre>
+<pre><strong>services.xml</strong></pre>
+<pre>  &lt;service name="echo"&gt;</pre>
+<pre>    &lt;description&gt;Echo Service&lt;/description&gt;</pre>
+<pre>    &lt;messageReceivers&gt;</pre>
+<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"</pre>
+<pre>        class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/&gt;</pre>
+<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"</pre>
+<pre>        class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;</pre>
+<pre>    &lt;/messageReceivers&gt;</pre>
+<pre>    &lt;parameter name="ServiceClass" locked="true"&gt;Echo&lt;/parameter&gt;</pre>
+<pre>&lt;/service&gt;</pre>
+
+<p></p>
+
+<p><strong>Echo2 - Service implementation and services.xml</strong></p>
+
+<p>This example shows a simple service which specifies that it should only be
+exposed over the JMS transport, and that the custom connection factory named
+"myTopcConnectionFactory" should be used to listen for requests at the JMS
+destination named "dynamicTopics/something.TestTopic". The JMS URL to access
+this service is:</p>
+
+<p>jms:/dynamicTopics/something.TestTopic?transport.jms.ConnectionFactoryJNDIName=TopicConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616&amp;java.naming.security.principal=system&amp;java.naming.security.credentials=manager</p>
+<pre><strong>Echo2.java</strong></pre>
+<pre>  public class Echo2 {</pre>
+<pre>    public String echoString(String in) {</pre>
+<pre>      return in;</pre>
+<pre>    }</pre>
+<pre>  }</pre>
+<pre></pre>
+<pre><strong>services.xml</strong></pre>
+<pre>  &lt;service name="echo"&gt;</pre>
+<pre>    &lt;transports&gt;</pre>
+<pre>      &lt;transport&gt;jms&lt;/transport&gt;</pre>
+<pre>    &lt;/transports&gt;</pre>
+<pre>    &lt;description&gt;Echo2 Service&lt;/description&gt;</pre>
+<pre>    &lt;messageReceivers&gt;</pre>
+<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"</pre>
+<pre>        class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/&gt;</pre>
+<pre>      &lt;messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"</pre>
+<pre>        class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;</pre>
+<pre>    &lt;/messageReceivers&gt;</pre>
+<pre>    &lt;parameter name="ServiceClass" locked="true"&gt;Echo2&lt;/parameter&gt;</pre>
+<pre>    &lt;parameter name="transport.jms.ConnectionFactory" locked="true"&gt;myTopicConnectionFactory&lt;/parameter&gt;</pre>
+<pre>    &lt;parameter name="transport.jms.Destination" locked="true"&gt;dynamicTopics/something.TestTopic&lt;/parameter&gt;</pre>
+<pre>  &lt;/service&gt;</pre>
+<pre> </pre>
+
+<h2>Starting up the Axis2 JMS transport</h2>
+The Axis2 standalone binary distribution ships with an Axis2 Server, which starts up all the transports that are configured as per the axis2.xml. 
+Hence, configure the JMS transport in your axis2.xml, and use the axis2server.bat or the axis2server.sh to start the JMS transport.
+</body>
+</html>
Index: mail-configuration.html
===================================================================
--- mail-configuration.html	(revision 504784)
+++ mail-configuration.html	(working copy)
@@ -3,19 +3,21 @@
 <head>
   <meta http-equiv="content-type" content="">
   <title>Mail transport</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css" media="all" />
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
 </head>
 
 <body lang="en">
 <h1>Mail Transport Configuration</h1>
 
-<p>This document provides the guidelines on how to configure Axis2 in order
-to get the mail transport working.</p>
+<p>This document provides guidelines on how to configure Axis2 in order to
+get the mail transport working.</p>
 
 <p><i>Send your feedback or questions to: <a
 href="mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</a></i>. Prefix
-subject with [Axis2]. To subscribe to mailing list see <a
-href="http://ws.apache.org/axis2/mail-lists.html">here.</a></p>
+subject with [Axis2]. You can also <a
+href="http://ws.apache.org/axis2/mail-lists.html">subscribe</a> to the
+mailing list.</p>
 
 <h2>Content</h2>
 <ul>
@@ -30,40 +32,40 @@
 
 <h2>Introduction</h2>
 
-<p>The inner workings of the mail transport has been divided into two parts,
+<p>The inner workings of the mail transport has been divided into two parts:
 the transport sender for SMTP and the transport listener for POP3. The
 transport listener will listen to a particular email address periodically.
-When an email comes in it will be tunneled into an Axis2 engine. On the other
-hand, mail transport sender sends emails to a mail server for a particular
-email address.</p>
+When an email comes in, it will be tunneled into an Axis2 engine. On the
+other hand, the mail transport sender sends emails to a mail server to a
+particular email address.</p>
 
 <p>Mail transport can be used against a generic mail server or it can be used
-like a mailet. The simple mailet provided with Axis2 will direct any message
-that is coming to a particular address into the Axis engine. The engine will
-process the message and will use the Transport sender to send the reply.</p>
+like a mailet. The simple mailet provided with Axis2 directs any message that
+comes in to a particular address into the Axis engine. The engine will
+process the message and use the Transport sender to send the reply.</p>
 
 <p>The mail transports have been written with the use of Sun's JavaMail and
-Activation jars. These should be available in your classpath to get the mail
-transport work.</p>
+Activation jars. They should be available in your classpath to get the mail
+transport to work.</p>
 <a name="sender"></a>
 
 <h2>Transport Sender</h2>
 
 <p>You need to have a mail account to activate the mail functionality. This
-can either be a generic mail server or you can start up a James mail server,
-which will be available <a href="http://james.apache.org/">here</a>.</p>
+can either be a generic mail server or you can start up a <a
+href="http://james.apache.org/">James mail server</a>.</p>
 
 <p>JavaMail sets its properties to a Properties object. In Axis2, this has
 been mapped to a Parameter object. Mapping has been done as follows,</p>
 <ul>
   <li>Every JavaMail property can be set to @name of the &lt;parameter/&gt;.
-    Thus, SSL connection is mapped the way it is done in JavaMail</li>
-  <li>Few properties, such as password etc., are set to @name with the prefix
+    Thus, an SSL connection is mapped the way it is done in JavaMail</li>
+  <li>Few properties, such as password,, are set to @name with the prefix
     "transport"</li>
 </ul>
 
-<p>For a non-SSL connection, as an example,mail transport sender can be
-activated by adding following entry to the axis2.xml file.</p>
+<p>For a non-SSL connection, as an example, the mail transport sender can be
+activated by adding the following entry to the axis2.xml file.</p>
 <source><pre>   &lt;transportSender name="mail" class="org.apache.axis2.transport.mail.MailTransportSender"&gt;
         &lt;parameter name="mail.smtp.host" locked="false"&gt;localhost&lt;/parameter&gt;
         &lt;parameter name="mail.smtp.user" locked="false"&gt;mary&lt;/parameter&gt;
@@ -71,7 +73,8 @@
    &lt;/transportSender&gt;
   </pre>
 </source>
-<p>In runtime tuning a client to set mail transport is as easy as follows,</p>
+<p>At runtime, tuning a client to set the mail transport is as easy as
+follows,</p>
 <source><pre>...
 
 Options options =  new Options();
@@ -84,10 +87,10 @@
 options.setProperty(HTTPConstants.MAIL_SMTP,mailProps);
 
 ...</pre>
-</source>Thus, a user familiar with setting up a SSL connection, should
-easily do it with the MailProperties object. For Eg.: tuning the sender to
-talk to gmail account. This configuration should also be done with
-&lt;parameter/&gt; in axis2.xml. <source>
+</source>Thus, a user who is familiar with setting up an SSL connection,
+should easily do it with the MailProperties object. For example, tuning the
+sender to talk to the gmail account. This configuration should also be done
+with &lt;parameter/&gt; in axis2.xml. <source>
 <pre>...
 HttpTransportProperties.MailProperties props = 
                   new HttpTransportProperties.MailProperties();
@@ -107,8 +110,8 @@
 
 <h2>Transport Receiver</h2>
 
-<p>For a non-SSL connection, as an example, mail Listener can be activated by
-adding the following entry to the axis2.xml file.</p>
+<p>For a non-SSL connection, as an example, the mail Listener can be
+activated by adding the following entry to the axis2.xml file.</p>
 <source><pre>   &lt;transportReceiver name="mail" class="org.apache.axis2.transport.mail.SimpleMailListener"&gt;
         &lt;parameter name="mail.pop3.host" locked="false"&gt;localhost&lt;/parameter&gt;
         &lt;parameter name="mail.pop3.user" locked="false"&gt;bob&lt;/parameter&gt;
@@ -118,10 +121,10 @@
   </pre>
 </source>
 <p><i>Note:</i> The @name="transport.mail.replyToAddress" is an important
-parameter. It supply the Endpoint reference to the listener.</p>
+parameter. It supplies the Endpoint reference to the listener.</p>
 
-<p>For an advanced user, this can be set to a SSL connection. As an example,
-lets use this transport listener to pop from a specified gmail account.</p>
+<p>For an advanced user, this can be set to an SSL connection. For example,
+let's use this transport listener to pop from a specified gmail account.</p>
 <source><pre>&lt;transportReceiver name="mail" class="org.apache.axis2.transport.mail.SimpleMailListener"&gt;
         &lt;parameter name="mail.pop3.host" locked="false"&gt;pop.gmail.com&lt;/parameter&gt;
         &lt;parameter name="mail.pop3.user" locked="false"&gt;address@gmail.com&lt;/parameter&gt;
@@ -136,8 +139,8 @@
 
 <h2>Using Mail Transport in the Server Side</h2>
 
-<p>If the Mail Listener is need to be started as a standalone mail listener,
-it can be done with following command with the all the Axis2 jars and the
+<p>If the Mail Listener is to be started as a standalone mail listener, it
+can be done with the following command with the all the Axis2 jars and the
 mail dependency jars in the classpath.</p>
 <source><pre>java org.apache.axis2.transport.mail.SimpleMailListener repository-directory</pre>
 </source><a name="client"></a>
@@ -145,7 +148,7 @@
 <h2>Using Mail Transport in the Client Side</h2>
 
 <p>The following code segment shows how to send a one-way (IN-Only MEP) SOAP
-message using the mail transport, this needs the Transport Sender
+message using the mail transport. This needs the Transport Sender to be
 configured.</p>
 <source><pre>        
         OMElement payload = ....
@@ -168,8 +171,8 @@
 <h2>Configure James as SMTP and POP Server</h2>
 
 <p>Download the <a href="http://james.apache.org/">Apache James</a> and start
-James, connect to the James via Telnet for administrator James with the
-following code:</p>
+James. Connect to the James server via Telnet as administrator James using
+the following code:</p>
 <source><pre>$telnet 127.0.0.1 4555
 Trying 127.0.0.1...
 Connected to localhost.localdomain (127.0.0.1).
@@ -195,15 +198,15 @@
 <h2>Using the Included Mail Server</h2>
 
 <p>The inbuilt mail server can be started from the command line using the
-following piece of code when all the necessary jars are in the class path.</p>
+following piece of code when all the necessary JARS are in the class path.</p>
 <source><pre>java org.apache.axis2.transport.mail.server.MailServer</pre>
 </source>
 <p>The server itself does not need any configuration or tinkering to work. A
 ConfigurationContext and the ports to operate on are the only details needed.
-The server will store the mails in memory against the recipient till the
-recipient pops it from the server. To facilitate the use in *nix environments
-as a non root user the POP and SMTP ports used by default config/test cases
-are (1024 + 25) and (1024 + 110).</p>
+The server will store the mails in the memory against the recipient till the
+recipient pops it from the server. To facilitate the use in Linux
+environments as a non root user, the POP and SMTP ports used by default
+configuration/test cases are, 1024, 25 and 1024, 110 respectively.</p>
 <hr>
 </body>
 </html>
