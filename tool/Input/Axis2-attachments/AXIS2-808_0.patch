Index: modules/core/src/org/apache/axis2/description/WSDLVersionDeterminer.java
===================================================================
--- modules/core/src/org/apache/axis2/description/WSDLVersionDeterminer.java	(revision 0)
+++ modules/core/src/org/apache/axis2/description/WSDLVersionDeterminer.java	(revision 0)
@@ -0,0 +1,112 @@
+package org.apache.axis2.description;
+
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * This class is useful in determining what version a given WSDL is.
+ * Can be used as a workaround to populate the AxisService from a WSDL2.0
+ * until Woden supports both WSDL1.1 and 2.0
+ * @author Oshani
+ */
+public class WSDLVersionDeterminer {
+
+    private String WSDL_11 = "definitions";
+    private String WSDL_11_Qualified = "wsdl:definitions";
+    private String WSDL_20 = "description";
+    private String WSDL_20_Qualified = "wsdl:description";
+    private String WSDL_Version = null;  //This could be either "11"(for WSDL1.1) or "20"(for WSDL2.0)
+
+    /**
+     * @param fileName of the WSDL document
+     */
+    public WSDLVersionDeterminer(String fileName) throws IOException, ParserConfigurationException, SAXException {
+        Document doc= parseFile(fileName, false);
+        if (doc != null){
+            queryWsdlVersion(doc);
+        }
+    }
+
+    /**
+     * @param  file WSDL file as a java.io.File
+     */
+    public WSDLVersionDeterminer(File file) throws IOException, ParserConfigurationException, SAXException {
+        String fileName = file.getAbsolutePath();
+        Document doc= parseFile(fileName, false);
+        if (doc != null){
+            queryWsdlVersion(doc);
+        }
+    }
+
+    /**
+     * @param in WSDL inputStream
+     */
+    public WSDLVersionDeterminer (InputStream in) throws IOException, ParserConfigurationException, SAXException {
+        Document doc = org.apache.axis2.util.XMLUtils.newDocument(in);
+        if (doc != null){
+            queryWsdlVersion(doc);
+        }
+    }
+
+    /**
+     * @param doc WSDL as a DOM Document
+     */
+    public WSDLVersionDeterminer(Document doc){
+        if (doc != null){
+            queryWsdlVersion(doc);
+        }
+    }
+
+    /**
+     * Method to obtain a valid DOM document from the file name
+     * @param fileName
+     * @param validating
+     * @return
+     * @throws ParserConfigurationException
+     * @throws IOException
+     * @throws SAXException
+     */
+    public Document parseFile(String fileName, boolean validating) throws ParserConfigurationException, IOException, SAXException {
+
+        // Create a builder factory
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        factory.setValidating(validating);
+
+        // Create the builder and parse the file
+        Document doc = factory.newDocumentBuilder().parse(new File(fileName));
+        return doc;
+    }
+
+    public void setWsdlVersion(String version){
+        this.WSDL_Version = version;
+    }
+
+    public String getWsdlVersion(){
+        return this.WSDL_Version;
+    }
+
+    /**
+     * Method to check the first element from the DOM document and compare the
+     * node name of the first element
+     * @param document
+     */
+    public void queryWsdlVersion(Document document){
+        if (WSDL_Version == null){
+            if (document != null){
+                String firstNodeName = document.getFirstChild().getNodeName();
+                if (firstNodeName == WSDL_11 || firstNodeName == WSDL_11_Qualified){
+                    setWsdlVersion("11");
+                }
+                else if (firstNodeName == WSDL_20 || firstNodeName == WSDL_20_Qualified){
+                    setWsdlVersion("20");
+                }
+            }
+        }
+    }
+}
