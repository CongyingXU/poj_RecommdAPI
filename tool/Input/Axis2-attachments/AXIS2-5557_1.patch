Index: site/apt/tcp-transport.apt
===================================================================
--- site/apt/tcp-transport.apt	(revision 948675)
+++ site/apt/tcp-transport.apt	(working copy)
@@ -17,102 +17,134 @@
 
 TCP Transport
 
-  This document explains how to send and receive SOAP messages via TCP in Axis2.
-
 * {Content}
 
 %{toc|section=1|fromDepth=1}
 
-* {Introduction}
+* {Transport listener}
 
-  Axis2 supports TCP as a transport. It supports both sending and receiving SOAP
-  messages via TCP. A TCP transport does not have any application level headers
-  and the SOAP message that is sent should be self-contained. This makes the
-  interaction fast and simple. However, since there are no application headers,
-  it does not have the privilege of having a request URI, and Service
-  dispatching should be done by an alternative method. Thus,
-  RequestURIBasedDispatcher cannot be used. The following are the two main
-  alternatives available for dispatching in the Axis2 environment:
-  
-  [[1]] Use the name space URI of the first child element of SOAPBody.
-    (SOAPMessageBodyBasedDispatcher).
-  
-  [[2]] Enable WS-Addressing. In the case of version 1.1 and 1.1.1 releases
-    Addressing is default (SOAPActionBasedDispatcher).
+** {Listener configuration}
 
-  []
-  
-  When the TCP request is sent, it is the user's responsibility to use
-  either Addressing or the SOAP body base mechanism.
+  The TCP transport listener is configured in <<<axis2.xml>>> using the following declaration:
 
-* {How to Start the TCPServer}
++----------------------------+
+<transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportListener"/>
++----------------------------+
 
-  The TCP server can be started by running the class
-  org.apache.axis2.transport.tcp.TCPServer with two parameters -
-  repository and port number, as arguments. This
-  class needs all the Axis dependency JARs in the classpath. New services can
-  be added in the usual way by dropping the archives to the repository.
+  Depending on how the TCP transport is set up, additional parameters may be required inside the
+  <<<transportReceiver>>> element (see next section).
 
-* {How to Send SOAP Messages Using TCP Transport}
+** {Endpoint configuration}
 
-  TCP transport can be enabled easily from the call API. The following code
-  segment demonstrates how this can be done.
+  Endpoints can be configured both at the transport level and at the service level. Each endpoint
+  opens a TCP server socket for listening. TCP requests received on a port that is configured on a
+  service will be pre-dispatched to that service. Packets received by a port that is configured
+  at the transport level need to be dispatched using one of the following mechanisms:
 
+  [[1]] Using the namespace URI of the first child element of SOAPBody
+  (SOAPMessageBodyBasedDispatcher).
+
+  [[2]] Using WS-Addressing headers (SOAPActionBasedDispatcher).
+
+  Endpoints are configured by adding <<<parameter>>> elements to the <<<transportReceiver>>>
+  element in <<<axis2.xml>>> or to a <<<service>>> element in an <<<services.xml>>> file. The
+  set of parameters is the same for both scenarios:
+
+  [<<<transport.tcp.port>>> (required)]
+  The port number over which the TCP server socket should be opened.
+
+  [<<<transport.tcp.hostname>>> (optional)]
+  The hostname to which the TCP server socket should be bound.
+
+  [<<<transport.tcp.contentType>>> (optional, defaults to text/xml)]
+  Specifies the content type of the messages received on the endpoint.
+
+  [<<<transport.tcp.backlog>>> (optional, defaults to 50)]
+  The length of the backlog (queue) supported by the TCP server socket.
+
+* {Transport sender}
+
+  The TCP transport sender can be enabled in <<<axis2.xml>>> using the following declaration:
+
++----------------------------+
+<transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
++----------------------------+
+
+* {Examples}
+
+** {Enabling TCP listener at the transport level}
+
+  The following declaration in <<<axis2.xml>>> initializes a TCP server socket on port 6060
+  and allows all services (for which TCP is in the list of exposed transports) to receive
+  messages over that port:
+
++----------------------------+
+<transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportListener">
+  <parameter name="transport.tcp.port">6060</parameter>
+</transportReceiver>
++----------------------------+
+
+  For this to work, WS-Addressing must be enabled, and messages sent to port 6060 must
+  have the relevant WS-Addressing headers.
+
++----------------------------+
+<module ref="addressing"/>
++----------------------------+
+
+  With the configuration shown above, the TCP transport would generate bindings with the
+  following EPR:
+
++----------------------------+
+tcp://localhost:6060/services/Version?contentType=text/xml
++----------------------------+
+
+  Similar EPRs will be generated for services when the transport is configured at service
+  level.
+
+  The following example shows a message that can be sent to the Version service over TCP:
+
++----------------------------+
+<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
+                   xmlns:wsa="http://www.w3.org/2005/08/addressing">
+    <SOAP-ENV:Header>
+        <wsa:MessageID>1234</wsa:MessageID>
+        <wsa:To>tcp://localhost:6060/services/Version?contentType=text/xml</wsa:To>
+        <wsa:Action>urn:getVersion</wsa:Action>
+    </SOAP-ENV:Header>
+    <SOAP-ENV:Body>
+    </SOAP-ENV:Body>
+</SOAP-ENV:Envelope>
++----------------------------+
+
+  Axis2 client API can be used to easily send TCP requests to a remote service.
+  The following code snippet shows how to do that. The TCP transport sender
+  must be enabled in the <<axis2.xml>> in order for this to work.
+
 +------------------------------------------------------+
+
+String url = "tcp://localhost:6060/services/Version?contentType=text/xml";
 OMElement payload = ...
+
 ServiceClient serviceClient = new ServiceClient();
 Options options = new Options();
+EndpointReference targetEPR = new EndpointReference(url);
 options.setTo(targetEPR);
-options.useSeparateListener(false);
 serviceClient.setOptions(options);
 OMElement response = serviceClient.sendReceive(payload);
 +------------------------------------------------------+
 
-  The transport that should be invoked is inferred from the targetEPR
+  The transport sender that should be invoked is inferred from the targetEPR
   (tcp://...). In this case it is TCP and the listener is also TCP. The SOAP
-  message has to be self contained in order to use Addressing. The other option
-  is to use the URI of the first child of the SOAP Body to dispatch the
-  service. The parameter is of the type OMElement,
-  the XML representation of Axis2.
+  message has to be self contained in order to use Addressing.
+  The parameter is of the type OMElement, the XML representation of Axis2.
 
-* {Samples}
+  A TCP URL may contain an optional timeout value, as a query parameter, to
+  indicate how long (in milliseconds) the client should wait for a response.
+  Once this period has expired, the client TCP socket will timeout:
 
-  A sample for a TCP Client can be found from the
-  samples/userguide/src/userguide/clients/TCPClient.java in the binary
-  distribution. This accesses the same Web service explained in the 
-  Axis2 Advanced User's Guide. The client first
-  starts the TCPServer with the same repository used for the
-  Axis2 Advanced User's Guide samples. Since the
-  sample is already deployed in the repository, as per the userguide, it will
-  be automatically available.
++----------------------------+
+tcp://localhost:6060/services/Version?contentType=text/xml&timeout=10000
++----------------------------+
 
-  In order to run the TCPClient.java, addressing should be engaged both in
-  the client and server sides. On the client side, you can engage addressing by
-  copying the addressing-@axis2_version@.mar (AXIS2_HOME/repository/module) to
-  AXIS2_HOME/lib directory.
-
-* {Transport Components}
-
-  The Axis2 TCP transport has two components, a transport Listener for
-  receiving the messages and a transport Sender to send the SOAP Messages. The
-  Axis2 installation has both the components built into itself by default. In
-  the axis2.xml configuration file, the two TCP transport components can be 
-  configured as shown below.
-
-  The following XML lines initialize the TCPTransport Receiver:
-
-+-----------------------------------------------------------------------------+
-<transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer">
-    <parameter name="port">6060</parameter>
-</transportReceiver>
-+-----------------------------------------------------------------------------+
-
-  The following XML lines add the TCPTransport Sender:
-
-+-------------------------------------------------------------------------------------+
-<transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
-+-------------------------------------------------------------------------------------+
-
-  Note: If the TCP server is started manually, this configuration does not take
-  effect. In return, this affects the transport Listener's start by Axis2.
-  (e.g. Listener started by the Complete Async interaction)
+  If the Axis2 client API is used to send a request to the above URL, the client
+  socket will timeout after waiting for 10 seconds, for the response.
\ No newline at end of file
