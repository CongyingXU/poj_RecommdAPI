Index: src/org/apache/axis2/om/OMAttribute.java
===================================================================
--- src/org/apache/axis2/om/OMAttribute.java	(revision 292819)
+++ src/org/apache/axis2/om/OMAttribute.java	(working copy)
@@ -19,41 +19,63 @@
 import javax.xml.namespace.QName;
 
 /**
- * Interface OMAttribute
+ * Represents attributes in the infoset that are not namespace declarations.
+ *
+ * <p>Namespace declarations are represented by OMNamespace</p>
+ *
+ * @see OMNamespace
  */
 public interface OMAttribute {
+
     /**
-     * @return localName
+     * Returns the local name of the attribute.
+     *
+     * @return the local name of the attribute.
      */
     public String getLocalName();
 
     /**
-     * @param localName
+     * Sets the local name of the attribute.
+     *
+     * @param localName The new local name for the attribute.
      */
     public void setLocalName(String localName);
 
     /**
-     * @return
+     * Get the value of the attribute.
+     *
+     * @return The value of the attribute.
      */
     public String getValue();
 
     /**
-     * @param value
+     * Set the value of the attribute.
+     *
+     * <p>Note that the attribute value is not checked for correctness, and may possibly not be serializable
+     * to XML, if it contains characters not allowed by XML</p>
+     *
+     * @param value The new value for the attribute.
      */
     public void setValue(String value);
 
     /**
-     * @param omNamespace
+     * Set the namespace of the attribute.
+     *
+     * @param omNamespace The new namespace for the element.
      */
     public void setOMNamespace(OMNamespace omNamespace);
 
     /**
-     * @return OMNamespace
+     * Get the namespace of the attribute.
+     *
+     * @return The namespace for the attribute.
      */
     public OMNamespace getNamespace();
 
     /**
-     * @return javax.xml.namespace.QName
+     * Get the QName that identifies this attribute.
+     *
+     * @return The QName (local name/namespace pair) that identifies this attribute.
      */
     public QName getQName();
 }
Index: src/org/apache/axis2/om/OMFactory.java
===================================================================
--- src/org/apache/axis2/om/OMFactory.java	(revision 292819)
+++ src/org/apache/axis2/om/OMFactory.java	(working copy)
@@ -19,30 +19,59 @@
 import javax.xml.namespace.QName;
 
 /**
- * Class OMFactory
+ * Provides the means to manufacture instances of the various AXIOM classes.
+ *
+ * <p>If you create an element without a "builder", then it cannot be created on demand.</p>
+ *
+ * @see OMAbstractFactory
  */
 public interface OMFactory {
 
 	/**
-	 * Create a new OMDocument
-	 * @return
+	 * Create a new OMDocument.
+     *
+	 * @return The new document.
 	 */
 	public OMDocument createOMDocument();
 	
     /**
-     * @param localName
-     * @param ns
-     * @return
+     * Manufacture an element without a parent or builder.
+     *
+     * @param localName The local name for the element.
+     * @param ns    The namespace for the element.
+     *
+     * @return  The new element.
+     *
+     * @see #createOMElement(String, OMNamespace, OMContainer)
      */
     public OMElement createOMElement(String localName, OMNamespace ns);
+
+    /**
+     * Create a new element with the given parent, but no builder.
+     *
+     * @param localName The local name for the element.
+     * @param ns    The namespace for the element.
+     * @param parent    The parent for the element.
+     *
+     * @return The created element.
+     *
+     * @see #createOMElement(String, OMNamespace)
+     * @see #createOMElement(String, OMNamespace, OMContainer, OMXMLParserWrapper)
+     */
     public OMElement createOMElement(String localName, OMNamespace ns, OMContainer parent);
 
     /**
-     * @param localName
-     * @param ns
-     * @param parent
-     * @param builder
-     * @return
+     * Create an element with a parent and a builder.
+     *
+     * @param localName The local name for the element.
+     * @param ns    The namespace for the element.
+     * @param parent    The parent for the element, or <tt>null</tt>
+     * @param builder   The "builder" for the element, if the document is to be parsed on demand.
+     *
+     * @return  The created element.
+     *
+     * @see #createOMElement(String, OMNamespace)
+     * @see #createOMElement(String, OMNamespace, OMContainer)
      */
     public OMElement createOMElement(String localName, OMNamespace ns,
                                      OMContainer parent,
@@ -54,90 +83,153 @@
      * Or in other words people might not want to use the new OMNamespace.
      * Well, this is for those people.
      *
-     * @param localName
-     * @param namespaceURI
-     * @param namespacePrefix
-     * @return
+     * @param localName     The local name for the element
+     * @param namespaceURI  The namespace for the element.
+     * @param namespacePrefix   The prefix for the element.
+     * 
+     * @return The created element.
      */
     public OMElement createOMElement(String localName,
                                      String namespaceURI,
                                      String namespacePrefix);
 
     /**
-     * QName(localPart),
-     * QName(namespaceURI, localPart) - a prefix will be assigned to this
-     * QName(namespaceURI, localPart, prefix)
+     * Create an element using a QName and parent, but no builder.
      *
-     * @param qname
-     * @param parent
-     * @return
-     * @throws OMException
+     * <p>There are three options:
+     *  <ul>
+     *      <li>QName(localPart),</li>
+     *      <li>QName(namespaceURI, localPart) - a prefix will be assigned to this</li>
+     *      <li>QName(namespaceURI, localPart, prefix)</li>
+     *  </ul>
+     * </p>
+     *
+     * @param qname     The QName of the element.
+     * @param parent    The parent for the new element.
+     *
+     * @return  The created element.
      */
-    public OMElement createOMElement(QName qname, OMContainer parent)
-            throws OMException;
+    public OMElement createOMElement(QName qname, OMContainer parent);
 
     /**
-     * @param uri
-     * @param prefix
-     * @return
+     * Create a namespace object, a binding between prefix and namespace.
+     *
+     * @param uri   The namespace name.
+     * @param prefix    The prefix to use.
+     *
+     * @return  The created namespace binding.
      */
     public OMNamespace createOMNamespace(String uri, String prefix);
 
     /**
-     * @param parent
-     * @param text
-     * @return
+     * Create a text item.
+     *
+     * @param parent    The parent of the text item.
+     * @param text  The text of the item.
+     *
+     * @return The created {@link OMText} item.
      */
     public OMText createText(OMElement parent, String text);
 
     /**
-     * @param s
-     * @return
+     * Create a text item without a parent.
+     *
+     * @param s The contents of the text item.
+     *
+     * @return The created {@link OMText} item.
      */
     public OMText createText(String s);
 
     /**
+     * Create a text node of a particular type.
      *
-     * @param s
-     * @param type - OMText node can handle SPACE, CHARACTERS, CDATA and ENTITY REFERENCES. For Constants, use either
-     * XMLStreamConstants or constants found in OMNode.
-     * @return
+     * @param s The string contents of the text node.
+     * @param type One of {@link OMNode#CDATA_SECTION_NODE}, {@link OMNode#COMMENT_NODE}, {@link OMNode#ENTITY_REFERENCE_NODE},
+     *  {@link OMNode#SPACE_NODE}, or {@link OMNode#TEXT_NODE}.
+
+     * @return The created text node.
      */
     public OMText createText(String s, int type);
 
+    /**
+     * Creates a text object of a base-64 encoded binary with a specific mime type,
+     *
+     * @param s The base-64 encoded representation of binary data.
+     * @param mimeType  The mime type of the data.
+     * @param optimize  ???
+     *
+     * @return The created text node.
+     */
     public OMText createText(String s, String mimeType, boolean optimize);
 
+    /**
+     * Create a text object from a {@link javax.activation.DataHandler}, so that the base-64 encoded
+     * version of the text need never be created.
+     *
+     * @param dataHandler   The data handler to use.  Note that this is a {@link Object} so that
+     *  clients avoid an explicit dependency on {@link javax.activation.DataHandler}.  This way it
+     *  can be used if it is available.
+     *
+     * @param optimize  ???
+     *
+     * @return  The created text node.
+     */
     public OMText createText(Object dataHandler, boolean optimize);
 
+    /**
+     * Like {@link #createText(String, String, boolean)}, but adds a parent parameter.
+     *
+     * @param parent    The parent to which this text node belongs.
+     * @param s         The base-64 representation of binary data.
+     * @param mimeType  The MIME type for the binary data.
+     * @param optimize  ???
+     *
+     * @return  The created text node.
+     */
     public OMText createText(OMElement parent, String s, String mimeType,
                              boolean optimize);
 
+    /**
+     * Create an attribute.
+     *
+     * @param localName The local name for the attribute.
+     * @param ns    The namespace for the attribute.
+     * @param value The value of the attribute.
+     *
+     * @return The created attribute.
+     */
     public OMAttribute createOMAttribute(String localName,
                                          OMNamespace ns,
                                          String value);
 
     /**
      * create DocType/DTD
-     * @param parent
-     * @param content
-     * @return doctype
+     *
+     * @param parent    The container document.
+     * @param content   The content of the DTD.
+     *
+     * @return The created {@link OMDocType}.
      */
     public OMDocType createOMDocType(OMContainer parent, String content);
 
     /**
-     * create a PI
-     * @param parent
-     * @param piTarget
-     * @param piData
-     * @return pi
+     * Create a PI.
+     *
+     * @param parent    The parent of the PI.
+     * @param piTarget  The target of the PI.
+     * @param piData    The data of the PI.
+     *
+     * @return The created {@link OMProcessingInstruction}.
      */
     public OMProcessingInstruction createOMProcessingInstruction(OMContainer parent, String piTarget, String piData);
 
     /**
      * create a comment
-     * @param parent
-     * @param content
-     * @return comment
+     *
+     * @param parent    The parent of the comment, if any.
+     * @param content   The content of the comment.
+     *
+     * @return The created comment.
      */
     public OMComment createOMComment(OMContainer parent, String content);
 }
Index: src/org/apache/axis2/om/OMXMLParserWrapper.java
===================================================================
--- src/org/apache/axis2/om/OMXMLParserWrapper.java	(revision 292819)
+++ src/org/apache/axis2/om/OMXMLParserWrapper.java	(working copy)
@@ -17,80 +17,92 @@
 package org.apache.axis2.om;
 
 /**
- * Interface OMXMLParserWrapper
+ * Wraps the XMLStreamReader, if any, associated with the current object model,
+ * so that clients are not forced to use a "pull parser" implementation.
+ *
+ * @see javax.xml.stream.XMLStreamReader
  */
 public interface OMXMLParserWrapper {
     /**
      * Proceed the parser one step and return the event value
      *
-     * @return
-     * @throws org.apache.axis2.om.OMException
+     * @return The result of the function {@link javax.xml.stream.XMLStreamReader#next()}
      *
-     * @throws OMException
+     * @throws OMException If something goes wrong during the parsing.
      */
     int next() throws OMException;
 
     /**
-     * Discard the current element
-     * This should remove the given element and its decendants.
+     * Discard the parsing events associated with the current element and all of its
+     * descendants.
      *
-     * @param el
-     * @throws org.apache.axis2.om.OMException
+     * @param el The element for which pending events should be discarded.  The
+     *  event stream is scanned until the "end element" event associated with this
+     *  element.
      *
-     * @throws OMException
+     * @throws OMException  If something goes wrong during the parsing.
      */
     void discard(OMElement el) throws OMException;
 
     /**
-     * @param b
-     * @throws org.apache.axis2.om.OMException
+     * If caching is on, then the appropriate objects are created with each new
+     * parsing event.
      *
-     * @throws OMException
+     * @param b The desired new state of caching.
      */
-    void setCache(boolean b) throws OMException;
+    void setCache(boolean b);
 
     /**
+     * Access the underlying {@link javax.xml.stream.XMLStreamReader}.
+     *
+     * <p>To avoid possible confusion with multiple different sources accessing the parser,
+     * this function may only be called <b>once</b>.
+     *
      * Allows to access the underlying parser. Since the parser
      * depends on the underlying implementation,an Object is returned
      * However the implementations may have restrictions in letting access to
      * the parser
      *
-     * @return
+     * @return The underlying {@link javax.xml.stream.XMLStreamReader} performing the parsing.
      */
     Object getParser();
 
     /**
+     * Identifies whether the incoming XML has been fully parsed.
+     *
      * @return the complete status
      */
     boolean isCompleted();
 
     /**
-     * @return the document element
+     * Returns the root element of the parsed document's element tree.
+     *
+     * @return the root element of the document being parsed.
      */
     OMElement getDocumentElement();
 
     /**
      * Returns the type of the builder.
-     * Can be either the
-     * PUSH_TYPE_BUILDER or PULL_TYPE_BUILDER
      *
-     * @return
+     * @return Either {@link OMConstants#PUSH_TYPE_BUILDER} or {@link OMConstants#PULL_TYPE_BUILDER}.
      */
     short getBuilderType();
 
     /**
-     * Registers an external content handler. Especially useful for
+     * Not used.
+     *
+     * <p>Registers an external content handler. Especially useful for
      * push type builders. will throw an unsupportedOperationExcveption if
-     * such handler registration is not supported
+     * such handler registration is not supported</p>
      *
-     * @param obj
+     * @param obj   The {@link org.xml.sax.ContentHandler} to use.
      */
     void registerExternalContentHandler(Object obj);
 
     /**
-     * get the registered external content handler
+     * Not used.
      *
-     * @return
+     * @return The {@link org.xml.sax.ContentHandler} in use, if any,
      */
     Object getRegisteredContentHandler();
 }
Index: src/org/apache/axis2/om/OMDocument.java
===================================================================
--- src/org/apache/axis2/om/OMDocument.java	(revision 292819)
+++ src/org/apache/axis2/om/OMDocument.java	(working copy)
@@ -21,6 +21,11 @@
 import javax.xml.stream.XMLStreamException;
 
 
+/**
+ * Represents an entire XML document.
+ *
+ * <p>Roughly corresponds to a DOM <tt>Document</tt> object.
+ */
 public interface OMDocument extends OMContainer {
 
 	/**
@@ -35,78 +40,124 @@
 	
 	/**
 	 * Returns the document element
-	 * @return
+	 * @return  The root element of the document.
 	 */
 	public OMElement getDocumentElement();
 	
 	/**
 	 * Sets the document element of the XML document
-	 * @param rootElement
+     *
+	 * @param rootElement   The root element of the document.
 	 */
 	public void setDocumentElement(OMElement rootElement);
 	
 	/**
-	 * Returns the XML version
-	 * @return
+	 * Returns the XML version.
+     *
+	 * @return Returns one of {@link #XML_10} or {@link #XML_11}.
 	 */
 	public String getXMLVersion();
 	
 	/**
-	 * Sets the XML version
-	 * @see org.apache.axis2.om.impl.llom.OMDocumentImpl#XML_10 XML 1.0
-	 * @see org.apache.axis2.om.impl.llom.OMDocumentImpl#XML_11 XML 1.1
-	 * @param version
+	 * Sets the XML version.
+     *
+	 * @param version   The version number to set.
+     *
+     * @see org.apache.axis2.om.impl.llom.OMDocumentImpl#XML_10 XML 1.0
+     * @see org.apache.axis2.om.impl.llom.OMDocumentImpl#XML_11 XML 1.1
 	 */
 	public void setXMLVersion(String version);
 	
 	/**
-	 * Returns the caracter set encoding scheme
-	 * @return
+	 * Returns the caracter set encoding scheme.
+     *
+     * <p>For a document that was just parsed, this will contain the character
+     * encoding used to parse the document into the AXIOM model.</p>
+     *
+	 * @return  Returns the character encoding that the document has/wants.
 	 */
 	public String getCharsetEncoding();
 	
 	/**
-	 * Sets the character set encoding scheme to be used
-	 * @param charsetEncoding
+	 * Sets the character set encoding scheme to be used.
+     *
+	 * @param charsetEncoding   Set the character set encoding.
 	 */
 	public void setCharsetEncoding(String charsetEncoding);
 
     /**
-     * XML standalone value
-     * This will be yes, no or null (if not available)
-     * @return
+     * XML document declaration "standalone" value.
+     *
+     * @return This will be yes, no or null (if not available).
      */
     public String isStandalone();
+
+    /**
+     * Set the "standalone" property on a document.
+     *
+     * @param isStandalone  The value for the "isStandalone".
+     */
     public void setStandalone(String isStandalone);
 
     /**
-	 * Serialize the OMDocument
-	 * @param omOutput
-	 * @throws XMLStreamException
+	 * Serialize the OMDocument.
+     *
+     * <p>Caution: Serializing without caching means that any portion of the document
+     * that has not been read will no longer be available for further reading.
+     * In other words, this function can corrupt the remainder of your <code>OMDocument</code>.
+     * Only use it when you're sure you know longer need the contents of the document.</p>
+     *
+	 * @param omOutput  The output channel.  The isIgnoreXMLDeclaration() function on the output is used
+     *  to determine whether an xml declaration is written.
+     *
+	 * @throws XMLStreamException If something goes wrong while writing the document.
+     *
+     * @see #serializeWithCache(org.apache.axis2.om.impl.OMOutputImpl)
+     * @see #serialize(org.apache.axis2.om.impl.OMOutputImpl, boolean)
 	 */
 	public void serialize(OMOutputImpl omOutput) throws XMLStreamException;
 	
 	/**
 	 * Serilize the OMDocument with the option of excluding/including the 
-	 * XML declaration
-	 * @param omOutput
-	 * @param includeXMLDeclaration Whether to include the XML declaration or not 
-	 * @throws XMLStreamException
+	 * XML declaration.
+     *
+     * <p>The xml declaration is the text that reads something like the following:<br>
+     * <code>&lt;?xml version="1.0" ?&gt;</code>
+     * </p>
+     *
+     * <p>See the warning at {@link #serialize(org.apache.axis2.om.impl.OMOutputImpl)}</p>
+     *
+	 * @param omOutput  The output channel.
+	 * @param includeXMLDeclaration if <code>true</code> the XML declaration will be included.
+     *
+	 * @throws XMLStreamException If something goes wrong while writing the document.
+     *
+     * @see #serialize(org.apache.axis2.om.impl.OMOutputImpl)
+     * @see #serializeWithCache(org.apache.axis2.om.impl.OMOutputImpl, boolean)
 	 */
 	public void serialize(OMOutputImpl omOutput, boolean includeXMLDeclaration) throws XMLStreamException;
 	
 	/**
-	 * Serializa the document with cache on
-	 * @param omOutput
-	 * @throws XMLStreamException
+	 * Serialize the document with cache on.
+     *
+     * <p>This method will write the document to the output destination, and also make sure
+     * that the remainder of the document content is available, if it is not yet fully
+     * populated via parsing.</p>
+     *
+	 * @param omOutput  The output channel.  The isIgnoreXMLDeclaration() function on the output is used
+     *  to determine whether an xml declaration is written.
+     *
+	 * @throws XMLStreamException   If something goes wrong while writing the document.
 	 */
 	public void serializeWithCache(OMOutputImpl omOutput) throws XMLStreamException;
 	
 	/**
 	 * Seralize the document with cache on with the option on excluding the XML declaration
-	 * @param omOutput
-	 * @param includeXMLDeclaration
-	 * @throws XMLStreamException
+     *
+	 * @param omOutput  The serialized document will be written here.
+	 * @param includeXMLDeclaration Should the xml declaration be written.
+     *
+	 * @throws XMLStreamException   If something goes wrong while writing the document.
 	 */
 	public void serializeWithCache(OMOutputImpl omOutput, boolean includeXMLDeclaration) throws XMLStreamException;
 }
Index: src/org/apache/axis2/om/OMNode.java
===================================================================
--- src/org/apache/axis2/om/OMNode.java	(revision 292819)
+++ src/org/apache/axis2/om/OMNode.java	(working copy)
@@ -105,6 +105,9 @@
      * Returns the next sibling in document order.
      *
      * @return The next sibling in document order.
+     *
+     * @throws OMException In the event that the document is being loaded on demand, <tt>getNextSibling</tt>
+     *  can trigger further parsing, and thus trigger exceptions.
      */
     public OMNode getNextSibling() throws OMException;
 
@@ -113,7 +116,7 @@
      * If somethings info are not available in the item, one has to check this attribute to make sure that, this
      * item has been parsed completely or not.
      *
-     * @return boolean
+     * @return <tt>true</tt> if this Has this node been complete parsed.
      */
     public boolean isComplete();
 
@@ -136,7 +139,10 @@
      * <p>Discard goes to the parser level and if the element is not completely built, then it will be
      * completely skipped at the parser level.</p>
      *
-     * @throws OMException
+     * <p>Note that in the case of comments and text nodes, all of the remaining events in the
+     * containing element are discarded.</p>
+     *
+     * @throws OMException If something goes wrong with the parsing.
      */
     public void discard() throws OMException;
 
@@ -186,11 +192,13 @@
     /**
      * Serialize the node with caching
      *
-     * @param omOutput
-     * @throws XMLStreamException
+     * @param omOutput  The channel to use.
+     *
+     * @throws XMLStreamException   If a problem occurs while writing the node.
+     *
      * @see #serializeWithCache(org.apache.axis2.om.impl.OMOutputImpl)
      */
-    public void serializeWithCache(org.apache.axis2.om.impl.OMOutputImpl omOutput)
+    public void serializeWithCache(OMOutputImpl omOutput)
             throws XMLStreamException;
 
     /**
Index: src/org/apache/axis2/om/impl/llom/OMElementImpl.java
===================================================================
--- src/org/apache/axis2/om/impl/llom/OMElementImpl.java	(revision 292819)
+++ src/org/apache/axis2/om/impl/llom/OMElementImpl.java	(working copy)
@@ -115,7 +115,7 @@
      * @param qname - this should be valid qname according to javax.xml.namespace.QName
      * @throws OMException
      */
-    public OMElementImpl(QName qname, OMContainer parent) throws OMException {
+    public OMElementImpl(QName qname, OMContainer parent) {
         this(qname.getLocalPart(), null, parent);
         this.ns = handleNamespace(qname);
     }
Index: src/org/apache/axis2/om/impl/llom/factory/OMLinkedListImplFactory.java
===================================================================
--- src/org/apache/axis2/om/impl/llom/factory/OMLinkedListImplFactory.java	(revision 292819)
+++ src/org/apache/axis2/om/impl/llom/factory/OMLinkedListImplFactory.java	(working copy)
@@ -89,10 +89,8 @@
      * @param qname
      * @param parent
      * @return
-     * @throws OMException
      */
-    public OMElement createOMElement(QName qname, OMContainer parent)
-            throws OMException {
+    public OMElement createOMElement(QName qname, OMContainer parent) {
         return new OMElementImpl(qname, parent);
     }
 
Index: src/org/apache/axis2/om/OMAbstractFactory.java
===================================================================
--- src/org/apache/axis2/om/OMAbstractFactory.java	(revision 292819)
+++ src/org/apache/axis2/om/OMAbstractFactory.java	(working copy)
@@ -19,20 +19,25 @@
 import org.apache.axis2.soap.SOAPFactory;
 import org.apache.axis2.soap.impl.llom.factory.SOAPLinkedListImplFactory;
 
+/**
+ * Creates the appropriate factory objects, allowing for override using
+ * System properties.
+ *
+ * @see OMFactory
+ * @see SOAPFactory
+ */
 public class OMAbstractFactory {
+
     /**
-     * Eran Chinthaka (chinthaka@apache.org)
+     * Protected constructor so that instances of this class cannot be created.
      */
-    /**
-     * Constructor OMFactory
-     */
     protected OMAbstractFactory() {
     }
 
     /**
-     * This will pick up the default factory implementation from the classpath
+     * This will pick up the default factory implementation from the classpath.
      *
-     * @return
+     * @return The default implementation of {@link OMFactory}.
      */
     public static OMFactory getOMFactory() {
         return FactoryFinder.findOMFactory(null);
@@ -42,17 +47,22 @@
      * If user needs to provide his own factory implementation, here provide the
      * Class Loader for that.
      *
-     * @param classLoader
-     * @return
+     * @param classLoader The {@link ClassLoader} to use to look for {@link OMFactory}
+     *  implementations.
+     *
+     * @return The appropriate found implementation of {@link OMFactory}.
      */
     public static OMFactory getOMFactory(ClassLoader classLoader) {
         return FactoryFinder.findOMFactory(classLoader);
     }
 
     /**
-     * This will pick up the default factory implementation from the classpath
+     * This will pick up the default {@link SOAPFactory} implementation from the classpath
+     * for SOAP 1.1 messages.
      *
-     * @return
+     * @return The default implementation of {@link SOAPFactory}.
+     *
+     * @see #getSOAP11Factory(ClassLoader)
      */
     public static SOAPFactory getSOAP11Factory() {
         return FactoryFinder.findSOAP11Factory(null);
@@ -62,33 +72,46 @@
      * If user needs to provide his own factory implementation, here provide the
      * Class Loader for that.
      *
-     * @param classLoader
-     * @return
+     * @param classLoader The {@link ClassLoader} to use while looking for the {@link SOAPFactory}
+     *  implementation.
+     *
+     * @return An appropriate {@link SOAPFactory} implementation.
+     * @see #getSOAP11Factory()
      */
     public static SOAPFactory getSOAP11Factory(ClassLoader classLoader) {
         return FactoryFinder.findSOAP11Factory(classLoader);
     }
 
     /**
-     * This will pick up the default factory implementation from the classpath
+     * This will pick up the default {@link SOAPFactory} implementation from the classpath
+     * for SOAP 1.2 messages.
      *
-     * @return
+     * @return An appropriate {@link SOAPFactory} implementation.
+     *
+     * @see #getSOAP12Factory(ClassLoader)
      */
     public static SOAPFactory getSOAP12Factory() {
         return FactoryFinder.findSOAP12Factory(null);
     }
 
     /**
-     * If user needs to provide his own factory implementation, here provide the
-     * Class Loader for that.
+     * Look up a {@link SOAPFactory} with a given {@link ClassLoader} for SOAP 1.2.
      *
-     * @param classLoader
-     * @return
+     * @param classLoader   The ClassLoader to use while looking for the implementation class.
+     *
+     * @return An appropriate {@link SOAPFactory} implementation.
+     *
+     * @see #getSOAP12Factory()
      */
     public static SOAPFactory getSOAP12Factory(ClassLoader classLoader) {
         return FactoryFinder.findSOAP12Factory(classLoader);
     }
 
+    /**
+     * Get the default factory for manufacturing the pieces of SOAP messages.
+     *
+     * @return An appropriate {@link SOAPFactory} implementation.
+     */
     public static SOAPFactory getDefaultSOAPFactory() {
         return new SOAPLinkedListImplFactory();
     }
Index: src/org/apache/axis2/om/OMNamespace.java
===================================================================
--- src/org/apache/axis2/om/OMNamespace.java	(revision 292819)
+++ src/org/apache/axis2/om/OMNamespace.java	(working copy)
@@ -17,29 +17,31 @@
 package org.apache.axis2.om;
 
 /**
- * Interface OMNamespace
+ * Represents the namespace prefix association defined by namespaces.
  */
 public interface OMNamespace {
+
     /**
-     * Method equals
+     * An additional "equals" method that takes the pieces of a namespace declaration.
      *
-     * @param uri
-     * @param prefix
-     * @return
+     * @param uri   The URI to compare.
+     * @param prefix    The prefix to compare.  May be <code>null</code>
+     *
+     * @return <code>true</code> iff the uri and prefix match.
      */
     public boolean equals(String uri, String prefix);
 
     /**
-     * Method getPrefix
+     * Retrieve the prefix associated with the namespace.
      *
-     * @return
+     * @return The prefix of the namespace.
      */
     public String getPrefix();
 
     /**
-     * Method getName
+     * Get the namespace URI associated with the namespace.
      *
-     * @return
+     * @return The namespace URI.
      */
     public String getName();
 }
Index: src/org/apache/axis2/om/OMComment.java
===================================================================
--- src/org/apache/axis2/om/OMComment.java	(revision 292819)
+++ src/org/apache/axis2/om/OMComment.java	(working copy)
@@ -17,18 +17,20 @@
 package org.apache.axis2.om;
 
 /**
- * Interface OMComment
+ * Represents comments from the XML Infoset.
  */
 public interface OMComment extends OMNode {
     /**
      * Returns the value of this comment as defined by XPath 1.0.
-     * @return string
+     *
+     * @return The comment value.
      */
     public String getValue();
 
     /**
      * Sets the content of this comment to the specified string.
-     * @param text
+     *
+     * @param text  The new text for the comment.
      */
     public void setValue(String text);
 }
