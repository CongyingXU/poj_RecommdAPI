Index: modules/json/test/org/apache/axis2/json/JSONBadgerfishIntegrationTest.java
===================================================================
--- modules/json/test/org/apache/axis2/json/JSONBadgerfishIntegrationTest.java	(revision 500951)
+++ modules/json/test/org/apache/axis2/json/JSONBadgerfishIntegrationTest.java	(working copy)
@@ -21,9 +21,8 @@
 
 public class JSONBadgerfishIntegrationTest extends JSONIntegrationTest {
 
-    protected void setMessageType(Options options) {
-        options.setProperty(Constants.Configuration.MESSAGE_TYPE,
-                "application/json/badgerfish");
+    protected String getMessageType() {
+        return "application/json/badgerfish";
     }
 
 }
Index: modules/json/test/org/apache/axis2/json/JSONIntegrationTest.java
===================================================================
--- modules/json/test/org/apache/axis2/json/JSONIntegrationTest.java	(revision 500951)
+++ modules/json/test/org/apache/axis2/json/JSONIntegrationTest.java	(working copy)
@@ -35,73 +35,76 @@
 
 public class JSONIntegrationTest extends TestCase implements JSONTestConstants {
 
-	private AxisService service;
+    private AxisService service;
 
-	private String expectedString;
+    private String expectedString;
 
-	private SimpleHTTPServer server;
-	
-	private ConfigurationContext configurationContext;
+    private SimpleHTTPServer server;
 
-	public JSONIntegrationTest() {
-	}
+    private ConfigurationContext configurationContext;
 
-	protected void setUp() throws Exception {
+    public JSONIntegrationTest() {
+    }
 
-		File configFile = new File("test-resources/axis2.xml");
-		configurationContext = ConfigurationContextFactory
-				.createConfigurationContextFromFileSystem(null, configFile
-						.getAbsolutePath());
-		server = new SimpleHTTPServer(configurationContext, TESTING_PORT);
-		try {
-			server.start();
-		} finally {
+    protected void setUp() throws Exception {
 
-		}
-		service = Utils.createSimpleService(serviceName, org.apache.axis2.json.Echo.class.getName(),
-				operationName);
-		server.getConfigurationContext().getAxisConfiguration().addService(
-				service);
-	}
+        File configFile = new File("test-resources/axis2.xml");
+        configurationContext = ConfigurationContextFactory
+                .createConfigurationContextFromFileSystem(null, configFile
+                        .getAbsolutePath());
+        server = new SimpleHTTPServer(configurationContext, TESTING_PORT);
+        try {
+            server.start();
+        } finally {
 
-	protected void tearDown() throws Exception {
-		server.stop();
-	}
+        }
+        service = Utils.createSimpleService(serviceName, org.apache.axis2.json.Echo.class.getName(),
+                operationName);
+        server.getConfigurationContext().getAxisConfiguration().addService(
+                service);
+    }
 
-	protected OMElement createEnvelope() throws Exception {
-		OMFactory fac = OMAbstractFactory.getOMFactory();
-		OMNamespace omNs = fac.createOMNamespace("", "");
-		OMElement rpcWrapEle = fac.createOMElement("echoOM", omNs);
-		OMElement data = fac.createOMElement("data", omNs);
-		expectedString = "my json string";
-		data.setText(expectedString);
-		rpcWrapEle.addChild(data);
-		return rpcWrapEle;
-	}
+    protected void tearDown() throws Exception {
+        server.stop();
+    }
 
-	public void testEchoOMWithJSON() throws Exception {
-			OMElement payload = createEnvelope();
-			Options options = new Options();
-			options.setTo(targetEPR);
-			setMessageType(options);
-			options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-	
-			ServiceClient sender = new ServiceClient(configurationContext, null);
-			options.setAction(null);
-			sender.setOptions(options);
-			options.setTo(targetEPR);
-			OMElement result = sender.sendReceive(payload);
-			OMElement ele = (OMElement) result.getFirstOMChild();
-			compareWithCreatedOMText(ele.getText());
-	}
-	
-	protected void setMessageType(Options options) {
-		options.setProperty(Constants.Configuration.MESSAGE_TYPE,
-		"application/json");
-	}
-	
-	protected void compareWithCreatedOMText(String response) {
-		TestCase.assertEquals(response, expectedString);
-	}
+    protected OMElement createEnvelope() throws Exception {
+        OMFactory fac = OMAbstractFactory.getOMFactory();
+        OMNamespace omNs = fac.createOMNamespace("", "");
+        OMElement rpcWrapEle = fac.createOMElement("echoOM", omNs);
+        OMElement data = fac.createOMElement("data", omNs);
+        OMElement data1 = fac.createOMElement("data", omNs);
+        expectedString = "my json string";
+        String expectedString1 = "my second json string";
+        data.setText(expectedString);
+        data1.setText(expectedString1);
+        rpcWrapEle.addChild(data);
+        rpcWrapEle.addChild(data1);
+        return rpcWrapEle;
+    }
 
+    public void testEchoOMWithJSON() throws Exception {
+        OMElement payload = createEnvelope();
+        Options options = new Options();
+        options.setTo(targetEPR);
+        options.setProperty(Constants.Configuration.MESSAGE_TYPE, getMessageType());
+        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+
+        ServiceClient sender = new ServiceClient(configurationContext, null);
+        options.setAction(null);
+        sender.setOptions(options);
+        options.setTo(targetEPR);
+        OMElement result = sender.sendReceive(payload);
+        OMElement ele = (OMElement) result.getFirstOMChild();
+        compareWithCreatedOMText(ele.getText());
+    }
+
+    protected String getMessageType() {
+        return "application/json";
+    }
+
+    protected void compareWithCreatedOMText(String response) {
+        TestCase.assertEquals(response, expectedString);
+    }
+
 }
\ No newline at end of file
Index: modules/json/src/org/apache/axis2/json/JSONBadgerfishMessageFormatter.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONBadgerfishMessageFormatter.java	(revision 0)
+++ modules/json/src/org/apache/axis2/json/JSONBadgerfishMessageFormatter.java	(revision 0)
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.axis2.json;
+
+import org.codehaus.jettison.badgerfish.BadgerFishXMLStreamWriter;
+
+import javax.xml.stream.XMLStreamWriter;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+
+public class JSONBadgerfishMessageFormatter extends JSONMessageFormatter{
+
+    protected XMLStreamWriter getJSONWriter(OutputStream outStream){
+        return new BadgerFishXMLStreamWriter(new OutputStreamWriter(outStream));
+    }
+
+}
Index: modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java	(revision 500951)
+++ modules/json/src/org/apache/axis2/json/JSONMessageFormatter.java	(working copy)
@@ -46,11 +46,12 @@
         if (msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE) != null) {
             contentType = (String) msgCtxt.getProperty(Constants.Configuration.CONTENT_TYPE);
         } else {
-            if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
-                contentType = JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH;
-            } else {
-                contentType = JScriptConstants.MEDIA_TYPE_APPLICATION_JSON;
-            }
+            contentType = (String) msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE);
+//            if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
+//                contentType = JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH;
+//            } else {
+//                contentType = JScriptConstants.MEDIA_TYPE_APPLICATION_JSON;
+//            }
 
         }
 
@@ -64,15 +65,16 @@
         OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
         try {
             ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-            XMLStreamWriter jsonWriter;
+            XMLStreamWriter jsonWriter = getJSONWriter(bytesOut);
 
 //            if (msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION) != null && msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION).equals(JScriptConstants.BADGERFISH)) {
-            if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
-                jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(bytesOut));
-            } else {
-                MappedNamespaceConvention mnc = new MappedNamespaceConvention();
-                jsonWriter = new MappedXMLStreamWriter(mnc, new OutputStreamWriter(bytesOut));
-            }
+//            if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH))
+//            {
+//                jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(bytesOut));
+//            } else {
+//                MappedNamespaceConvention mnc = new MappedNamespaceConvention();
+//                jsonWriter = new MappedXMLStreamWriter(mnc, new OutputStreamWriter(bytesOut));
+//            }
 
             element.serializeAndConsume(jsonWriter);
             jsonWriter.writeEndDocument();
@@ -90,19 +92,24 @@
         return null;
     }
 
+    protected XMLStreamWriter getJSONWriter(OutputStream outStream) {
+        MappedNamespaceConvention mnc = new MappedNamespaceConvention();
+        return new MappedXMLStreamWriter(mnc, new OutputStreamWriter(outStream));
+    }
+
     public void writeTo(MessageContext msgCtxt, OMOutputFormat format,
                         OutputStream out, boolean preserve) throws AxisFault {
         OMElement element = msgCtxt.getEnvelope().getBody().getFirstElement();
+        XMLStreamWriter jsonWriter = getJSONWriter(out);
 
-        XMLStreamWriter jsonWriter;
-
 //        if (msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION) != null && msgCtxt.getProperty(JScriptConstants.JSON_CONVENTION).equals(JScriptConstants.BADGERFISH)) {
-        if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH)) {
-            jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(out));
-        } else {
-            MappedNamespaceConvention mnc = new MappedNamespaceConvention();
-            jsonWriter = new MappedXMLStreamWriter(mnc, new OutputStreamWriter(out));
-        }
+//        if (msgCtxt.getProperty(Constants.Configuration.MESSAGE_TYPE).equals(JScriptConstants.MEDIA_TYPE_APPLICATION_JSON_BADGERFISH))
+//        {
+//            jsonWriter = new BadgerFishXMLStreamWriter(new OutputStreamWriter(out));
+//        } else {
+//            MappedNamespaceConvention mnc = new MappedNamespaceConvention();
+//            jsonWriter = new MappedXMLStreamWriter(mnc, new OutputStreamWriter(out));
+//        }
 
         try {
             element.serializeAndConsume(jsonWriter);
Index: modules/json/src/org/apache/axis2/json/JSONOMBuilder.java
===================================================================
--- modules/json/src/org/apache/axis2/json/JSONOMBuilder.java	(revision 500951)
+++ modules/json/src/org/apache/axis2/json/JSONOMBuilder.java	(working copy)
@@ -75,7 +75,8 @@
 	}
 
 	public String getMessageType() {
-		return JScriptConstants.MEDIA_TYPE_APPLICATION_JSON;
+//		return JScriptConstants.MEDIA_TYPE_APPLICATION_JSON;
+		return null;
 	}
 
 }
Index: modules/json/src/org/apache/axis2/JScriptConstants.java
===================================================================
--- modules/json/src/org/apache/axis2/JScriptConstants.java	(revision 500951)
+++ modules/json/src/org/apache/axis2/JScriptConstants.java	(working copy)
@@ -16,10 +16,19 @@
  */
 
 public class JScriptConstants {
-	public static final String MEDIA_TYPE_APPLICATION_JSON = "application/json";
+//	public static final String MEDIA_TYPE_APPLICATION_JSON = "application/json";
+//
+//    public static final String MEDIA_TYPE_APPLICATION_JSON_BADGERFISH = "application/json/badgerfish";
 
-    public static final String MEDIA_TYPE_APPLICATION_JSON_BADGERFISH = "application/json/badgerfish";
+//    public static final String JSON_CONVENTION = "convention";
 
+//    public static final String BADGERFISH = "badgerfish";
+
+//    public static final String MAPPED = "mapped";
+    
+
+//    public static final String MEDIA_TYPE_APPLICATION_JSON_BADGERFISH = "application/json/badgerfish";
+
 //    public static final String JSON_CONVENTION = "convention";
 //
 //    public static final String BADGERFISH = "badgerfish";
Index: modules/json/test-resources/axis2.xml
===================================================================
--- modules/json/test-resources/axis2.xml	(revision 500951)
+++ modules/json/test-resources/axis2.xml	(working copy)
@@ -115,7 +115,7 @@
         <messageFormatter contentType="application/json"
                          class="org.apache.axis2.json.JSONMessageFormatter"/>
         <messageFormatter contentType="application/json/badgerfish"
-                         class="org.apache.axis2.json.JSONMessageFormatter"/>
+                         class="org.apache.axis2.json.JSONBadgerfishMessageFormatter"/>
         <messageFormatter contentType="text/javascript"
                          class="org.apache.axis2.json.JSONMessageFormatter"/>
     </messageFormatters>
Index: etc/project.properties
===================================================================
--- etc/project.properties	(revision 500951)
+++ etc/project.properties	(working copy)
@@ -68,6 +68,7 @@
 modules/rahas/project.xml,\
 modules/secpolicy/project.xml,\
 modules/mtompolicy/project.xml,\
+modules/json/project.xml,\
 ${optional.includes}
 
 #maven.multiproject.excludes=modules/tool/project.xml
