Index: modules/kernel/src/org/apache/axis2/description/AxisService.java
===================================================================
--- modules/kernel/src/org/apache/axis2/description/AxisService.java	(revision 749192)
+++ modules/kernel/src/org/apache/axis2/description/AxisService.java	(working copy)
@@ -72,6 +72,9 @@
 import java.util.*;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import com.sun.org.apache.xml.internal.serialize.OutputFormat;
+import com.sun.org.apache.xml.internal.serialize.XMLSerializer;
+
 /**
  * Class AxisService
  */
@@ -2094,20 +2097,48 @@
 	public static AxisService createClientSideAxisService(URL wsdlURL,
 			QName wsdlServiceName, String portName, Options options)
 			throws AxisFault {
-		try {
-			InputStream in = wsdlURL.openConnection().getInputStream();
-			Document doc = XMLUtils.newDocument(in);
-			WSDLReader reader = WSDLFactory.newInstance().newWSDLReader();
-			reader.setFeature("javax.wsdl.importDocuments", true);
-			Definition wsdlDefinition = reader.readWSDL(getBaseURI(wsdlURL
-					.toString()), doc);
-			if (wsdlDefinition != null) {
-				wsdlDefinition.setDocumentBaseURI(getDocumentURI(wsdlURL
-						.toString()));
-			}
-			return createClientSideAxisService(wsdlDefinition, wsdlServiceName,
-					portName, options);
-		} catch (IOException e) {
+        try {
+            InputStream in = wsdlURL.openConnection().getInputStream();
+            Document doc = XMLUtils.newDocument(in);
+            String documentNS = doc.getFirstChild().getNamespaceURI();
+            if (documentNS != null) {
+                if (Constants.NS_URI_WSDL11.equals(documentNS)) {
+
+                    WSDLReader reader = WSDLFactory.newInstance().newWSDLReader();
+                    reader.setFeature("javax.wsdl.importDocuments", true);
+                    Definition wsdlDefinition = reader.readWSDL(getBaseURI(wsdlURL
+                            .toString()), doc);
+                    if (wsdlDefinition != null) {
+                        wsdlDefinition.setDocumentBaseURI(getDocumentURI(wsdlURL
+                                .toString()));
+                    }
+
+                    return createClientSideAxisService(wsdlDefinition, wsdlServiceName,
+                                                       portName, options);
+
+                } else if (Constants.NS_URI_WSDL20.equals(documentNS)) {
+
+                    ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+                    OutputFormat format = new OutputFormat(doc);
+                    XMLSerializer output = new XMLSerializer(outStream, format);
+                    output.serialize(doc);
+                    InputStream inStream = new ByteArrayInputStream(outStream.toByteArray());
+
+                    return createClientSideAxisService(inStream, wsdlServiceName, portName,
+                                                       options);
+
+                } else {
+
+                    throw new AxisFault("Cannot Identify the namespace : Invalid WSDL");
+                }
+
+            } else {
+
+                throw new AxisFault("No namespace found : Invalid WSDL");
+
+            }
+
+        } catch (IOException e) {
 			log.error(e.getMessage(), e);
 			throw AxisFault.makeFault(e);
 		} catch (ParserConfigurationException e) {
@@ -2163,7 +2194,39 @@
 		return axisService;
 	}
 
-	/**
+    /**
+     * returns a axisService given a input Stream of WSDL2.0 document.
+     * @param input
+     * @param wsdlServiceName
+     * @param endPoint
+     * @param options
+     * @return
+     * @throws AxisFault
+     */
+     public static AxisService createClientSideAxisService(
+			InputStream input, QName wsdlServiceName, String endPoint,
+			Options options) throws AxisFault {
+
+         
+         WSDL20ToAxisServiceBuilder serviceBuilder=new WSDL20ToAxisServiceBuilder(input,wsdlServiceName,endPoint);
+         serviceBuilder.setServerSide(false);
+         AxisService axisService=serviceBuilder.populateService();
+         AxisEndpoint axisEndpoint=(AxisEndpoint)axisService.getEndpoint(axisService.getEndpointName());
+         
+         if(axisEndpoint != null){
+             options.setTo(new EndpointReference(axisEndpoint.getEndpointURL()));
+             options.setSoapVersionURI((String) axisEndpoint.getBinding()
+					.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION));
+         }
+
+       return axisService;
+     }
+
+
+
+
+
+    /**
 	 * To create an AxisService using given service impl class name first
 	 * generate schema corresponding to the given java class , next for each
 	 * methods AxisOperation will be created. If the method is in-out it will
