Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties	(revision 430114)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/i18n/resource.properties	(working copy)
@@ -32,7 +32,7 @@
 createDispatchFail1=Dispatch creation failed.  Port {0} was not found.  Make sure the port has been added to the Service.
 createDispatchFail2=Dispatch creation failed.  Could not find PortData for Port {0}.
 addPortDup=An attempt was made to add port {0} to the ServiceDelegate. The port already exists.
-addPortErr0=Only SOAP11HTTP_BINDING supported at this time.  Port {0} is cannot be added to the ServiceDelegate.
+addPortErr0=Only SOAP11HTTP_BINDING and SOAP12HTTP_BINDING are supported at this time.  Port {0} is cannot be added to the ServiceDelegate.
 addPortErr1=An attempt was made to add port {0} with invalid endpoint address {1} to the ServiceDelegate. This is not allowed.
 addPortErr2=An attempt was made to add a port with no name to the ServiceDelegate. This is not allowed.
 serviceDelegateConstruct0=An attempt was made to construct the ServiceDelegate with invalid service name, {0}.
@@ -92,3 +92,4 @@
 JAXBWrapperErr5=Internal Assertion Error. Number of child names does not match the number of bean properties in JAXB class {0}.
 JAXBWrapperErr6=Internal Assertion Error. JAXB object {0} does not have a bean property named {1}.
 JAXBSourceNamespaceErr=The DOMSource must be Namespace Aware.
+protoNotFound00=An associated Protocol was not found for the binding {0}.
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/ProtocolUtil.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/ProtocolUtil.java	(revision 0)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/message/util/ProtocolUtil.java	(revision 0)
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.jaxws.message.util;
+
+import javax.xml.ws.soap.SOAPBinding;
+
+import org.apache.axis2.jaxws.ExceptionFactory;
+import org.apache.axis2.jaxws.i18n.Messages;
+import org.apache.axis2.jaxws.message.MessageException;
+import org.apache.axis2.jaxws.message.Protocol;
+
+/**
+ * This class contains some common utilities needed for working with the 
+ * Protocol objects in the JAX-WS Message model.  
+ * 
+ */
+public class ProtocolUtil {
+    
+    /**
+     * Return the right value for the Protocol based on the binding
+     * URL that was passed in.
+     * 
+     * @param url
+     * @return
+     */
+    public static Protocol getProtocolForBinding(String url) throws MessageException {
+        //TODO: Add support for more URLs as needed.
+        if (url.equals(SOAPBinding.SOAP11HTTP_BINDING)) {
+            return Protocol.soap11;
+        }
+        else if (url.equals(SOAPBinding.SOAP12HTTP_BINDING)) {
+            return Protocol.soap12;
+        }
+        else {
+            throw ExceptionFactory.makeMessageException(Messages.getMessage("protoNotFound00", url));
+        }
+    }
+}
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(revision 430114)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java	(working copy)
@@ -111,7 +111,8 @@
     		throw ExceptionFactory.makeWebServiceException(Messages.getMessage("addPortErr1", portName.toString(), "null"));
     	}
     	
-    	if(bindingId!=null && !bindingId.equals(SOAPBinding.SOAP11HTTP_BINDING)){
+    	if(bindingId!=null && !(bindingId.equals(SOAPBinding.SOAP11HTTP_BINDING) ||
+                bindingId.equals(SOAPBinding.SOAP12HTTP_BINDING))){
     		// TODO Is this the correct exception. Shouldn't this be a WebServiceException ?
     		throw new UnsupportedOperationException(Messages.getMessage("addPortErr0", portName.toString()));
     	}
@@ -119,6 +120,7 @@
         if (bindingId == null) {
             bindingId = DEFAULT_BINDING_ID;
         }
+        
     	if(!ports.containsKey(portName)){	
     		PortData port = new PortInfoImpl(serviceQname, portName, bindingId, endpointAddress);
     		ports.put(portName, port);
@@ -147,18 +149,14 @@
     	}
     	
         PortData portData = (PortData) ports.get(qname);
-    	
         if(portData == null){
         	throw ExceptionFactory.makeWebServiceException(Messages.getMessage("createDispatchFail2", qname.toString())); 
     	}
     	
-    	addBinding(portData.getBindingID());
+    	// FIXME: This call needs to be revisited.  Not really sure what we're trying to do here. 
+        addBinding(portData.getBindingID());
     	
-    	//JAXWSClientContext<T> clientContext = createClientContext(portData, clazz, mode);
-        
         XMLDispatch<T> dispatch = new XMLDispatch<T>(portData);
-        
-        
         if (mode != null) {
             dispatch.setMode(mode);
         }
@@ -166,8 +164,6 @@
             dispatch.setMode(Service.Mode.PAYLOAD);
         }
         
-        //XMLDispatch<T> dispatch = mediator.createXMLDispatch(clientContext);
-
         if (serviceClient == null)
             serviceClient = getServiceClient();
         
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/ProviderDispatcher.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/ProviderDispatcher.java	(revision 430114)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/ProviderDispatcher.java	(working copy)
@@ -63,6 +63,7 @@
 	private Class providerType = null;
     private Provider providerInstance = null;
     private Message message = null;
+    private Protocol messageProtocol;
 
 	/**
 	 * Constructor
@@ -92,6 +93,10 @@
         Object requestParamValue = null;
         Message message = mc.getMessage();
         if (message != null) {
+            // Save off the protocol info so we can use it when creating
+            // the response message.
+            messageProtocol = message.getProtocol();
+            
             BlockFactory factory = createBlockFactory(providerType);
             Block block = message.getBodyBlock(0, null, factory);
             requestParamValue = block.getBusinessObject(true);
@@ -176,7 +181,7 @@
         MessageFactory msgFactory = (MessageFactory) FactoryRegistry.getFactory(
                 MessageFactory.class);
         
-        Message message = msgFactory.create(Protocol.soap11);
+        Message message = msgFactory.create(messageProtocol);
             
         // Since we know this isn't going to be a JAX-B block, it's ok if
         // the context is null.  The QName can be null for now as well.
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatch.java	(revision 430114)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/XMLDispatch.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
 import org.apache.axis2.jaxws.message.factory.SourceBlockFactory;
 import org.apache.axis2.jaxws.message.factory.XMLStringBlockFactory;
+import org.apache.axis2.jaxws.message.util.ProtocolUtil;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -43,10 +44,6 @@
     private Class type;
     private Class blockFactoryType;
     
-    //public XMLDispatch() {
-    //    super();
-    //}
-    
     public XMLDispatch(PortData pd) {
         super(pd);
     }
@@ -90,9 +87,10 @@
                 MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
                 block = factory.createFrom(value, null, null);
                 
-                // FIXME: The protocol should actually come from the binding information included in
-                // either the WSDL or an annotation.
-                message = mf.create(Protocol.soap11);
+                // The protocol of the Message that is created should be based
+                // on the binding information available.
+                Protocol proto = ProtocolUtil.getProtocolForBinding(port.getBindingID());               
+                message = mf.create(proto);
                 message.setBodyBlock(0, block);
             } catch (XMLStreamException e) {
                 e.printStackTrace();
@@ -102,8 +100,8 @@
         }
         else if (mode.equals(Mode.MESSAGE)) {
             try {
-                QName soapEnvQname = new QName("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
-                block = factory.createFrom(value, null, soapEnvQname);
+                //QName soapEnvQname = new QName("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
+                block = factory.createFrom(value, null, null);
                 
                 MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
                 message = mf.createFrom(block.getXMLStreamReader(true));
Index: C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/JAXBDispatch.java
===================================================================
--- C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/JAXBDispatch.java	(revision 430114)
+++ C:/work/apps/eclipse/workspace/axis2/modules/jaxws/src/org/apache/axis2/jaxws/client/JAXBDispatch.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.axis2.jaxws.message.Protocol;
 import org.apache.axis2.jaxws.message.factory.JAXBBlockFactory;
 import org.apache.axis2.jaxws.message.factory.MessageFactory;
+import org.apache.axis2.jaxws.message.util.ProtocolUtil;
 import org.apache.axis2.jaxws.registry.FactoryRegistry;
 
 public class JAXBDispatch<T> extends BaseDispatch<T> {
@@ -59,15 +60,15 @@
     public Message createMessageFromValue(Object value) {
         Message message = null;
         try {
-            MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
-
-            // FIXME: The protocol should actually come from the binding information included in
-            // either the WSDL or an annotation.
-            message = mf.create(Protocol.soap11);
-            
             JAXBBlockFactory factory = (JAXBBlockFactory) FactoryRegistry.getFactory(JAXBBlockFactory.class);
             Block block = factory.createFrom(value, jaxbContext, null);
             
+            // The protocol of the Message that is created should be based
+            // on the binding information available.
+            Protocol proto = ProtocolUtil.getProtocolForBinding(port.getBindingID());
+            
+            MessageFactory mf = (MessageFactory) FactoryRegistry.getFactory(MessageFactory.class);
+            message = mf.create(proto);
             message.setBodyBlock(0, block);
         } catch (Exception e) {
             throw ExceptionFactory.makeWebServiceException(e);
