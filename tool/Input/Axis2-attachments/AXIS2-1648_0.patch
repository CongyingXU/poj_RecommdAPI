Index: rest-ws.html
===================================================================
--- rest-ws.html	(revision 472382)
+++ rest-ws.html	(working copy)
@@ -1,13 +1,15 @@
 <html>
+
 <head>
   <meta http-equiv="content-type" content="">
   <title>RESTful Web Services Support</title>
 </head>
 
 <body lang="en">
+
 <h1>RESTful Web Services Support</h1>
 
-<p>This document presents introduction on REST and REST with HTTP POST &amp;
+<p>This document presents an introduction on REST and REST with HTTP POST &amp;
 GET.</p>
 
 <h2>Content</h2>
@@ -20,12 +22,12 @@
   </li>
   <li><a href="#rest_with_get">Access a REST Web Service via HTTP GET</a></li>
 </ul>
+
 <a name="intro"></a>
-
 <h2>Introduction</h2>
 
 <p>REST (Representational State Transfer) provides access to resources
-through the two methods GET and POST. REST Web services are a reduced subset
+through the two methods; GET and POST. REST Web services are a reduced subset
 of the usual Web service stack.</p>
 
 <p>The Axis2 REST implementation assumes the following properties:</p>
@@ -41,15 +43,15 @@
 </ol>
 
 <p>Axis2 can be configured as a REST Container and can be used to send and
-receive RESTful Web services requests and responses. REST Web services can be
-accessed in two ways, i.e. using HTTP GET and POST.</p>
+receive RESTful Web service requests and responses. REST Web services can be
+accessed in two ways, i.e., using HTTP GET and POST.</p>
+
 <a name="rest_with_post"></a>
-
 <h2>Doing REST Web Services with HTTP POST</h2>
 
-<p>Axis will acts as both a REST endpoint and SOAP endpoint. When a Message
+<p>Axis will act as both a REST endpoint and a SOAP endpoint. When a Message
 is received, if the content type is text/xml and if the SOAP Action Headers
-are missing, then the Message is treated as a RESTful Message. Else it is
+are missing, then the Message is treated as a RESTful Message, if not it is
 treated as a usual SOAP Message.</p>
 
 <p>On sending a message out, the fact that the message is RESTful or not, can
@@ -60,8 +62,8 @@
 Options options = new Options();
 options.setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);
 ...</pre>
+
 <a name="sample"></a>
-
 <h3>Sample REST - HTTP POST Client</h3>
 
 <p>There is an example named, userguide.clients.RESTClient.java which
@@ -109,14 +111,15 @@
         return method;
     }
 }</pre>
-</source><a name="rest_with_get"></a>
+</source>
 
+<a name="rest_with_get"></a>
 <h2>Access a REST Web Service via HTTP GET</h2>
 
-<p>Axis2 allow users to access Web services that have simple type parameters
-via HTTP GET. For example the following URL requests the Version Service via
+<p>Axis2 allows users to access Web services that have simple type parameters
+via HTTP GET. For example, the following URL requests the Version Service via
 HTTP GET. But the Web service arriving via GET assumes REST. Other parameters
-are converted in to XML and put in to the SOAP Body.</p>
+are converted into XML and put into the SOAP Body.</p>
 <source><pre>http://127.0.0.1:8080/axis2/rest/version/getVersion</pre>
 </source>
 <p>Result can be shown in the browser as follows:</p>
@@ -134,16 +137,19 @@
    &lt;/soapenv:Envelope&gt;
     </pre>
 </source>
+
 <h2>Resources</h2>
 
-<p>How I Explained REST to My Wife, By Ryan Tomayko -<a
+<p>How I Explained REST to My Wife, By Ryan Tomayko- <a
 href="http://naeblis.cx/articles/2004/12/12/rest-to-my-wife">http://naeblis.cx/articles/2004/12/12/rest-to-my-wife</a></p>
 
-<p>Building Web Services the REST Way, By Roger L. Costello -<a
+<p>Building Web Services the REST Way, By Roger L. Costello- <a
 href="http://www.xfront.com/REST-Web-Services.html">
 http://www.xfront.com/REST-Web-Services.html</a></p>
 
 <p>Resource-oriented vs. activity-oriented Web services, By James Snell- <a
 href="http://www-128.ibm.com/developerworks/webservices/library/ws-restvsoap/">http://www-128.ibm.com/developerworks/webservices/library/ws-restvsoap/</a></p>
+
 </body>
+
 </html>
