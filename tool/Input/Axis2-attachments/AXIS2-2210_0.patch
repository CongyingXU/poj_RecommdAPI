Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java	(revision 508904)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionImpl.java	(working copy)
@@ -16,6 +16,8 @@
  */
 package org.apache.axis2.jaxws.runtime.description.injection.impl;
 
+import java.lang.reflect.Method;
+
 import org.apache.axis2.jaxws.description.ServiceDescription;
 import org.apache.axis2.jaxws.runtime.description.injection.ResourceInjectionServiceRuntimeDescription;
 
@@ -25,6 +27,8 @@
     private ServiceDescription serviceDesc;
     private String key; 
     private boolean _hasResourceAnnotation;
+    private Method _postConstructMethod;
+    private Method _preDestroyMethod;
     
     protected ResourceInjectionServiceRuntimeDescriptionImpl(String key,
                 ServiceDescription serviceDesc) {
@@ -35,7 +39,15 @@
     public boolean hasResourceAnnotation() {
         return _hasResourceAnnotation;
     }
+    
+    public Method getPostConstructMethod() {
+        return _postConstructMethod;
+    }
 
+    public Method getPreDestroyMethod() {
+        return _preDestroyMethod;
+    }
+
     public ServiceDescription getServiceDescription() {
         return serviceDesc;
     }
@@ -51,6 +63,14 @@
         _hasResourceAnnotation = value;
     }
     
+    void setPostConstructMethod(Method method) {
+        _postConstructMethod = method;
+    }
+    
+    void setPreDestroyMethod(Method method) {
+        _preDestroyMethod = method;
+    }
+    
     public String toString() {
         final String newline = "\n";
         StringBuffer string = new StringBuffer();
@@ -59,7 +79,14 @@
         string.append("  ResourceInjectionServiceRuntime:" + getKey());
         string.append(newline);
         string.append("    @Resource Annotation = " + hasResourceAnnotation());
-        
+        string.append(newline);
+        string.append("    PostConstruct Method = " + getPostConstructMethod());
+        string.append(newline);
+        string.append("    PreDestroy Method    = " + getPreDestroyMethod());
+
         return string.toString();
     }
+
+    
+   
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java	(revision 508904)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/impl/ResourceInjectionServiceRuntimeDescriptionBuilder.java	(working copy)
@@ -22,6 +22,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import javax.annotation.PostConstruct;
+import javax.annotation.PreDestroy;
 import javax.annotation.Resource;
 
 import org.apache.axis2.java.security.AccessController;
@@ -45,8 +47,16 @@
                 Class implClass) {
         ResourceInjectionServiceRuntimeDescriptionImpl desc = 
             new ResourceInjectionServiceRuntimeDescriptionImpl(getKey(implClass), serviceDesc);
+        
         boolean value = hasResourceAnnotation(implClass);
         desc.setResourceAnnotation(value);
+        
+        Method method = getPostConstructMethod(implClass);
+        desc.setPostConstructMethod(method);
+        
+        method = getPostConstructMethod(implClass);
+        desc.setPreDestroyMethod(method);
+        
         return desc;
     }
     
@@ -76,6 +86,26 @@
         
     }
     
+    static private Method getPostConstructMethod(Class implClass) {
+        List<Method> methods = getMethods(implClass);
+        for (Method method:methods) {
+            if (method.getAnnotation(PostConstruct.class) != null) {
+                return method;
+            }
+        }
+        return null;
+    }
+    
+    static private Method getPreDestoryMethod(Class implClass) {
+        List<Method> methods = getMethods(implClass);
+        for (Method method:methods) {
+            if (method.getAnnotation(PreDestroy.class) != null) {
+                return method;
+            }
+        }
+        return null;
+    }
+    
     /**
      * Gets all of the fields in this class and the super classes
      * @param beanClass
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescription.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescription.java	(revision 508904)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/injection/ResourceInjectionServiceRuntimeDescription.java	(working copy)
@@ -16,6 +16,8 @@
  */
 package org.apache.axis2.jaxws.runtime.description.injection;
 
+import java.lang.reflect.Method;
+
 import org.apache.axis2.jaxws.description.ServiceRuntimeDescription;
 
 
@@ -28,4 +30,14 @@
     * Implementation class
     */
     boolean hasResourceAnnotation();
+    
+    /**
+     * @return Method with @PostConstruct or null
+     */
+    Method getPostConstructMethod();
+    
+    /**
+     * @return Method with @PreDestroy or null
+     */
+    Method getPreDestroyMethod();
 }
Index: C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java
===================================================================
--- C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java	(revision 508907)
+++ C:/workspace/live/axis2/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java	(working copy)
@@ -51,6 +51,7 @@
 	private static final Log log = LogFactory.getLog(EndpointLifecycleManagerImpl.class);
 	private Object endpointInstance = null;
 	private Class endpointClazz = null;
+    
 	public EndpointLifecycleManagerImpl(Object endpointInstance) {
 		super();
 		this.endpointInstance = endpointInstance;
@@ -73,6 +74,9 @@
         javax.xml.ws.handler.MessageContext soapMessageContext = createSOAPMessageContext(mc);
         Object serviceimpl = serviceContext.getProperty(ServiceContext.SERVICE_OBJECT);
         if (serviceimpl != null) {
+            this.endpointInstance = serviceimpl;
+            this.endpointClazz = serviceImplClass;
+            
         	if (log.isDebugEnabled()) {
                 log.debug("Service Instance found in the service context, reusing the instance");
             }
@@ -88,6 +92,17 @@
             // create a new service impl class for that service
             serviceimpl = createServiceInstance(serviceImplClass);
             this.endpointInstance = serviceimpl;
+            this.endpointClazz = serviceImplClass;
+            
+            // Get the ServiceDescription and injectionDesc which contain
+            // cached information
+            ServiceDescription serviceDesc = mc.getServiceDescription();
+            ResourceInjectionServiceRuntimeDescription injectionDesc = null;
+            if (serviceDesc != null) {
+                injectionDesc = 
+                    ResourceInjectionServiceRuntimeDescriptionFactory.get(serviceDesc, serviceImplClass);
+            }
+
             //Since Serivce Object is instantiated for the first time I will Inject any resource 
             //and call the PostConstruct lifecycle methods here.
             
@@ -95,10 +110,16 @@
             WebServiceContextImpl wsContext = new WebServiceContextImpl();
             //Add MessageContext for this request.
             wsContext.setSoapMessageContext(soapMessageContext);
-            //inject WebServiceContext
-            injectWebServiceContext(mc, wsContext, serviceimpl);
-            //InvokePostConstruct
-            invokePostConstruct();
+            
+            //Inject WebServiceContext
+            if (injectionDesc != null && injectionDesc.hasResourceAnnotation()) {
+                injectWebServiceContext(mc, wsContext, serviceimpl);
+            }
+            
+            //Invoke PostConstruct
+            if (injectionDesc != null && injectionDesc.getPostConstructMethod() != null) {
+                invokePostConstruct(injectionDesc.getPostConstructMethod());
+            }
             serviceContext.setProperty(WEBSERVICE_MESSAGE_CONTEXT, wsContext);
             serviceContext.setProperty(ServiceContext.SERVICE_OBJECT, serviceimpl);
             return serviceimpl;
@@ -114,15 +135,19 @@
 		}
 		Method method = getPostConstructMethod();
 		if(method != null){
-			if(log.isDebugEnabled()){
-				log.debug("Invoking Method with @PostConstruct annotation");
-			}
-			invokeMethod(method, null);
-			if(log.isDebugEnabled()){
-				log.debug("Completed invoke on Method with @PostConstruct annotation");
-			}
+			invokePostConstruct(method);
 		}
 	}
+    
+    private void invokePostConstruct(Method method) throws EndpointLifecycleException {
+        if(log.isDebugEnabled()){
+            log.debug("Invoking Method with @PostConstruct annotation");
+        }
+        invokeMethod(method, null);
+        if(log.isDebugEnabled()){
+            log.debug("Completed invoke on Method with @PostConstruct annotation");
+        }
+    }
 
 	/* (non-Javadoc)
 	 * @see org.apache.axis2.jaxws.server.endpoint.lifecycle.EndpointLifecycleManager#invokePreDestroy()
@@ -133,15 +158,19 @@
 		}
 		Method method = getPreDestroyMethod();
 		if(method != null){
-			if(log.isDebugEnabled()){
-				log.debug("Invoking Method with @PostConstruct annotation");
-			}
-			invokeMethod(method, null);
-			if(log.isDebugEnabled()){
-				log.debug("Completed invoke on Method with @PreDestroy annotation");
-			}
+			invokePreDestroy(method);
 		}
 	}
+    
+    private void invokePreDestroy(Method method) throws EndpointLifecycleException {
+        if(log.isDebugEnabled()){
+            log.debug("Invoking Method with @PreDestroy annotation");
+        }
+        invokeMethod(method, null);
+        if(log.isDebugEnabled()){
+            log.debug("Completed invoke on Method with @PreDestroy annotation");
+        }
+    }
 	
 	private void invokeMethod(Method m, Object[] params) throws EndpointLifecycleException{
 		try{
@@ -154,6 +183,9 @@
 	}
 	
 	private Method getPostConstructMethod(){
+	    // REVIEW: This method should not be called in performant situations.
+        // Plus the super class methods are not being considered 
+        
 		//return Method with @PostConstruct Annotation.
 		if(endpointInstance != null){
 			Class endpointClazz = endpointInstance.getClass();
@@ -169,6 +201,8 @@
 	}
 	
 	private Method getPreDestroyMethod(){
+        // REVIEW: This method should not be called in performant situations.
+        // Plus the super class methods are not being considered 
 		//return Method with @PreDestroy Annotation
 		if(endpointInstance != null){
 			Class endpointClazz = endpointInstance.getClass();
@@ -230,24 +264,8 @@
 	 }
 	 
 	private void injectWebServiceContext(MessageContext mc, WebServiceContext wsContext, Object serviceInstance) throws ResourceInjectionException{
-       
-       // See if we have cached information about resource injection for this service and class
-       boolean tryInjection = true;
-       ServiceDescription serviceDesc = mc.getServiceDescription();
-       if (serviceDesc != null) {
-           ResourceInjectionServiceRuntimeDescription risrDesc = 
-               ResourceInjectionServiceRuntimeDescriptionFactory.get(serviceDesc, serviceInstance.getClass());
-           // If there are no @Resource annotations then don't bother with resource injection
-           if (risrDesc != null && !risrDesc.hasResourceAnnotation()) {
-               tryInjection = false;
-           }
-       }
-           
-       if (tryInjection) {
-           ResourceInjector ri =ResourceInjectionFactory.createResourceInjector(WebServiceContext.class);
-           ri.inject(wsContext, serviceInstance);
-       }
-		   
+       ResourceInjector ri =ResourceInjectionFactory.createResourceInjector(WebServiceContext.class);
+       ri.inject(wsContext, serviceInstance);   
 	}
 	   
 	private void updateWebServiceContext(WebServiceContext wsContext, javax.xml.ws.handler.MessageContext soapMessageContext) throws ResourceInjectionException{
