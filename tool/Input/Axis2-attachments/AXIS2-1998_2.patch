{\rtf1\fbidis\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Verdana;}{\f1\fmodern\fprq1\fcharset0 Courier New;}{\f2\froman\fprq2\fcharset2 Symbol;}{\f3\froman\fprq2\fcharset0 Times New Roman;}}
{\colortbl ;\red255\green0\blue0;}
\viewkind4\uc1\pard\ltrpar\f0\fs20 The EJB message receiver patch allows one to access an stateless session EJBs through web services. This example illustrates how to use this patch to access EJBs deployed on a J2EE server such as Geronimo or Jboss. I used Geronimo 1.1 and Jboss 4.0.4.GA to test this example.\par
 \par
\ul Creating a simple stateless session EJB\par
\ulnone  \par
First of all we need to create a stateless session EJB. Use the following files to make an EJB for testing.\par
 \par
Remote interface (Hello.java)\par
\b\f1 package my.ejb;\par
import javax.ejb.EJBObject;\par
public interface Hello extends EJBObject, HelloBusiness \{\par
\}\par
\b0\f0  \par
The following interface defines the business methods available. (HelloBusiness.java)\par
\b\f1 package my.ejb;\par
import java.rmi.RemoteException;\par
public interface HelloBusiness \{\par
    public String sayHello(String name) throws RemoteException;\par
\}\par
\b0\f0  \par
Remote home interface (HelloHome.java)\par
\b\f1 package my.ejb;\par
import javax.ejb.EJBHome;\par
import javax.ejb.CreateException;\par
import java.rmi.RemoteException;\par
public interface HelloHome extends EJBHome \{\par
    public Hello create() throws CreateException, RemoteException;\par
\}\par
\b0\f0  \par
Bean class (HelloBean.java)\par
\b\f1 package my.ejb;\par
\lang1036 import javax.ejb.SessionBean;\par
import javax.ejb.SessionContext;\par
import javax.ejb.EJBException;\par
import javax.ejb.CreateException;\par
public class HelloBean implements SessionBean \{\par
    public void setSessionContext(SessionContext sessionContext) throws EJBException \{\}\par
    \lang1033 public void ejbRemove() throws EJBException \{\}\par
    public void ejbActivate() throws EJBException \{\}\par
    public void ejbPassivate() throws EJBException \{\}\par
    public void ejbCreate() throws CreateException \{\}\par
    public String sayHello(String name) \{\par
        return "Hello " + name + ", Have a nice day!";\par
    \}\par
\}\par
\b0\f0  \par
Deployment descriptor (ejb-jar.xml)\par
\b\f1 <?xml version="1.0" encoding="UTF-8"?>\par
<ejb-jar xmlns="http://java.sun.com/xml/ns/j2ee"\par
\pard\ltrpar\li720 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\par
xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee\par
http://java.sun.com/xml/ns/j2ee/ejb-jar_2_1.xsd"\par
version="2.1">\par
<enterprise-beans>\par
\pard\ltrpar\li1440 <session>\par
\pard\ltrpar\li2160 <ejb-name>Hello</ejb-name>\par
<home>my.ejb.HelloHome</home>\par
<remote>my.ejb.Hello</remote>\par
<ejb-class>my.ejb.HelloBean</ejb-class>\par
<session-type>Stateless</session-type>\par
\lang1036 <transaction-type>Bean</transaction-type>\par
\pard\ltrpar\li1440 </session>\par
\pard\ltrpar\li720\lang1033 </enterprise-beans>\par
<assembly-descriptor>\par
\pard\ltrpar\li1440 <container-transaction>\par
\pard\ltrpar\li2160 <method>\par
\pard\ltrpar\li2880 <ejb-name>Hello</ejb-name>\par
<method-name>*</method-name>\par
\pard\ltrpar\li2160 </method>\par
<trans-attribute>Required</trans-attribute>\par
\pard\ltrpar\li1440 </container-transaction>\par
\pard\ltrpar\li720 </assembly-descriptor>\par
\pard\ltrpar </ejb-jar>\par
\b0\f0  \par
Now we have to write application server specific deployment descriptor(s) for the Hello EJB. Following listing shows an example Geronimo/Openejb deployment descriptor (openejb-jar.xml)\par
\b\f1 <?xml version="1.0" encoding="UTF-8"?>\par
<openejb-jar\par
        xmlns="http://www.openejb.org/xml/ns/openejb-jar-2.1"\par
        xmlns:naming="http://geronimo.apache.org/xml/ns/naming-1.1"\par
        xmlns:security="http://geronimo.apache.org/xml/ns/security-1.1"\par
        xmlns:sys="http://geronimo.apache.org/xml/ns/deployment-1.1"\par
        xmlns:pkgen="http://www.openejb.org/xml/ns/pkgen-2.0">\par
    <enterprise-beans>\par
        <session>\par
            <ejb-name>Hello</ejb-name>\par
            <jndi-name>my/ejb/HelloBean</jndi-name>\par
        </session>\par
    </enterprise-beans>\par
</openejb-jar>\par
\b0\f0  \par
If you want to test on Jboss, use the following Jboss deployment descriptor (jboss.xml)\par
\b\f1 <?xml version="1.0"?>\par
<!DOCTYPE jboss PUBLIC "-//JBoss//DTD JBOSS 4.0//EN"\par
\pard\ltrpar\li720 "http://www.jboss.org/j2ee/dtd/jboss_4_0.dtd">\par
\pard\ltrpar <jboss>\par
\pard\ltrpar\li720 <enterprise-beans>\par
\pard\ltrpar\li1440 <session>\par
\pard\ltrpar\li2160 <ejb-name>Hello</ejb-name>\par
<jndi-name>my/ejb/HelloBean</jndi-name>\par
\pard\ltrpar\li1440 </session>\par
\pard\ltrpar\li720 </enterprise-beans>\par
\pard\ltrpar </jboss>\par
\b0\f0  \par
 \par
 \par
 \par
Compile the above java classes and bundle the compiled classes and the XML files into a jar file (HelloEJB.jar) as shown below.\par
 \par
HelloEJB.jar\par
  |\par
  +--META-INF\par
  |    +--ejb-jar.xml\par
  |    +--jboss.xml [If you want to deploy on Jboss]\par
  |    +--openejb-jar.xml  [If you want to deploy on Geronimo/Openejb]\par
  |\par
  +--my\par
       +--ejb\par
             |\par
             +--Hello.class\par
             +--HelloBean.class\par
             +--HelloBusiness.class\par
             +--HelloHome.class\par
 \par
Deploy HelloEJB.jar on appropriate J2EE application server.\par
 \par
\ul Creating the Axis2 service archive\par
\ulnone  \par
Axis2 currently does not automatically generate the WSDL for the services which do not use RPC message receivers. Therefore we have to generate the WSDL file manually. Use the \b java2wsdl \b0 utility which comes with apache Axis2 to generate the WSDL.\par
 \par
Unix\par
\b\f1 $java2wsdl.sh -cp /path/to/HelloEJB.jar -cn my.ejb.HelloBusiness -sn HelloBeanService -of HelloBeanService.wsdl\par
\b0\f0  \par
Windows\par
\b\f1 C:\\Axis2\\bin>java2wsdl.bat -cp C:\\path\\to\\HelloEJB.jar -cn my.ejb.HelloBusiness -sn HelloBeanService -of HelloBeanService.wsdl\par
\b0\f0  \par
 \par
Now we need to make the services.xml file.\par
\b\f1 <serviceGroup>\par
        <service name="HelloBeanService">\par
                <description>Hello! web service</description>\par
                <messageReceivers>\par
                        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only" class="org.apache.axis2.rpc.receivers.ejb.EJBInOnlyMessageReceiver"/>\par
                        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out" class="org.apache.axis2.rpc.receivers.ejb.EJBMessageReceiver"/>\par
                </messageReceivers>\par
                <parameter name="remoteInterfaceName">my.ejb.Hello</parameter>\par
                <parameter name="homeInterfaceName">my.ejb.HelloHome</parameter>\par
                <parameter name="beanJndiName">my/ejb/HelloBean</parameter>\par
                <parameter name="providerUrl">\cf1 [URL]\cf0 </parameter>\par
                <parameter name="jndiContextClass">\cf1 [Context Factory Class Name]\cf0 </parameter>\par
        </service>\par
</serviceGroup>\par
\b0\f0 In the above services.xml file, replace the [URL] and [Context Factory Class Name] with valid values as follows. \par
 \par
i.e. If the EJB is deployed on Geronimo:\par
Replace [URL] by \b 127.0.0.1:4201\b0\par
Replace [Context Factory Class Name] by \b org.openejb.client.JNDIContext\b0\par
 \par
For Jboss,\par
Replace [URL] by \b jnp://localhost:1099\b0\par
Replace [Context Factory Class Name] by \b org.jnp.interfaces.NamingContextFactory\b0\par
 \par
 \par
Bundle the HelloBeanService.wsdl, services.xml, remote interface class and home interface class as illustrated below.\par
 \par
HelloBeanService.aar\par
  |\par
  +--META-INF\par
  |    +--services.xml\par
  |    +--HelloBeanService.wsdl\par
  |\par
  +--lib\par
  |    +--[jars used by the ejb client eg.initial context factory classes]\par
  |\par
  +--my\par
       +--ejb\par
             +--Hello.class\par
             +--HelloBusiness.class\par
             +--HelloHome.class\par
 \par
The \i lib \i0 directory of HelloBeanService.aar must contain all the libraries needed to access the EJB. If the EJB is deployed on Geronimo, add the following jar files to the lib directory.\par
\pard\ltrpar\fi-360\li720\tx720\f2\'b7\tab\f0 cglib-nodep-2.1_3.jar\f3\par
\pard\ltrpar\fi-360\li720\f2\'b7\tab\f0 geronimo-ejb_2.1_spec-1.0.1.jar\f3\par
\f2\'b7\tab\f0 geronimo-j2ee-jacc_1.0_spec-1.0.1.jar\f3\par
\f2\'b7\tab\f0 geronimo-kernel-1.1.jar\f3\par
\f2\'b7\tab\f0 geronimo-security-1.1.jar\f3\par
\f2\'b7\tab\f0 openejb-core-2.1.jar\f3\par
\pard\ltrpar\f0  \par
For Jboss add the following jar files.\par
\pard\ltrpar\fi-360\li720\tx720\f2\'b7\tab\f0 jnp-client.jar\f3\par
\pard\ltrpar\fi-360\li720\f2\'b7\tab\f0 jboss-client.jar\f3\par
\f2\'b7\tab\f0 jboss-common-client.jar\f3\par
\f2\'b7\tab\f0 jboss-remoting.jar\f3\par
\f2\'b7\tab\f0 jboss-serialization.jar\f3\par
\f2\'b7\tab\f0 jboss-transaction-client.jar\f3\par
\f2\'b7\tab\f0 concurrent.jar\f3\par
\f2\'b7\tab\f0 jbosssx-client.jar\f3\par
\f2\'b7\tab\f0 jboss-j2ee.jar\f3\par
\pard\ltrpar\f0  \par
Deploy HelloBeanService.aar on an Axis2 server.\par
 \par
Now you can access the Hello EJB through web services. Since our EJB message receivers extend RPC message receivers, org.apache.axis2.rpc.client.RPCServiceClient can be used to invoke the service as illustrated in the following code fragment.\par
\b\f1 ...\par
RPCServiceClient serviceClient = new RPCServiceClient();\par
Options options = serviceClient.getOptions();\par
EndpointReference targetEPR = new EndpointReference("http://localhost:8080/axis2/services/HelloBeanService");\par
options.setTo(targetEPR);\par
QName hello = new QName("http://ejb.my/xsd", "sayHello");\par
Object[] helloArgs = new Object[] \{"John"\};\par
System.out.println(serviceClient.invokeBlocking(hello, helloArgs).getFirstElement().getText());\par
...\par
\par
\b0\f3\fs24  \f0\fs20\par
}
 