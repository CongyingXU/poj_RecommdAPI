Index: toc.html
===================================================================
--- toc.html	(revision 516304)
+++ toc.html	(working copy)
@@ -1,124 +1,125 @@
-<html>
-<head>
-  <meta http-equiv="content-type" content="">
-  <title></title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all">
-  <style type="text/css" media="screen">
-<!--
-ul { list-style-type: none; margin: 0 0 0 5px; padding: 0; border-width: 0; list-style-position: outside; }
--->
-  </style>
-</head>
-
-<body lang="en-US" dir="ltr">
-<h1>Table of Contents</h1>
-<ol>
-  <li><a href="contents.html" target="mainFrame">Introduction</a></li>
-  <li><a href="installationguide.html" target="mainFrame">Installation
-    Guide</a></li>
-  <li><a href="../modules/index.html" target="mainFrame">Add-on
-  Modules</a></li>
-  <li><a href="app_server.html" target="mainFrame">Application Server
-    Specific Configuration Guide</a></li>
-  <li><a href="quickstartguide.html" target="mainFrame">QuickStart
-  Guide</a></li>
-  <li><a href="userguide.html" target="mainFrame">User's Guide</a></li>
-  <li><a href="adv-userguide.html" target="mainFrame">Advance User's
-  Guide</a></li>
-  <li><a href="axis2config.html" target="mainFrame">Configuration
-  Guide</a></li>
-  <li><a href="Axis2ArchitectureGuide.html" target="mainFrame">Architecture
-    Guide</a></li>
-  <li><a href="pojoguide.html" target="mainFrame">POJO Guide</a></li>
-  <li><a href="spring.html" target="mainFrame">Spring Guide</a></li>
-  <li><a href="modules.html" target="mainFrame">Modules Guide</a></li>
-  <li>ADB Data Binding
-    <ul>
-      <li>13.1 <a href="adb/adb-howto.html"
-        target="mainFrame">Architecture</a></li>
-      <li>13.2 <a href="adb/adb-advanced.html" target="mainFrame">Advanced
-        Features</a></li>
-      <li>13.3 <a href="adb/adb-codegen-integration.html"
-        target="mainFrame">Code generation integration</a></li>
-      <li>13.4 <a href="adb/adb-tweaking.html"
-      target="mainFrame">Tweaking</a></li>
-    </ul>
-  </li>
-  <li>JiBX Data binding
-    <ul>
-      <li>14.1 <a href="jibx/jibx-codegen-integration.html"
-        target="mainFrame">Code generation integration</a></li>
-      <li>14.2 <a href="jibx/jibx-doclit-example.html"
-        target="mainFrame">doc/lit example</a></li>
-      <li>14.3 <a href="jibx/jibx-unwrapped-example.html"
-        target="mainFrame">unwrapped example</a></li>
-    </ul>
-  </li>
-  <li>Advanced
-    <ul>
-      <li>15.1 <a href="xmlbased-server.html" target="mainFrame">AXIOM based
-        Service</a></li>
-      <li>15.2 <a href="dii.html" target="mainFrame">AXIOM based
-      Client</a></li>
-    </ul>
-  </li>
-  <li><a href="mtom-guide.html" target="mainFrame">Attachments/MTOM
-  Guide</a></li>
-  <li>Transports
-    <ul>
-      <li>17.1 <a href="http-transport.html" target="mainFrame">HTTP
-        Transport</a></li>
-      <li>17.2 <a href="jms-transport.html" target="mainFrame">JMS
-        Transport</a></li>
-      <li>17.3 <a href="tcp-transport.html" target="mainFrame">TCP
-        Transport</a></li>
-      <li>17.4 <a href="mail-transport.html" target="mainFrame">Mail
-        Transport</a> / <a href="mail-configuration.html"
-        target="mainFrame">(Configuration)</a></li>
-      <li>17.5 <a href="transport_howto.html" target="mainFrame">Custom
-        Transport</a></li>
-    </ul>
-  </li>
-  <li><a href="WS_policy.html" target="mainFrame">WS-Policy Support</a></li>
-  <li><a href="rest-ws.html" target="mainFrame">REST Support</a></li>
-  <li><a href="webadminguide.html" target="mainFrame">Web Administrator's
-    Guide</a></li>
-  <li><a href="soapmonitor-module.html" target="mainFrame">SOAP
-  Monitor</a></li>
-  <li><a href="reference.html" target="mainFrame">Command line tools</a></li>
-  <li><a href="../tools/index.html" target="mainFrame">Tools/Plugins</a>
-    <ul>
-      <li>23.1 <a href="../tools/1_1/CodegenToolReference.html"
-        target="mainFrame">Code Generator Tool - Command Line and Ant
-      Task</a></li>
-      <li>23.2 <a href="../tools/1_1/idea/Idea_plug-in_userguide.html"
-        target="mainFrame">Axis2 plugin for IntelliJ IDEA</a></li>
-      <li>23.3 <a href="../tools/1_1/eclipse/servicearchiver-plugin.html"
-        target="mainFrame">Service Archive Generator Wizard - Eclipse
-        Plug-in</a></li>
-      <li>23.4 <a href="../tools/1_1/eclipse/wsdl2java-plugin.html"
-        target="mainFrame">Code Generator Wizard - Eclipse Plug-in</a></li>
-      <li>23.5 <a href="../tools/1_1/maven-plugins/maven-aar-plugin.html"
-        target="mainFrame">AAR Maven2 Plug-in</a></li>
-      <li>23.6 <a
-        href="../tools/1_1/maven-plugins/maven-java2wsdl-plugin.html"
-        target="mainFrame">Java2WSDL Maven2 Plug-in</a></li>
-      <li>23.7 <a
-        href="../tools/1_1/maven-plugins/maven-wsdl2code-plugin.html"
-        target="mainFrame">WSDL2Code Maven2 Plug-in</a></li>
-      <li>23.8 <a href="../tools/previous.html" target="mainFrame">Tools
-        Archive</a></li>
-    </ul>
-  </li>
-  <li><a href="migration.html" target="mainFrame">Migration Guide (from
-    Axis1)</a></li>
-  <li>Design Notes
-    <ul>
-      <li>25.1 <a href="Axis2-rpc-support.html" target="mainFrame">RPC
-        Support</a></li>
-    </ul>
-  </li>
-</ol>
-</body>
-</html>
+<html>
+<head>
+  <meta http-equiv="content-type" content="">
+  <title></title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all">
+  <style type="text/css" media="screen">
+<!--
+ul { list-style-type: none; margin: 0 0 0 5px; padding: 0; border-width: 0; list-style-position: outside; }
+-->
+
+  </style>
+</head>
+
+<body lang="en-US" dir="ltr">
+<h1>Table of Contents</h1>
+<ol>
+  <li><a href="contents.html" target="mainFrame">Introduction</a></li>
+  <li><a href="installationguide.html" target="mainFrame">Installation
+    Guide</a></li>
+  <li><a href="../modules/index.html" target="mainFrame">Add-on
+  Modules</a></li>
+  <li><a href="app_server.html" target="mainFrame">Application Server
+    Specific Configuration Guide</a></li>
+  <li><a href="quickstartguide.html" target="mainFrame">Quick Start
+  Guide</a></li>
+  <li><a href="userguide.html" target="mainFrame">User's Guide</a></li>
+  <li><a href="adv-userguide.html" target="mainFrame">Advanced User's
+    Guide</a></li>
+  <li><a href="axis2config.html" target="mainFrame">Configuration
+  Guide</a></li>
+  <li><a href="Axis2ArchitectureGuide.html" target="mainFrame">Architecture
+    Guide</a></li>
+  <li><a href="pojoguide.html" target="mainFrame">POJO Guide</a></li>
+  <li><a href="spring.html" target="mainFrame">Spring Guide</a></li>
+  <li><a href="modules.html" target="mainFrame">Modules Guide</a></li>
+  <li>ADB Data Binding
+    <ul>
+      <li>13.1 <a href="adb/adb-howto.html"
+        target="mainFrame">Architecture</a></li>
+      <li>13.2 <a href="adb/adb-advanced.html" target="mainFrame">Advanced
+        Features</a></li>
+      <li>13.3 <a href="adb/adb-codegen-integration.html"
+        target="mainFrame">Code Generation Integration</a></li>
+      <li>13.4 <a href="adb/adb-tweaking.html"
+      target="mainFrame">Tweaking</a></li>
+    </ul>
+  </li>
+  <li>JiBX Data Binding
+    <ul>
+      <li>14.1 <a href="jibx/jibx-codegen-integration.html"
+        target="mainFrame">Code Generation Integration</a></li>
+      <li>14.2 <a href="jibx/jibx-doclit-example.html"
+        target="mainFrame">doc/lit Example</a></li>
+      <li>14.3 <a href="jibx/jibx-unwrapped-example.html"
+        target="mainFrame">unwrapped Example</a></li>
+    </ul>
+  </li>
+  <li>Advanced
+    <ul>
+      <li>15.1 <a href="xmlbased-server.html" target="mainFrame">AXIOM Based
+        Service</a></li>
+      <li>15.2 <a href="dii.html" target="mainFrame">AXIOM Based
+      Client</a></li>
+    </ul>
+  </li>
+  <li><a href="mtom-guide.html" target="mainFrame">Attachments/MTOM
+  Guide</a></li>
+  <li>Transports
+    <ul>
+      <li>17.1 <a href="http-transport.html" target="mainFrame">HTTP
+        Transport</a></li>
+      <li>17.2 <a href="jms-transport.html" target="mainFrame">JMS
+        Transport</a></li>
+      <li>17.3 <a href="tcp-transport.html" target="mainFrame">TCP
+        Transport</a></li>
+      <li>17.4 <a href="mail-transport.html" target="mainFrame">Mail
+        Transport</a> / <a href="mail-configuration.html"
+        target="mainFrame">(Configuration)</a></li>
+      <li>17.5 <a href="transport_howto.html" target="mainFrame">Custom
+        Transport</a></li>
+    </ul>
+  </li>
+  <li><a href="WS_policy.html" target="mainFrame">WS-Policy Support</a></li>
+  <li><a href="rest-ws.html" target="mainFrame">REST Support</a></li>
+  <li><a href="webadminguide.html" target="mainFrame">Web Administrator's
+    Guide</a></li>
+  <li><a href="soapmonitor-module.html" target="mainFrame">SOAP
+  Monitor</a></li>
+  <li><a href="reference.html" target="mainFrame">Command Line Tools</a></li>
+  <li><a href="../tools/index.html" target="mainFrame">Tools/Plug-ins</a>
+    <ul>
+      <li>23.1 <a href="../tools/1_1/CodegenToolReference.html"
+        target="mainFrame">Code Generator Tool - Command Line and Ant
+      Task</a></li>
+      <li>23.2 <a href="../tools/1_1/idea/Idea_plug-in_userguide.html"
+        target="mainFrame">Axis2 Plug-in for IntelliJ IDEA</a></li>
+      <li>23.3 <a href="../tools/1_1/eclipse/servicearchiver-plugin.html"
+        target="mainFrame">Service Archive Generator Wizard - Eclipse
+        Plug-in</a></li>
+      <li>23.4 <a href="../tools/1_1/eclipse/wsdl2java-plugin.html"
+        target="mainFrame">Code Generator Wizard - Eclipse Plug-in</a></li>
+      <li>23.5 <a href="../tools/1_1/maven-plugins/maven-aar-plugin.html"
+        target="mainFrame">AAR Maven2 Plug-in</a></li>
+      <li>23.6 <a
+        href="../tools/1_1/maven-plugins/maven-java2wsdl-plugin.html"
+        target="mainFrame">Java2WSDL Maven2 Plug-in</a></li>
+      <li>23.7 <a
+        href="../tools/1_1/maven-plugins/maven-wsdl2code-plugin.html"
+        target="mainFrame">WSDL2Code Maven2 Plug-in</a></li>
+      <li>23.8 <a href="../tools/previous.html" target="mainFrame">Tools
+        Archive</a></li>
+    </ul>
+  </li>
+  <li><a href="migration.html" target="mainFrame">Migration Guide (from
+    Axis1)</a></li>
+  <li>Design Notes
+    <ul>
+      <li>25.1 <a href="Axis2-rpc-support.html" target="mainFrame">RPC
+        Support</a></li>
+    </ul>
+  </li>
+</ol>
+</body>
+</html>
Index: userguide-buildingservices.html
===================================================================
--- userguide-buildingservices.html	(revision 516304)
+++ userguide-buildingservices.html	(working copy)
@@ -1,580 +1,582 @@
-<?xml version="1.0" encoding=""?>
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
-<head>
-  <meta http-equiv="content-type" content="" />
-  <title>Introducing Axis2</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all" />
-</head>
-
-<body>
-<a name="buildservices"></a>
-
-<h1>Apache Axis2 User's Guide -Building Services</h1>
-
-<p>Now that you know how to use Axis2 to generate clients from WSDL, this
-section digs a little deeper, showing you how to create services, and how to
-create both services and clients "from scratch", so to speak.</p>
-<ul>
-  <li><a href="userguide.html#intro">Introducing Axis2</a><br />
-
-    <ul>
-      <li><a href="userguide.html#whatis">What is Axis2</a></li>
-      <li><a href="userguide.html#underhood">What's under the hood?</a></li>
-      <li><a href="userguide.html#handlessoap">How Axis2 handles SOAP
-        messages</a></li>
-      <li><a href="userguide.html#distributions">Axis2 distributions</a></li>
-      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
-        Distribution</a></li>
-      <li><a href="userguide.html#hierarchy">Axis2.war Directory
-      hierarchy</a></li>
-      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
-      <li><a href="userguide.html#clients">Axis2 and clients</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-installingtesting.html#installingtesting">Installing
-    and testing client code</a></li>
-  <li><a href="userguide-introtoservices.html#introservices">Introduction to
-    Services</a><br />
-
-    <ul>
-      <li><a href="userguide-introtoservices.html#messageexchange">Message
-        Exchange Patterns</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-creatingclients.html#createclients">Creating
-    Clients</a><br />
-
-    <ul>
-      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
-        Client Generation Method</a></li>
-      <li><a href="userguide-creatingclients.html#generating">Generating
-        Clients</a></li>
-      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
-        (ADB)</a></li>
-    </ul>
-  </li>
-  <li><a
-    href="userguide-buildingservices.html#buildservices"><strong>Building
-    Services</strong></a><br />
-
-    <ul>
-      <li><a
-        href="userguide-buildingservices.html#getcomfortable"><strong>Getting
-        Comfortable with Available Options</strong></a></li>
-      <li><a
-        href="userguide-buildingservices.html#createscratch"><strong>Creating
-        a service from scratch</strong></a></li>
-      <li><a
-        href="userguide-buildingservices.html#deploypojo"><strong>Deploying
-        Plain Old Java Objects</strong></a></li>
-      <li><a
-        href="userguide-buildingservices.html#deployrun"><strong>Deploying
-        and running an Axis2 service created from WSDL</strong></a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-samples.html">Samples</a></li>
-  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
-</ul>
-
-<p><a name="getcomfortable"></a></p>
-
-<h2>Getting Comfortable with Available Options</h2>
-
-<p>Axis2 provides a number of ways to create a service, such as:</p>
-<ul>
-  <li>Create a service and build it from scratch: In this case, you build
-    your service class to specifically access AXIOM OMElement objects, then
-    create the services.xml file and package it up for deployment.</li>
-  <li>Deploy Plain Old Java Objects (POJOs) as a service.</li>
-  <li>Generate the service from WSDL: Just as you can generate clients with
-    WSDL, you can generate the skeleton of a service.</li>
-</ul>
-
-<p>Let's look at these three options.</p>
-<a name="createscratch"></a>
-
-<h2>Creating a Service From Scratch</h2>
-
-<p>Creating a service from scratch is not the most convenient way to do it,
-but it does give you the most control. The process involves several steps.</p>
-
-<p><b>The short story:</b></p>
-<ol>
-  <li>Create the service class, with each operation represented by a method
-    that takes as its argument a org.apache.axiom.om.OMElement object. (An
-    OMElement is how the AXIs2 Object Model (AXIOM) represents an XML
-    element.)</li>
-  <li>Create the service descriptor, services.xml, which defines the class to
-    be used by the service and the appropriate message receivers.</li>
-  <li>Create the .aar file, with the classes in their proper locations based
-    on package and the services.xml file in the META-INF directory.</li>
-  <li>Deploy the .aar file by using the <a href="webadminguide.html">Web
-    Administration application</a> or by copying it to the Axis2 services
-    directory.</li>
-</ol>
-
-<p><b>The long story:</b></p>
-
-<p>Start by creating the service class, a plain Java class that uses classes
-from the Axis2 libraries (see Code Listing 8).</p>
-
-<h3>Code Listing 8-Creating the Service Class</h3>
-<pre>package org.apache.axis2.axis2userguide;
-
-import javax.xml.stream.XMLStreamException;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.om.OMNamespace;
-
-public class SampleService {
-
-    public OMElement sayHello(OMElement element) 
-                             throws XMLStreamException {
-            element.build();
-            element.detach();
-
-            String rootName = element.getLocalName();
-            System.out.println("Reading "+rootName+" element");
-            
-            OMElement childElement = element.getFirstElement();
-            String personToGreet = childElement.getText();
-
-            OMFactory fac = OMAbstractFactory.getOMFactory();
-            OMNamespace omNs = fac.createOMNamespace(
-                    "http://example1.org/example1", "example1");
-            OMElement method = fac.createOMElement("sayHelloResponse", 
-omNs);
-            OMElement value = fac.createOMElement("greeting", omNs);
-            value.addChild(fac.createOMText(value, "Hello, 
-"+personToGreet));
-            method.addChild(value);
-
-            return method;
-        }
-
-     private void ping(){
-     }
-    
-}</pre>
-
-<p>Make sure to include Axis2 libraries in your class path when compiling the
-source.</p>
-
-<p>Axis2 uses AXIOM, or the AXIs Object Model, a DOM (Document Object Model)
--like structure that is based on the StAX API ( Streaming API for XML).
-Methods that act as services must take as their argument an OMElement, which
-represents the payload of the incoming SOAP message. (An OMElement is just
-AXIOM's way of representing an XML element, like a DOM Element object.) In
-this case, you're extracting the contents of the first child of the payload
-element, adding text to it, and using it as content for the return OMElement.
-Unless this is an "in only" service, these methods must return an OMElement,
-because that becomes the payload of the return SOAP message.</p>
-
-<p>To turn this class into a service, create the service description file,
-services.xml, as in Code Listing 9.</p>
-
-<h3>Code Listing 9 - Create the Service Description</h3>
-<pre>&lt;service name="UserGuideSampleService"&gt;
-    &lt;description&gt;
-        This is a sample service created in the Axis2 User's Guide
-    &lt;/description&gt;
-
-    &lt;parameter name="ServiceClass" 
-locked="false"&gt;org.apache.axis2.axis2userguide.SampleService
-&lt;/parameter&gt;
-
-    &lt;operation name="sayHello"&gt;
-        &lt;messageReceiver 
-class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
-    &lt;/operation&gt;
-    &lt;operation name="ping"&gt;
-        &lt;messageReceiver 
-class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/&gt;
-    &lt;/operation&gt;
-&lt;/service&gt;</pre>
-
-<p>This document defines the service, what it's called by the <a
-href="webadminguide.html">Web Administration Application</a>, and the class
-used to serve requests. For each operation, it defines the appropriate
-message receiver class.</p>
-
-<p>Create a new directory, META-INF, in the main directory for the class. (In
-this case, that's the same directory that contains the org directory) and
-place the services.xml file in it.</p>
-
-<p>Create the .aar file by typing: jar cvf SampleService.aar ./*</p>
-
-<p>Deploy the SampleService.aar file by using the <a
-href="webadminguide.html">Web Administration application</a> or by copying it
-to the Axis2 services directory.</p>
-
-<p>Now you can create a client class that accesses the service directly (see
-Code Listing 10).</p>
-
-<h3>Code Listing 10 - Create a Client Class that Accesses the Service
-Directly</h3>
-<pre>package org.apache.axis2.axis2userguide;
-
-import javax.xml.stream.XMLStreamException;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.om.OMNamespace;
-import org.apache.axis2.addressing.EndpointReference;
-import org.apache.axis2.client.Options;
-import org.apache.axis2.Constants;
-import org.apache.axis2.client.ServiceClient;
-
-public class SampleClient {
-
-       private static EndpointReference targetEPR = 
-             new EndpointReference(
-               "http://localhost:8080/axis2/services/UserGuideSampleService");
-
-        public static OMElement greetUserPayload(String personToGreet) {
-            OMFactory fac = OMAbstractFactory.getOMFactory();
-            OMNamespace omNs = fac.createOMNamespace(
-                    "http://example1.org/example1", "example1");
-            OMElement method = fac.createOMElement("sayHello", omNs);
-            OMElement value = fac.createOMElement("personToGreet", 
-omNs);
-            value.addChild(fac.createOMText(value, personToGreet));
-            method.addChild(value);
-            return method;
-        }
-
-        public static void main(String[] args) {
-            try {
-                OMElement payload = 
-SampleClient.greetUserPayload("John");
-                Options options = new Options();
-                options.setTo(targetEPR);
-                
-options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
-
-                ServiceClient sender = new ServiceClient();
-                sender.setOptions(options);
-                OMElement result = sender.sendReceive(payload);
-
-                String response = result.getFirstElement().getText();
-                System.out.println(response);
-
-            } catch (Exception e) { //(XMLStreamException e) {
-                System.out.println(e.toString());
-            }
-        }
-    
-}</pre>
-
-<p>This class uses the same technique of sending and receiving OMElements,
-but it's also important to note the use of the Options class. This class
-enables you to determine properties such as the transport used for the return
-message -- the transport used for the outgoing message can be inferred from
-the URL of the destination -- and the SOAP version to use. In addition to
-providing setter and getter methods of specific properties that affect how
-the client interacts with the service, the Options class enables you to
-create inheritance relationships between Options objects, so that if a
-property is not found in the current Options object used, the client can
-check the parent Options object of the current Options object.</p>
-
-<p>Compile and run the above SampleClient.java. Make sure to have all axis2
-libraries in your class path. If all has gone well, 'Hello, John' will be
-shown as the output in the console.</p>
-<a name="deploypojo"></a>
-
-<h2>Deploying Plain Old Java Objects (POJOs)</h2>
-
-<p>One very easy way to create a Web service is simply to deploy the Java
-objects that represent the service. Start with the class, shown in Code
-Listing 11.</p>
-
-<h3><b>Code Listing 11 - Creating the Class SampleService</b></h3>
-<pre>package org.apache.axis2.axis2userguide;
-
-public class SampleService {
-
-    public void doInOnly(){
-     return; 
-    } 
-     
-    public String noParameters(){
-      return "Hello";
-    } 
-    
-    public String twoWayOneParameterEcho(String toEcho){
-      return toEcho;
-    } 
-    
-    public boolean multipleParametersAdd(float price, int itemId, 
-                             String description, String itemName){
-      //Code to handle the logic
-	    	return true;
-    } 
- 
-}</pre>
-
-<p>Next, you'll need to tell Axis2 what class corresponds to what Web service
-calls. Do this by creating a file called services.xml and adding the
-following shown in Code Listing 12.</p>
-
-<h3><b>Code Listing 12 - Creating services.xml</b></h3>
-<pre>&lt;service name="SampleService" scope="application"&gt;
-    &lt;description&gt;
-        Sample Service
-    &lt;/description&gt;
-    &lt;messageReceivers&gt;
-        &lt;messageReceiver 
-            mep="http://www.w3.org/2004/08/wsdl/in-only"
-    class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/&gt;
-        &lt;messageReceiver
-            mep="http://www.w3.org/2004/08/wsdl/in-out"
-    class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;
-    &lt;/messageReceivers&gt;
-    &lt;parameter name="ServiceClass"&gt;
-        org.apache.axis2.axis2userguide.SampleService
-    &lt;/parameter&gt;
-&lt;/service&gt;</pre>
-
-<p>This file makes the InOnly and InOut MEPs available to the service and
-tells Axis2 which class to call; operations must match method names. In other
-words, Axis2 automatically sends a call to the multipleParametersAdd
-operation to the
-org.apache.axis2.axis2userguide.SampleService.multipleParametersAdd()
-method.</p>
-
-<p>Now it's time to create the distribution. Arrange your files in the
-following directory structure (see Code Listing 13).</p>
-
-<h3><b>Code Listing 13- Create the Directory Structure for the
-Distribution</b></h3>
-<pre> - SampleService
-   - META-INF
-     - services.xml
-   - org
-     - apache
-       - axis2
-         - axis2userguide
-           - SampleService.class</pre>
-
-<p>Finally, deploy the service by copying the SampleService directory to the
-webapps/axis2/WEB-INF/services directory on the servlet engine. You can check to make
-sure that it's been properly deployed by checking <a
-href="http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices">http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices</a>.</p>
-<a name="deployrun"></a>
-
-<h2>Deploying and Running an Axis2 Service Created from WSDL</h2>
-
-<p>If you have a WSDL file, you can easily create and deploy a service based
-on that description. For example, to create a service based on the same WSDL
-file used in the <a href="userguide-creatingclients.html">clients section</a>
-of this document, you'd employ the following steps.</p>
-
-<p><b>The short story:</b></p>
-<ol>
-  <li>If you haven't already, <a
-    href="http://ws.apache.org/axis2/download/1_1/download.cgi#std-bin">download</a>
-    the Axis2 standard distribution.</li>
-  <li>Generate the skeleton using the WSDL2Java utility, as in: <br />
-
-    <pre>java org.apache.axis2.wsdl.WSDL2Java -uri file:///C:/apps/axis2/samples/zSample/Axis2UserGuide.wsdl -p org.apache.axis2.axis2userguide -d adb -s -wv 1.1 -ss -sd -ssi</pre>
-  </li>
-  <li>Open the *Skeleton.java file and add the functionality of your service
-    to the generated methods.</li>
-  <li>Build a service using Ant by typing ant jar.server</li>
-  <li>Deploy the service by copying the build/lib/*.aar file to
-    &lt;J2EE_HOME&gt;/webapps/axis2/WEB-INF/services</li>
-  <li>Check http://&lt;server&gt;:&lt;port&gt;/axis2/services/listServices to
-    make sure the service has been properly deployed</li>
-</ol>
-
-<p><b>The long story:</b></p>
-
-<p>As was the case in generating clients, you will need the <a
-href="http://ws.apache.org/axis2/download/1_1/download.cgi#std-bin">Axis2
-Standard Distribution</a>, because the <a
-href="http://ws.apache.org/axis2/download/1_1/download.cgi#war">Axis2 War
-Distribution</a> does not include the WSDL2Java utility. Once you've got it
-downloaded and unpacked, make sure that you set the AXIS2_HOME variable to
-point to the location in which you've unpacked it.</p>
-
-<p>Now you are ready to generate the actual service. To keep things neat,
-create a new directory and change to it. The WSDL file is the same one
-referenced in <a href="userguide-creatingclients#generating.xhtml">Generating
-Clients</a> and includes four operations: NoParameters,
-TwoWayOneParameterEcho, MultipleParametersAddItem, and DoInOnly. To generate
-the service, use the WSDL2Java utility, as in Code Listing 14.</p>
-
-<h3>Code Listing 14 - Using the WSDL2Java Utility to Generate the Service</h3>
-<pre>java org.apache.axis2.wsdl.WSDL2Java -uri 
-file:///C:/apps/axis2/samples/zSample/Axis2UserGuide.wsdl -p 
-org.apache.axis2.axis2userguide -d adb -s -wv 1.1 -ss -sd</pre>
-
-<p>This statement tells the utility you want to create a service out of the
-operations in the file Axis2UserGuide.wsdl, and that the Java classes
-generated should be in the org.apache.axis2.axis2userguide package (-p). (You
-should see the appropriate directories created.) It also indicates that you
-want to use the Axis2 DataBinding Framework, or ADB (-d), to generate only
-synchronous, or blocking code (-s), and to generate server-side code (-ss) as
-opposed to a client, including the services.xml service descriptor file
-(-sd). It also specifies version 1.1 for the WSDL file (-wv). 
-</p>
-
-<p>At this point, you should see three new items in your chosen directory:
-the build.xml file, which includes instructions for Ant, the src directory,
-which includes all of the generated classes and stubs, the resources
-directory, which includes a regenerated version of the WSDL, and the
-services.xml file, which ultimately controls the service's behavior.</p>
-
-<p>You can compile the service at this point, but it doesn't actually do
-anything yet. You can solve that problem by opening the
-src\org\apache\axis2\axis2userguide\Axis2UserGuideServiceSkeleton.java file
-and either editing the code in bold -- make sure you manage parameter numbers
--- or replacing all of the code with the following in Code Listing 15.</p>
-
-<h3>Code Listing 15 - Compiling the Service</h3>
-<pre>/**
- * Axis2UserGuideServiceSkeleton.java
- *
- * This file was auto-generated from WSDL
- * by the Apache Axis2 version: SNAPSHOT Oct 15, 2006 (11:23:18 
-GMT+00:00)
- */
-package org.apache.axis2.axis2userguide;
-/**
- *  Axis2UserGuideServiceSkeleton java skeleton for the axisService
- */
-public class Axis2UserGuideServiceSkeleton {
-     
-         
-    /**
-     * Auto generated method signature
-         
-     * @param param7
-         
-    */
-    public  org.apache.axis2.axis2userguide.NoParametersResponse 
-NoParameters
-        (org.apache.axis2.axis2userguide.NoParametersRequest param7)
-         
-    {
-        <b>System.out.println(param7);
-
-        NoParametersResponse res =
-            new NoParametersResponse();
-
-        return res;</b>
-    }
-     
-         
-    /**
-     * Auto generated method signature
-         
-     * @param param9
-         
-    */
-    public  
-org.apache.axis2.axis2userguide.TwoWayOneParameterEchoResponse 
-TwoWayOneParameterEcho
-        (
-         org.apache.axis2.axis2userguide.TwoWayOneParameterEchoRequest 
-param9
-         )
-         
-    {
-        <b>System.out.println(param9.getEchoString());
-
-        TwoWayOneParameterEchoResponse res =
-            new TwoWayOneParameterEchoResponse();
-        
-        res.setEchoString(param9.getEchoString());
-
-        return res;</b>
-    }
-     
-         
-    /**
-     * Auto generated method signature
-         
-     * @param param11
-         
-    */
-    public  void DoInOnly
-        (
-         org.apache.axis2.axis2userguide.DoInOnlyRequest param11
-         )
-         
-    {
-        <b>System.out.println(param11.getMessageString());</b>
-    }
-     
-         
-    /**
-     * Auto generated method signature
-         
-     * @param param12
-         
-    */
-    public  
-org.apache.axis2.axis2userguide.MultipleParametersAddItemResponse 
-MultipleParametersAddItem
-        (
-         
-org.apache.axis2.axis2userguide.MultipleParametersAddItemRequest 
-param12
-         )
-         
-    {
-        <b>System.out.println(param12.getPrice());
-        System.out.println(param12.getItemId());
-        System.out.println(param12.getDescription());
-        System.out.println(param12.getItemName());
-
-        MultipleParametersAddItemResponse res =
-            new MultipleParametersAddItemResponse();
-        
-        res.setSuccessfulAdd(true);
-        res.setItemId(param12.getItemId());
-
-        return res;</b>
-    }
-     
-}</pre>
-
-<p>As in the case of generating clients, all of these classes, such as
-MultipleParametersAddItemRequest and TwoWayOneParameterEchoResponse, are
-generated by the utility, and can be found in the same directory as the
-skeleton file. They include methods such as setSuccessfulAdd(), which set the
-value of the content of an element in the response, and getItemName(), which
-retrieve the content of elements in the request.</p>
-
-<p>Save the file and compile it by typing: ant jar.server</p>
-
-<p>If all goes well, you should see the BUILD SUCCESSFUL message in your
-window, and the Axis2UserGuideService.aar file in the newly created build/lib
-directory.</p>
-
-<p><img alt="The BUILD SUCCESSFUL message in your window"
-src="images/fig05.jpg" /></p>
-
-<p>Now you need to deploy the service to the server. To do that, copy the
-Axis2UserGuideService.aar file to the WEB-INF/services directory of the
-application server. (You also have the option to use the administration
-tools. See the <a href="webadminguide.html">Web Administrator's Guide</a> for
-more information.)</p>
-
-<p>To verify that the service has been properly deployed, check the list of
-services at <a
-href="http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices">http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices</a>.</p>
-
-<p><img alt="Checking the list of services" src="images/fig06.jpg" /></p>
-
-<p>Now you should be able to access the service using any of the clients
-built in the <a href="userguide-creatingclients.html#generating">Generating
-Clients</a> document.</p>
-
-<p><strong>See Next Section</strong>- <a
-href="userguide-samples.html">Samples</a></p>
-</body>
-</html>
+<?xml version="1.0" encoding=""?>
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+<head>
+  <meta http-equiv="content-type" content="" />
+  <title>Introducing Axis2</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all" />
+</head>
+
+<body>
+<a name="buildservices"></a>
+
+<h1>Apache Axis2 User's Guide -Building Services</h1>
+
+<p>Now that you know how to use Axis2 to generate clients from WSDL, this
+section digs a little deeper showing you how to create services, and also how
+to create services and clients "from scratch", so to speak.</p>
+<ul>
+  <li><a href="userguide.html#intro">Introducing Axis2</a><br />
+
+    <ul>
+      <li><a href="userguide.html#whatis">What is Axis2?</a></li>
+      <li><a href="userguide.html#underhood">What's Under the Hood?</a></li>
+      <li><a href="userguide.html#handlessoap">How Axis2 Handles SOAP
+        Messages</a></li>
+      <li><a href="userguide.html#distributions">Axis2 Distributions</a></li>
+      <li><a href="userguide.html#sbd">The Axis2 Standard Binary
+        Distribution</a></li>
+      <li><a href="userguide.html#hierarchy">Axis2.war Directory
+      Hierarchy</a></li>
+      <li><a href="userguide.html#docs">Axis2 Documents Distribution</a></li>
+      <li><a href="userguide.html#clients">Axis2 and Clients</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-installingtesting.html#installingtesting">Installing
+    and Testing Client Code</a></li>
+  <li><a href="userguide-introtoservices.html#introservices">Introduction to
+    Services</a><br />
+
+    <ul>
+      <li><a href="userguide-introtoservices.html#messageexchange">Message
+        Exchange Patterns</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-creatingclients.html#createclients">Creating
+    Clients</a><br />
+
+    <ul>
+      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
+        Client Generation Method</a></li>
+      <li><a href="userguide-creatingclients.html#generating">Generating
+        Clients</a></li>
+      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
+        (ADB)</a></li>
+    </ul>
+  </li>
+  <li><a
+    href="userguide-buildingservices.html#buildservices"><strong>Building
+    Services</strong></a><br />
+
+    <ul>
+      <li><a
+        href="userguide-buildingservices.html#getcomfortable"><strong>Getting
+        Comfortable with Available Options</strong></a></li>
+      <li><a
+        href="userguide-buildingservices.html#createscratch"><strong>Creating
+        a Service from Scratch</strong></a></li>
+      <li><a
+        href="userguide-buildingservices.html#deploypojo"><strong>Deploying
+        Plain Old Java Objects</strong></a></li>
+      <li><a
+        href="userguide-buildingservices.html#deployrun"><strong>Deploying
+        and Running an Axis2 Service Created from WSDL</strong></a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-samples.html">Samples</a></li>
+  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
+</ul>
+
+<p><a name="getcomfortable"></a></p>
+
+<h2>Getting Comfortable with the Available Options</h2>
+
+<p>Axis2 provides a number of ways to create a service, such as:</p>
+<ul>
+  <li>Create a service and build it from scratch. In this case, you build
+    your service class to specifically access AXIOM OMElement objects, then
+    create the services.xml file and package it for deployment.</li>
+  <li>Deploy Plain Old Java Objects (POJOs) as a service.</li>
+  <li>Generate the service from WSDL. Just as you can generate clients with
+    WSDL, you can also generate the skeleton of a service.</li>
+</ul>
+
+<p>Let's look at these three options.</p>
+<a name="createscratch"></a>
+
+<h2>Creating a Service from Scratch</h2>
+
+<p>Creating a service from scratch is not the most convenient way to do it,
+but it does give you the most control. The process involves several steps.</p>
+
+<p><b>The short story:</b></p>
+<ol>
+  <li>Create the service class with each operation that is represented by a
+    method that takes an org.apache.axiom.om.OMElement object as its
+    argument. (An OMElement is how the AXIs2 Object Model (AXIOM) represents
+    an XML element.)</li>
+  <li>Create the service descriptor, services.xml, which defines the class to
+    be used by the service and the appropriate message receivers.</li>
+  <li>Create the .aar file, with the classes in their proper locations based
+    on the package and the services.xml file in the META-INF directory.</li>
+  <li>Deploy the .aar file by using the <a href="webadminguide.html">Web
+    Administration application</a> or by copying it to the Axis2 services
+    directory.</li>
+</ol>
+
+<p><b>The long story:</b></p>
+
+<p>Start by creating the service class, a plain Java class that uses classes
+from the Axis2 libraries (see Code Listing 8).</p>
+
+<h3>Code Listing 8-Creating the Service Class</h3>
+<pre>package org.apache.axis2.axis2userguide;
+
+import javax.xml.stream.XMLStreamException;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+
+public class SampleService {
+
+    public OMElement sayHello(OMElement element) 
+                             throws XMLStreamException {
+            element.build();
+            element.detach();
+
+            String rootName = element.getLocalName();
+            System.out.println("Reading "+rootName+" element");
+            
+            OMElement childElement = element.getFirstElement();
+            String personToGreet = childElement.getText();
+
+            OMFactory fac = OMAbstractFactory.getOMFactory();
+            OMNamespace omNs = fac.createOMNamespace(
+                    "http://example1.org/example1", "example1");
+            OMElement method = fac.createOMElement("sayHelloResponse", 
+omNs);
+            OMElement value = fac.createOMElement("greeting", omNs);
+            value.addChild(fac.createOMText(value, "Hello, 
+"+personToGreet));
+            method.addChild(value);
+
+            return method;
+        }
+
+     private void ping(){
+     }
+    
+}</pre>
+
+<p>Make sure to include Axis2 libraries in your class path when compiling the
+source.</p>
+
+<p>Axis2 uses AXIOM, or the AXIs Object Model, a DOM (Document Object Model)
+-like structure that is based on the StAX API ( Streaming API for XML).
+Methods that act as services must take an OMElement as their argument, which
+represents the payload of the incoming SOAP message. (An OMElement is just
+AXIOM's way of representing an XML element, like a DOM Element object.) In
+this case, you're extracting the contents of the first child of the payload
+element, adding text to it, and using it as content for the return OMElement.
+Unless this is an "in only" service, these methods must return an OMElement,
+because that becomes the payload of the return SOAP message.</p>
+
+<p>To turn this class into a service, create the service description file,
+services.xml, as in Code Listing 9.</p>
+
+<h3>Code Listing 9 - Create the Service Description</h3>
+<pre>&lt;service name="UserGuideSampleService"&gt;
+    &lt;description&gt;
+        This is a sample service created in the Axis2 User's Guide
+    &lt;/description&gt;
+
+    &lt;parameter name="ServiceClass" 
+locked="false"&gt;org.apache.axis2.axis2userguide.SampleService
+&lt;/parameter&gt;
+
+    &lt;operation name="sayHello"&gt;
+        &lt;messageReceiver 
+class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/&gt;
+    &lt;/operation&gt;
+    &lt;operation name="ping"&gt;
+        &lt;messageReceiver 
+class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/&gt;
+    &lt;/operation&gt;
+&lt;/service&gt;</pre>
+
+<p>This document defines the service, called by the <a
+href="webadminguide.html">Web Administration Application</a>, and the class
+used to serve requests. For each operation, it defines the appropriate
+message receiver class.</p>
+
+<p>Create a new directory, META-INF, in the main directory for the class. (In
+this case, that's the same directory that contains the org directory) and
+place the services.xml file in it.</p>
+
+<p>Create the .aar file by typing: jar cvf SampleService.aar
+./*</p>
+
+<p>Deploy the SampleService.aar file by using the <a
+href="webadminguide.html">Web Administration application</a> or by copying it
+to the Axis2 services directory.</p>
+
+<p>Now you can create a client class that accesses the service directly (see
+Code Listing 10).</p>
+
+<h3>Code Listing 10 - Create a Client Class that Accesses the Service
+Directly</h3>
+<pre>package org.apache.axis2.axis2userguide;
+
+import javax.xml.stream.XMLStreamException;
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.Constants;
+import org.apache.axis2.client.ServiceClient;
+
+public class SampleClient {
+
+       private static EndpointReference targetEPR = 
+             new EndpointReference(
+               "http://localhost:8080/axis2/services/UserGuideSampleService");
+
+        public static OMElement greetUserPayload(String personToGreet) {
+            OMFactory fac = OMAbstractFactory.getOMFactory();
+            OMNamespace omNs = fac.createOMNamespace(
+                    "http://example1.org/example1", "example1");
+            OMElement method = fac.createOMElement("sayHello", omNs);
+            OMElement value = fac.createOMElement("personToGreet", 
+omNs);
+            value.addChild(fac.createOMText(value, personToGreet));
+            method.addChild(value);
+            return method;
+        }
+
+        public static void main(String[] args) {
+            try {
+                OMElement payload = 
+SampleClient.greetUserPayload("John");
+                Options options = new Options();
+                options.setTo(targetEPR);
+                
+options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
+
+                ServiceClient sender = new ServiceClient();
+                sender.setOptions(options);
+                OMElement result = sender.sendReceive(payload);
+
+                String response = result.getFirstElement().getText();
+                System.out.println(response);
+
+            } catch (Exception e) { //(XMLStreamException e) {
+                System.out.println(e.toString());
+            }
+        }
+    
+}</pre>
+
+<p>This class uses the same technique of sending and receiving OMElements,
+but it's also important to note the use of the Options class. This class
+enables you to determine properties such as the transport used for the return
+message (the transport used for the outgoing message can be inferred from the
+URL of the destination) and the SOAP version to use. In addition to providing
+setter and getter methods of specific properties that affect how the client
+interacts with the service, the Options class enables you to create
+inheritance relationships between Options objects. So if a property is not
+found in the current Options object used, the client can check the parent
+Options object of the current Options object.</p>
+
+<p>Compile and run the above SampleClient.java. Make sure to have all axis2
+libraries in your class path. If all has gone well, 'Hello, John' will be
+shown as the output in the console.</p>
+<a name="deploypojo"></a>
+
+<h2>Deploying Plain Old Java Objects (POJOs)</h2>
+
+<p>One very easy way to create a Web service is simply to deploy the Java
+objects that represent the service. Start with the class, shown in Code
+Listing 11.</p>
+
+<h3><b>Code Listing 11 - Creating the Class SampleService</b></h3>
+<pre>package org.apache.axis2.axis2userguide;
+
+public class SampleService {
+
+    public void doInOnly(){
+     return; 
+    } 
+     
+    public String noParameters(){
+      return "Hello";
+    } 
+    
+    public String twoWayOneParameterEcho(String toEcho){
+      return toEcho;
+    } 
+    
+    public boolean multipleParametersAdd(float price, int itemId, 
+                             String description, String itemName){
+      //Code to handle the logic
+	    	return true;
+    } 
+ 
+}</pre>
+
+<p>Next, you'll need to tell Axis2 what class corresponds with what Web
+service calls. Do this by creating a file called services.xml and adding the
+following shown in Code Listing 12.</p>
+
+<h3><b>Code Listing 12 - Creating services.xml</b></h3>
+<pre>&lt;service name="SampleService" scope="application"&gt;
+    &lt;description&gt;
+        Sample Service
+    &lt;/description&gt;
+    &lt;messageReceivers&gt;
+        &lt;messageReceiver 
+            mep="http://www.w3.org/2004/08/wsdl/in-only"
+    class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/&gt;
+        &lt;messageReceiver
+            mep="http://www.w3.org/2004/08/wsdl/in-out"
+    class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/&gt;
+    &lt;/messageReceivers&gt;
+    &lt;parameter name="ServiceClass"&gt;
+        org.apache.axis2.axis2userguide.SampleService
+    &lt;/parameter&gt;
+&lt;/service&gt;</pre>
+
+<p>This file makes the InOnly and InOut MEPs available to the service and
+tells Axis2 which class to call; operations must match method names. In other
+words, Axis2 automatically sends a call to the multipleParametersAdd
+operation to the
+org.apache.axis2.axis2userguide.SampleService.multipleParametersAdd()
+method.</p>
+
+<p>Now it's time to create the distribution. Arrange your files in the
+following directory structure (see Code Listing 13).</p>
+
+<h3><b>Code Listing 13- Create the Directory Structure for the
+Distribution</b></h3>
+<pre> - SampleService
+   - META-INF
+     - services.xml
+   - org
+     - apache
+       - axis2
+         - axis2userguide
+           - SampleService.class</pre>
+
+<p>Finally, deploy the service by copying the SampleService directory to the
+webapps/axis2/WEB-INF/services directory on the servlet engine. You can check
+to make sure that it's been properly deployed by checking <a
+href="http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices">http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices</a>.</p>
+<a name="deployrun"></a>
+
+<h2>Deploying and Running an Axis2 Service Created from WSDL</h2>
+
+<p>If you have a WSDL file, you can easily create and deploy a service based
+on that description. For example, to create a service based on the same WSDL
+file used in the <a href="userguide-creatingclients.html">clients section</a>
+of this document, you will follow the steps below.</p>
+
+<p><b>The short story:</b></p>
+<ol>
+  <li><a
+    href="http://ws.apache.org/axis2/download/1_1/download.cgi#std-bin">Download</a>
+    the Axis2 standard distribution, if you have not done so already.</li>
+  <li>Generate the skeleton using the WSDL2Java utility, as in: <br />
+
+    <pre>java org.apache.axis2.wsdl.WSDL2Java -uri file:///C:/apps/axis2/samples/zSample/Axis2UserGuide.wsdl -p org.apache.axis2.axis2userguide -d adb -s -wv 1.1 -ss -sd -ssi</pre>
+  </li>
+  <li>Open the *Skeleton.java file and add the functionality of your service
+    to the generated methods.</li>
+  <li>Build a service using Ant by typing ant jar.server</li>
+  <li>Deploy the service by copying the build/lib/*.aar file to
+    &lt;J2EE_HOME&gt;/webapps/axis2/WEB-INF/services</li>
+  <li>Check http://&lt;server&gt;:&lt;port&gt;/axis2/services/listServices to
+    make sure the service has been properly deployed.</li>
+</ol>
+
+<p><b>The long story:</b></p>
+
+<p>As with generating clients, you will need the <a
+href="http://ws.apache.org/axis2/download/1_1/download.cgi#std-bin">Axis2
+Standard Distribution</a>, because the <a
+href="http://ws.apache.org/axis2/download/1_1/download.cgi#war">Axis2 WAR
+Distribution</a> does not include the WSDL2Java utility. Once you've got it
+downloaded and unpacked, make sure that you set the AXIS2_HOME variable to
+point to the location in which you've unpacked it.</p>
+
+<p>Now you are ready to generate the actual service. To keep things neat,
+create a new directory and change to it. The WSDL file is the same one
+referenced in <a href="userguide-creatingclients#generating.xhtml">Generating
+Clients</a> and includes four operations: NoParameters,
+TwoWayOneParameterEcho, MultipleParametersAddItem, and DoInOnly. To generate
+the service, use the WSDL2Java utility, as in Code Listing 14.</p>
+
+<h3>Code Listing 14 - Using the WSDL2Java Utility to Generate the Service</h3>
+<pre>java org.apache.axis2.wsdl.WSDL2Java -uri 
+file:///C:/apps/axis2/samples/zSample/Axis2UserGuide.wsdl -p 
+org.apache.axis2.axis2userguide -d adb -s -wv 1.1 -ss -sd</pre>
+
+<p>This statement tells the utility you want to create a service out of the
+operations in the file Axis2UserGuide.wsdl, and that the Java classes
+generated should be in the org.apache.axis2.axis2userguide package (-p). (You
+can view the appropriate directories created.) It also indicates that you
+want to use the Axis2 DataBinding Framework, or ADB (-d), to generate only
+synchronous or blocking code (-s), and to generate server-side code (-ss) as
+opposed to a client, including the services.xml service descriptor file
+(-sd). It also specifies version 1.1 for the WSDL file (-wv).</p>
+
+<p>At this point, you should see four new items in your chosen directory: the
+build.xml file, which includes instructions for Ant, the src directory, which
+includes all the generated classes and stubs, the resources directory, which
+includes a regenerated version of the WSDL, and the services.xml file, which
+ultimately controls the service's behavior.</p>
+
+<p>You can compile the service at this point, but it doesn't actually do
+anything yet. You can solve that problem by opening the
+src\org\apache\axis2\axis2userguide\Axis2UserGuideServiceSkeleton.java file
+and either editing the code in bold -- make sure you manage parameter numbers
+-- or replacing all the code with the following in Code Listing 15.</p>
+
+<h3>Code Listing 15 - Compiling the Service</h3>
+
+<p><pre>/**
+ * Axis2UserGuideServiceSkeleton.java
+ *
+ * This file was auto-generated from WSDL
+ * by the Apache Axis2 version: SNAPSHOT Oct 15, 2006 (11:23:18 
+GMT+00:00)
+ */
+package org.apache.axis2.axis2userguide;
+/**
+ *  Axis2UserGuideServiceSkeleton java skeleton for the axisService
+ */
+public class Axis2UserGuideServiceSkeleton {
+     
+         
+    /**
+     * Auto generated method signature
+         
+     * @param param7
+         
+    */
+    public  org.apache.axis2.axis2userguide.NoParametersResponse 
+NoParameters
+        (org.apache.axis2.axis2userguide.NoParametersRequest param7)
+         
+    {
+        <b>System.out.println(param7);
+
+        NoParametersResponse res =
+            new NoParametersResponse();
+
+        return res;</b>
+    }
+     
+         
+    /**
+     * Auto generated method signature
+         
+     * @param param9
+         
+    */
+    public  
+org.apache.axis2.axis2userguide.TwoWayOneParameterEchoResponse 
+TwoWayOneParameterEcho
+        (
+         org.apache.axis2.axis2userguide.TwoWayOneParameterEchoRequest 
+param9
+         )
+         
+    {
+        <b>System.out.println(param9.getEchoString());
+
+        TwoWayOneParameterEchoResponse res =
+            new TwoWayOneParameterEchoResponse();
+        
+        res.setEchoString(param9.getEchoString());
+
+        return res;</b>
+    }
+     
+         
+    /**
+     * Auto generated method signature
+         
+     * @param param11
+         
+    */
+    public  void DoInOnly
+        (
+         org.apache.axis2.axis2userguide.DoInOnlyRequest param11
+         )
+         
+    {
+        <b>System.out.println(param11.getMessageString());</b>
+    }
+     
+         
+    /**
+     * Auto generated method signature
+         
+     * @param param12
+         
+    */
+    public  
+org.apache.axis2.axis2userguide.MultipleParametersAddItemResponse 
+MultipleParametersAddItem
+        (
+         
+org.apache.axis2.axis2userguide.MultipleParametersAddItemRequest 
+param12
+         )
+         
+    {
+        <b>System.out.println(param12.getPrice());
+        System.out.println(param12.getItemId());
+        System.out.println(param12.getDescription());
+        System.out.println(param12.getItemName());
+
+        MultipleParametersAddItemResponse res =
+            new MultipleParametersAddItemResponse();
+        
+        res.setSuccessfulAdd(true);
+        res.setItemId(param12.getItemId());
+
+        return res;</b>
+    }
+     
+}</pre>
+</p>
+
+<p>As with generating clients, all these classes, such as
+MultipleParametersAddItemRequest and TwoWayOneParameterEchoResponse, are
+generated by the utility, and can be found in the same directory as the
+skeleton file. They include methods such as setSuccessfulAdd(), which sets
+the value of the content of an element in the response, and getItemName(),
+which retrieves the content of elements in the request.</p>
+
+<p>Save the file and compile it by typing: ant jar.server</p>
+
+<p>If all goes well, you should see the BUILD SUCCESSFUL message in your
+window, and the Axis2UserGuideService.aar file in the newly created build/lib
+directory.</p>
+
+<p><img alt="The BUILD SUCCESSFUL message in your window"
+src="images/fig05.jpg" /></p>
+
+<p>Now you need to deploy the service to the server. To do that, copy the
+Axis2UserGuideService.aar file to the WEB-INF/services directory of the
+application server. (You also have the option to use the administration
+tools. See the <a href="webadminguide.html">Web Administrator's Guide</a> for
+more information.)</p>
+
+<p>To verify that the service has been properly deployed, check the list of
+services at <a
+href="http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices">http://&lt;host&gt;:&lt;port&gt;/axis2/services/listServices</a>.</p>
+
+<p><img alt="Checking the list of services" src="images/fig06.jpg" /></p>
+
+<p>Now you should be able to access the service using any of the clients
+built in the <a href="userguide-creatingclients.html#generating">Generating
+Clients</a> document.</p>
+
+<p><strong>See Next Section</strong>- <a
+href="userguide-samples.html">Samples</a></p>
+</body>
+</html>
Index: userguide-codelisting5.html
===================================================================
--- userguide-codelisting5.html	(revision 516304)
+++ userguide-codelisting5.html	(working copy)
@@ -1,200 +1,200 @@
-<?xml version="1.0" encoding=""?>
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
-<head>
-  <meta http-equiv="content-type" content="" />
-  <title>Code Listing 4: Generating clients from the WSDL file</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all" />
-</head>
-
-<body>
-<h1>Code Listing 5 - Generating clients from the WSDL file</h1>
-<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
-&lt;wsdl:definitions
-   xmlns:apachesoap="http://xml.apache.org/xml-soap"
-   xmlns:impl="http://apache.org/axis2/Axis2UserGuide"
-   xmlns:intf="http://apache.org/axis2/Axis2UserGuide"
-   xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
-   xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
-   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
-   targetNamespace="http://apache.org/axis2/Axis2UserGuide"&gt;
-
-  &lt;wsdl:types&gt;
-    &lt;schema
-       elementFormDefault="qualified"
-       targetNamespace="http://apache.org/axis2/Axis2UserGuide"
-       xmlns="http://www.w3.org/2001/XMLSchema"&gt;
-      
-      &lt;!-- ELEMENTS --&gt;
-      
-      &lt;element name="DoInOnlyRequest"&gt;
-        &lt;complexType&gt;
-          &lt;sequence&gt;
-            &lt;element name="messageString" type="xsd:string"/&gt;
-          &lt;/sequence&gt;
-        &lt;/complexType&gt;
-      &lt;/element&gt;
-      
-      &lt;element name="TwoWayOneParameterEchoRequest"&gt;
-        &lt;complexType&gt;
-          &lt;sequence&gt;
-            &lt;element name="echoString" type="xsd:string"/&gt;
-          &lt;/sequence&gt;
-        &lt;/complexType&gt;
-      &lt;/element&gt;
-      &lt;element name="TwoWayOneParameterEchoResponse"&gt;
-        &lt;complexType&gt;
-          &lt;sequence&gt;
-            &lt;element name="echoString" type="xsd:string"/&gt;
-          &lt;/sequence&gt;
-        &lt;/complexType&gt;
-      &lt;/element&gt;
-      
-      &lt;element name="NoParametersRequest"&gt;
-        &lt;complexType/&gt;
-      &lt;/element&gt;
-      &lt;element name="NoParametersResponse"&gt;
-        &lt;complexType/&gt;
-      &lt;/element&gt;
-      
-      &lt;element name="MultipleParametersAddItemRequest"&gt;
-        &lt;complexType&gt;
-          &lt;sequence&gt;
-            &lt;element name="itemId" type="xsd:int"/&gt;
-            &lt;element name="itemName" type="xsd:string"/&gt;
-            &lt;element name="price" type="xsd:float"/&gt;
-            &lt;element name="description" type="xsd:string"/&gt;
-          &lt;/sequence&gt;
-        &lt;/complexType&gt;
-      &lt;/element&gt;
-
-      &lt;element name="MultipleParametersAddItemResponse"&gt;
-        &lt;complexType&gt;
-          &lt;sequence&gt;
-          &lt;element name="itemId" type="xsd:int"/&gt;
-          &lt;element name="successfulAdd" type="xsd:boolean"/&gt;
-          &lt;/sequence&gt;
-        &lt;/complexType&gt;
-      &lt;/element&gt;
-
-    &lt;/schema&gt;
-  &lt;/wsdl:types&gt;
-
-  
-  &lt;!-- MESSAGES --&gt;
-
-  &lt;wsdl:message name="DoInOnlyRequestMessage"&gt;
-    &lt;wsdl:part name="input" element="impl:DoInOnlyRequest"/&gt;
-  &lt;/wsdl:message&gt;
-
-  &lt;wsdl:message name="TwoWayOneParameterEchoRequestMessage"&gt;
-    &lt;wsdl:part name="input" element="impl:TwoWayOneParameterEchoRequest"/&gt;
-  &lt;/wsdl:message&gt;
-  &lt;wsdl:message name="TwoWayOneParameterEchoResponseMessage"&gt;
-    &lt;wsdl:part name="output" element="impl:TwoWayOneParameterEchoResponse"/&gt;
-  &lt;/wsdl:message&gt;
-
-  &lt;wsdl:message name="NoParametersRequestMessage"&gt;
-    &lt;wsdl:part name="input" element="impl:NoParametersRequest"/&gt;
-  &lt;/wsdl:message&gt;
-  &lt;wsdl:message name="NoParametersResponseMessage"&gt;
-    &lt;wsdl:part name="output" element="impl:NoParametersResponse"/&gt;
-  &lt;/wsdl:message&gt;
-
-  &lt;wsdl:message name="MultipleParametersAddItemRequestMessage"&gt;
-    &lt;wsdl:part name="input" element="impl:MultipleParametersAddItemRequest"/&gt;
-  &lt;/wsdl:message&gt;
-  &lt;wsdl:message name="MultipleParametersAddItemResponseMessage"&gt;
-    &lt;wsdl:part name="output" element="impl:MultipleParametersAddItemResponse"/&gt;
-  &lt;/wsdl:message&gt;
-
-
-  &lt;!-- Port type (operations) --&gt;
-
-  &lt;wsdl:portType name="Axis2UserGuidePortType"&gt;
-
-    &lt;wsdl:operation name="DoInOnly" parameterOrder="input"&gt;
-      &lt;wsdl:input name="DoInOnlyRequestMessage"
-                  message="impl:DoInOnlyRequestMessage"/&gt;
-    &lt;/wsdl:operation&gt;
-
-    &lt;wsdl:operation name="TwoWayOneParameterEcho" parameterOrder="input"&gt;
-      &lt;wsdl:input name="TwoWayOneParameterEchoRequestMessage"
-                  message="impl:TwoWayOneParameterEchoRequestMessage"/&gt;
-      &lt;wsdl:output name="TwoWayOneParameterEchoResponseMessage"
-                  message="impl:TwoWayOneParameterEchoResponseMessage"/&gt;
-    &lt;/wsdl:operation&gt;
-
-    &lt;wsdl:operation name="NoParameters" parameterOrder="input"&gt;
-      &lt;wsdl:input name="NoParametersRequestMessage"
-                  message="impl:NoParametersRequestMessage"/&gt;
-      &lt;wsdl:output name="NoParametersResponseMessage"
-                   message="impl:NoParametersResponseMessage"/&gt;
-    &lt;/wsdl:operation&gt;
-
-    &lt;wsdl:operation name="MultipleParametersAddItem" parameterOrder="input"&gt;
-      &lt;wsdl:input name="MultipleParametersAddItemRequestMessage"
-                  message="impl:MultipleParametersAddItemRequestMessage"/&gt;
-      &lt;wsdl:output name="MultipleParametersAddItemResponseMessage"
-                  message="impl:MultipleParametersAddItemResponseMessage"/&gt;
-    &lt;/wsdl:operation&gt;
-
-  &lt;/wsdl:portType&gt;
-
-
-  &lt;!-- BINDING (bind operations) --&gt;
-  &lt;wsdl:binding
-     name="Axis2UserGuideSoapBinding"
-     type="impl:Axis2UserGuidePortType"&gt;
-    &lt;wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
-
-    &lt;wsdl:operation name="DoInOnly"&gt;
-      &lt;wsdlsoap:operation soapAction="DoInOnly"/&gt;
-      &lt;wsdl:input&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:input&gt;
-    &lt;/wsdl:operation&gt;
-
-    &lt;wsdl:operation name="TwoWayOneParameterEcho"&gt;
-      &lt;wsdlsoap:operation soapAction="TwoWayOneParameterEcho"/&gt;
-      &lt;wsdl:input&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:input&gt;
-      &lt;wsdl:output&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:output&gt;
-    &lt;/wsdl:operation&gt;
-
-    &lt;wsdl:operation name="NoParameters"&gt;
-      &lt;wsdlsoap:operation soapAction="NoParameters"/&gt;
-      &lt;wsdl:input&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:input&gt;
-      &lt;wsdl:output&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:output&gt;
-    &lt;/wsdl:operation&gt;
-
-    &lt;wsdl:operation name="MultipleParametersAddItem"&gt;
-      &lt;wsdlsoap:operation soapAction="MultipleParametersAddItem"/&gt;
-      &lt;wsdl:input&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:input&gt;
-      &lt;wsdl:output&gt;
-        &lt;wsdlsoap:body use="literal"/&gt;
-      &lt;/wsdl:output&gt;
-    &lt;/wsdl:operation&gt;
-  &lt;/wsdl:binding&gt;
-
-
-  &lt;!-- SERVICE --&gt;
-
-  &lt;wsdl:service name="Axis2UserGuideService"&gt;
-    &lt;wsdl:port binding="impl:Axis2UserGuideSoapBinding"
-               name="Axis2UserGuide"&gt;
-      &lt;wsdlsoap:address location="http://localhost:8080/axis2/services/Axis2UserGuide"/&gt;
-    &lt;/wsdl:port&gt;
-  &lt;/wsdl:service&gt;
-&lt;/wsdl:definitions&gt;</pre>
-</body>
-</html>
+<?xml version="1.0" encoding=""?>
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+<head>
+  <meta http-equiv="content-type" content="" />
+  <title>Code Listing 4: Generating clients from the WSDL file</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all" />
+</head>
+
+<body>
+<h1>Code Listing 5 - Generating Clients from the WSDL File</h1>
+<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
+&lt;wsdl:definitions
+   xmlns:apachesoap="http://xml.apache.org/xml-soap"
+   xmlns:impl="http://apache.org/axis2/Axis2UserGuide"
+   xmlns:intf="http://apache.org/axis2/Axis2UserGuide"
+   xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+   xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
+   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+   targetNamespace="http://apache.org/axis2/Axis2UserGuide"&gt;
+
+  &lt;wsdl:types&gt;
+    &lt;schema
+       elementFormDefault="qualified"
+       targetNamespace="http://apache.org/axis2/Axis2UserGuide"
+       xmlns="http://www.w3.org/2001/XMLSchema"&gt;
+      
+      &lt;!-- ELEMENTS --&gt;
+      
+      &lt;element name="DoInOnlyRequest"&gt;
+        &lt;complexType&gt;
+          &lt;sequence&gt;
+            &lt;element name="messageString" type="xsd:string"/&gt;
+          &lt;/sequence&gt;
+        &lt;/complexType&gt;
+      &lt;/element&gt;
+      
+      &lt;element name="TwoWayOneParameterEchoRequest"&gt;
+        &lt;complexType&gt;
+          &lt;sequence&gt;
+            &lt;element name="echoString" type="xsd:string"/&gt;
+          &lt;/sequence&gt;
+        &lt;/complexType&gt;
+      &lt;/element&gt;
+      &lt;element name="TwoWayOneParameterEchoResponse"&gt;
+        &lt;complexType&gt;
+          &lt;sequence&gt;
+            &lt;element name="echoString" type="xsd:string"/&gt;
+          &lt;/sequence&gt;
+        &lt;/complexType&gt;
+      &lt;/element&gt;
+      
+      &lt;element name="NoParametersRequest"&gt;
+        &lt;complexType/&gt;
+      &lt;/element&gt;
+      &lt;element name="NoParametersResponse"&gt;
+        &lt;complexType/&gt;
+      &lt;/element&gt;
+      
+      &lt;element name="MultipleParametersAddItemRequest"&gt;
+        &lt;complexType&gt;
+          &lt;sequence&gt;
+            &lt;element name="itemId" type="xsd:int"/&gt;
+            &lt;element name="itemName" type="xsd:string"/&gt;
+            &lt;element name="price" type="xsd:float"/&gt;
+            &lt;element name="description" type="xsd:string"/&gt;
+          &lt;/sequence&gt;
+        &lt;/complexType&gt;
+      &lt;/element&gt;
+
+      &lt;element name="MultipleParametersAddItemResponse"&gt;
+        &lt;complexType&gt;
+          &lt;sequence&gt;
+          &lt;element name="itemId" type="xsd:int"/&gt;
+          &lt;element name="successfulAdd" type="xsd:boolean"/&gt;
+          &lt;/sequence&gt;
+        &lt;/complexType&gt;
+      &lt;/element&gt;
+
+    &lt;/schema&gt;
+  &lt;/wsdl:types&gt;
+
+  
+  &lt;!-- MESSAGES --&gt;
+
+  &lt;wsdl:message name="DoInOnlyRequestMessage"&gt;
+    &lt;wsdl:part name="input" element="impl:DoInOnlyRequest"/&gt;
+  &lt;/wsdl:message&gt;
+
+  &lt;wsdl:message name="TwoWayOneParameterEchoRequestMessage"&gt;
+    &lt;wsdl:part name="input" element="impl:TwoWayOneParameterEchoRequest"/&gt;
+  &lt;/wsdl:message&gt;
+  &lt;wsdl:message name="TwoWayOneParameterEchoResponseMessage"&gt;
+    &lt;wsdl:part name="output" element="impl:TwoWayOneParameterEchoResponse"/&gt;
+  &lt;/wsdl:message&gt;
+
+  &lt;wsdl:message name="NoParametersRequestMessage"&gt;
+    &lt;wsdl:part name="input" element="impl:NoParametersRequest"/&gt;
+  &lt;/wsdl:message&gt;
+  &lt;wsdl:message name="NoParametersResponseMessage"&gt;
+    &lt;wsdl:part name="output" element="impl:NoParametersResponse"/&gt;
+  &lt;/wsdl:message&gt;
+
+  &lt;wsdl:message name="MultipleParametersAddItemRequestMessage"&gt;
+    &lt;wsdl:part name="input" element="impl:MultipleParametersAddItemRequest"/&gt;
+  &lt;/wsdl:message&gt;
+  &lt;wsdl:message name="MultipleParametersAddItemResponseMessage"&gt;
+    &lt;wsdl:part name="output" element="impl:MultipleParametersAddItemResponse"/&gt;
+  &lt;/wsdl:message&gt;
+
+
+  &lt;!-- Port type (operations) --&gt;
+
+  &lt;wsdl:portType name="Axis2UserGuidePortType"&gt;
+
+    &lt;wsdl:operation name="DoInOnly" parameterOrder="input"&gt;
+      &lt;wsdl:input name="DoInOnlyRequestMessage"
+                  message="impl:DoInOnlyRequestMessage"/&gt;
+    &lt;/wsdl:operation&gt;
+
+    &lt;wsdl:operation name="TwoWayOneParameterEcho" parameterOrder="input"&gt;
+      &lt;wsdl:input name="TwoWayOneParameterEchoRequestMessage"
+                  message="impl:TwoWayOneParameterEchoRequestMessage"/&gt;
+      &lt;wsdl:output name="TwoWayOneParameterEchoResponseMessage"
+                  message="impl:TwoWayOneParameterEchoResponseMessage"/&gt;
+    &lt;/wsdl:operation&gt;
+
+    &lt;wsdl:operation name="NoParameters" parameterOrder="input"&gt;
+      &lt;wsdl:input name="NoParametersRequestMessage"
+                  message="impl:NoParametersRequestMessage"/&gt;
+      &lt;wsdl:output name="NoParametersResponseMessage"
+                   message="impl:NoParametersResponseMessage"/&gt;
+    &lt;/wsdl:operation&gt;
+
+    &lt;wsdl:operation name="MultipleParametersAddItem" parameterOrder="input"&gt;
+      &lt;wsdl:input name="MultipleParametersAddItemRequestMessage"
+                  message="impl:MultipleParametersAddItemRequestMessage"/&gt;
+      &lt;wsdl:output name="MultipleParametersAddItemResponseMessage"
+                  message="impl:MultipleParametersAddItemResponseMessage"/&gt;
+    &lt;/wsdl:operation&gt;
+
+  &lt;/wsdl:portType&gt;
+
+
+  &lt;!-- BINDING (bind operations) --&gt;
+  &lt;wsdl:binding
+     name="Axis2UserGuideSoapBinding"
+     type="impl:Axis2UserGuidePortType"&gt;
+    &lt;wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
+
+    &lt;wsdl:operation name="DoInOnly"&gt;
+      &lt;wsdlsoap:operation soapAction="DoInOnly"/&gt;
+      &lt;wsdl:input&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:input&gt;
+    &lt;/wsdl:operation&gt;
+
+    &lt;wsdl:operation name="TwoWayOneParameterEcho"&gt;
+      &lt;wsdlsoap:operation soapAction="TwoWayOneParameterEcho"/&gt;
+      &lt;wsdl:input&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:input&gt;
+      &lt;wsdl:output&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:output&gt;
+    &lt;/wsdl:operation&gt;
+
+    &lt;wsdl:operation name="NoParameters"&gt;
+      &lt;wsdlsoap:operation soapAction="NoParameters"/&gt;
+      &lt;wsdl:input&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:input&gt;
+      &lt;wsdl:output&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:output&gt;
+    &lt;/wsdl:operation&gt;
+
+    &lt;wsdl:operation name="MultipleParametersAddItem"&gt;
+      &lt;wsdlsoap:operation soapAction="MultipleParametersAddItem"/&gt;
+      &lt;wsdl:input&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:input&gt;
+      &lt;wsdl:output&gt;
+        &lt;wsdlsoap:body use="literal"/&gt;
+      &lt;/wsdl:output&gt;
+    &lt;/wsdl:operation&gt;
+  &lt;/wsdl:binding&gt;
+
+
+  &lt;!-- SERVICE --&gt;
+
+  &lt;wsdl:service name="Axis2UserGuideService"&gt;
+    &lt;wsdl:port binding="impl:Axis2UserGuideSoapBinding"
+               name="Axis2UserGuide"&gt;
+      &lt;wsdlsoap:address location="http://localhost:8080/axis2/services/Axis2UserGuide"/&gt;
+    &lt;/wsdl:port&gt;
+  &lt;/wsdl:service&gt;
+&lt;/wsdl:definitions&gt;</pre>
+</body>
+</html>
Index: userguide.html
===================================================================
--- userguide.html	(revision 516304)
+++ userguide.html	(working copy)
@@ -1,363 +1,361 @@
-<?xml version="1.0" encoding=""?>
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
-<head>
-  <meta http-equiv="content-type" content="" />
-  <title>Apache Axis2 User's Guide- Introducing Axis2</title>
-  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
-  media="all" />
-</head>
-
-<body xml:lang="en" lang="en">
-<h1>Apache Axis2 User's Guide</h1>
-
-<p>This guide provides a starting place for users new to Apache Axis2. It
-also provides information for more experienced users, such as how to use
-Axis2 to create and deploy Web services as well as how to use WSDL to
-generate both clients and services.</p>
-For more experienced users of Apache Axis2, we would recommend you start with
-the <a href="adv-userguide.html">Advance User's Guide.</a> <a
-name="intro"></a>
-
-<h1>- Introducing Axis2</h1>
-
-<p>This section introduces Axis2 and its structure, including an explanation
-of various directories/files included in the latest Axis2 <a
-href="http://ws.apache.org/axis2/download.cgi">download</a>.</p>
-
-<h2>Content</h2>
-<ul>
-  <li><a href="userguide.html#intro"><strong>Introducing
-    Axis2</strong></a><br />
-
-    <ul>
-      <li><a href="userguide.html#whatis"><strong>What is
-      Axis2</strong></a></li>
-      <li><a href="userguide.html#underhood"><strong>What's under the
-        hood?</strong></a></li>
-      <li><a href="userguide.html#handlessoap"><strong>How Axis2 handles SOAP
-        messages</strong></a></li>
-      <li><a href="userguide.html#distributions"><strong>Axis2
-        distributions</strong></a></li>
-      <li><a href="userguide.html#sbd"><strong>The Axis2 Standard Binary
-        Distribution</strong></a></li>
-      <li><a href="userguide.html#hierarchy"><strong>Axis2.war Directory
-        hierarchy</strong></a></li>
-      <li><a href="userguide.html#docs"><strong>Axis2 Documents
-        Distribution</strong></a></li>
-      <li><a href="userguide.html#clients"><strong>Axis2 and
-        clients</strong></a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-installingtesting.html#installingtesting">Installing
-    and testing client code</a></li>
-  <li><a href="userguide-introtoservices.html#introservices">Introduction to
-    Services</a><br />
-
-    <ul>
-      <li><a href="userguide-introtoservices.html#messageexchange">Message
-        Exchange Patterns</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-creatingclients.html#createclients">Creating
-    Clients</a><br />
-
-    <ul>
-      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
-        Client Generation Method</a></li>
-      <li><a href="userguide-creatingclients.html#generating">Generating
-        Clients</a></li>
-      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
-        (ADB)</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-buildingservices.html#buildservices">Building
-    Services</a><br />
-
-    <ul>
-      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
-        Comfortable with Available Options</a></li>
-      <li><a href="userguide-buildingservices.html#createscratch">Creating a
-        service from scratch</a></li>
-      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
-        Plain Old Java Objects</a></li>
-      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
-        running an Axis2 service created from WSDL</a></li>
-    </ul>
-  </li>
-  <li><a href="userguide-samples.html">Samples</a></li>
-  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
-</ul>
-<a name="whatis"></a>
-
-<h2>What is Axis2?</h2>
-
-<p>The Apache Axis2 project is a Java-based implementation of both the client
-and server sides of the Web services equation. Designed to take advantage of
-the lessons learned from Apache Axis 1.0, Apache Axis2 provides a complete
-object model and a modular architecture that makes its straight forward to
-add functionality and support for new Web services-related specifications and
-recommendations.</p>
-
-<p>Axis2 enables you to easily perform the following tasks:</p>
-<ul>
-  <li>Send SOAP messages</li>
-  <li>Receive and process SOAP messages</li>
-  <li>Create a Web service out of a plain Java class</li>
-  <li>Create implementation classes for both server and client using WSDL</li>
-  <li>Easily retrieve the WSDL for a service</li>
-  <li>Send and receive SOAP messages with attachments</li>
-  <li>Create or utilize a REST-based Web service</li>
-  <li>Create or utilize services that take advantage of the <a
-    href="http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf">WS-Security</a>,
-    <a
-    href="http://xml.coverpages.org/ws-reliablemessaging20030313.pdf">WS-ReliableMessaging</a>,
-    <a href="http://www.w3.org/2002/ws/addr/">WS-Addressing</a>, <a
-    href="http://dev2dev.bea.com/pub/a/2004/03/ws-coordination.html">WS-Coordination</a>,
-    and <a
-    href="ftp://www6.software.ibm.com/software/developer/library/WS-AtomicTransaction.pdf">WS-Atomic
-    Transaction</a> recommendations</li>
-  <li>Use Axis2's modular structure to easily add support for new
-    recommendations as they emerge</li>
-</ul>
-
-<p>Many more features exist as well, but this user guide concentrates on
-showing you how to accomplish the first five tasks on this list.</p>
-<a name="underhood"></a>
-
-<h2>What's Under the Hood?</h2>
-
-<p>To understand Axis2 and what it does, you must have a good idea of the
-life cycle of a Web services message. Typically, it looks something like
-this:</p>
-
-<p><img alt="Lifecycle of a Web services message" src="images/fig01.jpg"
-/><br clear="all" />
-</p>
-
-<p>The sending application creates the original SOAP message, an XML message
-that consists of headers and a body. (For more information on SOAP, see "<a
-href="userguide-introtoservices.html/">Introduction to Services</a>".) If the
-system requires the use of WS* recommendations such as WS-Addressing or
-WS-Security, the message may undergo additional processing before it leaves
-the sender. Once the message itself is ready, it is sent via a particular
-transport such as HTTP, JMS, and so on.</p>
-
-<p>The message works its way over to the receiver, which takes in the message
-via the transport listener. (In other words, if the application doesn't have
-an HTTP listener running, it's not going to receive any HTTP messages.)
-Again, if the message is part of a system that requires the use of
-WS-Security or other recommendations, it may need additional processing for
-the purpose of checking credentials or decrypting sensitive information.
-Finally, a dispatcher determines the specific application (or other
-component, such as a Java method) for which the message was intended, and
-sends it to that component. That component is part of an overall application
-designed to work with the data being sent back and forth.</p>
-<a name="handlessoap"></a>
-
-<h2>How Axis2 Handles SOAP Messages</h2>
-
-<p>Axis2 can handle processing for both the sender and the receiver in a
-transaction. From the Axis2 perspective, the structure looks like this:</p>
-
-<p><img alt="Axis2 handles SOAP messages" src="images/fig02.jpg" /><br
-clear="all" />
-</p>
-
-<p>On each end, you have an application designed to deal with the (sent or
-received) messages. In the middle, you have Axis2. Or rather, you CAN have
-Axis2. The value of Web services is that the sender and receiver (each of
-which can be either the server or the client) don't even have to be on the
-same platform, much less running the same application. But assuming that
-Axis2 is running on both sides, the process looks like this:</p>
-<ul>
-  <li>The sender creates the SOAP message.</li>
-  <li>Axis "handlers" perform any necessary actions on that message such as
-    encryption of WS-Security related messages.</li>
-  <li>The Transport sender sends the message.</li>
-  <li>On the receiving end, the transport listener detects the message.</li>
-  <li>The transport listener passes the message on to any handlers on the
-    receiving side.</li>
-  <li>Once the message has been processed in the "pre-dispatch" phase, it is
-    handed off to the dispatchers, which pass it on to the appropriate
-    application.</li>
-</ul>
-
-<p>In Axis2, these actions are broken down into "phases", with several
-pre-defined phases such as the "pre-dispatch", "dispatch," and "message
-processing" being built into Axis2. Each phase is a collection of "handlers".
-Axis2 enables you to control what handlers go into which phases, and the
-order in which handlers are executed within phases. You can also add your own
-phases and handlers.</p>
-
-<p>Handlers come from "modules" that can be plugged into a running Axis2
-system. These modules, such as Rampart, which provides an implementation of
-WS-Security, and Sandesha, which provides an implementation of
-WS-ReliableMessaging, are the main extensibility mechanism in Axis2.</p>
-<a name="distributions"></a>
-
-<h2>Axis2 Distributions</h2>
-
-<p>Axis2 is released in several <a
-href="http://ws.apache.org/axis2/download/1_1/download.cgi">distributions</a>.
-Which one you need depends on what you'll be doing with it.</p>
-<a name="sbd"></a>
-
-<h3>The Axis2 Standard Binary Distribution</h3>
-
-<p>If you're developing services and applications, you'll need the Axis2 <a
-href="http://ws.apache.org/axis2/download/1_1/download.cgi#std-bin">Standard
-Binary Distribution</a>. The distribution includes all of the necessary *.jar
-files, as well as a variety of scripts that ease development. It has the
-following structure:</p>
-
-<p><b>Code Listing 1: Axis2 Standard Binary Distribution</b></p>
-<pre>bin
-      axis2.bat
-      axis2.sh
-      axis2server.bat
-      axis2server.sh
-      java2wsdl.bat
-      java2wsdl.sh
-      wsdl2java.bat
-      wsdl2java.sh
-      setenv.sh
-lib
-      activation-1.1.jar
-      ...
-      XmlSchema.jar
-repository
-	modules
-         modules.list 
-	 addressing-1.1.mar
- 	 ..
-	services
-         services.list
-	 version.aar
-         ..
-samples
-      ...
-webapp
-      ...
-conf
-    axis2.xml
-
-LICENSE.txt
-README.txt
-NOTICE.txt
-INSTALL.txt
-release-notes.html</pre>
-
-<p>The bin directory includes a number of useful scripts, including axis2.bat
-(or axis2.sh), which enables you to easily execute a Java command without
-having to manually add all of the Axis2 jar files to the classpath,
-java2wsdl.bat (and .sh) and wsdl2java.bat (and .sh), which enables you to
-easily generate Java code from a WSDL file and vice versa, and
-axis2server.bat (and sh), a simple Web server that enables you to build
-Axis2's capability to send and receive messages into your own application.</p>
-
-<p>As expected, the lib directory includes all of the necessary jar files.
-Services and modules are added to the repository directory. Axis2 comes with
-a standard module implementing WS-Addressing, and you can add any other
-necessary modules such as Rampart to the repository/modules directory.</p>
-
-<p>conf directory includes the axis2.xml which is the global deployment
-descriptor.</p>
-
-<p>Finally, the samples directory includes all of the sample code distributed
-with Axis2. You can find a list of the samples and their descriptions <a
-href="userguide-samples.html">here</a>.</p>
-<a name="hierarchy"></a>
-
-<h2>axis2.war Distribution Directory Hierarchy</h2>
-
-<p>axis2.war is available in <a
-href="http://ws.apache.org/axis2/download/1_1/download.cgi#war">WAR (Web
-Archive) Distribution</a>. The server side of Axis2 ships as a J2EE
-application, and has the following structure shown in Code Listing 2.</p>
-
-<p><b>Code Listing 2: Server Side of Axis2</b></p>
-<pre>axis2-web 
-META-INF
-WEB-INF
-    classes 
-    conf
-        axis2.xml 
-    lib
-        activation.jar
-        ...
-        xmlSchema.jar
-    modules
-        modules.list 
-        addressing.mar
-        ...
-        soapmonitor.mar
-    services
-        services.list
-        aservice.aar
-        ...
-        version.aar
-    web.xml</pre>
-
-<p>Starting at the top, axis2-web is a collection of JSPs that make up the <a
-href="webadminguide.html">Axis2 administration application</a>, through which
-you can perform any needed actions such as adding services and engaging and
-dis-engaging modules. The WEB-INF directory represents the actual Axis2
-application, including all of the *.jar files, any included modules, and even
-the deployed services themselves.</p>
-
-<p>The classes directory holds any classes or properties files that are
-needed by Axis2 itself, such as log4j.properties. Any actual services to be
-handled by the system reside in the services directory in the form of an axis
-archive, or *.aar file. This file contains any classes related to the
-service, as well as the services.xml file, which controls any additional
-requirements, such as the definition of message senders and message
-receivers.</p>
-
-<p>But the main file in all this it is axis2.xml, which controls how the
-application deals with received messages. It defines message receivers and
-transport receivers, as well as defining transport senders and determining
-which modules are active. It also defines the order of phases, and the
-handlers to be executed within each phase.</p>
-
-<p>You can control all of this information through the use of the Web
-application, but if you restart the Axis2 application, these changes are lost
-and the server goes back to the definitions in the axis2.xml file.</p>
-
-<p>Axis2 also provides a third distribution, the <a
-href="http://ws.apache.org/axis2/download/1_1/download.cgi#src">source
-distribution</a>, which enables you to generate this war file yourself.</p>
-<a id="docs"></a>
-
-<h2>Axis2 Documentation Distribution Directory Hierarchy</h2>
-
-<p>The Documents distribution includes all Axis2 documentation including the
-xdcos and javadocs. It has the following structure:</p>
-
-<p><b>Code Listing 3: Axis2 Documents Distribution</b></p>
-<pre>docs
-      javadocs
-      xdocs
-
-LICENSE.txt
-README.txt
-release-notes.html</pre>
-
-<p>The javadocs directory includes all of the standard <a
-href="../../javadocs/index.html">API documentation</a> for the Axis2 API,
-with more conversational documentation (like this document) in the xdocs
-directory.</p>
-<a name="clients"></a>
-
-<h2>Axis2 and Clients</h2>
-
-<p>Now that explains how Axis2 behaves as part of a Web application, but what
-about a standalone client that is not part of a J2EE application? In that
-case, a sender can use the Axis2 default properties, in other words, no
-special handlers, and so on. But you also have the option to tell the client
-to load its own copy of the axis2.xml file and behave accordingly.</p>
-
-<p><strong>See Next Section</strong> - <a
-href="userguide-installingtesting.html#installingtesting">Installing and
-Testing Client Code</a></p>
-</body>
-</html>
+<?xml version="1.0" encoding=""?>
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+<head>
+  <meta http-equiv="content-type" content="" />
+  <title>Apache Axis2 User's Guide- Introducing Axis2</title>
+  <link href="../css/axis-docs.css" rel="stylesheet" type="text/css"
+  media="all" />
+</head>
+
+<body xml:lang="en" lang="en">
+<h1>Apache Axis2 User's Guide</h1>
+
+<p>This guide provides a starting place for users who are new to Apache
+Axis2. It also covers some advanced topics, such as how to use Axis2 to
+create and deploy Web services as well as how to use WSDL to generate both
+clients and services.</p>
+For experienced users of Apache Axis2, we recommend the <a
+href="adv-userguide.html">Advanced User's Guide.</a> <a name="intro"></a>
+
+<h1>Introducing Axis2</h1>
+
+<p>This section introduces Axis2 and its structure, including an explanation
+of various directories/files included in the latest Axis2 <a
+href="http://ws.apache.org/axis2/download.cgi">download</a>.</p>
+
+<h2>Content</h2>
+<ul>
+  <li><a href="userguide.html#intro"><strong>Introducing
+    Axis2</strong></a><br />
+
+    <ul>
+      <li><a href="userguide.html#whatis"><strong>What is
+      Axis2?</strong></a></li>
+      <li><a href="userguide.html#underhood"><strong>What's under the
+        hood?</strong></a></li>
+      <li><a href="userguide.html#handlessoap"><strong>How Axis2 handles SOAP
+        messages</strong></a></li>
+      <li><a href="userguide.html#distributions"><strong>Axis2
+        Distributions</strong></a></li>
+      <li><a href="userguide.html#sbd"><strong>The Axis2 Standard Binary
+        Distribution</strong></a></li>
+      <li><a href="userguide.html#hierarchy"><strong>Axis2.war Directory
+        Hierarchy</strong></a></li>
+      <li><a href="userguide.html#docs"><strong>Axis2 Documents
+        Distribution</strong></a></li>
+      <li><a href="userguide.html#clients"><strong>Axis2 and
+        Clients</strong></a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-installingtesting.html#installingtesting">Installing
+    and Testing Client Code</a></li>
+  <li><a href="userguide-introtoservices.html#introservices">Introduction to
+    Services</a><br />
+
+    <ul>
+      <li><a href="userguide-introtoservices.html#messageexchange">Message
+        Exchange Patterns</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-creatingclients.html#createclients">Creating
+    Clients</a><br />
+
+    <ul>
+      <li><a href="userguide-creatingclients.html#choosingclient">Choosing a
+        Client Generation Method</a></li>
+      <li><a href="userguide-creatingclients.html#generating">Generating
+        Clients</a></li>
+      <li><a href="userguide-creatingclients.html#adb">Axis Data Binding
+        (ADB)</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-buildingservices.html#buildservices">Building
+    Services</a><br />
+
+    <ul>
+      <li><a href="userguide-buildingservices.html#getcomfortable">Getting
+        Comfortable with Available Options</a></li>
+      <li><a href="userguide-buildingservices.html#createscratch">Creating a
+        Service from Scratch</a></li>
+      <li><a href="userguide-buildingservices.html#deploypojo">Deploying
+        Plain Old Java Objects</a></li>
+      <li><a href="userguide-buildingservices.html#deployrun">Deploying and
+        Running an Axis2 Service Created from WSDL</a></li>
+    </ul>
+  </li>
+  <li><a href="userguide-samples.html">Samples</a></li>
+  <li><a href="userguide-forfurtherstudy.html">For Further Study</a></li>
+</ul>
+<a name="whatis"></a>
+
+<h2>What is Axis2?</h2>
+
+<p>The Apache Axis2 project is a Java-based implementation of both the client
+and server sides of the Web services equation. Designed to take advantage of
+the lessons learned from Apache Axis 1.0, Apache Axis2 provides a complete
+object model and a modular architecture that makes it easy to add
+functionality and support for new Web services-related specifications and
+recommendations.</p>
+
+<p>Axis2 enables you to easily perform the following tasks:</p>
+<ul>
+  <li>Send SOAP messages</li>
+  <li>Receive and process SOAP messages</li>
+  <li>Create a Web service out of a plain Java class</li>
+  <li>Create implementation classes for both the server and client using
+  WSDL</li>
+  <li>Easily retrieve the WSDL for a service</li>
+  <li>Send and receive SOAP messages with attachments</li>
+  <li>Create or utilize a REST-based Web service</li>
+  <li>Create or utilize services that take advantage of the <a
+    href="http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf">WS-Security</a>,
+    <a
+    href="http://xml.coverpages.org/ws-reliablemessaging20030313.pdf">WS-ReliableMessaging</a>,
+    <a href="http://www.w3.org/2002/ws/addr/">WS-Addressing</a>, <a
+    href="http://dev2dev.bea.com/pub/a/2004/03/ws-coordination.html">WS-Coordination</a>,
+    and <a
+    href="ftp://www6.software.ibm.com/software/developer/library/WS-AtomicTransaction.pdf">WS-Atomic
+    Transaction</a> recommendations</li>
+  <li>Use Axis2's modular structure to easily add support for new
+    recommendations as they emerge</li>
+</ul>
+
+<p>Many more features exist as well, but this user guide concentrates on
+showing you how to accomplish the first five tasks on this list.</p>
+<a name="underhood"></a>
+
+<h2>What's Under the Hood?</h2>
+
+<p>To understand Axis2 and what it does, you must have a good idea of the
+life cycle of a Web services message. Typically, it looks something like
+this:</p>
+
+<p><img alt="Lifecycle of a Web services message" src="images/fig01.jpg"
+/><br clear="all" />
+</p>
+
+<p>The sending application creates the original SOAP message, an XML message
+that consists of headers and a body. (For more information on SOAP, see "<a
+href="userguide-introtoservices.html/">Introduction to Services</a>".) If the
+system requires the use of WS* recommendations such as WS-Addressing or
+WS-Security, the message may undergo additional processing before it leaves
+the sender. Once the message is ready, it is sent via a particular transport
+such as HTTP, JMS, and so on.</p>
+
+<p>The message works its way over to the receiver, which takes in the message
+via the transport listener. (In other words, if the application doesn't have
+an HTTP listener running, it's not going to receive any HTTP messages.)
+Again, if the message is part of a system that requires the use of
+WS-Security or other recommendations, it may need additional processing for
+the purpose of checking credentials or decrypting sensitive information.
+Finally, a dispatcher determines the specific application (or other
+component, such as a Java method) for which the message was intended, and
+sends it to that component. That component is part of an overall application
+designed to work with the data being sent back and forth.</p>
+<a name="handlessoap"></a>
+
+<h2>How Axis2 Handles SOAP Messages</h2>
+
+<p>Axis2 can handle processing for both the sender and the receiver in a
+transaction. From the Axis2 perspective, the structure looks like this:</p>
+
+<p><img alt="Axis2 handles SOAP messages" src="images/fig02.jpg" /><br
+clear="all" />
+</p>
+
+<p>On each end, you have an application designed to deal with the (sent or
+received) messages. In the middle, you have Axis2, or rather, you
+<em>can</em> have Axis2. The value of Web services is that the sender and
+receiver (each of which can be either the server or the client) don't even
+have to be on the same platform, much less running the same application.
+Assuming that Axis2 is running on both sides, the process looks like this:</p>
+<ul>
+  <li>The sender creates the SOAP message.</li>
+  <li>Axis "handlers" perform any necessary actions on that message such as
+    encryption of WS-Security related messages.</li>
+  <li>The transport sender sends the message.</li>
+  <li>On the receiving end, the transport listener detects the message.</li>
+  <li>The transport listener passes the message on to any handlers on the
+    receiving side.</li>
+  <li>Once the message has been processed in the "pre-dispatch" phase, it is
+    handed off to the dispatchers, which pass it on to the appropriate
+    application.</li>
+</ul>
+
+<p>In Axis2, these actions are broken down into "phases", with several
+pre-defined phases, such as the "pre-dispatch", "dispatch," and "message
+processing", being built into Axis2. Each phase is a collection of
+"handlers". Axis2 enables you to control what handlers go into which phases,
+and the order in which the handlers are executed within the phases. You can
+also add your own phases and handlers.</p>
+
+<p>Handlers come from "modules" that can be plugged into a running Axis2
+system. These modules, such as Rampart, which provides an implementation of
+WS-Security, and Sandesha, which provides an implementation of
+WS-ReliableMessaging, are the main extensibility mechanisms in Axis2.</p>
+<a name="distributions"></a>
+
+<h2>Axis2 Distributions</h2>
+
+<p>Axis2 is released in several <a
+href="http://ws.apache.org/axis2/download/1_1/download.cgi">distributions</a>.
+Which one you need depends on what you'll be doing with it.</p>
+<a name="sbd"></a>
+
+<h3>The Axis2 Standard Binary Distribution</h3>
+
+<p>If you're developing services and applications, you'll need the Axis2 <a
+href="http://ws.apache.org/axis2/download/1_1/download.cgi#std-bin">Standard
+Binary Distribution</a>. The distribution includes all the necessary *.jar
+files, as well as a variety of scripts that ease development. It has the
+following structure.</p>
+
+<p><b>Code Listing 1: Axis2 Standard Binary Distribution</b></p>
+<pre>bin
+      axis2.bat
+      axis2.sh
+      axis2server.bat
+      axis2server.sh
+      java2wsdl.bat
+      java2wsdl.sh
+      wsdl2java.bat
+      wsdl2java.sh
+      setenv.sh
+lib
+      activation-1.1.jar
+      ...
+      XmlSchema.jar
+repository
+	modules
+         modules.list 
+	 addressing-1.1.mar
+ 	 ..
+	services
+         services.list
+	 version.aar
+         ..
+samples
+      ...
+webapp
+      ...
+conf
+    axis2.xml
+
+LICENSE.txt
+README.txt
+NOTICE.txt
+INSTALL.txt
+release-notes.html</pre>
+
+<p>The bin directory includes a number of useful scripts. They include
+axis2.bat (or axis2.sh), which enables you to easily execute a Java command
+without having to manually add all the Axis2 jar files to the classpath,
+java2wsdl.bat (and .sh) and wsdl2java.bat (and .sh), which enable you to
+easily generate Java code from a WSDL file and vice versa, and
+axis2server.bat (and sh), a simple Web server that enables you to build
+Axis2's capability to send and receive messages into your own application.</p>
+
+<p>As expected, the lib directory includes all the necessary .jar files.
+Services and modules are added to the repository directory. Axis2 comes with
+a standard module implementing WS-Addressing, and you can add any other
+necessary module such as Rampart to the repository/modules directory.</p>
+
+<p>conf directory includes the axis2.xml which is the global deployment
+descriptor.</p>
+
+<p>Finally, the samples directory includes all the sample code distributed
+with Axis2. See the list of <a href="userguide-samples.html">samples and
+their descriptions</a>.</p>
+<a name="hierarchy"></a>
+
+<h2>axis2.war Distribution Directory Hierarchy</h2>
+
+<p>axis2.war is available in <a
+href="http://ws.apache.org/axis2/download/1_1/download.cgi#war">WAR (Web
+Archive) Distribution</a>. The server side of Axis2 ships as a J2EE
+application, and has the following structure shown in Code Listing 2.</p>
+
+<p><b>Code Listing 2: Server Side of Axis2</b></p>
+<pre>axis2-web 
+META-INF
+WEB-INF
+    classes 
+    conf
+        axis2.xml 
+    lib
+        activation.jar
+        ...
+        xmlSchema.jar
+    modules
+        modules.list 
+        addressing.mar
+        ...
+        soapmonitor.mar
+    services
+        services.list
+        aservice.aar
+        ...
+        version.aar
+    web.xml</pre>
+
+<p>Starting at the top, axis2-web is a collection of JSPs that make up the <a
+href="webadminguide.html">Axis2 administration application</a>, through which
+you can perform any needed actions such as adding services and engaging and
+dis-engaging modules. The WEB-INF directory represents the actual Axis2
+application, including all the *.jar files, any included modules, and even
+the deployed services themselves.</p>
+
+<p>The classes directory holds any class or property files that are needed by
+Axis2 itself, such as log4j.properties. Any actual services to be handled by
+the system reside in the services directory in the form of an axis archive,
+or *.aar file. This file contains any classes related to the service, as well
+as the services.xml file, which controls any additional requirements, such as
+the definition of message senders and message receivers.</p>
+
+<p>The main file in all this is axis2.xml, which controls how the application
+deals with received messages. It defines message receivers and transport
+receivers, as well as defining transport senders and determining which
+modules are active. It also defines the order of phases, and the handlers to
+be executed within each phase.</p>
+
+<p>You can control all of this information through the use of the Web
+application, but if you restart the Axis2 application, these changes are lost
+and the server goes back to the definitions in the axis2.xml file.</p>
+
+<p>Axis2 also provides a third distribution, the <a
+href="http://ws.apache.org/axis2/download/1_1/download.cgi#src">source
+distribution</a>, which enables you to generate this .war file yourself.</p>
+<a id="docs"></a>
+
+<h2>Axis2 Documentation Distribution Directory Hierarchy</h2>
+
+<p>The Documents distribution includes all Axis2 documentation including the
+xdcos and javadocs. It has the following structure:</p>
+
+<p><b>Code Listing 3: Axis2 Documents Distribution</b></p>
+<pre>docs
+      javadocs
+      xdocs
+
+LICENSE.txt
+README.txt
+release-notes.html</pre>
+
+<p>The javadocs directory includes all the standard <a
+href="../../javadocs/index.html">API documentation</a> for the Axis2 API,
+with other documentation (like this document) in the xdocs directory.</p>
+<a name="clients"></a>
+
+<h2>Axis2 and Clients</h2>
+
+<p>Now that explains how Axis2 behaves as part of a Web application. What
+about a standalone client that is not part of a J2EE application? In that
+case, a sender can use the Axis2 default properties, in other words, no
+special handlers, and so on. But you also have the option to tell the client
+to load its own copy of the axis2.xml file and behave accordingly.</p>
+
+<p><strong>See Next Section</strong> - <a
+href="userguide-installingtesting.html#installingtesting">Installing and
+Testing Client Code</a></p>
+</body>
+</html>
