Index: src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWSEmitter.java
===================================================================
--- src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWSEmitter.java	(revision 562738)
+++ src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWSEmitter.java	(working copy)
@@ -8,14 +8,10 @@
 import org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter;
 import org.apache.axis2.wsdl.codegen.CodeGenerationException;
 import org.apache.axis2.wsdl.codegen.CodeGenConfiguration;
-import org.apache.axis2.wsdl.util.XSLTIncludeResolver;
-import org.apache.axis2.wsdl.databinding.TypeMapper;
 import org.apache.axis2.description.AxisService;
 import org.apache.axis2.description.WSDL2Constants;
-
 import java.util.Iterator;
 import java.util.Map;
-import java.util.HashMap;
 
 public abstract class JAXWSEmitter extends AxisServiceBasedMultiLanguageEmitter {
 
Index: src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java
===================================================================
--- src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java	(revision 562738)
+++ src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java	(working copy)
@@ -2148,7 +2148,7 @@
      * @return generated element
      * @throws DOMException
      */
-    private Element generateMethodElement(Document doc, String endpointName,
+    protected Element generateMethodElement(Document doc, String endpointName,
                                           AxisOperation axisOperation) throws DOMException {
         Element methodElement;
         List soapHeaderInputParameterList = new ArrayList();
@@ -2160,6 +2160,8 @@
         addAttribute(doc, "namespace", axisOperation.getName().getNamespaceURI(), methodElement);
         addAttribute(doc, "style", (String) getBindingPropertyFromOperation(
                 WSDLConstants.WSDL_1_1_STYLE, axisOperation.getName()), methodElement);
+        addAttribute(doc, "parameterstyle", (axisOperation.getParameter(
+                Constants.UNWRAPPED_KEY) != null)?"WRAPPPED":"BARE", methodElement);
         addAttribute(doc, "dbsupportname",
                 endpointName + localPart + DATABINDING_SUPPORTER_NAME_SUFFIX,
                 methodElement);
@@ -2195,6 +2197,16 @@
         if (WSDLUtil.isInputPresentForMEP(messageExchangePattern)) {
             methodElement.appendChild(getInputElement(doc,
                     axisOperation, soapHeaderInputParameterList));
+            if("jax-ws".equals(codeGenConfiguration.getOutputLanguage())){
+                AxisMessage inMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+                if (WSDLUtil.isOutputPresentForMEP(messageExchangePattern)) {
+                    AxisMessage outMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
+                    if(inMessage.getName().equals(outMessage.getName())){
+                        // in/out message
+                        addAttribute(doc, "useholder", "true", methodElement);
+                    }
+                }
+            }
         }
         if (WSDLUtil.isOutputPresentForMEP(messageExchangePattern)) {
             methodElement.appendChild(getOutputElement(doc,
@@ -2831,7 +2843,9 @@
                     this.mapper.getTypeMappingName(
                             inputMessage.getElementQName()),
                     operation.getName(),
-                    inputMessage.getElementQName()
+                    inputMessage.getElementQName(),
+                    inputMessage.getPartName(),
+                    false,false
             );
 
             paramElementList.add(mainParameter);
@@ -2987,12 +3001,17 @@
             addAttribute(doc, "localname", paramQName.getLocalPart(), qNameElement);
             paramElement.appendChild(qNameElement);
         }
+
         if (partName != null) {
             String javaName = null;
             if (JavaUtils.isJavaKeyword(partName)) {
                 javaName = JavaUtils.makeNonJavaKeyword(partName);
             } else {
-                javaName = JavaUtils.capitalizeFirstChar(JavaUtils.xmlNameToJava(partName));
+                if (codeGenConfiguration.getOutputLanguage().equals("jax-ws")) {
+                    javaName = JavaUtils.xmlNameToJavaIdentifier(JavaUtils.xmlNameToJava(partName));
+                } else {
+                    javaName = JavaUtils.capitalizeFirstChar(JavaUtils.xmlNameToJava(partName));   
+                }
             }
             addAttribute(doc, "partname", javaName, paramElement);
         }
@@ -3013,7 +3032,7 @@
      * @param operation
      * @return Returns Element.
      */
-    protected Element getOutputParamElement(Document doc, AxisOperation operation) {
+    protected Element   getOutputParamElement(Document doc, AxisOperation operation) {
         Element paramElement = doc.createElement("param");
         AxisMessage outputMessage = operation.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
         String typeMappingStr;
@@ -3056,6 +3075,16 @@
                 addAttribute(doc, "complextype", (String) parameter.getValue(), paramElement);
             }
         }
+        String partName = outputMessage.getPartName();
+        if (partName != null && codeGenConfiguration.getOutputLanguage().equals("jax-ws")) {
+            String javaName = null;
+            if (JavaUtils.isJavaKeyword(partName)) {
+                javaName = JavaUtils.makeNonJavaKeyword(partName);
+            } else {
+                javaName = JavaUtils.xmlNameToJavaIdentifier(JavaUtils.xmlNameToJava(partName));   
+            }
+            addAttribute(doc, "partname", javaName, paramElement);
+        }
 
         // this message has been unwrapped - find the correct references of the
         // the message by looking at the unwrapped details object and attach the
Index: src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl
===================================================================
--- src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl	(revision 562738)
+++ src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl	(working copy)
@@ -1,9 +1,7 @@
 <xsl:stylesheet version="1.0"
                 xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
     <xsl:output method="text"/>
-
     <xsl:variable name="targetNs" select="/javaConstruct/@targetNamespace"/>
-
     <xsl:template match="javaConstruct">package <xsl:value-of select="@package"/>;
 <xsl:for-each select="importList/import">
 import <xsl:value-of select="@value"/>;</xsl:for-each>
@@ -36,25 +34,51 @@
 
     <xsl:template match="method">
     <xsl:variable name="outparamcount" select="count(output/param)"/>
+    <xsl:variable name="parameterstyle" select="@parameterstyle"/>
+    <xsl:variable name="useholder" select="@useholder"/>
+    <xsl:variable name="style" select="@style"/>    
     /**<xsl:for-each select="input/param">
     * @param <xsl:value-of select="@name"/></xsl:for-each><xsl:if test="$outparamcount != 0">
     * @return
     *    <xsl:value-of select="output/param/@shorttype"/></xsl:if><xsl:for-each select="fault/param[@type!='']">
     * @throws <xsl:value-of select="@name"/></xsl:for-each>
     */
-    @javax.jws.WebMethod
-    <xsl:choose>
-        <xsl:when test="$outparamcount = 0">@javax.jws.Oneway</xsl:when>
-        <xsl:otherwise>@javax.jws.WebResult(targetNamespace = "<xsl:value-of select="$targetNs"/>")</xsl:otherwise>
+    @javax.jws.WebMethod<xsl:choose>
+        <xsl:when test="$outparamcount = 0"><xsl:text>
+    </xsl:text>@javax.jws.Oneway</xsl:when>
+        <xsl:when test="$useholder = 'true'"></xsl:when>
+        <xsl:otherwise><xsl:text>
+    </xsl:text>@javax.jws.WebResult(targetNamespace = "<xsl:value-of select="$targetNs"/>"<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="output/param/@partname"/>"</xsl:when></xsl:choose>)</xsl:otherwise>
     </xsl:choose>
+    <xsl:if test="$parameterstyle = 'BARE'">
+    @javax.jws.soap.SOAPBinding(parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.BARE)</xsl:if>
     public <xsl:choose>
                 <xsl:when test="$outparamcount = 0">void </xsl:when>
+                <xsl:when test="$useholder = 'true'">void </xsl:when>
                 <xsl:otherwise><xsl:value-of select="output/param/@type"/><xsl:text> </xsl:text></xsl:otherwise>
            </xsl:choose>
     <xsl:value-of select="@name"/>(<xsl:variable name="inparamcount" select="count(input/param)"/>
+    <xsl:choose>
+        <xsl:when test="$useholder = 'true'">
     <xsl:for-each select="input/param">
-        @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>")
+        @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", mode = javax.jws.WebParam.Mode.INOUT<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
         <xsl:choose>
+            <xsl:when test="$inparamcount = position()">javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+                <xsl:text>&gt; </xsl:text>
+                <xsl:value-of select="@name"/>
+            </xsl:when>
+            <xsl:otherwise>javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+                <xsl:text>&gt; </xsl:text>
+                <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
+            </xsl:otherwise>
+        </xsl:choose>
+    </xsl:for-each></xsl:when>
+        <xsl:otherwise><xsl:for-each select="input/param">
+        @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>"<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
+        <xsl:choose>
             <xsl:when test="$inparamcount = position()">
                 <xsl:value-of select="@type"/>
                 <xsl:text> </xsl:text>
@@ -66,7 +90,8 @@
                 <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
             </xsl:otherwise>
         </xsl:choose>
-    </xsl:for-each>)<!--<xsl:for-each select="fault/param[@type!='']">
+    </xsl:for-each></xsl:otherwise>
+    </xsl:choose>)<!--<xsl:for-each select="fault/param[@type!='']">
                <xsl:if test="position()=1">
         throws </xsl:if>
                <xsl:if test="position()>1">,</xsl:if><xsl:value-of select="@name"/>
