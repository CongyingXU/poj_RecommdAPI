Index: src/org/apache/axis2/saaj2/AttachmentPartImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/AttachmentPartImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/AttachmentPartImpl.java	(working copy)
@@ -15,9 +15,8 @@
  */
 package org.apache.axis2.saaj2;
 
-import org.apache.axis2.om.OMText;
 import org.apache.axis2.om.DOOMAbstractFactory;
-import org.apache.axis2.om.impl.dom.factory.OMDOMFactory;
+import org.apache.axis2.om.OMText;
 import org.apache.axis2.transport.http.HTTPConstants;
 
 import javax.activation.DataHandler;
@@ -104,7 +103,7 @@
      */
     public void clearContent() {
         dataHandler = null;
-		omText = null;
+        omText = null;
     }
 
     /**
@@ -357,10 +356,10 @@
      * @return the OMText
      * @throws SOAPException If omText is not available
      */
-    public OMText getOMText() throws SOAPException{
-		if(omText == null){
-			throw new SOAPException("OMText set to null");
-		}
-		return omText;
-	}
+    public OMText getOMText() throws SOAPException {
+        if (omText == null) {
+            throw new SOAPException("OMText set to null");
+        }
+        return omText;
+    }
 }
Index: src/org/apache/axis2/saaj2/SOAPBodyImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPBodyImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPBodyImpl.java	(working copy)
@@ -159,6 +159,6 @@
 
         SOAPElementImpl elem = new SOAPElementImpl((ElementImpl) document.getDocumentElement());
         return new SOAPBodyElementImpl(elem.element);
-		
-	}
+
+    }
 }
Index: src/org/apache/axis2/saaj2/NodeListImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/NodeListImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/NodeListImpl.java	(working copy)
@@ -63,10 +63,11 @@
      * Returns the <code>index</code>th item in the collection. If
      * <code>index</code> is greater than or equal to the number of nodes in
      * the list, this returns <code>null</code>.
+     *
      * @param index Index into the collection.
      * @return The node at the <code>index</code>th position in the
-     *   <code>NodeList</code>, or <code>null</code> if that is not a valid
-     *   index.
+     *         <code>NodeList</code>, or <code>null</code> if that is not a valid
+     *         index.
      */
     public Node item(int index) {
         if (mNodes != null && mNodes.size() > index) {
Index: src/org/apache/axis2/saaj2/TextImplEx.java
===================================================================
--- src/org/apache/axis2/saaj2/TextImplEx.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/TextImplEx.java	(working copy)
@@ -15,12 +15,11 @@
  */
 package org.apache.axis2.saaj2;
 
+import org.apache.axis2.om.DOOMAbstractFactory;
 import org.apache.axis2.om.OMContainer;
 import org.apache.axis2.om.OMException;
-import org.apache.axis2.om.DOOMAbstractFactory;
 import org.apache.axis2.om.impl.OMOutputImpl;
 import org.apache.axis2.om.impl.dom.TextImpl;
-import org.apache.axis2.om.impl.dom.factory.OMDOMFactory;
 import org.w3c.dom.DOMException;
 
 import javax.xml.soap.Text;
@@ -272,7 +271,7 @@
         return textNode.getData();
     }
 
-    public String toString(){
+    public String toString() {
         return getValue();
     }
 }
Index: src/org/apache/axis2/saaj2/SOAPConnectionImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPConnectionImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPConnectionImpl.java	(working copy)
@@ -25,7 +25,7 @@
 import org.apache.axis2.om.OMNode;
 import org.apache.axis2.om.OMText;
 import org.apache.axis2.om.impl.dom.ElementImpl;
-import org.apache.axis2.util.SessionUtils;
+import org.apache.axis2.util.SessionUtils2;
 
 import javax.activation.DataHandler;
 import javax.xml.namespace.QName;
@@ -71,7 +71,8 @@
 
             Options options = new Options();
             options.setProperty(Constants.Configuration.ENABLE_MTOM, Constants.VALUE_TRUE);
-            options.setListenerTransportProtocol(Constants.TRANSPORT_HTTP);
+
+            options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
             options.setTo(new EndpointReference(url.toString()));
             call.setClientOptions(options);
 
@@ -152,7 +153,7 @@
                 DataHandler actualDH = (DataHandler) binaryNode.getDataHandler();
                 if (actualDH != null) {
                     AttachmentPart ap = soapMsg.createAttachmentPart(actualDH);
-                    String contentId = SessionUtils.generateSessionId();
+                    String contentId = SessionUtils2.generateSessionId();
                     ap.setContentId(contentId);
                     ap.setContentType(actualDH.getContentType());
                     OMElement parent = (OMElement) child.getParent();
Index: src/org/apache/axis2/saaj2/NodeImplEx.java
===================================================================
--- src/org/apache/axis2/saaj2/NodeImplEx.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/NodeImplEx.java	(working copy)
@@ -24,7 +24,6 @@
 import javax.xml.soap.Node;
 import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPException;
-import java.util.Iterator;
 
 /**
  * A representation of a node (element) in a DOM representation of an XML document
Index: src/org/apache/axis2/saaj2/SOAPPartImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPPartImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPPartImpl.java	(working copy)
@@ -15,11 +15,10 @@
  */
 package org.apache.axis2.saaj2;
 
-import org.apache.axis2.om.impl.dom.DocumentImpl;
 import org.apache.axis2.soap.impl.dom.soap11.SOAP11Factory;
 import org.apache.axis2.soap.impl.llom.builder.StAXSOAPModelBuilder;
 import org.apache.axis2.transport.http.HTTPConstants;
-import org.apache.axis2.util.SessionUtils;
+import org.apache.axis2.util.SessionUtils2;
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
 import org.w3c.dom.Comment;
@@ -58,7 +57,7 @@
     public SOAPPartImpl(SOAPMessageImpl parentSoapMsg,
                         SOAPEnvelopeImpl soapEnvelope) {
 
-        setMimeHeader(HTTPConstants.HEADER_CONTENT_ID, SessionUtils.generateSessionId());
+        setMimeHeader(HTTPConstants.HEADER_CONTENT_ID, SessionUtils2.generateSessionId());
         setMimeHeader(HTTPConstants.HEADER_CONTENT_TYPE, "text/xml");
 
         soapMessage = parentSoapMsg;
@@ -69,7 +68,7 @@
     public SOAPPartImpl(SOAPMessageImpl parentSoapMsg,
                         InputStream inputStream) throws SOAPException {
 
-        setMimeHeader(HTTPConstants.HEADER_CONTENT_ID, SessionUtils.generateSessionId());
+        setMimeHeader(HTTPConstants.HEADER_CONTENT_ID, SessionUtils2.generateSessionId());
         setMimeHeader(HTTPConstants.HEADER_CONTENT_TYPE, "text/xml");
 
         soapMessage = parentSoapMsg;
Index: src/org/apache/axis2/saaj2/SOAPBodyElementImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPBodyElementImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPBodyElementImpl.java	(working copy)
@@ -15,17 +15,17 @@
  */
 package org.apache.axis2.saaj2;
 
+import org.apache.axis2.om.impl.dom.ElementImpl;
+
 import javax.xml.soap.SOAPBodyElement;
 
-import org.apache.axis2.om.impl.dom.ElementImpl;
-
 public class SOAPBodyElementImpl extends SOAPElementImpl implements SOAPBodyElement {
 
-	/**
-	 * @param element
-	 */
-	public SOAPBodyElementImpl(ElementImpl element) {
-		super(element);
-	}
+    /**
+     * @param element
+     */
+    public SOAPBodyElementImpl(ElementImpl element) {
+        super(element);
+    }
 
 }
Index: src/org/apache/axis2/saaj2/SOAPFaultImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPFaultImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPFaultImpl.java	(working copy)
@@ -1,16 +1,16 @@
 package org.apache.axis2.saaj2;
 
+import org.apache.axis2.om.DOOMAbstractFactory;
 import org.apache.axis2.om.impl.dom.ElementImpl;
 import org.apache.axis2.soap.SOAPFaultCode;
 import org.apache.axis2.soap.SOAPFaultReason;
 import org.apache.axis2.soap.SOAPFaultRole;
 import org.apache.axis2.soap.SOAPFaultText;
-import org.apache.axis2.soap.impl.dom.soap11.SOAP11FaultCodeImpl;
+import org.apache.axis2.soap.SOAPFaultValue;
 import org.apache.axis2.soap.impl.dom.soap11.SOAP11FaultDetailImpl;
 import org.apache.axis2.soap.impl.dom.soap11.SOAP11FaultReasonImpl;
 import org.apache.axis2.soap.impl.dom.soap11.SOAP11FaultRoleImpl;
 import org.apache.axis2.soap.impl.dom.soap11.SOAP11FaultTextImpl;
-import org.apache.axis2.soap.impl.dom.soap11.SOAP11FaultValueImpl;
 
 import javax.xml.soap.Detail;
 import javax.xml.soap.Name;
@@ -30,20 +30,44 @@
         fault = element;
     }
 
-    /* (non-Javadoc)
-      * @see javax.xml.soap.SOAPFault#setFaultCode(java.lang.String)
-      */
+    /**
+     * Sets this <CODE>SOAPFault</CODE> object with the given
+     * fault code.
+     * <p/>
+     * <P>Fault codes, which given information about the fault,
+     * are defined in the SOAP 1.1 specification.</P>
+     *
+     * @param faultCode a <CODE>String</CODE> giving
+     *                  the fault code to be set; must be one of the fault codes
+     *                  defined in the SOAP 1.1 specification
+     * @throws SOAPException if there was an error in
+     *                       adding the <CODE>faultCode</CODE> to the underlying XML
+     *                       tree.
+     * @see #getFaultCode() getFaultCode()
+     */
     public void setFaultCode(String faultCode) throws SOAPException {
-        SOAPFaultCode code = new SOAP11FaultCodeImpl(fault);
+        /*SOAPFaultCode code = new SOAP11FaultCodeImpl(fault);
         SOAP11FaultValueImpl faultValueImpl = new SOAP11FaultValueImpl(code);
         faultValueImpl.setText(faultCode);
         code.setValue(faultValueImpl);
-        this.fault.setCode(code);
+        this.fault.setCode(code);*/
+
+        org.apache.axis2.soap.SOAPFactory soapFactory = DOOMAbstractFactory.getSOAP11Factory();
+        SOAPFaultCode fCode = soapFactory.createSOAPFaultCode(fault);
+        SOAPFaultValue value = soapFactory.createSOAPFaultValue(fCode);
+        fCode.setValue(value);
+        value.setText(faultCode);
+
+        this.fault.setCode(fCode);
     }
 
-    /* (non-Javadoc)
-      * @see javax.xml.soap.SOAPFault#getFaultCode()
-      */
+    /**
+     * Gets the fault code for this <CODE>SOAPFault</CODE>
+     * object.
+     *
+     * @return a <CODE>String</CODE> with the fault code
+     * @see #setFaultCode(java.lang.String) setFaultCode(java.lang.String)
+     */
     public String getFaultCode() {
         return this.fault.getCode().getValue().getText();
     }
Index: src/org/apache/axis2/saaj2/SOAPEnvelopeImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPEnvelopeImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPEnvelopeImpl.java	(working copy)
@@ -25,7 +25,6 @@
 import javax.xml.soap.SOAPBody;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPHeader;
-import javax.xml.soap.SOAPElement;
 
 /**
  * 
@@ -46,7 +45,7 @@
     public org.apache.axis2.soap.SOAPEnvelope getOMEnvelope() {
         return omSOAPEnvelope;
     }
-    
+
     /**
      * Creates a new <CODE>Name</CODE> object initialized with the
      * given local name, namespace prefix, and namespace URI.
Index: src/org/apache/axis2/saaj2/DetailImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/DetailImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/DetailImpl.java	(working copy)
@@ -15,23 +15,22 @@
  */
 package org.apache.axis2.saaj2;
 
-import java.util.Iterator;
+import org.apache.axis2.om.impl.dom.ElementImpl;
+import org.apache.axis2.soap.SOAPFaultDetail;
 
 import javax.xml.soap.Detail;
 import javax.xml.soap.DetailEntry;
 import javax.xml.soap.Name;
-import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
 
-import org.apache.axis2.om.OMElement;
-import org.apache.axis2.om.impl.dom.ElementImpl;
-import org.apache.axis2.soap.SOAPFaultDetail;
-
 /**
  * A container for <code>DetailEntry</code> objects. <code>DetailEntry</code>
  * objects give detailed error information that is application-specific and
  * related to the <code>SOAPBody</code> object that contains it.
- * <P>
+ * <p/>
  * A <code>Detail</code> object, which is part of a <code>SOAPFault</code>
  * object, can be retrieved using the method <code>SOAPFault.getDetail</code>.
  * The <code>Detail</code> interface provides two methods. One creates a new
@@ -39,7 +38,7 @@
  * the <code>Detail</code> object. The second method gets a list of the
  * <code>DetailEntry</code> objects contained in a <code>Detail</code>
  * object.
- * <P>
+ * <p/>
  * The following code fragment, in which <i>sf</i> is a <code>SOAPFault</code>
  * object, gets its <code>Detail</code> object (<i>d</i>), adds a new
  * <code>DetailEntry</code> object to <i>d</i>, and then gets a list of all the
@@ -57,17 +56,17 @@
  */
 public class DetailImpl extends SOAPFaultElementImpl implements Detail {
 
-	SOAPFaultDetail faultDetail;
-	
-	/**
-	 * @param element
-	 */
-	public DetailImpl(SOAPFaultDetail element) {
-		super((ElementImpl)element);
-		faultDetail = element;
-	}
+//    private SOAPFaultDetail faultDetail;
 
-	/**
+    /**
+     * @param element
+     */
+    public DetailImpl(SOAPFaultDetail element) {
+        super((ElementImpl) element);
+//        faultDetail = element;
+    }
+
+    /**
      * Creates a new <code>DetailEntry</code> object with the given
      * name and adds it to this <code>Detail</code> object.
      *
@@ -75,21 +74,26 @@
      * @return DetailEntry.
      * @throws SOAPException thrown when there is a problem in adding a DetailEntry object to this Detail object.
      */
-	public DetailEntry addDetailEntry(Name name) throws SOAPException {
-		SOAPElementImpl childElement = (SOAPElementImpl)addChildElement(name);
-		DetailEntryImpl detailEntryImpl = new DetailEntryImpl(childElement.element);
-		faultDetail.addDetailEntry((OMElement)detailEntryImpl);
-		return detailEntryImpl;
-	}
+    public DetailEntry addDetailEntry(Name name) throws SOAPException {
+        SOAPElementImpl childElement = (SOAPElementImpl) addChildElement(name);
+        DetailEntryImpl detailEntryImpl = new DetailEntryImpl(childElement.element);
+//        faultDetail.addDetailEntry(detailEntryImpl.element);  //This causes infinite recursion
+        return detailEntryImpl;
+    }
 
-	/**
+    /**
      * Gets a list of the detail entries in this <code>Detail</code> object.
      *
      * @return an <code>Iterator</code> object over the <code>DetailEntry</code>
      *         objects in this <code>Detail</code> object
      */
-	public Iterator getDetailEntries() {
-		return faultDetail.getAllDetailEntries();
-	}
+    public Iterator getDetailEntries() {
+        final Iterator detailEntriesIter = element.getChildElements();
+        Collection details = new ArrayList();
+        while (detailEntriesIter.hasNext()) {
+            details.add(new DetailEntryImpl((ElementImpl) detailEntriesIter.next()));
+        }
+        return details.iterator();
+    }
 
 }
Index: src/org/apache/axis2/saaj2/SOAPMessageImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPMessageImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPMessageImpl.java	(working copy)
@@ -20,11 +20,11 @@
 
 import javax.xml.soap.AttachmentPart;
 import javax.xml.soap.MimeHeader;
+import javax.xml.soap.SOAPBody;
 import javax.xml.soap.SOAPException;
+import javax.xml.soap.SOAPHeader;
 import javax.xml.soap.SOAPMessage;
 import javax.xml.soap.SOAPPart;
-import javax.xml.soap.SOAPHeader;
-import javax.xml.soap.SOAPBody;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -245,7 +245,7 @@
      */
     public void saveChanges() throws SOAPException {
         // TODO not sure of the implementation
-        throw new UnsupportedOperationException("TODO");
+//        throw new UnsupportedOperationException("TODO");
     }
 
     /**
Index: src/org/apache/axis2/saaj2/SOAPFaultElementImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPFaultElementImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPFaultElementImpl.java	(working copy)
@@ -15,18 +15,18 @@
  */
 package org.apache.axis2.saaj2;
 
+import org.apache.axis2.om.impl.dom.ElementImpl;
+
 import javax.xml.soap.SOAPFaultElement;
 
-import org.apache.axis2.om.impl.dom.ElementImpl;
-
 public class SOAPFaultElementImpl extends SOAPElementImpl implements
-		SOAPFaultElement {
+                                                          SOAPFaultElement {
 
-	/**
-	 * @param element
-	 */
-	public SOAPFaultElementImpl(ElementImpl element) {
-		super(element);
-	}
+    /**
+     * @param element
+     */
+    public SOAPFaultElementImpl(ElementImpl element) {
+        super(element);
+    }
 
 }
Index: src/org/apache/axis2/saaj2/SOAPConnectionFactoryImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPConnectionFactoryImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPConnectionFactoryImpl.java	(working copy)
@@ -15,8 +15,8 @@
  */
 package org.apache.axis2.saaj2;
 
+import javax.xml.soap.SOAPConnection;
 import javax.xml.soap.SOAPConnectionFactory;
-import javax.xml.soap.SOAPConnection;
 import javax.xml.soap.SOAPException;
 
 /**
Index: src/org/apache/axis2/saaj2/SOAPElementImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/SOAPElementImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/SOAPElementImpl.java	(working copy)
@@ -213,6 +213,14 @@
         return attribute.getAttributeValue();
     }
 
+    /**
+     * Returns an iterator over all the immediate content of
+     * this element. This includes <CODE>Text</CODE> objects as well
+     * as <CODE>SOAPElement</CODE> objects.
+     *
+     * @return an iterator over <CODE>Text</CODE> and <CODE>SOAPElement</CODE>
+     *         contained within this <CODE>SOAPElement</CODE> object
+     */
     public Iterator getChildElements() {
         //Actually all the children are being treated as OMNodes and are being
         //wrapped accordingly to a single type (SOAPElement) and being returned in an iterator.
Index: src/org/apache/axis2/saaj2/MessageFactoryImpl.java
===================================================================
--- src/org/apache/axis2/saaj2/MessageFactoryImpl.java	(revision 359207)
+++ src/org/apache/axis2/saaj2/MessageFactoryImpl.java	(working copy)
@@ -15,7 +15,6 @@
  */
 package org.apache.axis2.saaj2;
 
-import org.apache.axis2.om.impl.dom.ElementImpl;
 import org.apache.axis2.soap.impl.dom.soap11.SOAP11Factory;
 
 import javax.xml.soap.MessageFactory;
