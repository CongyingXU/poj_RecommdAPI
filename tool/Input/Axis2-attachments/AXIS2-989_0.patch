Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLDescriptionTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLDescriptionTests.java	(revision 428742)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLDescriptionTests.java	(working copy)
@@ -45,8 +45,10 @@
             setupDone = true;
             String namespaceURI= "http://ws.apache.org/axis2/tests";
             String localPart = "EchoService";
-            service = Service.create(getWSDLURL(), new QName(namespaceURI, localPart));
-            serviceDelegate = getServiceDelegate(service);
+            URL wsdlURL = DescriptionTestUtils.getWSDLURL();
+            assertNotNull(wsdlURL);
+            service = Service.create(wsdlURL, new QName(namespaceURI, localPart));
+            serviceDelegate = DescriptionTestUtils.getServiceDelegate(service);
             serviceDescription = serviceDelegate.getServiceDescription();
         }
     }
@@ -73,44 +75,4 @@
         EndpointDescription endpointDescription = serviceDescription.getEndpointDescription(validPortQname);
         assertNull("EndpointDescription should not be found", endpointDescription);
     }
-    
-    /*
-     * ========================================================================
-     * Test utility methods
-     * ========================================================================
-     */
-
-    private URL getWSDLURL() {
-        URL wsdlURL = null;
-        // Get the URL to the WSDL file.  Note that 'basedir' is setup by Maven
-        String basedir = System.getProperty("basedir");
-        String urlString = "file://localhost/" + basedir + "/test-resources/wsdl/WSDLTests.wsdl";
-        try {
-            wsdlURL = new URL(urlString);
-        } catch (Exception e) {
-            fail("Caught exception creating WSDL URL :" + urlString + "; exception: " + e.toString());
-        }
-        return wsdlURL;
-    }
-
-    private ServiceDelegate getServiceDelegate(Service service) {
-        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
-        ServiceDelegate returnServiceDelegate = null;
-        try {
-            Field serviceDelgateField = service.getClass().getDeclaredField("_delegate");
-            serviceDelgateField.setAccessible(true);
-            returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
-        } catch (SecurityException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (NoSuchFieldException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IllegalAccessException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-        return returnServiceDelegate;
-    }
-
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java	(revision 428742)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/AnnotationDescriptionTests.java	(working copy)
@@ -65,7 +65,7 @@
         String namespaceURI= "http://ws.apache.org/axis2/tests";
         String localPart = "EchoServiceAnnotated";
         Service service = Service.create(null,  new QName(namespaceURI, localPart));
-        ServiceDelegate serviceDelegate = getServiceDelegate(service);
+        ServiceDelegate serviceDelegate = DescriptionTestUtils.getServiceDelegate(service);
         ServiceDescription serviceDescription = serviceDelegate.getServiceDescription();
         String portLocalPart = "EchoServiceAnnotatedPort";
         QName portQName = new QName(namespaceURI, portLocalPart);
@@ -141,30 +141,4 @@
         assertNull("EndpointDescription should not be found", endpointDescription);
     }
 */    
-    /*
-     * ========================================================================
-     * Test utility methods
-     * ========================================================================
-     */
-
-    private ServiceDelegate getServiceDelegate(Service service) {
-        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
-        ServiceDelegate returnServiceDelegate = null;
-        try {
-            Field serviceDelgateField = service.getClass().getDeclaredField("_delegate");
-            serviceDelgateField.setAccessible(true);
-            returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
-        } catch (SecurityException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (NoSuchFieldException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IllegalAccessException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-        return returnServiceDelegate;
-    }
-
 }
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/DescriptionTestUtils.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/DescriptionTestUtils.java	(revision 0)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/DescriptionTestUtils.java	(revision 0)
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ * Copyright 2006 International Business Machines Corp.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.axis2.jaxws.description;
+
+import java.lang.reflect.Field;
+import java.net.URL;
+
+import javax.xml.ws.Service;
+
+import org.apache.axis2.jaxws.spi.ServiceDelegate;
+
+/**
+ * 
+ */
+public class DescriptionTestUtils {
+    
+    /*
+     * ========================================================================
+     * Test utility methods
+     * ========================================================================
+     */
+
+    static public URL getWSDLURL() {
+        URL wsdlURL = null;
+        // Get the URL to the WSDL file.  Note that 'basedir' is setup by Maven
+        String basedir = System.getProperty("basedir");
+        String urlString = "file://localhost/" + basedir + "/test-resources/wsdl/WSDLTests.wsdl";
+        try {
+            wsdlURL = new URL(urlString);
+        } catch (Exception e) {
+            System.out.println("Caught exception creating WSDL URL :" + urlString + "; exception: " + e.toString());
+        }
+        return wsdlURL;
+    }
+
+    static public ServiceDelegate getServiceDelegate(Service service) {
+        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
+        ServiceDelegate returnServiceDelegate = null;
+        try {
+            Field serviceDelgateField = service.getClass().getDeclaredField("_delegate");
+            serviceDelgateField.setAccessible(true);
+            returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
+        } catch (SecurityException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (NoSuchFieldException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return returnServiceDelegate;
+    }
+
+
+}
Index: C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLTests.java
===================================================================
--- C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLTests.java	(revision 428742)
+++ C:/blddir/eclipse/axis2/axis2/modules/jaxws/test/org/apache/axis2/jaxws/description/WSDLTests.java	(working copy)
@@ -44,10 +44,12 @@
  
         String namespaceURI= "http://ws.apache.org/axis2/tests";
         String localPart = "EchoService";
-        service = Service.create(getWSDLURL(), new QName(namespaceURI, localPart));
+        URL wsdlURL = DescriptionTestUtils.getWSDLURL();
+        assertNotNull(wsdlURL);
+        service = Service.create(wsdlURL, new QName(namespaceURI, localPart));
         assertNotNull("Service not created", service);
 
-        serviceDelegate = getServiceDelegate(service);
+        serviceDelegate = DescriptionTestUtils.getServiceDelegate(service);
         assertNotNull("ServiceDelegate not created", serviceDelegate);
         
         ServiceDescription serviceDescription = serviceDelegate.getServiceDescription();
@@ -63,7 +65,9 @@
         String namespaceURI= "http://ws.apache.org/axis2/tests";
         String localPart = "BADEchoService";
         try {
-            service = Service.create(getWSDLURL(), new QName(namespaceURI, localPart));
+            URL wsdlURL = DescriptionTestUtils.getWSDLURL();
+            assertNotNull(wsdlURL);
+            service = Service.create(wsdlURL, new QName(namespaceURI, localPart));
             fail("Exception should have been thrown for invalid Service name");
         }
         catch (WebServiceException e) {
@@ -94,37 +98,4 @@
         }
         
     }
-    
-    private URL getWSDLURL() {
-        URL wsdlURL = null;
-        // Get the URL to the WSDL file.  Note that 'basedir' is setup by Maven
-        String basedir = System.getProperty("basedir");
-        String urlString = "file://localhost/" + basedir + "/test-resources/wsdl/WSDLTests.wsdl";
-        try {
-            wsdlURL = new URL(urlString);
-        } catch (Exception e) {
-            fail("Caught exception creating WSDL URL :" + urlString + "; exception: " + e.toString());
-        }
-        return wsdlURL;
-    }
-
-    private ServiceDelegate getServiceDelegate(Service service) {
-        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
-        ServiceDelegate returnServiceDelegate = null;
-        try {
-            Field serviceDelgateField = service.getClass().getDeclaredField("_delegate");
-            serviceDelgateField.setAccessible(true);
-            returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
-        } catch (SecurityException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (NoSuchFieldException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IllegalAccessException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-        return returnServiceDelegate;
-    }
 }
