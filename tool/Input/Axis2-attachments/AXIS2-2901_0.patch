Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/ChooserPanel.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/ChooserPanel.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/ChooserPanel.java	(working copy)
@@ -69,7 +69,7 @@
                 , new Insets(10, 20, 0,0), 0, 0));
 
         // option button for java2wsdl
-        optionW2JRadioButton.setEnabled(false);
+        optionW2JRadioButton.setEnabled(true);
         this.add(optionW2JRadioButton
                 , new GridBagConstraints(0, 1, 1, 1, 1.0, 0.0
                 , GridBagConstraints.NORTHWEST , GridBagConstraints.NONE
@@ -147,7 +147,7 @@
      */
     public void next() {
         if (selectedOption == 'A') {
-          //  switchPanel(CodegenFrame.PANEL_FIRST_A) ;
+            switchPanel(CodegenFrame.PANEL_FIRST_A) ;
 
         } else if (selectedOption == 'B') {
             switchPanel(CodegenFrame.PANEL_FIRST_B );
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java	(working copy)
@@ -1,268 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements. See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership. The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.axis2.tools.idea;
-
-import javax.swing.*;
-import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.io.File;
-import java.io.StringWriter;
-import java.util.TimerTask;
-
-/**
- * Author : Deepal Jayasinghe
- * Date: Jul 20, 2005
- * Time: 3:38:12 PM
- */
-public class BottomPanel extends JPanel implements ActionListener {
-    public static JButton btnBack;
-    public static JButton btnNext;
-    public static JButton btnFinish;
-    public static JButton btnCancel;
-
-    private Java2CodeFrame java2CodeFrame;
-
-    public BottomPanel(Java2CodeFrame java2CodeFrame) {
-        this.java2CodeFrame = java2CodeFrame;
-        setFont(new Font("Helvetica", Font.PLAIN, 12));
-        BottomLayout customLayout = new BottomLayout();
-
-        setLayout(customLayout);
-
-        btnBack = new JButton("< Back");
-        btnBack.setEnabled(true);
-        btnBack.addActionListener(this);
-        add(btnBack);
-
-        btnNext = new JButton("Next >");
-        btnNext.addActionListener(this);
-        add(btnNext);
-
-        btnFinish = new JButton("Finish");
-        btnFinish.addActionListener(this);
-        add(btnFinish);
-
-        btnCancel = new JButton("Cancel");
-        btnCancel.addActionListener(this);
-        add(btnCancel);
-
-        setSize(getPreferredSize());
-
-    }
-
-    public static void setEnable(boolean back,boolean next, boolean finish, boolean cancel) {
-        btnBack.setEnabled(back);
-        btnNext.setEnabled(next);
-        btnFinish.setEnabled(finish);
-        btnCancel.setEnabled(cancel);
-    }
-
-    public void actionPerformed(ActionEvent e) {
-        Object obj = e.getSource();
-        if (obj == btnBack) {
-            java2CodeFrame.backButtonImpl();
-        }
-        else if (obj == btnCancel) {
-            java2CodeFrame.dispose();
-            Thread.currentThread().setContextClassLoader(java2CodeFrame.getClassLoader());
-            return;
-        } else if (obj == btnFinish) {
-
-            File outputDir = new File(java2CodeFrame.outputpane.txtoutput.getText().trim());
-            if (java2CodeFrame.outputpane.radCustomLocation.isSelected() )
-            {
-                if (!outputDir.isDirectory())
-                {
-                    JOptionPane.showMessageDialog(java2CodeFrame, "The Output Directory specified is invalid. Please provide a valid directory",
-                            "Error!", JOptionPane.ERROR_MESSAGE);
-                    java2CodeFrame.repaint();
-                    return;
-                }
-            }
-
-            final String selected = java2CodeFrame.secondPanel.cmbCodeGenOption.getSelectedItem().toString() ;
-            java2CodeFrame.outputpane.progressBar.setVisible(true);
-//            final BarThread stepper = new BarThread(java2CodeFrame.outputpane.progressBar);
-//            stepper.start();
-//            new java.util.Timer(true).schedule(new TimerTask() {
-//                public void run() {
-//                    stepper.requestStop();
-//
-//                }
-//            }, 1000);
-
-            new Thread(){public void run(){
-                if (selected.equalsIgnoreCase("default")) {
-
-                    String output = java2CodeFrame.outputpane.buttonGroup.getSelection().getActionCommand();
-                    java2CodeFrame.secondPanel.setDefaultCommonConfigurations();
-
-                    if (output.equalsIgnoreCase("radCurrentProject")) {
-
-                        File temp = java2CodeFrame.secondPanel.codegenBean.getTemp();
-                        java2CodeFrame.secondPanel.codegenBean.setOutput(temp.getAbsolutePath() );
-                        try {
-                            java2CodeFrame.generatecode() ;
-                            java2CodeFrame.copyDirectory(new File(temp + File.separator + "src"), new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem()));
-                            File src = new File(temp + File.separator + "resources");
-                            if (src.isDirectory())
-                                java2CodeFrame.copyDirectory(src, new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem() + File.separator + ".." + File.separator + "resources"));
-
-                            java2CodeFrame.deleteDirectory(temp);
-                        } catch (Exception e1) {
-                            java2CodeFrame.outputpane.progressBar.setVisible(false);
-                            StringWriter writer = new StringWriter();
-                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
-                            java2CodeFrame.dispose();
-                            return;
-                        }
-                        java2CodeFrame.outputpane.progressBar.setVisible(false);
-                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
-                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
-                        java2CodeFrame.dispose();
-                        return;
-                    }else if(output.equalsIgnoreCase("radCustomLocation") ){
-                        try{
-                            java2CodeFrame.generatecode();
-                        } catch (Exception e1) {
-                            java2CodeFrame.outputpane.progressBar.setVisible(false);
-                            StringWriter writer = new StringWriter();
-                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
-                            java2CodeFrame.dispose();
-                            return;
-                        }
-                        java2CodeFrame.outputpane.progressBar.setVisible(false);
-                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
-                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
-                        java2CodeFrame.dispose();
-                        return;
-                    }
-                }
-
-                else if (selected.equalsIgnoreCase("custom")) {
-
-                    String output = java2CodeFrame.outputpane.buttonGroup.getSelection().getActionCommand();
-                    java2CodeFrame.secondPanel.fillBean();
-                    if (output.equalsIgnoreCase("radCurrentProject")) {
-
-                        File temp = java2CodeFrame.secondPanel.codegenBean.getTemp();
-                        java2CodeFrame.secondPanel.codegenBean.setOutput(temp.getAbsolutePath());
-                        //java2CodeFrame.secondPanel.codegenBean.setProject();
-                        try {
-                            java2CodeFrame.generatecode();
-                            java2CodeFrame.copyDirectory(new File(temp + File.separator + "src"), new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem()));
-                            File src = new File(temp + File.separator + "resources");
-                            if (src.isDirectory())
-                                java2CodeFrame.copyDirectory(src, new File((String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem() + File.separator + ".." + File.separator + "resources"));
-
-                            java2CodeFrame.deleteDirectory(temp);
-                        } catch (Exception e1) {
-                            StringWriter writer = new StringWriter();
-                            java2CodeFrame.outputpane.progressBar.setVisible(false);
-                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
-                            java2CodeFrame.dispose();
-                            return;
-                        }
-                        java2CodeFrame.outputpane.progressBar.setVisible(false);
-                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
-                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
-                        java2CodeFrame.dispose();
-                        return;
-                    }
-                    else if(output.equalsIgnoreCase("radCustomLocation"))
-                    {
-                        try {
-                            java2CodeFrame.generatecode();
-                        } catch (Exception e1) {
-                            java2CodeFrame.outputpane.progressBar.setVisible(false);
-                            StringWriter writer = new StringWriter();
-                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
-                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
-                            java2CodeFrame.dispose();
-                            return;
-                        }
-                        java2CodeFrame.outputpane.progressBar.setVisible(false);
-                        JOptionPane.showMessageDialog(java2CodeFrame, "Code generation successful!",
-                                "Axis2 code generation", JOptionPane.INFORMATION_MESSAGE);
-                        java2CodeFrame.dispose();
-                        return;
-                    }
-                }
-            }
-            }.start();
-
-        } else if (obj == btnNext) {
-
-            java2CodeFrame.setPane();
-        }
-    }
-}
-
-class BottomLayout implements LayoutManager {
-
-    public BottomLayout() {
-    }
-
-    public void addLayoutComponent(String name, Component comp) {
-    }
-
-    public void removeLayoutComponent(Component comp) {
-    }
-
-    public Dimension preferredLayoutSize(Container parent) {
-        Dimension dim = new Dimension(0, 0);
-
-        Insets insets = parent.getInsets();
-        dim.width = 541 + insets.left + insets.right;
-        dim.height = 60 + insets.top + insets.bottom;
-
-        return dim;
-    }
-
-    public Dimension minimumLayoutSize(Container parent) {
-        return new Dimension(0, 0);
-    }
-
-    public void layoutContainer(Container parent) {
-        Insets insets = parent.getInsets();
-
-        Component c;
-        c = parent.getComponent(0);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 152, insets.top + 10, 80, 24);
-        }
-        c = parent.getComponent(1);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 232, insets.top + 10, 80, 24);
-        }
-        c = parent.getComponent(2);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 312, insets.top + 10, 80, 24);
-        }
-        c = parent.getComponent(3);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 392, insets.top + 10, 80, 24);
-        }
-    }
-}
-
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java	(working copy)
@@ -1,670 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements. See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership. The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.axis2.tools.idea;
-
-import org.apache.axis2.tools.bean.CodegenBean;
-import org.apache.axis2.util.URLProcessor;
-
-import javax.swing.*;
-import javax.xml.namespace.QName;
-import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.Iterator;
-import java.util.Collection;
-
-import com.intellij.openapi.module.Module;
-
-public class SecondFrame extends JPanel implements ActionListener {
-
-    JLabel lblCodeGenOption;
-    JComboBox cmbCodeGenOption;
-
-    JLabel lblLangauge;
-    JComboBox cmbLan;
-
-    JLabel lblServiceName;
-    JComboBox cmbServiceName;
-
-    JLabel lblportName;
-    JComboBox cmbPortName;
-
-    JLabel lblpackgeName;
-    JTextField txtPacakgeName;
-
-    JLabel lbldbtype;
-    JComboBox cmbdbtype;
-
-    JCheckBox chkTestCase;
-
-    JRadioButton clientSide;
-
-
-    JRadioButton rdBoth;
-    JRadioButton rdsyn;
-    JRadioButton rdasync;
-
-    JRadioButton serverSide;
-    JCheckBox serviceXML;
-
-    JCheckBox serverSideInterface;
-
-    JRadioButton all;
-
-    ButtonGroup buttonGroup;
-
-    ButtonGroup generationType;
-
-    PackageNameTableModel model;
-
-    JLabel lblPackageMapping;
-
-    JTable table;
-
-    JScrollPane spTable;
-
-    CodegenBean codegenBean;
-
-    java.util.List serviceNameList;
-
-    QName serviceName;
-    String portName;
-
-    public SecondFrame()  {
-
-        SecondFrameLayout customLayout = new SecondFrameLayout();
-
-        setFont(new Font("Helvetica", Font.PLAIN, 12));
-        setLayout(customLayout);
-
-
-
-        lblLangauge = new JLabel("Select the output language");
-        add(lblLangauge);
-
-        cmbLan = new JComboBox();
-        cmbLan.addItem("java");
-        cmbLan.addItem("C#");
-        cmbLan.setToolTipText("Select the language of the generated code");
-        add(cmbLan);
-
-        lblServiceName = new JLabel("Select Service Name");
-        add(lblServiceName);
-
-        cmbServiceName = new JComboBox();
-        add(cmbServiceName);
-        cmbServiceName.setToolTipText("Select the name of the service that the code should be generated for");
-        cmbServiceName.addActionListener(this);
-
-        lblportName = new JLabel("Select Port Name");
-        add(lblportName);
-
-        cmbPortName = new JComboBox();
-        cmbPortName.setToolTipText("Select the port name that the code should be generated for");
-        add(cmbPortName);
-
-        lblpackgeName = new JLabel("Select the package name");
-        add(lblpackgeName);
-
-        txtPacakgeName = new JTextField("org.axis2");
-        txtPacakgeName.setToolTipText("Set the package name of the generated code");
-        add(txtPacakgeName);
-
-        lbldbtype = new JLabel("Select Databinding type");
-        add(lbldbtype);
-
-        cmbdbtype = new JComboBox();
-        cmbdbtype.addItem("adb");
-        cmbdbtype.addItem("xmlbeans");
-        cmbdbtype.addItem("none");
-        cmbdbtype.setToolTipText("Select the databinding framework to be used in the generation process");
-        add(cmbdbtype);
-
-        chkTestCase = new JCheckBox("Generate Test Case", false);
-        chkTestCase.setVisible(true);
-        chkTestCase.setToolTipText("A test case will be generated if this is checked");
-        add(chkTestCase);
-
-        generationType = new ButtonGroup();
-
-        JSeparator clintSep = new JSeparator(JSeparator.HORIZONTAL);
-        add(clintSep);
-
-        clientSide = new JRadioButton("Generate Client Side",true);
-        generationType.add(clientSide);
-        clientSide.addActionListener(this);
-        add(clientSide);
-
-        buttonGroup = new ButtonGroup();
-
-        rdBoth = new JRadioButton("Generate both sync and async", false);
-        buttonGroup.add(rdBoth);
-        add(rdBoth);
-
-        rdsyn = new JRadioButton("Generate sync only", false);
-        buttonGroup.add(rdsyn);
-        add(rdsyn);
-
-        rdasync = new JRadioButton("Generate async only", false);
-        buttonGroup.add(rdasync);
-        add(rdasync);
-
-        JSeparator serverSep = new JSeparator(JSeparator.HORIZONTAL);
-        add(serverSep);
-
-        serverSide = new JRadioButton("Generate Server Side");
-        generationType.add(serverSide);
-        serverSide.addActionListener(this);
-        add(serverSide);
-
-        serviceXML = new JCheckBox("Generate default service.xml", false);
-        serviceXML.setEnabled(false);
-        add(serviceXML);
-
-        serverSideInterface = new JCheckBox("Generate an interface for skeleton", false);
-        serverSideInterface.setEnabled(false);
-        add(serverSideInterface);
-
-        JSeparator allSep = new JSeparator(JSeparator.HORIZONTAL);
-        add(allSep);
-
-        all = new JRadioButton("Generate All");
-        generationType.add(all);
-        all.addActionListener(this);
-        add(all);
-
-        JSeparator packageSep = new JSeparator(JSeparator.HORIZONTAL);
-        add(packageSep);
-
-        lblPackageMapping = new JLabel("Namespace to Package Mapping");
-        add(lblPackageMapping);
-
-        model = new PackageNameTableModel(new Object [1][2]);
-        table = new JTable(model);
-        spTable=new JScrollPane(table);
-        add(spTable);
-
-        lblCodeGenOption =new JLabel("Codegen Option");
-        add(lblCodeGenOption );
-
-        cmbCodeGenOption =new JComboBox();
-        cmbCodeGenOption .addItem("default");
-        cmbCodeGenOption .addItem("custom");
-        cmbCodeGenOption .setToolTipText("Select the Codegen option");
-        cmbCodeGenOption.addActionListener(this);
-        add(cmbCodeGenOption );
-
-        enabel();
-
-        Dimension dim = new Dimension(450, 600);
-        setSize(dim);
-    }
-    private void enabel(){
-        cmbdbtype .setEnabled(false);
-        cmbLan .setEnabled(false);
-        cmbPortName .setEnabled(false);
-        cmbServiceName .setEnabled(false);
-        txtPacakgeName.setEnabled(false);
-        chkTestCase.setEnabled(false);
-        clientSide .setEnabled(false);
-        rdsyn .setEnabled(false);
-        rdBoth .setEnabled(false);
-        rdasync .setEnabled(false);
-        serverSide .setEnabled(false);
-        serverSideInterface .setEnabled(false);
-        serviceXML.setEnabled(false);
-        all.setEnabled(false);
-        table.setEnabled(false);
-        spTable.setEnabled(false);
-
-
-
-    }
-    public void setCodeGenBean(CodegenBean codegenBean) {
-        this.codegenBean = codegenBean;
-        setStatus();
-
-    }
-
-    public void setStatus(){
-        loadNamespaces(codegenBean.getDefinitionNamespaceMap());
-        table.updateUI();
-        txtPacakgeName.setText(codegenBean.packageFromTargetNamespace());
-        cmbServiceName.removeAllItems();
-        serviceNameList = codegenBean.getServiceList();
-        for (int i = 0; i < serviceNameList.size(); i++) {
-            QName name = (QName) serviceNameList.get(i);
-            cmbServiceName.addItem(name.getLocalPart());
-        }
-        cmbServiceName.setSelectedIndex(0);
-    }
-
-    /**
-     * Loads the namespaces
-     * @param namespaceMap
-     */
-    private void loadNamespaces(Collection namespaceMap){
-
-        Iterator namespaces = namespaceMap.iterator();
-        Object tableData [][] = new Object[namespaceMap.size()][2];
-        int i = 0;
-        while(namespaces.hasNext()){
-
-            String namespace = (String)namespaces.next();
-            tableData[i][0] = namespace;
-            tableData[i][1] = getPackageFromNamespace(namespace);
-            i++;
-        }
-
-        model.setTableData(tableData);
-
-
-    }
-
-    public void setDefaultBothConfigurations() {
-
-        setDefaultCommonConfigurations();
-    }
-
-    public void setDefaultCommonConfigurations() {
-
-        setStatus();
-
-        codegenBean.setLanguage("java");
-
-        codegenBean.setDatabindingName("adb");
-
-        codegenBean.setTestCase(false);
-
-        codegenBean.setServerSide(false);
-
-        codegenBean.setPackageName(codegenBean.packageFromTargetNamespace());
-
-        codegenBean.setServerXML(false);
-
-        codegenBean.setServiceName(cmbServiceName.getSelectedItem().toString() );
-
-        codegenBean.setPortName(cmbPortName .getSelectedItem().toString());
-
-        codegenBean.setNamespace2packageList(getNs2PkgMapping());
-
-    }
-
-    /**
-     * get the package derived by  Namespace
-     */
-    public String getPackageFromNamespace(String namespace){
-        return  URLProcessor.makePackageName(namespace);
-    }
-
-    public void fillBean() {
-        int index = cmbLan.getSelectedIndex();
-        switch (index) {
-            case 0: {
-                codegenBean.setLanguage("java");
-                break;
-            }
-            case 1: {
-                codegenBean.setLanguage("c-sharp");
-                break;
-            }
-        }
-
-        index = cmbdbtype.getSelectedIndex();
-        switch (index) {
-            case 0: {
-                codegenBean.setDatabindingName("adb");
-                break;
-            }
-            case 1: {
-                codegenBean.setDatabindingName("xmlbeans");
-                break;
-            }
-            case 2: {
-                codegenBean.setDatabindingName("none");
-                break;
-            }
-        }
-
-        if (clientSide.isSelected()){
-
-            if (rdasync.isSelected()) {
-                codegenBean.setAsyncOnly(true);
-            }
-            else if (rdsyn.isSelected()) {
-                codegenBean.setSyncOnly(true);
-            }
-        }
-        else if (serverSide.isSelected()) {
-
-            if (serviceXML.isSelected())
-                codegenBean.setServerSide(true);
-            else
-                codegenBean.setServerSide(false);
-            if (serverSideInterface.isSelected())
-                codegenBean.setServerSideInterface(true);
-            else
-                codegenBean.setServerSideInterface(false);
-        }
-        else {
-            codegenBean.setGenerateAll(true);
-        }
-        if (chkTestCase.isSelected()) {
-            codegenBean.setTestCase(true);
-        }
-        else
-            codegenBean.setTestCase(false);
-
-        codegenBean.setPackageName(txtPacakgeName.getText());
-        codegenBean.setServiceName(cmbServiceName.getSelectedItem().toString());
-        codegenBean.setPortName(cmbPortName.getSelectedItem().toString());
-        codegenBean.setNamespace2packageList(getNs2PkgMapping());
-    }
-
-    /**
-     * get the package to namespace mappings
-     * @return
-     */
-    public String getNs2PkgMapping(){
-        String returnList="";
-        String packageValue;
-        for (int i=0;i<table.getRowCount();i++){
-            packageValue = (String)table.getValueAt(i,1);
-            returnList = returnList +
-                    ("".equals(returnList)?"":",") +
-                    (String)table.getValueAt(i,0)+ "=" + packageValue;
-
-        }
-        return "".equals(returnList)?null:returnList;
-    }
-    private void setDefault(){
-        buttonGroup.setSelected(rdasync.getModel(),false);
-        buttonGroup.setSelected(rdsyn .getModel(),false);
-        buttonGroup.setSelected(rdBoth.getModel(),false);
-        rdasync .setSelected(false);
-        rdsyn .setSelected(false);
-        rdBoth .setSelected(false);
-        serviceXML .setSelected(false);
-        serverSideInterface .setSelected(false);
-        BottomPanel.setEnable(true,true,false,true);
-    }
-    public void actionPerformed(ActionEvent e) {
-        Object obj = e.getSource();
-        if(obj == cmbCodeGenOption ){
-            if(cmbCodeGenOption.getSelectedItem().equals("custom") ){
-                setDefault();
-                cmbdbtype .setEnabled(true);
-                cmbLan .setEnabled(true);
-                cmbPortName .setEnabled(true);
-                cmbServiceName .setEnabled(true);
-                txtPacakgeName.setEnabled(true);
-                chkTestCase.setEnabled(true);
-                clientSide .setEnabled(true);
-                rdsyn .setEnabled(true);
-                rdBoth .setEnabled(true);
-                rdasync .setEnabled(true);
-                serverSide .setEnabled(true);
-                serverSideInterface .setEnabled(false);
-                serviceXML .setEnabled(false);
-                all.setEnabled(true);
-                table.setEnabled(true);
-                spTable.setEnabled(true);
-                clientSide.setSelected(true);
-                rdBoth .setSelected(true);
-                BottomPanel.setEnable(true,true,false,true);
-            }else {
-                clientSide.setSelected(true);
-                rdBoth .setSelected(true);
-                setDefault();
-                enabel();
-            }
-
-        }else if (obj == cmbServiceName) {
-            int selindex = cmbServiceName.getSelectedIndex();
-            if (selindex>=0)
-            {
-                java.util.List ports = codegenBean.getPortNameList((QName) serviceNameList.get(selindex));
-                cmbPortName.removeAllItems();
-                for (int i = 0; i < ports.size(); i++) {
-                    String portName = (String) ports.get(i);
-                    cmbPortName.addItem(portName);
-                }
-            }
-        }
-        else if (obj == serverSide){
-            if(serverSide.isSelected() )   {
-                setDefault();
-                rdasync.setEnabled(false);
-                rdBoth.setEnabled(false);
-                rdsyn.setEnabled(false);
-                serviceXML.setEnabled(true);
-                serverSideInterface.setEnabled(true);
-                chkTestCase.setEnabled(false);
-
-            }
-        }
-        else if (obj == clientSide){
-            if(clientSide.isSelected() ) {
-                setDefault();
-                rdasync.setEnabled(true);
-                rdBoth.setEnabled(true);
-                rdsyn.setEnabled(true);
-                rdBoth .setSelected(true);
-                chkTestCase.setEnabled(true);
-                serviceXML.setEnabled(false);
-                serverSideInterface.setEnabled(false);
-            }
-        }
-        else if (obj == all){
-            if(all.isSelected()){
-                setDefault();
-                rdasync.setEnabled(false);
-                rdBoth.setEnabled(false);
-                rdsyn.setEnabled(false);
-                serviceXML.setEnabled(false);
-                serverSideInterface.setEnabled(false);
-                chkTestCase.setEnabled(true);
-            }
-
-        }
-    }
-}
-
-class SecondFrameLayout implements LayoutManager {
-
-    public SecondFrameLayout() {
-    }
-
-    public void addLayoutComponent(String name, Component comp) {
-    }
-
-    public void removeLayoutComponent(Component comp) {
-    }
-
-    public Dimension preferredLayoutSize(Container parent) {
-        Dimension dim = new Dimension(0, 0);
-
-        Insets insets = parent.getInsets();
-        dim.width = 575 + insets.left + insets.right;
-        dim.height = 600 + insets.top + insets.bottom;
-
-        return dim;
-    }
-
-    public Dimension minimumLayoutSize(Container parent) {
-        return new Dimension(0, 0);
-    }
-
-    public void layoutContainer(Container parent) {
-        Insets insets = parent.getInsets();
-
-        Component c;
-
-        // Language selection
-        c = parent.getComponent(0);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 40, 192, 24);
-        }
-        c = parent.getComponent(1);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 272, insets.top + 40, 250, 24);
-        }
-
-        // Service Name selection
-        c = parent.getComponent(2);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 70, 192, 24);
-        }
-        c = parent.getComponent(3);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 272, insets.top + 70, 250, 24);
-        }
-
-        // Port Name Selection
-        c = parent.getComponent(4);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 100, 192, 24);
-        }
-        c = parent.getComponent(5);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 272, insets.top + 100, 250, 24);
-        }
-
-        // Data Binding Selection
-        c = parent.getComponent(8);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 130, 192, 24);
-        }
-        c = parent.getComponent(9);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 272, insets.top + 130, 250, 24);
-        }
-
-        //Package NAme Selection
-        c = parent.getComponent(6);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 160, 192, 24);
-        }
-        c = parent.getComponent(7);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 272, insets.top + 160, 250, 24);
-        }
-
-
-
-        // Test Case Selection
-        c = parent.getComponent(10);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 185, 208, 24);
-        }
-
-        // JSeperator
-
-        c = parent.getComponent(11);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 212, 530, 2);
-        }
-
-        // Client side options
-        c = parent.getComponent(12);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 215, 168, 24);
-        }
-
-        // Service invocation both,sync,async
-        c = parent.getComponent(13);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 48, insets.top + 240, 210, 24);
-        }
-        c = parent.getComponent(14);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 260, insets.top + 240, 140, 24);
-        }
-        c = parent.getComponent(15);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 400, insets.top + 240, 145, 24);
-        }
-
-        // JSeperator
-
-        c = parent.getComponent(16);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 267, 530, 2);
-        }
-
-        // Server side options
-        c = parent.getComponent(17);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 270, 168, 24);
-        }
-
-        // Generate serverside, generate service XML
-        c = parent.getComponent(18);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 48, insets.top + 290, 200, 24);
-        }
-
-        c = parent.getComponent(19);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 248, insets.top + 290, 250, 24);
-        }
-
-        // JSeperator
-
-        c = parent.getComponent(20);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 317, 530, 2);
-        }
-
-        c = parent.getComponent(21);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 320, 200, 24);
-        }
-
-        // JSeperator
-
-        c = parent.getComponent(22);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 347, 530, 2);
-        }
-
-        c = parent.getComponent(23);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 350, 250, 24);
-        }
-
-        c = parent.getComponent(24);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 370, 522, 85);
-        }
-
-        //Codegen Option
-        c = parent.getComponent(25);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 10, 192, 24);
-        }
-        c = parent.getComponent(26);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 272, insets.top + 10, 250, 24);
-        }
-
-
-    }
-}
-
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/FirstPanel.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/FirstPanel.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/FirstPanel.java	(working copy)
@@ -19,14 +19,16 @@
 package org.apache.axis2.tools.idea;
 
 import org.apache.axis2.tools.bean.CodegenBean;
+import org.apache.axis2.tools.component.WizardPanel;
+import org.apache.axis2.tools.component.WizardComponents;
+import org.apache.axis2.tools.wizardframe.CodegenFrame;
 
 import javax.swing.*;
-import javax.swing.filechooser.FileFilter;
+import javax.swing.border.EmptyBorder;
+import javax.wsdl.WSDLException;
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
 import java.io.File;
 
 /**
@@ -34,177 +36,132 @@
  * Date: Jul 20, 2005
  * Time: 3:35:47 PM
  */
-public class FirstPanel extends JPanel implements ActionListener, MouseListener {
+public class FirstPanel extends WizardPanel {
 
-    JLabel lblWSDL;
-    JTextField txtWSDL;
-    JButton btnBrowse;
-    final JFileChooser fc = new JFileChooser();
-    private CodegenBean codegenBean;
+    private JLabel lblWSDL;
+    private JTextField txtWSDL;
+    private JButton btnBrowse;
+    private JButton btnHint;
+    private JLabel lblHint;
+    private boolean flag=false;
+    final private String hint="You can select only *.wsdl/*.xml file location.";
 
-    public FirstPanel(CodegenBean codegenBean) {
-        this.codegenBean = codegenBean;
-        FirstPanelLayout customLayout = new FirstPanelLayout();
-        setLayout(customLayout);
 
-        setFont(new Font("Helvetica", Font.PLAIN, 12));
-        lblWSDL = new JLabel("WSDL File");
-        add(lblWSDL);
+    final JFileChooser FileChooser =new JFileChooser();
 
-        txtWSDL = new JTextField("");
-        add(txtWSDL);
-        txtWSDL.addActionListener(this);
-        txtWSDL.addMouseListener(this);
+    private CodegenBean codegenBean;
 
-        btnBrowse = new JButton("Browse...");
-        add(btnBrowse);
-        btnBrowse.addActionListener(this);
+    public FirstPanel(WizardComponents wizardComponents,CodegenBean codegenBean) {
+        super(wizardComponents, "Option  was choosed");
+        this.codegenBean=codegenBean;
+        setPanelTopTitle("WSDL selection page");
+        setPanelBottomTitle("please Select the WSDl file location");
+        init();
+    }
 
+    private void init(){
 
-        Dimension dim = new Dimension(450, 600);
-        setSize(dim);
-        fc.setFileFilter(new WSDLFileFilter());
+        lblHint =new JLabel("");
+        btnHint =new JButton("Hint >>");
+        btnHint.setBorder(new EmptyBorder(new Insets(0,0,0,0)));
 
+        this.setLayout(new GridBagLayout());
+        lblWSDL =new JLabel("WSDL File Location");
+        txtWSDL =new JTextField();
+        btnBrowse = new JButton("Browse");
 
-    }
+        this.setLayout(new GridBagLayout());
+        this.add(lblWSDL
+                , new GridBagConstraints(0, 0, 1, 1, 0.1, 0.0
+                , GridBagConstraints.NORTHWEST , GridBagConstraints.NONE
+                , new Insets(5, 10, 0,10), 0, 0));
 
-    public void actionPerformed(ActionEvent e) {
-        Object obj = e.getSource();
-        if (obj == btnBrowse) {
+        this.add(txtWSDL
+                , new GridBagConstraints(1, 0, GridBagConstraints.RELATIVE, 1, 2.0, 0.0
+                , GridBagConstraints.CENTER  , GridBagConstraints.HORIZONTAL
+                , new Insets(5, 10, 0, 10), 0, 0));
 
-            int returnVal = fc.showOpenDialog(this);
-            if (returnVal == JFileChooser.APPROVE_OPTION) {
-                File file = fc.getSelectedFile();
-                txtWSDL.setText(file.getAbsolutePath());
-                BottomPanel.setEnable(false,true, false, true);
-                codegenBean.setWSDLFileName(file.getAbsolutePath());
-            } 
-        } else if (obj == txtWSDL) {
-            if (txtWSDL.getText() != null && !txtWSDL.getText().trim().equals("")) {
-                BottomPanel.setEnable(false,true, false, true);
-                codegenBean.setWSDLFileName(txtWSDL.getText().trim());
+        this.add(btnBrowse
+                , new GridBagConstraints(2, 0, 1, 1, 0.1, 0.0
+                , GridBagConstraints.CENTER , GridBagConstraints.NONE
+                , new Insets(5, 10, 0,10), 0, 0));
+        btnBrowse.addActionListener(new ActionListener()  {
+            public void actionPerformed(ActionEvent e) {
+                FileChooser.setFileFilter(new WSDLFileFilter());
+                int returnVal = FileChooser.showOpenDialog(btnBrowse);
+                if (returnVal == JFileChooser.APPROVE_OPTION) {
+                    File file = FileChooser.getSelectedFile();
+                    txtWSDL.setText(file.getAbsolutePath());
+                    codegenBean.setWSDLFileName(file.getAbsolutePath());
+                    update();
+                }
             }
+        });
 
-        }
+        this.add(btnHint,
+                new GridBagConstraints(0, 1, 1, 1, 0.1,0.0
+                        , GridBagConstraints.NORTHWEST, GridBagConstraints.NONE
+                        , new Insets(5, 10, 0, 10), 0, 0));
+        btnHint.addActionListener(new ActionListener()  {
+            public void actionPerformed(ActionEvent e) {
+                if(flag){
+                    btnHint.setText("Hint >>");
+                    lblHint.setText("");
+                    flag=false;
+                }else{
+                    btnHint.setText("Hint <<");
+                    lblHint.setText(hint);
+                    flag=true;
+                }
+            }
+        });
 
-    }
+        this.add(lblHint ,
+                new GridBagConstraints(0, 2, GridBagConstraints.REMAINDER, 1, 0.1, 1.0
+                        , GridBagConstraints.NORTHWEST , GridBagConstraints.HORIZONTAL
+                        , new Insets(5, 10, 0,10), 0, 0));
 
-    public void mouseClicked(MouseEvent e) {
-        Object obj = e.getSource();
-        if (obj == txtWSDL) {
-            if (txtWSDL.getText() != null && !txtWSDL.getText().trim().equals("")) {
-                BottomPanel.setEnable(false,true, false, true);
-                codegenBean.setWSDLFileName(txtWSDL.getText().trim());
-            }
-        }
+        this.setPageComplete(false);
     }
 
-    public void mouseEntered(MouseEvent e) {
-    }
 
-    public void mouseExited(MouseEvent e) {
-        Object obj = e.getSource();
-        if (obj == txtWSDL) {
-            if (txtWSDL.getText() != null && !txtWSDL.getText().trim().equals("")) {
-                BottomPanel.setEnable(false,true, false, true);
-                codegenBean.setWSDLFileName(txtWSDL.getText().trim());
-            }
-        }
+    public void next() {
+        if(txtWSDL.getText()!=null && isPageComplete()){
+            codegenBean.setWSDLFileName(txtWSDL.getText());
+            switchPanel(CodegenFrame.PANEL_OPTION_A );
+        } else
+            switchPanel(CodegenFrame.PANEL_FIRST_A );
     }
-
-    public void mousePressed(MouseEvent e) {
-        Object obj = e.getSource();
-        if (obj == txtWSDL) {
-            if (txtWSDL.getText() != null && !txtWSDL.getText().trim().equals("")) {
-                BottomPanel.setEnable(false,true, false, true);
-                codegenBean.setWSDLFileName(txtWSDL.getText().trim());
-            }
-        }
+    public void back() {
+        switchPanel(CodegenFrame.PANEL_CHOOSER );
     }
 
-    public void mouseReleased(MouseEvent e) {
-        Object obj = e.getSource();
-        if (obj == txtWSDL) {
-            if (txtWSDL.getText() != null && !txtWSDL.getText().trim().equals("")) {
-                BottomPanel.setEnable(false,true, false, true);
-                codegenBean.setWSDLFileName(txtWSDL.getText().trim());
+    public void update(){
+        if(!txtWSDL.getText().trim().equals("")){
+            try {
+                codegenBean.readWSDL();
+                setNextButtonEnabled(true);
+                setFinishButtonEnabled(false);
+                setPageComplete(true);
+            } catch (WSDLException e) {
+                setNextButtonEnabled(false);
+                setFinishButtonEnabled(false);
+                setPageComplete(false);
+                JOptionPane.showMessageDialog(this, "An error occured while parsing the " +
+                        "specified WSDL. Please make sure that the selected file is a valid WSDL.",
+                        "Error!", JOptionPane.ERROR_MESSAGE);
             }
+        }else{
+            setNextButtonEnabled(false);
+            setFinishButtonEnabled(false);
+            setPageComplete(false);
         }
-    }
-}
+        setBackButtonEnabled(true);
 
-/*class WSDLFileFilter extends FileFilter {
-
-    public boolean accept(File f) {
-        if (f.isDirectory()) {
-            return true;
-        }
-        String extension = getExtension(f);
-        if (extension != null) {
-            return extension.equals("wsdl");
-        }
-
-        return false;
-
     }
 
-    public String getDescription() {
-        return ".wsdl";
+    public  int getPageType() {
+        return  WizardPanel.WSDL_2_JAVA_TYPE;
     }
-
-    private String getExtension(File f) {
-        String ext = null;
-        String s = f.getName();
-        int i = s.lastIndexOf('.');
-
-        if (i > 0 && i < s.length() - 1) {
-            ext = s.substring(i + 1).toLowerCase();
-        }
-        return ext;
-    }
-
-}*/
-
-class FirstPanelLayout implements LayoutManager {
-
-    public FirstPanelLayout() {
-    }
-
-    public void addLayoutComponent(String name, Component comp) {
-    }
-
-    public void removeLayoutComponent(Component comp) {
-    }
-
-    public Dimension preferredLayoutSize(Container parent) {
-        Dimension dim = new Dimension(0, 0);
-
-        Insets insets = parent.getInsets();
-        dim.width = 541 + insets.left + insets.right;
-        dim.height = 600 + insets.top + insets.bottom;
-
-        return dim;
-    }
-
-    public Dimension minimumLayoutSize(Container parent) {
-        return new Dimension(0, 0);
-    }
-
-    public void layoutContainer(Container parent) {
-        Insets insets = parent.getInsets();
-
-        Component c;
-        c = parent.getComponent(0);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 8, 72, 24);
-        }
-        c = parent.getComponent(1);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 88, insets.top + 8, 350, 24);
-        }
-        c = parent.getComponent(2);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 448, insets.top + 8, 90, 24);
-        }
-    }
 }
+
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/Java2CodeFrame.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/Java2CodeFrame.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/Java2CodeFrame.java	(working copy)
@@ -1,401 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements. See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership. The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.axis2.tools.idea;
-
-import com.intellij.openapi.application.ApplicationManager;
-import com.intellij.openapi.project.Project;
-import com.intellij.openapi.roots.OrderRootType;
-import com.intellij.openapi.roots.libraries.Library;
-import com.intellij.openapi.roots.libraries.LibraryTable;
-import com.intellij.openapi.vfs.JarFileSystem;
-import com.intellij.openapi.vfs.VirtualFile;
-import com.intellij.openapi.vfs.VirtualFileManager;
-import org.apache.axis2.tools.bean.CodegenBean;
-import org.apache.axis2.tools.bean.SrcCompiler;
-import org.apache.ideaplugin.bean.JarFileWriter;
-
-import javax.swing.*;
-import javax.wsdl.WSDLException;
-import java.awt.*;
-import java.io.*;
-
-/**
- * Author : Deepal Jayasinghe
- * Date: Jul 19, 2005
- * Time: 2:26:15 PM
- */
-public class Java2CodeFrame extends JFrame {
-   // ImagePanel panel_3;
-    FirstPanel plMiddle;
-    BottomPanel lblBottom;
-    //    SecondPanel secondPanel;
-    SecondFrame secondPanel;
-    OutPutPane outputpane;
-    private int panleID = 0;
-    private ClassLoader classLoader;
-
-    // To keep the value of wsdl wizzard
-    private CodegenBean codegenBean;
-    private int defaultCloseOperation;
-    public Java2CodeFrame() {
-        windowLayout customLayout = new windowLayout(1);
-
-        setTitle("Axis2 Code Generation Wizard");
-
-
-        getContentPane().setFont(new Font("Helvetica", Font.PLAIN, 12));
-        getContentPane().setLayout(customLayout);
-
-        codegenBean = new CodegenBean();
-
-      /*  panel_3 = new ImagePanel();
-        panel_3.setCaptions("  WSDL selection page"
-                , "  Welcome to the Axis2 code generation wizard. Select the WSDL file");*/
-
-       // getContentPane().add(panel_3);
-
-        plMiddle = new FirstPanel(codegenBean);
-        getContentPane().add(plMiddle);
-
-        lblBottom = new BottomPanel(this);
-        BottomPanel.setEnable(false,false, false, true);
-        getContentPane().add(lblBottom);
-
-        secondPanel = new SecondFrame();
-        secondPanel.setVisible(false);
-        getContentPane().add(secondPanel);
-
-        outputpane = new OutPutPane(codegenBean);
-        outputpane.setVisible(false);
-        getContentPane().add(outputpane);
-
-        Dimension dim = new Dimension(450, 600);
-        setSize(dim);
-        setBounds(200, 200, dim.width, dim.height);
-    }
-
-    public void setDefaultCloseOperation(int operation) {
-        if (operation != DO_NOTHING_ON_CLOSE &&
-                operation != HIDE_ON_CLOSE &&
-                operation != DISPOSE_ON_CLOSE &&
-                operation != EXIT_ON_CLOSE) {
-            throw new IllegalArgumentException("defaultCloseOperation must be one of: DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE, DISPOSE_ON_CLOSE, or EXIT_ON_CLOSE");
-        }
-        if (this.defaultCloseOperation != operation) {
-            if (operation == EXIT_ON_CLOSE) {
-                SecurityManager security = System.getSecurityManager();
-                if (security != null) {
-                    security.checkExit(0);
-                }
-            }
-            int oldValue = this.defaultCloseOperation;
-            this.defaultCloseOperation = operation;
-            firePropertyChange("defaultCloseOperation", oldValue, operation);
-        }
-    }
-
-    public void setProject(Project project) {
-        codegenBean.setProject(project);
-    }
-
-
-    public ClassLoader getClassLoader() {
-        return classLoader;
-    }
-
-    public void setClassLoader(ClassLoader classLoader) {
-        this.classLoader = classLoader;
-    }
-
-    public void generatecode() throws Exception {
-        secondPanel.fillBean();
-        codegenBean.generate();
-    }
-
-    public void generateDefaultServerCode(File temp, String output) throws Exception {
-
-
-        temp.mkdir();
-        try {
-            codegenBean.generate();
-            copyDirectory(new File(temp + File.separator + "src"), new File(output));
-            copyDirectory(new File(temp + File.separator + "resources"), new File(output + File.separator + ".." + File.separator + "resources"));
-
-        } catch (Exception e1) {
-            throw e1;
-        }
-        finally {
-
-            deleteDirectory(temp);
-        }
-    }
-
-    public void generateDefaultServerCodeCustomLocation(String output) throws Exception {
-
-
-        try {
-
-            codegenBean.setOutput(output);
-            codegenBean.generate();
-
-        } catch (Exception e1) {
-            throw e1;
-        }
-
-    }
-
-    public void copyDirectory(File srcDir, File destDir) throws IOException {
-        if (srcDir.isDirectory()) {
-            if (!destDir.isDirectory()) {
-                destDir.mkdir();
-            }
-            String[] children = srcDir.list();
-            for (int count = 0; count < children.length; count++) {
-                copyDirectory(new File(srcDir, children[count]), new File(destDir, children[count]));
-            }
-        } else {
-            copyFiles(srcDir, destDir);
-        }
-    }
-
-    public void copyFiles(File src, File dest) throws IOException {
-        InputStream in = new FileInputStream(src);
-        OutputStream out = new FileOutputStream(dest);
-        byte[] buf = new byte[1024];
-        int len;
-        while ((len = in.read(buf)) > 0) {
-            out.write(buf, 0, len);
-        }
-        in.close();
-        out.close();
-
-    }
-
-    public void deleteDirectory(File dir) {
-        if (dir.isDirectory()) {
-            String[] children = dir.list();
-            for (int count = 0; count < children.length; count++) {
-                deleteDirectory(new File(dir, children[count]));
-            }
-        }
-        dir.delete();
-    }
-
-    public void generateDefaultClientCode(File temp) throws Exception {
-
-
-        temp.mkdir();
-        try {
-            codegenBean.generate();
-            SrcCompiler compiler = new SrcCompiler();
-            compiler.compileSource(temp.getAbsolutePath()  );
-            String wsdl = codegenBean.getWSDLFileName();
-            final String name = wsdl.substring(wsdl.lastIndexOf(File.separatorChar) + 1, wsdl.lastIndexOf(".")) + "-stub";
-            final File lib = new File(temp.getAbsolutePath() + File.separator + "lib");
-            if (!lib.isDirectory()) {
-                lib.mkdir();
-            }
-            JarFileWriter jarFileWriter = new JarFileWriter();
-            jarFileWriter.writeJarFile(lib, name + ".jar", new File(temp.getAbsolutePath() + File.separator + "classes"));
-            Project project = codegenBean.getActiveProject();
-
-            final LibraryTable table = (LibraryTable) project.getComponent(LibraryTable.class);
-
-            ApplicationManager.getApplication().runWriteAction(new
-                    Runnable() {
-                        public void run() {
-                            String url = VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, lib.getAbsolutePath() + File.separator + name + ".jar") + JarFileSystem.JAR_SEPARATOR;
-
-                            VirtualFile jarVirtualFile = VirtualFileManager.getInstance().findFileByUrl(url);
-                            Library myLibrary = table.createLibrary(name);
-                            Library.ModifiableModel libraryModel = myLibrary.getModifiableModel();
-                            libraryModel.addRoot(jarVirtualFile, OrderRootType.CLASSES);
-                            libraryModel.commit();
-
-                        }
-                    });
-
-            copyDirectory(new File(temp + File.separator + "src"), new File(codegenBean.getOutput()+File.separator + ".." + File.separator + "src") );
-            copyDirectory(new File(temp + File.separator + "lib"), new File(codegenBean.getOutput() + File.separator + ".." + File.separator + "lib"));
-            copyFiles(new File(temp + File.separator + "build.xml"), new File(codegenBean.getOutput() + File.separator + ".." + File.separator + "build.xml"));
-
-        } catch (Exception e1) {
-
-            throw e1;
-        }
-        finally {
-
-            deleteDirectory(temp);
-        }
-    }
-
-
-    public void setPane() {
-        panleID++;
-        switch (panleID) {
-            case 1: {
-                try {
-                    codegenBean.readWSDL();
-                } catch (WSDLException e) {
-                    JOptionPane.showMessageDialog(this, "An error occured while parsing the " +
-                            "specified WSDL. Please make sure that the selected file is a valid WSDL.",
-                            "Error!", JOptionPane.ERROR_MESSAGE);
-                    panleID--;
-                    break;
-                }
-              /*  panel_3.setCaptions("  Custom Options"
-                        , "  Set the options for the code generation");*/
-
-                this.secondPanel.setVisible(true);
-                if(this.secondPanel.codegenBean == null)
-                    this.secondPanel.setCodeGenBean(codegenBean);
-                this.secondPanel.setStatus();
-                this.plMiddle.setVisible(false);
-                this.outputpane.setVisible(false);
-                BottomPanel.setEnable(true,true, false, true);
-                break;
-            }
-            case 2: {
-
-               /* panel_3.setCaptions("  Set the output location for the generated code"
-                        , "  set the output project for the generated code");*/
-                this.secondPanel.setVisible(false);
-                this.plMiddle.setVisible(false);
-                this.secondPanel.fillBean();
-                outputpane.loadCmbCurrentProject();
-                outputpane.loadcmbModuleSrcProject();
-                this.outputpane.setVisible(true);
-                BottomPanel.setEnable(true,false, true, true);
-                break;
-            }
-        }
-    }
-
-    public String validatePackageNames(){
-        if (!validatePackageName(this.secondPanel.txtPacakgeName.getText()))
-            return this.secondPanel.txtPacakgeName.getText();
-
-        for(int count=0;count<this.secondPanel.table.getRowCount();count++){
-            if(!validatePackageName((String)this.secondPanel.table.getValueAt(count,1)))
-                return (String)this.secondPanel.table.getValueAt(count,1);
-        }
-        return null;
-    }
-
-    public boolean validatePackageName(String name){
-
-        if(name.matches("[a-z]([a-z0-9_]+\\.?)+[a-z0-9_]"))
-            return true;
-
-        return false;
-    }
-
-    public void backButtonImpl(){
-        panleID--;
-        switch (panleID) {
-            case 0: {
-               /* panel_3.setCaptions("  WSDL selection page"
-                        , "  Welcome to the Axis2 code generation wizard. Select the WSDL file");*/
-                this.secondPanel.setVisible(false);
-                this.plMiddle.setVisible(true);
-                this.outputpane.setVisible(false);
-                BottomPanel.setEnable(false,true, false, true);
-                break;
-            }
-            case 1: {
-              /*  panel_3.setCaptions("  Custom  Options"
-                        , "  Set the options for the code generation");*/
-
-                this.secondPanel.setVisible(true);
-                this.plMiddle.setVisible(false);
-                this.outputpane.setVisible(false);
-                BottomPanel.setEnable(true,true, false, true);
-                break;
-            }
-        }
-
-    }
-
-    public void increasePanelID() {
-        panleID++;
-    }
-
-    public void setMiddlerPanel(int panel) {
-        this.panleID = panel;
-        this.pack();
-        this.show();
-    }
-
-
-}
-
-class windowLayout implements LayoutManager {
-
-    int paneID;
-
-    public windowLayout(int panelid) {
-        paneID = panelid;
-    }
-
-    public void addLayoutComponent(String name, Component comp) {
-    }
-
-    public void removeLayoutComponent(Component comp) {
-    }
-
-    public Dimension preferredLayoutSize(Container parent) {
-        Dimension dim = new Dimension(0, 0);
-
-        Insets insets = parent.getInsets();
-        dim.width = 550 + insets.left + insets.right;
-        dim.height = 600 + insets.top + insets.bottom;
-
-        return dim;
-    }
-
-    public Dimension minimumLayoutSize(Container parent) {
-        return new Dimension(0, 0);
-    }
-
-    public void layoutContainer(Container parent) {
-        Insets insets = parent.getInsets();
-
-        Component c;
-       /* c = parent.getComponent(0);
-        if (c.isVisible()) {
-            c.setBounds(insets.left, insets.top, 600, 80);
-        }*/
-        c = parent.getComponent(0);
-        if (c.isVisible()) {
-            c.setBounds(insets.left, insets.top + 80, 600, 480);
-        }
-        c = parent.getComponent(2);
-        if (c.isVisible()) {
-            c.setBounds(insets.left, insets.top + 80, 600, 480);
-        }
-        c = parent.getComponent(3);
-        if (c.isVisible()) {
-            c.setBounds(insets.left, insets.top + 80, 600, 480);
-        }
-        c = parent.getComponent(1);
-        if (c.isVisible()) {
-            c.setBounds(insets.left, insets.top + 550, 600, 50);
-        }
-    }
-}
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondPanel.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondPanel.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondPanel.java	(working copy)
@@ -18,73 +18,350 @@
  */
 package org.apache.axis2.tools.idea;
 
+import org.apache.axis2.tools.bean.CodegenBean;
+import org.apache.axis2.tools.wizardframe.CodegenFrame;
+import org.apache.axis2.tools.component.WizardPanel;
+import org.apache.axis2.tools.component.WizardComponents;
+import org.apache.axis2.util.URLProcessor;
+
+import javax.swing.*;
+import javax.xml.namespace.QName;
+import javax.wsdl.WSDLException;
 import java.awt.*;
+import java.awt.event.ItemListener;
+import java.awt.event.ItemEvent;
+import java.util.Iterator;
+import java.util.Collection;
+import java.util.List;
 
-class SecondPanelLayout implements LayoutManager {
+public class SecondPanel  extends  WizardPanel {
 
-    public SecondPanelLayout() {
-    }
+    private JComboBox cmbCodeGenOption;
+    private JComboBox cmbLan;
+    private JComboBox cmbServiceName;
+    private JComboBox cmbPortName;
+    private JTextField txtPacakgeName;
+    private JComboBox cmbdbtype;
+    private JCheckBox chkTestCase;
+    private JRadioButton clientSide;
+    private JRadioButton rdBoth;
+    private JRadioButton rdsyn;
+    private JRadioButton rdasync;
+    private JRadioButton serverSide;
+    private JCheckBox serviceXML;
+    private JCheckBox serverSideInterface;
+    private JRadioButton all;
+    private JTable table;
+    private JScrollPane spTable;
+    private List serviceNameList;
+    private PackageNameTableModel model;
+    private CodegenBean codegenBean;
 
-    public void addLayoutComponent(String name, Component comp) {
+     public SecondPanel(WizardComponents wizardComponents,CodegenBean codegenBean) {
+        super(wizardComponents, "Option  was choosed");
+        this.codegenBean=codegenBean;
+        setPanelTopTitle("Options");
+        setPanelBottomTitle("Set the options for the code generator. If you wish to edit the codegen options, Select custom");
+        init();
     }
 
-    public void removeLayoutComponent(Component comp) {
-    }
+    private void init(){
 
-    public Dimension preferredLayoutSize(Container parent) {
-        Dimension dim = new Dimension(0, 0);
+        cmbLan = new JComboBox();
+        cmbLan.addItem("java");
+        cmbLan.setToolTipText("Select the language of the generated code");
+        cmbLan.setEnabled(false);
 
-        Insets insets = parent.getInsets();
-        dim.width = 565 + insets.left + insets.right;
-        dim.height = 300 + insets.top + insets.bottom;
+        cmbServiceName = new JComboBox();
+        add(cmbServiceName);
+        cmbServiceName.setToolTipText("Select the name of the service that the code should be generated for");
+        cmbServiceName.setEnabled(false);
 
-        return dim;
+        cmbPortName = new JComboBox();
+        cmbPortName.setToolTipText("Select the port name that the code should be generated for");
+        cmbPortName.setEnabled(false);
+
+        txtPacakgeName = new JTextField("org.axis2");
+        txtPacakgeName.setToolTipText("Set the package name of the generated code");
+        txtPacakgeName.setEnabled(false);
+
+        cmbdbtype = new JComboBox();
+        cmbdbtype.addItem("adb");
+        cmbdbtype.addItem("xmlbeans");
+        cmbdbtype.addItem("none");
+        cmbdbtype.setToolTipText("Select the databinding framework to be used in the generation process");
+        cmbdbtype.setEnabled(false);
+
+        chkTestCase = new JCheckBox("Generate Test Case", false);
+        chkTestCase.setVisible(true);
+        chkTestCase.setToolTipText("A test case will be generated if this is checked");
+        chkTestCase.setEnabled(false);
+
+        ButtonGroup generationType = new ButtonGroup();
+
+        clientSide = new JRadioButton("Generate Client Side",true);
+        generationType.add(clientSide);
+        clientSide.setEnabled(false);
+
+        ButtonGroup buttonGroup = new ButtonGroup();
+
+        rdBoth = new JRadioButton("Generate both sync and async", false);
+        buttonGroup.add(rdBoth);
+        rdBoth .setEnabled(false);
+
+        rdsyn = new JRadioButton("Generate sync only", false);
+        buttonGroup.add(rdsyn);
+        rdsyn.setEnabled(false);
+
+        rdasync = new JRadioButton("Generate async only", false);
+        buttonGroup.add(rdasync);
+        rdasync.setEnabled(false);
+
+        serverSide = new JRadioButton("Generate Server Side");
+        generationType.add(serverSide);
+        serverSide.setEnabled(false);
+
+        serviceXML = new JCheckBox("Generate default service.xml", false);
+        serviceXML.setEnabled(false);
+
+
+        serverSideInterface = new JCheckBox("Generate an interface for skeleton", false);
+        serverSideInterface.setEnabled(false);
+
+        all = new JRadioButton("Generate All");
+        generationType.add(all);
+        all.setEnabled(false);
+
+        model = new PackageNameTableModel(new Object [1][2]);
+        table = new JTable(model);
+        table.setCellSelectionEnabled(true);
+        table.setEnabled(false);
+        spTable=new JScrollPane(table);
+        spTable.setEnabled(false);
+
+        cmbCodeGenOption =new JComboBox();
+        cmbCodeGenOption .addItem("default");
+        cmbCodeGenOption .addItem("custom");
+        cmbCodeGenOption .setToolTipText("Select the Codegen option");
+
+
+        this.setLayout(new GridBagLayout());
+
+        this.add(new JLabel("Cogen Option")
+        , new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+
+        this.add(cmbCodeGenOption
+        , new GridBagConstraints(1, 0, GridBagConstraints.REMAINDER, 1, 1.0, 0.0
+        , GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+        cmbCodeGenOption.addItemListener(new ItemListener() {
+            public void itemStateChanged(ItemEvent e) {
+                if (e.getStateChange() == ItemEvent.SELECTED) {
+                    if(cmbCodeGenOption.getSelectedItem().equals("default") ){
+                        cmbdbtype.setEnabled(false);
+                        cmbLan.setEnabled(false);
+                        cmbPortName .setEnabled(false);
+                        cmbServiceName.setEnabled(false);
+                        txtPacakgeName.setEnabled(false);
+                        cmbdbtype.setEnabled(false);
+                        chkTestCase.setEnabled(false);
+                        clientSide.setEnabled(false);
+                        rdBoth .setEnabled(false);
+                        rdsyn.setEnabled(false);
+                        rdasync.setEnabled(false);
+                        serverSide.setEnabled(false);
+                        table.setEnabled(false);
+                        spTable.setEnabled(false);
+
+                    }else{
+                        cmbdbtype.setEnabled(true);
+                        cmbLan.setEnabled(true);
+                        cmbPortName .setEnabled(true);
+                        cmbServiceName.setEnabled(true);
+                        txtPacakgeName.setEnabled(true);
+                        cmbdbtype.setEnabled(true);
+                        chkTestCase.setEnabled(true);
+                        clientSide.setEnabled(true);
+                        rdBoth .setEnabled(true);
+                        rdsyn.setEnabled(true);
+                        rdasync.setEnabled(true);
+                        serverSide.setEnabled(true);
+                        table.setEnabled(true);
+                        spTable.setEnabled(true);
+                    }
+                    update();
+                }
+            }
+        });
+
+         this.add(new JLabel("Out put lang")
+        , new GridBagConstraints(0, 1, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1,10, 0,10), 0, 0));
+
+         this.add(cmbLan
+        , new GridBagConstraints(1, 1, GridBagConstraints.REMAINDER, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+
+         this.add(new JLabel("Service name")
+        , new GridBagConstraints(0, 2, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+
+         this.add(cmbServiceName
+        , new GridBagConstraints(1, 2, GridBagConstraints.REMAINDER, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+
+         this.add(new JLabel("port Name")
+        , new GridBagConstraints(0, 3, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+         this.add(cmbPortName
+        , new GridBagConstraints(1, 3, GridBagConstraints.REMAINDER, 1,1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+        this.add(new JLabel("DataBinding")
+        , new GridBagConstraints(0, 4, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+         this.add(cmbdbtype
+        , new GridBagConstraints(1, 4, GridBagConstraints.REMAINDER, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+        this.add(new JLabel("Custom Packege")
+        , new GridBagConstraints(0, 5, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+        this.add(txtPacakgeName
+        , new GridBagConstraints(1, 5, GridBagConstraints.REMAINDER, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+        this.add(chkTestCase
+        , new GridBagConstraints(0, 6, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 10, 0,10), 0, 0));
+        this.add(new JSeparator()
+        , new GridBagConstraints(0, 7, GridBagConstraints.REMAINDER, 1, 0.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.BOTH
+        , new Insets(1, 10, 1,1), 0, 0));
+
+
+         this.add(clientSide
+        , new GridBagConstraints(0, 8, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+         this.add(rdBoth
+        , new GridBagConstraints(0, 9, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 10, 0,10), 0, 0));
+        this.add(rdsyn
+        , new GridBagConstraints(1, 9, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 5, 0,10), 0, 0));
+         this.add(rdasync
+        , new GridBagConstraints(2, 9, 1, 1, 1.0,0.0
+        , GridBagConstraints.WEST , GridBagConstraints.NONE
+        , new Insets(1, 5, 0,10), 0, 0));
+
+
+         this.add(new JSeparator()
+        , new GridBagConstraints(0, 10, GridBagConstraints.REMAINDER, 1, 0.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.BOTH
+        , new Insets(1, 10, 1,1), 0, 0));
+
+           this.add(serverSide
+        , new GridBagConstraints(0, 11, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 10, 0,10), 0, 0));
+        this.add(serviceXML
+        , new GridBagConstraints(0, 12, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 10, 0,10), 0, 0));
+         this.add(serverSideInterface
+        , new GridBagConstraints(1, 12, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1, 5, 0,10), 0, 0));
+
+
+        this.add(new JSeparator()
+        , new GridBagConstraints(0, 13, GridBagConstraints.REMAINDER, 1, 0.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.BOTH
+        , new Insets(1, 10, 1,1), 0, 0));
+
+
+         this.add(all
+        , new GridBagConstraints(0, 14, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1,10, 0,10), 0, 0));
+        this.add(new JSeparator()
+        , new GridBagConstraints(0, 15, GridBagConstraints.REMAINDER, 1, 0.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.BOTH
+        , new Insets(1, 10, 1,1), 0, 0));
+
+          this.add(new JLabel("Namespace to Package Mapping")
+        , new GridBagConstraints(0, 16, 1, 1, 1.0, 0.0
+        , GridBagConstraints.WEST , GridBagConstraints.HORIZONTAL
+        , new Insets(1,10, 0,10), 0, 0));
+
+         this.add(spTable
+        , new GridBagConstraints(0, 17, GridBagConstraints.REMAINDER, 1, 1.0, 1.0
+        , GridBagConstraints.NORTHWEST , GridBagConstraints.BOTH
+        , new Insets(1,10, 20,10), 0, 0));
+
+        setNextButtonEnabled(false);
+
     }
+     public void next() {
+          //  switchPanel(CodegenFrame.PANEL_LAST_A );
+    }
+    public void back() {
+          switchPanel(CodegenFrame.PANEL_FIRST_A );
+    }
 
-    public Dimension minimumLayoutSize(Container parent) {
-        return new Dimension(0, 0);
+    public void update(){
+        setNextButtonEnabled(false);
+        setStatus();
     }
 
-    public void layoutContainer(Container parent) {
-        Insets insets = parent.getInsets();
+    public void setStatus(){
+        loadNamespaces(codegenBean.getDefinitionNamespaceMap());
+        table.updateUI();
+        txtPacakgeName.setText(codegenBean.packageFromTargetNamespace());
+        cmbServiceName.removeAllItems();
+        serviceNameList = codegenBean.getServiceList();
+        for (int i = 0; i < serviceNameList.size(); i++) {
+            QName name = (QName) serviceNameList.get(i);
+            cmbServiceName.addItem(name.getLocalPart());
+        }
+        cmbServiceName.setSelectedIndex(0);
+    }
 
-        Component c;
-        c = parent.getComponent(0);
-        if (c.isVisible()) {
-            c.setBounds(insets.left, insets.top + 5, 200, 20);
+    private void loadNamespaces(Collection namespaceMap){
+
+        Iterator namespaces = namespaceMap.iterator();
+        Object tableData [][] = new Object[namespaceMap.size()][2];
+        int i = 0;
+        while(namespaces.hasNext()){
+
+            String namespace = (String)namespaces.next();
+            tableData[i][0] = namespace;
+            tableData[i][1] = getPackageFromNamespace(namespace);
+            i++;
         }
-        c = parent.getComponent(1);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 210, insets.top + 5, 160, 20);
-        }
-        c = parent.getComponent(2);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 30, 250, 24);
-        }
-        c = parent.getComponent(3);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 280, insets.top + 30, 150, 24);
-        }
-        c = parent.getComponent(4);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 55, 150, 24);
-        }
-        c = parent.getComponent(5);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 80, 200, 24);
-        }
-        c = parent.getComponent(6);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 210, insets.top + 80, 160, 24);
-        }
-        c = parent.getComponent(7);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 8, insets.top + 110, 200, 24);
-        }
-        c = parent.getComponent(8);
-        if (c.isVisible()) {
-            c.setBounds(insets.left + 210, insets.top + 110, 200, 24);
-        }
+
+        model.setTableData(tableData);
+
+
     }
+     public String getPackageFromNamespace(String namespace){
+        return  URLProcessor.makePackageName(namespace);
+    }
+      public  int getPageType() {
+        return  WizardPanel.WSDL_2_JAVA_TYPE;
+     }
 }
 
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/CodegenFrame.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/CodegenFrame.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/CodegenFrame.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.axis2.tools.bean.CodegenBean;
 import org.apache.axis2.tools.idea.FirstPanel;
 import org.apache.axis2.tools.idea.ChooserPanel;
+import org.apache.axis2.tools.idea.SecondPanel;
 import org.apache.axis2.tools.component.Utilities;
 import org.apache.axis2.tools.component.WizardPanel;
 import org.apache.axis2.tools.java2wsdl.MiddlePanel;
@@ -39,11 +40,11 @@
      */
     public static final int PANEL_CHOOSER = 0;
     public static final int PANEL_FIRST_A = 1;    //
-    public static final int PANEL_FIRST_B = 1;
-    public static final int PANEL_OPTION_A =2;
-    public static final int PANEL_OPTION_B = 2;
-    public static final int PANEL_LAST_A = 3;
-    public static final int PANEL_LAST_B = 3;
+    public static final int PANEL_FIRST_B = 2;
+    public static final int PANEL_OPTION_A =3;
+    public static final int PANEL_OPTION_B = 4;
+    public static final int PANEL_LAST_A = 5;
+    public static final int PANEL_LAST_B = 5;
 
     public CodegenFrame(Project project) {
         super(project);
@@ -60,16 +61,16 @@
 
         panel = new ChooserPanel(getWizardComponents());
         getWizardComponents().addWizardPanel(PANEL_CHOOSER , panel);
-      /*
+
         panel = new FirstPanel(getWizardComponents(),codegenBean);
         getWizardComponents().addWizardPanel(PANEL_FIRST_A , panel);
-       */
+
         panel = new MiddlePanel(getWizardComponents(),wsdlgenBean );
         getWizardComponents().addWizardPanel(PANEL_FIRST_B, panel);
 
-       /* panel = new SecondPanel(getWizardComponents(),codegenBean);
+        panel = new SecondPanel(getWizardComponents(),codegenBean);
         getWizardComponents().addWizardPanel(PANEL_OPTION_A , panel);
-       */
+
         panel = new OptionPanel(getWizardComponents(),wsdlgenBean);
         getWizardComponents().addWizardPanel(PANEL_OPTION_B , panel);
        /*
Index: modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/WizardFrame.java
===================================================================
--- modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/WizardFrame.java	(revision 553059)
+++ modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/WizardFrame.java	(working copy)
@@ -82,7 +82,7 @@
         this.getContentPane().add(progress
                 , new GridBagConstraints(0, 3, 1, 1, 1.0, 0.0
                 , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL
-                , new Insets(10, 5, 5, 5), 0, 0));
+                , new Insets(0, 0, 0, 0), 0, 0));
 
         this.getContentPane().add(new JSeparator()
                 , new GridBagConstraints(0, 4, 1, 1, 1.0, 0.0
