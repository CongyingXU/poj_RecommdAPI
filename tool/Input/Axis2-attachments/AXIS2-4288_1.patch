Index: AbstractHTTPSender.java
===================================================================
--- AbstractHTTPSender.java	(revision 760387)
+++ AbstractHTTPSender.java	(working copy)
@@ -40,6 +40,7 @@
 import org.apache.commons.httpclient.HttpConnectionManager;
 import org.apache.commons.httpclient.HttpMethod;
 import org.apache.commons.httpclient.HttpMethodBase;
+import org.apache.commons.httpclient.HttpState;
 import org.apache.commons.httpclient.HttpVersion;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.httpclient.NTCredentials;
@@ -322,6 +323,14 @@
 
                 Credentials creds;
 
+                HttpState tmpHttpState = null;
+                HttpState httpState = (HttpState)msgCtx.getServiceContext().getProperty(HTTPConstants.CACHED_HTTP_STATE);
+                if (httpState != null) {
+                    tmpHttpState = httpState;
+                } else {
+                    tmpHttpState = agent.getState();
+                }
+                
                 agent.getParams()
                         .setAuthenticationPreemptive(authenticator.getPreemptiveAuthentication());
 
@@ -333,17 +342,17 @@
                         /*Credentials for Digest and Basic Authentication*/
                         creds = new UsernamePasswordCredentials(username, password);
                     }
-                    agent.getState().setCredentials(new AuthScope(host, port, realm), creds);
+                    tmpHttpState.setCredentials(new AuthScope(host, port, realm), creds);
                 } else {
                     if (domain != null) {
                         /*Credentials for NTLM Authentication when host is ANY_HOST*/
                         creds = new NTCredentials(username, password, AuthScope.ANY_HOST, domain);
-                        agent.getState().setCredentials(
+                        tmpHttpState.setCredentials(
                                 new AuthScope(AuthScope.ANY_HOST, port, realm), creds);
                     } else {
                         /*Credentials only for Digest and Basic Authentication*/
                         creds = new UsernamePasswordCredentials(username, password);
-                        agent.getState().setCredentials(new AuthScope(AuthScope.ANY), creds);
+                        tmpHttpState.setCredentials(new AuthScope(AuthScope.ANY), creds);
                     }
                 }
                 /* Customizing the priority Order */
@@ -481,6 +490,13 @@
         if (reuse == null) {
             reuse = msgContext.getConfigurationContext().getProperty(HTTPConstants.REUSE_HTTP_CLIENT);
         }
+        
+        //We need this in order to have separate HttpState per client.         
+        Object httpState = (HttpState)msgContext.getOptions().getProperty(HTTPConstants.CACHED_HTTP_STATE);
+        if (httpState != null) {
+            msgContext.getServiceContext().setProperty(HTTPConstants.CACHED_HTTP_STATE, httpState);
+        }
+                
         if (reuse != null && JavaUtils.isTrueExplicitly(reuse)) {
             httpClient = (HttpClient) msgContext.getOptions().getProperty(HTTPConstants.CACHED_HTTP_CLIENT);
             if (httpClient == null) {
@@ -547,7 +563,9 @@
         if (cookiePolicy != null) {
             method.getParams().setCookiePolicy(cookiePolicy);   
         }
-        httpClient.executeMethod(config, method);
+        // Check if there is cached HTTP state.
+        HttpState httpState = (HttpState)msgContext.getServiceContext().getProperty(HTTPConstants.CACHED_HTTP_STATE);        
+        httpClient.executeMethod(config, method, httpState);
     }
 
     public void addCustomHeaders(HttpMethod method, MessageContext msgContext) {
