Index: modules/kernel/src/org/apache/axis2/util/JavaUtils.java
===================================================================
--- modules/kernel/src/org/apache/axis2/util/JavaUtils.java	(revision 567799)
+++ modules/kernel/src/org/apache/axis2/util/JavaUtils.java	(working copy)
@@ -455,6 +455,28 @@
         return null;
     }
 
+    public static Class getWrapperClass(String primitive) {
+        if (primitive.equals("int")) {
+            return java.lang.Integer.class;
+        } else if (primitive.equals("short")) {
+            return java.lang.Short.class;
+        } else if (primitive.equals("boolean")) {
+            return java.lang.Boolean.class;
+        } else if (primitive.equals("byte")) {
+            return java.lang.Byte.class;
+        } else if (primitive.equals("long")) {
+            return java.lang.Long.class;
+        } else if (primitive.equals("double")) {
+            return java.lang.Double.class;
+        } else if (primitive.equals("float")) {
+            return java.lang.Float.class;
+        } else if (primitive.equals("char")) {
+            return java.lang.Character.class;
+        }
+
+        return null;
+    }
+
     /**
      * Scans the parameter string for the parameter search ignoring case when
      * comparing characters.
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/codegen-config.properties
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/codegen-config.properties	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/codegen-config.properties	(working copy)
@@ -137,12 +137,12 @@
 # file extension for generated source files from this language
 c.filename.extension=c
 
-jax-ws.callback.template=org.apache.axis2.wsdl.codegen.writer.CallbackHandlerWriter,/org/apache/axis2/wsdl/template/java/CallbackHandlerTemplate.xsl
 jax-ws.exception.template=org.apache.axis2.wsdl.codegen.writer.ExceptionWriter,/org/apache/axis2/wsdl/template/java/JaxwsExceptionTemplate.xsl
+jax-ws.interface.impl.template=org.apache.axis2.wsdl.codegen.writer.InterfaceImplementationWriter,/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceImplTemplate.xsl
 jax-ws.skeleton.template=org.apache.axis2.wsdl.codegen.writer.SkeletonWriter,/org/apache/axis2/wsdl/template/java/JaxwsServiceClassTemplate.xsl
 jax-ws.skeleton.interface.template=org.apache.axis2.wsdl.codegen.writer.SkeletonInterfaceWriter,/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl
 jax-ws.testclass.template=org.apache.axis2.wsdl.codegen.writer.TestClassWriter,/org/apache/axis2/wsdl/template/java/TestClassTemplate.xsl
-jax-ws.service.template=org.apache.axis2.wsdl.codegen.writer.ServiceXMLWriter,/org/apache/axis2/wsdl/template/general/ServiceXMLTemplate.xsl
+jax-ws.service.template=org.apache.axis2.wsdl.codegen.writer.ServiceXMLWriter,/org/apache/axis2/wsdl/template/java/JaxwsServiceXMLTemplate.xsl
 jax-ws.antbuild.jaxbri.template=org.apache.axis2.wsdl.codegen.writer.AntBuildWriter,/org/apache/axis2/wsdl/template/general/jaxbriAntBuildTemplate.xsl
 jax-ws.antbuild.none.template=org.apache.axis2.wsdl.codegen.writer.AntBuildWriter,/org/apache/axis2/wsdl/template/general/defaultAntBuildTemplate.xsl
 # file extension for generated files from this language
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWSEmitter.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWSEmitter.java	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWSEmitter.java	(working copy)
@@ -1,15 +1,14 @@
 package org.apache.axis2.wsdl.codegen.emitter.jaxws;
 
 import org.w3c.dom.Document;
-import org.apache.axis2.wsdl.codegen.writer.FileWriter;
-import org.apache.axis2.wsdl.codegen.writer.SkeletonInterfaceWriter;
-import org.apache.axis2.wsdl.codegen.writer.ExceptionWriter;
-import org.apache.axis2.wsdl.codegen.writer.SkeletonWriter;
+import org.w3c.dom.Element;
+import org.apache.axis2.wsdl.codegen.writer.*;
 import org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter;
 import org.apache.axis2.wsdl.codegen.CodeGenerationException;
 import org.apache.axis2.wsdl.codegen.CodeGenConfiguration;
 import org.apache.axis2.description.AxisService;
-import org.apache.axis2.description.WSDL2Constants;
+import org.apache.axis2.AxisFault;
+
 import java.util.Iterator;
 import java.util.Map;
 
@@ -18,18 +17,11 @@
     protected final static String TYPE_SUFFIX = "Type";
     protected final static String SERVICE_SUFFIX = "Service";
     protected final static String EXCEPTION_SUFFIX = "Exception";
+    protected final static String JAXWS_PORT_TYPE_NAME = "JaxwsPortTypeName";
+    protected final static String JAXWS_IMPL_SUFFIX = "Impl";
 
-    protected String portTypeName;
-    protected String serviceName;
-    protected String packageName;
-    protected String targetNS;
-
     public void setCodeGenConfiguration(CodeGenConfiguration configuration) {
         super.setCodeGenConfiguration(configuration);
-        portTypeName = (String) axisService.getParameterValue(WSDL2Constants.INTERFACE_LOCAL_NAME);
-        serviceName = axisService.getName();
-        targetNS = codeGenConfiguration.getTargetNamespace();
-        packageName = codeGenConfiguration.getPackageName();
     }
 
     public void emitSkeleton() throws CodeGenerationException {
@@ -56,11 +48,14 @@
                 //handle faults
                 generateAndPopulateFaultNames();
 
+                //write the Exceptions
+                writeExceptions();
+
                 //write the Service Endpoint Interface
                 writeServiceEndpointInterface();
 
-                //write the Exceptions
-                writeExceptions();
+                //write the Service Endpoint Interface
+                writeServiceEndpointInterfaceImpl();
 
                 //write the Service Class
                 writeServiceClass();
@@ -110,6 +105,19 @@
         writeFile(skeletonModel, skeletonInterfaceWriter);
     }
 
+    protected void writeServiceEndpointInterfaceImpl() throws Exception {
+        Document skeletonModel = createDOMDocumentForSEIImpl();
+        debugLogDocument("Document for Service Endpoint Interface:", skeletonModel);
+        FileWriter interfaceImplementationWriter = new InterfaceImplementationWriter(
+                codeGenConfiguration.isFlattenFiles() ?
+                        getOutputDirectory(codeGenConfiguration.getOutputLocation(), null) :
+                        getOutputDirectory(codeGenConfiguration.getOutputLocation(),
+                                codeGenConfiguration.getSourceLocation())
+                , this.codeGenConfiguration.getOutputLanguage());
+
+        writeFile(skeletonModel, interfaceImplementationWriter);
+    }
+
     /**
      * Writes the exception calsses.
      */
@@ -153,13 +161,38 @@
         writeFile(skeletonModel, skeletonInterfaceWriter);
     }
 
+    protected Document createDOMDocumentForServiceXML() {
+        Document doc = getEmptyDocument();
+        String className = null;
+        String serviceName = null;
+        Element rootElement = doc.createElement("interfaces");
+        doc.appendChild(rootElement);
+
+        for (Iterator iter = this.axisServices.iterator(); iter.hasNext();) {
+            this.axisService = (AxisService) iter.next();
+            this.axisBinding = axisService.getEndpoint(axisService.getEndpointName()).getBinding();
+            serviceName = axisService.getName();
+            className = (String)axisService.getParameter(JAXWS_PORT_TYPE_NAME).getValue() + JAXWS_IMPL_SUFFIX;
+            rootElement.appendChild(getServiceElement(serviceName, className, doc));
+        }
+
+        return doc;
+    }
+
     /**
      * Creates the XML model for the Service Endpoint interface
      *
      * @return DOM Document
      */
-    protected abstract Document createDOMDocumentForSEI();
+    protected abstract Document createDOMDocumentForSEI() throws AxisFault;
 
+     /**
+     * Creates the XML model for the Service Endpoint interface Implementation class
+     *
+     * @return DOM Document
+     */
+    protected abstract Document createDOMDocumentForSEIImpl() throws AxisFault;
+
     /**
      * Creates the XML model for the Service Class
      *
@@ -175,6 +208,48 @@
      */
     protected abstract Document createDOMDocumentForException(String key);
 
+    /**
+     * A resusable method to return the service element for creating the service xml
+     *
+     * @param serviceName
+     * @param className
+     * @param doc
+     * @return DOM Element
+     */
+    protected Element getServiceElement(String serviceName, String className, Document doc) {
+
+        if (allServiceInfoHolder.get(serviceName) != null) {
+            this.infoHolder = (Map) allServiceInfoHolder.get(serviceName);
+        }
+        Element rootElement = doc.createElement("interface");
+
+        addAttribute(doc, "package", "", rootElement);
+        addAttribute(doc, "classpackage", codeGenConfiguration.getPackageName(), rootElement);
+        addAttribute(doc, "name", className, rootElement);
+
+        if (!codeGenConfiguration.isWriteTestCase()) {
+            addAttribute(doc, "testOmit", "true", rootElement);
+        }
+        addAttribute(doc, "servicename", serviceName, rootElement);
+
+        Iterator it = mepToClassMap.keySet().iterator();
+        while (it.hasNext()) {
+            Object key = it.next();
+
+            if (Boolean.TRUE.equals(infoHolder.get(key))) {
+                Element elt = addElement(doc, "messagereceiver",
+                        makeJavaClassName(serviceName) + mepToSuffixMap.get(key),
+                        rootElement);
+                addAttribute(doc, "mepURI", key.toString(), elt);
+            }
+
+        }
+
+        loadOperations(doc, rootElement, null);
+
+        return rootElement;
+    }
+
     //Util methods
     public String extratClassName(String fullyQualifiedName) {
         if (fullyQualifiedName == null) {
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWS20Emitter.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWS20Emitter.java	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/JAXWS20Emitter.java	(working copy)
@@ -3,9 +3,7 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.apache.axis2.description.WSDL2Constants;
-import org.apache.axis2.util.JavaUtils;
-import org.apache.woden.internal.util.dom.DOM2Writer;
-
+import org.apache.axis2.AxisFault;
 import javax.xml.namespace.QName;
 import java.util.Iterator;
 
@@ -16,14 +14,18 @@
      *
      * @return DOM Document
      */
-    protected Document createDOMDocumentForSEI() {
+    protected Document createDOMDocumentForSEI() throws AxisFault {
         Document doc = getEmptyDocument();
         Element rootElement = doc.createElement("javaConstruct");
 
         Element importList = doc.createElement("importList");
         rootElement.appendChild(importList);
 
+        String packageName = codeGenConfiguration.getPackageName();
+        String targetNS = codeGenConfiguration.getTargetNamespace();
+        String portTypeName = (String) axisService.getParameterValue(WSDL2Constants.INTERFACE_LOCAL_NAME);
         portTypeName = resolveNameCollision(portTypeName, packageName, TYPE_SUFFIX);
+        this.axisService.addParameter(JAXWS_PORT_TYPE_NAME, portTypeName);
 
         addAttribute(doc, "package", packageName, rootElement);
         addAttribute(doc, "targetNamespace", targetNS, rootElement);
@@ -46,6 +48,45 @@
     }
 
     /**
+     * Creates the XML model for the Service Endpoint interface
+     *
+     * @return DOM Document
+     */
+    protected Document createDOMDocumentForSEIImpl() throws AxisFault {
+        Document doc = getEmptyDocument();
+        Element rootElement = doc.createElement("javaConstruct");
+
+        //Element importList = doc.createElement("importList");
+        //rootElement.appendChild(importList);
+
+        String packageName = codeGenConfiguration.getPackageName();
+        String targetNS = codeGenConfiguration.getTargetNamespace();
+        String portTypeName = (String) axisService.getParameterValue(WSDL2Constants.INTERFACE_LOCAL_NAME);
+        portTypeName = resolveNameCollision(portTypeName, packageName, TYPE_SUFFIX);
+        this.axisService.addParameter(JAXWS_PORT_TYPE_NAME, portTypeName);
+
+        addAttribute(doc, "package", packageName, rootElement);
+        addAttribute(doc, "targetNamespace", targetNS, rootElement);
+        addAttribute(doc, "name", axisService.getParameter(JAXWS_PORT_TYPE_NAME).getValue() + JAXWS_IMPL_SUFFIX,
+                rootElement);
+
+        Element annotationElement = AnnotationElementBuilder.buildWebServiceAnnotationElement(
+               packageName +"." +axisService.getParameter(JAXWS_PORT_TYPE_NAME).getValue(), doc);
+        rootElement.appendChild(annotationElement);
+
+        loadOperations(doc, rootElement, null);
+
+        //attach a list of faults
+        rootElement.appendChild(getUniqueListofFaults(doc));
+        doc.appendChild(rootElement);
+        //////////////////////////////////////////////////////////
+//        System.out.println(DOM2Writer.nodeToString(rootElement));
+        ////////////////////////////////////////////////////////////
+        return doc;
+
+    }
+
+    /**
      * Creates the XML model for the Service Class
      *
      * @return DOM Document
@@ -57,8 +98,11 @@
         Element importList = doc.createElement("importList");
         rootElement.appendChild(importList);
 
+        String serviceName = axisService.getName();
         String capitalizedServiceName = serviceName.toUpperCase();
         String wsdlLocation = "Needs to be fixed";
+        String packageName = codeGenConfiguration.getPackageName();
+        String targetNS = codeGenConfiguration.getTargetNamespace();
 
         serviceName = resolveNameCollision(serviceName, packageName, TYPE_SUFFIX);
 
@@ -68,12 +112,6 @@
         addAttribute(doc, "wsdlLocation", wsdlLocation, rootElement);
         addAttribute(doc, "capitalizedServiceName", capitalizedServiceName, rootElement);
 
-        //Adding annotations -- tempory solution  hardcoded solution
-//        Element importElement;
-//        importElement = doc.createElement("import");
-//        addAttribute(doc, "value", "java.net.URL", importElement);
-//        importList.appendChild(importElement);
-
         Element annotationElement = AnnotationElementBuilder.buildWebServiceClientAnnotationElement(serviceName,
                 targetNS, wsdlLocation, doc);
         rootElement.appendChild(annotationElement);
@@ -84,7 +122,8 @@
 
             Element portElement = doc.createElement("port");
             addAttribute(doc, "portName", portName, portElement);
-            addAttribute(doc, "portTypeName", portTypeName, portElement);
+            addAttribute(doc, "portTypeName", (String) this.axisService.getParameter(JAXWS_PORT_TYPE_NAME).getValue(),
+                    portElement);
 
             Element endPointAnnoElement = AnnotationElementBuilder.buildWebEndPointAnnotationElement(portName, doc);
             portElement.appendChild(endPointAnnoElement);
@@ -115,18 +154,20 @@
         Element importList = doc.createElement("importList");
         faultElement.appendChild(importList);
 
+        String packageName = codeGenConfiguration.getPackageName();
+        String targetNS = codeGenConfiguration.getTargetNamespace();
+
         addAttribute(doc, "package", packageName, faultElement);
         addAttribute(doc, "targetNamespace", targetNS, faultElement);
 
         String exceptionClassName = (String) faultClassNameMap.get(key);
-        exceptionClassName = resolveNameCollision(exceptionClassName, packageName, EXCEPTION_SUFFIX);
-        addAttribute(doc, "name",exceptionClassName, faultElement);
-//            addAttribute(doc, "shortName",
-//                    (String) faultClassNameMap.get(key) + "Exception",
-//                    faultElement);
+        String resolvedExpClass = resolveNameCollision(exceptionClassName, packageName, EXCEPTION_SUFFIX);
 
-        //the type represents the type that will be wrapped by this
-        //name
+        if (!resolvedExpClass.equals(exceptionClassName))
+            faultClassNameMap.put(key, resolvedExpClass);
+
+        addAttribute(doc, "name", resolvedExpClass, faultElement);
+
         String typeMapping =
                 this.mapper.getTypeMappingName((QName) faultElementQNameMap.get(key));
         String shortType = extratClassName(typeMapping);
@@ -144,14 +185,6 @@
         addAttribute(doc, "value", typeMapping, importElement);
         importList.appendChild(importElement);
 
-//            String attribValue = (String) instantiatableMessageClassNames.
-//                    get(key);
-//            addAttribute(doc, "instantiatableType",
-//                    attribValue == null ? "" : attribValue,
-//                    faultElement);
-
-        // add an extra attribute to say whether the type mapping is
-        // the default
         if (mapper.getDefaultMappingName().equals(typeMapping)) {
             addAttribute(doc, "default", "yes", faultElement);
         }
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/AnnotationElementBuilder.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/AnnotationElementBuilder.java	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/jaxws/AnnotationElementBuilder.java	(working copy)
@@ -25,6 +25,19 @@
         return annotationElement;
     }
 
+    static Element buildWebServiceAnnotationElement(String endpointInterface, Document doc) {
+
+        Element annotationElement = doc.createElement("annotation");
+        XSLTUtils.addAttribute(doc, "name", "javax.jws.WebService", annotationElement);
+
+        Element paramElement = doc.createElement("param");
+        XSLTUtils.addAttribute(doc, "type", "endpointInterface", paramElement);
+        XSLTUtils.addAttribute(doc, "value", endpointInterface, paramElement);
+        annotationElement.appendChild(paramElement);
+
+        return annotationElement;
+    }
+
     static Element buildWebFaultAnnotationElement(String name, String targetNS, Document doc) {
         Element annotationElement = doc.createElement("annotation");
         XSLTUtils.addAttribute(doc, "name", "javax.xml.ws.WebFault", annotationElement);
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java	(working copy)
@@ -207,7 +207,10 @@
 
     protected static final String TEST_SRC_DIR_NAME = "test";
 
+    protected boolean useHolderClass_jaxws = false;
+    protected boolean wrapped_jaxws = false;
 
+
     /**
      * default constructor - builds
      */
@@ -2160,12 +2163,25 @@
         addAttribute(doc, "namespace", axisOperation.getName().getNamespaceURI(), methodElement);
         addAttribute(doc, "style", (String) getBindingPropertyFromOperation(
                 WSDLConstants.WSDL_1_1_STYLE, axisOperation.getName()), methodElement);
-        addAttribute(doc, "parameterstyle", (axisOperation.getParameter(
-                Constants.UNWRAPPED_KEY) != null)?"WRAPPPED":"BARE", methodElement);
+
+        String messageExchangePattern = axisOperation.getMessageExchangePattern();
+        
+        //Jaxws Specific
+        if("jax-ws".equals(codeGenConfiguration.getOutputLanguage())){
+            boolean wrapped = false;
+            if (WSDLUtil.isInputPresentForMEP(messageExchangePattern)) {
+                AxisMessage msg = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+                if(msg.getParameter(Constants.UNWRAPPED_KEY) != null){
+                    wrapped = true;
+                }
+            }
+            addAttribute(doc, "parameterstyle", (wrapped)?"WRAPPPED":"BARE", methodElement);
+        }
+
+        
         addAttribute(doc, "dbsupportname",
                 endpointName + localPart + DATABINDING_SUPPORTER_NAME_SUFFIX,
                 methodElement);
-        String messageExchangePattern = axisOperation.getMessageExchangePattern();
         addAttribute(doc, "mep", Utils.getAxisSpecifMEPConstant(messageExchangePattern) + "",
                 methodElement);
         addAttribute(doc, "mepURI", messageExchangePattern, methodElement);
@@ -2195,18 +2211,20 @@
         
 
         if (WSDLUtil.isInputPresentForMEP(messageExchangePattern)) {
-            methodElement.appendChild(getInputElement(doc,
-                    axisOperation, soapHeaderInputParameterList));
             if("jax-ws".equals(codeGenConfiguration.getOutputLanguage())){
+                useHolderClass_jaxws = false;
                 AxisMessage inMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                 if (WSDLUtil.isOutputPresentForMEP(messageExchangePattern)) {
                     AxisMessage outMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
                     if(inMessage.getName().equals(outMessage.getName())){
                         // in/out message
+                        useHolderClass_jaxws = true;
                         addAttribute(doc, "useholder", "true", methodElement);
                     }
                 }
             }
+            methodElement.appendChild(getInputElement(doc,
+                    axisOperation, soapHeaderInputParameterList));
         }
         if (WSDLUtil.isOutputPresentForMEP(messageExchangePattern)) {
             methodElement.appendChild(getOutputElement(doc,
@@ -2872,7 +2890,7 @@
                 MessagePartInformationHolder infoHolder =
                         (MessagePartInformationHolder) detailsParameter.getValue();
                 List partsList = infoHolder.getPartsList();
-
+                wrapped_jaxws = true;
                 //populate the parts list - this list is needed to generate multiple
                 //parameters in the signatures
                 for (int i = 0; i < partsList.size(); i++) {
@@ -2975,6 +2993,13 @@
         addAttribute(doc, "name",
                 paramName, paramElement);
 
+        if (codeGenConfiguration.getOutputLanguage().equals("jax-ws") && useHolderClass_jaxws) {
+            Class primitive = JavaUtils.getWrapperClass(paramType);
+            if(primitive != null){
+                paramType = primitive.getName();    
+            }
+        }
+
         addAttribute(doc, "type",
                 (paramType == null) ? "" : paramType,
                 paramElement);
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/SchemaUnwrapperExtension.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/SchemaUnwrapperExtension.java	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/SchemaUnwrapperExtension.java	(working copy)
@@ -61,7 +61,7 @@
     public void engage(CodeGenConfiguration configuration) throws CodeGenerationException {
         this.codeGenConfiguration = configuration;
 
-        if (!configuration.isParametersWrapped()) {
+        if (!configuration.isParametersWrapped() && !codeGenConfiguration.getOutputLanguage().equals("jax-ws")) {
 
             // A check to avoid nasty surprises - Since unwrapping is not
             // supported by all frameworks, we check the framework name to be
Index: modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/JAXWSWapperExtension.java
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/JAXWSWapperExtension.java	(revision 0)
+++ modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/JAXWSWapperExtension.java	(revision 0)
@@ -0,0 +1,340 @@
+/*
+ * Copyright 2004,2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.axis2.wsdl.codegen.extension;
+
+import org.apache.axis2.wsdl.codegen.CodeGenConfiguration;
+import org.apache.axis2.wsdl.codegen.CodeGenerationException;
+import org.apache.axis2.wsdl.WSDLUtil;
+import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.axis2.wsdl.util.Constants;
+import org.apache.axis2.wsdl.util.MessagePartInformationHolder;
+import org.apache.axis2.wsdl.i18n.CodegenMessages;
+import org.apache.axis2.description.AxisService;
+import org.apache.axis2.description.AxisOperation;
+import org.apache.axis2.description.AxisMessage;
+import org.apache.axis2.description.Parameter;
+import org.apache.axis2.AxisFault;
+import org.apache.ws.commons.schema.*;
+
+import javax.xml.namespace.QName;
+import java.util.List;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.ArrayList;
+
+public class JAXWSWapperExtension extends AbstractCodeGenerationExtension {
+    private CodeGenConfiguration codeGenConfiguration;
+
+    public void engage(CodeGenConfiguration configuration) throws CodeGenerationException {
+        this.codeGenConfiguration = configuration;
+        if (!codeGenConfiguration.isParametersWrapped() && codeGenConfiguration.getOutputLanguage().equals("jax-ws")) {
+
+            //walk the schema and find the top level elements
+            List services = configuration.getAxisServices();
+            AxisService axisService;
+
+            for (Iterator servicesIter = services.iterator(); servicesIter.hasNext();) {
+                axisService = (AxisService) servicesIter.next();
+                for (Iterator operations = axisService.getOperations();
+                     operations.hasNext();) {
+                    AxisOperation op = (AxisOperation) operations.next();
+                    boolean wrappable = true;
+                    //get the input parameter details to unwrap the requests
+                    if (WSDLUtil.isInputPresentForMEP(op.getMessageExchangePattern())) {
+
+                        AxisMessage message = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+                        XmlSchemaElement schemaElement = message.getSchemaElement();
+                        String opName = ((AxisOperation) message.getParent()).getName().getLocalPart();
+                        if(!schemaElement.getName().equals(opName))
+                            return;
+                        wrappable = walkSchema(op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE),
+                                WSDLConstants.INPUT_PART_QNAME_SUFFIX);
+                    }
+                    //get the out put parameter details as well to unwrap the responses
+                    if (WSDLUtil.isOutputPresentForMEP(op.getMessageExchangePattern()) && wrappable) {
+                        walkSchema(op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE),
+                                WSDLConstants.OUTPUT_PART_QNAME_SUFFIX);
+                    }
+                }
+            }
+        }
+    }
+
+    public boolean walkSchema(AxisMessage message, String qnameSuffix) throws CodeGenerationException {
+        //nothing to unwrap
+        if (message.getSchemaElement() == null) {
+            return false;
+        }
+
+        List partNameList = new LinkedList();
+
+        XmlSchemaElement schemaElement = message.getSchemaElement();
+//        String opName = ((AxisOperation) message.getParent()).getName().getLocalPart();
+//        if(!schemaElement.getName().equals(opName))
+//            return false;
+
+        XmlSchemaType schemaType = schemaElement.getSchemaType();
+        QName schemaTypeQname = schemaElement.getSchemaTypeName();
+
+        if (schemaType == null) {
+            if (schemaTypeQname != null) {
+                // find the schema type from all the schemas
+                // now we need to get the schema of the extension type from the parent schema. For that let's first retrieve
+                // the parent schema
+                AxisService axisService = (AxisService) message.getParent().getParent();
+                ArrayList schemasList = axisService.getSchema();
+
+                XmlSchema schema = null;
+                for (Iterator iter = schemasList.iterator(); iter.hasNext();) {
+                    schema = (XmlSchema) iter.next();
+                    schemaType = getSchemaType(schema, schemaTypeQname);
+                    if (schemaType != null) {
+                        break;
+                    }
+                }
+            }
+        }
+
+        if (schemaType instanceof XmlSchemaComplexType) {
+            if(!handleAllCasesOfComplexTypes(schemaType,
+                    message,
+                    partNameList,
+                    qnameSuffix)){
+                return false;
+            }
+        } else {
+            return false;
+        }
+
+//        else if ((schemaType instanceof XmlSchemaSimpleType) ||
+//                ((schemaTypeQname != null) && (schemaTypeQname.equals(new QName("http://www.w3.org/2001/XMLSchema", "anyType"))))) {
+//            QName opName = ((AxisOperation) message.getParent()).getName();
+//            partNameList.add(WSDLUtil.getPartQName(opName.getLocalPart(),
+//                    qnameSuffix,
+//                    schemaElement.getQName().getLocalPart()));
+//        } else if (schemaType == null) {
+//            throw new CodeGenerationException("Can not determine the schema type for the "
+//                    + schemaElement.getName());
+//        } else {
+//            //we've no idea how to unwrap a non complexType!!!!!!
+//            throw new CodeGenerationException(
+//                    CodegenMessages.getMessage("extension.unsupportedSchemaFormat",
+//                            schemaType.getName(), "complexType"));
+//        }
+
+
+        try {
+            //set in the axis message that the unwrapping was success
+            message.addParameter(getParameter(
+                    Constants.UNWRAPPED_KEY,
+                    Boolean.TRUE));
+
+            // attach the opName and the parts name list into the
+            // axis message by using the holder
+            MessagePartInformationHolder infoHolder = new MessagePartInformationHolder();
+            infoHolder.setOperationName(((AxisOperation) message.getParent()).getName());
+            infoHolder.setPartsList(partNameList);
+
+            //attach it to the parameters
+            message.addParameter(
+                    getParameter(Constants.UNWRAPPED_DETAILS,
+                            infoHolder));
+
+        } catch (AxisFault axisFault) {
+            throw new CodeGenerationException(axisFault);
+        }
+        return true;
+    }
+
+    /**
+     * Generate a parametes object
+     *
+     * @param key
+     * @param value
+     */
+    private Parameter getParameter(String key, Object value) {
+        Parameter myParameter = new Parameter();
+        myParameter.setName(key);
+        myParameter.setValue(value);
+        return myParameter;
+    }
+
+    private XmlSchemaType getSchemaType(XmlSchema schema, QName typeName) {
+        XmlSchemaType xmlSchemaType = null;
+        if (schema != null) {
+            xmlSchemaType = schema.getTypeByName(typeName);
+            if (xmlSchemaType == null) {
+                // try to find in an import or an include
+                XmlSchemaObjectCollection includes = schema.getIncludes();
+                if (includes != null) {
+                    Iterator includesIter = includes.getIterator();
+                    Object object = null;
+                    while (includesIter.hasNext()) {
+                        object = includesIter.next();
+                        if (object instanceof XmlSchemaImport) {
+                            XmlSchema schema1 = ((XmlSchemaImport) object).getSchema();
+                            xmlSchemaType = getSchemaType(schema1, typeName);
+                        }
+                        if (object instanceof XmlSchemaInclude) {
+                            XmlSchema schema1 = ((XmlSchemaInclude) object).getSchema();
+                            xmlSchemaType = getSchemaType(schema1, typeName);
+                        }
+                        if (xmlSchemaType != null) {
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+        return xmlSchemaType;
+    }
+
+    private boolean handleAllCasesOfComplexTypes(XmlSchemaType schemaType,
+                                                 AxisMessage message,
+                                                 List partNameList,
+                                                 String qnameSuffix) throws CodeGenerationException {
+        // if a complex type name exits for a element then
+        // we keep that complex type to support unwrapping
+        if (schemaType instanceof XmlSchemaComplexType) {
+            XmlSchemaComplexType cmplxType = (XmlSchemaComplexType) schemaType;
+
+            XmlSchemaObjectCollection xmlObjectCollection = cmplxType.getAttributes();
+            if (xmlObjectCollection.getCount() != 0)
+                return false;
+
+            if (cmplxType.getContentModel() == null) {
+                if (cmplxType.getParticle() != null) {
+                    return processXMLSchemaSequence(cmplxType.getParticle(), message, partNameList,
+                            qnameSuffix);
+                }
+            } else {
+                // now lets handle case with extensions
+                return processComplexContentModel(cmplxType, message, partNameList, qnameSuffix);
+            }
+            // handle attributes here
+            // processAttributes(cmplxType, message, partNameList, qnameSuffix);
+
+        }
+        return false;
+    }
+
+    private boolean processComplexContentModel(XmlSchemaComplexType cmplxType,
+                                               AxisMessage message,
+                                               List partNameList,
+                                               String qnameSuffix) throws CodeGenerationException {
+        //TODO implement this method
+        return false;
+    }
+
+    private boolean processXMLSchemaSequence(XmlSchemaParticle schemaParticle,
+                                             AxisMessage message,
+                                             List partNameList,
+                                             String qnameSuffix) throws CodeGenerationException {
+        if (schemaParticle instanceof XmlSchemaSequence) {
+            // get the name of the operation name and namespace,
+            // part name and hang them somewhere ? The ideal place
+            // would be the property bag in the codegen config!
+            QName opName = ((AxisOperation) message.getParent()).getName();
+
+            XmlSchemaSequence sequence = (XmlSchemaSequence) schemaParticle;
+            XmlSchemaObjectCollection items = sequence.getItems();
+
+            // if this is an empty sequence, return
+            if (items.getCount() == 0) {
+/*be carefull */
+                return true;
+            }
+            for (Iterator i = items.getIterator(); i.hasNext();) {
+                Object item = i.next();
+                // get each and every element in the sequence and
+                // traverse through them
+                if (item instanceof XmlSchemaElement) {
+                    //add the element name to the part name list
+                    XmlSchemaElement xmlSchemaElement = (XmlSchemaElement) item;
+//                    if(xmlSchemaElement.isNillable()){
+//                        return false;
+//                    }
+                    XmlSchemaType schemaType = xmlSchemaElement.getSchemaType();
+                    String partName = null;
+                    if (xmlSchemaElement.getRefName() != null) {
+                        partName = xmlSchemaElement.getRefName().getLocalPart();
+                    } else {
+                        partName = xmlSchemaElement.getName();
+                    }
+
+                    //  part names are not unique across messages. Hence
+                    //  we need some way of making the part name a unique
+                    //  one (due to the fact that the type mapper
+                    //  is a global list of types).
+                    //  The seemingly best way to do that is to
+                    //  specify a namespace for the part QName reference which
+                    //  is stored in the  list. This part qname is
+                    //  temporary and should not be used with it's
+                    //  namespace URI (which happened to be the operation name)
+                    //  with _input attached to it
+
+                    partNameList.add(
+                            WSDLUtil.getPartQName(opName.getLocalPart(),
+                                    qnameSuffix,
+                                    partName));
+
+                    // if the particle contains anything other than
+                    // a XMLSchemaElement then we are not in a position
+                    // to unwrap it
+//                }
+//                else if (item instanceof XmlSchemaAny) {
+//
+//                    // if this is an instance of xs:any, then there is no part name for it. Using ANY_ELEMENT_FIELD_NAME
+//                    // for it for now
+//
+//                    //we have to handle both maxoccurs 1 and maxoccurs > 1 situation
+//                    XmlSchemaAny xmlSchemaAny = (XmlSchemaAny) item;
+//
+//                    partNameList.add(
+//                            WSDLUtil.getPartQName(opName.getLocalPart(),
+//                                    qnameSuffix,
+//                                    Constants.ANY_ELEMENT_FIELD_NAME));
+                } else {
+//                    throw new CodeGenerationException(
+//                            CodegenMessages.getMessage("extension.unsupportedSchemaFormat",
+//                                    "unknown type", "Element"));
+                    return false;
+                }
+            }
+            return true;
+            //we do not know how to deal with other particles
+            //such as xs:all or xs:choice. Usually occurs when
+            //passed with the user built WSDL where the style
+            //is document.
+//        } else if (schemaParticle instanceof XmlSchemaChoice) {
+//            throw new CodeGenerationException(
+//                    CodegenMessages.getMessage("extension.unsupportedSchemaFormat",
+//                            "choice", "sequence"));
+//
+//        } else if (schemaParticle instanceof XmlSchemaAll) {
+//            throw new CodeGenerationException(
+//                    CodegenMessages.getMessage("extension.unsupportedSchemaFormat",
+//                            "all", "sequence"));
+        } else {
+//            throw new CodeGenerationException(
+//                    CodegenMessages.getMessage("extension.unsupportedSchemaFormat",
+//                            "unknown", "sequence"));
+            return false;
+        }
+    }
+
+
+}
\ No newline at end of file
Index: modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceImplTemplate.xsl
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceImplTemplate.xsl	(revision 0)
+++ modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceImplTemplate.xsl	(revision 0)
@@ -0,0 +1,108 @@
+<xsl:stylesheet version="1.0"
+                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+    <xsl:output method="text"/>
+    <xsl:variable name="targetNs" select="/javaConstruct/@targetNamespace"/>
+    <xsl:template match="javaConstruct">package <xsl:value-of select="@package"/>;
+
+/**
+ * <xsl:value-of select="@name"/>.java
+ *
+ * This class was auto-generated from WSDL.
+ * Apache Axis2 version: #axisVersion# #today#
+ */
+<xsl:for-each select="annotation">
+    <xsl:variable name="annoparamcount" select="count(param)"/>
+@<xsl:value-of select="@name"/>(<xsl:for-each select="param">
+        <xsl:choose>
+            <xsl:when test="$annoparamcount = position()">
+                <xsl:value-of select="@type"/>
+                <xsl:text> = </xsl:text>"<xsl:value-of select="@value"/>"</xsl:when>
+            <xsl:otherwise>
+                <xsl:value-of select="@type"/>
+                <xsl:text> = </xsl:text>"<xsl:value-of select="@value"/>",<xsl:text> </xsl:text>
+            </xsl:otherwise>
+        </xsl:choose>
+    </xsl:for-each>)</xsl:for-each>
+public class <xsl:value-of select="@name"/> {
+<xsl:apply-templates/>
+}
+    </xsl:template>
+
+    <xsl:template match="method">
+    <xsl:variable name="outparamcount" select="count(output/param)"/>
+    <xsl:variable name="parameterstyle" select="@parameterstyle"/>
+    <xsl:variable name="useholder" select="@useholder"/>
+    <xsl:variable name="style" select="@style"/>
+    <xsl:variable name="inputWrappedCount" select="count(input/param/param)"/>
+    <xsl:variable name="inparamcount" select="count(input/param)"/>
+    /**<xsl:choose><xsl:when test="$inputWrappedCount &gt; 0"><xsl:for-each select="input/param/param">
+     * @param <xsl:value-of select="@name"/></xsl:for-each><xsl:if test="$outparamcount != 0">
+     * @return <xsl:value-of select="output/param/@shorttype"/></xsl:if><xsl:for-each select="fault/param[@type!='']">
+     * @throws <xsl:value-of select="@name"/></xsl:for-each></xsl:when><xsl:otherwise><xsl:for-each select="input/param">
+     * @param <xsl:value-of select="@name"/></xsl:for-each><xsl:if test="$outparamcount != 0">
+     * @return <xsl:value-of select="output/param/@shorttype"/></xsl:if><xsl:for-each select="fault/param[@type!='']">
+     * @throws <xsl:value-of select="@name"/></xsl:for-each></xsl:otherwise> </xsl:choose>
+     */
+    public <xsl:choose>
+                <xsl:when test="$outparamcount = 0">void </xsl:when>
+                <xsl:when test="$useholder = 'true'">void </xsl:when>
+                <xsl:otherwise><xsl:value-of select="output/param/@type"/><xsl:text> </xsl:text></xsl:otherwise>
+           </xsl:choose>
+    <xsl:value-of select="@name"/>(<xsl:choose>
+        <xsl:when test="$useholder = 'true'">
+    <xsl:for-each select="input/param">
+        @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", mode = javax.jws.WebParam.Mode.INOUT<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
+        <xsl:choose>
+            <xsl:when test="$inparamcount = position()">javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+                <xsl:text>&gt; </xsl:text>
+                <xsl:value-of select="@name"/>
+            </xsl:when>
+            <xsl:otherwise>javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+                <xsl:text>&gt; </xsl:text>
+                <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
+            </xsl:otherwise>
+        </xsl:choose>
+    </xsl:for-each></xsl:when>
+        <xsl:when test="$inputWrappedCount &gt; 0">
+            <xsl:for-each select="input/param/param">
+        <xsl:choose>
+            <xsl:when test="$inputWrappedCount = position()">
+                <xsl:value-of select="@type"/>
+                <xsl:text> </xsl:text>
+                <xsl:value-of select="@name"/>
+            </xsl:when>
+            <xsl:otherwise>
+                <xsl:value-of select="@type"/>
+                <xsl:text> </xsl:text>
+                <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
+            </xsl:otherwise>
+        </xsl:choose>
+            </xsl:for-each>
+        </xsl:when>
+        <xsl:otherwise><xsl:for-each select="input/param">
+        <xsl:choose>
+            <xsl:when test="$inparamcount = position()">
+                <xsl:value-of select="@type"/>
+                <xsl:text> </xsl:text>
+                <xsl:value-of select="@name"/>
+            </xsl:when>
+            <xsl:otherwise>
+                <xsl:value-of select="@type"/>
+                <xsl:text> </xsl:text>
+                <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
+            </xsl:otherwise>
+        </xsl:choose>
+    </xsl:for-each></xsl:otherwise>
+    </xsl:choose>)<xsl:for-each select="fault/param[@type!='']">
+               <xsl:if test="position()=1">
+            throws </xsl:if>
+               <xsl:if test="position()>1">,</xsl:if><xsl:value-of select="@shortName"/>
+           </xsl:for-each> {
+        //TODO : fill this with the necessary business logic
+        throw new java.lang.UnsupportedOperationException("Please implement " + this.getClass().getName()
+                + "#" + this.getClass().getEnclosingMethod().getName());
+    }
+    </xsl:template>
+
+</xsl:stylesheet>
Index: modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceXMLTemplate.xsl
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceXMLTemplate.xsl	(revision 0)
+++ modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceXMLTemplate.xsl	(revision 0)
@@ -0,0 +1,66 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements. See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership. The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License. You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied. See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+    <xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>
+
+    <xsl:template match="/">
+        <xsl:comment> This file was auto-generated from WSDL </xsl:comment>
+        <xsl:comment> Apache Axis2 version: #axisVersion# #today# </xsl:comment>
+        <serviceGroup>
+            <xsl:apply-templates/>
+        </serviceGroup>
+    </xsl:template>
+
+    <xsl:template match="interfaces/interface">
+        <xsl:variable name="package"><xsl:value-of select="@classpackage"/></xsl:variable>
+
+        <service>
+            <xsl:attribute name="name"><xsl:value-of select="@servicename"/></xsl:attribute>
+            <messageReceivers>
+                <xsl:for-each select="messagereceiver">
+                    <xsl:if test=".">
+                        <messageReceiver>
+                            <xsl:attribute name="mep"><xsl:value-of select="@mepURI"/></xsl:attribute>
+                            <xsl:attribute name="class">org.apache.axis2.jaxws.server.JAXWSMessageReceiver</xsl:attribute>
+                        </messageReceiver>
+                    </xsl:if>
+                </xsl:for-each>
+             </messageReceivers>
+            <parameter name="ServiceClass">
+                <xsl:choose>
+                    <xsl:when test="$package=''">
+                        <xsl:value-of select="@name"/>
+                    </xsl:when>
+                    <xsl:otherwise>
+                        <xsl:value-of select="$package"/>.<xsl:value-of select="@name"/>
+                    </xsl:otherwise>
+                </xsl:choose>
+            </parameter>
+            <xsl:for-each select="method">
+				<operation>
+					<xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
+					<xsl:attribute name="mep"><xsl:value-of select="@mepURI"/></xsl:attribute>
+					<actionMapping>
+						<xsl:value-of select="@soapaction"/>
+					</actionMapping>
+				</operation>
+			</xsl:for-each>
+        </service>
+    </xsl:template>
+</xsl:stylesheet>
\ No newline at end of file
Index: modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceEndpointInterfaceTemplate.xsl	(working copy)
@@ -1,6 +1,6 @@
 <xsl:stylesheet version="1.0"
                 xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
-    <xsl:output method="text"/>
+    <xsl:output method="text"/>                                                                    
     <xsl:variable name="targetNs" select="/javaConstruct/@targetNamespace"/>
     <xsl:template match="javaConstruct">package <xsl:value-of select="@package"/>;
 <xsl:for-each select="importList/import">
@@ -10,9 +10,8 @@
 /**
  * <xsl:value-of select="@name"/>.java
  *
- * This class was generated by Apache Axis2.
- * Apache Axis2 {version} - {date} {time}
- *
+ * This class was auto-generated from WSDL.
+ * Apache Axis2 version: #axisVersion# #today#
  */
 <xsl:for-each select="annotation">
     <xsl:variable name="annoparamcount" select="count(param)"/>
@@ -20,14 +19,14 @@
         <xsl:choose>
             <xsl:when test="$annoparamcount = position()">
                 <xsl:value-of select="@type"/>
-                <xsl:text>=</xsl:text>"<xsl:value-of select="@value"/>"</xsl:when>
+                <xsl:text> = </xsl:text>"<xsl:value-of select="@value"/>"</xsl:when>
             <xsl:otherwise>
                 <xsl:value-of select="@type"/>
-                <xsl:text>=</xsl:text>"<xsl:value-of select="@value"/>",<xsl:text> </xsl:text>
+                <xsl:text> = </xsl:text>"<xsl:value-of select="@value"/>",<xsl:text> </xsl:text>
             </xsl:otherwise>
         </xsl:choose>
     </xsl:for-each>)</xsl:for-each>
-public interface <xsl:value-of select="@name"/>{
+public interface <xsl:value-of select="@name"/> {
 <xsl:apply-templates/>
 }
     </xsl:template>
@@ -36,13 +35,17 @@
     <xsl:variable name="outparamcount" select="count(output/param)"/>
     <xsl:variable name="parameterstyle" select="@parameterstyle"/>
     <xsl:variable name="useholder" select="@useholder"/>
-    <xsl:variable name="style" select="@style"/>    
-    /**<xsl:for-each select="input/param">
-    * @param <xsl:value-of select="@name"/></xsl:for-each><xsl:if test="$outparamcount != 0">
-    * @return
-    *    <xsl:value-of select="output/param/@shorttype"/></xsl:if><xsl:for-each select="fault/param[@type!='']">
-    * @throws <xsl:value-of select="@name"/></xsl:for-each>
-    */
+    <xsl:variable name="style" select="@style"/>
+    <xsl:variable name="inputWrappedCount" select="count(input/param/param)"/>
+    <xsl:variable name="inparamcount" select="count(input/param)"/>
+    /**<xsl:choose><xsl:when test="$inputWrappedCount &gt; 0"><xsl:for-each select="input/param/param">
+     * @param <xsl:value-of select="@name"/></xsl:for-each><xsl:if test="$outparamcount != 0">
+     * @return <xsl:value-of select="output/param/@shorttype"/></xsl:if><xsl:for-each select="fault/param[@type!='']">
+     * @throws <xsl:value-of select="@name"/></xsl:for-each></xsl:when><xsl:otherwise><xsl:for-each select="input/param">
+     * @param <xsl:value-of select="@name"/></xsl:for-each><xsl:if test="$outparamcount != 0">
+     * @return <xsl:value-of select="output/param/@shorttype"/></xsl:if><xsl:for-each select="fault/param[@type!='']">
+     * @throws <xsl:value-of select="@shortName"/></xsl:for-each></xsl:otherwise> </xsl:choose>
+     */
     @javax.jws.WebMethod<xsl:choose>
         <xsl:when test="$outparamcount = 0"><xsl:text>
     </xsl:text>@javax.jws.Oneway</xsl:when>
@@ -51,51 +54,98 @@
     </xsl:text>@javax.jws.WebResult(targetNamespace = "<xsl:value-of select="$targetNs"/>"<xsl:choose>
                 <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="output/param/@partname"/>"</xsl:when></xsl:choose>)</xsl:otherwise>
     </xsl:choose>
-    <xsl:if test="$parameterstyle = 'BARE'">
-    @javax.jws.soap.SOAPBinding(parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.BARE)</xsl:if>
+    <xsl:choose>
+        <xsl:when test="$inputWrappedCount = 0">
+    @javax.jws.soap.SOAPBinding(parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.BARE)</xsl:when>
+        <xsl:otherwise>
+    @javax.xml.ws.RequestWrapper(localName = "<xsl:value-of select="input/param/@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", className = "<xsl:value-of select="input/param/@type"/>")<xsl:if test="$outparamcount != 0">
+    @javax.xml.ws.ResponseWrapper(localName = "<xsl:value-of select="output/param/@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", className = "<xsl:value-of select="output/param/@type"/>")</xsl:if>
+        </xsl:otherwise>
+    </xsl:choose>
     public <xsl:choose>
                 <xsl:when test="$outparamcount = 0">void </xsl:when>
                 <xsl:when test="$useholder = 'true'">void </xsl:when>
+                <xsl:when test="$inputWrappedCount != 0"><xsl:value-of select="output/param/param/@type"/><xsl:text> </xsl:text></xsl:when>               
                 <xsl:otherwise><xsl:value-of select="output/param/@type"/><xsl:text> </xsl:text></xsl:otherwise>
            </xsl:choose>
-    <xsl:value-of select="@name"/>(<xsl:variable name="inparamcount" select="count(input/param)"/>
+    <xsl:value-of select="@name"/>(<xsl:choose>
+        <xsl:when test="$useholder = 'true'">
     <xsl:choose>
-        <xsl:when test="$useholder = 'true'">
-    <xsl:for-each select="input/param">
-        @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", mode = javax.jws.WebParam.Mode.INOUT<xsl:choose>
-                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
-        <xsl:choose>
-            <xsl:when test="$inparamcount = position()">javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+        <xsl:when test="$inputWrappedCount = 0">
+        <xsl:for-each select="input/param">
+            @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", mode = javax.jws.WebParam.Mode.INOUT<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)<xsl:choose>
+            <xsl:when test="$inparamcount = position()">
+            javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
                 <xsl:text>&gt; </xsl:text>
                 <xsl:value-of select="@name"/>
             </xsl:when>
-            <xsl:otherwise>javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+            <xsl:otherwise>
+            javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
                 <xsl:text>&gt; </xsl:text>
                 <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
             </xsl:otherwise>
         </xsl:choose>
-    </xsl:for-each></xsl:when>
-        <xsl:otherwise><xsl:for-each select="input/param">
-        @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>"<xsl:choose>
-                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
-        <xsl:choose>
-            <xsl:when test="$inparamcount = position()">
-                <xsl:value-of select="@type"/>
-                <xsl:text> </xsl:text>
+        </xsl:for-each>
+        </xsl:when>
+        <xsl:otherwise>
+        <xsl:for-each select="input/param/param">
+            @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>", mode = javax.jws.WebParam.Mode.INOUT<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)<xsl:choose>
+            <xsl:when test="$inputWrappedCount = position()">
+            javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+                <xsl:text>&gt; </xsl:text>
                 <xsl:value-of select="@name"/>
             </xsl:when>
             <xsl:otherwise>
-                <xsl:value-of select="@type"/>
-                <xsl:text> </xsl:text>
+            javax.xml.ws.Holder&lt;<xsl:value-of select="@type"/>
+                <xsl:text>&gt; </xsl:text>
                 <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
             </xsl:otherwise>
         </xsl:choose>
+        </xsl:for-each>
+        </xsl:otherwise>
+    </xsl:choose>
+   </xsl:when>
+        <xsl:when test="$inputWrappedCount &gt; 0">
+            <xsl:for-each select="input/param/param">
+            @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>"<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
+            <xsl:choose>
+                <xsl:when test="$inputWrappedCount = position()">
+                    <xsl:value-of select="@type"/>
+                    <xsl:text> </xsl:text>
+                    <xsl:value-of select="@name"/>
+                </xsl:when>
+                <xsl:otherwise>
+                    <xsl:value-of select="@type"/>
+                    <xsl:text> </xsl:text>
+                    <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
+                </xsl:otherwise>
+            </xsl:choose>
+            </xsl:for-each>
+        </xsl:when>
+        <xsl:otherwise><xsl:for-each select="input/param">
+            @javax.jws.WebParam(name = "<xsl:value-of select="@name"/>", targetNamespace = "<xsl:value-of select="$targetNs"/>"<xsl:choose>
+                <xsl:when test="$parameterstyle = 'BARE'">, partName = "<xsl:value-of select="@partname"/>"</xsl:when></xsl:choose>)
+            <xsl:choose>
+                <xsl:when test="$inparamcount = position()">
+                    <xsl:value-of select="@type"/>
+                    <xsl:text> </xsl:text>
+                    <xsl:value-of select="@name"/>
+                </xsl:when>
+                <xsl:otherwise>
+                    <xsl:value-of select="@type"/>
+                    <xsl:text> </xsl:text>
+                    <xsl:value-of select="@name"/>,<xsl:text> </xsl:text>
+                </xsl:otherwise>
+            </xsl:choose>
     </xsl:for-each></xsl:otherwise>
-    </xsl:choose>)<!--<xsl:for-each select="fault/param[@type!='']">
+    </xsl:choose>)<xsl:for-each select="fault/param[@type!='']">
                <xsl:if test="position()=1">
-        throws </xsl:if>
-               <xsl:if test="position()>1">,</xsl:if><xsl:value-of select="@name"/>
-           </xsl:for-each>-->;
+            throws </xsl:if>
+               <xsl:if test="position()>1">,</xsl:if><xsl:value-of select="@shortName"/>
+           </xsl:for-each>;
     </xsl:template>
 
 </xsl:stylesheet>
Index: modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceClassTemplate.xsl
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceClassTemplate.xsl	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsServiceClassTemplate.xsl	(working copy)
@@ -17,8 +17,8 @@
 /**
  * <xsl:value-of select="@name"/>.java
  *
- * This class was generated by Apache Axis2.
- * Apache Axis2 {version} - {date} {time}
+ * This class was auto-generated from WSDL.
+ * Apache Axis2 version: #axisVersion# #today#
  *
  */
 <xsl:for-each select="annotation">
Index: modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsExceptionTemplate.xsl
===================================================================
--- modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsExceptionTemplate.xsl	(revision 567799)
+++ modules/codegen/src/org/apache/axis2/wsdl/template/java/JaxwsExceptionTemplate.xsl	(working copy)
@@ -12,8 +12,8 @@
 /**
  * <xsl:value-of select="@name"/>.java
  *
- * This class was generated by Apache Axis2.
- * Apache Axis2 {version} - {date} {time}
+ * This class was auto-generated from WSDL.
+ * Apache Axis2 version: #axisVersion# #today#
  *
  */
 <xsl:for-each select="annotation">
