diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
index 151be42..97955c1 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
@@ -1,20 +1,12 @@
 /**
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable
+ * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
+ * for the specific language governing permissions and limitations under the License.
  */
 
 package org.apache.hadoop.hbase.tool;
@@ -80,30 +72,33 @@ import org.apache.hadoop.util.Tool;
 import org.apache.hadoop.util.ToolRunner;
 
 /**
- * HBase Canary Tool, that that can be used to do
- * "canary monitoring" of a running HBase cluster.
- *
- * Here are two modes
- * 1. region mode - Foreach region tries to get one row per column family
- * and outputs some information about failure or latency.
- *
- * 2. regionserver mode - Foreach regionserver tries to get one row from one table
- * selected randomly and outputs some information about failure or latency.
+ * HBase Canary Tool, that that can be used to do "canary monitoring" of a running HBase cluster.
+ * Here are two modes 1. region mode - Foreach region tries to get one row per column family and
+ * outputs some information about failure or latency. 2. regionserver mode - Foreach regionserver
+ * tries to get one row from one table selected randomly and outputs some information about failure
+ * or latency.
  */
 public final class Canary implements Tool {
   // Sink interface used by the canary to outputs information
   public interface Sink {
     public void publishReadFailure(HRegionInfo region, Exception e);
+
     public void publishReadFailure(HRegionInfo region, HColumnDescriptor column, Exception e);
+
     public void publishReadTiming(HRegionInfo region, HColumnDescriptor column, long msTime);
+
     public void publishWriteFailure(HRegionInfo region, Exception e);
+
     public void publishWriteFailure(HRegionInfo region, HColumnDescriptor column, Exception e);
+
     public void publishWriteTiming(HRegionInfo region, HColumnDescriptor column, long msTime);
   }
+
   // new extended sink for output regionserver mode info
   // do not change the Sink interface directly due to maintaining the API
   public interface ExtendedSink extends Sink {
     public void publishReadFailure(String table, String server);
+
     public void publishReadTiming(String table, String server, long msTime);
   }
 
@@ -118,13 +113,13 @@ public final class Canary implements Tool {
     @Override
     public void publishReadFailure(HRegionInfo region, HColumnDescriptor column, Exception e) {
       LOG.error(String.format("read from region %s column family %s failed",
-                region.getRegionNameAsString(), column.getNameAsString()), e);
+        region.getRegionNameAsString(), column.getNameAsString()), e);
     }
 
     @Override
     public void publishReadTiming(HRegionInfo region, HColumnDescriptor column, long msTime) {
       LOG.info(String.format("read from region %s column family %s in %dms",
-               region.getRegionNameAsString(), column.getNameAsString(), msTime));
+        region.getRegionNameAsString(), column.getNameAsString(), msTime));
     }
 
     @Override
@@ -144,6 +139,7 @@ public final class Canary implements Tool {
         region.getRegionNameAsString(), column.getNameAsString(), msTime));
     }
   }
+
   // a ExtendedSink implementation
   public static class RegionServerStdOutSink extends StdOutSink implements ExtendedSink {
 
@@ -154,8 +150,8 @@ public final class Canary implements Tool {
 
     @Override
     public void publishReadTiming(String table, String server, long msTime) {
-      LOG.info(String.format("Read from table:%s on region server:%s in %dms",
-          table, server, msTime));
+      LOG.info(String.format("Read from table:%s on region server:%s in %dms", table, server,
+        msTime));
     }
   }
 
@@ -164,9 +160,10 @@ public final class Canary implements Tool {
    * failure.
    */
   static class RegionTask implements Callable<Void> {
-    public enum TaskType{
+    public enum TaskType {
       READ, WRITE
     }
+
     private Connection connection;
     private HRegionInfo region;
     private Sink sink;
@@ -196,8 +193,7 @@ public final class Canary implements Tool {
       HTableDescriptor tableDesc = null;
       try {
         if (LOG.isDebugEnabled()) {
-          LOG.debug(String.format("reading table descriptor for table %s",
-            region.getTable()));
+          LOG.debug(String.format("reading table descriptor for table %s", region.getTable()));
         }
         table = connection.getTable(region.getTable());
         tableDesc = table.getTableDescriptor();
@@ -285,7 +281,7 @@ public final class Canary implements Tool {
         tableDesc = table.getTableDescriptor();
         byte[] rowToCheck = region.getStartKey();
         if (rowToCheck.length == 0) {
-          rowToCheck = new byte[]{0x0};
+          rowToCheck = new byte[] { 0x0 };
         }
         int writeValueSize =
             connection.getConfiguration().getInt(HConstants.HBASE_CANARY_WRITE_VALUE_SIZE_KEY, 10);
@@ -491,11 +487,11 @@ public final class Canary implements Tool {
             System.err.println("-interval needs a numeric value argument.");
             printUsageAndExit();
           }
-        } else if(cmd.equals("-regionserver")) {
+        } else if (cmd.equals("-regionserver")) {
           this.regionServerMode = true;
-        } else if(cmd.equals("-allRegions")) {
+        } else if (cmd.equals("-allRegions")) {
           this.regionServerAllRegions = true;
-        } else if(cmd.equals("-writeSniffing")) {
+        } else if (cmd.equals("-writeSniffing")) {
           this.writeSniffing = true;
         } else if (cmd.equals("-e")) {
           this.useRegExp = true;
@@ -525,8 +521,7 @@ public final class Canary implements Tool {
           i++;
 
           if (i == args.length) {
-            System.err
-                .println("-f needs a boolean value argument (true|false).");
+            System.err.println("-f needs a boolean value argument (true|false).");
             printUsageAndExit();
           }
 
@@ -551,6 +546,7 @@ public final class Canary implements Tool {
   @Override
   public int run(String[] args) throws Exception {
     int index = parseArgs(args);
+    int finalExitCode = 0;
     ChoreService choreService = null;
 
     // Launches chore for refreshing kerberos credentials if security is enabled.
@@ -583,28 +579,31 @@ public final class Canary implements Tool {
             if (this.failOnError && monitor.hasError()) {
               monitorThread.interrupt();
               if (monitor.initialized) {
-                System.exit(monitor.errorCode);
+                finalExitCode = monitor.errorCode;
+                break;
               } else {
-                System.exit(INIT_ERROR_EXIT_CODE);
+                finalExitCode = INIT_ERROR_EXIT_CODE;
+                break;
               }
             }
             currentTimeLength = System.currentTimeMillis() - startTime;
             if (currentTimeLength > this.timeout) {
               LOG.error("The monitor is running too long (" + currentTimeLength
-                  + ") after timeout limit:" + this.timeout
-                  + " will be killed itself !!");
+                  + ") after timeout limit:" + this.timeout + " will be killed itself !!");
               if (monitor.initialized) {
-                System.exit(TIMEOUT_ERROR_EXIT_CODE);
+                finalExitCode = TIMEOUT_ERROR_EXIT_CODE;
+                break;
               } else {
-                System.exit(INIT_ERROR_EXIT_CODE);
+                finalExitCode = INIT_ERROR_EXIT_CODE;
+                break;
               }
-              break;
             }
           }
 
-          if (this.failOnError && monitor.hasError()) {
+          if ((this.failOnError && monitor.hasError()) || finalExitCode != 0) {
             monitorThread.interrupt();
-            System.exit(monitor.errorCode);
+            if (finalExitCode == 0) finalExitCode = monitor.errorCode;
+            break;
           }
         } finally {
           if (monitor != null) monitor.close();
@@ -617,13 +616,13 @@ public final class Canary implements Tool {
     if (choreService != null) {
       choreService.shutdown();
     }
-    return(monitor.errorCode);
+    return finalExitCode;
   }
 
   private void printUsageAndExit() {
     System.err.printf(
       "Usage: bin/hbase %s [opts] [table1 [table2]...] | [regionserver1 [regionserver2]..]%n",
-        getClass().getName());
+      getClass().getName());
     System.err.println(" where [opts] are:");
     System.err.println("   -help          Show this help and exit.");
     System.err.println("   -regionserver  replace the table argument to regionserver,");
@@ -634,8 +633,8 @@ public final class Canary implements Tool {
     System.err.println("   -interval <N>  Interval between checks (sec)");
     System.err.println("   -e             Use table/regionserver as regular expression");
     System.err.println("      which means the table/regionserver is regular expression pattern");
-    System.err.println("   -f <B>         stop whole program if first error occurs," +
-        " default is true");
+    System.err.println("   -f <B>         stop whole program if first error occurs,"
+        + " default is true");
     System.err.println("   -t <N>         timeout for a check, default is 600000 (milisecs)");
     System.err.println("   -writeSniffing enable the write sniffing in canary");
     System.err.println("   -writeTable    The table used for write sniffing."
@@ -644,8 +643,7 @@ public final class Canary implements Tool {
   }
 
   /**
-   * A Factory method for {@link Monitor}.
-   * Can be overridden by user.
+   * A Factory method for {@link Monitor}. Can be overridden by user.
    * @param index a start index for monitor target
    * @param args args passed from user
    * @return a Monitor instance
@@ -654,7 +652,7 @@ public final class Canary implements Tool {
     Monitor monitor = null;
     String[] monitorTargets = null;
 
-    if(index >= 0) {
+    if (index >= 0) {
       int length = args.length - index;
       monitorTargets = new String[length];
       System.arraycopy(args, index, monitorTargets, 0, length);
@@ -786,8 +784,8 @@ public final class Canary implements Tool {
               lastCheckTime = EnvironmentEdgeManager.currentTime();
             }
             // sniff canary table with write operation
-            taskFutures.addAll(Canary.sniff(admin, sink,
-              admin.getTableDescriptor(writeTableName), executor, TaskType.WRITE));
+            taskFutures.addAll(Canary.sniff(admin, sink, admin.getTableDescriptor(writeTableName),
+              executor, TaskType.WRITE));
           }
 
           for (Future<Void> future : taskFutures) {
@@ -899,7 +897,7 @@ public final class Canary implements Tool {
     }
 
     private void createWriteTable(int numberOfServers) throws IOException {
-      int numberOfRegions = (int)(numberOfServers * regionsLowerLimit);
+      int numberOfRegions = (int) (numberOfServers * regionsLowerLimit);
       LOG.info("Number of live regionservers: " + numberOfServers + ", "
           + "pre-splitting the canary table into " + numberOfRegions + " regions "
           + "(current lower limit of regions per server is " + regionsLowerLimit
@@ -920,8 +918,7 @@ public final class Canary implements Tool {
    * Canary entry point for specified table.
    * @throws Exception
    */
-  public static void sniff(final Admin admin, TableName tableName)
-      throws Exception {
+  public static void sniff(final Admin admin, TableName tableName) throws Exception {
     sniff(admin, tableName, TaskType.READ);
   }
 
@@ -946,8 +943,8 @@ public final class Canary implements Tool {
   private static List<Future<Void>> sniff(final Admin admin, final Sink sink, String tableName,
       ExecutorService executor, TaskType taskType) throws Exception {
     if (LOG.isDebugEnabled()) {
-      LOG.debug(String.format("checking table is enabled and getting table descriptor for table %s",
-        tableName));
+      LOG.debug(String.format(
+        "checking table is enabled and getting table descriptor for table %s", tableName));
     }
     if (admin.isTableEnabled(TableName.valueOf(tableName))) {
       return Canary.sniff(admin, sink, admin.getTableDescriptor(TableName.valueOf(tableName)),
@@ -984,6 +981,7 @@ public final class Canary implements Tool {
     }
     return executor.invokeAll(tasks);
   }
+
   // a monitor for regionserver mode
   private static class RegionServerMonitor extends Monitor {
 
@@ -1035,8 +1033,8 @@ public final class Canary implements Tool {
       }
 
       if (foundTableNames.size() > 0) {
-        System.err.println("Cannot pass a tablename when using the -regionserver " +
-            "option, tablenames:" + foundTableNames.toString());
+        System.err.println("Cannot pass a tablename when using the -regionserver "
+            + "option, tablenames:" + foundTableNames.toString());
         this.errorCode = USAGE_EXIT_CODE;
       }
       return foundTableNames.size() == 0;
@@ -1052,20 +1050,14 @@ public final class Canary implements Tool {
         successMap.put(serverName, successes);
         if (this.allRegions) {
           for (HRegionInfo region : entry.getValue()) {
-            tasks.add(new RegionServerTask(this.connection,
-                serverName,
-                region,
-                getSink(),
+            tasks.add(new RegionServerTask(this.connection, serverName, region, getSink(),
                 successes));
           }
         } else {
           // random select a region if flag not set
           HRegionInfo region = entry.getValue().get(rand.nextInt(entry.getValue().size()));
-          tasks.add(new RegionServerTask(this.connection,
-              serverName,
-              region,
-              getSink(),
-              successes));
+          tasks
+              .add(new RegionServerTask(this.connection, serverName, region, getSink(), successes));
         }
       }
       try {
@@ -1081,7 +1073,7 @@ public final class Canary implements Tool {
           for (Map.Entry<String, List<HRegionInfo>> entry : rsAndRMap.entrySet()) {
             String serverName = entry.getKey();
             LOG.info("Successfully read " + successMap.get(serverName) + " regions out of "
-                    + entry.getValue().size() + " on regionserver:" + serverName);
+                + entry.getValue().size() + " on regionserver:" + serverName);
           }
         }
       } catch (InterruptedException e) {
