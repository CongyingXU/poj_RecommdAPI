From a3642cf27f151af42189310d34edc74be11f048d Mon Sep 17 00:00:00 2001
From: chenheng <chenheng@apache.org>
Date: Tue, 22 Dec 2015 11:25:57 +0800
Subject: [PATCH] HBASE-14684 Try to remove all MiniMapReduceCluster in unit
 tests

---
 .../java/org/apache/hadoop/hbase/HBaseTestingUtility.java     |  9 ++++++++-
 .../hadoop/hbase/mapreduce/MultiTableInputFormatTestBase.java |  4 +---
 .../hbase/mapreduce/TableSnapshotInputFormatTestBase.java     |  3 +--
 .../org/apache/hadoop/hbase/mapreduce/TestCellCounter.java    |  3 +--
 .../java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java |  3 +--
 .../apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java  | 11 ++++-------
 .../apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java | 10 ++--------
 .../apache/hadoop/hbase/mapreduce/TestHRegionPartitioner.java |  3 +--
 .../java/org/apache/hadoop/hbase/mapreduce/TestHashTable.java |  3 +--
 .../org/apache/hadoop/hbase/mapreduce/TestImportExport.java   |  4 ++--
 .../hbase/mapreduce/TestImportTSVWithOperationAttributes.java |  4 +---
 .../apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java  |  3 +--
 .../hbase/mapreduce/TestImportTSVWithVisibilityLabels.java    |  4 +---
 .../java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java |  3 +--
 .../hadoop/hbase/mapreduce/TestMultiTableInputFormat.java     |  4 +---
 .../hadoop/hbase/mapreduce/TestMultithreadedTableMapper.java  |  3 +--
 .../org/apache/hadoop/hbase/mapreduce/TestRowCounter.java     |  3 +--
 .../java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java |  3 +--
 .../apache/hadoop/hbase/mapreduce/TestTableInputFormat.java   |  4 +---
 .../hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java  |  4 +---
 .../apache/hadoop/hbase/mapreduce/TestTableMapReduceBase.java |  3 +--
 .../apache/hadoop/hbase/mapreduce/TestTimeRangeMapRed.java    |  3 +--
 .../java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java |  3 +--
 23 files changed, 35 insertions(+), 62 deletions(-)

diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
index 66ba047..a806127 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
@@ -160,6 +160,8 @@ public class HBaseTestingUtility extends HBaseCommonTestingUtility {
 
   public static final String PRESPLIT_TEST_TABLE_KEY = "hbase.test.pre-split-table";
   public static final boolean PRESPLIT_TEST_TABLE = true;
+
+  public static final String USE_LOCAL_FILESYSTEM = "hbase.test.local.fileSystem";
   /**
    * Set if we were passed a zkCluster.  If so, we won't shutdown zk as
    * part of general shutdown.
@@ -361,6 +363,11 @@ public class HBaseTestingUtility extends HBaseCommonTestingUtility {
     return testPath;
   }
 
+  public void setJobWithoutMRCluster() throws IOException {
+    conf.set("hbase.fs.tmp.dir", getDataTestDirOnTestFS("hbase-staging").toString());
+    conf.setBoolean(HBaseTestingUtility.USE_LOCAL_FILESYSTEM, true);
+  }
+
   private void createSubDirAndSystemProperty(
     String propertyName, Path parent, String subDirName){
 
@@ -597,7 +604,7 @@ public class HBaseTestingUtility extends HBaseCommonTestingUtility {
     }
     FileSystem fs = this.dfsCluster.getFileSystem();
     FSUtils.setFsDefault(this.conf, new Path(fs.getUri()));
-    if (this.conf.getBoolean("hbase.test.local.fileSystem", false)) {
+    if (this.conf.getBoolean(USE_LOCAL_FILESYSTEM, false)) {
       FSUtils.setFsDefault(this.conf, new Path("file:///"));
     }
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/MultiTableInputFormatTestBase.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/MultiTableInputFormatTestBase.java
index eaedebf..3ecf28d 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/MultiTableInputFormatTestBase.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/MultiTableInputFormatTestBase.java
@@ -78,6 +78,7 @@ public abstract class MultiTableInputFormatTestBase {
   public static void setUpBeforeClass() throws Exception {
     // switch TIF to log at DEBUG level
     TEST_UTIL.enableDebug(MultiTableInputFormatBase.class);
+    TEST_UTIL.setJobWithoutMRCluster();
     // start mini hbase cluster
     TEST_UTIL.startMiniCluster(3);
     // create and fill table
@@ -92,13 +93,10 @@ public abstract class MultiTableInputFormatTestBase {
           }
         }
     }
-    // start MR cluster
-    TEST_UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void tearDownAfterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TableSnapshotInputFormatTestBase.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TableSnapshotInputFormatTestBase.java
index 3808806..2941286 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TableSnapshotInputFormatTestBase.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TableSnapshotInputFormatTestBase.java
@@ -60,6 +60,7 @@ public abstract class TableSnapshotInputFormatTestBase {
 
   public void setupCluster() throws Exception {
     setupConf(UTIL.getConfiguration());
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster(NUM_REGION_SERVERS, true);
     rootDir = UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getRootDir();
     fs = rootDir.getFileSystem(UTIL.getConfiguration());
@@ -158,14 +159,12 @@ public abstract class TableSnapshotInputFormatTestBase {
   protected void testWithMapReduce(HBaseTestingUtility util, String snapshotName,
       int numRegions, int expectedNumSplits, boolean shutdownCluster) throws Exception {
     setupCluster();
-    util.startMiniMapReduceCluster();
     try {
       Path tableDir = util.getDataTestDirOnTestFS(snapshotName);
       TableName tableName = TableName.valueOf("testWithMapReduce");
       testWithMapReduceImpl(util, tableName, snapshotName, tableDir, numRegions,
         expectedNumSplits, shutdownCluster);
     } finally {
-      util.shutdownMiniMapReduceCluster();
       tearDownCluster();
     }
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java
index e3d03b8..41b76ba 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java
@@ -60,15 +60,14 @@ public class TestCellCounter {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
-    UTIL.startMiniMapReduceCluster();
     FQ_OUTPUT_DIR = new Path(OUTPUT_DIR).makeQualified(new LocalFileSystem());
     FileUtil.fullyDelete(new File(OUTPUT_DIR));
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    UTIL.shutdownMiniMapReduceCluster();
     UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
index 5492938..b8ad5be 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
@@ -62,13 +62,12 @@ public class TestCopyTable {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    TEST_UTIL.setJobWithoutMRCluster();
     TEST_UTIL.startMiniCluster(3);
-    TEST_UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java
index 781d401..abe8d5c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat.java
@@ -389,6 +389,7 @@ public class TestHFileOutputFormat  {
     byte[][] splitKeys = generateRandomSplitKeys(4);
     HBaseAdmin admin = null;
     try {
+      util.setJobWithoutMRCluster();
       util.startMiniCluster();
       Path testDir = util.getDataTestDirOnTestFS("testLocalMRIncrementalLoad");
       admin = util.getHBaseAdmin();
@@ -402,7 +403,6 @@ public class TestHFileOutputFormat  {
       assertEquals("Should make 5 regions", numRegions, 5);
 
       // Generate the bulk load files
-      util.startMiniMapReduceCluster();
       runIncrementalPELoad(conf, table, testDir);
       // This doesn't write into the table, just makes files
       assertEquals("HFOF should not touch actual table",
@@ -471,7 +471,6 @@ public class TestHFileOutputFormat  {
           tableDigestBefore, util.checksumRows(table));
     } finally {
       if (admin != null) admin.close();
-      util.shutdownMiniMapReduceCluster();
       util.shutdownMiniCluster();
     }
   }
@@ -911,6 +910,7 @@ public class TestHFileOutputFormat  {
     generateRandomStartKeys(5);
 
     try {
+      util.setJobWithoutMRCluster();
       util.startMiniCluster();
       final FileSystem fs = util.getDFSCluster().getFileSystem();
       HBaseAdmin admin = new HBaseAdmin(conf);
@@ -927,7 +927,6 @@ public class TestHFileOutputFormat  {
       // Generate two bulk load files
       conf.setBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",
           true);
-      util.startMiniMapReduceCluster();
 
       for (int i = 0; i < 2; i++) {
         Path testDir = util.getDataTestDirOnTestFS("testExcludeAllFromMinorCompaction_" + i);
@@ -966,7 +965,6 @@ public class TestHFileOutputFormat  {
       }, 5000);
 
     } finally {
-      util.shutdownMiniMapReduceCluster();
       util.shutdownMiniCluster();
     }
   }
@@ -978,9 +976,10 @@ public class TestHFileOutputFormat  {
     generateRandomStartKeys(5);
 
     try {
+      util.setJobWithoutMRCluster();
       util.startMiniCluster();
       Path testDir = util.getDataTestDirOnTestFS("testExcludeMinorCompaction");
-      final FileSystem fs = util.getDFSCluster().getFileSystem();
+      final FileSystem fs = util.getTestFileSystem();
       HBaseAdmin admin = new HBaseAdmin(conf);
       HTable table = util.createTable(TABLE_NAME, FAMILIES);
       assertEquals("Should start with empty table", 0, util.countRows(table));
@@ -1007,7 +1006,6 @@ public class TestHFileOutputFormat  {
       // Generate a bulk load file with more rows
       conf.setBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",
           true);
-      util.startMiniMapReduceCluster();
       runIncrementalPELoad(conf, table, testDir);
 
       // Perform the actual load
@@ -1043,7 +1041,6 @@ public class TestHFileOutputFormat  {
       }, 5000);
 
     } finally {
-      util.shutdownMiniMapReduceCluster();
       util.shutdownMiniCluster();
     }
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
index 9873891..8a3ebdd 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
@@ -420,7 +420,6 @@ public class TestHFileOutputFormat2  {
       assertEquals("Should make 5 regions", numRegions, 5);
 
       // Generate the bulk load files
-      util.startMiniMapReduceCluster();
       runIncrementalPELoad(conf, table.getTableDescriptor(), table.getRegionLocator(), testDir);
       // This doesn't write into the table, just makes files
       assertEquals("HFOF should not touch actual table",
@@ -489,7 +488,6 @@ public class TestHFileOutputFormat2  {
       assertEquals("Data should remain after reopening of regions",
           tableDigestBefore, util.checksumRows(table));
     } finally {
-      util.shutdownMiniMapReduceCluster();
       util.shutdownMiniCluster();
     }
   }
@@ -927,7 +925,7 @@ public class TestHFileOutputFormat2  {
     Configuration conf = util.getConfiguration();
     conf.setInt("hbase.hstore.compaction.min", 2);
     generateRandomStartKeys(5);
-
+    util.setJobWithoutMRCluster();
     util.startMiniCluster();
     try (Connection conn = ConnectionFactory.createConnection();
         Admin admin = conn.getAdmin()) {
@@ -945,7 +943,6 @@ public class TestHFileOutputFormat2  {
       // Generate two bulk load files
       conf.setBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",
           true);
-      util.startMiniMapReduceCluster();
 
       for (int i = 0; i < 2; i++) {
         Path testDir = util.getDataTestDirOnTestFS("testExcludeAllFromMinorCompaction_" + i);
@@ -987,7 +984,6 @@ public class TestHFileOutputFormat2  {
       }, 5000);
 
     } finally {
-      util.shutdownMiniMapReduceCluster();
       util.shutdownMiniCluster();
     }
   }
@@ -997,7 +993,7 @@ public class TestHFileOutputFormat2  {
     Configuration conf = util.getConfiguration();
     conf.setInt("hbase.hstore.compaction.min", 2);
     generateRandomStartKeys(5);
-
+    util.setJobWithoutMRCluster();
     util.startMiniCluster();
     try (Connection conn = ConnectionFactory.createConnection(conf);
         Admin admin = conn.getAdmin()){
@@ -1029,7 +1025,6 @@ public class TestHFileOutputFormat2  {
       // Generate a bulk load file with more rows
       conf.setBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",
           true);
-      util.startMiniMapReduceCluster();
 
       RegionLocator regionLocator = conn.getRegionLocator(TABLE_NAME);
       runIncrementalPELoad(conf, table.getTableDescriptor(), regionLocator, testDir);
@@ -1069,7 +1064,6 @@ public class TestHFileOutputFormat2  {
       }, 5000);
 
     } finally {
-      util.shutdownMiniMapReduceCluster();
       util.shutdownMiniCluster();
     }
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHRegionPartitioner.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHRegionPartitioner.java
index 220bc02..4354da5 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHRegionPartitioner.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHRegionPartitioner.java
@@ -34,13 +34,12 @@ public class TestHRegionPartitioner {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
-    UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    UTIL.shutdownMiniMapReduceCluster();
     UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHashTable.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHashTable.java
index 762f530..eae33a6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHashTable.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHashTable.java
@@ -56,13 +56,12 @@ public class TestHashTable {
   
   @BeforeClass
   public static void beforeClass() throws Exception {
+    TEST_UTIL.setJobWithoutMRCluster();
     TEST_UTIL.startMiniCluster(3);
-    TEST_UTIL.startMiniMapReduceCluster();
   }
   
   @AfterClass
   public static void afterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
   
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java
index 616110c..00437c6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java
@@ -112,8 +112,8 @@ public class TestImportExport {
   @BeforeClass
   public static void beforeClass() throws Exception {
     // Up the handlers; this test needs more than usual.
-    UTIL.getConfiguration().setBoolean("hbase.test.local.fileSystem", true);
     UTIL.getConfiguration().setInt(HConstants.REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT, 10);
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
     FQ_OUTPUT_DIR =
       new Path(OUTPUT_DIR).makeQualified(FileSystem.get(UTIL.getConfiguration())).toString();
@@ -718,4 +718,4 @@ public class TestImportExport {
       return isVisited;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java
index eba843e..acb0e7c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithOperationAttributes.java
@@ -102,14 +102,12 @@ public class TestImportTSVWithOperationAttributes implements Configurable {
     conf = util.getConfiguration();
     conf.set("hbase.coprocessor.master.classes", OperationAttributesTestController.class.getName());
     conf.set("hbase.coprocessor.region.classes", OperationAttributesTestController.class.getName());
+    util.setJobWithoutMRCluster();
     util.startMiniCluster();
-    Admin admin = new HBaseAdmin(util.getConfiguration());
-    util.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void releaseCluster() throws Exception {
-    util.shutdownMiniMapReduceCluster();
     util.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java
index 268bba2..5add5d4 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithTTLs.java
@@ -88,13 +88,12 @@ public class TestImportTSVWithTTLs implements Configurable {
     // need this where the default hfile version is not 3 (i.e. 0.98)
     conf.setInt("hfile.format.version", 3);
     conf.set("hbase.coprocessor.region.classes", TTLCheckingObserver.class.getName());
+    util.setJobWithoutMRCluster();
     util.startMiniCluster();
-    util.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void releaseCluster() throws Exception {
-    util.shutdownMiniMapReduceCluster();
     util.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithVisibilityLabels.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithVisibilityLabels.java
index 64ce9e1..a96a77e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithVisibilityLabels.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithVisibilityLabels.java
@@ -122,12 +122,11 @@ public class TestImportTSVWithVisibilityLabels implements Configurable {
     conf.set("hbase.coprocessor.region.classes", VisibilityController.class.getName());
     conf.setClass(VisibilityUtils.VISIBILITY_LABEL_GENERATOR_CLASS, SimpleScanLabelGenerator.class,
         ScanLabelGenerator.class);
+    util.setJobWithoutMRCluster();
     util.startMiniCluster();
     // Wait for the labels table to become available
     util.waitTableEnabled(VisibilityConstants.LABELS_TABLE_NAME.getName(), 50000);
     createLabels();
-    Admin admin = new HBaseAdmin(util.getConfiguration());
-    util.startMiniMapReduceCluster();
   }
 
   private static void createLabels() throws IOException, InterruptedException {
@@ -151,7 +150,6 @@ public class TestImportTSVWithVisibilityLabels implements Configurable {
 
   @AfterClass
   public static void releaseCluster() throws Exception {
-    util.shutdownMiniMapReduceCluster();
     util.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java
index 7a29c74..3613e24 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java
@@ -94,13 +94,12 @@ public class TestImportTsv implements Configurable {
 
   @BeforeClass
   public static void provisionCluster() throws Exception {
+    util.setJobWithoutMRCluster();
     util.startMiniCluster();
-    util.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void releaseCluster() throws Exception {
-    util.shutdownMiniMapReduceCluster();
     util.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableInputFormat.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableInputFormat.java
index a54df08..14edc30 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableInputFormat.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableInputFormat.java
@@ -71,6 +71,7 @@ public class TestMultiTableInputFormat {
     // switch TIF to log at DEBUG level
     TEST_UTIL.enableDebug(MultiTableInputFormat.class);
     TEST_UTIL.enableDebug(MultiTableInputFormatBase.class);
+    TEST_UTIL.setJobWithoutMRCluster();
     // start mini hbase cluster
     TEST_UTIL.startMiniCluster(3);
     // create and fill table
@@ -81,13 +82,10 @@ public class TestMultiTableInputFormat {
         TEST_UTIL.loadTable(table, INPUT_FAMILY, false);
       }
     }
-    // start MR cluster
-    TEST_UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void tearDownAfterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
   
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultithreadedTableMapper.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultithreadedTableMapper.java
index 6b2ee75..9a81990 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultithreadedTableMapper.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultithreadedTableMapper.java
@@ -72,18 +72,17 @@ public class TestMultithreadedTableMapper {
   public static void beforeClass() throws Exception {
     // Up the handlers; this test needs more than usual.
     UTIL.getConfiguration().setInt(HConstants.REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT, 10);
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
     HTable table =
         UTIL.createMultiRegionTable(MULTI_REGION_TABLE_NAME, new byte[][] { INPUT_FAMILY,
             OUTPUT_FAMILY });
     UTIL.loadTable(table, INPUT_FAMILY, false);
-    UTIL.startMiniMapReduceCluster();
     UTIL.waitUntilAllRegionsAssigned(MULTI_REGION_TABLE_NAME);
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    UTIL.shutdownMiniMapReduceCluster();
     UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java
index 817e7a9..0e04c67 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java
@@ -80,8 +80,8 @@ public class TestRowCounter {
   @BeforeClass
   public static void setUpBeforeClass()
       throws Exception {
+    TEST_UTIL.setJobWithoutMRCluster();
     TEST_UTIL.startMiniCluster();
-    TEST_UTIL.startMiniMapReduceCluster();
     Table table = TEST_UTIL.createTable(TableName.valueOf(TABLE_NAME), Bytes.toBytes(COL_FAM));
     writeRows(table);
     table.close();
@@ -94,7 +94,6 @@ public class TestRowCounter {
   public static void tearDownAfterClass()
       throws Exception {
     TEST_UTIL.shutdownMiniCluster();
-    TEST_UTIL.shutdownMiniMapReduceCluster();
   }
 
   /**
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java
index 2f1bee3..1b356e6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java
@@ -64,13 +64,12 @@ public class TestSyncTable {
   
   @BeforeClass
   public static void beforeClass() throws Exception {
+    TEST_UTIL.setJobWithoutMRCluster();
     TEST_UTIL.startMiniCluster(3);
-    TEST_UTIL.startMiniMapReduceCluster();
   }
   
   @AfterClass
   public static void afterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
   
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java
index c53510f..d404833 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java
@@ -77,20 +77,18 @@ public class TestTableInputFormat {
   private static final Log LOG = LogFactory.getLog(TestTableInputFormat.class);
 
   private final static HBaseTestingUtility UTIL = new HBaseTestingUtility();
-  private static MiniMRCluster mrCluster;
   static final byte[] FAMILY = Bytes.toBytes("family");
 
   private static final byte[][] columns = new byte[][] { FAMILY };
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
-    mrCluster = UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    UTIL.shutdownMiniMapReduceCluster();
     UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java
index b41263c..8e451cd 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java
@@ -81,18 +81,16 @@ public abstract class TestTableInputFormatScanBase {
     // switch TIF to log at DEBUG level
     TEST_UTIL.enableDebug(TableInputFormat.class);
     TEST_UTIL.enableDebug(TableInputFormatBase.class);
+    TEST_UTIL.setJobWithoutMRCluster();
     // start mini hbase cluster
     TEST_UTIL.startMiniCluster(3);
     // create and fill table
     table = TEST_UTIL.createMultiRegionTable(TableName.valueOf(TABLE_NAME), INPUT_FAMILY);
     TEST_UTIL.loadTable(table, INPUT_FAMILY, false);
-    // start MR cluster
-    TEST_UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void tearDownAfterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduceBase.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduceBase.java
index 8aed588..022d4c9 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduceBase.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduceBase.java
@@ -79,17 +79,16 @@ public abstract class TestTableMapReduceBase {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
     HTable table =
         UTIL.createMultiRegionTable(MULTI_REGION_TABLE_NAME, new byte[][] { INPUT_FAMILY,
             OUTPUT_FAMILY });
     UTIL.loadTable(table, INPUT_FAMILY, false);
-    UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    UTIL.shutdownMiniMapReduceCluster();
     UTIL.shutdownMiniCluster();
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTimeRangeMapRed.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTimeRangeMapRed.java
index cd85756..207f256 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTimeRangeMapRed.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTimeRangeMapRed.java
@@ -83,6 +83,7 @@ public class TestTimeRangeMapRed {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    UTIL.setJobWithoutMRCluster();
     UTIL.startMiniCluster();
   }
 
@@ -167,7 +168,6 @@ public class TestTimeRangeMapRed {
 
   private void runTestOnTable()
   throws IOException, InterruptedException, ClassNotFoundException {
-    UTIL.startMiniMapReduceCluster();
     Job job = null;
     try {
       job = new Job(UTIL.getConfiguration(), "test123");
@@ -184,7 +184,6 @@ public class TestTimeRangeMapRed {
       // TODO Auto-generated catch block
       e.printStackTrace();
     } finally {
-      UTIL.shutdownMiniMapReduceCluster();
       if (job != null) {
         FileUtil.fullyDelete(
           new File(job.getConfiguration().get("hadoop.tmp.dir")));
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java
index d6929a2..343fc64 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java
@@ -70,13 +70,12 @@ public class TestWALPlayer {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
+    TEST_UTIL.setJobWithoutMRCluster();
     cluster = TEST_UTIL.startMiniCluster();
-    TEST_UTIL.startMiniMapReduceCluster();
   }
 
   @AfterClass
   public static void afterClass() throws Exception {
-    TEST_UTIL.shutdownMiniMapReduceCluster();
     TEST_UTIL.shutdownMiniCluster();
   }
 
-- 
1.9.3 (Apple Git-50)

