diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AnnotationReadingPriorityFunction.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AnnotationReadingPriorityFunction.java
index 8438378..1eacc75 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AnnotationReadingPriorityFunction.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AnnotationReadingPriorityFunction.java
@@ -43,7 +43,6 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.protobuf.Message;
 import com.google.protobuf.TextFormat;
-import org.apache.hadoop.hbase.security.Superusers;
 import org.apache.hadoop.hbase.security.User;
 
 /**
@@ -176,19 +175,6 @@
     if (priorityByAnnotation >= 0) {
       return priorityByAnnotation;
     }
-
-    // all requests executed by super users have high QoS
-    try {
-      if (Superusers.isSuperUser(user)) {
-        return HConstants.ADMIN_QOS;
-      }
-    } catch (IllegalStateException ex) {
-      // Not good throwing an exception out of here, a runtime anyways.  Let the query go into the
-      // server and have it throw the exception if still an issue.  Just mark it normal priority.
-      if (LOG.isTraceEnabled()) LOG.trace("Marking normal priority after getting exception=" + ex);
-      return HConstants.NORMAL_QOS;
-    }
-
     return getBasePriority(header, param);
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestPriorityRpc.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestPriorityRpc.java
index 446d589..edad059 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestPriorityRpc.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestPriorityRpc.java
@@ -116,28 +116,6 @@
   }
 
   @Test
-  public void testQosFunctionForRequestCalledBySuperUser() throws Exception {
-    RequestHeader.Builder headerBuilder = RequestHeader.newBuilder();
-    headerBuilder.setMethodName("foo");
-    RequestHeader header = headerBuilder.build();
-    PriorityFunction qosFunc = regionServer.rpcServices.getPriority();
-
-    //test superusers
-    regionServer.conf.set(Superusers.SUPERUSER_CONF_KEY, "samplesuperuser");
-    Superusers.initialize(regionServer.conf);
-    assertEquals(HConstants.ADMIN_QOS, qosFunc.getPriority(header, null,
-      User.createUserForTesting(regionServer.conf, "samplesuperuser",
-        new String[]{"somegroup"})));
-
-    //test supergroups
-    regionServer.conf.set(Superusers.SUPERUSER_CONF_KEY, "@samplesupergroup");
-    Superusers.initialize(regionServer.conf);
-    assertEquals(HConstants.ADMIN_QOS, qosFunc.getPriority(header, null,
-      User.createUserForTesting(regionServer.conf, "regularuser",
-        new String[]{"samplesupergroup"})));
-  }
-
-  @Test
   public void testQosFunctionForScanMethod() throws IOException {
     RequestHeader.Builder headerBuilder = RequestHeader.newBuilder();
     headerBuilder.setMethodName("Scan");
