From ae95d8993589fe919699c0a8f4036f5961632091 Mon Sep 17 00:00:00 2001
From: Guanghao Zhang <zghaobac@gmail.com>
Date: Mon, 28 Nov 2016 19:12:39 +0800
Subject: [PATCH] HBASE-17178 Add region balance throttling

---
 .../apache/hadoop/hbase/master/RegionState.java    | 22 +++++++
 .../master/MetricsAssignmentManagerSource.java     |  3 +
 .../master/MetricsAssignmentManagerSourceImpl.java |  7 ++
 .../org/apache/hadoop/hbase/master/HMaster.java    | 32 ++++++---
 .../hbase/master/MetricsAssignmentManager.java     |  4 ++
 .../apache/hadoop/hbase/master/RegionStates.java   | 23 +++++--
 .../org/apache/hadoop/hbase/master/TestMaster.java | 75 ++++++++++++++++++++++
 7 files changed, 151 insertions(+), 15 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/master/RegionState.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/master/RegionState.java
index 04f62d4..4c96ce1 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/master/RegionState.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/master/RegionState.java
@@ -176,6 +176,8 @@ public class RegionState {
   private final HRegionInfo hri;
   private final ServerName serverName;
   private final State state;
+  // The time of region in transition
+  private long ritTime;
 
   public RegionState(HRegionInfo region, State state) {
     this(region, state, System.currentTimeMillis(), null);
@@ -188,10 +190,16 @@ public class RegionState {
 
   public RegionState(HRegionInfo region,
       State state, long stamp, ServerName serverName) {
+    this(region, state, stamp, serverName, 0);
+  }
+
+  public RegionState(HRegionInfo region,
+      State state, long stamp, ServerName serverName, long ritTime) {
     this.hri = region;
     this.state = state;
     this.stamp = stamp;
     this.serverName = serverName;
+    this.ritTime = ritTime;
   }
 
   public State getState() {
@@ -210,6 +218,20 @@ public class RegionState {
     return serverName;
   }
 
+  public long getRitTime() {
+    return ritTime;
+  }
+
+  /**
+   * Update the time of region in transition
+   * @param previousStamp previous RegionState's timestamp
+   * @return this RegionState
+   */
+  public RegionState updateRitTime(long previousStamp) {
+    this.ritTime += (this.stamp - previousStamp);
+    return this;
+  }
+
   /**
    * PENDING_CLOSE (to be removed) is the same as CLOSING
    */
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSource.java
index 6c8a280..9347469 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSource.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSource.java
@@ -47,11 +47,14 @@ public interface MetricsAssignmentManagerSource extends BaseSource {
   String RIT_OLDEST_AGE_NAME = "ritOldestAge";
   String ASSIGN_TIME_NAME = "assign";
   String BULK_ASSIGN_TIME_NAME = "bulkAssign";
+  String RIT_TIME_NAME = "ritTime";
 
   void updateAssignmentTime(long time);
 
   void updateBulkAssignTime(long time);
 
+  void updateRitTime(long time);
+
   /**
    * Set the number of regions in transition.
    *
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSourceImpl.java
index a2192d2..bb16c7a 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManagerSourceImpl.java
@@ -33,6 +33,7 @@ public class MetricsAssignmentManagerSourceImpl
   private MutableGaugeLong ritOldestAgeGauge;
   private MetricHistogram assignTimeHisto;
   private MetricHistogram bulkAssignTimeHisto;
+  private MetricHistogram ritTimeHisto;
 
   public MetricsAssignmentManagerSourceImpl() {
     this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);
@@ -50,6 +51,7 @@ public class MetricsAssignmentManagerSourceImpl
     ritOldestAgeGauge = metricsRegistry.newGauge(RIT_OLDEST_AGE_NAME, "", 0l);
     assignTimeHisto = metricsRegistry.newTimeHistogram(ASSIGN_TIME_NAME);
     bulkAssignTimeHisto = metricsRegistry.newTimeHistogram(BULK_ASSIGN_TIME_NAME);
+    ritTimeHisto = metricsRegistry.newTimeHistogram(RIT_TIME_NAME);
   }
 
   @Override
@@ -62,6 +64,11 @@ public class MetricsAssignmentManagerSourceImpl
     bulkAssignTimeHisto.add(time);
   }
 
+  @Override
+  public void updateRitTime(long time) {
+    ritTimeHisto.add(time);
+  }
+
   public void setRIT(int ritCount) {
     ritGauge.set(ritCount);
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index 0136ff5..3964762 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -1190,22 +1190,36 @@ public class HMaster extends HRegionServer implements MasterServices {
 
       long cutoffTime = System.currentTimeMillis() + maximumBalanceTime;
       int rpCount = 0;  // number of RegionPlans balanced so far
-      long totalRegPlanExecTime = 0;
       if (plans != null && !plans.isEmpty()) {
+        int averageRitTime = getConfiguration().getInt("hbase.balancer.rit.time", 1000);
+        // Compute the max number of regions in transition
+        int maxRegionsInTransition = (int) Math.ceil(plans.size() * averageRitTime * 1.0 / maximumBalanceTime);
+        LOG.info("Balancer plans size is " + plans.size()
+            + ", and the max number regions in transition is " + maxRegionsInTransition);
+
         for (RegionPlan plan: plans) {
           LOG.info("balance " + plan);
-          long balStartTime = System.currentTimeMillis();
           //TODO: bulk assign
           this.assignmentManager.balance(plan);
-          totalRegPlanExecTime += System.currentTimeMillis()-balStartTime;
           rpCount++;
-          if (rpCount < plans.size() &&
-              // if performing next balance exceeds cutoff time, exit the loop
-              (System.currentTimeMillis() + (totalRegPlanExecTime / rpCount)) > cutoffTime) {
-            //TODO: After balance, there should not be a cutoff time (keeping it as
+          boolean interrupted = false;
+          while (maxRegionsInTransition > 0
+              && this.assignmentManager.getRegionStates().getRegionsInTransitionCount()
+              >= maxRegionsInTransition) {
+            try {
+              // sleep if the number of regions in transition exceeds the limit
+              Thread.sleep(averageRitTime / 10);
+            } catch (InterruptedException ie) {
+              interrupted = true;
+            }
+          }
+          if (interrupted) Thread.currentThread().interrupt();
+          // if performing next balance exceeds cutoff time, exit the loop
+          if (rpCount < plans.size() && System.currentTimeMillis() > cutoffTime) {
+            // TODO: After balance, there should not be a cutoff time (keeping it as
             // a security net for now)
-            LOG.debug("No more balancing till next balance run; maximumBalanceTime=" +
-              maximumBalanceTime);
+            LOG.debug("No more balancing till next balance run; maximumBalanceTime="
+                + maximumBalanceTime);
             break;
           }
         }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManager.java
index b89d2da..ee0c6ba 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetricsAssignmentManager.java
@@ -41,6 +41,10 @@ public class MetricsAssignmentManager {
     assignmentManagerSource.updateBulkAssignTime(time);
   }
 
+  public void updateRitTime(long time) {
+    assignmentManagerSource.updateRitTime(time);
+  }
+
   /**
    * set new value for number of regions in transition.
    * @param ritCount
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java
index f69925a..a2cca3b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java
@@ -20,13 +20,10 @@ package org.apache.hadoop.hbase.master;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -51,7 +48,6 @@ import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.RegionReplicaUtil;
 import org.apache.hadoop.hbase.master.RegionState.State;
 import org.apache.hadoop.hbase.client.TableState;
-import org.apache.hadoop.hbase.constraint.ConstraintException;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.Pair;
@@ -236,6 +232,13 @@ public class RegionStates {
   }
 
   /**
+   * Get the number of regions in transition.
+   */
+  public synchronized int getRegionsInTransitionCount() {
+    return regionsInTransition.size();
+  }
+
+  /**
    * @return True if specified region in transition.
    */
   public synchronized boolean isRegionInTransition(final HRegionInfo hri) {
@@ -448,7 +451,12 @@ public class RegionStates {
     updateRegionState(hri, State.OPEN, serverName, openSeqNum);
 
     synchronized (this) {
-      regionsInTransition.remove(encodedName);
+      RegionState regionState = regionsInTransition.remove(encodedName);
+      if (regionState != null) {
+        long ritTime = System.currentTimeMillis() - regionState.getStamp()
+            + regionState.getRitTime();
+        this.server.getAssignmentManager().getAssignmentManagerMetrics().updateRitTime(ritTime);
+      }
       ServerName oldServerName = regionAssignments.put(hri, serverName);
       if (!serverName.equals(oldServerName)) {
         if (LOG.isDebugEnabled()) {
@@ -1123,7 +1131,10 @@ public class RegionStates {
     }
 
     synchronized (this) {
-      regionsInTransition.put(encodedName, regionState);
+      RegionState oldRegionState = regionsInTransition.put(encodedName, regionState);
+      if (oldRegionState != null) {
+        regionState.updateRitTime(oldRegionState.getStamp());
+      }
       putRegionState(regionState);
 
       // For these states, region should be properly closed.
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMaster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMaster.java
index 19a5d8a..21ae325 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMaster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMaster.java
@@ -25,6 +25,8 @@ import static org.junit.Assert.fail;
 
 import java.io.IOException;
 import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -42,6 +44,8 @@ import org.apache.hadoop.hbase.UnknownRegionException;
 import org.apache.hadoop.hbase.client.Admin;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.client.TableState;
+import org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer;
+import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.testclassification.MasterTests;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -67,6 +71,8 @@ public class TestMaster {
   public static void beforeAllTests() throws Exception {
     // we will retry operations when PleaseHoldException is thrown
     TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 3);
+    TEST_UTIL.getConfiguration().set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,
+      "org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer");
     // Start a cluster of two regionservers.
     TEST_UTIL.startMiniCluster(2);
     admin = TEST_UTIL.getHBaseAdmin();
@@ -181,5 +187,74 @@ public class TestMaster {
       TEST_UTIL.deleteTable(tableName);
     }
   }
+
+  @Test(timeout = 60000)
+  public void testBalancerThrottling() throws Exception {
+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();
+    final HMaster master = cluster.getMaster();
+    byte[] startKey = new byte[] { 0x00 };
+    byte[] stopKey = new byte[] { 0x7f };
+    TEST_UTIL.createTable(TABLENAME, new byte[][] { FAMILYNAME }, 1, startKey, stopKey,
+      100);
+
+    // Default max balancing time is 300000 and default region in transition time is 1000
+    // Then the master can balance the region one by one
+    unbalance(master);
+    AtomicInteger maxCount = new AtomicInteger(0);
+    AtomicBoolean stop = new AtomicBoolean(false);
+    Thread checker = startBalancerChecker(master, maxCount, stop);
+    master.balance();
+    stop.set(true);
+    checker.interrupt();
+    checker.join();
+    assertTrue("max regions in transition: " + maxCount.get(), maxCount.get() == 1);
+
+    // Update the region in transition time to 60000
+    // Then the master move at most (100 / 2) * 60000 / 300000 = 10
+    master.getConfiguration().setInt("hbase.balancer.rit.time", 60000);
+    unbalance(master);
+    maxCount = new AtomicInteger(0);
+    stop = new AtomicBoolean(false);
+    checker = startBalancerChecker(master, maxCount, stop);
+    master.balance();
+    stop.set(true);
+    checker.interrupt();
+    checker.join();
+    assertTrue("max regions in transition: " + maxCount.get(), maxCount.get() == 10);
+  }
+
+  private Thread startBalancerChecker(HMaster master, AtomicInteger maxCount, AtomicBoolean stop) {
+    Runnable checker = new Runnable() {
+      @Override
+      public void run() {
+        while (!stop.get()) {
+          maxCount.set(Math.max(maxCount.get(), master.getAssignmentManager().getRegionStates()
+              .getRegionsInTransitionCount()));
+          try {
+            Thread.sleep(10);
+          } catch (InterruptedException e) {
+            e.printStackTrace();
+          }
+        }
+      }
+    };
+    Thread thread = new Thread(checker);
+    thread.start();
+    return thread;
+  }
+
+  private void unbalance(HMaster master) throws Exception {
+    while (master.getAssignmentManager().getRegionStates().getRegionsInTransitionCount() > 0) {
+      Thread.sleep(100);
+    }
+    HRegionServer biasedServer = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
+    for (HRegionInfo regionInfo : TEST_UTIL.getAdmin().getTableRegions(TABLENAME)) {
+      master.move(regionInfo.getEncodedNameAsBytes(),
+        Bytes.toBytes(biasedServer.getServerName().getServerName()));
+    }
+    while (master.getAssignmentManager().getRegionStates().getRegionsInTransitionCount() > 0) {
+      Thread.sleep(100);
+    }
+  }
 }
 
-- 
1.9.1

