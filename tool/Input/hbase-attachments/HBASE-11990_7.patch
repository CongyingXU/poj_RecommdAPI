diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
index 5189139..06230fb 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
@@ -34,7 +34,9 @@ import org.apache.hadoop.classification.InterfaceAudience;
 import org.apache.hadoop.classification.InterfaceStability;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.filter.Filter;
+import org.apache.hadoop.hbase.filter.FilterList;
 import org.apache.hadoop.hbase.filter.IncompatibleFilterException;
+import org.apache.hadoop.hbase.filter.PrefixFilter;
 import org.apache.hadoop.hbase.io.TimeRange;
 import org.apache.hadoop.hbase.security.access.Permission;
 import org.apache.hadoop.hbase.security.visibility.Authorizations;
@@ -109,6 +111,10 @@ public class Scan extends Query {
 
   private byte [] startRow = HConstants.EMPTY_START_ROW;
   private byte [] stopRow  = HConstants.EMPTY_END_ROW;
+
+  private Filter userFilter      = null;
+  private Filter rowPrefixFilter = null;
+
   private int maxVersions = 1;
   private int batch = -1;
 
@@ -348,7 +354,6 @@ public class Scan extends Query {
   /**
    * Set the stop row.
    * @param stopRow row to end at (exclusive)
-   * Note: In order to make stopRow inclusive add a trailing 0 byte
    * @return this
    */
   public Scan setStopRow(byte [] stopRow) {
@@ -439,11 +444,53 @@ public class Scan extends Query {
 
   @Override
   public Scan setFilter(Filter filter) {
-    super.setFilter(filter);
+    this.userFilter = filter;
+    super.setFilter(combineUserFilterAndRowPrefixFilter());
+    return this;
+  }
+
+  /**
+   * Set the prefix all row keys must start with.
+   * This is a utility method that sets right the start and stop row and introduces
+   * the right filter to achieve this.
+   * @param rowPrefix the prefix all rows must start with.
+   * @return this
+   */
+  public Scan addRowPrefixFilter(byte [] rowPrefix) {
+    if (rowPrefix == null || rowPrefix.length == 0) {
+      setStartRow(HConstants.EMPTY_START_ROW);
+      rowPrefixFilter = null;
+    } else {
+      setStartRow(rowPrefix);
+      rowPrefixFilter = new PrefixFilter(rowPrefix);
+    }
+
+    setStopRow(HConstants.EMPTY_END_ROW); // Always end of the table
+
+    super.setFilter(combineUserFilterAndRowPrefixFilter());
     return this;
   }
 
   /**
+   * Internal utility to correctly combine the rowPrefixFilter and userFilter
+   * @return the combined filter
+   */
+  private Filter combineUserFilterAndRowPrefixFilter() {
+    if (this.rowPrefixFilter == null) {
+      return this.userFilter;
+    }
+
+    if (this.userFilter == null) {
+      return this.rowPrefixFilter;
+    }
+
+    FilterList list = new FilterList(FilterList.Operator.MUST_PASS_ALL);
+    list.addFilter(this.rowPrefixFilter);
+    list.addFilter(this.userFilter);
+    return list;
+  }
+
+  /**
    * Setting the familyMap
    * @param familyMap map of family to qualifier
    * @return this
